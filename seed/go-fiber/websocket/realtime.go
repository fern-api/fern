// Code generated by Fern. DO NOT EDIT.

package websocket

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/websocket/fern/internal"
	big "math/big"
)

var (
	receiveEventFieldAlpha = big.NewInt(1 << 0)
	receiveEventFieldBeta  = big.NewInt(1 << 1)
)

type ReceiveEvent struct {
	Alpha string `json:"alpha" url:"alpha"`
	Beta  int    `json:"beta" url:"beta"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *ReceiveEvent) GetAlpha() string {
	if r == nil {
		return ""
	}
	return r.Alpha
}

func (r *ReceiveEvent) GetBeta() int {
	if r == nil {
		return 0
	}
	return r.Beta
}

func (r *ReceiveEvent) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceiveEvent) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetAlpha sets the Alpha field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveEvent) SetAlpha(alpha string) {
	r.Alpha = alpha
	r.require(receiveEventFieldAlpha)
}

// SetBeta sets the Beta field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveEvent) SetBeta(beta int) {
	r.Beta = beta
	r.require(receiveEventFieldBeta)
}

func (r *ReceiveEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceiveEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceiveEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *ReceiveEvent) MarshalJSON() ([]byte, error) {
	type embed ReceiveEvent
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *ReceiveEvent) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	receiveEvent2FieldGamma   = big.NewInt(1 << 0)
	receiveEvent2FieldDelta   = big.NewInt(1 << 1)
	receiveEvent2FieldEpsilon = big.NewInt(1 << 2)
)

type ReceiveEvent2 struct {
	Gamma   string `json:"gamma" url:"gamma"`
	Delta   int    `json:"delta" url:"delta"`
	Epsilon bool   `json:"epsilon" url:"epsilon"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *ReceiveEvent2) GetGamma() string {
	if r == nil {
		return ""
	}
	return r.Gamma
}

func (r *ReceiveEvent2) GetDelta() int {
	if r == nil {
		return 0
	}
	return r.Delta
}

func (r *ReceiveEvent2) GetEpsilon() bool {
	if r == nil {
		return false
	}
	return r.Epsilon
}

func (r *ReceiveEvent2) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceiveEvent2) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetGamma sets the Gamma field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveEvent2) SetGamma(gamma string) {
	r.Gamma = gamma
	r.require(receiveEvent2FieldGamma)
}

// SetDelta sets the Delta field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveEvent2) SetDelta(delta int) {
	r.Delta = delta
	r.require(receiveEvent2FieldDelta)
}

// SetEpsilon sets the Epsilon field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveEvent2) SetEpsilon(epsilon bool) {
	r.Epsilon = epsilon
	r.require(receiveEvent2FieldEpsilon)
}

func (r *ReceiveEvent2) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceiveEvent2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceiveEvent2(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *ReceiveEvent2) MarshalJSON() ([]byte, error) {
	type embed ReceiveEvent2
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *ReceiveEvent2) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	receiveEvent3FieldReceiveText3 = big.NewInt(1 << 0)
)

type ReceiveEvent3 struct {
	ReceiveText3 string `json:"receiveText3" url:"receiveText3"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *ReceiveEvent3) GetReceiveText3() string {
	if r == nil {
		return ""
	}
	return r.ReceiveText3
}

func (r *ReceiveEvent3) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceiveEvent3) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetReceiveText3 sets the ReceiveText3 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveEvent3) SetReceiveText3(receiveText3 string) {
	r.ReceiveText3 = receiveText3
	r.require(receiveEvent3FieldReceiveText3)
}

func (r *ReceiveEvent3) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceiveEvent3
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceiveEvent3(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *ReceiveEvent3) MarshalJSON() ([]byte, error) {
	type embed ReceiveEvent3
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *ReceiveEvent3) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	sendEventFieldSendText  = big.NewInt(1 << 0)
	sendEventFieldSendParam = big.NewInt(1 << 1)
)

type SendEvent struct {
	SendText  string `json:"sendText" url:"sendText"`
	SendParam int    `json:"sendParam" url:"sendParam"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SendEvent) GetSendText() string {
	if s == nil {
		return ""
	}
	return s.SendText
}

func (s *SendEvent) GetSendParam() int {
	if s == nil {
		return 0
	}
	return s.SendParam
}

func (s *SendEvent) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendEvent) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetSendText sets the SendText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendEvent) SetSendText(sendText string) {
	s.SendText = sendText
	s.require(sendEventFieldSendText)
}

// SetSendParam sets the SendParam field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendEvent) SetSendParam(sendParam int) {
	s.SendParam = sendParam
	s.require(sendEventFieldSendParam)
}

func (s *SendEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler SendEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SendEvent) MarshalJSON() ([]byte, error) {
	type embed SendEvent
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendEvent) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sendEvent2FieldSendText2  = big.NewInt(1 << 0)
	sendEvent2FieldSendParam2 = big.NewInt(1 << 1)
)

type SendEvent2 struct {
	SendText2  string `json:"sendText2" url:"sendText2"`
	SendParam2 bool   `json:"sendParam2" url:"sendParam2"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SendEvent2) GetSendText2() string {
	if s == nil {
		return ""
	}
	return s.SendText2
}

func (s *SendEvent2) GetSendParam2() bool {
	if s == nil {
		return false
	}
	return s.SendParam2
}

func (s *SendEvent2) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendEvent2) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetSendText2 sets the SendText2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendEvent2) SetSendText2(sendText2 string) {
	s.SendText2 = sendText2
	s.require(sendEvent2FieldSendText2)
}

// SetSendParam2 sets the SendParam2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendEvent2) SetSendParam2(sendParam2 bool) {
	s.SendParam2 = sendParam2
	s.require(sendEvent2FieldSendParam2)
}

func (s *SendEvent2) UnmarshalJSON(data []byte) error {
	type unmarshaler SendEvent2
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendEvent2(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SendEvent2) MarshalJSON() ([]byte, error) {
	type embed SendEvent2
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendEvent2) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	receiveSnakeCaseFieldReceiveText = big.NewInt(1 << 0)
	receiveSnakeCaseFieldReceiveInt  = big.NewInt(1 << 1)
)

type ReceiveSnakeCase struct {
	ReceiveText string `json:"receive_text" url:"receive_text"`
	ReceiveInt  int    `json:"receive_int" url:"receive_int"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *ReceiveSnakeCase) GetReceiveText() string {
	if r == nil {
		return ""
	}
	return r.ReceiveText
}

func (r *ReceiveSnakeCase) GetReceiveInt() int {
	if r == nil {
		return 0
	}
	return r.ReceiveInt
}

func (r *ReceiveSnakeCase) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReceiveSnakeCase) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetReceiveText sets the ReceiveText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveSnakeCase) SetReceiveText(receiveText string) {
	r.ReceiveText = receiveText
	r.require(receiveSnakeCaseFieldReceiveText)
}

// SetReceiveInt sets the ReceiveInt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ReceiveSnakeCase) SetReceiveInt(receiveInt int) {
	r.ReceiveInt = receiveInt
	r.require(receiveSnakeCaseFieldReceiveInt)
}

func (r *ReceiveSnakeCase) UnmarshalJSON(data []byte) error {
	type unmarshaler ReceiveSnakeCase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReceiveSnakeCase(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *ReceiveSnakeCase) MarshalJSON() ([]byte, error) {
	type embed ReceiveSnakeCase
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *ReceiveSnakeCase) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	sendSnakeCaseFieldSendText  = big.NewInt(1 << 0)
	sendSnakeCaseFieldSendParam = big.NewInt(1 << 1)
)

type SendSnakeCase struct {
	SendText  string `json:"send_text" url:"send_text"`
	SendParam int    `json:"send_param" url:"send_param"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SendSnakeCase) GetSendText() string {
	if s == nil {
		return ""
	}
	return s.SendText
}

func (s *SendSnakeCase) GetSendParam() int {
	if s == nil {
		return 0
	}
	return s.SendParam
}

func (s *SendSnakeCase) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SendSnakeCase) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetSendText sets the SendText field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendSnakeCase) SetSendText(sendText string) {
	s.SendText = sendText
	s.require(sendSnakeCaseFieldSendText)
}

// SetSendParam sets the SendParam field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SendSnakeCase) SetSendParam(sendParam int) {
	s.SendParam = sendParam
	s.require(sendSnakeCaseFieldSendParam)
}

func (s *SendSnakeCase) UnmarshalJSON(data []byte) error {
	type unmarshaler SendSnakeCase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SendSnakeCase(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SendSnakeCase) MarshalJSON() ([]byte, error) {
	type embed SendSnakeCase
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SendSnakeCase) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
