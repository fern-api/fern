// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/query-parameters-openapi/fern/internal"
	big "math/big"
	time "time"
)

type SearchRequest struct {
	Limit            int                            `query:"limit"`
	Id               string                         `query:"id"`
	Date             string                         `query:"date"`
	Deadline         time.Time                      `query:"deadline"`
	Bytes            string                         `query:"bytes"`
	User             *User                          `query:"user"`
	UserList         []*User                        `query:"userList"`
	OptionalDeadline *time.Time                     `query:"optionalDeadline"`
	KeyValue         map[string]*string             `query:"keyValue"`
	OptionalString   *string                        `query:"optionalString"`
	NestedUser       *NestedUser                    `query:"nestedUser"`
	OptionalUser     *User                          `query:"optionalUser"`
	ExcludeUser      []*User                        `query:"excludeUser"`
	Filter           []*string                      `query:"filter"`
	Neighbor         *User                          `query:"neighbor"`
	NeighborRequired *SearchRequestNeighborRequired `query:"neighborRequired"`
}

var (
	nestedUserFieldName = big.NewInt(1 << 0)
	nestedUserFieldUser = big.NewInt(1 << 1)
)

type NestedUser struct {
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	User *User   `json:"user,omitempty" url:"user,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (n *NestedUser) GetName() *string {
	if n == nil {
		return nil
	}
	return n.Name
}

func (n *NestedUser) GetUser() *User {
	if n == nil {
		return nil
	}
	return n.User
}

func (n *NestedUser) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedUser) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NestedUser) SetName(name *string) {
	n.Name = name
	n.require(nestedUserFieldName)
}

// SetUser sets the User field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NestedUser) SetUser(user *User) {
	n.User = user
	n.require(nestedUserFieldUser)
}

func (n *NestedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	return nil
}

func (n *NestedUser) MarshalJSON() ([]byte, error) {
	type embed NestedUser
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NestedUser) String() string {
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type SearchRequestNeighborRequired struct {
	User       *User
	NestedUser *NestedUser
	String     string
	Integer    int

	typ string
}

func (s *SearchRequestNeighborRequired) GetUser() *User {
	if s == nil {
		return nil
	}
	return s.User
}

func (s *SearchRequestNeighborRequired) GetNestedUser() *NestedUser {
	if s == nil {
		return nil
	}
	return s.NestedUser
}

func (s *SearchRequestNeighborRequired) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SearchRequestNeighborRequired) GetInteger() int {
	if s == nil {
		return 0
	}
	return s.Integer
}

func (s *SearchRequestNeighborRequired) UnmarshalJSON(data []byte) error {
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		s.typ = "User"
		s.User = valueUser
		return nil
	}
	valueNestedUser := new(NestedUser)
	if err := json.Unmarshal(data, &valueNestedUser); err == nil {
		s.typ = "NestedUser"
		s.NestedUser = valueNestedUser
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		s.typ = "Integer"
		s.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SearchRequestNeighborRequired) MarshalJSON() ([]byte, error) {
	if s.typ == "User" || s.User != nil {
		return json.Marshal(s.User)
	}
	if s.typ == "NestedUser" || s.NestedUser != nil {
		return json.Marshal(s.NestedUser)
	}
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return json.Marshal(s.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SearchRequestNeighborRequiredVisitor interface {
	VisitUser(*User) error
	VisitNestedUser(*NestedUser) error
	VisitString(string) error
	VisitInteger(int) error
}

func (s *SearchRequestNeighborRequired) Accept(visitor SearchRequestNeighborRequiredVisitor) error {
	if s.typ == "User" || s.User != nil {
		return visitor.VisitUser(s.User)
	}
	if s.typ == "NestedUser" || s.NestedUser != nil {
		return visitor.VisitNestedUser(s.NestedUser)
	}
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return visitor.VisitInteger(s.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

var (
	searchResponseFieldResults = big.NewInt(1 << 0)
)

type SearchResponse struct {
	Results []string `json:"results,omitempty" url:"results,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SearchResponse) GetResults() []string {
	if s == nil {
		return nil
	}
	return s.Results
}

func (s *SearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResponse) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchResponse) SetResults(results []string) {
	s.Results = results
	s.require(searchResponseFieldResults)
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SearchResponse) MarshalJSON() ([]byte, error) {
	type embed SearchResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SearchResponse) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	userFieldName = big.NewInt(1 << 0)
	userFieldTags = big.NewInt(1 << 1)
)

type User struct {
	Name *string  `json:"name,omitempty" url:"name,omitempty"`
	Tags []string `json:"tags,omitempty" url:"tags,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (u *User) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *User) GetTags() []string {
	if u == nil {
		return nil
	}
	return u.Tags
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetName(name *string) {
	u.Name = name
	u.require(userFieldName)
}

// SetTags sets the Tags field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetTags(tags []string) {
	u.Tags = tags
	u.require(userFieldTags)
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *User) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
