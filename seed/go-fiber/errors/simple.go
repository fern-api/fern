// Code generated by Fern. DO NOT EDIT.

package errors

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/errors/fern/internal"
	big "math/big"
)

var (
	fooRequestFieldBar = big.NewInt(1 << 0)
)

type FooRequest struct {
	Bar string `json:"bar" url:"bar"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *FooRequest) GetBar() string {
	if f == nil {
		return ""
	}
	return f.Bar
}

func (f *FooRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FooRequest) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetBar sets the Bar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FooRequest) SetBar(bar string) {
	f.Bar = bar
	f.require(fooRequestFieldBar)
}

func (f *FooRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FooRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FooRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *FooRequest) MarshalJSON() ([]byte, error) {
	type embed FooRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FooRequest) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	fooResponseFieldBar = big.NewInt(1 << 0)
)

type FooResponse struct {
	Bar string `json:"bar" url:"bar"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *FooResponse) GetBar() string {
	if f == nil {
		return ""
	}
	return f.Bar
}

func (f *FooResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FooResponse) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetBar sets the Bar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FooResponse) SetBar(bar string) {
	f.Bar = bar
	f.require(fooResponseFieldBar)
}

func (f *FooResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FooResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FooResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *FooResponse) MarshalJSON() ([]byte, error) {
	type embed FooResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FooResponse) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}
