// Code generated by Fern. DO NOT EDIT.

package clientsideparams

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/client-side-params/fern/internal"
	big "math/big"
	time "time"
)

// Represents a client application
var (
	clientFieldClientId                = big.NewInt(1 << 0)
	clientFieldTenant                  = big.NewInt(1 << 1)
	clientFieldName                    = big.NewInt(1 << 2)
	clientFieldDescription             = big.NewInt(1 << 3)
	clientFieldGlobal                  = big.NewInt(1 << 4)
	clientFieldClientSecret            = big.NewInt(1 << 5)
	clientFieldAppType                 = big.NewInt(1 << 6)
	clientFieldLogoUri                 = big.NewInt(1 << 7)
	clientFieldIsFirstParty            = big.NewInt(1 << 8)
	clientFieldOidcConformant          = big.NewInt(1 << 9)
	clientFieldCallbacks               = big.NewInt(1 << 10)
	clientFieldAllowedOrigins          = big.NewInt(1 << 11)
	clientFieldWebOrigins              = big.NewInt(1 << 12)
	clientFieldGrantTypes              = big.NewInt(1 << 13)
	clientFieldJwtConfiguration        = big.NewInt(1 << 14)
	clientFieldSigningKeys             = big.NewInt(1 << 15)
	clientFieldEncryptionKey           = big.NewInt(1 << 16)
	clientFieldSso                     = big.NewInt(1 << 17)
	clientFieldSsoDisabled             = big.NewInt(1 << 18)
	clientFieldCrossOriginAuth         = big.NewInt(1 << 19)
	clientFieldCrossOriginLoc          = big.NewInt(1 << 20)
	clientFieldCustomLoginPageOn       = big.NewInt(1 << 21)
	clientFieldCustomLoginPage         = big.NewInt(1 << 22)
	clientFieldCustomLoginPagePreview  = big.NewInt(1 << 23)
	clientFieldFormTemplate            = big.NewInt(1 << 24)
	clientFieldIsHerokuApp             = big.NewInt(1 << 25)
	clientFieldAddons                  = big.NewInt(1 << 26)
	clientFieldTokenEndpointAuthMethod = big.NewInt(1 << 27)
	clientFieldClientMetadata          = big.NewInt(1 << 28)
	clientFieldMobile                  = big.NewInt(1 << 29)
)

type Client struct {
	// The unique client identifier
	ClientId string `json:"client_id" url:"client_id"`
	// The tenant name
	Tenant *string `json:"tenant,omitempty" url:"tenant,omitempty"`
	// Name of the client
	Name string `json:"name" url:"name"`
	// Free text description of the client
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// Whether this is a global client
	Global *bool `json:"global,omitempty" url:"global,omitempty"`
	// The client secret (only for non-public clients)
	ClientSecret *string `json:"client_secret,omitempty" url:"client_secret,omitempty"`
	// The type of application (spa, native, regular_web, non_interactive)
	AppType *string `json:"app_type,omitempty" url:"app_type,omitempty"`
	// URL of the client logo
	LogoUri *string `json:"logo_uri,omitempty" url:"logo_uri,omitempty"`
	// Whether this client is a first party client
	IsFirstParty *bool `json:"is_first_party,omitempty" url:"is_first_party,omitempty"`
	// Whether this client conforms to OIDC specifications
	OidcConformant *bool `json:"oidc_conformant,omitempty" url:"oidc_conformant,omitempty"`
	// Allowed callback URLs
	Callbacks []string `json:"callbacks,omitempty" url:"callbacks,omitempty"`
	// Allowed origins for CORS
	AllowedOrigins []string `json:"allowed_origins,omitempty" url:"allowed_origins,omitempty"`
	// Allowed web origins for CORS
	WebOrigins []string `json:"web_origins,omitempty" url:"web_origins,omitempty"`
	// Allowed grant types
	GrantTypes []string `json:"grant_types,omitempty" url:"grant_types,omitempty"`
	// JWT configuration for the client
	JwtConfiguration map[string]interface{} `json:"jwt_configuration,omitempty" url:"jwt_configuration,omitempty"`
	// Client signing keys
	SigningKeys []map[string]interface{} `json:"signing_keys,omitempty" url:"signing_keys,omitempty"`
	// Encryption key
	EncryptionKey map[string]interface{} `json:"encryption_key,omitempty" url:"encryption_key,omitempty"`
	// Whether SSO is enabled
	Sso *bool `json:"sso,omitempty" url:"sso,omitempty"`
	// Whether SSO is disabled
	SsoDisabled *bool `json:"sso_disabled,omitempty" url:"sso_disabled,omitempty"`
	// Whether to use cross-origin authentication
	CrossOriginAuth *bool `json:"cross_origin_auth,omitempty" url:"cross_origin_auth,omitempty"`
	// URL for cross-origin authentication
	CrossOriginLoc *string `json:"cross_origin_loc,omitempty" url:"cross_origin_loc,omitempty"`
	// Whether a custom login page is enabled
	CustomLoginPageOn *bool `json:"custom_login_page_on,omitempty" url:"custom_login_page_on,omitempty"`
	// Custom login page URL
	CustomLoginPage *string `json:"custom_login_page,omitempty" url:"custom_login_page,omitempty"`
	// Custom login page preview URL
	CustomLoginPagePreview *string `json:"custom_login_page_preview,omitempty" url:"custom_login_page_preview,omitempty"`
	// Form template for WS-Federation
	FormTemplate *string `json:"form_template,omitempty" url:"form_template,omitempty"`
	// Whether this is a Heroku application
	IsHerokuApp *bool `json:"is_heroku_app,omitempty" url:"is_heroku_app,omitempty"`
	// Addons enabled for this client
	Addons map[string]interface{} `json:"addons,omitempty" url:"addons,omitempty"`
	// Requested authentication method for the token endpoint
	TokenEndpointAuthMethod *string `json:"token_endpoint_auth_method,omitempty" url:"token_endpoint_auth_method,omitempty"`
	// Metadata associated with the client
	ClientMetadata map[string]interface{} `json:"client_metadata,omitempty" url:"client_metadata,omitempty"`
	// Mobile app settings
	Mobile map[string]interface{} `json:"mobile,omitempty" url:"mobile,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (c *Client) GetClientId() string {
	if c == nil {
		return ""
	}
	return c.ClientId
}

func (c *Client) GetTenant() *string {
	if c == nil {
		return nil
	}
	return c.Tenant
}

func (c *Client) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *Client) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *Client) GetGlobal() *bool {
	if c == nil {
		return nil
	}
	return c.Global
}

func (c *Client) GetClientSecret() *string {
	if c == nil {
		return nil
	}
	return c.ClientSecret
}

func (c *Client) GetAppType() *string {
	if c == nil {
		return nil
	}
	return c.AppType
}

func (c *Client) GetLogoUri() *string {
	if c == nil {
		return nil
	}
	return c.LogoUri
}

func (c *Client) GetIsFirstParty() *bool {
	if c == nil {
		return nil
	}
	return c.IsFirstParty
}

func (c *Client) GetOidcConformant() *bool {
	if c == nil {
		return nil
	}
	return c.OidcConformant
}

func (c *Client) GetCallbacks() []string {
	if c == nil {
		return nil
	}
	return c.Callbacks
}

func (c *Client) GetAllowedOrigins() []string {
	if c == nil {
		return nil
	}
	return c.AllowedOrigins
}

func (c *Client) GetWebOrigins() []string {
	if c == nil {
		return nil
	}
	return c.WebOrigins
}

func (c *Client) GetGrantTypes() []string {
	if c == nil {
		return nil
	}
	return c.GrantTypes
}

func (c *Client) GetJwtConfiguration() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.JwtConfiguration
}

func (c *Client) GetSigningKeys() []map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.SigningKeys
}

func (c *Client) GetEncryptionKey() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.EncryptionKey
}

func (c *Client) GetSso() *bool {
	if c == nil {
		return nil
	}
	return c.Sso
}

func (c *Client) GetSsoDisabled() *bool {
	if c == nil {
		return nil
	}
	return c.SsoDisabled
}

func (c *Client) GetCrossOriginAuth() *bool {
	if c == nil {
		return nil
	}
	return c.CrossOriginAuth
}

func (c *Client) GetCrossOriginLoc() *string {
	if c == nil {
		return nil
	}
	return c.CrossOriginLoc
}

func (c *Client) GetCustomLoginPageOn() *bool {
	if c == nil {
		return nil
	}
	return c.CustomLoginPageOn
}

func (c *Client) GetCustomLoginPage() *string {
	if c == nil {
		return nil
	}
	return c.CustomLoginPage
}

func (c *Client) GetCustomLoginPagePreview() *string {
	if c == nil {
		return nil
	}
	return c.CustomLoginPagePreview
}

func (c *Client) GetFormTemplate() *string {
	if c == nil {
		return nil
	}
	return c.FormTemplate
}

func (c *Client) GetIsHerokuApp() *bool {
	if c == nil {
		return nil
	}
	return c.IsHerokuApp
}

func (c *Client) GetAddons() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Addons
}

func (c *Client) GetTokenEndpointAuthMethod() *string {
	if c == nil {
		return nil
	}
	return c.TokenEndpointAuthMethod
}

func (c *Client) GetClientMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.ClientMetadata
}

func (c *Client) GetMobile() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Mobile
}

func (c *Client) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Client) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetClientId sets the ClientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetClientId(clientId string) {
	c.ClientId = clientId
	c.require(clientFieldClientId)
}

// SetTenant sets the Tenant field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetTenant(tenant *string) {
	c.Tenant = tenant
	c.require(clientFieldTenant)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetName(name string) {
	c.Name = name
	c.require(clientFieldName)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetDescription(description *string) {
	c.Description = description
	c.require(clientFieldDescription)
}

// SetGlobal sets the Global field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetGlobal(global *bool) {
	c.Global = global
	c.require(clientFieldGlobal)
}

// SetClientSecret sets the ClientSecret field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetClientSecret(clientSecret *string) {
	c.ClientSecret = clientSecret
	c.require(clientFieldClientSecret)
}

// SetAppType sets the AppType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetAppType(appType *string) {
	c.AppType = appType
	c.require(clientFieldAppType)
}

// SetLogoUri sets the LogoUri field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetLogoUri(logoUri *string) {
	c.LogoUri = logoUri
	c.require(clientFieldLogoUri)
}

// SetIsFirstParty sets the IsFirstParty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetIsFirstParty(isFirstParty *bool) {
	c.IsFirstParty = isFirstParty
	c.require(clientFieldIsFirstParty)
}

// SetOidcConformant sets the OidcConformant field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetOidcConformant(oidcConformant *bool) {
	c.OidcConformant = oidcConformant
	c.require(clientFieldOidcConformant)
}

// SetCallbacks sets the Callbacks field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetCallbacks(callbacks []string) {
	c.Callbacks = callbacks
	c.require(clientFieldCallbacks)
}

// SetAllowedOrigins sets the AllowedOrigins field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetAllowedOrigins(allowedOrigins []string) {
	c.AllowedOrigins = allowedOrigins
	c.require(clientFieldAllowedOrigins)
}

// SetWebOrigins sets the WebOrigins field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetWebOrigins(webOrigins []string) {
	c.WebOrigins = webOrigins
	c.require(clientFieldWebOrigins)
}

// SetGrantTypes sets the GrantTypes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetGrantTypes(grantTypes []string) {
	c.GrantTypes = grantTypes
	c.require(clientFieldGrantTypes)
}

// SetJwtConfiguration sets the JwtConfiguration field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetJwtConfiguration(jwtConfiguration map[string]interface{}) {
	c.JwtConfiguration = jwtConfiguration
	c.require(clientFieldJwtConfiguration)
}

// SetSigningKeys sets the SigningKeys field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetSigningKeys(signingKeys []map[string]interface{}) {
	c.SigningKeys = signingKeys
	c.require(clientFieldSigningKeys)
}

// SetEncryptionKey sets the EncryptionKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetEncryptionKey(encryptionKey map[string]interface{}) {
	c.EncryptionKey = encryptionKey
	c.require(clientFieldEncryptionKey)
}

// SetSso sets the Sso field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetSso(sso *bool) {
	c.Sso = sso
	c.require(clientFieldSso)
}

// SetSsoDisabled sets the SsoDisabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetSsoDisabled(ssoDisabled *bool) {
	c.SsoDisabled = ssoDisabled
	c.require(clientFieldSsoDisabled)
}

// SetCrossOriginAuth sets the CrossOriginAuth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetCrossOriginAuth(crossOriginAuth *bool) {
	c.CrossOriginAuth = crossOriginAuth
	c.require(clientFieldCrossOriginAuth)
}

// SetCrossOriginLoc sets the CrossOriginLoc field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetCrossOriginLoc(crossOriginLoc *string) {
	c.CrossOriginLoc = crossOriginLoc
	c.require(clientFieldCrossOriginLoc)
}

// SetCustomLoginPageOn sets the CustomLoginPageOn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetCustomLoginPageOn(customLoginPageOn *bool) {
	c.CustomLoginPageOn = customLoginPageOn
	c.require(clientFieldCustomLoginPageOn)
}

// SetCustomLoginPage sets the CustomLoginPage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetCustomLoginPage(customLoginPage *string) {
	c.CustomLoginPage = customLoginPage
	c.require(clientFieldCustomLoginPage)
}

// SetCustomLoginPagePreview sets the CustomLoginPagePreview field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetCustomLoginPagePreview(customLoginPagePreview *string) {
	c.CustomLoginPagePreview = customLoginPagePreview
	c.require(clientFieldCustomLoginPagePreview)
}

// SetFormTemplate sets the FormTemplate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetFormTemplate(formTemplate *string) {
	c.FormTemplate = formTemplate
	c.require(clientFieldFormTemplate)
}

// SetIsHerokuApp sets the IsHerokuApp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetIsHerokuApp(isHerokuApp *bool) {
	c.IsHerokuApp = isHerokuApp
	c.require(clientFieldIsHerokuApp)
}

// SetAddons sets the Addons field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetAddons(addons map[string]interface{}) {
	c.Addons = addons
	c.require(clientFieldAddons)
}

// SetTokenEndpointAuthMethod sets the TokenEndpointAuthMethod field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetTokenEndpointAuthMethod(tokenEndpointAuthMethod *string) {
	c.TokenEndpointAuthMethod = tokenEndpointAuthMethod
	c.require(clientFieldTokenEndpointAuthMethod)
}

// SetClientMetadata sets the ClientMetadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetClientMetadata(clientMetadata map[string]interface{}) {
	c.ClientMetadata = clientMetadata
	c.require(clientFieldClientMetadata)
}

// SetMobile sets the Mobile field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Client) SetMobile(mobile map[string]interface{}) {
	c.Mobile = mobile
	c.require(clientFieldMobile)
}

func (c *Client) UnmarshalJSON(data []byte) error {
	type unmarshaler Client
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Client(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *Client) MarshalJSON() ([]byte, error) {
	type embed Client
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *Client) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents an identity provider connection
var (
	connectionFieldId                 = big.NewInt(1 << 0)
	connectionFieldName               = big.NewInt(1 << 1)
	connectionFieldDisplayName        = big.NewInt(1 << 2)
	connectionFieldStrategy           = big.NewInt(1 << 3)
	connectionFieldOptions            = big.NewInt(1 << 4)
	connectionFieldEnabledClients     = big.NewInt(1 << 5)
	connectionFieldRealms             = big.NewInt(1 << 6)
	connectionFieldIsDomainConnection = big.NewInt(1 << 7)
	connectionFieldMetadata           = big.NewInt(1 << 8)
)

type Connection struct {
	// Connection identifier
	Id string `json:"id" url:"id"`
	// Connection name
	Name string `json:"name" url:"name"`
	// Display name for the connection
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	// The identity provider identifier (auth0, google-oauth2, facebook, etc.)
	Strategy string `json:"strategy" url:"strategy"`
	// Connection-specific configuration options
	Options map[string]interface{} `json:"options,omitempty" url:"options,omitempty"`
	// List of client IDs that can use this connection
	EnabledClients []string `json:"enabled_clients,omitempty" url:"enabled_clients,omitempty"`
	// Applicable realms for enterprise connections
	Realms []string `json:"realms,omitempty" url:"realms,omitempty"`
	// Whether this is a domain connection
	IsDomainConnection *bool `json:"is_domain_connection,omitempty" url:"is_domain_connection,omitempty"`
	// Additional metadata
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (c *Connection) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *Connection) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *Connection) GetDisplayName() *string {
	if c == nil {
		return nil
	}
	return c.DisplayName
}

func (c *Connection) GetStrategy() string {
	if c == nil {
		return ""
	}
	return c.Strategy
}

func (c *Connection) GetOptions() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Options
}

func (c *Connection) GetEnabledClients() []string {
	if c == nil {
		return nil
	}
	return c.EnabledClients
}

func (c *Connection) GetRealms() []string {
	if c == nil {
		return nil
	}
	return c.Realms
}

func (c *Connection) GetIsDomainConnection() *bool {
	if c == nil {
		return nil
	}
	return c.IsDomainConnection
}

func (c *Connection) GetMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *Connection) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Connection) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetId(id string) {
	c.Id = id
	c.require(connectionFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetName(name string) {
	c.Name = name
	c.require(connectionFieldName)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetDisplayName(displayName *string) {
	c.DisplayName = displayName
	c.require(connectionFieldDisplayName)
}

// SetStrategy sets the Strategy field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetStrategy(strategy string) {
	c.Strategy = strategy
	c.require(connectionFieldStrategy)
}

// SetOptions sets the Options field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetOptions(options map[string]interface{}) {
	c.Options = options
	c.require(connectionFieldOptions)
}

// SetEnabledClients sets the EnabledClients field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetEnabledClients(enabledClients []string) {
	c.EnabledClients = enabledClients
	c.require(connectionFieldEnabledClients)
}

// SetRealms sets the Realms field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetRealms(realms []string) {
	c.Realms = realms
	c.require(connectionFieldRealms)
}

// SetIsDomainConnection sets the IsDomainConnection field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetIsDomainConnection(isDomainConnection *bool) {
	c.IsDomainConnection = isDomainConnection
	c.require(connectionFieldIsDomainConnection)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Connection) SetMetadata(metadata map[string]interface{}) {
	c.Metadata = metadata
	c.require(connectionFieldMetadata)
}

func (c *Connection) UnmarshalJSON(data []byte) error {
	type unmarshaler Connection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Connection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *Connection) MarshalJSON() ([]byte, error) {
	type embed Connection
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *Connection) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	createUserRequestFieldEmail         = big.NewInt(1 << 0)
	createUserRequestFieldEmailVerified = big.NewInt(1 << 1)
	createUserRequestFieldUsername      = big.NewInt(1 << 2)
	createUserRequestFieldPassword      = big.NewInt(1 << 3)
	createUserRequestFieldPhoneNumber   = big.NewInt(1 << 4)
	createUserRequestFieldPhoneVerified = big.NewInt(1 << 5)
	createUserRequestFieldUserMetadata  = big.NewInt(1 << 6)
	createUserRequestFieldAppMetadata   = big.NewInt(1 << 7)
	createUserRequestFieldConnection    = big.NewInt(1 << 8)
)

type CreateUserRequest struct {
	Email         string                 `json:"email" url:"email"`
	EmailVerified *bool                  `json:"email_verified,omitempty" url:"email_verified,omitempty"`
	Username      *string                `json:"username,omitempty" url:"username,omitempty"`
	Password      *string                `json:"password,omitempty" url:"password,omitempty"`
	PhoneNumber   *string                `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	PhoneVerified *bool                  `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	UserMetadata  map[string]interface{} `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	AppMetadata   map[string]interface{} `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	Connection    string                 `json:"connection" url:"connection"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (c *CreateUserRequest) GetEmail() string {
	if c == nil {
		return ""
	}
	return c.Email
}

func (c *CreateUserRequest) GetEmailVerified() *bool {
	if c == nil {
		return nil
	}
	return c.EmailVerified
}

func (c *CreateUserRequest) GetUsername() *string {
	if c == nil {
		return nil
	}
	return c.Username
}

func (c *CreateUserRequest) GetPassword() *string {
	if c == nil {
		return nil
	}
	return c.Password
}

func (c *CreateUserRequest) GetPhoneNumber() *string {
	if c == nil {
		return nil
	}
	return c.PhoneNumber
}

func (c *CreateUserRequest) GetPhoneVerified() *bool {
	if c == nil {
		return nil
	}
	return c.PhoneVerified
}

func (c *CreateUserRequest) GetUserMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.UserMetadata
}

func (c *CreateUserRequest) GetAppMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.AppMetadata
}

func (c *CreateUserRequest) GetConnection() string {
	if c == nil {
		return ""
	}
	return c.Connection
}

func (c *CreateUserRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserRequest) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetEmail(email string) {
	c.Email = email
	c.require(createUserRequestFieldEmail)
}

// SetEmailVerified sets the EmailVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetEmailVerified(emailVerified *bool) {
	c.EmailVerified = emailVerified
	c.require(createUserRequestFieldEmailVerified)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetUsername(username *string) {
	c.Username = username
	c.require(createUserRequestFieldUsername)
}

// SetPassword sets the Password field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetPassword(password *string) {
	c.Password = password
	c.require(createUserRequestFieldPassword)
}

// SetPhoneNumber sets the PhoneNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetPhoneNumber(phoneNumber *string) {
	c.PhoneNumber = phoneNumber
	c.require(createUserRequestFieldPhoneNumber)
}

// SetPhoneVerified sets the PhoneVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetPhoneVerified(phoneVerified *bool) {
	c.PhoneVerified = phoneVerified
	c.require(createUserRequestFieldPhoneVerified)
}

// SetUserMetadata sets the UserMetadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetUserMetadata(userMetadata map[string]interface{}) {
	c.UserMetadata = userMetadata
	c.require(createUserRequestFieldUserMetadata)
}

// SetAppMetadata sets the AppMetadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetAppMetadata(appMetadata map[string]interface{}) {
	c.AppMetadata = appMetadata
	c.require(createUserRequestFieldAppMetadata)
}

// SetConnection sets the Connection field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetConnection(connection string) {
	c.Connection = connection
	c.require(createUserRequestFieldConnection)
}

func (c *CreateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *CreateUserRequest) MarshalJSON() ([]byte, error) {
	type embed CreateUserRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CreateUserRequest) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	identityFieldConnection  = big.NewInt(1 << 0)
	identityFieldUserId      = big.NewInt(1 << 1)
	identityFieldProvider    = big.NewInt(1 << 2)
	identityFieldIsSocial    = big.NewInt(1 << 3)
	identityFieldAccessToken = big.NewInt(1 << 4)
	identityFieldExpiresIn   = big.NewInt(1 << 5)
)

type Identity struct {
	Connection  string  `json:"connection" url:"connection"`
	UserId      string  `json:"user_id" url:"user_id"`
	Provider    string  `json:"provider" url:"provider"`
	IsSocial    bool    `json:"is_social" url:"is_social"`
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	ExpiresIn   *int    `json:"expires_in,omitempty" url:"expires_in,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *Identity) GetConnection() string {
	if i == nil {
		return ""
	}
	return i.Connection
}

func (i *Identity) GetUserId() string {
	if i == nil {
		return ""
	}
	return i.UserId
}

func (i *Identity) GetProvider() string {
	if i == nil {
		return ""
	}
	return i.Provider
}

func (i *Identity) GetIsSocial() bool {
	if i == nil {
		return false
	}
	return i.IsSocial
}

func (i *Identity) GetAccessToken() *string {
	if i == nil {
		return nil
	}
	return i.AccessToken
}

func (i *Identity) GetExpiresIn() *int {
	if i == nil {
		return nil
	}
	return i.ExpiresIn
}

func (i *Identity) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Identity) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetConnection sets the Connection field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Identity) SetConnection(connection string) {
	i.Connection = connection
	i.require(identityFieldConnection)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Identity) SetUserId(userId string) {
	i.UserId = userId
	i.require(identityFieldUserId)
}

// SetProvider sets the Provider field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Identity) SetProvider(provider string) {
	i.Provider = provider
	i.require(identityFieldProvider)
}

// SetIsSocial sets the IsSocial field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Identity) SetIsSocial(isSocial bool) {
	i.IsSocial = isSocial
	i.require(identityFieldIsSocial)
}

// SetAccessToken sets the AccessToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Identity) SetAccessToken(accessToken *string) {
	i.AccessToken = accessToken
	i.require(identityFieldAccessToken)
}

// SetExpiresIn sets the ExpiresIn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *Identity) SetExpiresIn(expiresIn *int) {
	i.ExpiresIn = expiresIn
	i.require(identityFieldExpiresIn)
}

func (i *Identity) UnmarshalJSON(data []byte) error {
	type unmarshaler Identity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Identity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *Identity) MarshalJSON() ([]byte, error) {
	type embed Identity
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *Identity) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Paginated response for clients listing
var (
	paginatedClientResponseFieldStart   = big.NewInt(1 << 0)
	paginatedClientResponseFieldLimit   = big.NewInt(1 << 1)
	paginatedClientResponseFieldLength  = big.NewInt(1 << 2)
	paginatedClientResponseFieldTotal   = big.NewInt(1 << 3)
	paginatedClientResponseFieldClients = big.NewInt(1 << 4)
)

type PaginatedClientResponse struct {
	// Starting index (zero-based)
	Start int `json:"start" url:"start"`
	// Number of items requested
	Limit int `json:"limit" url:"limit"`
	// Number of items returned
	Length int `json:"length" url:"length"`
	// Total number of items (when include_totals=true)
	Total *int `json:"total,omitempty" url:"total,omitempty"`
	// List of clients
	Clients []*Client `json:"clients" url:"clients"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (p *PaginatedClientResponse) GetStart() int {
	if p == nil {
		return 0
	}
	return p.Start
}

func (p *PaginatedClientResponse) GetLimit() int {
	if p == nil {
		return 0
	}
	return p.Limit
}

func (p *PaginatedClientResponse) GetLength() int {
	if p == nil {
		return 0
	}
	return p.Length
}

func (p *PaginatedClientResponse) GetTotal() *int {
	if p == nil {
		return nil
	}
	return p.Total
}

func (p *PaginatedClientResponse) GetClients() []*Client {
	if p == nil {
		return nil
	}
	return p.Clients
}

func (p *PaginatedClientResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedClientResponse) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetStart sets the Start field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedClientResponse) SetStart(start int) {
	p.Start = start
	p.require(paginatedClientResponseFieldStart)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedClientResponse) SetLimit(limit int) {
	p.Limit = limit
	p.require(paginatedClientResponseFieldLimit)
}

// SetLength sets the Length field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedClientResponse) SetLength(length int) {
	p.Length = length
	p.require(paginatedClientResponseFieldLength)
}

// SetTotal sets the Total field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedClientResponse) SetTotal(total *int) {
	p.Total = total
	p.require(paginatedClientResponseFieldTotal)
}

// SetClients sets the Clients field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedClientResponse) SetClients(clients []*Client) {
	p.Clients = clients
	p.require(paginatedClientResponseFieldClients)
}

func (p *PaginatedClientResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedClientResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedClientResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *PaginatedClientResponse) MarshalJSON() ([]byte, error) {
	type embed PaginatedClientResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PaginatedClientResponse) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Response with pagination info like Auth0
var (
	paginatedUserResponseFieldUsers  = big.NewInt(1 << 0)
	paginatedUserResponseFieldStart  = big.NewInt(1 << 1)
	paginatedUserResponseFieldLimit  = big.NewInt(1 << 2)
	paginatedUserResponseFieldLength = big.NewInt(1 << 3)
	paginatedUserResponseFieldTotal  = big.NewInt(1 << 4)
)

type PaginatedUserResponse struct {
	Users  []*User `json:"users" url:"users"`
	Start  int     `json:"start" url:"start"`
	Limit  int     `json:"limit" url:"limit"`
	Length int     `json:"length" url:"length"`
	Total  *int    `json:"total,omitempty" url:"total,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (p *PaginatedUserResponse) GetUsers() []*User {
	if p == nil {
		return nil
	}
	return p.Users
}

func (p *PaginatedUserResponse) GetStart() int {
	if p == nil {
		return 0
	}
	return p.Start
}

func (p *PaginatedUserResponse) GetLimit() int {
	if p == nil {
		return 0
	}
	return p.Limit
}

func (p *PaginatedUserResponse) GetLength() int {
	if p == nil {
		return 0
	}
	return p.Length
}

func (p *PaginatedUserResponse) GetTotal() *int {
	if p == nil {
		return nil
	}
	return p.Total
}

func (p *PaginatedUserResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedUserResponse) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetUsers sets the Users field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedUserResponse) SetUsers(users []*User) {
	p.Users = users
	p.require(paginatedUserResponseFieldUsers)
}

// SetStart sets the Start field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedUserResponse) SetStart(start int) {
	p.Start = start
	p.require(paginatedUserResponseFieldStart)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedUserResponse) SetLimit(limit int) {
	p.Limit = limit
	p.require(paginatedUserResponseFieldLimit)
}

// SetLength sets the Length field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedUserResponse) SetLength(length int) {
	p.Length = length
	p.require(paginatedUserResponseFieldLength)
}

// SetTotal sets the Total field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PaginatedUserResponse) SetTotal(total *int) {
	p.Total = total
	p.require(paginatedUserResponseFieldTotal)
}

func (p *PaginatedUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *PaginatedUserResponse) MarshalJSON() ([]byte, error) {
	type embed PaginatedUserResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PaginatedUserResponse) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	resourceFieldId          = big.NewInt(1 << 0)
	resourceFieldName        = big.NewInt(1 << 1)
	resourceFieldDescription = big.NewInt(1 << 2)
	resourceFieldCreatedAt   = big.NewInt(1 << 3)
	resourceFieldUpdatedAt   = big.NewInt(1 << 4)
	resourceFieldMetadata    = big.NewInt(1 << 5)
)

type Resource struct {
	Id          string                 `json:"id" url:"id"`
	Name        string                 `json:"name" url:"name"`
	Description *string                `json:"description,omitempty" url:"description,omitempty"`
	CreatedAt   time.Time              `json:"created_at" url:"created_at"`
	UpdatedAt   time.Time              `json:"updated_at" url:"updated_at"`
	Metadata    map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *Resource) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *Resource) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *Resource) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *Resource) GetCreatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.CreatedAt
}

func (r *Resource) GetUpdatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.UpdatedAt
}

func (r *Resource) GetMetadata() map[string]interface{} {
	if r == nil {
		return nil
	}
	return r.Metadata
}

func (r *Resource) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Resource) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Resource) SetId(id string) {
	r.Id = id
	r.require(resourceFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Resource) SetName(name string) {
	r.Name = name
	r.require(resourceFieldName)
}

// SetDescription sets the Description field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Resource) SetDescription(description *string) {
	r.Description = description
	r.require(resourceFieldDescription)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Resource) SetCreatedAt(createdAt time.Time) {
	r.CreatedAt = createdAt
	r.require(resourceFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Resource) SetUpdatedAt(updatedAt time.Time) {
	r.UpdatedAt = updatedAt
	r.require(resourceFieldUpdatedAt)
}

// SetMetadata sets the Metadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *Resource) SetMetadata(metadata map[string]interface{}) {
	r.Metadata = metadata
	r.require(resourceFieldMetadata)
}

func (r *Resource) UnmarshalJSON(data []byte) error {
	type embed Resource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = Resource(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *Resource) MarshalJSON() ([]byte, error) {
	type embed Resource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: internal.NewDateTime(r.CreatedAt),
		UpdatedAt: internal.NewDateTime(r.UpdatedAt),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *Resource) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	searchResponseFieldResults    = big.NewInt(1 << 0)
	searchResponseFieldTotal      = big.NewInt(1 << 1)
	searchResponseFieldNextOffset = big.NewInt(1 << 2)
)

type SearchResponse struct {
	Results    []*Resource `json:"results" url:"results"`
	Total      *int        `json:"total,omitempty" url:"total,omitempty"`
	NextOffset *int        `json:"next_offset,omitempty" url:"next_offset,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SearchResponse) GetResults() []*Resource {
	if s == nil {
		return nil
	}
	return s.Results
}

func (s *SearchResponse) GetTotal() *int {
	if s == nil {
		return nil
	}
	return s.Total
}

func (s *SearchResponse) GetNextOffset() *int {
	if s == nil {
		return nil
	}
	return s.NextOffset
}

func (s *SearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResponse) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchResponse) SetResults(results []*Resource) {
	s.Results = results
	s.require(searchResponseFieldResults)
}

// SetTotal sets the Total field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchResponse) SetTotal(total *int) {
	s.Total = total
	s.require(searchResponseFieldTotal)
}

// SetNextOffset sets the NextOffset field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchResponse) SetNextOffset(nextOffset *int) {
	s.NextOffset = nextOffset
	s.require(searchResponseFieldNextOffset)
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SearchResponse) MarshalJSON() ([]byte, error) {
	type embed SearchResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SearchResponse) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	updateUserRequestFieldEmail         = big.NewInt(1 << 0)
	updateUserRequestFieldEmailVerified = big.NewInt(1 << 1)
	updateUserRequestFieldUsername      = big.NewInt(1 << 2)
	updateUserRequestFieldPhoneNumber   = big.NewInt(1 << 3)
	updateUserRequestFieldPhoneVerified = big.NewInt(1 << 4)
	updateUserRequestFieldUserMetadata  = big.NewInt(1 << 5)
	updateUserRequestFieldAppMetadata   = big.NewInt(1 << 6)
	updateUserRequestFieldPassword      = big.NewInt(1 << 7)
	updateUserRequestFieldBlocked       = big.NewInt(1 << 8)
)

type UpdateUserRequest struct {
	Email         *string                `json:"email,omitempty" url:"email,omitempty"`
	EmailVerified *bool                  `json:"email_verified,omitempty" url:"email_verified,omitempty"`
	Username      *string                `json:"username,omitempty" url:"username,omitempty"`
	PhoneNumber   *string                `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	PhoneVerified *bool                  `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	UserMetadata  map[string]interface{} `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	AppMetadata   map[string]interface{} `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	Password      *string                `json:"password,omitempty" url:"password,omitempty"`
	Blocked       *bool                  `json:"blocked,omitempty" url:"blocked,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (u *UpdateUserRequest) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateUserRequest) GetEmailVerified() *bool {
	if u == nil {
		return nil
	}
	return u.EmailVerified
}

func (u *UpdateUserRequest) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *UpdateUserRequest) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *UpdateUserRequest) GetPhoneVerified() *bool {
	if u == nil {
		return nil
	}
	return u.PhoneVerified
}

func (u *UpdateUserRequest) GetUserMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.UserMetadata
}

func (u *UpdateUserRequest) GetAppMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.AppMetadata
}

func (u *UpdateUserRequest) GetPassword() *string {
	if u == nil {
		return nil
	}
	return u.Password
}

func (u *UpdateUserRequest) GetBlocked() *bool {
	if u == nil {
		return nil
	}
	return u.Blocked
}

func (u *UpdateUserRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateUserRequest) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetEmail(email *string) {
	u.Email = email
	u.require(updateUserRequestFieldEmail)
}

// SetEmailVerified sets the EmailVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetEmailVerified(emailVerified *bool) {
	u.EmailVerified = emailVerified
	u.require(updateUserRequestFieldEmailVerified)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetUsername(username *string) {
	u.Username = username
	u.require(updateUserRequestFieldUsername)
}

// SetPhoneNumber sets the PhoneNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetPhoneNumber(phoneNumber *string) {
	u.PhoneNumber = phoneNumber
	u.require(updateUserRequestFieldPhoneNumber)
}

// SetPhoneVerified sets the PhoneVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetPhoneVerified(phoneVerified *bool) {
	u.PhoneVerified = phoneVerified
	u.require(updateUserRequestFieldPhoneVerified)
}

// SetUserMetadata sets the UserMetadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetUserMetadata(userMetadata map[string]interface{}) {
	u.UserMetadata = userMetadata
	u.require(updateUserRequestFieldUserMetadata)
}

// SetAppMetadata sets the AppMetadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetAppMetadata(appMetadata map[string]interface{}) {
	u.AppMetadata = appMetadata
	u.require(updateUserRequestFieldAppMetadata)
}

// SetPassword sets the Password field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetPassword(password *string) {
	u.Password = password
	u.require(updateUserRequestFieldPassword)
}

// SetBlocked sets the Blocked field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetBlocked(blocked *bool) {
	u.Blocked = blocked
	u.require(updateUserRequestFieldBlocked)
}

func (u *UpdateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateUserRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *UpdateUserRequest) MarshalJSON() ([]byte, error) {
	type embed UpdateUserRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UpdateUserRequest) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// User object similar to Auth0 users
var (
	userFieldUserId        = big.NewInt(1 << 0)
	userFieldEmail         = big.NewInt(1 << 1)
	userFieldEmailVerified = big.NewInt(1 << 2)
	userFieldUsername      = big.NewInt(1 << 3)
	userFieldPhoneNumber   = big.NewInt(1 << 4)
	userFieldPhoneVerified = big.NewInt(1 << 5)
	userFieldCreatedAt     = big.NewInt(1 << 6)
	userFieldUpdatedAt     = big.NewInt(1 << 7)
	userFieldIdentities    = big.NewInt(1 << 8)
	userFieldAppMetadata   = big.NewInt(1 << 9)
	userFieldUserMetadata  = big.NewInt(1 << 10)
	userFieldPicture       = big.NewInt(1 << 11)
	userFieldName          = big.NewInt(1 << 12)
	userFieldNickname      = big.NewInt(1 << 13)
	userFieldMultifactor   = big.NewInt(1 << 14)
	userFieldLastIp        = big.NewInt(1 << 15)
	userFieldLastLogin     = big.NewInt(1 << 16)
	userFieldLoginsCount   = big.NewInt(1 << 17)
	userFieldBlocked       = big.NewInt(1 << 18)
	userFieldGivenName     = big.NewInt(1 << 19)
	userFieldFamilyName    = big.NewInt(1 << 20)
)

type User struct {
	UserId        string                 `json:"user_id" url:"user_id"`
	Email         string                 `json:"email" url:"email"`
	EmailVerified bool                   `json:"email_verified" url:"email_verified"`
	Username      *string                `json:"username,omitempty" url:"username,omitempty"`
	PhoneNumber   *string                `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	PhoneVerified *bool                  `json:"phone_verified,omitempty" url:"phone_verified,omitempty"`
	CreatedAt     time.Time              `json:"created_at" url:"created_at"`
	UpdatedAt     time.Time              `json:"updated_at" url:"updated_at"`
	Identities    []*Identity            `json:"identities,omitempty" url:"identities,omitempty"`
	AppMetadata   map[string]interface{} `json:"app_metadata,omitempty" url:"app_metadata,omitempty"`
	UserMetadata  map[string]interface{} `json:"user_metadata,omitempty" url:"user_metadata,omitempty"`
	Picture       *string                `json:"picture,omitempty" url:"picture,omitempty"`
	Name          *string                `json:"name,omitempty" url:"name,omitempty"`
	Nickname      *string                `json:"nickname,omitempty" url:"nickname,omitempty"`
	Multifactor   []string               `json:"multifactor,omitempty" url:"multifactor,omitempty"`
	LastIp        *string                `json:"last_ip,omitempty" url:"last_ip,omitempty"`
	LastLogin     *time.Time             `json:"last_login,omitempty" url:"last_login,omitempty"`
	LoginsCount   *int                   `json:"logins_count,omitempty" url:"logins_count,omitempty"`
	Blocked       *bool                  `json:"blocked,omitempty" url:"blocked,omitempty"`
	GivenName     *string                `json:"given_name,omitempty" url:"given_name,omitempty"`
	FamilyName    *string                `json:"family_name,omitempty" url:"family_name,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (u *User) GetUserId() string {
	if u == nil {
		return ""
	}
	return u.UserId
}

func (u *User) GetEmail() string {
	if u == nil {
		return ""
	}
	return u.Email
}

func (u *User) GetEmailVerified() bool {
	if u == nil {
		return false
	}
	return u.EmailVerified
}

func (u *User) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *User) GetPhoneNumber() *string {
	if u == nil {
		return nil
	}
	return u.PhoneNumber
}

func (u *User) GetPhoneVerified() *bool {
	if u == nil {
		return nil
	}
	return u.PhoneVerified
}

func (u *User) GetCreatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.CreatedAt
}

func (u *User) GetUpdatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.UpdatedAt
}

func (u *User) GetIdentities() []*Identity {
	if u == nil {
		return nil
	}
	return u.Identities
}

func (u *User) GetAppMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.AppMetadata
}

func (u *User) GetUserMetadata() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.UserMetadata
}

func (u *User) GetPicture() *string {
	if u == nil {
		return nil
	}
	return u.Picture
}

func (u *User) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *User) GetNickname() *string {
	if u == nil {
		return nil
	}
	return u.Nickname
}

func (u *User) GetMultifactor() []string {
	if u == nil {
		return nil
	}
	return u.Multifactor
}

func (u *User) GetLastIp() *string {
	if u == nil {
		return nil
	}
	return u.LastIp
}

func (u *User) GetLastLogin() *time.Time {
	if u == nil {
		return nil
	}
	return u.LastLogin
}

func (u *User) GetLoginsCount() *int {
	if u == nil {
		return nil
	}
	return u.LoginsCount
}

func (u *User) GetBlocked() *bool {
	if u == nil {
		return nil
	}
	return u.Blocked
}

func (u *User) GetGivenName() *string {
	if u == nil {
		return nil
	}
	return u.GivenName
}

func (u *User) GetFamilyName() *string {
	if u == nil {
		return nil
	}
	return u.FamilyName
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetUserId sets the UserId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetUserId(userId string) {
	u.UserId = userId
	u.require(userFieldUserId)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetEmail(email string) {
	u.Email = email
	u.require(userFieldEmail)
}

// SetEmailVerified sets the EmailVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetEmailVerified(emailVerified bool) {
	u.EmailVerified = emailVerified
	u.require(userFieldEmailVerified)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetUsername(username *string) {
	u.Username = username
	u.require(userFieldUsername)
}

// SetPhoneNumber sets the PhoneNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetPhoneNumber(phoneNumber *string) {
	u.PhoneNumber = phoneNumber
	u.require(userFieldPhoneNumber)
}

// SetPhoneVerified sets the PhoneVerified field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetPhoneVerified(phoneVerified *bool) {
	u.PhoneVerified = phoneVerified
	u.require(userFieldPhoneVerified)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetCreatedAt(createdAt time.Time) {
	u.CreatedAt = createdAt
	u.require(userFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetUpdatedAt(updatedAt time.Time) {
	u.UpdatedAt = updatedAt
	u.require(userFieldUpdatedAt)
}

// SetIdentities sets the Identities field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetIdentities(identities []*Identity) {
	u.Identities = identities
	u.require(userFieldIdentities)
}

// SetAppMetadata sets the AppMetadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetAppMetadata(appMetadata map[string]interface{}) {
	u.AppMetadata = appMetadata
	u.require(userFieldAppMetadata)
}

// SetUserMetadata sets the UserMetadata field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetUserMetadata(userMetadata map[string]interface{}) {
	u.UserMetadata = userMetadata
	u.require(userFieldUserMetadata)
}

// SetPicture sets the Picture field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetPicture(picture *string) {
	u.Picture = picture
	u.require(userFieldPicture)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetName(name *string) {
	u.Name = name
	u.require(userFieldName)
}

// SetNickname sets the Nickname field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetNickname(nickname *string) {
	u.Nickname = nickname
	u.require(userFieldNickname)
}

// SetMultifactor sets the Multifactor field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetMultifactor(multifactor []string) {
	u.Multifactor = multifactor
	u.require(userFieldMultifactor)
}

// SetLastIp sets the LastIp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetLastIp(lastIp *string) {
	u.LastIp = lastIp
	u.require(userFieldLastIp)
}

// SetLastLogin sets the LastLogin field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetLastLogin(lastLogin *time.Time) {
	u.LastLogin = lastLogin
	u.require(userFieldLastLogin)
}

// SetLoginsCount sets the LoginsCount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetLoginsCount(loginsCount *int) {
	u.LoginsCount = loginsCount
	u.require(userFieldLoginsCount)
}

// SetBlocked sets the Blocked field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetBlocked(blocked *bool) {
	u.Blocked = blocked
	u.require(userFieldBlocked)
}

// SetGivenName sets the GivenName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetGivenName(givenName *string) {
	u.GivenName = givenName
	u.require(userFieldGivenName)
}

// SetFamilyName sets the FamilyName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetFamilyName(familyName *string) {
	u.FamilyName = familyName
	u.require(userFieldFamilyName)
}

func (u *User) UnmarshalJSON(data []byte) error {
	type embed User
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		LastLogin *internal.DateTime `json:"last_login,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = User(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.UpdatedAt = unmarshaler.UpdatedAt.Time()
	u.LastLogin = unmarshaler.LastLogin.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
		LastLogin *internal.DateTime `json:"last_login,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewDateTime(u.CreatedAt),
		UpdatedAt: internal.NewDateTime(u.UpdatedAt),
		LastLogin: internal.NewOptionalDateTime(u.LastLogin),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *User) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
