// Code generated by Fern. DO NOT EDIT.

package folderc

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/cross-package-type-names/fern/internal"
	uuid "github.com/google/uuid"
	big "math/big"
)

var (
	fooFieldBarProperty = big.NewInt(1 << 0)
)

type Foo struct {
	BarProperty uuid.UUID `json:"bar_property" url:"bar_property"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *Foo) GetBarProperty() uuid.UUID {
	if f == nil {
		return uuid.Nil
	}
	return f.BarProperty
}

func (f *Foo) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *Foo) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetBarProperty sets the BarProperty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *Foo) SetBarProperty(barProperty uuid.UUID) {
	f.BarProperty = barProperty
	f.require(fooFieldBarProperty)
}

func (f *Foo) UnmarshalJSON(data []byte) error {
	type unmarshaler Foo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = Foo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *Foo) MarshalJSON() ([]byte, error) {
	type embed Foo
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *Foo) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}
