// Code generated by Fern. DO NOT EDIT.

package packageyml

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/package-yml/fern/internal"
	big "math/big"
)

var (
	echoRequestFieldName = big.NewInt(1 << 0)
	echoRequestFieldSize = big.NewInt(1 << 1)
)

type EchoRequest struct {
	Name string `json:"name" url:"name"`
	Size int    `json:"size" url:"size"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *EchoRequest) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EchoRequest) GetSize() int {
	if e == nil {
		return 0
	}
	return e.Size
}

func (e *EchoRequest) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EchoRequest) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EchoRequest) SetName(name string) {
	e.Name = name
	e.require(echoRequestFieldName)
}

// SetSize sets the Size field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EchoRequest) SetSize(size int) {
	e.Size = size
	e.require(echoRequestFieldSize)
}

func (e *EchoRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EchoRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EchoRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *EchoRequest) MarshalJSON() ([]byte, error) {
	type embed EchoRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EchoRequest) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
