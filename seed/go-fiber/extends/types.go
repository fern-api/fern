// Code generated by Fern. DO NOT EDIT.

package extends

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/extends/fern/internal"
	big "math/big"
)

type Inlined struct {
	Docs   string `json:"docs" url:"-"`
	Name   string `json:"name" url:"-"`
	Unique string `json:"unique" url:"-"`
}

var (
	docsFieldDocs = big.NewInt(1 << 0)
)

type Docs struct {
	Docs string `json:"docs" url:"docs"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (d *Docs) GetDocs() string {
	if d == nil {
		return ""
	}
	return d.Docs
}

func (d *Docs) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Docs) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Docs) SetDocs(docs string) {
	d.Docs = docs
	d.require(docsFieldDocs)
}

func (d *Docs) UnmarshalJSON(data []byte) error {
	type unmarshaler Docs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Docs(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	return nil
}

func (d *Docs) MarshalJSON() ([]byte, error) {
	type embed Docs
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *Docs) String() string {
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	exampleTypeFieldDocs = big.NewInt(1 << 0)
	exampleTypeFieldName = big.NewInt(1 << 1)
)

type ExampleType struct {
	Docs string `json:"docs" url:"docs"`
	Name string `json:"name" url:"name"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleType) GetDocs() string {
	if e == nil {
		return ""
	}
	return e.Docs
}

func (e *ExampleType) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *ExampleType) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleType) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleType) SetDocs(docs string) {
	e.Docs = docs
	e.require(exampleTypeFieldDocs)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleType) SetName(name string) {
	e.Name = name
	e.require(exampleTypeFieldName)
}

func (e *ExampleType) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleType) MarshalJSON() ([]byte, error) {
	type embed ExampleType
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleType) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	jsonFieldDocs = big.NewInt(1 << 0)
	jsonFieldRaw  = big.NewInt(1 << 1)
)

type Json struct {
	Docs string `json:"docs" url:"docs"`
	Raw  string `json:"raw" url:"raw"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (j *Json) GetDocs() string {
	if j == nil {
		return ""
	}
	return j.Docs
}

func (j *Json) GetRaw() string {
	if j == nil {
		return ""
	}
	return j.Raw
}

func (j *Json) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *Json) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *Json) SetDocs(docs string) {
	j.Docs = docs
	j.require(jsonFieldDocs)
}

// SetRaw sets the Raw field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *Json) SetRaw(raw string) {
	j.Raw = raw
	j.require(jsonFieldRaw)
}

func (j *Json) UnmarshalJSON(data []byte) error {
	type unmarshaler Json
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = Json(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	return nil
}

func (j *Json) MarshalJSON() ([]byte, error) {
	type embed Json
	var marshaler = struct {
		embed
	}{
		embed: embed(*j),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, j.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (j *Json) String() string {
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

var (
	nestedTypeFieldDocs = big.NewInt(1 << 0)
	nestedTypeFieldRaw  = big.NewInt(1 << 1)
	nestedTypeFieldName = big.NewInt(1 << 2)
)

type NestedType struct {
	Docs string `json:"docs" url:"docs"`
	Raw  string `json:"raw" url:"raw"`
	Name string `json:"name" url:"name"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (n *NestedType) GetDocs() string {
	if n == nil {
		return ""
	}
	return n.Docs
}

func (n *NestedType) GetRaw() string {
	if n == nil {
		return ""
	}
	return n.Raw
}

func (n *NestedType) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NestedType) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedType) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NestedType) SetDocs(docs string) {
	n.Docs = docs
	n.require(nestedTypeFieldDocs)
}

// SetRaw sets the Raw field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NestedType) SetRaw(raw string) {
	n.Raw = raw
	n.require(nestedTypeFieldRaw)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NestedType) SetName(name string) {
	n.Name = name
	n.require(nestedTypeFieldName)
}

func (n *NestedType) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	return nil
}

func (n *NestedType) MarshalJSON() ([]byte, error) {
	type embed NestedType
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NestedType) String() string {
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}
