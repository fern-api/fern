// Code generated by Fern. DO NOT EDIT.

package extraproperties

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/extra-properties/fern/internal"
	big "math/big"
)

type CreateUserRequest struct {
	Name    string `json:"name" url:"-"`
	type_   string
	version string
}

func (c *CreateUserRequest) Type() string {
	return c.type_
}

func (c *CreateUserRequest) Version() string {
	return c.version
}

func (c *CreateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateUserRequest(body)
	c.type_ = "CreateUserRequest"
	c.version = "v1"
	return nil
}

func (c *CreateUserRequest) MarshalJSON() ([]byte, error) {
	type embed CreateUserRequest
	var marshaler = struct {
		embed
		Type    string `json:"_type"`
		Version string `json:"_version"`
	}{
		embed:   embed(*c),
		Type:    "CreateUserRequest",
		Version: "v1",
	}
	return json.Marshal(marshaler)
}

var (
	userFieldName = big.NewInt(1 << 0)
)

type User struct {
	Name string `json:"name" url:"name"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`
}

func (u *User) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.ExtraProperties
}

func (u *User) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetName(name string) {
	u.Name = name
	u.require(userFieldName)
}

func (u *User) UnmarshalJSON(data []byte) error {
	type embed User
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = User(unmarshaler.embed)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.ExtraProperties = extraProperties
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return internal.MarshalJSONWithExtraProperties(explicitMarshaler, u.ExtraProperties)
}

func (u *User) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
