// Code generated by Fern. DO NOT EDIT.

package nullableoptional

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/nullable-optional/fern/internal"
	time "time"
)

type ListUsersRequest struct {
	Limit          *int    `query:"limit"`
	Offset         *int    `query:"offset"`
	IncludeDeleted *bool   `query:"includeDeleted"`
	SortBy         *string `query:"sortBy"`
}

type SearchUsersRequest struct {
	Query      string  `query:"query"`
	Department *string `query:"department"`
	Role       *string `query:"role"`
	IsActive   *bool   `query:"isActive"`
}

// Nested object for testing
type Address struct {
	Street  string  `json:"street" url:"street"`
	City    *string `json:"city,omitempty" url:"city,omitempty"`
	State   *string `json:"state,omitempty" url:"state,omitempty"`
	ZipCode string  `json:"zipCode" url:"zipCode"`
	Country *string `json:"country,omitempty" url:"country,omitempty"`

	extraProperties map[string]interface{}
}

func (a *Address) GetStreet() string {
	if a == nil {
		return ""
	}
	return a.Street
}

func (a *Address) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *Address) GetState() *string {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *Address) GetZipCode() string {
	if a == nil {
		return ""
	}
	return a.ZipCode
}

func (a *Address) GetCountry() *string {
	if a == nil {
		return nil
	}
	return a.Country
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	return nil
}

func (a *Address) String() string {
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CreateUserRequest struct {
	Username string   `json:"username" url:"username"`
	Email    *string  `json:"email,omitempty" url:"email,omitempty"`
	Phone    *string  `json:"phone,omitempty" url:"phone,omitempty"`
	Address  *Address `json:"address,omitempty" url:"address,omitempty"`

	extraProperties map[string]interface{}
}

func (c *CreateUserRequest) GetUsername() string {
	if c == nil {
		return ""
	}
	return c.Username
}

func (c *CreateUserRequest) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CreateUserRequest) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CreateUserRequest) GetAddress() *Address {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CreateUserRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *CreateUserRequest) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// For testing PATCH operations
type UpdateUserRequest struct {
	Username *string  `json:"username,omitempty" url:"username,omitempty"`
	Email    *string  `json:"email,omitempty" url:"email,omitempty"`
	Phone    *string  `json:"phone,omitempty" url:"phone,omitempty"`
	Address  *Address `json:"address,omitempty" url:"address,omitempty"`

	extraProperties map[string]interface{}
}

func (u *UpdateUserRequest) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *UpdateUserRequest) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateUserRequest) GetPhone() *string {
	if u == nil {
		return nil
	}
	return u.Phone
}

func (u *UpdateUserRequest) GetAddress() *Address {
	if u == nil {
		return nil
	}
	return u.Address
}

func (u *UpdateUserRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateUserRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *UpdateUserRequest) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Test object with nullable and optional fields
type UserProfile struct {
	Id                     string            `json:"id" url:"id"`
	Username               string            `json:"username" url:"username"`
	NullableString         *string           `json:"nullableString,omitempty" url:"nullableString,omitempty"`
	NullableInteger        *int              `json:"nullableInteger,omitempty" url:"nullableInteger,omitempty"`
	NullableBoolean        *bool             `json:"nullableBoolean,omitempty" url:"nullableBoolean,omitempty"`
	NullableDate           *time.Time        `json:"nullableDate,omitempty" url:"nullableDate,omitempty"`
	NullableObject         *Address          `json:"nullableObject,omitempty" url:"nullableObject,omitempty"`
	NullableList           []string          `json:"nullableList,omitempty" url:"nullableList,omitempty"`
	NullableMap            map[string]string `json:"nullableMap,omitempty" url:"nullableMap,omitempty"`
	OptionalString         *string           `json:"optionalString,omitempty" url:"optionalString,omitempty"`
	OptionalInteger        *int              `json:"optionalInteger,omitempty" url:"optionalInteger,omitempty"`
	OptionalBoolean        *bool             `json:"optionalBoolean,omitempty" url:"optionalBoolean,omitempty"`
	OptionalDate           *time.Time        `json:"optionalDate,omitempty" url:"optionalDate,omitempty"`
	OptionalObject         *Address          `json:"optionalObject,omitempty" url:"optionalObject,omitempty"`
	OptionalList           []string          `json:"optionalList,omitempty" url:"optionalList,omitempty"`
	OptionalMap            map[string]string `json:"optionalMap,omitempty" url:"optionalMap,omitempty"`
	OptionalNullableString *string           `json:"optionalNullableString,omitempty" url:"optionalNullableString,omitempty"`
	OptionalNullableObject *Address          `json:"optionalNullableObject,omitempty" url:"optionalNullableObject,omitempty"`

	extraProperties map[string]interface{}
}

func (u *UserProfile) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UserProfile) GetUsername() string {
	if u == nil {
		return ""
	}
	return u.Username
}

func (u *UserProfile) GetNullableString() *string {
	if u == nil {
		return nil
	}
	return u.NullableString
}

func (u *UserProfile) GetNullableInteger() *int {
	if u == nil {
		return nil
	}
	return u.NullableInteger
}

func (u *UserProfile) GetNullableBoolean() *bool {
	if u == nil {
		return nil
	}
	return u.NullableBoolean
}

func (u *UserProfile) GetNullableDate() *time.Time {
	if u == nil {
		return nil
	}
	return u.NullableDate
}

func (u *UserProfile) GetNullableObject() *Address {
	if u == nil {
		return nil
	}
	return u.NullableObject
}

func (u *UserProfile) GetNullableList() []string {
	if u == nil {
		return nil
	}
	return u.NullableList
}

func (u *UserProfile) GetNullableMap() map[string]string {
	if u == nil {
		return nil
	}
	return u.NullableMap
}

func (u *UserProfile) GetOptionalString() *string {
	if u == nil {
		return nil
	}
	return u.OptionalString
}

func (u *UserProfile) GetOptionalInteger() *int {
	if u == nil {
		return nil
	}
	return u.OptionalInteger
}

func (u *UserProfile) GetOptionalBoolean() *bool {
	if u == nil {
		return nil
	}
	return u.OptionalBoolean
}

func (u *UserProfile) GetOptionalDate() *time.Time {
	if u == nil {
		return nil
	}
	return u.OptionalDate
}

func (u *UserProfile) GetOptionalObject() *Address {
	if u == nil {
		return nil
	}
	return u.OptionalObject
}

func (u *UserProfile) GetOptionalList() []string {
	if u == nil {
		return nil
	}
	return u.OptionalList
}

func (u *UserProfile) GetOptionalMap() map[string]string {
	if u == nil {
		return nil
	}
	return u.OptionalMap
}

func (u *UserProfile) GetOptionalNullableString() *string {
	if u == nil {
		return nil
	}
	return u.OptionalNullableString
}

func (u *UserProfile) GetOptionalNullableObject() *Address {
	if u == nil {
		return nil
	}
	return u.OptionalNullableObject
}

func (u *UserProfile) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserProfile) UnmarshalJSON(data []byte) error {
	type embed UserProfile
	var unmarshaler = struct {
		embed
		NullableDate *internal.DateTime `json:"nullableDate,omitempty"`
		OptionalDate *internal.DateTime `json:"optionalDate,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserProfile(unmarshaler.embed)
	u.NullableDate = unmarshaler.NullableDate.TimePtr()
	u.OptionalDate = unmarshaler.OptionalDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *UserProfile) MarshalJSON() ([]byte, error) {
	type embed UserProfile
	var marshaler = struct {
		embed
		NullableDate *internal.DateTime `json:"nullableDate,omitempty"`
		OptionalDate *internal.DateTime `json:"optionalDate,omitempty"`
	}{
		embed:        embed(*u),
		NullableDate: internal.NewOptionalDateTime(u.NullableDate),
		OptionalDate: internal.NewOptionalDateTime(u.OptionalDate),
	}
	return json.Marshal(marshaler)
}

func (u *UserProfile) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserResponse struct {
	Id        string     `json:"id" url:"id"`
	Username  string     `json:"username" url:"username"`
	Email     *string    `json:"email,omitempty" url:"email,omitempty"`
	Phone     *string    `json:"phone,omitempty" url:"phone,omitempty"`
	CreatedAt time.Time  `json:"createdAt" url:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`
	Address   *Address   `json:"address,omitempty" url:"address,omitempty"`

	extraProperties map[string]interface{}
}

func (u *UserResponse) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UserResponse) GetUsername() string {
	if u == nil {
		return ""
	}
	return u.Username
}

func (u *UserResponse) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserResponse) GetPhone() *string {
	if u == nil {
		return nil
	}
	return u.Phone
}

func (u *UserResponse) GetCreatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.CreatedAt
}

func (u *UserResponse) GetUpdatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UserResponse) GetAddress() *Address {
	if u == nil {
		return nil
	}
	return u.Address
}

func (u *UserResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserResponse) UnmarshalJSON(data []byte) error {
	type embed UserResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserResponse(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *UserResponse) MarshalJSON() ([]byte, error) {
	type embed UserResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewDateTime(u.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(u.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UserResponse) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
