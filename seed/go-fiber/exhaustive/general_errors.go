// Code generated by Fern. DO NOT EDIT.

package exhaustive

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/exhaustive/fern/internal"
	big "math/big"
)

var (
	badObjectRequestInfoFieldMessage = big.NewInt(1 << 0)
)

type BadObjectRequestInfo struct {
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BadObjectRequestInfo) GetMessage() string {
	if b == nil {
		return ""
	}
	return b.Message
}

func (b *BadObjectRequestInfo) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BadObjectRequestInfo) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BadObjectRequestInfo) SetMessage(message string) {
	b.Message = message
	b.require(badObjectRequestInfoFieldMessage)
}

func (b *BadObjectRequestInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler BadObjectRequestInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BadObjectRequestInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BadObjectRequestInfo) MarshalJSON() ([]byte, error) {
	type embed BadObjectRequestInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BadObjectRequestInfo) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}
