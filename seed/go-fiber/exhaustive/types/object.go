// This file was auto-generated by Fern from our API Definition.

package types

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/exhaustive/fern/internal"
	uuid "github.com/google/uuid"
	time "time"
)

type DoubleOptional struct {
	OptionalAlias *OptionalAlias `json:"optionalAlias,omitempty" url:"optionalAlias,omitempty"`

	extraProperties map[string]interface{}
}

func (d *DoubleOptional) GetOptionalAlias() *OptionalAlias {
	if d == nil {
		return nil
	}
	return d.OptionalAlias
}

func (d *DoubleOptional) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DoubleOptional) UnmarshalJSON(data []byte) error {
	type unmarshaler DoubleOptional
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DoubleOptional(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	return nil
}

func (d *DoubleOptional) String() string {
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type NestedObjectWithOptionalField struct {
	String       *string                  `json:"string,omitempty" url:"string,omitempty"`
	NestedObject *ObjectWithOptionalField `json:"NestedObject,omitempty" url:"NestedObject,omitempty"`

	extraProperties map[string]interface{}
}

func (n *NestedObjectWithOptionalField) GetString() *string {
	if n == nil {
		return nil
	}
	return n.String
}

func (n *NestedObjectWithOptionalField) GetNestedObject() *ObjectWithOptionalField {
	if n == nil {
		return nil
	}
	return n.NestedObject
}

func (n *NestedObjectWithOptionalField) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedObjectWithOptionalField) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedObjectWithOptionalField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedObjectWithOptionalField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	return nil
}

func (n *NestedObjectWithOptionalField) String() string {
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NestedObjectWithRequiredField struct {
	String       string                   `json:"string" url:"string"`
	NestedObject *ObjectWithOptionalField `json:"NestedObject,omitempty" url:"NestedObject,omitempty"`

	extraProperties map[string]interface{}
}

func (n *NestedObjectWithRequiredField) GetString() string {
	if n == nil {
		return ""
	}
	return n.String
}

func (n *NestedObjectWithRequiredField) GetNestedObject() *ObjectWithOptionalField {
	if n == nil {
		return nil
	}
	return n.NestedObject
}

func (n *NestedObjectWithRequiredField) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedObjectWithRequiredField) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedObjectWithRequiredField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedObjectWithRequiredField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	return nil
}

func (n *NestedObjectWithRequiredField) String() string {
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type ObjectWithMapOfMap struct {
	Map map[string]map[string]string `json:"map,omitempty" url:"map,omitempty"`

	extraProperties map[string]interface{}
}

func (o *ObjectWithMapOfMap) GetMap() map[string]map[string]string {
	if o == nil {
		return nil
	}
	return o.Map
}

func (o *ObjectWithMapOfMap) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObjectWithMapOfMap) UnmarshalJSON(data []byte) error {
	type unmarshaler ObjectWithMapOfMap
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObjectWithMapOfMap(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *ObjectWithMapOfMap) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type ObjectWithOptionalField struct {
	// This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.
	String   *string        `json:"string,omitempty" url:"string,omitempty"`
	Integer  *int           `json:"integer,omitempty" url:"integer,omitempty"`
	Long     *int64         `json:"long,omitempty" url:"long,omitempty"`
	Double   *float64       `json:"double,omitempty" url:"double,omitempty"`
	Bool     *bool          `json:"bool,omitempty" url:"bool,omitempty"`
	Datetime *time.Time     `json:"datetime,omitempty" url:"datetime,omitempty"`
	Date     *time.Time     `json:"date,omitempty" url:"date,omitempty" format:"date"`
	Uuid     *uuid.UUID     `json:"uuid,omitempty" url:"uuid,omitempty"`
	Base64   *[]byte        `json:"base64,omitempty" url:"base64,omitempty"`
	List     []string       `json:"list,omitempty" url:"list,omitempty"`
	Set      []string       `json:"set,omitempty" url:"set,omitempty"`
	Map      map[int]string `json:"map,omitempty" url:"map,omitempty"`
	Bigint   *string        `json:"bigint,omitempty" url:"bigint,omitempty"`

	extraProperties map[string]interface{}
}

func (o *ObjectWithOptionalField) GetString() *string {
	if o == nil {
		return nil
	}
	return o.String
}

func (o *ObjectWithOptionalField) GetInteger() *int {
	if o == nil {
		return nil
	}
	return o.Integer
}

func (o *ObjectWithOptionalField) GetLong() *int64 {
	if o == nil {
		return nil
	}
	return o.Long
}

func (o *ObjectWithOptionalField) GetDouble() *float64 {
	if o == nil {
		return nil
	}
	return o.Double
}

func (o *ObjectWithOptionalField) GetBool() *bool {
	if o == nil {
		return nil
	}
	return o.Bool
}

func (o *ObjectWithOptionalField) GetDatetime() *time.Time {
	if o == nil {
		return nil
	}
	return o.Datetime
}

func (o *ObjectWithOptionalField) GetDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.Date
}

func (o *ObjectWithOptionalField) GetUuid() *uuid.UUID {
	if o == nil {
		return nil
	}
	return o.Uuid
}

func (o *ObjectWithOptionalField) GetBase64() *[]byte {
	if o == nil {
		return nil
	}
	return o.Base64
}

func (o *ObjectWithOptionalField) GetList() []string {
	if o == nil {
		return nil
	}
	return o.List
}

func (o *ObjectWithOptionalField) GetSet() []string {
	if o == nil {
		return nil
	}
	return o.Set
}

func (o *ObjectWithOptionalField) GetMap() map[int]string {
	if o == nil {
		return nil
	}
	return o.Map
}

func (o *ObjectWithOptionalField) GetBigint() *string {
	if o == nil {
		return nil
	}
	return o.Bigint
}

func (o *ObjectWithOptionalField) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObjectWithOptionalField) UnmarshalJSON(data []byte) error {
	type embed ObjectWithOptionalField
	var unmarshaler = struct {
		embed
		Datetime *internal.DateTime `json:"datetime,omitempty"`
		Date     *internal.Date     `json:"date,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = ObjectWithOptionalField(unmarshaler.embed)
	o.Datetime = unmarshaler.Datetime.TimePtr()
	o.Date = unmarshaler.Date.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *ObjectWithOptionalField) MarshalJSON() ([]byte, error) {
	type embed ObjectWithOptionalField
	var marshaler = struct {
		embed
		Datetime *internal.DateTime `json:"datetime,omitempty"`
		Date     *internal.Date     `json:"date,omitempty"`
	}{
		embed:    embed(*o),
		Datetime: internal.NewOptionalDateTime(o.Datetime),
		Date:     internal.NewOptionalDate(o.Date),
	}
	return json.Marshal(marshaler)
}

func (o *ObjectWithOptionalField) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type ObjectWithRequiredField struct {
	String string `json:"string" url:"string"`

	extraProperties map[string]interface{}
}

func (o *ObjectWithRequiredField) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *ObjectWithRequiredField) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObjectWithRequiredField) UnmarshalJSON(data []byte) error {
	type unmarshaler ObjectWithRequiredField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObjectWithRequiredField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *ObjectWithRequiredField) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OptionalAlias = *string
