// Code generated by Fern. DO NOT EDIT.

package object

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	internal "github.com/object/fern/internal"
	big "math/big"
	time "time"
)

var (
	nameFieldId    = big.NewInt(1 << 0)
	nameFieldValue = big.NewInt(1 << 1)
)

type Name struct {
	Id    string `json:"id" url:"id"`
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (n *Name) GetId() string {
	if n == nil {
		return ""
	}
	return n.Id
}

func (n *Name) GetValue() string {
	if n == nil {
		return ""
	}
	return n.Value
}

func (n *Name) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *Name) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Name) SetId(id string) {
	n.Id = id
	n.require(nameFieldId)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *Name) SetValue(value string) {
	n.Value = value
	n.require(nameFieldValue)
}

func (n *Name) UnmarshalJSON(data []byte) error {
	type unmarshaler Name
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Name(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	return nil
}

func (n *Name) MarshalJSON() ([]byte, error) {
	type embed Name
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *Name) String() string {
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Exercises all of the built-in types.
var (
	typeFieldOne         = big.NewInt(1 << 0)
	typeFieldTwo         = big.NewInt(1 << 1)
	typeFieldThree       = big.NewInt(1 << 2)
	typeFieldFour        = big.NewInt(1 << 3)
	typeFieldFive        = big.NewInt(1 << 4)
	typeFieldSix         = big.NewInt(1 << 5)
	typeFieldSeven       = big.NewInt(1 << 6)
	typeFieldEight       = big.NewInt(1 << 7)
	typeFieldNine        = big.NewInt(1 << 8)
	typeFieldTen         = big.NewInt(1 << 9)
	typeFieldEleven      = big.NewInt(1 << 10)
	typeFieldTwelve      = big.NewInt(1 << 11)
	typeFieldThirteen    = big.NewInt(1 << 12)
	typeFieldFourteen    = big.NewInt(1 << 13)
	typeFieldFifteen     = big.NewInt(1 << 14)
	typeFieldSixteen     = big.NewInt(1 << 15)
	typeFieldSeventeen   = big.NewInt(1 << 16)
	typeFieldNineteen    = big.NewInt(1 << 17)
	typeFieldTwenty      = big.NewInt(1 << 18)
	typeFieldTwentyone   = big.NewInt(1 << 19)
	typeFieldTwentytwo   = big.NewInt(1 << 20)
	typeFieldTwentythree = big.NewInt(1 << 21)
	typeFieldTwentyfour  = big.NewInt(1 << 22)
	typeFieldTwentyfive  = big.NewInt(1 << 23)
)

type Type struct {
	One         int              `json:"one" url:"one"`
	Two         float64          `json:"two" url:"two"`
	Three       string           `json:"three" url:"three"`
	Four        bool             `json:"four" url:"four"`
	Five        int64            `json:"five" url:"five"`
	Six         time.Time        `json:"six" url:"six"`
	Seven       time.Time        `json:"seven" url:"seven" format:"date"`
	Eight       uuid.UUID        `json:"eight" url:"eight"`
	Nine        []byte           `json:"nine" url:"nine"`
	Ten         []int            `json:"ten" url:"ten"`
	Eleven      []float64        `json:"eleven" url:"eleven"`
	Twelve      map[string]bool  `json:"twelve" url:"twelve"`
	Thirteen    *int64           `json:"thirteen,omitempty" url:"thirteen,omitempty"`
	Fourteen    interface{}      `json:"fourteen" url:"fourteen"`
	Fifteen     [][]int          `json:"fifteen" url:"fifteen"`
	Sixteen     []map[string]int `json:"sixteen" url:"sixteen"`
	Seventeen   []*uuid.UUID     `json:"seventeen" url:"seventeen"`
	Nineteen    *Name            `json:"nineteen" url:"nineteen"`
	Twenty      int              `json:"twenty" url:"twenty"`
	Twentyone   int64            `json:"twentyone" url:"twentyone"`
	Twentytwo   float64          `json:"twentytwo" url:"twentytwo"`
	Twentythree string           `json:"twentythree" url:"twentythree"`
	Twentyfour  *time.Time       `json:"twentyfour,omitempty" url:"twentyfour,omitempty"`
	Twentyfive  *time.Time       `json:"twentyfive,omitempty" url:"twentyfive,omitempty" format:"date"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	eighteen       string

	extraProperties map[string]interface{}
}

func (t *Type) GetOne() int {
	if t == nil {
		return 0
	}
	return t.One
}

func (t *Type) GetTwo() float64 {
	if t == nil {
		return 0
	}
	return t.Two
}

func (t *Type) GetThree() string {
	if t == nil {
		return ""
	}
	return t.Three
}

func (t *Type) GetFour() bool {
	if t == nil {
		return false
	}
	return t.Four
}

func (t *Type) GetFive() int64 {
	if t == nil {
		return 0
	}
	return t.Five
}

func (t *Type) GetSix() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Six
}

func (t *Type) GetSeven() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.Seven
}

func (t *Type) GetEight() uuid.UUID {
	if t == nil {
		return uuid.Nil
	}
	return t.Eight
}

func (t *Type) GetNine() []byte {
	if t == nil {
		return nil
	}
	return t.Nine
}

func (t *Type) GetTen() []int {
	if t == nil {
		return nil
	}
	return t.Ten
}

func (t *Type) GetEleven() []float64 {
	if t == nil {
		return nil
	}
	return t.Eleven
}

func (t *Type) GetTwelve() map[string]bool {
	if t == nil {
		return nil
	}
	return t.Twelve
}

func (t *Type) GetThirteen() *int64 {
	if t == nil {
		return nil
	}
	return t.Thirteen
}

func (t *Type) GetFourteen() interface{} {
	if t == nil {
		return nil
	}
	return t.Fourteen
}

func (t *Type) GetFifteen() [][]int {
	if t == nil {
		return nil
	}
	return t.Fifteen
}

func (t *Type) GetSixteen() []map[string]int {
	if t == nil {
		return nil
	}
	return t.Sixteen
}

func (t *Type) GetSeventeen() []*uuid.UUID {
	if t == nil {
		return nil
	}
	return t.Seventeen
}

func (t *Type) GetNineteen() *Name {
	if t == nil {
		return nil
	}
	return t.Nineteen
}

func (t *Type) GetTwenty() int {
	if t == nil {
		return 0
	}
	return t.Twenty
}

func (t *Type) GetTwentyone() int64 {
	if t == nil {
		return 0
	}
	return t.Twentyone
}

func (t *Type) GetTwentytwo() float64 {
	if t == nil {
		return 0
	}
	return t.Twentytwo
}

func (t *Type) GetTwentythree() string {
	if t == nil {
		return ""
	}
	return t.Twentythree
}

func (t *Type) GetTwentyfour() *time.Time {
	if t == nil {
		return nil
	}
	return t.Twentyfour
}

func (t *Type) GetTwentyfive() *time.Time {
	if t == nil {
		return nil
	}
	return t.Twentyfive
}

func (t *Type) Eighteen() string {
	return t.eighteen
}

func (t *Type) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Type) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetOne sets the One field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetOne(one int) {
	t.One = one
	t.require(typeFieldOne)
}

// SetTwo sets the Two field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwo(two float64) {
	t.Two = two
	t.require(typeFieldTwo)
}

// SetThree sets the Three field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetThree(three string) {
	t.Three = three
	t.require(typeFieldThree)
}

// SetFour sets the Four field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetFour(four bool) {
	t.Four = four
	t.require(typeFieldFour)
}

// SetFive sets the Five field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetFive(five int64) {
	t.Five = five
	t.require(typeFieldFive)
}

// SetSix sets the Six field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetSix(six time.Time) {
	t.Six = six
	t.require(typeFieldSix)
}

// SetSeven sets the Seven field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetSeven(seven time.Time) {
	t.Seven = seven
	t.require(typeFieldSeven)
}

// SetEight sets the Eight field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetEight(eight uuid.UUID) {
	t.Eight = eight
	t.require(typeFieldEight)
}

// SetNine sets the Nine field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetNine(nine []byte) {
	t.Nine = nine
	t.require(typeFieldNine)
}

// SetTen sets the Ten field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTen(ten []int) {
	t.Ten = ten
	t.require(typeFieldTen)
}

// SetEleven sets the Eleven field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetEleven(eleven []float64) {
	t.Eleven = eleven
	t.require(typeFieldEleven)
}

// SetTwelve sets the Twelve field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwelve(twelve map[string]bool) {
	t.Twelve = twelve
	t.require(typeFieldTwelve)
}

// SetThirteen sets the Thirteen field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetThirteen(thirteen *int64) {
	t.Thirteen = thirteen
	t.require(typeFieldThirteen)
}

// SetFourteen sets the Fourteen field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetFourteen(fourteen interface{}) {
	t.Fourteen = fourteen
	t.require(typeFieldFourteen)
}

// SetFifteen sets the Fifteen field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetFifteen(fifteen [][]int) {
	t.Fifteen = fifteen
	t.require(typeFieldFifteen)
}

// SetSixteen sets the Sixteen field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetSixteen(sixteen []map[string]int) {
	t.Sixteen = sixteen
	t.require(typeFieldSixteen)
}

// SetSeventeen sets the Seventeen field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetSeventeen(seventeen []*uuid.UUID) {
	t.Seventeen = seventeen
	t.require(typeFieldSeventeen)
}

// SetNineteen sets the Nineteen field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetNineteen(nineteen *Name) {
	t.Nineteen = nineteen
	t.require(typeFieldNineteen)
}

// SetTwenty sets the Twenty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwenty(twenty int) {
	t.Twenty = twenty
	t.require(typeFieldTwenty)
}

// SetTwentyone sets the Twentyone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwentyone(twentyone int64) {
	t.Twentyone = twentyone
	t.require(typeFieldTwentyone)
}

// SetTwentytwo sets the Twentytwo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwentytwo(twentytwo float64) {
	t.Twentytwo = twentytwo
	t.require(typeFieldTwentytwo)
}

// SetTwentythree sets the Twentythree field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwentythree(twentythree string) {
	t.Twentythree = twentythree
	t.require(typeFieldTwentythree)
}

// SetTwentyfour sets the Twentyfour field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwentyfour(twentyfour *time.Time) {
	t.Twentyfour = twentyfour
	t.require(typeFieldTwentyfour)
}

// SetTwentyfive sets the Twentyfive field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetTwentyfive(twentyfive *time.Time) {
	t.Twentyfive = twentyfive
	t.require(typeFieldTwentyfive)
}

func (t *Type) UnmarshalJSON(data []byte) error {
	type embed Type
	var unmarshaler = struct {
		embed
		Six        *internal.DateTime `json:"six"`
		Seven      *internal.Date     `json:"seven"`
		Twentyfour *internal.DateTime `json:"twentyfour,omitempty"`
		Twentyfive *internal.Date     `json:"twentyfive,omitempty"`
		Eighteen   string             `json:"eighteen"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = Type(unmarshaler.embed)
	t.Six = unmarshaler.Six.Time()
	t.Seven = unmarshaler.Seven.Time()
	t.Twentyfour = unmarshaler.Twentyfour.TimePtr()
	t.Twentyfive = unmarshaler.Twentyfive.TimePtr()
	if unmarshaler.Eighteen != "eighteen" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "eighteen", unmarshaler.Eighteen)
	}
	t.eighteen = unmarshaler.Eighteen
	extraProperties, err := internal.ExtractExtraProperties(data, *t, "eighteen")
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	return nil
}

func (t *Type) MarshalJSON() ([]byte, error) {
	type embed Type
	var marshaler = struct {
		embed
		Six        *internal.DateTime `json:"six"`
		Seven      *internal.Date     `json:"seven"`
		Twentyfour *internal.DateTime `json:"twentyfour,omitempty"`
		Twentyfive *internal.Date     `json:"twentyfive,omitempty"`
		Eighteen   string             `json:"eighteen"`
	}{
		embed:      embed(*t),
		Six:        internal.NewDateTime(t.Six),
		Seven:      internal.NewDate(t.Seven),
		Twentyfour: internal.NewOptionalDateTime(t.Twentyfour),
		Twentyfive: internal.NewOptionalDate(t.Twentyfive),
		Eighteen:   "eighteen",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Type) String() string {
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
