# This file was auto-generated by Fern from our API Definition.

import abc
import functools
import inspect
import logging
import typing

import fastapi
from ....core.abstract_fern_service import AbstractFernService
from ....core.exceptions.fern_http_exception import FernHTTPException
from ....core.route_args import get_route_args
from ..types.metadata import Metadata
from ..types.metadata_union import MetadataUnion
from ..types.my_union import MyUnion
from ..types.nested_union_root import NestedUnionRoot
from ..types.request import Request
from ..types.union_with_duplicate_types import UnionWithDuplicateTypes


class AbstractUnionService(AbstractFernService):
    """
    AbstractUnionService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def get(self, *, body: MyUnion) -> MyUnion: ...

    @abc.abstractmethod
    def get_metadata(self) -> Metadata: ...

    @abc.abstractmethod
    def update_metadata(self, *, body: MetadataUnion) -> bool: ...

    @abc.abstractmethod
    def call(self, *, body: Request) -> bool: ...

    @abc.abstractmethod
    def duplicate_types_union(self, *, body: UnionWithDuplicateTypes) -> UnionWithDuplicateTypes: ...

    @abc.abstractmethod
    def nested_unions(self, *, body: NestedUnionRoot) -> str: ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_get(router=router)
        cls.__init_get_metadata(router=router)
        cls.__init_update_metadata(router=router)
        cls.__init_call(router=router)
        cls.__init_duplicate_types_union(router=router)
        cls.__init_nested_unions(router=router)

    @classmethod
    def __init_get(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> MyUnion:
            try:
                return cls.get(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get.__globals__)

        router.post(
            path="/",
            response_model=MyUnion,
            description=AbstractUnionService.get.__doc__,
            **get_route_args(cls.get, default_tag="union"),
        )(wrapper)

    @classmethod
    def __init_get_metadata(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_metadata)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_metadata, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_metadata)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Metadata:
            try:
                return cls.get_metadata(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_metadata' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_metadata.__globals__)

        router.get(
            path="/metadata",
            response_model=Metadata,
            description=AbstractUnionService.get_metadata.__doc__,
            **get_route_args(cls.get_metadata, default_tag="union"),
        )(wrapper)

    @classmethod
    def __init_update_metadata(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.update_metadata)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.update_metadata, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.update_metadata)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> bool:
            try:
                return cls.update_metadata(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'update_metadata' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.update_metadata.__globals__)

        router.put(
            path="/metadata",
            response_model=bool,
            description=AbstractUnionService.update_metadata.__doc__,
            **get_route_args(cls.update_metadata, default_tag="union"),
        )(wrapper)

    @classmethod
    def __init_call(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.call)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.call, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.call)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> bool:
            try:
                return cls.call(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'call' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.call.__globals__)

        router.post(
            path="/call",
            response_model=bool,
            description=AbstractUnionService.call.__doc__,
            **get_route_args(cls.call, default_tag="union"),
        )(wrapper)

    @classmethod
    def __init_duplicate_types_union(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.duplicate_types_union)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.duplicate_types_union, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.duplicate_types_union)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> UnionWithDuplicateTypes:
            try:
                return cls.duplicate_types_union(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'duplicate_types_union' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.duplicate_types_union.__globals__)

        router.post(
            path="/duplicate",
            response_model=UnionWithDuplicateTypes,
            description=AbstractUnionService.duplicate_types_union.__doc__,
            **get_route_args(cls.duplicate_types_union, default_tag="union"),
        )(wrapper)

    @classmethod
    def __init_nested_unions(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.nested_unions)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.nested_unions, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.nested_unions)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> str:
            try:
                return cls.nested_unions(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'nested_unions' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.nested_unions.__globals__)

        router.post(
            path="/nested",
            response_model=str,
            description=AbstractUnionService.nested_unions.__doc__,
            **get_route_args(cls.nested_unions, default_tag="union"),
        )(wrapper)
