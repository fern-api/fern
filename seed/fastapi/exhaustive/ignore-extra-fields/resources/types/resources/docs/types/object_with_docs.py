# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ......core.pydantic_utilities import (
    IS_PYDANTIC_V2,
    UniversalBaseModel,
    universal_field_validator,
    universal_root_validator,
)


class ObjectWithDocs(UniversalBaseModel):
    string: str = pydantic.Field()
    """
    Characters that could lead to broken generated SDKs:
    
    JSDoc (JavaScript/TypeScript):
    - @: Used for JSDoc tags
    - {: }: Used for type definitions
    - <: >: HTML tags
    - *: Can interfere with comment blocks
    - /**: JSDoc comment start
    - ** /: JSDoc comment end
    - &: HTML entities
    
    XMLDoc (C#):
    - <: >: XML tags
    - &: ': ": <: >: XML special characters
    - {: }: Used for interpolated strings
    - ///: Comment marker
    - /**: Block comment start
    - ** /: Block comment end
    
    Javadoc (Java):
    - @: Used for Javadoc tags
    - <: >: HTML tags
    - &: HTML entities
    - *: Can interfere with comment blocks
    - /**: Javadoc comment start
    - ** /: Javadoc comment end
    
    Doxygen (C++):
    - \: Used for Doxygen commands
    - @: Alternative command prefix
    - <: >: XML/HTML tags
    - &: HTML entities
    - /**: C-style comment start
    - ** /: C-style comment end
    
    RDoc (Ruby):
    - :: Used in symbol notation
    - =: Section markers
    - #: Comment marker
    - =begin: Block comment start
    - =end: Block comment end
    - @: Instance variable prefix
    - $: Global variable prefix
    - %: String literal delimiter
    - #{: String interpolation start
    - }: String interpolation end
    
    PHPDoc (PHP):
    - @: Used for PHPDoc tags
    - {: }: Used for type definitions
    - $: Variable prefix
    - /**: PHPDoc comment start
    - ** /: PHPDoc comment end
    - *: Can interfere with comment blocks
    - &: HTML entities
    """

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @ObjectWithDocs.Validators.root()
            def validate(values: ObjectWithDocs.Partial) -> ObjectWithDocs.Partial:
                ...

            @ObjectWithDocs.Validators.field("string")
            def validate_string(string: str, values: ObjectWithDocs.Partial) -> str:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[ObjectWithDocs.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[ObjectWithDocs.Validators._RootValidator]] = []
        _string_pre_validators: typing.ClassVar[typing.List[ObjectWithDocs.Validators.PreStringValidator]] = []
        _string_post_validators: typing.ClassVar[typing.List[ObjectWithDocs.Validators.StringValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[False] = False
        ) -> typing.Callable[[ObjectWithDocs.Validators._RootValidator], ObjectWithDocs.Validators._RootValidator]: ...
        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [ObjectWithDocs.Validators._PreRootValidator], ObjectWithDocs.Validators._PreRootValidator
        ]: ...
        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["string"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [ObjectWithDocs.Validators.PreStringValidator], ObjectWithDocs.Validators.PreStringValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["string"], *, pre: typing.Literal[False] = False
        ) -> typing.Callable[
            [ObjectWithDocs.Validators.StringValidator], ObjectWithDocs.Validators.StringValidator
        ]: ...
        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "string":
                    if pre:
                        cls._string_pre_validators.append(validator)
                    else:
                        cls._string_post_validators.append(validator)
                return validator

            return decorator

        class PreStringValidator(typing.Protocol):
            def __call__(self, __v: typing.Any, __values: ObjectWithDocs.Partial) -> typing.Any: ...

        class StringValidator(typing.Protocol):
            def __call__(self, __v: str, __values: ObjectWithDocs.Partial) -> str: ...

        class _PreRootValidator(typing.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any: ...

        class _RootValidator(typing.Protocol):
            def __call__(self, __values: ObjectWithDocs.Partial) -> ObjectWithDocs.Partial: ...

    @universal_root_validator(pre=True)
    def _pre_validate_types_object_with_docs(cls, values: ObjectWithDocs.Partial) -> ObjectWithDocs.Partial:
        for validator in ObjectWithDocs.Validators._pre_validators:
            values = validator(values)
        return values

    @universal_root_validator(pre=False)
    def _post_validate_types_object_with_docs(cls, values: ObjectWithDocs.Partial) -> ObjectWithDocs.Partial:
        for validator in ObjectWithDocs.Validators._post_validators:
            values = validator(values)
        return values

    @universal_field_validator("string", pre=True)
    def _pre_validate_string(cls, v: str, values: ObjectWithDocs.Partial) -> str:
        for validator in ObjectWithDocs.Validators._string_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("string", pre=False)
    def _post_validate_string(cls, v: str, values: ObjectWithDocs.Partial) -> str:
        for validator in ObjectWithDocs.Validators._string_post_validators:
            v = validator(v, values)
        return v

    if not IS_PYDANTIC_V2:

        class Config:
            extra = pydantic.Extra.ignore
