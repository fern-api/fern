# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ......core.pydantic_utilities import UniversalBaseModel
import typing
from .error import Error
from ......core.pydantic_utilities import universal_root_validator
from ......core.pydantic_utilities import universal_field_validator
from ......core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class PutResponse(UniversalBaseModel):
    errors: typing.Optional[typing.List[Error]] = None

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @PutResponse.Validators.root()
            def validate(values: PutResponse.Partial) -> PutResponse.Partial:
                ...

            @PutResponse.Validators.field("errors")
            def validate_errors(errors: typing.Optional[typing.List[Error]], values: PutResponse.Partial) -> typing.Optional[typing.List[Error]]:
                ...
        """

        _pre_validators: typing.ClassVar[
            typing.List[PutResponse.Validators._PreRootValidator]
        ] = []
        _post_validators: typing.ClassVar[
            typing.List[PutResponse.Validators._RootValidator]
        ] = []
        _errors_pre_validators: typing.ClassVar[
            typing.List[PutResponse.Validators.PreErrorsValidator]
        ] = []
        _errors_post_validators: typing.ClassVar[
            typing.List[PutResponse.Validators.ErrorsValidator]
        ] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[False] = False
        ) -> typing.Callable[
            [PutResponse.Validators._RootValidator],
            PutResponse.Validators._RootValidator,
        ]: ...
        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [PutResponse.Validators._PreRootValidator],
            PutResponse.Validators._PreRootValidator,
        ]: ...
        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["errors"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [PutResponse.Validators.PreErrorsValidator],
            PutResponse.Validators.PreErrorsValidator,
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls,
            field_name: typing.Literal["errors"],
            *,
            pre: typing.Literal[False] = False,
        ) -> typing.Callable[
            [PutResponse.Validators.ErrorsValidator],
            PutResponse.Validators.ErrorsValidator,
        ]: ...
        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "errors":
                    if pre:
                        cls._errors_pre_validators.append(validator)
                    else:
                        cls._errors_post_validators.append(validator)
                return validator

            return decorator

        class PreErrorsValidator(typing.Protocol):
            def __call__(
                self, __v: typing.Any, __values: PutResponse.Partial
            ) -> typing.Any: ...

        class ErrorsValidator(typing.Protocol):
            def __call__(
                self,
                __v: typing.Optional[typing.List[Error]],
                __values: PutResponse.Partial,
            ) -> typing.Optional[typing.List[Error]]: ...

        class _PreRootValidator(typing.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any: ...

        class _RootValidator(typing.Protocol):
            def __call__(
                self, __values: PutResponse.Partial
            ) -> PutResponse.Partial: ...

    @universal_root_validator(pre=True)
    def _pre_validate_endpoints_put_response(
        cls, values: PutResponse.Partial
    ) -> PutResponse.Partial:
        for validator in PutResponse.Validators._pre_validators:
            values = validator(values)
        return values

    @universal_root_validator(pre=False)
    def _post_validate_endpoints_put_response(
        cls, values: PutResponse.Partial
    ) -> PutResponse.Partial:
        for validator in PutResponse.Validators._post_validators:
            values = validator(values)
        return values

    @universal_field_validator("errors", pre=True)
    def _pre_validate_errors(
        cls, v: typing.Optional[typing.List[Error]], values: PutResponse.Partial
    ) -> typing.Optional[typing.List[Error]]:
        for validator in PutResponse.Validators._errors_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("errors", pre=False)
    def _post_validate_errors(
        cls, v: typing.Optional[typing.List[Error]], values: PutResponse.Partial
    ) -> typing.Optional[typing.List[Error]]:
        for validator in PutResponse.Validators._errors_post_validators:
            v = validator(v, values)
        return v

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="forbid"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.forbid
