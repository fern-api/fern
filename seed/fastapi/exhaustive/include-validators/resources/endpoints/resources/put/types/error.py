# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ......core.pydantic_utilities import UniversalBaseModel
from .error_category import ErrorCategory
from .error_code import ErrorCode
import typing
from ......core.pydantic_utilities import universal_root_validator
from ......core.pydantic_utilities import universal_field_validator
from ......core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Error(UniversalBaseModel):
    category: ErrorCategory
    code: ErrorCode
    detail: typing.Optional[str] = None
    field: typing.Optional[str] = None

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @Error.Validators.root()
            def validate(values: Error.Partial) -> Error.Partial:
                ...

            @Error.Validators.field("category")
            def validate_category(category: ErrorCategory, values: Error.Partial) -> ErrorCategory:
                ...

            @Error.Validators.field("code")
            def validate_code(code: ErrorCode, values: Error.Partial) -> ErrorCode:
                ...

            @Error.Validators.field("detail")
            def validate_detail(detail: typing.Optional[str], values: Error.Partial) -> typing.Optional[str]:
                ...

            @Error.Validators.field("field")
            def validate_field(field: typing.Optional[str], values: Error.Partial) -> typing.Optional[str]:
                ...
        """

        _pre_validators: typing.ClassVar[
            typing.List[Error.Validators._PreRootValidator]
        ] = []
        _post_validators: typing.ClassVar[
            typing.List[Error.Validators._RootValidator]
        ] = []
        _category_pre_validators: typing.ClassVar[
            typing.List[Error.Validators.PreCategoryValidator]
        ] = []
        _category_post_validators: typing.ClassVar[
            typing.List[Error.Validators.CategoryValidator]
        ] = []
        _code_pre_validators: typing.ClassVar[
            typing.List[Error.Validators.PreCodeValidator]
        ] = []
        _code_post_validators: typing.ClassVar[
            typing.List[Error.Validators.CodeValidator]
        ] = []
        _detail_pre_validators: typing.ClassVar[
            typing.List[Error.Validators.PreDetailValidator]
        ] = []
        _detail_post_validators: typing.ClassVar[
            typing.List[Error.Validators.DetailValidator]
        ] = []
        _field_pre_validators: typing.ClassVar[
            typing.List[Error.Validators.PreFieldValidator]
        ] = []
        _field_post_validators: typing.ClassVar[
            typing.List[Error.Validators.FieldValidator]
        ] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[False] = False
        ) -> typing.Callable[
            [Error.Validators._RootValidator], Error.Validators._RootValidator
        ]: ...
        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [Error.Validators._PreRootValidator], Error.Validators._PreRootValidator
        ]: ...
        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["category"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [Error.Validators.PreCategoryValidator],
            Error.Validators.PreCategoryValidator,
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls,
            field_name: typing.Literal["category"],
            *,
            pre: typing.Literal[False] = False,
        ) -> typing.Callable[
            [Error.Validators.CategoryValidator], Error.Validators.CategoryValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["code"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [Error.Validators.PreCodeValidator], Error.Validators.PreCodeValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls,
            field_name: typing.Literal["code"],
            *,
            pre: typing.Literal[False] = False,
        ) -> typing.Callable[
            [Error.Validators.CodeValidator], Error.Validators.CodeValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["detail"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [Error.Validators.PreDetailValidator], Error.Validators.PreDetailValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls,
            field_name: typing.Literal["detail"],
            *,
            pre: typing.Literal[False] = False,
        ) -> typing.Callable[
            [Error.Validators.DetailValidator], Error.Validators.DetailValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing.Literal["field"], *, pre: typing.Literal[True]
        ) -> typing.Callable[
            [Error.Validators.PreFieldValidator], Error.Validators.PreFieldValidator
        ]: ...
        @typing.overload
        @classmethod
        def field(
            cls,
            field_name: typing.Literal["field"],
            *,
            pre: typing.Literal[False] = False,
        ) -> typing.Callable[
            [Error.Validators.FieldValidator], Error.Validators.FieldValidator
        ]: ...
        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "category":
                    if pre:
                        cls._category_pre_validators.append(validator)
                    else:
                        cls._category_post_validators.append(validator)
                if field_name == "code":
                    if pre:
                        cls._code_pre_validators.append(validator)
                    else:
                        cls._code_post_validators.append(validator)
                if field_name == "detail":
                    if pre:
                        cls._detail_pre_validators.append(validator)
                    else:
                        cls._detail_post_validators.append(validator)
                if field_name == "field":
                    if pre:
                        cls._field_pre_validators.append(validator)
                    else:
                        cls._field_post_validators.append(validator)
                return validator

            return decorator

        class PreCategoryValidator(typing.Protocol):
            def __call__(
                self, __v: typing.Any, __values: Error.Partial
            ) -> typing.Any: ...

        class CategoryValidator(typing.Protocol):
            def __call__(
                self, __v: ErrorCategory, __values: Error.Partial
            ) -> ErrorCategory: ...

        class PreCodeValidator(typing.Protocol):
            def __call__(
                self, __v: typing.Any, __values: Error.Partial
            ) -> typing.Any: ...

        class CodeValidator(typing.Protocol):
            def __call__(
                self, __v: ErrorCode, __values: Error.Partial
            ) -> ErrorCode: ...

        class PreDetailValidator(typing.Protocol):
            def __call__(
                self, __v: typing.Any, __values: Error.Partial
            ) -> typing.Any: ...

        class DetailValidator(typing.Protocol):
            def __call__(
                self, __v: typing.Optional[str], __values: Error.Partial
            ) -> typing.Optional[str]: ...

        class PreFieldValidator(typing.Protocol):
            def __call__(
                self, __v: typing.Any, __values: Error.Partial
            ) -> typing.Any: ...

        class FieldValidator(typing.Protocol):
            def __call__(
                self, __v: typing.Optional[str], __values: Error.Partial
            ) -> typing.Optional[str]: ...

        class _PreRootValidator(typing.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any: ...

        class _RootValidator(typing.Protocol):
            def __call__(self, __values: Error.Partial) -> Error.Partial: ...

    @universal_root_validator(pre=True)
    def _pre_validate_endpoints_error(cls, values: Error.Partial) -> Error.Partial:
        for validator in Error.Validators._pre_validators:
            values = validator(values)
        return values

    @universal_root_validator(pre=False)
    def _post_validate_endpoints_error(cls, values: Error.Partial) -> Error.Partial:
        for validator in Error.Validators._post_validators:
            values = validator(values)
        return values

    @universal_field_validator("category", pre=True)
    def _pre_validate_category(
        cls, v: ErrorCategory, values: Error.Partial
    ) -> ErrorCategory:
        for validator in Error.Validators._category_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("category", pre=False)
    def _post_validate_category(
        cls, v: ErrorCategory, values: Error.Partial
    ) -> ErrorCategory:
        for validator in Error.Validators._category_post_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("code", pre=True)
    def _pre_validate_code(cls, v: ErrorCode, values: Error.Partial) -> ErrorCode:
        for validator in Error.Validators._code_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("code", pre=False)
    def _post_validate_code(cls, v: ErrorCode, values: Error.Partial) -> ErrorCode:
        for validator in Error.Validators._code_post_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("detail", pre=True)
    def _pre_validate_detail(
        cls, v: typing.Optional[str], values: Error.Partial
    ) -> typing.Optional[str]:
        for validator in Error.Validators._detail_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("detail", pre=False)
    def _post_validate_detail(
        cls, v: typing.Optional[str], values: Error.Partial
    ) -> typing.Optional[str]:
        for validator in Error.Validators._detail_post_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("field", pre=True)
    def _pre_validate_field(
        cls, v: typing.Optional[str], values: Error.Partial
    ) -> typing.Optional[str]:
        for validator in Error.Validators._field_pre_validators:
            v = validator(v, values)
        return v

    @universal_field_validator("field", pre=False)
    def _post_validate_field(
        cls, v: typing.Optional[str], values: Error.Partial
    ) -> typing.Optional[str]:
        for validator in Error.Validators._field_post_validators:
            v = validator(v, values)
        return v

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="forbid"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.forbid
