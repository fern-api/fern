# This file was auto-generated by Fern from our API Definition.

import abc
import functools
import inspect
import logging
import typing

import fastapi
from ......core.abstract_fern_service import AbstractFernService
from ......core.exceptions.fern_http_exception import FernHTTPException
from ......core.route_args import get_route_args
from ......security import ApiAuth, FernAuth


class AbstractEndpointsUrlsService(AbstractFernService):
    """
    AbstractEndpointsUrlsService is an abstract class containing the methods that you should implement.
    
    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """
    
    @abc.abstractmethod
    def with_mixed_case(self, *, auth: ApiAuth) -> str:
        ...
    
    @abc.abstractmethod
    def no_ending_slash(self, *, auth: ApiAuth) -> str:
        ...
    
    @abc.abstractmethod
    def with_ending_slash(self, *, auth: ApiAuth) -> str:
        ...
    
    @abc.abstractmethod
    def with_underscores(self, *, auth: ApiAuth) -> str:
        ...
    
    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """
    
    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_with_mixed_case(router=router)
        cls.__init_no_ending_slash(router=router)
        cls.__init_with_ending_slash(router=router)
        cls.__init_with_underscores(router=router)
    
    @classmethod
    def __init_with_mixed_case(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.with_mixed_case)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "auth":
                new_parameters.append(parameter.replace(default=fastapi.Depends(FernAuth)))
            else:
                new_parameters.append(parameter)
        setattr(cls.with_mixed_case, "__signature__", endpoint_function.replace(parameters=new_parameters))
        
        @functools.wraps(cls.with_mixed_case)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> str:
            try:
                return cls.with_mixed_case(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'with_mixed_case' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e
        
        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.with_mixed_case.__globals__)
        
        router.get(
            path="/urls/MixedCase",
            response_model=str,
            description=AbstractEndpointsUrlsService.with_mixed_case.__doc__,
            **get_route_args(cls.with_mixed_case, default_tag="endpoints.urls"),
        )(wrapper)
    
    @classmethod
    def __init_no_ending_slash(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.no_ending_slash)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "auth":
                new_parameters.append(parameter.replace(default=fastapi.Depends(FernAuth)))
            else:
                new_parameters.append(parameter)
        setattr(cls.no_ending_slash, "__signature__", endpoint_function.replace(parameters=new_parameters))
        
        @functools.wraps(cls.no_ending_slash)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> str:
            try:
                return cls.no_ending_slash(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'no_ending_slash' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e
        
        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.no_ending_slash.__globals__)
        
        router.get(
            path="/urls/no-ending-slash",
            response_model=str,
            description=AbstractEndpointsUrlsService.no_ending_slash.__doc__,
            **get_route_args(cls.no_ending_slash, default_tag="endpoints.urls"),
        )(wrapper)
    
    @classmethod
    def __init_with_ending_slash(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.with_ending_slash)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "auth":
                new_parameters.append(parameter.replace(default=fastapi.Depends(FernAuth)))
            else:
                new_parameters.append(parameter)
        setattr(cls.with_ending_slash, "__signature__", endpoint_function.replace(parameters=new_parameters))
        
        @functools.wraps(cls.with_ending_slash)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> str:
            try:
                return cls.with_ending_slash(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'with_ending_slash' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e
        
        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.with_ending_slash.__globals__)
        
        router.get(
            path="/urls/with-ending-slash/",
            response_model=str,
            description=AbstractEndpointsUrlsService.with_ending_slash.__doc__,
            **get_route_args(cls.with_ending_slash, default_tag="endpoints.urls"),
        )(wrapper)
    
    @classmethod
    def __init_with_underscores(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.with_underscores)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "auth":
                new_parameters.append(parameter.replace(default=fastapi.Depends(FernAuth)))
            else:
                new_parameters.append(parameter)
        setattr(cls.with_underscores, "__signature__", endpoint_function.replace(parameters=new_parameters))
        
        @functools.wraps(cls.with_underscores)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> str:
            try:
                return cls.with_underscores(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'with_underscores' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e
        
        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.with_underscores.__globals__)
        
        router.get(
            path="/urls/with_underscores",
            response_model=str,
            description=AbstractEndpointsUrlsService.with_underscores.__doc__,
            **get_route_args(cls.with_underscores, default_tag="endpoints.urls"),
        )(wrapper)
