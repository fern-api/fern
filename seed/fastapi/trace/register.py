# This file was auto-generated by Fern from our API Definition.

import fastapi
from .resources.v_2.service.service import AbstractV2Service
from .resources.admin.service.service import AbstractAdminService
from .resources.homepage.service.service import AbstractHomepageService
from .resources.migration.service.service import AbstractMigrationService
from .resources.playlist.service.service import AbstractPlaylistService
from .resources.problem.service.service import AbstractProblemService
from .resources.submission.service.service import AbstractSubmissionService
from .resources.sysprop.service.service import AbstractSyspropService
from .resources.v_2.resources.problem.service.service import AbstractV2ProblemService
from .resources.v_2.resources.v_3.resources.problem.service.service import AbstractV2V3ProblemService
import typing
from fastapi import params
from .core.exceptions.fern_http_exception import FernHTTPException
from .core.exceptions import fern_http_exception_handler
import starlette.exceptions
from .core.exceptions import http_exception_handler
from .core.exceptions import default_exception_handler
from .core.abstract_fern_service import AbstractFernService
import types
import os
import glob
import importlib


def register(
    _app: fastapi.FastAPI,
    *,
    v_2: AbstractV2Service,
    admin: AbstractAdminService,
    homepage: AbstractHomepageService,
    migration: AbstractMigrationService,
    playlist: AbstractPlaylistService,
    problem: AbstractProblemService,
    submission: AbstractSubmissionService,
    sysprop: AbstractSyspropService,
    v_2_problem: AbstractV2ProblemService,
    v_2_v_3_problem: AbstractV2V3ProblemService,
    dependencies: typing.Optional[typing.Sequence[params.Depends]] = None,
) -> None:
    _app.include_router(__register_service(v_2), dependencies=dependencies)
    _app.include_router(__register_service(admin), dependencies=dependencies)
    _app.include_router(__register_service(homepage), dependencies=dependencies)
    _app.include_router(__register_service(migration), dependencies=dependencies)
    _app.include_router(__register_service(playlist), dependencies=dependencies)
    _app.include_router(__register_service(problem), dependencies=dependencies)
    _app.include_router(__register_service(submission), dependencies=dependencies)
    _app.include_router(__register_service(sysprop), dependencies=dependencies)
    _app.include_router(__register_service(v_2_problem), dependencies=dependencies)
    _app.include_router(__register_service(v_2_v_3_problem), dependencies=dependencies)

    _app.add_exception_handler(FernHTTPException, fern_http_exception_handler)  # type: ignore
    _app.add_exception_handler(starlette.exceptions.HTTPException, http_exception_handler)  # type: ignore
    _app.add_exception_handler(Exception, default_exception_handler)  # type: ignore


def __register_service(service: AbstractFernService) -> fastapi.APIRouter:
    router = fastapi.APIRouter()
    type(service)._init_fern(router)
    return router


def register_validators(module: types.ModuleType) -> None:
    validators_directory: str = os.path.dirname(module.__file__)  # type: ignore
    for path in glob.glob(os.path.join(validators_directory, "**/*.py"), recursive=True):
        if os.path.isfile(path):
            relative_path = os.path.relpath(path, start=validators_directory)
            module_path = ".".join([module.__name__] + relative_path[:-3].split("/"))
            importlib.import_module(module_path)
