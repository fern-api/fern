# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...commons.types.problem_id import ProblemId
from .code_execution_update import (
    CodeExecutionUpdate as resources_submission_types_code_execution_update_CodeExecutionUpdate,
)
from .exception_info import ExceptionInfo
from .terminated_response import TerminatedResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def server_initialized(self) -> SubmissionResponse:
        return SubmissionResponse(__root__=_SubmissionResponse.ServerInitialized(type="serverInitialized"))

    def problem_initialized(self, value: ProblemId) -> SubmissionResponse:
        return SubmissionResponse(
            __root__=_SubmissionResponse.ProblemInitialized(type="problemInitialized", value=value)
        )

    def workspace_initialized(self) -> SubmissionResponse:
        return SubmissionResponse(__root__=_SubmissionResponse.WorkspaceInitialized(type="workspaceInitialized"))

    def server_errored(self, value: ExceptionInfo) -> SubmissionResponse:
        return SubmissionResponse(
            __root__=_SubmissionResponse.ServerErrored(**value.dict(exclude_unset=True), type="serverErrored")
        )

    def code_execution_update(
        self, value: resources_submission_types_code_execution_update_CodeExecutionUpdate
    ) -> SubmissionResponse:
        return SubmissionResponse(
            __root__=_SubmissionResponse.CodeExecutionUpdate(type="codeExecutionUpdate", value=value)
        )

    def terminated(self, value: TerminatedResponse) -> SubmissionResponse:
        return SubmissionResponse(
            __root__=_SubmissionResponse.Terminated(**value.dict(exclude_unset=True), type="terminated")
        )


class SubmissionResponse(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(
        self,
    ) -> typing.Union[
        _SubmissionResponse.ServerInitialized,
        _SubmissionResponse.ProblemInitialized,
        _SubmissionResponse.WorkspaceInitialized,
        _SubmissionResponse.ServerErrored,
        _SubmissionResponse.CodeExecutionUpdate,
        _SubmissionResponse.Terminated,
    ]:
        return self.__root__

    def visit(
        self,
        server_initialized: typing.Callable[[], T_Result],
        problem_initialized: typing.Callable[[ProblemId], T_Result],
        workspace_initialized: typing.Callable[[], T_Result],
        server_errored: typing.Callable[[ExceptionInfo], T_Result],
        code_execution_update: typing.Callable[
            [resources_submission_types_code_execution_update_CodeExecutionUpdate], T_Result
        ],
        terminated: typing.Callable[[TerminatedResponse], T_Result],
    ) -> T_Result:
        if self.__root__.type == "serverInitialized":
            return server_initialized()
        if self.__root__.type == "problemInitialized":
            return problem_initialized(self.__root__.value)
        if self.__root__.type == "workspaceInitialized":
            return workspace_initialized()
        if self.__root__.type == "serverErrored":
            return server_errored(ExceptionInfo(**self.__root__.dict(exclude_unset=True, exclude={"type"})))
        if self.__root__.type == "codeExecutionUpdate":
            return code_execution_update(self.__root__.value)
        if self.__root__.type == "terminated":
            return terminated(TerminatedResponse(**self.__root__.dict(exclude_unset=True, exclude={"type"})))

    __root__: typing.Annotated[
        typing.Union[
            _SubmissionResponse.ServerInitialized,
            _SubmissionResponse.ProblemInitialized,
            _SubmissionResponse.WorkspaceInitialized,
            _SubmissionResponse.ServerErrored,
            _SubmissionResponse.CodeExecutionUpdate,
            _SubmissionResponse.Terminated,
        ],
        pydantic.Field(discriminator="type"),
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


class _SubmissionResponse:
    class ServerInitialized(pydantic.BaseModel):
        type: typing.Literal["serverInitialized"]

    class ProblemInitialized(pydantic.BaseModel):
        type: typing.Literal["problemInitialized"]
        value: ProblemId

    class WorkspaceInitialized(pydantic.BaseModel):
        type: typing.Literal["workspaceInitialized"]

    class ServerErrored(ExceptionInfo):
        type: typing.Literal["serverErrored"]

        class Config:
            allow_population_by_field_name = True

    class CodeExecutionUpdate(pydantic.BaseModel):
        type: typing.Literal["codeExecutionUpdate"]
        value: resources_submission_types_code_execution_update_CodeExecutionUpdate

    class Terminated(TerminatedResponse):
        type: typing.Literal["terminated"]

        class Config:
            allow_population_by_field_name = True


SubmissionResponse.update_forward_refs()
