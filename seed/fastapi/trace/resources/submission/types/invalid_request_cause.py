# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .custom_test_cases_unsupported import (
    CustomTestCasesUnsupported as resources_submission_types_custom_test_cases_unsupported_CustomTestCasesUnsupported,
)
from .submission_id_not_found import (
    SubmissionIdNotFound as resources_submission_types_submission_id_not_found_SubmissionIdNotFound,
)
from .unexpected_language_error import UnexpectedLanguageError

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def submission_id_not_found(
        self, value: resources_submission_types_submission_id_not_found_SubmissionIdNotFound
    ) -> InvalidRequestCause:
        return InvalidRequestCause(
            __root__=_InvalidRequestCause.SubmissionIdNotFound(
                **value.dict(exclude_unset=True), type="submissionIdNotFound"
            )
        )

    def custom_test_cases_unsupported(
        self, value: resources_submission_types_custom_test_cases_unsupported_CustomTestCasesUnsupported
    ) -> InvalidRequestCause:
        return InvalidRequestCause(
            __root__=_InvalidRequestCause.CustomTestCasesUnsupported(
                **value.dict(exclude_unset=True), type="customTestCasesUnsupported"
            )
        )

    def unexpected_language(self, value: UnexpectedLanguageError) -> InvalidRequestCause:
        return InvalidRequestCause(
            __root__=_InvalidRequestCause.UnexpectedLanguage(
                **value.dict(exclude_unset=True), type="unexpectedLanguage"
            )
        )


class InvalidRequestCause(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(
        self,
    ) -> typing.Union[
        _InvalidRequestCause.SubmissionIdNotFound,
        _InvalidRequestCause.CustomTestCasesUnsupported,
        _InvalidRequestCause.UnexpectedLanguage,
    ]:
        return self.__root__

    def visit(
        self,
        submission_id_not_found: typing.Callable[
            [resources_submission_types_submission_id_not_found_SubmissionIdNotFound], T_Result
        ],
        custom_test_cases_unsupported: typing.Callable[
            [resources_submission_types_custom_test_cases_unsupported_CustomTestCasesUnsupported], T_Result
        ],
        unexpected_language: typing.Callable[[UnexpectedLanguageError], T_Result],
    ) -> T_Result:
        if self.__root__.type == "submissionIdNotFound":
            return submission_id_not_found(
                resources_submission_types_submission_id_not_found_SubmissionIdNotFound(
                    **self.__root__.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if self.__root__.type == "customTestCasesUnsupported":
            return custom_test_cases_unsupported(
                resources_submission_types_custom_test_cases_unsupported_CustomTestCasesUnsupported(
                    **self.__root__.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if self.__root__.type == "unexpectedLanguage":
            return unexpected_language(
                UnexpectedLanguageError(**self.__root__.dict(exclude_unset=True, exclude={"type"}))
            )

    __root__: typing.Annotated[
        typing.Union[
            _InvalidRequestCause.SubmissionIdNotFound,
            _InvalidRequestCause.CustomTestCasesUnsupported,
            _InvalidRequestCause.UnexpectedLanguage,
        ],
        pydantic.Field(discriminator="type"),
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


class _InvalidRequestCause:
    class SubmissionIdNotFound(resources_submission_types_submission_id_not_found_SubmissionIdNotFound):
        type: typing.Literal["submissionIdNotFound"]

        class Config:
            allow_population_by_field_name = True

    class CustomTestCasesUnsupported(
        resources_submission_types_custom_test_cases_unsupported_CustomTestCasesUnsupported
    ):
        type: typing.Literal["customTestCasesUnsupported"]

        class Config:
            allow_population_by_field_name = True

    class UnexpectedLanguage(UnexpectedLanguageError):
        type: typing.Literal["unexpectedLanguage"]

        class Config:
            allow_population_by_field_name = True


InvalidRequestCause.update_forward_refs()
