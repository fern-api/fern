# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .binary_tree_value import BinaryTreeValue as resources_commons_types_binary_tree_value_BinaryTreeValue
from .doubly_linked_list_value import (
    DoublyLinkedListValue as resources_commons_types_doubly_linked_list_value_DoublyLinkedListValue,
)
from .singly_linked_list_value import (
    SinglyLinkedListValue as resources_commons_types_singly_linked_list_value_SinglyLinkedListValue,
)

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def integer_value(self, value: int) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.IntegerValue(type="integerValue", value=value))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.IntegerValue(type="integerValue", value=value))  # type: ignore

    def boolean_value(self, value: bool) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.BooleanValue(type="booleanValue", value=value))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.BooleanValue(type="booleanValue", value=value))  # type: ignore

    def double_value(self, value: float) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.DoubleValue(type="doubleValue", value=value))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.DoubleValue(type="doubleValue", value=value))  # type: ignore

    def string_value(self, value: str) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.StringValue(type="stringValue", value=value))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.StringValue(type="stringValue", value=value))  # type: ignore

    def char_value(self, value: str) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.CharValue(type="charValue", value=value))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.CharValue(type="charValue", value=value))  # type: ignore

    def map_value(self, value: resources_commons_types_map_value_MapValue) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.MapValue(**value.dict(exclude_unset=True), type="mapValue"))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.MapValue(**value.dict(exclude_unset=True), type="mapValue"))  # type: ignore

    def list_value(self, value: typing.List[VariableValue]) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.ListValue(type="listValue", value=value))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.ListValue(type="listValue", value=value))  # type: ignore

    def binary_tree_value(self, value: resources_commons_types_binary_tree_value_BinaryTreeValue) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(
                root=_VariableValue.BinaryTreeValue(**value.dict(exclude_unset=True), type="binaryTreeValue")
            )  # type: ignore
        else:
            return VariableValue(
                __root__=_VariableValue.BinaryTreeValue(**value.dict(exclude_unset=True), type="binaryTreeValue")
            )  # type: ignore

    def singly_linked_list_value(
        self, value: resources_commons_types_singly_linked_list_value_SinglyLinkedListValue
    ) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(
                root=_VariableValue.SinglyLinkedListValue(
                    **value.dict(exclude_unset=True), type="singlyLinkedListValue"
                )
            )  # type: ignore
        else:
            return VariableValue(
                __root__=_VariableValue.SinglyLinkedListValue(
                    **value.dict(exclude_unset=True), type="singlyLinkedListValue"
                )
            )  # type: ignore

    def doubly_linked_list_value(
        self, value: resources_commons_types_doubly_linked_list_value_DoublyLinkedListValue
    ) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(
                root=_VariableValue.DoublyLinkedListValue(
                    **value.dict(exclude_unset=True), type="doublyLinkedListValue"
                )
            )  # type: ignore
        else:
            return VariableValue(
                __root__=_VariableValue.DoublyLinkedListValue(
                    **value.dict(exclude_unset=True), type="doublyLinkedListValue"
                )
            )  # type: ignore

    def null_value(self) -> VariableValue:
        if IS_PYDANTIC_V2:
            return VariableValue(root=_VariableValue.NullValue(type="nullValue"))  # type: ignore
        else:
            return VariableValue(__root__=_VariableValue.NullValue(type="nullValue"))  # type: ignore


class VariableValue(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _VariableValue.IntegerValue,
                _VariableValue.BooleanValue,
                _VariableValue.DoubleValue,
                _VariableValue.StringValue,
                _VariableValue.CharValue,
                _VariableValue.MapValue,
                _VariableValue.ListValue,
                _VariableValue.BinaryTreeValue,
                _VariableValue.SinglyLinkedListValue,
                _VariableValue.DoublyLinkedListValue,
                _VariableValue.NullValue,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _VariableValue.IntegerValue,
            _VariableValue.BooleanValue,
            _VariableValue.DoubleValue,
            _VariableValue.StringValue,
            _VariableValue.CharValue,
            _VariableValue.MapValue,
            _VariableValue.ListValue,
            _VariableValue.BinaryTreeValue,
            _VariableValue.SinglyLinkedListValue,
            _VariableValue.DoublyLinkedListValue,
            _VariableValue.NullValue,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _VariableValue.IntegerValue,
                _VariableValue.BooleanValue,
                _VariableValue.DoubleValue,
                _VariableValue.StringValue,
                _VariableValue.CharValue,
                _VariableValue.MapValue,
                _VariableValue.ListValue,
                _VariableValue.BinaryTreeValue,
                _VariableValue.SinglyLinkedListValue,
                _VariableValue.DoublyLinkedListValue,
                _VariableValue.NullValue,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _VariableValue.IntegerValue,
            _VariableValue.BooleanValue,
            _VariableValue.DoubleValue,
            _VariableValue.StringValue,
            _VariableValue.CharValue,
            _VariableValue.MapValue,
            _VariableValue.ListValue,
            _VariableValue.BinaryTreeValue,
            _VariableValue.SinglyLinkedListValue,
            _VariableValue.DoublyLinkedListValue,
            _VariableValue.NullValue,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        integer_value: typing.Callable[[int], T_Result],
        boolean_value: typing.Callable[[bool], T_Result],
        double_value: typing.Callable[[float], T_Result],
        string_value: typing.Callable[[str], T_Result],
        char_value: typing.Callable[[str], T_Result],
        map_value: typing.Callable[["resources_commons_types_map_value_MapValue"], T_Result],
        list_value: typing.Callable[[typing.List["VariableValue"]], T_Result],
        binary_tree_value: typing.Callable[[resources_commons_types_binary_tree_value_BinaryTreeValue], T_Result],
        singly_linked_list_value: typing.Callable[
            [resources_commons_types_singly_linked_list_value_SinglyLinkedListValue], T_Result
        ],
        doubly_linked_list_value: typing.Callable[
            [resources_commons_types_doubly_linked_list_value_DoublyLinkedListValue], T_Result
        ],
        null_value: typing.Callable[[], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "integerValue":
            return integer_value(unioned_value.value)
        if unioned_value.type == "booleanValue":
            return boolean_value(unioned_value.value)
        if unioned_value.type == "doubleValue":
            return double_value(unioned_value.value)
        if unioned_value.type == "stringValue":
            return string_value(unioned_value.value)
        if unioned_value.type == "charValue":
            return char_value(unioned_value.value)
        if unioned_value.type == "mapValue":
            return map_value(
                resources_commons_types_map_value_MapValue(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "listValue":
            return list_value(unioned_value.value)
        if unioned_value.type == "binaryTreeValue":
            return binary_tree_value(
                resources_commons_types_binary_tree_value_BinaryTreeValue(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "singlyLinkedListValue":
            return singly_linked_list_value(
                resources_commons_types_singly_linked_list_value_SinglyLinkedListValue(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "doublyLinkedListValue":
            return doubly_linked_list_value(
                resources_commons_types_doubly_linked_list_value_DoublyLinkedListValue(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "nullValue":
            return null_value()


from .map_value import MapValue as resources_commons_types_map_value_MapValue  # noqa: E402, F401, I001
from .key_value_pair import KeyValuePair  # noqa: E402, F401, I001


class _VariableValue:
    class IntegerValue(UniversalBaseModel):
        type: typing.Literal["integerValue"] = "integerValue"
        value: int

    class BooleanValue(UniversalBaseModel):
        type: typing.Literal["booleanValue"] = "booleanValue"
        value: bool

    class DoubleValue(UniversalBaseModel):
        type: typing.Literal["doubleValue"] = "doubleValue"
        value: float

    class StringValue(UniversalBaseModel):
        type: typing.Literal["stringValue"] = "stringValue"
        value: str

    class CharValue(UniversalBaseModel):
        type: typing.Literal["charValue"] = "charValue"
        value: str

    class MapValue(resources_commons_types_map_value_MapValue):
        type: typing.Literal["mapValue"] = "mapValue"

    class ListValue(UniversalBaseModel):
        type: typing.Literal["listValue"] = "listValue"
        value: typing.List[VariableValue]

    class BinaryTreeValue(resources_commons_types_binary_tree_value_BinaryTreeValue):
        type: typing.Literal["binaryTreeValue"] = "binaryTreeValue"

    class SinglyLinkedListValue(resources_commons_types_singly_linked_list_value_SinglyLinkedListValue):
        type: typing.Literal["singlyLinkedListValue"] = "singlyLinkedListValue"

    class DoublyLinkedListValue(resources_commons_types_doubly_linked_list_value_DoublyLinkedListValue):
        type: typing.Literal["doublyLinkedListValue"] = "doublyLinkedListValue"

    class NullValue(UniversalBaseModel):
        type: typing.Literal["nullValue"] = "nullValue"


update_forward_refs(_VariableValue.MapValue)
update_forward_refs(_VariableValue.ListValue)
update_forward_refs(VariableValue)
