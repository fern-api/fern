# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ....core.pydantic_utilities import IS_PYDANTIC_V2
import typing
from .binary_tree_node_and_tree_value import BinaryTreeNodeAndTreeValue
from .singly_linked_list_node_and_list_value import SinglyLinkedListNodeAndListValue
from .doubly_linked_list_node_and_list_value import DoublyLinkedListNodeAndListValue
from .generic_value import GenericValue as resources_commons_types_generic_value_GenericValue
from ....core.pydantic_utilities import UniversalRootModel
import typing_extensions
import pydantic
from ....core.pydantic_utilities import UniversalBaseModel
from ....core.pydantic_utilities import update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def integer_value(self, value: int) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.IntegerValue(type="integerValue", value=value))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.IntegerValue(type="integerValue", value=value))  # type: ignore

    def boolean_value(self, value: bool) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.BooleanValue(type="booleanValue", value=value))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.BooleanValue(type="booleanValue", value=value))  # type: ignore

    def double_value(self, value: float) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.DoubleValue(type="doubleValue", value=value))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.DoubleValue(type="doubleValue", value=value))  # type: ignore

    def string_value(self, value: str) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.StringValue(type="stringValue", value=value))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.StringValue(type="stringValue", value=value))  # type: ignore

    def char_value(self, value: str) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.CharValue(type="charValue", value=value))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.CharValue(type="charValue", value=value))  # type: ignore

    def map_value(self, value: DebugMapValue) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(
                root=_DebugVariableValue.MapValue(**value.dict(exclude_unset=True), type="mapValue")
            )  # type: ignore
        else:
            return DebugVariableValue(
                __root__=_DebugVariableValue.MapValue(**value.dict(exclude_unset=True), type="mapValue")
            )  # type: ignore

    def list_value(self, value: typing.List[DebugVariableValue]) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.ListValue(type="listValue", value=value))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.ListValue(type="listValue", value=value))  # type: ignore

    def binary_tree_node_value(self, value: BinaryTreeNodeAndTreeValue) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(
                root=_DebugVariableValue.BinaryTreeNodeValue(
                    **value.dict(exclude_unset=True), type="binaryTreeNodeValue"
                )
            )  # type: ignore
        else:
            return DebugVariableValue(
                __root__=_DebugVariableValue.BinaryTreeNodeValue(
                    **value.dict(exclude_unset=True), type="binaryTreeNodeValue"
                )
            )  # type: ignore

    def singly_linked_list_node_value(self, value: SinglyLinkedListNodeAndListValue) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(
                root=_DebugVariableValue.SinglyLinkedListNodeValue(
                    **value.dict(exclude_unset=True), type="singlyLinkedListNodeValue"
                )
            )  # type: ignore
        else:
            return DebugVariableValue(
                __root__=_DebugVariableValue.SinglyLinkedListNodeValue(
                    **value.dict(exclude_unset=True), type="singlyLinkedListNodeValue"
                )
            )  # type: ignore

    def doubly_linked_list_node_value(self, value: DoublyLinkedListNodeAndListValue) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(
                root=_DebugVariableValue.DoublyLinkedListNodeValue(
                    **value.dict(exclude_unset=True), type="doublyLinkedListNodeValue"
                )
            )  # type: ignore
        else:
            return DebugVariableValue(
                __root__=_DebugVariableValue.DoublyLinkedListNodeValue(
                    **value.dict(exclude_unset=True), type="doublyLinkedListNodeValue"
                )
            )  # type: ignore

    def undefined_value(self) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.UndefinedValue(type="undefinedValue"))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.UndefinedValue(type="undefinedValue"))  # type: ignore

    def null_value(self) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(root=_DebugVariableValue.NullValue(type="nullValue"))  # type: ignore
        else:
            return DebugVariableValue(__root__=_DebugVariableValue.NullValue(type="nullValue"))  # type: ignore

    def generic_value(self, value: resources_commons_types_generic_value_GenericValue) -> DebugVariableValue:
        if IS_PYDANTIC_V2:
            return DebugVariableValue(
                root=_DebugVariableValue.GenericValue(**value.dict(exclude_unset=True), type="genericValue")
            )  # type: ignore
        else:
            return DebugVariableValue(
                __root__=_DebugVariableValue.GenericValue(**value.dict(exclude_unset=True), type="genericValue")
            )  # type: ignore


class DebugVariableValue(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _DebugVariableValue.IntegerValue,
                _DebugVariableValue.BooleanValue,
                _DebugVariableValue.DoubleValue,
                _DebugVariableValue.StringValue,
                _DebugVariableValue.CharValue,
                _DebugVariableValue.MapValue,
                _DebugVariableValue.ListValue,
                _DebugVariableValue.BinaryTreeNodeValue,
                _DebugVariableValue.SinglyLinkedListNodeValue,
                _DebugVariableValue.DoublyLinkedListNodeValue,
                _DebugVariableValue.UndefinedValue,
                _DebugVariableValue.NullValue,
                _DebugVariableValue.GenericValue,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _DebugVariableValue.IntegerValue,
            _DebugVariableValue.BooleanValue,
            _DebugVariableValue.DoubleValue,
            _DebugVariableValue.StringValue,
            _DebugVariableValue.CharValue,
            _DebugVariableValue.MapValue,
            _DebugVariableValue.ListValue,
            _DebugVariableValue.BinaryTreeNodeValue,
            _DebugVariableValue.SinglyLinkedListNodeValue,
            _DebugVariableValue.DoublyLinkedListNodeValue,
            _DebugVariableValue.UndefinedValue,
            _DebugVariableValue.NullValue,
            _DebugVariableValue.GenericValue,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _DebugVariableValue.IntegerValue,
                _DebugVariableValue.BooleanValue,
                _DebugVariableValue.DoubleValue,
                _DebugVariableValue.StringValue,
                _DebugVariableValue.CharValue,
                _DebugVariableValue.MapValue,
                _DebugVariableValue.ListValue,
                _DebugVariableValue.BinaryTreeNodeValue,
                _DebugVariableValue.SinglyLinkedListNodeValue,
                _DebugVariableValue.DoublyLinkedListNodeValue,
                _DebugVariableValue.UndefinedValue,
                _DebugVariableValue.NullValue,
                _DebugVariableValue.GenericValue,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _DebugVariableValue.IntegerValue,
            _DebugVariableValue.BooleanValue,
            _DebugVariableValue.DoubleValue,
            _DebugVariableValue.StringValue,
            _DebugVariableValue.CharValue,
            _DebugVariableValue.MapValue,
            _DebugVariableValue.ListValue,
            _DebugVariableValue.BinaryTreeNodeValue,
            _DebugVariableValue.SinglyLinkedListNodeValue,
            _DebugVariableValue.DoublyLinkedListNodeValue,
            _DebugVariableValue.UndefinedValue,
            _DebugVariableValue.NullValue,
            _DebugVariableValue.GenericValue,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        integer_value: typing.Callable[[int], T_Result],
        boolean_value: typing.Callable[[bool], T_Result],
        double_value: typing.Callable[[float], T_Result],
        string_value: typing.Callable[[str], T_Result],
        char_value: typing.Callable[[str], T_Result],
        map_value: typing.Callable[["DebugMapValue"], T_Result],
        list_value: typing.Callable[[typing.List["DebugVariableValue"]], T_Result],
        binary_tree_node_value: typing.Callable[[BinaryTreeNodeAndTreeValue], T_Result],
        singly_linked_list_node_value: typing.Callable[[SinglyLinkedListNodeAndListValue], T_Result],
        doubly_linked_list_node_value: typing.Callable[[DoublyLinkedListNodeAndListValue], T_Result],
        undefined_value: typing.Callable[[], T_Result],
        null_value: typing.Callable[[], T_Result],
        generic_value: typing.Callable[[resources_commons_types_generic_value_GenericValue], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "integerValue":
            return integer_value(unioned_value.value)
        if unioned_value.type == "booleanValue":
            return boolean_value(unioned_value.value)
        if unioned_value.type == "doubleValue":
            return double_value(unioned_value.value)
        if unioned_value.type == "stringValue":
            return string_value(unioned_value.value)
        if unioned_value.type == "charValue":
            return char_value(unioned_value.value)
        if unioned_value.type == "mapValue":
            return map_value(DebugMapValue(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "listValue":
            return list_value(unioned_value.value)
        if unioned_value.type == "binaryTreeNodeValue":
            return binary_tree_node_value(
                BinaryTreeNodeAndTreeValue(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "singlyLinkedListNodeValue":
            return singly_linked_list_node_value(
                SinglyLinkedListNodeAndListValue(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "doublyLinkedListNodeValue":
            return doubly_linked_list_node_value(
                DoublyLinkedListNodeAndListValue(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "undefinedValue":
            return undefined_value()
        if unioned_value.type == "nullValue":
            return null_value()
        if unioned_value.type == "genericValue":
            return generic_value(
                resources_commons_types_generic_value_GenericValue(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )


from .debug_map_value import DebugMapValue  # noqa: E402, F401
from .debug_key_value_pairs import DebugKeyValuePairs  # noqa: E402, F401


class _DebugVariableValue:
    class IntegerValue(UniversalBaseModel):
        type: typing.Literal["integerValue"] = "integerValue"
        value: int

    class BooleanValue(UniversalBaseModel):
        type: typing.Literal["booleanValue"] = "booleanValue"
        value: bool

    class DoubleValue(UniversalBaseModel):
        type: typing.Literal["doubleValue"] = "doubleValue"
        value: float

    class StringValue(UniversalBaseModel):
        type: typing.Literal["stringValue"] = "stringValue"
        value: str

    class CharValue(UniversalBaseModel):
        type: typing.Literal["charValue"] = "charValue"
        value: str

    class MapValue(DebugMapValue):
        type: typing.Literal["mapValue"] = "mapValue"

    class ListValue(UniversalBaseModel):
        type: typing.Literal["listValue"] = "listValue"
        value: typing.List[DebugVariableValue]

    class BinaryTreeNodeValue(BinaryTreeNodeAndTreeValue):
        type: typing.Literal["binaryTreeNodeValue"] = "binaryTreeNodeValue"

    class SinglyLinkedListNodeValue(SinglyLinkedListNodeAndListValue):
        type: typing.Literal["singlyLinkedListNodeValue"] = "singlyLinkedListNodeValue"

    class DoublyLinkedListNodeValue(DoublyLinkedListNodeAndListValue):
        type: typing.Literal["doublyLinkedListNodeValue"] = "doublyLinkedListNodeValue"

    class UndefinedValue(UniversalBaseModel):
        type: typing.Literal["undefinedValue"] = "undefinedValue"

    class NullValue(UniversalBaseModel):
        type: typing.Literal["nullValue"] = "nullValue"

    class GenericValue(resources_commons_types_generic_value_GenericValue):
        type: typing.Literal["genericValue"] = "genericValue"


update_forward_refs(_DebugVariableValue.MapValue)
update_forward_refs(_DebugVariableValue.ListValue)
update_forward_refs(DebugVariableValue)
