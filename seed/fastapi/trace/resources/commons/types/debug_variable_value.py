# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .binary_tree_node_and_tree_value import BinaryTreeNodeAndTreeValue
from .doubly_linked_list_node_and_list_value import DoublyLinkedListNodeAndListValue
from .generic_value import GenericValue as resources_commons_types_generic_value_GenericValue
from .singly_linked_list_node_and_list_value import SinglyLinkedListNodeAndListValue

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def integer_value(self, value: int) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.IntegerValue(type="integerValue", value=value))

    def boolean_value(self, value: bool) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.BooleanValue(type="booleanValue", value=value))

    def double_value(self, value: float) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.DoubleValue(type="doubleValue", value=value))

    def string_value(self, value: str) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.StringValue(type="stringValue", value=value))

    def char_value(self, value: str) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.CharValue(type="charValue", value=value))

    def map_value(self, value: DebugMapValue) -> DebugVariableValue:
        return DebugVariableValue(
            __root__=_DebugVariableValue.MapValue(**value.dict(exclude_unset=True), type="mapValue")
        )

    def list_value(self, value: typing.List[DebugVariableValue]) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.ListValue(type="listValue", value=value))

    def binary_tree_node_value(self, value: BinaryTreeNodeAndTreeValue) -> DebugVariableValue:
        return DebugVariableValue(
            __root__=_DebugVariableValue.BinaryTreeNodeValue(
                **value.dict(exclude_unset=True), type="binaryTreeNodeValue"
            )
        )

    def singly_linked_list_node_value(self, value: SinglyLinkedListNodeAndListValue) -> DebugVariableValue:
        return DebugVariableValue(
            __root__=_DebugVariableValue.SinglyLinkedListNodeValue(
                **value.dict(exclude_unset=True), type="singlyLinkedListNodeValue"
            )
        )

    def doubly_linked_list_node_value(self, value: DoublyLinkedListNodeAndListValue) -> DebugVariableValue:
        return DebugVariableValue(
            __root__=_DebugVariableValue.DoublyLinkedListNodeValue(
                **value.dict(exclude_unset=True), type="doublyLinkedListNodeValue"
            )
        )

    def undefined_value(self) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.UndefinedValue(type="undefinedValue"))

    def null_value(self) -> DebugVariableValue:
        return DebugVariableValue(__root__=_DebugVariableValue.NullValue(type="nullValue"))

    def generic_value(self, value: resources_commons_types_generic_value_GenericValue) -> DebugVariableValue:
        return DebugVariableValue(
            __root__=_DebugVariableValue.GenericValue(**value.dict(exclude_unset=True), type="genericValue")
        )


class DebugVariableValue(pydantic.BaseModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    def get_as_union(
        self,
    ) -> typing.Union[
        _DebugVariableValue.IntegerValue,
        _DebugVariableValue.BooleanValue,
        _DebugVariableValue.DoubleValue,
        _DebugVariableValue.StringValue,
        _DebugVariableValue.CharValue,
        _DebugVariableValue.MapValue,
        _DebugVariableValue.ListValue,
        _DebugVariableValue.BinaryTreeNodeValue,
        _DebugVariableValue.SinglyLinkedListNodeValue,
        _DebugVariableValue.DoublyLinkedListNodeValue,
        _DebugVariableValue.UndefinedValue,
        _DebugVariableValue.NullValue,
        _DebugVariableValue.GenericValue,
    ]:
        return self.__root__

    def visit(
        self,
        integer_value: typing.Callable[[int], T_Result],
        boolean_value: typing.Callable[[bool], T_Result],
        double_value: typing.Callable[[float], T_Result],
        string_value: typing.Callable[[str], T_Result],
        char_value: typing.Callable[[str], T_Result],
        map_value: typing.Callable[[DebugMapValue], T_Result],
        list_value: typing.Callable[[typing.List[DebugVariableValue]], T_Result],
        binary_tree_node_value: typing.Callable[[BinaryTreeNodeAndTreeValue], T_Result],
        singly_linked_list_node_value: typing.Callable[[SinglyLinkedListNodeAndListValue], T_Result],
        doubly_linked_list_node_value: typing.Callable[[DoublyLinkedListNodeAndListValue], T_Result],
        undefined_value: typing.Callable[[], T_Result],
        null_value: typing.Callable[[], T_Result],
        generic_value: typing.Callable[[resources_commons_types_generic_value_GenericValue], T_Result],
    ) -> T_Result:
        if self.__root__.type == "integerValue":
            return integer_value(self.__root__.value)
        if self.__root__.type == "booleanValue":
            return boolean_value(self.__root__.value)
        if self.__root__.type == "doubleValue":
            return double_value(self.__root__.value)
        if self.__root__.type == "stringValue":
            return string_value(self.__root__.value)
        if self.__root__.type == "charValue":
            return char_value(self.__root__.value)
        if self.__root__.type == "mapValue":
            return map_value(DebugMapValue(**self.__root__.dict(exclude_unset=True, exclude={"type"})))
        if self.__root__.type == "listValue":
            return list_value(self.__root__.value)
        if self.__root__.type == "binaryTreeNodeValue":
            return binary_tree_node_value(
                BinaryTreeNodeAndTreeValue(**self.__root__.dict(exclude_unset=True, exclude={"type"}))
            )
        if self.__root__.type == "singlyLinkedListNodeValue":
            return singly_linked_list_node_value(
                SinglyLinkedListNodeAndListValue(**self.__root__.dict(exclude_unset=True, exclude={"type"}))
            )
        if self.__root__.type == "doublyLinkedListNodeValue":
            return doubly_linked_list_node_value(
                DoublyLinkedListNodeAndListValue(**self.__root__.dict(exclude_unset=True, exclude={"type"}))
            )
        if self.__root__.type == "undefinedValue":
            return undefined_value()
        if self.__root__.type == "nullValue":
            return null_value()
        if self.__root__.type == "genericValue":
            return generic_value(
                resources_commons_types_generic_value_GenericValue(
                    **self.__root__.dict(exclude_unset=True, exclude={"type"})
                )
            )

    __root__: typing.Annotated[
        typing.Union[
            _DebugVariableValue.IntegerValue,
            _DebugVariableValue.BooleanValue,
            _DebugVariableValue.DoubleValue,
            _DebugVariableValue.StringValue,
            _DebugVariableValue.CharValue,
            _DebugVariableValue.MapValue,
            _DebugVariableValue.ListValue,
            _DebugVariableValue.BinaryTreeNodeValue,
            _DebugVariableValue.SinglyLinkedListNodeValue,
            _DebugVariableValue.DoublyLinkedListNodeValue,
            _DebugVariableValue.UndefinedValue,
            _DebugVariableValue.NullValue,
            _DebugVariableValue.GenericValue,
        ],
        pydantic.Field(discriminator="type"),
    ]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}


from .debug_key_value_pairs import DebugKeyValuePairs  # noqa: E402
from .debug_map_value import DebugMapValue  # noqa: E402


class _DebugVariableValue:
    class IntegerValue(pydantic.BaseModel):
        type: typing.Literal["integerValue"]
        value: int

    class BooleanValue(pydantic.BaseModel):
        type: typing.Literal["booleanValue"]
        value: bool

    class DoubleValue(pydantic.BaseModel):
        type: typing.Literal["doubleValue"]
        value: float

    class StringValue(pydantic.BaseModel):
        type: typing.Literal["stringValue"]
        value: str

    class CharValue(pydantic.BaseModel):
        type: typing.Literal["charValue"]
        value: str

    class MapValue(DebugMapValue):
        type: typing.Literal["mapValue"]

        class Config:
            allow_population_by_field_name = True

    class ListValue(pydantic.BaseModel):
        type: typing.Literal["listValue"]
        value: typing.List[DebugVariableValue]

    class BinaryTreeNodeValue(BinaryTreeNodeAndTreeValue):
        type: typing.Literal["binaryTreeNodeValue"]

        class Config:
            allow_population_by_field_name = True

    class SinglyLinkedListNodeValue(SinglyLinkedListNodeAndListValue):
        type: typing.Literal["singlyLinkedListNodeValue"]

        class Config:
            allow_population_by_field_name = True

    class DoublyLinkedListNodeValue(DoublyLinkedListNodeAndListValue):
        type: typing.Literal["doublyLinkedListNodeValue"]

        class Config:
            allow_population_by_field_name = True

    class UndefinedValue(pydantic.BaseModel):
        type: typing.Literal["undefinedValue"]

    class NullValue(pydantic.BaseModel):
        type: typing.Literal["nullValue"]

    class GenericValue(resources_commons_types_generic_value_GenericValue):
        type: typing.Literal["genericValue"]

        class Config:
            allow_population_by_field_name = True


_DebugVariableValue.MapValue.update_forward_refs(
    DebugKeyValuePairs=DebugKeyValuePairs, DebugMapValue=DebugMapValue, DebugVariableValue=DebugVariableValue
)
_DebugVariableValue.ListValue.update_forward_refs(
    DebugKeyValuePairs=DebugKeyValuePairs, DebugMapValue=DebugMapValue, DebugVariableValue=DebugVariableValue
)
DebugVariableValue.update_forward_refs()
