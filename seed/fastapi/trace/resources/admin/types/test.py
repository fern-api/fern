# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def and_(self, value: bool) -> Test:
        if IS_PYDANTIC_V2:
            return Test(root=_Test.And(type="and", value=value))  # type: ignore
        else:
            return Test(__root__=_Test.And(type="and", value=value))  # type: ignore

    def or_(self, value: bool) -> Test:
        if IS_PYDANTIC_V2:
            return Test(root=_Test.Or(type="or", value=value))  # type: ignore
        else:
            return Test(__root__=_Test.Or(type="or", value=value))  # type: ignore


class Test(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[typing.Union[_Test.And, _Test.Or], pydantic.Field(discriminator="type")]

        def get_as_union(self) -> typing.Union[_Test.And, _Test.Or]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[typing.Union[_Test.And, _Test.Or], pydantic.Field(discriminator="type")]

        def get_as_union(self) -> typing.Union[_Test.And, _Test.Or]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, and_: typing.Callable[[bool], T_Result], or_: typing.Callable[[bool], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "and":
            return and_(unioned_value.value)
        if unioned_value.type == "or":
            return or_(unioned_value.value)


class _Test:
    class And(UniversalBaseModel):
        type: typing.Literal["and"] = "and"
        value: bool

    class Or(UniversalBaseModel):
        type: typing.Literal["or"] = "or"
        value: bool


update_forward_refs(Test)
