# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def list_(self, value: typing.List[FieldValue]) -> ContainerValue:
        if IS_PYDANTIC_V2:
            return ContainerValue(root=_ContainerValue.List(type="list", value=value))  # type: ignore
        else:
            return ContainerValue(__root__=_ContainerValue.List(type="list", value=value))  # type: ignore

    def optional(self, value: typing.Optional[FieldValue]) -> ContainerValue:
        if IS_PYDANTIC_V2:
            return ContainerValue(root=_ContainerValue.Optional(type="optional", value=value))  # type: ignore
        else:
            return ContainerValue(__root__=_ContainerValue.Optional(type="optional", value=value))  # type: ignore


class ContainerValue(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_ContainerValue.List, _ContainerValue.Optional], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_ContainerValue.List, _ContainerValue.Optional]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_ContainerValue.List, _ContainerValue.Optional], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_ContainerValue.List, _ContainerValue.Optional]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        list_: typing.Callable[[typing.List["FieldValue"]], T_Result],
        optional: typing.Callable[[typing.Optional["FieldValue"]], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "list":
            return list_(unioned_value.value)
        if unioned_value.type == "optional":
            return optional(unioned_value.value)


from .field_value import FieldValue  # noqa: E402, F401, I001


class _ContainerValue:
    class List(UniversalBaseModel):
        type: typing.Literal["list"] = "list"
        value: typing.List[FieldValue]

    class Optional(UniversalBaseModel):
        type: typing.Literal["optional"] = "optional"
        value: typing.Optional[FieldValue] = None


update_forward_refs(_ContainerValue.List)
update_forward_refs(_ContainerValue.Optional)
update_forward_refs(ContainerValue)
