# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .foo import Foo as resources_types_types_foo_Foo

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def foo(self, value: resources_types_types_foo_Foo) -> UnionWithMultipleNoProperties:
        if IS_PYDANTIC_V2:
            return UnionWithMultipleNoProperties(
                root=_UnionWithMultipleNoProperties.Foo(**value.dict(exclude_unset=True), type="foo")
            )  # type: ignore
        else:
            return UnionWithMultipleNoProperties(
                __root__=_UnionWithMultipleNoProperties.Foo(**value.dict(exclude_unset=True), type="foo")
            )  # type: ignore

    def empty_1(self) -> UnionWithMultipleNoProperties:
        if IS_PYDANTIC_V2:
            return UnionWithMultipleNoProperties(root=_UnionWithMultipleNoProperties.Empty1(type="empty1"))  # type: ignore
        else:
            return UnionWithMultipleNoProperties(__root__=_UnionWithMultipleNoProperties.Empty1(type="empty1"))  # type: ignore

    def empty_2(self) -> UnionWithMultipleNoProperties:
        if IS_PYDANTIC_V2:
            return UnionWithMultipleNoProperties(root=_UnionWithMultipleNoProperties.Empty2(type="empty2"))  # type: ignore
        else:
            return UnionWithMultipleNoProperties(__root__=_UnionWithMultipleNoProperties.Empty2(type="empty2"))  # type: ignore


class UnionWithMultipleNoProperties(UniversalRootModel):
    """
    Examples
    --------
    from seed.unions.resources.types import UnionWithMultipleNoProperties_Foo
    UnionWithMultipleNoProperties_Foo(name='example', )
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _UnionWithMultipleNoProperties.Foo,
                _UnionWithMultipleNoProperties.Empty1,
                _UnionWithMultipleNoProperties.Empty2,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UnionWithMultipleNoProperties.Foo,
            _UnionWithMultipleNoProperties.Empty1,
            _UnionWithMultipleNoProperties.Empty2,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _UnionWithMultipleNoProperties.Foo,
                _UnionWithMultipleNoProperties.Empty1,
                _UnionWithMultipleNoProperties.Empty2,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UnionWithMultipleNoProperties.Foo,
            _UnionWithMultipleNoProperties.Empty1,
            _UnionWithMultipleNoProperties.Empty2,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        foo: typing.Callable[[resources_types_types_foo_Foo], T_Result],
        empty_1: typing.Callable[[], T_Result],
        empty_2: typing.Callable[[], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "foo":
            return foo(resources_types_types_foo_Foo(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "empty1":
            return empty_1()
        if unioned_value.type == "empty2":
            return empty_2()


class _UnionWithMultipleNoProperties:
    class Foo(resources_types_types_foo_Foo):
        type: typing.Literal["foo"] = "foo"

    class Empty1(UniversalBaseModel):
        type: typing.Literal["empty1"] = "empty1"

    class Empty2(UniversalBaseModel):
        type: typing.Literal["empty2"] = "empty2"


update_forward_refs(UnionWithMultipleNoProperties)
