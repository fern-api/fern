# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
import typing
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import UniversalRootModel
from ....core.pydantic_utilities import UniversalBaseModel
from ....core.pydantic_utilities import update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def fern(self, value: typing.Literal["fern"]) -> UnionWithLiteral:
        if IS_PYDANTIC_V2:
            return UnionWithLiteral(root=_UnionWithLiteral.Fern(type="fern", value=value))  # type: ignore
        else:
            return UnionWithLiteral(__root__=_UnionWithLiteral.Fern(type="fern", value=value))  # type: ignore


class UnionWithLiteral(UniversalRootModel):
    """
    Examples
    --------
    from seed.unions.resources.types import UnionWithLiteral_Fern
    UnionWithLiteral_Fern()
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_UnionWithLiteral.Fern]

        def get_as_union(self) -> typing.Union[_UnionWithLiteral.Fern]:
            return self.root
    else:
        __root__: typing.Union[_UnionWithLiteral.Fern]

        def get_as_union(self) -> typing.Union[_UnionWithLiteral.Fern]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, fern: typing.Callable[[typing.Literal["fern"]], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "fern":
            return fern(unioned_value.value)


class _UnionWithLiteral:
    class Fern(UniversalBaseModel):
        type: typing.Literal["fern"] = "fern"
        value: typing.Literal["fern"]


update_forward_refs(UnionWithLiteral)
