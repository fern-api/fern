# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
import typing
import datetime as dt
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from ....core.pydantic_utilities import UniversalRootModel
import typing_extensions
import pydantic
from ....core.pydantic_utilities import UniversalBaseModel
from ....core.pydantic_utilities import update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def date(self, value: typing.Optional[dt.date]) -> UnionWithOptionalTime:
        if IS_PYDANTIC_V2:
            return UnionWithOptionalTime(
                root=_UnionWithOptionalTime.Date(type="date", value=value)
            )  # type: ignore
        else:
            return UnionWithOptionalTime(
                __root__=_UnionWithOptionalTime.Date(type="date", value=value)
            )  # type: ignore

    def datetime(self, value: typing.Optional[dt.datetime]) -> UnionWithOptionalTime:
        if IS_PYDANTIC_V2:
            return UnionWithOptionalTime(
                root=_UnionWithOptionalTime.Datetime(type="datetime", value=value)
            )  # type: ignore
        else:
            return UnionWithOptionalTime(
                __root__=_UnionWithOptionalTime.Datetime(type="datetime", value=value)
            )  # type: ignore


class UnionWithOptionalTime(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_UnionWithOptionalTime.Date, _UnionWithOptionalTime.Datetime],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_UnionWithOptionalTime.Date, _UnionWithOptionalTime.Datetime]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_UnionWithOptionalTime.Date, _UnionWithOptionalTime.Datetime],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_UnionWithOptionalTime.Date, _UnionWithOptionalTime.Datetime]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        date: typing.Callable[[typing.Optional[dt.date]], T_Result],
        datetime: typing.Callable[[typing.Optional[dt.datetime]], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "date":
            return date(unioned_value.value)
        if unioned_value.type == "datetime":
            return datetime(unioned_value.value)


class _UnionWithOptionalTime:
    class Date(UniversalBaseModel):
        type: typing.Literal["date"] = "date"
        value: typing.Optional[dt.date] = None

    class Datetime(UniversalBaseModel):
        type: typing.Literal["datetime"] = "datetime"
        value: typing.Optional[dt.datetime] = None


update_forward_refs(UnionWithOptionalTime)
