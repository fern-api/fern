# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .normal_sweet import NormalSweet as resources_bigunion_types_normal_sweet_NormalSweet
from ....core.pydantic_utilities import IS_PYDANTIC_V2
from .thankful_factor import ThankfulFactor as resources_bigunion_types_thankful_factor_ThankfulFactor
from .jumbo_end import JumboEnd as resources_bigunion_types_jumbo_end_JumboEnd
from .hasty_pain import HastyPain as resources_bigunion_types_hasty_pain_HastyPain
from .misty_snow import MistySnow as resources_bigunion_types_misty_snow_MistySnow
from .distinct_failure import DistinctFailure as resources_bigunion_types_distinct_failure_DistinctFailure
from .practical_principle import PracticalPrinciple as resources_bigunion_types_practical_principle_PracticalPrinciple
from .limping_step import LimpingStep as resources_bigunion_types_limping_step_LimpingStep
from .vibrant_excitement import VibrantExcitement as resources_bigunion_types_vibrant_excitement_VibrantExcitement
from .active_diamond import ActiveDiamond as resources_bigunion_types_active_diamond_ActiveDiamond
from .popular_limit import PopularLimit as resources_bigunion_types_popular_limit_PopularLimit
from .false_mirror import FalseMirror as resources_bigunion_types_false_mirror_FalseMirror
from .primary_block import PrimaryBlock as resources_bigunion_types_primary_block_PrimaryBlock
from .rotating_ratio import RotatingRatio as resources_bigunion_types_rotating_ratio_RotatingRatio
from .colorful_cover import ColorfulCover as resources_bigunion_types_colorful_cover_ColorfulCover
from .disloyal_value import DisloyalValue as resources_bigunion_types_disloyal_value_DisloyalValue
from .gruesome_coach import GruesomeCoach as resources_bigunion_types_gruesome_coach_GruesomeCoach
from .total_work import TotalWork as resources_bigunion_types_total_work_TotalWork
from .harmonious_play import HarmoniousPlay as resources_bigunion_types_harmonious_play_HarmoniousPlay
from .unique_stress import UniqueStress as resources_bigunion_types_unique_stress_UniqueStress
from .unwilling_smoke import UnwillingSmoke as resources_bigunion_types_unwilling_smoke_UnwillingSmoke
from .frozen_sleep import FrozenSleep as resources_bigunion_types_frozen_sleep_FrozenSleep
from .diligent_deal import DiligentDeal as resources_bigunion_types_diligent_deal_DiligentDeal
from .attractive_script import AttractiveScript as resources_bigunion_types_attractive_script_AttractiveScript
from .hoarse_mouse import HoarseMouse as resources_bigunion_types_hoarse_mouse_HoarseMouse
from .circular_card import CircularCard as resources_bigunion_types_circular_card_CircularCard
from .potable_bad import PotableBad as resources_bigunion_types_potable_bad_PotableBad
from .triangular_repair import TriangularRepair as resources_bigunion_types_triangular_repair_TriangularRepair
from .gaseous_road import GaseousRoad as resources_bigunion_types_gaseous_road_GaseousRoad
from ....core.pydantic_utilities import UniversalRootModel
import typing
import typing_extensions
import pydantic
from ....core.pydantic_utilities import update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def normal_sweet(self, value: resources_bigunion_types_normal_sweet_NormalSweet) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.NormalSweet(**value.dict(exclude_unset=True), type="normalSweet"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.NormalSweet(**value.dict(exclude_unset=True), type="normalSweet"))  # type: ignore

    def thankful_factor(self, value: resources_bigunion_types_thankful_factor_ThankfulFactor) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.ThankfulFactor(**value.dict(exclude_unset=True), type="thankfulFactor"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.ThankfulFactor(**value.dict(exclude_unset=True), type="thankfulFactor"))  # type: ignore

    def jumbo_end(self, value: resources_bigunion_types_jumbo_end_JumboEnd) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.JumboEnd(**value.dict(exclude_unset=True), type="jumboEnd"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.JumboEnd(**value.dict(exclude_unset=True), type="jumboEnd"))  # type: ignore

    def hasty_pain(self, value: resources_bigunion_types_hasty_pain_HastyPain) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.HastyPain(**value.dict(exclude_unset=True), type="hastyPain"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.HastyPain(**value.dict(exclude_unset=True), type="hastyPain"))  # type: ignore

    def misty_snow(self, value: resources_bigunion_types_misty_snow_MistySnow) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.MistySnow(**value.dict(exclude_unset=True), type="mistySnow"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.MistySnow(**value.dict(exclude_unset=True), type="mistySnow"))  # type: ignore

    def distinct_failure(self, value: resources_bigunion_types_distinct_failure_DistinctFailure) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.DistinctFailure(**value.dict(exclude_unset=True), type="distinctFailure"))  # type: ignore
        else:
            return BigUnion(
                __root__=_BigUnion.DistinctFailure(**value.dict(exclude_unset=True), type="distinctFailure")
            )  # type: ignore

    def practical_principle(self, value: resources_bigunion_types_practical_principle_PracticalPrinciple) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(
                root=_BigUnion.PracticalPrinciple(**value.dict(exclude_unset=True), type="practicalPrinciple")
            )  # type: ignore
        else:
            return BigUnion(
                __root__=_BigUnion.PracticalPrinciple(**value.dict(exclude_unset=True), type="practicalPrinciple")
            )  # type: ignore

    def limping_step(self, value: resources_bigunion_types_limping_step_LimpingStep) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.LimpingStep(**value.dict(exclude_unset=True), type="limpingStep"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.LimpingStep(**value.dict(exclude_unset=True), type="limpingStep"))  # type: ignore

    def vibrant_excitement(self, value: resources_bigunion_types_vibrant_excitement_VibrantExcitement) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(
                root=_BigUnion.VibrantExcitement(**value.dict(exclude_unset=True), type="vibrantExcitement")
            )  # type: ignore
        else:
            return BigUnion(
                __root__=_BigUnion.VibrantExcitement(**value.dict(exclude_unset=True), type="vibrantExcitement")
            )  # type: ignore

    def active_diamond(self, value: resources_bigunion_types_active_diamond_ActiveDiamond) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.ActiveDiamond(**value.dict(exclude_unset=True), type="activeDiamond"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.ActiveDiamond(**value.dict(exclude_unset=True), type="activeDiamond"))  # type: ignore

    def popular_limit(self, value: resources_bigunion_types_popular_limit_PopularLimit) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.PopularLimit(**value.dict(exclude_unset=True), type="popularLimit"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.PopularLimit(**value.dict(exclude_unset=True), type="popularLimit"))  # type: ignore

    def false_mirror(self, value: resources_bigunion_types_false_mirror_FalseMirror) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.FalseMirror(**value.dict(exclude_unset=True), type="falseMirror"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.FalseMirror(**value.dict(exclude_unset=True), type="falseMirror"))  # type: ignore

    def primary_block(self, value: resources_bigunion_types_primary_block_PrimaryBlock) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.PrimaryBlock(**value.dict(exclude_unset=True), type="primaryBlock"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.PrimaryBlock(**value.dict(exclude_unset=True), type="primaryBlock"))  # type: ignore

    def rotating_ratio(self, value: resources_bigunion_types_rotating_ratio_RotatingRatio) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.RotatingRatio(**value.dict(exclude_unset=True), type="rotatingRatio"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.RotatingRatio(**value.dict(exclude_unset=True), type="rotatingRatio"))  # type: ignore

    def colorful_cover(self, value: resources_bigunion_types_colorful_cover_ColorfulCover) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.ColorfulCover(**value.dict(exclude_unset=True), type="colorfulCover"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.ColorfulCover(**value.dict(exclude_unset=True), type="colorfulCover"))  # type: ignore

    def disloyal_value(self, value: resources_bigunion_types_disloyal_value_DisloyalValue) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.DisloyalValue(**value.dict(exclude_unset=True), type="disloyalValue"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.DisloyalValue(**value.dict(exclude_unset=True), type="disloyalValue"))  # type: ignore

    def gruesome_coach(self, value: resources_bigunion_types_gruesome_coach_GruesomeCoach) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.GruesomeCoach(**value.dict(exclude_unset=True), type="gruesomeCoach"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.GruesomeCoach(**value.dict(exclude_unset=True), type="gruesomeCoach"))  # type: ignore

    def total_work(self, value: resources_bigunion_types_total_work_TotalWork) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.TotalWork(**value.dict(exclude_unset=True), type="totalWork"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.TotalWork(**value.dict(exclude_unset=True), type="totalWork"))  # type: ignore

    def harmonious_play(self, value: resources_bigunion_types_harmonious_play_HarmoniousPlay) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.HarmoniousPlay(**value.dict(exclude_unset=True), type="harmoniousPlay"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.HarmoniousPlay(**value.dict(exclude_unset=True), type="harmoniousPlay"))  # type: ignore

    def unique_stress(self, value: resources_bigunion_types_unique_stress_UniqueStress) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.UniqueStress(**value.dict(exclude_unset=True), type="uniqueStress"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.UniqueStress(**value.dict(exclude_unset=True), type="uniqueStress"))  # type: ignore

    def unwilling_smoke(self, value: resources_bigunion_types_unwilling_smoke_UnwillingSmoke) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.UnwillingSmoke(**value.dict(exclude_unset=True), type="unwillingSmoke"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.UnwillingSmoke(**value.dict(exclude_unset=True), type="unwillingSmoke"))  # type: ignore

    def frozen_sleep(self, value: resources_bigunion_types_frozen_sleep_FrozenSleep) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.FrozenSleep(**value.dict(exclude_unset=True), type="frozenSleep"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.FrozenSleep(**value.dict(exclude_unset=True), type="frozenSleep"))  # type: ignore

    def diligent_deal(self, value: resources_bigunion_types_diligent_deal_DiligentDeal) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.DiligentDeal(**value.dict(exclude_unset=True), type="diligentDeal"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.DiligentDeal(**value.dict(exclude_unset=True), type="diligentDeal"))  # type: ignore

    def attractive_script(self, value: resources_bigunion_types_attractive_script_AttractiveScript) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.AttractiveScript(**value.dict(exclude_unset=True), type="attractiveScript"))  # type: ignore
        else:
            return BigUnion(
                __root__=_BigUnion.AttractiveScript(**value.dict(exclude_unset=True), type="attractiveScript")
            )  # type: ignore

    def hoarse_mouse(self, value: resources_bigunion_types_hoarse_mouse_HoarseMouse) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.HoarseMouse(**value.dict(exclude_unset=True), type="hoarseMouse"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.HoarseMouse(**value.dict(exclude_unset=True), type="hoarseMouse"))  # type: ignore

    def circular_card(self, value: resources_bigunion_types_circular_card_CircularCard) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.CircularCard(**value.dict(exclude_unset=True), type="circularCard"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.CircularCard(**value.dict(exclude_unset=True), type="circularCard"))  # type: ignore

    def potable_bad(self, value: resources_bigunion_types_potable_bad_PotableBad) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.PotableBad(**value.dict(exclude_unset=True), type="potableBad"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.PotableBad(**value.dict(exclude_unset=True), type="potableBad"))  # type: ignore

    def triangular_repair(self, value: resources_bigunion_types_triangular_repair_TriangularRepair) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.TriangularRepair(**value.dict(exclude_unset=True), type="triangularRepair"))  # type: ignore
        else:
            return BigUnion(
                __root__=_BigUnion.TriangularRepair(**value.dict(exclude_unset=True), type="triangularRepair")
            )  # type: ignore

    def gaseous_road(self, value: resources_bigunion_types_gaseous_road_GaseousRoad) -> BigUnion:
        if IS_PYDANTIC_V2:
            return BigUnion(root=_BigUnion.GaseousRoad(**value.dict(exclude_unset=True), type="gaseousRoad"))  # type: ignore
        else:
            return BigUnion(__root__=_BigUnion.GaseousRoad(**value.dict(exclude_unset=True), type="gaseousRoad"))  # type: ignore


class BigUnion(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _BigUnion.NormalSweet,
                _BigUnion.ThankfulFactor,
                _BigUnion.JumboEnd,
                _BigUnion.HastyPain,
                _BigUnion.MistySnow,
                _BigUnion.DistinctFailure,
                _BigUnion.PracticalPrinciple,
                _BigUnion.LimpingStep,
                _BigUnion.VibrantExcitement,
                _BigUnion.ActiveDiamond,
                _BigUnion.PopularLimit,
                _BigUnion.FalseMirror,
                _BigUnion.PrimaryBlock,
                _BigUnion.RotatingRatio,
                _BigUnion.ColorfulCover,
                _BigUnion.DisloyalValue,
                _BigUnion.GruesomeCoach,
                _BigUnion.TotalWork,
                _BigUnion.HarmoniousPlay,
                _BigUnion.UniqueStress,
                _BigUnion.UnwillingSmoke,
                _BigUnion.FrozenSleep,
                _BigUnion.DiligentDeal,
                _BigUnion.AttractiveScript,
                _BigUnion.HoarseMouse,
                _BigUnion.CircularCard,
                _BigUnion.PotableBad,
                _BigUnion.TriangularRepair,
                _BigUnion.GaseousRoad,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _BigUnion.NormalSweet,
            _BigUnion.ThankfulFactor,
            _BigUnion.JumboEnd,
            _BigUnion.HastyPain,
            _BigUnion.MistySnow,
            _BigUnion.DistinctFailure,
            _BigUnion.PracticalPrinciple,
            _BigUnion.LimpingStep,
            _BigUnion.VibrantExcitement,
            _BigUnion.ActiveDiamond,
            _BigUnion.PopularLimit,
            _BigUnion.FalseMirror,
            _BigUnion.PrimaryBlock,
            _BigUnion.RotatingRatio,
            _BigUnion.ColorfulCover,
            _BigUnion.DisloyalValue,
            _BigUnion.GruesomeCoach,
            _BigUnion.TotalWork,
            _BigUnion.HarmoniousPlay,
            _BigUnion.UniqueStress,
            _BigUnion.UnwillingSmoke,
            _BigUnion.FrozenSleep,
            _BigUnion.DiligentDeal,
            _BigUnion.AttractiveScript,
            _BigUnion.HoarseMouse,
            _BigUnion.CircularCard,
            _BigUnion.PotableBad,
            _BigUnion.TriangularRepair,
            _BigUnion.GaseousRoad,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _BigUnion.NormalSweet,
                _BigUnion.ThankfulFactor,
                _BigUnion.JumboEnd,
                _BigUnion.HastyPain,
                _BigUnion.MistySnow,
                _BigUnion.DistinctFailure,
                _BigUnion.PracticalPrinciple,
                _BigUnion.LimpingStep,
                _BigUnion.VibrantExcitement,
                _BigUnion.ActiveDiamond,
                _BigUnion.PopularLimit,
                _BigUnion.FalseMirror,
                _BigUnion.PrimaryBlock,
                _BigUnion.RotatingRatio,
                _BigUnion.ColorfulCover,
                _BigUnion.DisloyalValue,
                _BigUnion.GruesomeCoach,
                _BigUnion.TotalWork,
                _BigUnion.HarmoniousPlay,
                _BigUnion.UniqueStress,
                _BigUnion.UnwillingSmoke,
                _BigUnion.FrozenSleep,
                _BigUnion.DiligentDeal,
                _BigUnion.AttractiveScript,
                _BigUnion.HoarseMouse,
                _BigUnion.CircularCard,
                _BigUnion.PotableBad,
                _BigUnion.TriangularRepair,
                _BigUnion.GaseousRoad,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _BigUnion.NormalSweet,
            _BigUnion.ThankfulFactor,
            _BigUnion.JumboEnd,
            _BigUnion.HastyPain,
            _BigUnion.MistySnow,
            _BigUnion.DistinctFailure,
            _BigUnion.PracticalPrinciple,
            _BigUnion.LimpingStep,
            _BigUnion.VibrantExcitement,
            _BigUnion.ActiveDiamond,
            _BigUnion.PopularLimit,
            _BigUnion.FalseMirror,
            _BigUnion.PrimaryBlock,
            _BigUnion.RotatingRatio,
            _BigUnion.ColorfulCover,
            _BigUnion.DisloyalValue,
            _BigUnion.GruesomeCoach,
            _BigUnion.TotalWork,
            _BigUnion.HarmoniousPlay,
            _BigUnion.UniqueStress,
            _BigUnion.UnwillingSmoke,
            _BigUnion.FrozenSleep,
            _BigUnion.DiligentDeal,
            _BigUnion.AttractiveScript,
            _BigUnion.HoarseMouse,
            _BigUnion.CircularCard,
            _BigUnion.PotableBad,
            _BigUnion.TriangularRepair,
            _BigUnion.GaseousRoad,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        normal_sweet: typing.Callable[[resources_bigunion_types_normal_sweet_NormalSweet], T_Result],
        thankful_factor: typing.Callable[[resources_bigunion_types_thankful_factor_ThankfulFactor], T_Result],
        jumbo_end: typing.Callable[[resources_bigunion_types_jumbo_end_JumboEnd], T_Result],
        hasty_pain: typing.Callable[[resources_bigunion_types_hasty_pain_HastyPain], T_Result],
        misty_snow: typing.Callable[[resources_bigunion_types_misty_snow_MistySnow], T_Result],
        distinct_failure: typing.Callable[[resources_bigunion_types_distinct_failure_DistinctFailure], T_Result],
        practical_principle: typing.Callable[
            [resources_bigunion_types_practical_principle_PracticalPrinciple], T_Result
        ],
        limping_step: typing.Callable[[resources_bigunion_types_limping_step_LimpingStep], T_Result],
        vibrant_excitement: typing.Callable[[resources_bigunion_types_vibrant_excitement_VibrantExcitement], T_Result],
        active_diamond: typing.Callable[[resources_bigunion_types_active_diamond_ActiveDiamond], T_Result],
        popular_limit: typing.Callable[[resources_bigunion_types_popular_limit_PopularLimit], T_Result],
        false_mirror: typing.Callable[[resources_bigunion_types_false_mirror_FalseMirror], T_Result],
        primary_block: typing.Callable[[resources_bigunion_types_primary_block_PrimaryBlock], T_Result],
        rotating_ratio: typing.Callable[[resources_bigunion_types_rotating_ratio_RotatingRatio], T_Result],
        colorful_cover: typing.Callable[[resources_bigunion_types_colorful_cover_ColorfulCover], T_Result],
        disloyal_value: typing.Callable[[resources_bigunion_types_disloyal_value_DisloyalValue], T_Result],
        gruesome_coach: typing.Callable[[resources_bigunion_types_gruesome_coach_GruesomeCoach], T_Result],
        total_work: typing.Callable[[resources_bigunion_types_total_work_TotalWork], T_Result],
        harmonious_play: typing.Callable[[resources_bigunion_types_harmonious_play_HarmoniousPlay], T_Result],
        unique_stress: typing.Callable[[resources_bigunion_types_unique_stress_UniqueStress], T_Result],
        unwilling_smoke: typing.Callable[[resources_bigunion_types_unwilling_smoke_UnwillingSmoke], T_Result],
        frozen_sleep: typing.Callable[[resources_bigunion_types_frozen_sleep_FrozenSleep], T_Result],
        diligent_deal: typing.Callable[[resources_bigunion_types_diligent_deal_DiligentDeal], T_Result],
        attractive_script: typing.Callable[[resources_bigunion_types_attractive_script_AttractiveScript], T_Result],
        hoarse_mouse: typing.Callable[[resources_bigunion_types_hoarse_mouse_HoarseMouse], T_Result],
        circular_card: typing.Callable[[resources_bigunion_types_circular_card_CircularCard], T_Result],
        potable_bad: typing.Callable[[resources_bigunion_types_potable_bad_PotableBad], T_Result],
        triangular_repair: typing.Callable[[resources_bigunion_types_triangular_repair_TriangularRepair], T_Result],
        gaseous_road: typing.Callable[[resources_bigunion_types_gaseous_road_GaseousRoad], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "normalSweet":
            return normal_sweet(
                resources_bigunion_types_normal_sweet_NormalSweet(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "thankfulFactor":
            return thankful_factor(
                resources_bigunion_types_thankful_factor_ThankfulFactor(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "jumboEnd":
            return jumbo_end(
                resources_bigunion_types_jumbo_end_JumboEnd(**unioned_value.dict(exclude_unset=True, exclude={"type"}))
            )
        if unioned_value.type == "hastyPain":
            return hasty_pain(
                resources_bigunion_types_hasty_pain_HastyPain(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "mistySnow":
            return misty_snow(
                resources_bigunion_types_misty_snow_MistySnow(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "distinctFailure":
            return distinct_failure(
                resources_bigunion_types_distinct_failure_DistinctFailure(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "practicalPrinciple":
            return practical_principle(
                resources_bigunion_types_practical_principle_PracticalPrinciple(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "limpingStep":
            return limping_step(
                resources_bigunion_types_limping_step_LimpingStep(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "vibrantExcitement":
            return vibrant_excitement(
                resources_bigunion_types_vibrant_excitement_VibrantExcitement(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "activeDiamond":
            return active_diamond(
                resources_bigunion_types_active_diamond_ActiveDiamond(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "popularLimit":
            return popular_limit(
                resources_bigunion_types_popular_limit_PopularLimit(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "falseMirror":
            return false_mirror(
                resources_bigunion_types_false_mirror_FalseMirror(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "primaryBlock":
            return primary_block(
                resources_bigunion_types_primary_block_PrimaryBlock(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "rotatingRatio":
            return rotating_ratio(
                resources_bigunion_types_rotating_ratio_RotatingRatio(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "colorfulCover":
            return colorful_cover(
                resources_bigunion_types_colorful_cover_ColorfulCover(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "disloyalValue":
            return disloyal_value(
                resources_bigunion_types_disloyal_value_DisloyalValue(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "gruesomeCoach":
            return gruesome_coach(
                resources_bigunion_types_gruesome_coach_GruesomeCoach(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "totalWork":
            return total_work(
                resources_bigunion_types_total_work_TotalWork(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "harmoniousPlay":
            return harmonious_play(
                resources_bigunion_types_harmonious_play_HarmoniousPlay(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "uniqueStress":
            return unique_stress(
                resources_bigunion_types_unique_stress_UniqueStress(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "unwillingSmoke":
            return unwilling_smoke(
                resources_bigunion_types_unwilling_smoke_UnwillingSmoke(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "frozenSleep":
            return frozen_sleep(
                resources_bigunion_types_frozen_sleep_FrozenSleep(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "diligentDeal":
            return diligent_deal(
                resources_bigunion_types_diligent_deal_DiligentDeal(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "attractiveScript":
            return attractive_script(
                resources_bigunion_types_attractive_script_AttractiveScript(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "hoarseMouse":
            return hoarse_mouse(
                resources_bigunion_types_hoarse_mouse_HoarseMouse(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "circularCard":
            return circular_card(
                resources_bigunion_types_circular_card_CircularCard(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "potableBad":
            return potable_bad(
                resources_bigunion_types_potable_bad_PotableBad(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "triangularRepair":
            return triangular_repair(
                resources_bigunion_types_triangular_repair_TriangularRepair(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "gaseousRoad":
            return gaseous_road(
                resources_bigunion_types_gaseous_road_GaseousRoad(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )


class _BigUnion:
    class NormalSweet(resources_bigunion_types_normal_sweet_NormalSweet):
        type: typing.Literal["normalSweet"] = "normalSweet"

    class ThankfulFactor(resources_bigunion_types_thankful_factor_ThankfulFactor):
        type: typing.Literal["thankfulFactor"] = "thankfulFactor"

    class JumboEnd(resources_bigunion_types_jumbo_end_JumboEnd):
        type: typing.Literal["jumboEnd"] = "jumboEnd"

    class HastyPain(resources_bigunion_types_hasty_pain_HastyPain):
        type: typing.Literal["hastyPain"] = "hastyPain"

    class MistySnow(resources_bigunion_types_misty_snow_MistySnow):
        type: typing.Literal["mistySnow"] = "mistySnow"

    class DistinctFailure(resources_bigunion_types_distinct_failure_DistinctFailure):
        type: typing.Literal["distinctFailure"] = "distinctFailure"

    class PracticalPrinciple(resources_bigunion_types_practical_principle_PracticalPrinciple):
        type: typing.Literal["practicalPrinciple"] = "practicalPrinciple"

    class LimpingStep(resources_bigunion_types_limping_step_LimpingStep):
        type: typing.Literal["limpingStep"] = "limpingStep"

    class VibrantExcitement(resources_bigunion_types_vibrant_excitement_VibrantExcitement):
        type: typing.Literal["vibrantExcitement"] = "vibrantExcitement"

    class ActiveDiamond(resources_bigunion_types_active_diamond_ActiveDiamond):
        type: typing.Literal["activeDiamond"] = "activeDiamond"

    class PopularLimit(resources_bigunion_types_popular_limit_PopularLimit):
        type: typing.Literal["popularLimit"] = "popularLimit"

    class FalseMirror(resources_bigunion_types_false_mirror_FalseMirror):
        type: typing.Literal["falseMirror"] = "falseMirror"

    class PrimaryBlock(resources_bigunion_types_primary_block_PrimaryBlock):
        type: typing.Literal["primaryBlock"] = "primaryBlock"

    class RotatingRatio(resources_bigunion_types_rotating_ratio_RotatingRatio):
        type: typing.Literal["rotatingRatio"] = "rotatingRatio"

    class ColorfulCover(resources_bigunion_types_colorful_cover_ColorfulCover):
        type: typing.Literal["colorfulCover"] = "colorfulCover"

    class DisloyalValue(resources_bigunion_types_disloyal_value_DisloyalValue):
        type: typing.Literal["disloyalValue"] = "disloyalValue"

    class GruesomeCoach(resources_bigunion_types_gruesome_coach_GruesomeCoach):
        type: typing.Literal["gruesomeCoach"] = "gruesomeCoach"

    class TotalWork(resources_bigunion_types_total_work_TotalWork):
        type: typing.Literal["totalWork"] = "totalWork"

    class HarmoniousPlay(resources_bigunion_types_harmonious_play_HarmoniousPlay):
        type: typing.Literal["harmoniousPlay"] = "harmoniousPlay"

    class UniqueStress(resources_bigunion_types_unique_stress_UniqueStress):
        type: typing.Literal["uniqueStress"] = "uniqueStress"

    class UnwillingSmoke(resources_bigunion_types_unwilling_smoke_UnwillingSmoke):
        type: typing.Literal["unwillingSmoke"] = "unwillingSmoke"

    class FrozenSleep(resources_bigunion_types_frozen_sleep_FrozenSleep):
        type: typing.Literal["frozenSleep"] = "frozenSleep"

    class DiligentDeal(resources_bigunion_types_diligent_deal_DiligentDeal):
        type: typing.Literal["diligentDeal"] = "diligentDeal"

    class AttractiveScript(resources_bigunion_types_attractive_script_AttractiveScript):
        type: typing.Literal["attractiveScript"] = "attractiveScript"

    class HoarseMouse(resources_bigunion_types_hoarse_mouse_HoarseMouse):
        type: typing.Literal["hoarseMouse"] = "hoarseMouse"

    class CircularCard(resources_bigunion_types_circular_card_CircularCard):
        type: typing.Literal["circularCard"] = "circularCard"

    class PotableBad(resources_bigunion_types_potable_bad_PotableBad):
        type: typing.Literal["potableBad"] = "potableBad"

    class TriangularRepair(resources_bigunion_types_triangular_repair_TriangularRepair):
        type: typing.Literal["triangularRepair"] = "triangularRepair"

    class GaseousRoad(resources_bigunion_types_gaseous_road_GaseousRoad):
        type: typing.Literal["gaseousRoad"] = "gaseousRoad"


update_forward_refs(BigUnion)
