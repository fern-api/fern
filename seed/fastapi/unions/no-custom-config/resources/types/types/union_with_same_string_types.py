# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def custom_format(self, value: str) -> UnionWithSameStringTypes:
        if IS_PYDANTIC_V2:
            return UnionWithSameStringTypes(
                root=_UnionWithSameStringTypes.CustomFormat(type="customFormat", value=value)
            )  # type: ignore
        else:
            return UnionWithSameStringTypes(
                __root__=_UnionWithSameStringTypes.CustomFormat(type="customFormat", value=value)
            )  # type: ignore

    def regular_string(self, value: str) -> UnionWithSameStringTypes:
        if IS_PYDANTIC_V2:
            return UnionWithSameStringTypes(
                root=_UnionWithSameStringTypes.RegularString(type="regularString", value=value)
            )  # type: ignore
        else:
            return UnionWithSameStringTypes(
                __root__=_UnionWithSameStringTypes.RegularString(type="regularString", value=value)
            )  # type: ignore

    def pattern_string(self, value: str) -> UnionWithSameStringTypes:
        if IS_PYDANTIC_V2:
            return UnionWithSameStringTypes(
                root=_UnionWithSameStringTypes.PatternString(type="patternString", value=value)
            )  # type: ignore
        else:
            return UnionWithSameStringTypes(
                __root__=_UnionWithSameStringTypes.PatternString(type="patternString", value=value)
            )  # type: ignore


class UnionWithSameStringTypes(UniversalRootModel):
    """
    Examples
    --------
    from seed.unions.resources.types import UnionWithSameStringTypes_CustomFormat

    UnionWithSameStringTypes_CustomFormat(value="custom-123")
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _UnionWithSameStringTypes.CustomFormat,
                _UnionWithSameStringTypes.RegularString,
                _UnionWithSameStringTypes.PatternString,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UnionWithSameStringTypes.CustomFormat,
            _UnionWithSameStringTypes.RegularString,
            _UnionWithSameStringTypes.PatternString,
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _UnionWithSameStringTypes.CustomFormat,
                _UnionWithSameStringTypes.RegularString,
                _UnionWithSameStringTypes.PatternString,
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UnionWithSameStringTypes.CustomFormat,
            _UnionWithSameStringTypes.RegularString,
            _UnionWithSameStringTypes.PatternString,
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        custom_format: typing.Callable[[str], T_Result],
        regular_string: typing.Callable[[str], T_Result],
        pattern_string: typing.Callable[[str], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "customFormat":
            return custom_format(unioned_value.value)
        if unioned_value.type == "regularString":
            return regular_string(unioned_value.value)
        if unioned_value.type == "patternString":
            return pattern_string(unioned_value.value)


class _UnionWithSameStringTypes:
    class CustomFormat(UniversalBaseModel):
        type: typing.Literal["customFormat"] = "customFormat"
        value: str

    class RegularString(UniversalBaseModel):
        type: typing.Literal["regularString"] = "regularString"
        value: str

    class PatternString(UniversalBaseModel):
        type: typing.Literal["patternString"] = "patternString"
        value: str


update_forward_refs(UnionWithSameStringTypes)
