# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
from .root_type_1_inline_type_1 import RootType1InlineType1
import typing
from .root_type_1_foo_map_value import RootType1FooMapValue
from .root_type_1_foo_list_item import RootType1FooListItem
from .root_type_1_foo_set_item import RootType1FooSetItem
from .reference_type import ReferenceType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class RootType1(UniversalBaseModel):
    """
    lorem ipsum
    """

    foo: str = pydantic.Field()
    """
    lorem ipsum
    """

    bar: RootType1InlineType1 = pydantic.Field()
    """
    lorem ipsum
    """

    foo_map: typing.Dict[str, RootType1FooMapValue] = pydantic.Field(alias="fooMap")
    """
    lorem ipsum
    """

    foo_list: typing.List[RootType1FooListItem] = pydantic.Field(alias="fooList")
    """
    lorem ipsum
    """

    foo_set: typing.List[RootType1FooSetItem] = pydantic.Field(alias="fooSet")
    """
    lorem ipsum
    """

    ref: ReferenceType = pydantic.Field()
    """
    lorem ipsum
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(
            extra="forbid"
        )  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.forbid
