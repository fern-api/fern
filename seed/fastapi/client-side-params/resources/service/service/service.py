# This file was auto-generated by Fern from our API Definition.

import abc
import functools
import inspect
import logging
import typing

import fastapi
from ....core.abstract_fern_service import AbstractFernService
from ....core.exceptions.fern_http_exception import FernHTTPException
from ....core.route_args import get_route_args
from ...types.types.resource import Resource
from ...types.types.search_response import SearchResponse
from .search_resources_request import SearchResourcesRequest


class AbstractServiceService(AbstractFernService):
    """
    AbstractServiceService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
    ) -> typing.Sequence[Resource]:
        """
        List resources with pagination
        """
        ...

    @abc.abstractmethod
    def get_resource(self, *, resource_id: str, include_metadata: bool, format: str) -> Resource:
        """
        Get a single resource
        """
        ...

    @abc.abstractmethod
    def search_resources(self, *, body: SearchResourcesRequest, limit: int, offset: int) -> SearchResponse:
        """
        Search resources with complex parameters
        """
        ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_list_resources(router=router)
        cls.__init_get_resource(router=router)
        cls.__init_search_resources(router=router)

    @classmethod
    def __init_list_resources(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.list_resources)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "page":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Zero-indexed page number"))
                )
            elif parameter_name == "per_page":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Number of items per page"))
                )
            elif parameter_name == "sort":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=..., description="Sort field")))
            elif parameter_name == "order":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Sort order (asc or desc)"))
                )
            elif parameter_name == "include_totals":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Whether to include total count"))
                )
            elif parameter_name == "fields":
                new_parameters.append(
                    parameter.replace(
                        default=fastapi.Query(default=None, description="Comma-separated list of fields to include")
                    )
                )
            elif parameter_name == "search":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=None, description="Search query"))
                )
            else:
                new_parameters.append(parameter)
        setattr(cls.list_resources, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.list_resources)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Sequence[Resource]:
            try:
                return cls.list_resources(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'list_resources' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.list_resources.__globals__)

        router.get(
            path="/api/resources",
            response_model=typing.Sequence[Resource],
            description=AbstractServiceService.list_resources.__doc__,
            **get_route_args(cls.list_resources, default_tag="service"),
        )(wrapper)

    @classmethod
    def __init_get_resource(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_resource)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "resource_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            elif parameter_name == "include_metadata":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Include metadata in response"))
                )
            elif parameter_name == "format":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Response format"))
                )
            else:
                new_parameters.append(parameter)
        setattr(cls.get_resource, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_resource)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Resource:
            try:
                return cls.get_resource(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_resource' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_resource.__globals__)

        router.get(
            path="/api/resources/{resource_id}",
            response_model=Resource,
            description=AbstractServiceService.get_resource.__doc__,
            **get_route_args(cls.get_resource, default_tag="service"),
        )(wrapper)

    @classmethod
    def __init_search_resources(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.search_resources)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            elif parameter_name == "limit":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Maximum results to return"))
                )
            elif parameter_name == "offset":
                new_parameters.append(
                    parameter.replace(default=fastapi.Query(default=..., description="Offset for pagination"))
                )
            else:
                new_parameters.append(parameter)
        setattr(cls.search_resources, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.search_resources)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> SearchResponse:
            try:
                return cls.search_resources(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'search_resources' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.search_resources.__globals__)

        router.post(
            path="/api/resources/search",
            response_model=SearchResponse,
            description=AbstractServiceService.search_resources.__doc__,
            **get_route_args(cls.search_resources, default_tag="service"),
        )(wrapper)
