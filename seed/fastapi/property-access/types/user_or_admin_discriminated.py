# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs
from .admin import Admin as types_admin_Admin
from .user import User as types_user_User

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def user(self, value: types_user_User) -> UserOrAdminDiscriminated:
        if IS_PYDANTIC_V2:
            return UserOrAdminDiscriminated(
                root=_UserOrAdminDiscriminated.User(**value.dict(exclude_unset=True), type="user")
            )  # type: ignore
        else:
            return UserOrAdminDiscriminated(
                __root__=_UserOrAdminDiscriminated.User(**value.dict(exclude_unset=True), type="user")
            )  # type: ignore

    def admin(self, value: types_admin_Admin) -> UserOrAdminDiscriminated:
        if IS_PYDANTIC_V2:
            return UserOrAdminDiscriminated(root=_UserOrAdminDiscriminated.Admin(type="admin", admin=value))  # type: ignore
        else:
            return UserOrAdminDiscriminated(__root__=_UserOrAdminDiscriminated.Admin(type="admin", admin=value))  # type: ignore

    def empty(self) -> UserOrAdminDiscriminated:
        if IS_PYDANTIC_V2:
            return UserOrAdminDiscriminated(root=_UserOrAdminDiscriminated.Empty(type="empty"))  # type: ignore
        else:
            return UserOrAdminDiscriminated(__root__=_UserOrAdminDiscriminated.Empty(type="empty"))  # type: ignore


class UserOrAdminDiscriminated(UniversalRootModel):
    """
    Example of an discriminated union
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[
                _UserOrAdminDiscriminated.User, _UserOrAdminDiscriminated.Admin, _UserOrAdminDiscriminated.Empty
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UserOrAdminDiscriminated.User, _UserOrAdminDiscriminated.Admin, _UserOrAdminDiscriminated.Empty
        ]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[
                _UserOrAdminDiscriminated.User, _UserOrAdminDiscriminated.Admin, _UserOrAdminDiscriminated.Empty
            ],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[
            _UserOrAdminDiscriminated.User, _UserOrAdminDiscriminated.Admin, _UserOrAdminDiscriminated.Empty
        ]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        user: typing.Callable[[types_user_User], T_Result],
        admin: typing.Callable[[types_admin_Admin], T_Result],
        empty: typing.Callable[[], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "user":
            return user(types_user_User(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "admin":
            return admin(unioned_value.admin)
        if unioned_value.type == "empty":
            return empty()


class _UserOrAdminDiscriminated:
    class User(types_user_User):
        type: typing.Literal["user"] = "user"

    class Admin(UniversalBaseModel):
        type: typing.Literal["admin"] = "admin"
        admin: types_admin_Admin

    class Empty(UniversalBaseModel):
        type: typing.Literal["empty"] = "empty"


update_forward_refs(UserOrAdminDiscriminated)
