# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, UniversalRootModel, update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def active(self) -> Status:
        if IS_PYDANTIC_V2:
            return Status(root=_Status.Active(type="active"))  # type: ignore
        else:
            return Status(__root__=_Status.Active(type="active"))  # type: ignore

    def archived(self, value: typing.Optional[dt.datetime]) -> Status:
        if IS_PYDANTIC_V2:
            return Status(root=_Status.Archived(type="archived", value=value))  # type: ignore
        else:
            return Status(__root__=_Status.Archived(type="archived", value=value))  # type: ignore

    def soft_deleted(self, value: typing.Optional[dt.datetime]) -> Status:
        if IS_PYDANTIC_V2:
            return Status(root=_Status.SoftDeleted(type="soft-deleted", value=value))  # type: ignore
        else:
            return Status(__root__=_Status.SoftDeleted(type="soft-deleted", value=value))  # type: ignore


class Status(UniversalRootModel):
    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Status.Active, _Status.Archived, _Status.SoftDeleted], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Status.Active, _Status.Archived, _Status.SoftDeleted]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Status.Active, _Status.Archived, _Status.SoftDeleted], pydantic.Field(discriminator="type")
        ]

        def get_as_union(self) -> typing.Union[_Status.Active, _Status.Archived, _Status.SoftDeleted]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        active: typing.Callable[[], T_Result],
        archived: typing.Callable[[typing.Optional[dt.datetime]], T_Result],
        soft_deleted: typing.Callable[[typing.Optional[dt.datetime]], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "active":
            return active()
        if unioned_value.type == "archived":
            return archived(unioned_value.value)
        if unioned_value.type == "soft-deleted":
            return soft_deleted(unioned_value.value)


class _Status:
    class Active(UniversalBaseModel):
        type: typing.Literal["active"] = "active"

    class Archived(UniversalBaseModel):
        type: typing.Literal["archived"] = "archived"
        value: typing.Optional[dt.datetime] = None

    class SoftDeleted(UniversalBaseModel):
        type: typing.Literal["soft-deleted"] = "soft-deleted"
        value: typing.Optional[dt.datetime] = None


update_forward_refs(Status)
