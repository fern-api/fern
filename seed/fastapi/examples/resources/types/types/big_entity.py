# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
from .cast_member import CastMember
import pydantic
from .extended_movie import ExtendedMovie
from .entity import Entity
from .metadata import Metadata as resources_types_types_metadata_Metadata
from ...commons.resources.types.types.metadata import (
    Metadata as resources_commons_resources_types_types_metadata_Metadata,
)
from ...commons.resources.types.types.event_info import EventInfo
from ...commons.resources.types.types.data import Data
from .migration import Migration
from .exception import Exception
from .test import Test
from .node import Node
from .directory import Directory
from .moment import Moment
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class BigEntity(UniversalBaseModel):
    cast_member: typing.Optional[CastMember] = pydantic.Field(alias="castMember", default=None)
    extended_movie: typing.Optional[ExtendedMovie] = pydantic.Field(alias="extendedMovie", default=None)
    entity: typing.Optional[Entity] = None
    metadata: typing.Optional[resources_types_types_metadata_Metadata] = None
    common_metadata: typing.Optional[resources_commons_resources_types_types_metadata_Metadata] = pydantic.Field(
        alias="commonMetadata", default=None
    )
    event_info: typing.Optional[EventInfo] = pydantic.Field(alias="eventInfo", default=None)
    data: typing.Optional[Data] = None
    migration: typing.Optional[Migration] = None
    exception: typing.Optional[Exception] = None
    test: typing.Optional[Test] = None
    node: typing.Optional[Node] = None
    directory: typing.Optional[Directory] = None
    moment: typing.Optional[Moment] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="forbid")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.forbid
