# This file was auto-generated by Fern from our API Definition.

import abc
import functools
import inspect
import logging
import typing

import fastapi
from ....core.abstract_fern_service import AbstractFernService
from ....core.exceptions.fern_http_exception import FernHTTPException
from ....core.route_args import get_route_args
from ...types.types.big_entity import BigEntity
from ...types.types.metadata import Metadata
from ...types.types.movie import Movie
from ...types.types.movie_id import MovieId
from ...types.types.response import Response


class AbstractServiceService(AbstractFernService):
    """
    AbstractServiceService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def get_movie(self, *, movie_id: str) -> Movie: ...

    @abc.abstractmethod
    def create_movie(self, *, body: Movie) -> MovieId: ...

    @abc.abstractmethod
    def get_metadata(
        self,
        *,
        shallow: typing.Optional[bool] = None,
        tag: typing.Optional[typing.List[str]] = None,
        x_api_version: str,
    ) -> Metadata: ...

    @abc.abstractmethod
    def create_big_entity(self, *, body: BigEntity) -> Response: ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_get_movie(router=router)
        cls.__init_create_movie(router=router)
        cls.__init_get_metadata(router=router)
        cls.__init_create_big_entity(router=router)

    @classmethod
    def __init_get_movie(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_movie)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "movie_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_movie, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_movie)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Movie:
            try:
                return cls.get_movie(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_movie' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_movie.__globals__)

        router.get(
            path="/movie/{movie_id}",
            response_model=Movie,
            description=AbstractServiceService.get_movie.__doc__,
            **get_route_args(cls.get_movie, default_tag="service"),
        )(wrapper)

    @classmethod
    def __init_create_movie(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.create_movie)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.create_movie, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.create_movie)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> MovieId:
            try:
                return cls.create_movie(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'create_movie' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.create_movie.__globals__)

        router.post(
            path="/movie",
            response_model=MovieId,
            description=AbstractServiceService.create_movie.__doc__,
            **get_route_args(cls.create_movie, default_tag="service"),
        )(wrapper)

    @classmethod
    def __init_get_metadata(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_metadata)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "shallow":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "tag":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "x_api_version":
                new_parameters.append(parameter.replace(default=fastapi.Header(alias="X-API-Version")))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_metadata, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_metadata)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Metadata:
            try:
                return cls.get_metadata(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_metadata' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_metadata.__globals__)

        router.get(
            path="/metadata",
            response_model=Metadata,
            description=AbstractServiceService.get_metadata.__doc__,
            **get_route_args(cls.get_metadata, default_tag="service"),
        )(wrapper)

    @classmethod
    def __init_create_big_entity(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.create_big_entity)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.create_big_entity, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.create_big_entity)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Response:
            try:
                return cls.create_big_entity(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'create_big_entity' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.create_big_entity.__globals__)

        router.post(
            path="/big-entity",
            response_model=Response,
            description=AbstractServiceService.create_big_entity.__doc__,
            **get_route_args(cls.create_big_entity, default_tag="service"),
        )(wrapper)
