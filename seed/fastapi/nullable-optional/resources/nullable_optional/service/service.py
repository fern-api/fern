# This file was auto-generated by Fern from our API Definition.

import abc
import functools
import inspect
import logging
import typing

import fastapi
from ....core.abstract_fern_service import AbstractFernService
from ....core.exceptions.fern_http_exception import FernHTTPException
from ....core.route_args import get_route_args
from ..types.complex_profile import ComplexProfile
from ..types.create_user_request import CreateUserRequest
from ..types.deserialization_test_request import DeserializationTestRequest
from ..types.deserialization_test_response import DeserializationTestResponse
from ..types.notification_method import NotificationMethod
from ..types.search_result import SearchResult
from ..types.update_user_request import UpdateUserRequest
from ..types.user_response import UserResponse
from ..types.user_role import UserRole
from ..types.user_status import UserStatus
from .search_request import SearchRequest
from .update_complex_profile_request import UpdateComplexProfileRequest
from .update_tags_request import UpdateTagsRequest


class AbstractNullableOptionalService(AbstractFernService):
    """
    AbstractNullableOptionalService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def get_user(self, *, user_id: str) -> UserResponse:
        """
        Get a user by ID
        """
        ...

    @abc.abstractmethod
    def create_user(self, *, body: CreateUserRequest) -> UserResponse:
        """
        Create a new user
        """
        ...

    @abc.abstractmethod
    def update_user(self, *, body: UpdateUserRequest, user_id: str) -> UserResponse:
        """
        Update a user (partial update)
        """
        ...

    @abc.abstractmethod
    def list_users(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        include_deleted: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
    ) -> typing.Sequence[UserResponse]:
        """
        List all users
        """
        ...

    @abc.abstractmethod
    def search_users(
        self,
        *,
        query: str,
        department: typing.Optional[str] = None,
        role: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
    ) -> typing.Sequence[UserResponse]:
        """
        Search users
        """
        ...

    @abc.abstractmethod
    def create_complex_profile(self, *, body: ComplexProfile) -> ComplexProfile:
        """
        Create a complex profile to test nullable enums and unions
        """
        ...

    @abc.abstractmethod
    def get_complex_profile(self, *, profile_id: str) -> ComplexProfile:
        """
        Get a complex profile by ID
        """
        ...

    @abc.abstractmethod
    def update_complex_profile(self, *, body: UpdateComplexProfileRequest, profile_id: str) -> ComplexProfile:
        """
        Update complex profile to test nullable field updates
        """
        ...

    @abc.abstractmethod
    def test_deserialization(self, *, body: DeserializationTestRequest) -> DeserializationTestResponse:
        """
        Test endpoint for validating null deserialization
        """
        ...

    @abc.abstractmethod
    def filter_by_role(
        self,
        *,
        role: typing.Optional[UserRole] = None,
        status: typing.Optional[UserStatus] = None,
        secondary_role: typing.Optional[UserRole] = None,
    ) -> typing.Sequence[UserResponse]:
        """
        Filter users by role with nullable enum
        """
        ...

    @abc.abstractmethod
    def get_notification_settings(self, *, user_id: str) -> typing.Optional[NotificationMethod]:
        """
        Get notification settings which may be null
        """
        ...

    @abc.abstractmethod
    def update_tags(self, *, body: UpdateTagsRequest, user_id: str) -> typing.Sequence[str]:
        """
        Update tags to test array handling
        """
        ...

    @abc.abstractmethod
    def get_search_results(self, *, body: SearchRequest) -> typing.Optional[typing.Sequence[SearchResult]]:
        """
        Get search results with nullable unions
        """
        ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_get_user(router=router)
        cls.__init_create_user(router=router)
        cls.__init_update_user(router=router)
        cls.__init_list_users(router=router)
        cls.__init_search_users(router=router)
        cls.__init_create_complex_profile(router=router)
        cls.__init_get_complex_profile(router=router)
        cls.__init_update_complex_profile(router=router)
        cls.__init_test_deserialization(router=router)
        cls.__init_filter_by_role(router=router)
        cls.__init_get_notification_settings(router=router)
        cls.__init_update_tags(router=router)
        cls.__init_get_search_results(router=router)

    @classmethod
    def __init_get_user(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_user)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "user_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_user, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_user)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> UserResponse:
            try:
                return cls.get_user(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_user' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_user.__globals__)

        router.get(
            path="/api/users/{user_id}",
            response_model=UserResponse,
            description=AbstractNullableOptionalService.get_user.__doc__,
            **get_route_args(cls.get_user, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_create_user(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.create_user)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.create_user, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.create_user)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> UserResponse:
            try:
                return cls.create_user(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'create_user' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.create_user.__globals__)

        router.post(
            path="/api/users",
            response_model=UserResponse,
            description=AbstractNullableOptionalService.create_user.__doc__,
            **get_route_args(cls.create_user, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_update_user(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.update_user)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            elif parameter_name == "user_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.update_user, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.update_user)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> UserResponse:
            try:
                return cls.update_user(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'update_user' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.update_user.__globals__)

        router.patch(
            path="/api/users/{user_id}",
            response_model=UserResponse,
            description=AbstractNullableOptionalService.update_user.__doc__,
            **get_route_args(cls.update_user, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_list_users(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.list_users)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "limit":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "offset":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "include_deleted":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None, alias="includeDeleted")))
            elif parameter_name == "sort_by":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None, alias="sortBy")))
            else:
                new_parameters.append(parameter)
        setattr(cls.list_users, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.list_users)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Sequence[UserResponse]:
            try:
                return cls.list_users(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'list_users' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.list_users.__globals__)

        router.get(
            path="/api/users",
            response_model=typing.Sequence[UserResponse],
            description=AbstractNullableOptionalService.list_users.__doc__,
            **get_route_args(cls.list_users, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_search_users(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.search_users)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "query":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=...)))
            elif parameter_name == "department":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "role":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "is_active":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None, alias="isActive")))
            else:
                new_parameters.append(parameter)
        setattr(cls.search_users, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.search_users)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Sequence[UserResponse]:
            try:
                return cls.search_users(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'search_users' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.search_users.__globals__)

        router.get(
            path="/api/users/search",
            response_model=typing.Sequence[UserResponse],
            description=AbstractNullableOptionalService.search_users.__doc__,
            **get_route_args(cls.search_users, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_create_complex_profile(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.create_complex_profile)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.create_complex_profile, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.create_complex_profile)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> ComplexProfile:
            try:
                return cls.create_complex_profile(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'create_complex_profile' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.create_complex_profile.__globals__)

        router.post(
            path="/api/profiles/complex",
            response_model=ComplexProfile,
            description=AbstractNullableOptionalService.create_complex_profile.__doc__,
            **get_route_args(cls.create_complex_profile, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_get_complex_profile(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_complex_profile)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "profile_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_complex_profile, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_complex_profile)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> ComplexProfile:
            try:
                return cls.get_complex_profile(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_complex_profile' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_complex_profile.__globals__)

        router.get(
            path="/api/profiles/complex/{profile_id}",
            response_model=ComplexProfile,
            description=AbstractNullableOptionalService.get_complex_profile.__doc__,
            **get_route_args(cls.get_complex_profile, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_update_complex_profile(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.update_complex_profile)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            elif parameter_name == "profile_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.update_complex_profile, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.update_complex_profile)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> ComplexProfile:
            try:
                return cls.update_complex_profile(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'update_complex_profile' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.update_complex_profile.__globals__)

        router.patch(
            path="/api/profiles/complex/{profile_id}",
            response_model=ComplexProfile,
            description=AbstractNullableOptionalService.update_complex_profile.__doc__,
            **get_route_args(cls.update_complex_profile, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_test_deserialization(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.test_deserialization)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.test_deserialization, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.test_deserialization)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> DeserializationTestResponse:
            try:
                return cls.test_deserialization(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'test_deserialization' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.test_deserialization.__globals__)

        router.post(
            path="/api/test/deserialization",
            response_model=DeserializationTestResponse,
            description=AbstractNullableOptionalService.test_deserialization.__doc__,
            **get_route_args(cls.test_deserialization, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_filter_by_role(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.filter_by_role)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "role":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "status":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None)))
            elif parameter_name == "secondary_role":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=None, alias="secondaryRole")))
            else:
                new_parameters.append(parameter)
        setattr(cls.filter_by_role, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.filter_by_role)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Sequence[UserResponse]:
            try:
                return cls.filter_by_role(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'filter_by_role' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.filter_by_role.__globals__)

        router.get(
            path="/api/users/filter",
            response_model=typing.Sequence[UserResponse],
            description=AbstractNullableOptionalService.filter_by_role.__doc__,
            **get_route_args(cls.filter_by_role, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_get_notification_settings(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_notification_settings)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "user_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_notification_settings, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_notification_settings)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Optional[NotificationMethod]:
            try:
                return cls.get_notification_settings(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_notification_settings' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_notification_settings.__globals__)

        router.get(
            path="/api/users/{user_id}/notifications",
            response_model=typing.Optional[NotificationMethod],
            description=AbstractNullableOptionalService.get_notification_settings.__doc__,
            **get_route_args(cls.get_notification_settings, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_update_tags(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.update_tags)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            elif parameter_name == "user_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.update_tags, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.update_tags)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Sequence[str]:
            try:
                return cls.update_tags(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'update_tags' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.update_tags.__globals__)

        router.put(
            path="/api/users/{user_id}/tags",
            response_model=typing.Sequence[str],
            description=AbstractNullableOptionalService.update_tags.__doc__,
            **get_route_args(cls.update_tags, default_tag="nullable_optional"),
        )(wrapper)

    @classmethod
    def __init_get_search_results(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_search_results)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_search_results, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_search_results)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> typing.Optional[typing.Sequence[SearchResult]]:
            try:
                return cls.get_search_results(*args, **kwargs)
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_search_results' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_search_results.__globals__)

        router.post(
            path="/api/search",
            response_model=typing.Optional[typing.Sequence[SearchResult]],
            description=AbstractNullableOptionalService.get_search_results.__doc__,
            **get_route_args(cls.get_search_results, default_tag="nullable_optional"),
        )(wrapper)
