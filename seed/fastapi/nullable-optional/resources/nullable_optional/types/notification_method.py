# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .email_notification import EmailNotification
from .push_notification import PushNotification
from .sms_notification import SmsNotification

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def email(self, value: EmailNotification) -> NotificationMethod:
        if IS_PYDANTIC_V2:
            return NotificationMethod(root=_NotificationMethod.Email(**value.dict(exclude_unset=True), type="email"))  # type: ignore
        else:
            return NotificationMethod(
                __root__=_NotificationMethod.Email(**value.dict(exclude_unset=True), type="email")
            )  # type: ignore

    def sms(self, value: SmsNotification) -> NotificationMethod:
        if IS_PYDANTIC_V2:
            return NotificationMethod(root=_NotificationMethod.Sms(**value.dict(exclude_unset=True), type="sms"))  # type: ignore
        else:
            return NotificationMethod(__root__=_NotificationMethod.Sms(**value.dict(exclude_unset=True), type="sms"))  # type: ignore

    def push(self, value: PushNotification) -> NotificationMethod:
        if IS_PYDANTIC_V2:
            return NotificationMethod(root=_NotificationMethod.Push(**value.dict(exclude_unset=True), type="push"))  # type: ignore
        else:
            return NotificationMethod(__root__=_NotificationMethod.Push(**value.dict(exclude_unset=True), type="push"))  # type: ignore


class NotificationMethod(UniversalRootModel):
    """
    Discriminated union for testing nullable unions
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_NotificationMethod.Email, _NotificationMethod.Sms, _NotificationMethod.Push],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_NotificationMethod.Email, _NotificationMethod.Sms, _NotificationMethod.Push]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_NotificationMethod.Email, _NotificationMethod.Sms, _NotificationMethod.Push],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(
            self,
        ) -> typing.Union[_NotificationMethod.Email, _NotificationMethod.Sms, _NotificationMethod.Push]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        email: typing.Callable[[EmailNotification], T_Result],
        sms: typing.Callable[[SmsNotification], T_Result],
        push: typing.Callable[[PushNotification], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "email":
            return email(EmailNotification(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "sms":
            return sms(SmsNotification(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "push":
            return push(PushNotification(**unioned_value.dict(exclude_unset=True, exclude={"type"})))


class _NotificationMethod:
    class Email(EmailNotification):
        type: typing.Literal["email"] = "email"

    class Sms(SmsNotification):
        type: typing.Literal["sms"] = "sms"

    class Push(PushNotification):
        type: typing.Literal["push"] = "push"


update_forward_refs(NotificationMethod)
