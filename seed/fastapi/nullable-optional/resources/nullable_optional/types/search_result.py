# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .document import Document as resources_nullable_optional_types_document_Document
from .organization import Organization as resources_nullable_optional_types_organization_Organization
from .user_response import UserResponse

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def user(self, value: UserResponse) -> SearchResult:
        if IS_PYDANTIC_V2:
            return SearchResult(root=_SearchResult.User(**value.dict(exclude_unset=True), type="user"))  # type: ignore
        else:
            return SearchResult(__root__=_SearchResult.User(**value.dict(exclude_unset=True), type="user"))  # type: ignore

    def organization(self, value: resources_nullable_optional_types_organization_Organization) -> SearchResult:
        if IS_PYDANTIC_V2:
            return SearchResult(root=_SearchResult.Organization(**value.dict(exclude_unset=True), type="organization"))  # type: ignore
        else:
            return SearchResult(
                __root__=_SearchResult.Organization(**value.dict(exclude_unset=True), type="organization")
            )  # type: ignore

    def document(self, value: resources_nullable_optional_types_document_Document) -> SearchResult:
        if IS_PYDANTIC_V2:
            return SearchResult(root=_SearchResult.Document(**value.dict(exclude_unset=True), type="document"))  # type: ignore
        else:
            return SearchResult(__root__=_SearchResult.Document(**value.dict(exclude_unset=True), type="document"))  # type: ignore


class SearchResult(UniversalRootModel):
    """
    Undiscriminated union for testing
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_SearchResult.User, _SearchResult.Organization, _SearchResult.Document],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_SearchResult.User, _SearchResult.Organization, _SearchResult.Document]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_SearchResult.User, _SearchResult.Organization, _SearchResult.Document],
            pydantic.Field(discriminator="type"),
        ]

        def get_as_union(self) -> typing.Union[_SearchResult.User, _SearchResult.Organization, _SearchResult.Document]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        user: typing.Callable[[UserResponse], T_Result],
        organization: typing.Callable[[resources_nullable_optional_types_organization_Organization], T_Result],
        document: typing.Callable[[resources_nullable_optional_types_document_Document], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "user":
            return user(UserResponse(**unioned_value.dict(exclude_unset=True, exclude={"type"})))
        if unioned_value.type == "organization":
            return organization(
                resources_nullable_optional_types_organization_Organization(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )
        if unioned_value.type == "document":
            return document(
                resources_nullable_optional_types_document_Document(
                    **unioned_value.dict(exclude_unset=True, exclude={"type"})
                )
            )


class _SearchResult:
    class User(UserResponse):
        type: typing.Literal["user"] = "user"

    class Organization(resources_nullable_optional_types_organization_Organization):
        type: typing.Literal["organization"] = "organization"

    class Document(resources_nullable_optional_types_document_Document):
        type: typing.Literal["document"] = "document"


update_forward_refs(SearchResult)
