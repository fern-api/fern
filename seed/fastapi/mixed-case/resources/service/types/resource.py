# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalRootModel, update_forward_refs
from .organization import Organization as resources_service_types_organization_Organization
from .user import User as resources_service_types_user_User

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def user(self, value: resources_service_types_user_User) -> Resource:
        if IS_PYDANTIC_V2:
            return Resource(root=_Resource.User(**value.dict(exclude_unset=True), resource_type="user"))  # type: ignore
        else:
            return Resource(__root__=_Resource.User(**value.dict(exclude_unset=True), resource_type="user"))  # type: ignore

    def organization(self, value: resources_service_types_organization_Organization) -> Resource:
        if IS_PYDANTIC_V2:
            return Resource(root=_Resource.Organization(**value.dict(exclude_unset=True), resource_type="Organization"))  # type: ignore
        else:
            return Resource(
                __root__=_Resource.Organization(**value.dict(exclude_unset=True), resource_type="Organization")
            )  # type: ignore


class Resource(UniversalRootModel):
    """
    Examples
    --------
    from seed.mixed_case.resources.service import Resource_User
    Resource_User(user_name='username', metadata_tags=['tag1', 'tag2'], extra_properties={'foo': 'bar', 'baz': 'qux'}, )
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing_extensions.Annotated[
            typing.Union[_Resource.User, _Resource.Organization], pydantic.Field(discriminator="resource_type")
        ]

        def get_as_union(self) -> typing.Union[_Resource.User, _Resource.Organization]:
            return self.root
    else:
        __root__: typing_extensions.Annotated[
            typing.Union[_Resource.User, _Resource.Organization], pydantic.Field(discriminator="resource_type")
        ]

        def get_as_union(self) -> typing.Union[_Resource.User, _Resource.Organization]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(
        self,
        user: typing.Callable[[resources_service_types_user_User], T_Result],
        organization: typing.Callable[[resources_service_types_organization_Organization], T_Result],
    ) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.resource_type == "user":
            return user(
                resources_service_types_user_User(**unioned_value.dict(exclude_unset=True, exclude={"resource_type"}))
            )
        if unioned_value.resource_type == "Organization":
            return organization(
                resources_service_types_organization_Organization(
                    **unioned_value.dict(exclude_unset=True, exclude={"resource_type"})
                )
            )


class _Resource:
    class User(resources_service_types_user_User):
        resource_type: typing.Literal["user"] = "user"

    class Organization(resources_service_types_organization_Organization):
        resource_type: typing.Literal["Organization"] = "Organization"


update_forward_refs(Resource)
