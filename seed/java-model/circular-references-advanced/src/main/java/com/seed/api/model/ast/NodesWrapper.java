/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.model.ast;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NodesWrapper.Builder.class)
public final class NodesWrapper {
    private final List<List<Node>> nodes;

    private NodesWrapper(List<List<Node>> nodes) {
        this.nodes = nodes;
    }

    @JsonProperty("nodes")
    public List<List<Node>> getNodes() {
        return nodes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NodesWrapper && equalTo((NodesWrapper) other);
    }

    private boolean equalTo(NodesWrapper other) {
        return nodes.equals(other.nodes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nodes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<List<Node>> nodes = new ArrayList<>();

        private Builder() {}

        public Builder from(NodesWrapper other) {
            nodes(other.getNodes());
            return this;
        }

        @JsonSetter(value = "nodes", nulls = Nulls.SKIP)
        public Builder nodes(List<List<Node>> nodes) {
            this.nodes.clear();
            this.nodes.addAll(nodes);
            return this;
        }

        public Builder addNodes(List<Node> nodes) {
            this.nodes.add(nodes);
            return this;
        }

        public Builder addAllNodes(List<List<Node>> nodes) {
            this.nodes.addAll(nodes);
            return this;
        }

        public NodesWrapper build() {
            return new NodesWrapper(nodes);
        }
    }
}
