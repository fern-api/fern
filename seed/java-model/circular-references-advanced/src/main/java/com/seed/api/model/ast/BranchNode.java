/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.model.ast;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BranchNode.Builder.class)
public final class BranchNode {
    private final List<Node> children;

    private BranchNode(List<Node> children) {
        this.children = children;
    }

    @JsonProperty("children")
    public List<Node> getChildren() {
        return children;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BranchNode && equalTo((BranchNode) other);
    }

    private boolean equalTo(BranchNode other) {
        return children.equals(other.children);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.children);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Node> children = new ArrayList<>();

        private Builder() {}

        public Builder from(BranchNode other) {
            children(other.getChildren());
            return this;
        }

        @JsonSetter(value = "children", nulls = Nulls.SKIP)
        public Builder children(List<Node> children) {
            this.children.clear();
            this.children.addAll(children);
            return this;
        }

        public Builder addChildren(Node children) {
            this.children.add(children);
            return this;
        }

        public Builder addAllChildren(List<Node> children) {
            this.children.addAll(children);
            return this;
        }

        public BranchNode build() {
            return new BranchNode(children);
        }
    }
}
