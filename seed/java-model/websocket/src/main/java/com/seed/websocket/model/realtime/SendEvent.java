/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.websocket.model.realtime;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.websocket.core.ObjectMappers;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SendEvent.Builder.class)
public final class SendEvent {
    private final String sendText;

    private final int sendParam;

    private SendEvent(String sendText, int sendParam) {
        this.sendText = sendText;
        this.sendParam = sendParam;
    }

    @JsonProperty("sendText")
    public String getSendText() {
        return sendText;
    }

    @JsonProperty("sendParam")
    public int getSendParam() {
        return sendParam;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SendEvent && equalTo((SendEvent) other);
    }

    private boolean equalTo(SendEvent other) {
        return sendText.equals(other.sendText) && sendParam == other.sendParam;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sendText, this.sendParam);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SendTextStage builder() {
        return new Builder();
    }

    public interface SendTextStage {
        SendParamStage sendText(String sendText);

        Builder from(SendEvent other);
    }

    public interface SendParamStage {
        _FinalStage sendParam(int sendParam);
    }

    public interface _FinalStage {
        SendEvent build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SendTextStage, SendParamStage, _FinalStage {
        private String sendText;

        private int sendParam;

        private Builder() {}

        @java.lang.Override
        public Builder from(SendEvent other) {
            sendText(other.getSendText());
            sendParam(other.getSendParam());
            return this;
        }

        @java.lang.Override
        @JsonSetter("sendText")
        public SendParamStage sendText(String sendText) {
            this.sendText = Objects.requireNonNull(sendText, "sendText must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("sendParam")
        public _FinalStage sendParam(int sendParam) {
            this.sendParam = sendParam;
            return this;
        }

        @java.lang.Override
        public SendEvent build() {
            return new SendEvent(sendText, sendParam);
        }
    }
}
