/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.deepCursorPath.model.deep.cursor.path;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.deepCursorPath.core.ObjectMappers;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IndirectionRequired.Builder.class)
public final class IndirectionRequired {
    private final Optional<String> startingAfter;

    private final List<String> results;

    private IndirectionRequired(Optional<String> startingAfter, List<String> results) {
        this.startingAfter = startingAfter;
        this.results = results;
    }

    @JsonProperty("starting_after")
    public Optional<String> getStartingAfter() {
        return startingAfter;
    }

    @JsonProperty("results")
    public List<String> getResults() {
        return results;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndirectionRequired && equalTo((IndirectionRequired) other);
    }

    private boolean equalTo(IndirectionRequired other) {
        return startingAfter.equals(other.startingAfter) && results.equals(other.results);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.startingAfter, this.results);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> startingAfter = Optional.empty();

        private List<String> results = new ArrayList<>();

        private Builder() {}

        public Builder from(IndirectionRequired other) {
            startingAfter(other.getStartingAfter());
            results(other.getResults());
            return this;
        }

        @JsonSetter(value = "starting_after", nulls = Nulls.SKIP)
        public Builder startingAfter(Optional<String> startingAfter) {
            this.startingAfter = startingAfter;
            return this;
        }

        public Builder startingAfter(String startingAfter) {
            this.startingAfter = Optional.ofNullable(startingAfter);
            return this;
        }

        @JsonSetter(value = "results", nulls = Nulls.SKIP)
        public Builder results(List<String> results) {
            this.results.clear();
            this.results.addAll(results);
            return this;
        }

        public Builder addResults(String results) {
            this.results.add(results);
            return this;
        }

        public Builder addAllResults(List<String> results) {
            this.results.addAll(results);
            return this;
        }

        public IndirectionRequired build() {
            return new IndirectionRequired(startingAfter, results);
        }
    }
}
