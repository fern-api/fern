/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DocumentMetadata.Builder.class)
public final class DocumentMetadata {
    private final Optional<String> author;

    private final Optional<Integer> id;

    private final Optional<List<Object>> tags;

    private final Optional<String> title;

    private DocumentMetadata(
            Optional<String> author, Optional<Integer> id, Optional<List<Object>> tags, Optional<String> title) {
        this.author = author;
        this.id = id;
        this.tags = tags;
        this.title = title;
    }

    @JsonProperty("author")
    public Optional<String> getAuthor() {
        return author;
    }

    @JsonProperty("id")
    public Optional<Integer> getId() {
        return id;
    }

    @JsonProperty("tags")
    public Optional<List<Object>> getTags() {
        return tags;
    }

    @JsonProperty("title")
    public Optional<String> getTitle() {
        return title;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DocumentMetadata && equalTo((DocumentMetadata) other);
    }

    private boolean equalTo(DocumentMetadata other) {
        return author.equals(other.author)
                && id.equals(other.id)
                && tags.equals(other.tags)
                && title.equals(other.title);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.author, this.id, this.tags, this.title);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> author = Optional.empty();

        private Optional<Integer> id = Optional.empty();

        private Optional<List<Object>> tags = Optional.empty();

        private Optional<String> title = Optional.empty();

        private Builder() {}

        public Builder from(DocumentMetadata other) {
            author(other.getAuthor());
            id(other.getId());
            tags(other.getTags());
            title(other.getTitle());
            return this;
        }

        @JsonSetter(value = "author", nulls = Nulls.SKIP)
        public Builder author(Optional<String> author) {
            this.author = author;
            return this;
        }

        public Builder author(String author) {
            this.author = Optional.ofNullable(author);
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<Object>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<Object> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @JsonSetter(value = "title", nulls = Nulls.SKIP)
        public Builder title(Optional<String> title) {
            this.title = title;
            return this;
        }

        public Builder title(String title) {
            this.title = Optional.ofNullable(title);
            return this;
        }

        public DocumentMetadata build() {
            return new DocumentMetadata(author, id, tags, title);
        }
    }
}
