/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.literal.model.reference;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.literal.core.ObjectMappers;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ContainerObject.Builder.class)
public final class ContainerObject {
    private final List<NestedObjectWithLiterals> nestedObjects;

    private ContainerObject(List<NestedObjectWithLiterals> nestedObjects) {
        this.nestedObjects = nestedObjects;
    }

    @JsonProperty("nestedObjects")
    public List<NestedObjectWithLiterals> getNestedObjects() {
        return nestedObjects;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ContainerObject && equalTo((ContainerObject) other);
    }

    private boolean equalTo(ContainerObject other) {
        return nestedObjects.equals(other.nestedObjects);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.nestedObjects);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<NestedObjectWithLiterals> nestedObjects = new ArrayList<>();

        private Builder() {}

        public Builder from(ContainerObject other) {
            nestedObjects(other.getNestedObjects());
            return this;
        }

        @JsonSetter(value = "nestedObjects", nulls = Nulls.SKIP)
        public Builder nestedObjects(List<NestedObjectWithLiterals> nestedObjects) {
            this.nestedObjects.clear();
            this.nestedObjects.addAll(nestedObjects);
            return this;
        }

        public Builder addNestedObjects(NestedObjectWithLiterals nestedObjects) {
            this.nestedObjects.add(nestedObjects);
            return this;
        }

        public Builder addAllNestedObjects(List<NestedObjectWithLiterals> nestedObjects) {
            this.nestedObjects.addAll(nestedObjects);
            return this;
        }

        public ContainerObject build() {
            return new ContainerObject(nestedObjects);
        }
    }
}
