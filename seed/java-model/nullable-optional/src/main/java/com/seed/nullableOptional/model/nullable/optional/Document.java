/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.model.nullable.optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Document.Builder.class)
public final class Document {
    private final String id;

    private final String title;

    private final String content;

    private final Optional<String> author;

    private final Optional<List<String>> tags;

    private Document(String id, String title, String content, Optional<String> author, Optional<List<String>> tags) {
        this.id = id;
        this.title = title;
        this.content = content;
        this.author = author;
        this.tags = tags;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("title")
    public String getTitle() {
        return title;
    }

    @JsonProperty("content")
    public String getContent() {
        return content;
    }

    @JsonProperty("author")
    public Optional<String> getAuthor() {
        return author;
    }

    @JsonProperty("tags")
    public Optional<List<String>> getTags() {
        return tags;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Document && equalTo((Document) other);
    }

    private boolean equalTo(Document other) {
        return id.equals(other.id)
                && title.equals(other.title)
                && content.equals(other.content)
                && author.equals(other.author)
                && tags.equals(other.tags);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.title, this.content, this.author, this.tags);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        TitleStage id(String id);

        Builder from(Document other);
    }

    public interface TitleStage {
        ContentStage title(String title);
    }

    public interface ContentStage {
        _FinalStage content(String content);
    }

    public interface _FinalStage {
        Document build();

        _FinalStage author(Optional<String> author);

        _FinalStage author(String author);

        _FinalStage tags(Optional<List<String>> tags);

        _FinalStage tags(List<String> tags);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, TitleStage, ContentStage, _FinalStage {
        private String id;

        private String title;

        private String content;

        private Optional<List<String>> tags = Optional.empty();

        private Optional<String> author = Optional.empty();

        private Builder() {}

        @java.lang.Override
        public Builder from(Document other) {
            id(other.getId());
            title(other.getTitle());
            content(other.getContent());
            author(other.getAuthor());
            tags(other.getTags());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public TitleStage id(String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("title")
        public ContentStage title(String title) {
            this.title = Objects.requireNonNull(title, "title must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("content")
        public _FinalStage content(String content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        @java.lang.Override
        public _FinalStage author(String author) {
            this.author = Optional.ofNullable(author);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "author", nulls = Nulls.SKIP)
        public _FinalStage author(Optional<String> author) {
            this.author = author;
            return this;
        }

        @java.lang.Override
        public Document build() {
            return new Document(id, title, content, author, tags);
        }
    }
}
