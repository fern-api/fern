/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.model.nullable.optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SmsNotification.Builder.class)
public final class SmsNotification {
    private final String phoneNumber;

    private final String message;

    private final Optional<String> shortCode;

    private SmsNotification(String phoneNumber, String message, Optional<String> shortCode) {
        this.phoneNumber = phoneNumber;
        this.message = message;
        this.shortCode = shortCode;
    }

    @JsonProperty("phoneNumber")
    public String getPhoneNumber() {
        return phoneNumber;
    }

    @JsonProperty("message")
    public String getMessage() {
        return message;
    }

    @JsonProperty("shortCode")
    public Optional<String> getShortCode() {
        return shortCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SmsNotification && equalTo((SmsNotification) other);
    }

    private boolean equalTo(SmsNotification other) {
        return phoneNumber.equals(other.phoneNumber)
                && message.equals(other.message)
                && shortCode.equals(other.shortCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.phoneNumber, this.message, this.shortCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PhoneNumberStage builder() {
        return new Builder();
    }

    public interface PhoneNumberStage {
        MessageStage phoneNumber(String phoneNumber);

        Builder from(SmsNotification other);
    }

    public interface MessageStage {
        _FinalStage message(String message);
    }

    public interface _FinalStage {
        SmsNotification build();

        _FinalStage shortCode(Optional<String> shortCode);

        _FinalStage shortCode(String shortCode);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PhoneNumberStage, MessageStage, _FinalStage {
        private String phoneNumber;

        private String message;

        private Optional<String> shortCode = Optional.empty();

        private Builder() {}

        @java.lang.Override
        public Builder from(SmsNotification other) {
            phoneNumber(other.getPhoneNumber());
            message(other.getMessage());
            shortCode(other.getShortCode());
            return this;
        }

        @java.lang.Override
        @JsonSetter("phoneNumber")
        public MessageStage phoneNumber(String phoneNumber) {
            this.phoneNumber = Objects.requireNonNull(phoneNumber, "phoneNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("message")
        public _FinalStage message(String message) {
            this.message = Objects.requireNonNull(message, "message must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage shortCode(String shortCode) {
            this.shortCode = Optional.ofNullable(shortCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "shortCode", nulls = Nulls.SKIP)
        public _FinalStage shortCode(Optional<String> shortCode) {
            this.shortCode = shortCode;
            return this;
        }

        @java.lang.Override
        public SmsNotification build() {
            return new SmsNotification(phoneNumber, message, shortCode);
        }
    }
}
