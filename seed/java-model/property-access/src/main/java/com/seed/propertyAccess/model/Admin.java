/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.propertyAccess.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.propertyAccess.core.ObjectMappers;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Admin.Builder.class)
public final class Admin implements IUser {
    private final String id;

    private final String email;

    private final String password;

    private final UserProfile profile;

    private final String adminLevel;

    private Admin(String id, String email, String password, UserProfile profile, String adminLevel) {
        this.id = id;
        this.email = email;
        this.password = password;
        this.profile = profile;
        this.adminLevel = adminLevel;
    }

    /**
     * @return The unique identifier for the user.
     */
    @JsonProperty("id")
    @java.lang.Override
    public String getId() {
        return id;
    }

    /**
     * @return The email address of the user.
     */
    @JsonProperty("email")
    @java.lang.Override
    public String getEmail() {
        return email;
    }

    /**
     * @return The password for the user.
     */
    @JsonProperty("password")
    @java.lang.Override
    public String getPassword() {
        return password;
    }

    /**
     * @return User profile object
     */
    @JsonProperty("profile")
    @java.lang.Override
    public UserProfile getProfile() {
        return profile;
    }

    /**
     * @return The level of admin privileges.
     */
    @JsonProperty("adminLevel")
    public String getAdminLevel() {
        return adminLevel;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Admin && equalTo((Admin) other);
    }

    private boolean equalTo(Admin other) {
        return id.equals(other.id)
                && email.equals(other.email)
                && password.equals(other.password)
                && profile.equals(other.profile)
                && adminLevel.equals(other.adminLevel);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.email, this.password, this.profile, this.adminLevel);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The unique identifier for the user.</p>
         */
        EmailStage id(String id);

        Builder from(Admin other);
    }

    public interface EmailStage {
        /**
         * <p>The email address of the user.</p>
         */
        PasswordStage email(String email);
    }

    public interface PasswordStage {
        /**
         * <p>The password for the user.</p>
         */
        ProfileStage password(String password);
    }

    public interface ProfileStage {
        /**
         * <p>User profile object</p>
         */
        AdminLevelStage profile(UserProfile profile);
    }

    public interface AdminLevelStage {
        /**
         * <p>The level of admin privileges.</p>
         */
        _FinalStage adminLevel(String adminLevel);
    }

    public interface _FinalStage {
        Admin build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, EmailStage, PasswordStage, ProfileStage, AdminLevelStage, _FinalStage {
        private String id;

        private String email;

        private String password;

        private UserProfile profile;

        private String adminLevel;

        private Builder() {}

        @java.lang.Override
        public Builder from(Admin other) {
            id(other.getId());
            email(other.getEmail());
            password(other.getPassword());
            profile(other.getProfile());
            adminLevel(other.getAdminLevel());
            return this;
        }

        /**
         * <p>The unique identifier for the user.</p>
         * <p>The unique identifier for the user.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public EmailStage id(String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The email address of the user.</p>
         * <p>The email address of the user.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("email")
        public PasswordStage email(String email) {
            this.email = Objects.requireNonNull(email, "email must not be null");
            return this;
        }

        /**
         * <p>The password for the user.</p>
         * <p>The password for the user.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("password")
        public ProfileStage password(String password) {
            this.password = Objects.requireNonNull(password, "password must not be null");
            return this;
        }

        /**
         * <p>User profile object</p>
         * <p>User profile object</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("profile")
        public AdminLevelStage profile(UserProfile profile) {
            this.profile = Objects.requireNonNull(profile, "profile must not be null");
            return this;
        }

        /**
         * <p>The level of admin privileges.</p>
         * <p>The level of admin privileges.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("adminLevel")
        public _FinalStage adminLevel(String adminLevel) {
            this.adminLevel = Objects.requireNonNull(adminLevel, "adminLevel must not be null");
            return this;
        }

        @java.lang.Override
        public Admin build() {
            return new Admin(id, email, password, profile, adminLevel);
        }
    }
}
