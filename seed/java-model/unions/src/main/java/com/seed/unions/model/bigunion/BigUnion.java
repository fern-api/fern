/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.unions.model.bigunion;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class BigUnion {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private BigUnion(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static BigUnion normalSweet(NormalSweet value) {
        return new BigUnion(new NormalSweetValue(value));
    }

    public static BigUnion thankfulFactor(ThankfulFactor value) {
        return new BigUnion(new ThankfulFactorValue(value));
    }

    public static BigUnion jumboEnd(JumboEnd value) {
        return new BigUnion(new JumboEndValue(value));
    }

    public static BigUnion hastyPain(HastyPain value) {
        return new BigUnion(new HastyPainValue(value));
    }

    public static BigUnion mistySnow(MistySnow value) {
        return new BigUnion(new MistySnowValue(value));
    }

    public static BigUnion distinctFailure(DistinctFailure value) {
        return new BigUnion(new DistinctFailureValue(value));
    }

    public static BigUnion practicalPrinciple(PracticalPrinciple value) {
        return new BigUnion(new PracticalPrincipleValue(value));
    }

    public static BigUnion limpingStep(LimpingStep value) {
        return new BigUnion(new LimpingStepValue(value));
    }

    public static BigUnion vibrantExcitement(VibrantExcitement value) {
        return new BigUnion(new VibrantExcitementValue(value));
    }

    public static BigUnion activeDiamond(ActiveDiamond value) {
        return new BigUnion(new ActiveDiamondValue(value));
    }

    public static BigUnion popularLimit(PopularLimit value) {
        return new BigUnion(new PopularLimitValue(value));
    }

    public static BigUnion falseMirror(FalseMirror value) {
        return new BigUnion(new FalseMirrorValue(value));
    }

    public static BigUnion primaryBlock(PrimaryBlock value) {
        return new BigUnion(new PrimaryBlockValue(value));
    }

    public static BigUnion rotatingRatio(RotatingRatio value) {
        return new BigUnion(new RotatingRatioValue(value));
    }

    public static BigUnion colorfulCover(ColorfulCover value) {
        return new BigUnion(new ColorfulCoverValue(value));
    }

    public static BigUnion disloyalValue(DisloyalValue value) {
        return new BigUnion(new DisloyalValueValue(value));
    }

    public static BigUnion gruesomeCoach(GruesomeCoach value) {
        return new BigUnion(new GruesomeCoachValue(value));
    }

    public static BigUnion totalWork(TotalWork value) {
        return new BigUnion(new TotalWorkValue(value));
    }

    public static BigUnion harmoniousPlay(HarmoniousPlay value) {
        return new BigUnion(new HarmoniousPlayValue(value));
    }

    public static BigUnion uniqueStress(UniqueStress value) {
        return new BigUnion(new UniqueStressValue(value));
    }

    public static BigUnion unwillingSmoke(UnwillingSmoke value) {
        return new BigUnion(new UnwillingSmokeValue(value));
    }

    public static BigUnion frozenSleep(FrozenSleep value) {
        return new BigUnion(new FrozenSleepValue(value));
    }

    public static BigUnion diligentDeal(DiligentDeal value) {
        return new BigUnion(new DiligentDealValue(value));
    }

    public static BigUnion attractiveScript(AttractiveScript value) {
        return new BigUnion(new AttractiveScriptValue(value));
    }

    public static BigUnion hoarseMouse(HoarseMouse value) {
        return new BigUnion(new HoarseMouseValue(value));
    }

    public static BigUnion circularCard(CircularCard value) {
        return new BigUnion(new CircularCardValue(value));
    }

    public static BigUnion potableBad(PotableBad value) {
        return new BigUnion(new PotableBadValue(value));
    }

    public static BigUnion triangularRepair(TriangularRepair value) {
        return new BigUnion(new TriangularRepairValue(value));
    }

    public static BigUnion gaseousRoad(GaseousRoad value) {
        return new BigUnion(new GaseousRoadValue(value));
    }

    public boolean isNormalSweet() {
        return value instanceof NormalSweetValue;
    }

    public boolean isThankfulFactor() {
        return value instanceof ThankfulFactorValue;
    }

    public boolean isJumboEnd() {
        return value instanceof JumboEndValue;
    }

    public boolean isHastyPain() {
        return value instanceof HastyPainValue;
    }

    public boolean isMistySnow() {
        return value instanceof MistySnowValue;
    }

    public boolean isDistinctFailure() {
        return value instanceof DistinctFailureValue;
    }

    public boolean isPracticalPrinciple() {
        return value instanceof PracticalPrincipleValue;
    }

    public boolean isLimpingStep() {
        return value instanceof LimpingStepValue;
    }

    public boolean isVibrantExcitement() {
        return value instanceof VibrantExcitementValue;
    }

    public boolean isActiveDiamond() {
        return value instanceof ActiveDiamondValue;
    }

    public boolean isPopularLimit() {
        return value instanceof PopularLimitValue;
    }

    public boolean isFalseMirror() {
        return value instanceof FalseMirrorValue;
    }

    public boolean isPrimaryBlock() {
        return value instanceof PrimaryBlockValue;
    }

    public boolean isRotatingRatio() {
        return value instanceof RotatingRatioValue;
    }

    public boolean isColorfulCover() {
        return value instanceof ColorfulCoverValue;
    }

    public boolean isDisloyalValue() {
        return value instanceof DisloyalValueValue;
    }

    public boolean isGruesomeCoach() {
        return value instanceof GruesomeCoachValue;
    }

    public boolean isTotalWork() {
        return value instanceof TotalWorkValue;
    }

    public boolean isHarmoniousPlay() {
        return value instanceof HarmoniousPlayValue;
    }

    public boolean isUniqueStress() {
        return value instanceof UniqueStressValue;
    }

    public boolean isUnwillingSmoke() {
        return value instanceof UnwillingSmokeValue;
    }

    public boolean isFrozenSleep() {
        return value instanceof FrozenSleepValue;
    }

    public boolean isDiligentDeal() {
        return value instanceof DiligentDealValue;
    }

    public boolean isAttractiveScript() {
        return value instanceof AttractiveScriptValue;
    }

    public boolean isHoarseMouse() {
        return value instanceof HoarseMouseValue;
    }

    public boolean isCircularCard() {
        return value instanceof CircularCardValue;
    }

    public boolean isPotableBad() {
        return value instanceof PotableBadValue;
    }

    public boolean isTriangularRepair() {
        return value instanceof TriangularRepairValue;
    }

    public boolean isGaseousRoad() {
        return value instanceof GaseousRoadValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<NormalSweet> getNormalSweet() {
        if (isNormalSweet()) {
            return Optional.of(((NormalSweetValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ThankfulFactor> getThankfulFactor() {
        if (isThankfulFactor()) {
            return Optional.of(((ThankfulFactorValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<JumboEnd> getJumboEnd() {
        if (isJumboEnd()) {
            return Optional.of(((JumboEndValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<HastyPain> getHastyPain() {
        if (isHastyPain()) {
            return Optional.of(((HastyPainValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<MistySnow> getMistySnow() {
        if (isMistySnow()) {
            return Optional.of(((MistySnowValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<DistinctFailure> getDistinctFailure() {
        if (isDistinctFailure()) {
            return Optional.of(((DistinctFailureValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<PracticalPrinciple> getPracticalPrinciple() {
        if (isPracticalPrinciple()) {
            return Optional.of(((PracticalPrincipleValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<LimpingStep> getLimpingStep() {
        if (isLimpingStep()) {
            return Optional.of(((LimpingStepValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<VibrantExcitement> getVibrantExcitement() {
        if (isVibrantExcitement()) {
            return Optional.of(((VibrantExcitementValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ActiveDiamond> getActiveDiamond() {
        if (isActiveDiamond()) {
            return Optional.of(((ActiveDiamondValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<PopularLimit> getPopularLimit() {
        if (isPopularLimit()) {
            return Optional.of(((PopularLimitValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FalseMirror> getFalseMirror() {
        if (isFalseMirror()) {
            return Optional.of(((FalseMirrorValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<PrimaryBlock> getPrimaryBlock() {
        if (isPrimaryBlock()) {
            return Optional.of(((PrimaryBlockValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<RotatingRatio> getRotatingRatio() {
        if (isRotatingRatio()) {
            return Optional.of(((RotatingRatioValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<ColorfulCover> getColorfulCover() {
        if (isColorfulCover()) {
            return Optional.of(((ColorfulCoverValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<DisloyalValue> getDisloyalValue() {
        if (isDisloyalValue()) {
            return Optional.of(((DisloyalValueValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GruesomeCoach> getGruesomeCoach() {
        if (isGruesomeCoach()) {
            return Optional.of(((GruesomeCoachValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TotalWork> getTotalWork() {
        if (isTotalWork()) {
            return Optional.of(((TotalWorkValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<HarmoniousPlay> getHarmoniousPlay() {
        if (isHarmoniousPlay()) {
            return Optional.of(((HarmoniousPlayValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UniqueStress> getUniqueStress() {
        if (isUniqueStress()) {
            return Optional.of(((UniqueStressValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<UnwillingSmoke> getUnwillingSmoke() {
        if (isUnwillingSmoke()) {
            return Optional.of(((UnwillingSmokeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<FrozenSleep> getFrozenSleep() {
        if (isFrozenSleep()) {
            return Optional.of(((FrozenSleepValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<DiligentDeal> getDiligentDeal() {
        if (isDiligentDeal()) {
            return Optional.of(((DiligentDealValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<AttractiveScript> getAttractiveScript() {
        if (isAttractiveScript()) {
            return Optional.of(((AttractiveScriptValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<HoarseMouse> getHoarseMouse() {
        if (isHoarseMouse()) {
            return Optional.of(((HoarseMouseValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CircularCard> getCircularCard() {
        if (isCircularCard()) {
            return Optional.of(((CircularCardValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<PotableBad> getPotableBad() {
        if (isPotableBad()) {
            return Optional.of(((PotableBadValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<TriangularRepair> getTriangularRepair() {
        if (isTriangularRepair()) {
            return Optional.of(((TriangularRepairValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<GaseousRoad> getGaseousRoad() {
        if (isGaseousRoad()) {
            return Optional.of(((GaseousRoadValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitNormalSweet(NormalSweet normalSweet);

        T visitThankfulFactor(ThankfulFactor thankfulFactor);

        T visitJumboEnd(JumboEnd jumboEnd);

        T visitHastyPain(HastyPain hastyPain);

        T visitMistySnow(MistySnow mistySnow);

        T visitDistinctFailure(DistinctFailure distinctFailure);

        T visitPracticalPrinciple(PracticalPrinciple practicalPrinciple);

        T visitLimpingStep(LimpingStep limpingStep);

        T visitVibrantExcitement(VibrantExcitement vibrantExcitement);

        T visitActiveDiamond(ActiveDiamond activeDiamond);

        T visitPopularLimit(PopularLimit popularLimit);

        T visitFalseMirror(FalseMirror falseMirror);

        T visitPrimaryBlock(PrimaryBlock primaryBlock);

        T visitRotatingRatio(RotatingRatio rotatingRatio);

        T visitColorfulCover(ColorfulCover colorfulCover);

        T visitDisloyalValue(DisloyalValue disloyalValue);

        T visitGruesomeCoach(GruesomeCoach gruesomeCoach);

        T visitTotalWork(TotalWork totalWork);

        T visitHarmoniousPlay(HarmoniousPlay harmoniousPlay);

        T visitUniqueStress(UniqueStress uniqueStress);

        T visitUnwillingSmoke(UnwillingSmoke unwillingSmoke);

        T visitFrozenSleep(FrozenSleep frozenSleep);

        T visitDiligentDeal(DiligentDeal diligentDeal);

        T visitAttractiveScript(AttractiveScript attractiveScript);

        T visitHoarseMouse(HoarseMouse hoarseMouse);

        T visitCircularCard(CircularCard circularCard);

        T visitPotableBad(PotableBad potableBad);

        T visitTriangularRepair(TriangularRepair triangularRepair);

        T visitGaseousRoad(GaseousRoad gaseousRoad);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(NormalSweetValue.class),
        @JsonSubTypes.Type(ThankfulFactorValue.class),
        @JsonSubTypes.Type(JumboEndValue.class),
        @JsonSubTypes.Type(HastyPainValue.class),
        @JsonSubTypes.Type(MistySnowValue.class),
        @JsonSubTypes.Type(DistinctFailureValue.class),
        @JsonSubTypes.Type(PracticalPrincipleValue.class),
        @JsonSubTypes.Type(LimpingStepValue.class),
        @JsonSubTypes.Type(VibrantExcitementValue.class),
        @JsonSubTypes.Type(ActiveDiamondValue.class),
        @JsonSubTypes.Type(PopularLimitValue.class),
        @JsonSubTypes.Type(FalseMirrorValue.class),
        @JsonSubTypes.Type(PrimaryBlockValue.class),
        @JsonSubTypes.Type(RotatingRatioValue.class),
        @JsonSubTypes.Type(ColorfulCoverValue.class),
        @JsonSubTypes.Type(DisloyalValueValue.class),
        @JsonSubTypes.Type(GruesomeCoachValue.class),
        @JsonSubTypes.Type(TotalWorkValue.class),
        @JsonSubTypes.Type(HarmoniousPlayValue.class),
        @JsonSubTypes.Type(UniqueStressValue.class),
        @JsonSubTypes.Type(UnwillingSmokeValue.class),
        @JsonSubTypes.Type(FrozenSleepValue.class),
        @JsonSubTypes.Type(DiligentDealValue.class),
        @JsonSubTypes.Type(AttractiveScriptValue.class),
        @JsonSubTypes.Type(HoarseMouseValue.class),
        @JsonSubTypes.Type(CircularCardValue.class),
        @JsonSubTypes.Type(PotableBadValue.class),
        @JsonSubTypes.Type(TriangularRepairValue.class),
        @JsonSubTypes.Type(GaseousRoadValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("normalSweet")
    @JsonIgnoreProperties("type")
    private static final class NormalSweetValue implements Value {
        @JsonUnwrapped
        private NormalSweet value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private NormalSweetValue() {}

        private NormalSweetValue(NormalSweet value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitNormalSweet(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof NormalSweetValue && equalTo((NormalSweetValue) other);
        }

        private boolean equalTo(NormalSweetValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("thankfulFactor")
    @JsonIgnoreProperties("type")
    private static final class ThankfulFactorValue implements Value {
        @JsonUnwrapped
        private ThankfulFactor value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ThankfulFactorValue() {}

        private ThankfulFactorValue(ThankfulFactor value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitThankfulFactor(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ThankfulFactorValue && equalTo((ThankfulFactorValue) other);
        }

        private boolean equalTo(ThankfulFactorValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("jumboEnd")
    @JsonIgnoreProperties("type")
    private static final class JumboEndValue implements Value {
        @JsonUnwrapped
        private JumboEnd value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private JumboEndValue() {}

        private JumboEndValue(JumboEnd value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitJumboEnd(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof JumboEndValue && equalTo((JumboEndValue) other);
        }

        private boolean equalTo(JumboEndValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("hastyPain")
    @JsonIgnoreProperties("type")
    private static final class HastyPainValue implements Value {
        @JsonUnwrapped
        private HastyPain value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HastyPainValue() {}

        private HastyPainValue(HastyPain value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHastyPain(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HastyPainValue && equalTo((HastyPainValue) other);
        }

        private boolean equalTo(HastyPainValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("mistySnow")
    @JsonIgnoreProperties("type")
    private static final class MistySnowValue implements Value {
        @JsonUnwrapped
        private MistySnow value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private MistySnowValue() {}

        private MistySnowValue(MistySnow value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitMistySnow(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof MistySnowValue && equalTo((MistySnowValue) other);
        }

        private boolean equalTo(MistySnowValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("distinctFailure")
    @JsonIgnoreProperties("type")
    private static final class DistinctFailureValue implements Value {
        @JsonUnwrapped
        private DistinctFailure value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DistinctFailureValue() {}

        private DistinctFailureValue(DistinctFailure value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDistinctFailure(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DistinctFailureValue && equalTo((DistinctFailureValue) other);
        }

        private boolean equalTo(DistinctFailureValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("practicalPrinciple")
    @JsonIgnoreProperties("type")
    private static final class PracticalPrincipleValue implements Value {
        @JsonUnwrapped
        private PracticalPrinciple value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PracticalPrincipleValue() {}

        private PracticalPrincipleValue(PracticalPrinciple value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPracticalPrinciple(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PracticalPrincipleValue && equalTo((PracticalPrincipleValue) other);
        }

        private boolean equalTo(PracticalPrincipleValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("limpingStep")
    @JsonIgnoreProperties("type")
    private static final class LimpingStepValue implements Value {
        @JsonUnwrapped
        private LimpingStep value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private LimpingStepValue() {}

        private LimpingStepValue(LimpingStep value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitLimpingStep(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof LimpingStepValue && equalTo((LimpingStepValue) other);
        }

        private boolean equalTo(LimpingStepValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("vibrantExcitement")
    @JsonIgnoreProperties("type")
    private static final class VibrantExcitementValue implements Value {
        @JsonUnwrapped
        private VibrantExcitement value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private VibrantExcitementValue() {}

        private VibrantExcitementValue(VibrantExcitement value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitVibrantExcitement(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof VibrantExcitementValue && equalTo((VibrantExcitementValue) other);
        }

        private boolean equalTo(VibrantExcitementValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("activeDiamond")
    @JsonIgnoreProperties("type")
    private static final class ActiveDiamondValue implements Value {
        @JsonUnwrapped
        private ActiveDiamond value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ActiveDiamondValue() {}

        private ActiveDiamondValue(ActiveDiamond value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitActiveDiamond(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ActiveDiamondValue && equalTo((ActiveDiamondValue) other);
        }

        private boolean equalTo(ActiveDiamondValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("popularLimit")
    @JsonIgnoreProperties("type")
    private static final class PopularLimitValue implements Value {
        @JsonUnwrapped
        private PopularLimit value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PopularLimitValue() {}

        private PopularLimitValue(PopularLimit value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPopularLimit(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PopularLimitValue && equalTo((PopularLimitValue) other);
        }

        private boolean equalTo(PopularLimitValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("falseMirror")
    @JsonIgnoreProperties("type")
    private static final class FalseMirrorValue implements Value {
        @JsonUnwrapped
        private FalseMirror value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FalseMirrorValue() {}

        private FalseMirrorValue(FalseMirror value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFalseMirror(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FalseMirrorValue && equalTo((FalseMirrorValue) other);
        }

        private boolean equalTo(FalseMirrorValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("primaryBlock")
    @JsonIgnoreProperties("type")
    private static final class PrimaryBlockValue implements Value {
        @JsonUnwrapped
        private PrimaryBlock value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PrimaryBlockValue() {}

        private PrimaryBlockValue(PrimaryBlock value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPrimaryBlock(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PrimaryBlockValue && equalTo((PrimaryBlockValue) other);
        }

        private boolean equalTo(PrimaryBlockValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("rotatingRatio")
    @JsonIgnoreProperties("type")
    private static final class RotatingRatioValue implements Value {
        @JsonUnwrapped
        private RotatingRatio value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RotatingRatioValue() {}

        private RotatingRatioValue(RotatingRatio value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRotatingRatio(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RotatingRatioValue && equalTo((RotatingRatioValue) other);
        }

        private boolean equalTo(RotatingRatioValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("colorfulCover")
    @JsonIgnoreProperties("type")
    private static final class ColorfulCoverValue implements Value {
        @JsonUnwrapped
        private ColorfulCover value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ColorfulCoverValue() {}

        private ColorfulCoverValue(ColorfulCover value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitColorfulCover(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ColorfulCoverValue && equalTo((ColorfulCoverValue) other);
        }

        private boolean equalTo(ColorfulCoverValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("disloyalValue")
    @JsonIgnoreProperties("type")
    private static final class DisloyalValueValue implements Value {
        @JsonUnwrapped
        private DisloyalValue value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DisloyalValueValue() {}

        private DisloyalValueValue(DisloyalValue value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDisloyalValue(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DisloyalValueValue && equalTo((DisloyalValueValue) other);
        }

        private boolean equalTo(DisloyalValueValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gruesomeCoach")
    @JsonIgnoreProperties("type")
    private static final class GruesomeCoachValue implements Value {
        @JsonUnwrapped
        private GruesomeCoach value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GruesomeCoachValue() {}

        private GruesomeCoachValue(GruesomeCoach value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGruesomeCoach(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GruesomeCoachValue && equalTo((GruesomeCoachValue) other);
        }

        private boolean equalTo(GruesomeCoachValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("totalWork")
    @JsonIgnoreProperties("type")
    private static final class TotalWorkValue implements Value {
        @JsonUnwrapped
        private TotalWork value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TotalWorkValue() {}

        private TotalWorkValue(TotalWork value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTotalWork(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TotalWorkValue && equalTo((TotalWorkValue) other);
        }

        private boolean equalTo(TotalWorkValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("harmoniousPlay")
    @JsonIgnoreProperties("type")
    private static final class HarmoniousPlayValue implements Value {
        @JsonUnwrapped
        private HarmoniousPlay value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HarmoniousPlayValue() {}

        private HarmoniousPlayValue(HarmoniousPlay value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHarmoniousPlay(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HarmoniousPlayValue && equalTo((HarmoniousPlayValue) other);
        }

        private boolean equalTo(HarmoniousPlayValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("uniqueStress")
    @JsonIgnoreProperties("type")
    private static final class UniqueStressValue implements Value {
        @JsonUnwrapped
        private UniqueStress value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private UniqueStressValue() {}

        private UniqueStressValue(UniqueStress value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitUniqueStress(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof UniqueStressValue && equalTo((UniqueStressValue) other);
        }

        private boolean equalTo(UniqueStressValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("unwillingSmoke")
    @JsonIgnoreProperties("type")
    private static final class UnwillingSmokeValue implements Value {
        @JsonUnwrapped
        private UnwillingSmoke value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private UnwillingSmokeValue() {}

        private UnwillingSmokeValue(UnwillingSmoke value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitUnwillingSmoke(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof UnwillingSmokeValue && equalTo((UnwillingSmokeValue) other);
        }

        private boolean equalTo(UnwillingSmokeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("frozenSleep")
    @JsonIgnoreProperties("type")
    private static final class FrozenSleepValue implements Value {
        @JsonUnwrapped
        private FrozenSleep value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private FrozenSleepValue() {}

        private FrozenSleepValue(FrozenSleep value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitFrozenSleep(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof FrozenSleepValue && equalTo((FrozenSleepValue) other);
        }

        private boolean equalTo(FrozenSleepValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("diligentDeal")
    @JsonIgnoreProperties("type")
    private static final class DiligentDealValue implements Value {
        @JsonUnwrapped
        private DiligentDeal value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DiligentDealValue() {}

        private DiligentDealValue(DiligentDeal value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDiligentDeal(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DiligentDealValue && equalTo((DiligentDealValue) other);
        }

        private boolean equalTo(DiligentDealValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("attractiveScript")
    @JsonIgnoreProperties("type")
    private static final class AttractiveScriptValue implements Value {
        @JsonUnwrapped
        private AttractiveScript value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AttractiveScriptValue() {}

        private AttractiveScriptValue(AttractiveScript value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAttractiveScript(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AttractiveScriptValue && equalTo((AttractiveScriptValue) other);
        }

        private boolean equalTo(AttractiveScriptValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("hoarseMouse")
    @JsonIgnoreProperties("type")
    private static final class HoarseMouseValue implements Value {
        @JsonUnwrapped
        private HoarseMouse value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private HoarseMouseValue() {}

        private HoarseMouseValue(HoarseMouse value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitHoarseMouse(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof HoarseMouseValue && equalTo((HoarseMouseValue) other);
        }

        private boolean equalTo(HoarseMouseValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("circularCard")
    @JsonIgnoreProperties("type")
    private static final class CircularCardValue implements Value {
        @JsonUnwrapped
        private CircularCard value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CircularCardValue() {}

        private CircularCardValue(CircularCard value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCircularCard(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CircularCardValue && equalTo((CircularCardValue) other);
        }

        private boolean equalTo(CircularCardValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("potableBad")
    @JsonIgnoreProperties("type")
    private static final class PotableBadValue implements Value {
        @JsonUnwrapped
        private PotableBad value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PotableBadValue() {}

        private PotableBadValue(PotableBad value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPotableBad(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PotableBadValue && equalTo((PotableBadValue) other);
        }

        private boolean equalTo(PotableBadValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("triangularRepair")
    @JsonIgnoreProperties("type")
    private static final class TriangularRepairValue implements Value {
        @JsonUnwrapped
        private TriangularRepair value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private TriangularRepairValue() {}

        private TriangularRepairValue(TriangularRepair value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitTriangularRepair(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof TriangularRepairValue && equalTo((TriangularRepairValue) other);
        }

        private boolean equalTo(TriangularRepairValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("gaseousRoad")
    @JsonIgnoreProperties("type")
    private static final class GaseousRoadValue implements Value {
        @JsonUnwrapped
        private GaseousRoad value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private GaseousRoadValue() {}

        private GaseousRoadValue(GaseousRoad value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitGaseousRoad(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof GaseousRoadValue && equalTo((GaseousRoadValue) other);
        }

        private boolean equalTo(GaseousRoadValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "BigUnion{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
