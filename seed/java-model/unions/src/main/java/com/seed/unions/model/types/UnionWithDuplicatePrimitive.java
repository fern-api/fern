/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.unions.model.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class UnionWithDuplicatePrimitive {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private UnionWithDuplicatePrimitive(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static UnionWithDuplicatePrimitive integer1(int value) {
        return new UnionWithDuplicatePrimitive(new Integer1Value(value));
    }

    public static UnionWithDuplicatePrimitive integer2(int value) {
        return new UnionWithDuplicatePrimitive(new Integer2Value(value));
    }

    public static UnionWithDuplicatePrimitive string1(String value) {
        return new UnionWithDuplicatePrimitive(new String1Value(value));
    }

    public static UnionWithDuplicatePrimitive string2(String value) {
        return new UnionWithDuplicatePrimitive(new String2Value(value));
    }

    public boolean isInteger1() {
        return value instanceof Integer1Value;
    }

    public boolean isInteger2() {
        return value instanceof Integer2Value;
    }

    public boolean isString1() {
        return value instanceof String1Value;
    }

    public boolean isString2() {
        return value instanceof String2Value;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<Integer> getInteger1() {
        if (isInteger1()) {
            return Optional.of(((Integer1Value) value).value);
        }
        return Optional.empty();
    }

    public Optional<Integer> getInteger2() {
        if (isInteger2()) {
            return Optional.of(((Integer2Value) value).value);
        }
        return Optional.empty();
    }

    public Optional<String> getString1() {
        if (isString1()) {
            return Optional.of(((String1Value) value).value);
        }
        return Optional.empty();
    }

    public Optional<String> getString2() {
        if (isString2()) {
            return Optional.of(((String2Value) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitInteger1(int integer1);

        T visitInteger2(int integer2);

        T visitString1(String string1);

        T visitString2(String string2);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(Integer1Value.class),
        @JsonSubTypes.Type(Integer2Value.class),
        @JsonSubTypes.Type(String1Value.class),
        @JsonSubTypes.Type(String2Value.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("integer1")
    @JsonIgnoreProperties("type")
    private static final class Integer1Value implements Value {
        @JsonProperty("value")
        private int value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private Integer1Value(@JsonProperty("value") int value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitInteger1(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof Integer1Value && equalTo((Integer1Value) other);
        }

        private boolean equalTo(Integer1Value other) {
            return value == other.value;
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithDuplicatePrimitive{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("integer2")
    @JsonIgnoreProperties("type")
    private static final class Integer2Value implements Value {
        @JsonProperty("value")
        private int value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private Integer2Value(@JsonProperty("value") int value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitInteger2(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof Integer2Value && equalTo((Integer2Value) other);
        }

        private boolean equalTo(Integer2Value other) {
            return value == other.value;
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithDuplicatePrimitive{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("string1")
    @JsonIgnoreProperties("type")
    private static final class String1Value implements Value {
        @JsonProperty("value")
        private String value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private String1Value(@JsonProperty("value") String value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitString1(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof String1Value && equalTo((String1Value) other);
        }

        private boolean equalTo(String1Value other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithDuplicatePrimitive{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("string2")
    @JsonIgnoreProperties("type")
    private static final class String2Value implements Value {
        @JsonProperty("value")
        private String value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private String2Value(@JsonProperty("value") String value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitString2(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof String2Value && equalTo((String2Value) other);
        }

        private boolean equalTo(String2Value other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithDuplicatePrimitive{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithDuplicatePrimitive{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
