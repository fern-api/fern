/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.examples.model.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.examples.core.ObjectMappers;
import com.seed.examples.model.Identifier;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Response.Builder.class)
public final class Response {
    private final Object response;

    private final List<Identifier> identifiers;

    private Response(Object response, List<Identifier> identifiers) {
        this.response = response;
        this.identifiers = identifiers;
    }

    @JsonProperty("response")
    public Object getResponse() {
        return response;
    }

    @JsonProperty("identifiers")
    public List<Identifier> getIdentifiers() {
        return identifiers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Response && equalTo((Response) other);
    }

    private boolean equalTo(Response other) {
        return response.equals(other.response) && identifiers.equals(other.identifiers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.response, this.identifiers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ResponseStage builder() {
        return new Builder();
    }

    public interface ResponseStage {
        _FinalStage response(Object response);

        Builder from(Response other);
    }

    public interface _FinalStage {
        Response build();

        _FinalStage identifiers(List<Identifier> identifiers);

        _FinalStage addIdentifiers(Identifier identifiers);

        _FinalStage addAllIdentifiers(List<Identifier> identifiers);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ResponseStage, _FinalStage {
        private Object response;

        private List<Identifier> identifiers = new ArrayList<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Response other) {
            response(other.getResponse());
            identifiers(other.getIdentifiers());
            return this;
        }

        @java.lang.Override
        @JsonSetter("response")
        public _FinalStage response(Object response) {
            this.response = response;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllIdentifiers(List<Identifier> identifiers) {
            if (identifiers != null) {
                this.identifiers.addAll(identifiers);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addIdentifiers(Identifier identifiers) {
            this.identifiers.add(identifiers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "identifiers", nulls = Nulls.SKIP)
        public _FinalStage identifiers(List<Identifier> identifiers) {
            this.identifiers.clear();
            this.identifiers.addAll(identifiers);
            return this;
        }

        @java.lang.Override
        public Response build() {
            return new Response(response, identifiers);
        }
    }
}
