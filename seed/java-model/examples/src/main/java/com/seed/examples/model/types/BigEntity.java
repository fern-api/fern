/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.examples.model.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.examples.core.ObjectMappers;
import com.seed.examples.model.commons.types.Data;
import com.seed.examples.model.commons.types.EventInfo;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BigEntity.Builder.class)
public final class BigEntity {
    private final Optional<CastMember> castMember;

    private final Optional<ExtendedMovie> extendedMovie;

    private final Optional<Entity> entity;

    private final Optional<Metadata> metadata;

    private final Optional<com.seed.examples.model.commons.types.Metadata> commonMetadata;

    private final Optional<EventInfo> eventInfo;

    private final Optional<Data> data;

    private final Optional<Migration> migration;

    private final Optional<Exception> exception;

    private final Optional<Test> test;

    private final Optional<Node> node;

    private final Optional<Directory> directory;

    private final Optional<Moment> moment;

    private BigEntity(
            Optional<CastMember> castMember,
            Optional<ExtendedMovie> extendedMovie,
            Optional<Entity> entity,
            Optional<Metadata> metadata,
            Optional<com.seed.examples.model.commons.types.Metadata> commonMetadata,
            Optional<EventInfo> eventInfo,
            Optional<Data> data,
            Optional<Migration> migration,
            Optional<Exception> exception,
            Optional<Test> test,
            Optional<Node> node,
            Optional<Directory> directory,
            Optional<Moment> moment) {
        this.castMember = castMember;
        this.extendedMovie = extendedMovie;
        this.entity = entity;
        this.metadata = metadata;
        this.commonMetadata = commonMetadata;
        this.eventInfo = eventInfo;
        this.data = data;
        this.migration = migration;
        this.exception = exception;
        this.test = test;
        this.node = node;
        this.directory = directory;
        this.moment = moment;
    }

    @JsonProperty("castMember")
    public Optional<CastMember> getCastMember() {
        return castMember;
    }

    @JsonProperty("extendedMovie")
    public Optional<ExtendedMovie> getExtendedMovie() {
        return extendedMovie;
    }

    @JsonProperty("entity")
    public Optional<Entity> getEntity() {
        return entity;
    }

    @JsonProperty("metadata")
    public Optional<Metadata> getMetadata() {
        return metadata;
    }

    @JsonProperty("commonMetadata")
    public Optional<com.seed.examples.model.commons.types.Metadata> getCommonMetadata() {
        return commonMetadata;
    }

    @JsonProperty("eventInfo")
    public Optional<EventInfo> getEventInfo() {
        return eventInfo;
    }

    @JsonProperty("data")
    public Optional<Data> getData() {
        return data;
    }

    @JsonProperty("migration")
    public Optional<Migration> getMigration() {
        return migration;
    }

    @JsonProperty("exception")
    public Optional<Exception> getException() {
        return exception;
    }

    @JsonProperty("test")
    public Optional<Test> getTest() {
        return test;
    }

    @JsonProperty("node")
    public Optional<Node> getNode() {
        return node;
    }

    @JsonProperty("directory")
    public Optional<Directory> getDirectory() {
        return directory;
    }

    @JsonProperty("moment")
    public Optional<Moment> getMoment() {
        return moment;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BigEntity && equalTo((BigEntity) other);
    }

    private boolean equalTo(BigEntity other) {
        return castMember.equals(other.castMember)
                && extendedMovie.equals(other.extendedMovie)
                && entity.equals(other.entity)
                && metadata.equals(other.metadata)
                && commonMetadata.equals(other.commonMetadata)
                && eventInfo.equals(other.eventInfo)
                && data.equals(other.data)
                && migration.equals(other.migration)
                && exception.equals(other.exception)
                && test.equals(other.test)
                && node.equals(other.node)
                && directory.equals(other.directory)
                && moment.equals(other.moment);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.castMember,
                this.extendedMovie,
                this.entity,
                this.metadata,
                this.commonMetadata,
                this.eventInfo,
                this.data,
                this.migration,
                this.exception,
                this.test,
                this.node,
                this.directory,
                this.moment);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CastMember> castMember = Optional.empty();

        private Optional<ExtendedMovie> extendedMovie = Optional.empty();

        private Optional<Entity> entity = Optional.empty();

        private Optional<Metadata> metadata = Optional.empty();

        private Optional<com.seed.examples.model.commons.types.Metadata> commonMetadata = Optional.empty();

        private Optional<EventInfo> eventInfo = Optional.empty();

        private Optional<Data> data = Optional.empty();

        private Optional<Migration> migration = Optional.empty();

        private Optional<Exception> exception = Optional.empty();

        private Optional<Test> test = Optional.empty();

        private Optional<Node> node = Optional.empty();

        private Optional<Directory> directory = Optional.empty();

        private Optional<Moment> moment = Optional.empty();

        private Builder() {}

        public Builder from(BigEntity other) {
            castMember(other.getCastMember());
            extendedMovie(other.getExtendedMovie());
            entity(other.getEntity());
            metadata(other.getMetadata());
            commonMetadata(other.getCommonMetadata());
            eventInfo(other.getEventInfo());
            data(other.getData());
            migration(other.getMigration());
            exception(other.getException());
            test(other.getTest());
            node(other.getNode());
            directory(other.getDirectory());
            moment(other.getMoment());
            return this;
        }

        @JsonSetter(value = "castMember", nulls = Nulls.SKIP)
        public Builder castMember(Optional<CastMember> castMember) {
            this.castMember = castMember;
            return this;
        }

        public Builder castMember(CastMember castMember) {
            this.castMember = Optional.ofNullable(castMember);
            return this;
        }

        @JsonSetter(value = "extendedMovie", nulls = Nulls.SKIP)
        public Builder extendedMovie(Optional<ExtendedMovie> extendedMovie) {
            this.extendedMovie = extendedMovie;
            return this;
        }

        public Builder extendedMovie(ExtendedMovie extendedMovie) {
            this.extendedMovie = Optional.ofNullable(extendedMovie);
            return this;
        }

        @JsonSetter(value = "entity", nulls = Nulls.SKIP)
        public Builder entity(Optional<Entity> entity) {
            this.entity = entity;
            return this;
        }

        public Builder entity(Entity entity) {
            this.entity = Optional.ofNullable(entity);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "commonMetadata", nulls = Nulls.SKIP)
        public Builder commonMetadata(Optional<com.seed.examples.model.commons.types.Metadata> commonMetadata) {
            this.commonMetadata = commonMetadata;
            return this;
        }

        public Builder commonMetadata(com.seed.examples.model.commons.types.Metadata commonMetadata) {
            this.commonMetadata = Optional.ofNullable(commonMetadata);
            return this;
        }

        @JsonSetter(value = "eventInfo", nulls = Nulls.SKIP)
        public Builder eventInfo(Optional<EventInfo> eventInfo) {
            this.eventInfo = eventInfo;
            return this;
        }

        public Builder eventInfo(EventInfo eventInfo) {
            this.eventInfo = Optional.ofNullable(eventInfo);
            return this;
        }

        @JsonSetter(value = "data", nulls = Nulls.SKIP)
        public Builder data(Optional<Data> data) {
            this.data = data;
            return this;
        }

        public Builder data(Data data) {
            this.data = Optional.ofNullable(data);
            return this;
        }

        @JsonSetter(value = "migration", nulls = Nulls.SKIP)
        public Builder migration(Optional<Migration> migration) {
            this.migration = migration;
            return this;
        }

        public Builder migration(Migration migration) {
            this.migration = Optional.ofNullable(migration);
            return this;
        }

        @JsonSetter(value = "exception", nulls = Nulls.SKIP)
        public Builder exception(Optional<Exception> exception) {
            this.exception = exception;
            return this;
        }

        public Builder exception(Exception exception) {
            this.exception = Optional.ofNullable(exception);
            return this;
        }

        @JsonSetter(value = "test", nulls = Nulls.SKIP)
        public Builder test(Optional<Test> test) {
            this.test = test;
            return this;
        }

        public Builder test(Test test) {
            this.test = Optional.ofNullable(test);
            return this;
        }

        @JsonSetter(value = "node", nulls = Nulls.SKIP)
        public Builder node(Optional<Node> node) {
            this.node = node;
            return this;
        }

        public Builder node(Node node) {
            this.node = Optional.ofNullable(node);
            return this;
        }

        @JsonSetter(value = "directory", nulls = Nulls.SKIP)
        public Builder directory(Optional<Directory> directory) {
            this.directory = directory;
            return this;
        }

        public Builder directory(Directory directory) {
            this.directory = Optional.ofNullable(directory);
            return this;
        }

        @JsonSetter(value = "moment", nulls = Nulls.SKIP)
        public Builder moment(Optional<Moment> moment) {
            this.moment = moment;
            return this;
        }

        public Builder moment(Moment moment) {
            this.moment = Optional.ofNullable(moment);
            return this;
        }

        public BigEntity build() {
            return new BigEntity(
                    castMember,
                    extendedMovie,
                    entity,
                    metadata,
                    commonMetadata,
                    eventInfo,
                    data,
                    migration,
                    exception,
                    test,
                    node,
                    directory,
                    moment);
        }
    }
}
