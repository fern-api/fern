/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullable.model.nullable;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public final class Status {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private Status(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static Status active() {
        return new Status(new ActiveValue());
    }

    public static Status archived(Optional<OffsetDateTime> value) {
        return new Status(new ArchivedValue(value));
    }

    public static Status softDeleted(Optional<OffsetDateTime> value) {
        return new Status(new SoftDeletedValue(value));
    }

    public boolean isActive() {
        return value instanceof ActiveValue;
    }

    public boolean isArchived() {
        return value instanceof ArchivedValue;
    }

    public boolean isSoftDeleted() {
        return value instanceof SoftDeletedValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<Optional<OffsetDateTime>> getArchived() {
        if (isArchived()) {
            return Optional.of(((ArchivedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Optional<OffsetDateTime>> getSoftDeleted() {
        if (isSoftDeleted()) {
            return Optional.of(((SoftDeletedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitActive();

        T visitArchived(Optional<OffsetDateTime> archived);

        T visitSoftDeleted(Optional<OffsetDateTime> softDeleted);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(ActiveValue.class),
        @JsonSubTypes.Type(ArchivedValue.class),
        @JsonSubTypes.Type(SoftDeletedValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("active")
    @JsonIgnoreProperties("type")
    private static final class ActiveValue implements Value {
        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ActiveValue() {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitActive();
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ActiveValue;
        }

        @java.lang.Override
        public String toString() {
            return "Status{" + "}";
        }
    }

    @JsonTypeName("archived")
    @JsonIgnoreProperties("type")
    private static final class ArchivedValue implements Value {
        @JsonProperty("value")
        private Optional<OffsetDateTime> value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ArchivedValue(@JsonProperty("value") Optional<OffsetDateTime> value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitArchived(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ArchivedValue && equalTo((ArchivedValue) other);
        }

        private boolean equalTo(ArchivedValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Status{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("soft-deleted")
    @JsonIgnoreProperties("type")
    private static final class SoftDeletedValue implements Value {
        @JsonProperty("value")
        private Optional<OffsetDateTime> value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private SoftDeletedValue(@JsonProperty("value") Optional<OffsetDateTime> value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitSoftDeleted(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof SoftDeletedValue && equalTo((SoftDeletedValue) other);
        }

        private boolean equalTo(SoftDeletedValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Status{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "Status{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
