/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.model.users;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.pagination.core.ObjectMappers;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Page.Builder.class)
public final class Page {
    private final int page;

    private final Optional<NextPage> next;

    private final int perPage;

    private final int totalPage;

    private Page(int page, Optional<NextPage> next, int perPage, int totalPage) {
        this.page = page;
        this.next = next;
        this.perPage = perPage;
        this.totalPage = totalPage;
    }

    /**
     * @return The current page
     */
    @JsonProperty("page")
    public int getPage() {
        return page;
    }

    @JsonProperty("next")
    public Optional<NextPage> getNext() {
        return next;
    }

    @JsonProperty("per_page")
    public int getPerPage() {
        return perPage;
    }

    @JsonProperty("total_page")
    public int getTotalPage() {
        return totalPage;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Page && equalTo((Page) other);
    }

    private boolean equalTo(Page other) {
        return page == other.page
                && next.equals(other.next)
                && perPage == other.perPage
                && totalPage == other.totalPage;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.page, this.next, this.perPage, this.totalPage);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PageStage builder() {
        return new Builder();
    }

    public interface PageStage {
        PerPageStage page(int page);

        Builder from(Page other);
    }

    public interface PerPageStage {
        TotalPageStage perPage(int perPage);
    }

    public interface TotalPageStage {
        _FinalStage totalPage(int totalPage);
    }

    public interface _FinalStage {
        Page build();

        _FinalStage next(Optional<NextPage> next);

        _FinalStage next(NextPage next);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PageStage, PerPageStage, TotalPageStage, _FinalStage {
        private int page;

        private int perPage;

        private int totalPage;

        private Optional<NextPage> next = Optional.empty();

        private Builder() {}

        @java.lang.Override
        public Builder from(Page other) {
            page(other.getPage());
            next(other.getNext());
            perPage(other.getPerPage());
            totalPage(other.getTotalPage());
            return this;
        }

        /**
         * <p>The current page</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("page")
        public PerPageStage page(int page) {
            this.page = page;
            return this;
        }

        @java.lang.Override
        @JsonSetter("per_page")
        public TotalPageStage perPage(int perPage) {
            this.perPage = perPage;
            return this;
        }

        @java.lang.Override
        @JsonSetter("total_page")
        public _FinalStage totalPage(int totalPage) {
            this.totalPage = totalPage;
            return this;
        }

        @java.lang.Override
        public _FinalStage next(NextPage next) {
            this.next = Optional.ofNullable(next);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "next", nulls = Nulls.SKIP)
        public _FinalStage next(Optional<NextPage> next) {
            this.next = next;
            return this;
        }

        @java.lang.Override
        public Page build() {
            return new Page(page, next, perPage, totalPage);
        }
    }
}
