/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.model.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaginatedClientResponse.Builder.class)
public final class PaginatedClientResponse {
    private final int start;

    private final int limit;

    private final int length;

    private final Optional<Integer> total;

    private final List<Client> clients;

    private PaginatedClientResponse(int start, int limit, int length, Optional<Integer> total, List<Client> clients) {
        this.start = start;
        this.limit = limit;
        this.length = length;
        this.total = total;
        this.clients = clients;
    }

    /**
     * @return Starting index (zero-based)
     */
    @JsonProperty("start")
    public int getStart() {
        return start;
    }

    /**
     * @return Number of items requested
     */
    @JsonProperty("limit")
    public int getLimit() {
        return limit;
    }

    /**
     * @return Number of items returned
     */
    @JsonProperty("length")
    public int getLength() {
        return length;
    }

    /**
     * @return Total number of items (when include_totals=true)
     */
    @JsonProperty("total")
    public Optional<Integer> getTotal() {
        return total;
    }

    /**
     * @return List of clients
     */
    @JsonProperty("clients")
    public List<Client> getClients() {
        return clients;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaginatedClientResponse && equalTo((PaginatedClientResponse) other);
    }

    private boolean equalTo(PaginatedClientResponse other) {
        return start == other.start
                && limit == other.limit
                && length == other.length
                && total.equals(other.total)
                && clients.equals(other.clients);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.start, this.limit, this.length, this.total, this.clients);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StartStage builder() {
        return new Builder();
    }

    public interface StartStage {
        /**
         * <p>Starting index (zero-based)</p>
         */
        LimitStage start(int start);

        Builder from(PaginatedClientResponse other);
    }

    public interface LimitStage {
        /**
         * <p>Number of items requested</p>
         */
        LengthStage limit(int limit);
    }

    public interface LengthStage {
        /**
         * <p>Number of items returned</p>
         */
        _FinalStage length(int length);
    }

    public interface _FinalStage {
        PaginatedClientResponse build();

        /**
         * <p>Total number of items (when include_totals=true)</p>
         */
        _FinalStage total(Optional<Integer> total);

        _FinalStage total(Integer total);

        /**
         * <p>List of clients</p>
         */
        _FinalStage clients(List<Client> clients);

        _FinalStage addClients(Client clients);

        _FinalStage addAllClients(List<Client> clients);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StartStage, LimitStage, LengthStage, _FinalStage {
        private int start;

        private int limit;

        private int length;

        private List<Client> clients = new ArrayList<>();

        private Optional<Integer> total = Optional.empty();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaginatedClientResponse other) {
            start(other.getStart());
            limit(other.getLimit());
            length(other.getLength());
            total(other.getTotal());
            clients(other.getClients());
            return this;
        }

        /**
         * <p>Starting index (zero-based)</p>
         * <p>Starting index (zero-based)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("start")
        public LimitStage start(int start) {
            this.start = start;
            return this;
        }

        /**
         * <p>Number of items requested</p>
         * <p>Number of items requested</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("limit")
        public LengthStage limit(int limit) {
            this.limit = limit;
            return this;
        }

        /**
         * <p>Number of items returned</p>
         * <p>Number of items returned</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("length")
        public _FinalStage length(int length) {
            this.length = length;
            return this;
        }

        /**
         * <p>List of clients</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllClients(List<Client> clients) {
            this.clients.addAll(clients);
            return this;
        }

        /**
         * <p>List of clients</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addClients(Client clients) {
            this.clients.add(clients);
            return this;
        }

        /**
         * <p>List of clients</p>
         */
        @java.lang.Override
        @JsonSetter(value = "clients", nulls = Nulls.SKIP)
        public _FinalStage clients(List<Client> clients) {
            this.clients.clear();
            this.clients.addAll(clients);
            return this;
        }

        /**
         * <p>Total number of items (when include_totals=true)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage total(Integer total) {
            this.total = Optional.ofNullable(total);
            return this;
        }

        /**
         * <p>Total number of items (when include_totals=true)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "total", nulls = Nulls.SKIP)
        public _FinalStage total(Optional<Integer> total) {
            this.total = total;
            return this;
        }

        @java.lang.Override
        public PaginatedClientResponse build() {
            return new PaginatedClientResponse(start, limit, length, total, clients);
        }
    }
}
