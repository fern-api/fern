/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.model.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Identity.Builder.class)
public final class Identity {
    private final String connection;

    private final String userId;

    private final String provider;

    private final boolean isSocial;

    private final Optional<String> accessToken;

    private final Optional<Integer> expiresIn;

    private Identity(
            String connection,
            String userId,
            String provider,
            boolean isSocial,
            Optional<String> accessToken,
            Optional<Integer> expiresIn) {
        this.connection = connection;
        this.userId = userId;
        this.provider = provider;
        this.isSocial = isSocial;
        this.accessToken = accessToken;
        this.expiresIn = expiresIn;
    }

    @JsonProperty("connection")
    public String getConnection() {
        return connection;
    }

    @JsonProperty("user_id")
    public String getUserId() {
        return userId;
    }

    @JsonProperty("provider")
    public String getProvider() {
        return provider;
    }

    @JsonProperty("is_social")
    public boolean getIsSocial() {
        return isSocial;
    }

    @JsonProperty("access_token")
    public Optional<String> getAccessToken() {
        return accessToken;
    }

    @JsonProperty("expires_in")
    public Optional<Integer> getExpiresIn() {
        return expiresIn;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Identity && equalTo((Identity) other);
    }

    private boolean equalTo(Identity other) {
        return connection.equals(other.connection)
                && userId.equals(other.userId)
                && provider.equals(other.provider)
                && isSocial == other.isSocial
                && accessToken.equals(other.accessToken)
                && expiresIn.equals(other.expiresIn);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.connection, this.userId, this.provider, this.isSocial, this.accessToken, this.expiresIn);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConnectionStage builder() {
        return new Builder();
    }

    public interface ConnectionStage {
        UserIdStage connection(String connection);

        Builder from(Identity other);
    }

    public interface UserIdStage {
        ProviderStage userId(String userId);
    }

    public interface ProviderStage {
        IsSocialStage provider(String provider);
    }

    public interface IsSocialStage {
        _FinalStage isSocial(boolean isSocial);
    }

    public interface _FinalStage {
        Identity build();

        _FinalStage accessToken(Optional<String> accessToken);

        _FinalStage accessToken(String accessToken);

        _FinalStage expiresIn(Optional<Integer> expiresIn);

        _FinalStage expiresIn(Integer expiresIn);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ConnectionStage, UserIdStage, ProviderStage, IsSocialStage, _FinalStage {
        private String connection;

        private String userId;

        private String provider;

        private boolean isSocial;

        private Optional<Integer> expiresIn = Optional.empty();

        private Optional<String> accessToken = Optional.empty();

        private Builder() {}

        @java.lang.Override
        public Builder from(Identity other) {
            connection(other.getConnection());
            userId(other.getUserId());
            provider(other.getProvider());
            isSocial(other.getIsSocial());
            accessToken(other.getAccessToken());
            expiresIn(other.getExpiresIn());
            return this;
        }

        @java.lang.Override
        @JsonSetter("connection")
        public UserIdStage connection(String connection) {
            this.connection = Objects.requireNonNull(connection, "connection must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("user_id")
        public ProviderStage userId(String userId) {
            this.userId = Objects.requireNonNull(userId, "userId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("provider")
        public IsSocialStage provider(String provider) {
            this.provider = Objects.requireNonNull(provider, "provider must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("is_social")
        public _FinalStage isSocial(boolean isSocial) {
            this.isSocial = isSocial;
            return this;
        }

        @java.lang.Override
        public _FinalStage expiresIn(Integer expiresIn) {
            this.expiresIn = Optional.ofNullable(expiresIn);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expires_in", nulls = Nulls.SKIP)
        public _FinalStage expiresIn(Optional<Integer> expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        @java.lang.Override
        public _FinalStage accessToken(String accessToken) {
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "access_token", nulls = Nulls.SKIP)
        public _FinalStage accessToken(Optional<String> accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        @java.lang.Override
        public Identity build() {
            return new Identity(connection, userId, provider, isSocial, accessToken, expiresIn);
        }
    }
}
