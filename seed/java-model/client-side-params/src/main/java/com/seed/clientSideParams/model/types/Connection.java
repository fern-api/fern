/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.model.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Connection.Builder.class)
public final class Connection {
    private final String id;

    private final String name;

    private final Optional<String> displayName;

    private final String strategy;

    private final Optional<Map<String, Object>> options;

    private final Optional<List<String>> enabledClients;

    private final Optional<List<String>> realms;

    private final Optional<Boolean> isDomainConnection;

    private final Optional<Map<String, Object>> metadata;

    private Connection(
            String id,
            String name,
            Optional<String> displayName,
            String strategy,
            Optional<Map<String, Object>> options,
            Optional<List<String>> enabledClients,
            Optional<List<String>> realms,
            Optional<Boolean> isDomainConnection,
            Optional<Map<String, Object>> metadata) {
        this.id = id;
        this.name = name;
        this.displayName = displayName;
        this.strategy = strategy;
        this.options = options;
        this.enabledClients = enabledClients;
        this.realms = realms;
        this.isDomainConnection = isDomainConnection;
        this.metadata = metadata;
    }

    /**
     * @return Connection identifier
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return Connection name
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return Display name for the connection
     */
    @JsonProperty("display_name")
    public Optional<String> getDisplayName() {
        return displayName;
    }

    /**
     * @return The identity provider identifier (auth0, google-oauth2, facebook, etc.)
     */
    @JsonProperty("strategy")
    public String getStrategy() {
        return strategy;
    }

    /**
     * @return Connection-specific configuration options
     */
    @JsonProperty("options")
    public Optional<Map<String, Object>> getOptions() {
        return options;
    }

    /**
     * @return List of client IDs that can use this connection
     */
    @JsonProperty("enabled_clients")
    public Optional<List<String>> getEnabledClients() {
        return enabledClients;
    }

    /**
     * @return Applicable realms for enterprise connections
     */
    @JsonProperty("realms")
    public Optional<List<String>> getRealms() {
        return realms;
    }

    /**
     * @return Whether this is a domain connection
     */
    @JsonProperty("is_domain_connection")
    public Optional<Boolean> getIsDomainConnection() {
        return isDomainConnection;
    }

    /**
     * @return Additional metadata
     */
    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Connection && equalTo((Connection) other);
    }

    private boolean equalTo(Connection other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && displayName.equals(other.displayName)
                && strategy.equals(other.strategy)
                && options.equals(other.options)
                && enabledClients.equals(other.enabledClients)
                && realms.equals(other.realms)
                && isDomainConnection.equals(other.isDomainConnection)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.displayName,
                this.strategy,
                this.options,
                this.enabledClients,
                this.realms,
                this.isDomainConnection,
                this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>Connection identifier</p>
         */
        NameStage id(String id);

        Builder from(Connection other);
    }

    public interface NameStage {
        /**
         * <p>Connection name</p>
         */
        StrategyStage name(String name);
    }

    public interface StrategyStage {
        /**
         * <p>The identity provider identifier (auth0, google-oauth2, facebook, etc.)</p>
         */
        _FinalStage strategy(String strategy);
    }

    public interface _FinalStage {
        Connection build();

        /**
         * <p>Display name for the connection</p>
         */
        _FinalStage displayName(Optional<String> displayName);

        _FinalStage displayName(String displayName);

        /**
         * <p>Connection-specific configuration options</p>
         */
        _FinalStage options(Optional<Map<String, Object>> options);

        _FinalStage options(Map<String, Object> options);

        /**
         * <p>List of client IDs that can use this connection</p>
         */
        _FinalStage enabledClients(Optional<List<String>> enabledClients);

        _FinalStage enabledClients(List<String> enabledClients);

        /**
         * <p>Applicable realms for enterprise connections</p>
         */
        _FinalStage realms(Optional<List<String>> realms);

        _FinalStage realms(List<String> realms);

        /**
         * <p>Whether this is a domain connection</p>
         */
        _FinalStage isDomainConnection(Optional<Boolean> isDomainConnection);

        _FinalStage isDomainConnection(Boolean isDomainConnection);

        /**
         * <p>Additional metadata</p>
         */
        _FinalStage metadata(Optional<Map<String, Object>> metadata);

        _FinalStage metadata(Map<String, Object> metadata);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, StrategyStage, _FinalStage {
        private String id;

        private String name;

        private String strategy;

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<Boolean> isDomainConnection = Optional.empty();

        private Optional<List<String>> realms = Optional.empty();

        private Optional<List<String>> enabledClients = Optional.empty();

        private Optional<Map<String, Object>> options = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Builder() {}

        @java.lang.Override
        public Builder from(Connection other) {
            id(other.getId());
            name(other.getName());
            displayName(other.getDisplayName());
            strategy(other.getStrategy());
            options(other.getOptions());
            enabledClients(other.getEnabledClients());
            realms(other.getRealms());
            isDomainConnection(other.getIsDomainConnection());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>Connection identifier</p>
         * <p>Connection identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>Connection name</p>
         * <p>Connection name</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public StrategyStage name(String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The identity provider identifier (auth0, google-oauth2, facebook, etc.)</p>
         * <p>The identity provider identifier (auth0, google-oauth2, facebook, etc.)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("strategy")
        public _FinalStage strategy(String strategy) {
            this.strategy = Objects.requireNonNull(strategy, "strategy must not be null");
            return this;
        }

        /**
         * <p>Additional metadata</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * <p>Additional metadata</p>
         */
        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * <p>Whether this is a domain connection</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage isDomainConnection(Boolean isDomainConnection) {
            this.isDomainConnection = Optional.ofNullable(isDomainConnection);
            return this;
        }

        /**
         * <p>Whether this is a domain connection</p>
         */
        @java.lang.Override
        @JsonSetter(value = "is_domain_connection", nulls = Nulls.SKIP)
        public _FinalStage isDomainConnection(Optional<Boolean> isDomainConnection) {
            this.isDomainConnection = isDomainConnection;
            return this;
        }

        /**
         * <p>Applicable realms for enterprise connections</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage realms(List<String> realms) {
            this.realms = Optional.ofNullable(realms);
            return this;
        }

        /**
         * <p>Applicable realms for enterprise connections</p>
         */
        @java.lang.Override
        @JsonSetter(value = "realms", nulls = Nulls.SKIP)
        public _FinalStage realms(Optional<List<String>> realms) {
            this.realms = realms;
            return this;
        }

        /**
         * <p>List of client IDs that can use this connection</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enabledClients(List<String> enabledClients) {
            this.enabledClients = Optional.ofNullable(enabledClients);
            return this;
        }

        /**
         * <p>List of client IDs that can use this connection</p>
         */
        @java.lang.Override
        @JsonSetter(value = "enabled_clients", nulls = Nulls.SKIP)
        public _FinalStage enabledClients(Optional<List<String>> enabledClients) {
            this.enabledClients = enabledClients;
            return this;
        }

        /**
         * <p>Connection-specific configuration options</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage options(Map<String, Object> options) {
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * <p>Connection-specific configuration options</p>
         */
        @java.lang.Override
        @JsonSetter(value = "options", nulls = Nulls.SKIP)
        public _FinalStage options(Optional<Map<String, Object>> options) {
            this.options = options;
            return this;
        }

        /**
         * <p>Display name for the connection</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage displayName(String displayName) {
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        /**
         * <p>Display name for the connection</p>
         */
        @java.lang.Override
        @JsonSetter(value = "display_name", nulls = Nulls.SKIP)
        public _FinalStage displayName(Optional<String> displayName) {
            this.displayName = displayName;
            return this;
        }

        @java.lang.Override
        public Connection build() {
            return new Connection(
                    id, name, displayName, strategy, options, enabledClients, realms, isDomainConnection, metadata);
        }
    }
}
