/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedUnions from "../../../../api/index";
import * as core from "../../../../core";

export const UnionWithDiscriminant: core.serialization.Schema<
    serializers.UnionWithDiscriminant.Raw,
    SeedUnions.UnionWithDiscriminant
> = core.serialization
    .union(core.serialization.discriminant("type", "_type"), {
        foo: core.serialization.object({
            foo: core.serialization.lazyObject(() => serializers.Foo),
        }),
        bar: core.serialization.object({
            bar: core.serialization.lazyObject(() => serializers.Bar),
        }),
    })
    .transform<SeedUnions.UnionWithDiscriminant>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace UnionWithDiscriminant {
    export type Raw = UnionWithDiscriminant.Foo | UnionWithDiscriminant.Bar;

    export interface Foo {
        _type: "foo";
        foo: serializers.Foo.Raw;
    }

    export interface Bar {
        _type: "bar";
        bar: serializers.Bar.Raw;
    }
}
