/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedUnions from "../../../../api/index";
import * as core from "../../../../core";

export const UnionWithDuplicatePrimitive: core.serialization.Schema<
    serializers.UnionWithDuplicatePrimitive.Raw,
    SeedUnions.UnionWithDuplicatePrimitive
> = core.serialization
    .union("type", {
        integer1: core.serialization.object({
            value: core.serialization.number(),
        }),
        integer2: core.serialization.object({
            value: core.serialization.number(),
        }),
        string1: core.serialization.object({
            value: core.serialization.string(),
        }),
        string2: core.serialization.object({
            value: core.serialization.string(),
        }),
    })
    .transform<SeedUnions.UnionWithDuplicatePrimitive>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace UnionWithDuplicatePrimitive {
    export type Raw =
        | UnionWithDuplicatePrimitive.Integer1
        | UnionWithDuplicatePrimitive.Integer2
        | UnionWithDuplicatePrimitive.String1
        | UnionWithDuplicatePrimitive.String2;

    export interface Integer1 {
        type: "integer1";
        value: number;
    }

    export interface Integer2 {
        type: "integer2";
        value: number;
    }

    export interface String1 {
        type: "string1";
        value: string;
    }

    export interface String2 {
        type: "string2";
        value: string;
    }
}
