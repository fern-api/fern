/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as serializers from "../../../index";
import * as SeedUnions from "../../../../api/index";

const _Base = core.serialization.object({
    id: core.serialization.string(),
});
export const Shape: core.serialization.Schema<serializers.Shape.Raw, SeedUnions.Shape> = core.serialization
    .union("type", {
        circle: core.serialization.lazyObject(() => serializers.Circle).extend(_Base),
        square: core.serialization.lazyObject(() => serializers.Square).extend(_Base),
    })
    .transform<SeedUnions.Shape>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Shape {
    export type Raw = Shape.Circle | Shape.Square;

    export interface Circle extends _Base, serializers.Circle.Raw {
        type: "circle";
    }

    export interface Square extends _Base, serializers.Square.Raw {
        type: "square";
    }

    export interface _Base {
        id: string;
    }
}
