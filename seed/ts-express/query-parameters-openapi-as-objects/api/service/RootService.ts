/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedApi from "../index";
import express from "express";
import * as serializers from "../../serialization/index";
import * as errors from "../../errors/index";

export interface RootServiceMethods {
    search(
        req: express.Request<
            never,
            SeedApi.SearchResponse,
            never,
            {
                limit: number;
                id: string;
                date: string;
                deadline: Date;
                bytes: string;
                user: SeedApi.User;
                userList?: SeedApi.User;
                optionalDeadline?: Date;
                keyValue?: Record<string, string | undefined>;
                optionalString?: string;
                nestedUser?: SeedApi.NestedUser;
                optionalUser?: SeedApi.User;
                excludeUser?: SeedApi.User;
                filter?: string;
                neighbor?: SeedApi.SearchRequestNeighbor;
                neighborRequired: SeedApi.SearchRequestNeighborRequired;
            }
        >,
        res: {
            send: (responseBody: SeedApi.SearchResponse) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
}

export class RootService {
    private router;

    constructor(
        private readonly methods: RootServiceMethods,
        middleware: express.RequestHandler[] = [],
    ) {
        this.router = express.Router({ mergeParams: true }).use(
            express.json({
                strict: false,
            }),
            ...middleware,
        );
    }

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.get("/user/getUsername", async (req, res, next) => {
            try {
                await this.methods.search(
                    req as any,
                    {
                        send: async (responseBody) => {
                            res.status(200).json(
                                serializers.SearchResponse.jsonOrThrow(responseBody, {
                                    unrecognizedObjectKeys: "strip",
                                }),
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    },
                    next,
                );
                if (!res.writableEnded) {
                    next();
                }
            } catch (error) {
                if (error instanceof errors.SeedApiError) {
                    console.warn(
                        `Endpoint 'search' unexpectedly threw ${error.constructor.name}.` +
                            ` If this was intentional, please add ${error.constructor.name} to` +
                            " the endpoint's errors list in your Fern Definition.",
                    );
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        return this.router;
    }
}
