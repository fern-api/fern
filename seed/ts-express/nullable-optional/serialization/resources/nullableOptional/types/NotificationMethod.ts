/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedNullableOptional from "../../../../api/index";
import * as core from "../../../../core";

export const NotificationMethod: core.serialization.Schema<
    serializers.NotificationMethod.Raw,
    SeedNullableOptional.NotificationMethod
> = core.serialization
    .union("type", {
        email: core.serialization.lazyObject(() => serializers.EmailNotification),
        sms: core.serialization.lazyObject(() => serializers.SmsNotification),
        push: core.serialization.lazyObject(() => serializers.PushNotification),
    })
    .transform<SeedNullableOptional.NotificationMethod>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace NotificationMethod {
    export type Raw = NotificationMethod.Email | NotificationMethod.Sms | NotificationMethod.Push;

    export interface Email extends serializers.EmailNotification.Raw {
        type: "email";
    }

    export interface Sms extends serializers.SmsNotification.Raw {
        type: "sms";
    }

    export interface Push extends serializers.PushNotification.Raw {
        type: "push";
    }
}
