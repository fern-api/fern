/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedNullableOptional from "../../../../api/index";
import * as core from "../../../../core";

export const SearchResult: core.serialization.Schema<serializers.SearchResult.Raw, SeedNullableOptional.SearchResult> =
    core.serialization
        .union("type", {
            user: core.serialization.lazyObject(() => serializers.UserResponse),
            organization: core.serialization.lazyObject(() => serializers.Organization),
            document: core.serialization.lazyObject(() => serializers.Document),
        })
        .transform<SeedNullableOptional.SearchResult>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace SearchResult {
    export type Raw = SearchResult.User | SearchResult.Organization | SearchResult.Document;

    export interface User extends serializers.UserResponse.Raw {
        type: "user";
    }

    export interface Organization extends serializers.Organization.Raw {
        type: "organization";
    }

    export interface Document extends serializers.Document.Raw {
        type: "document";
    }
}
