/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as SeedObject from "../../api/index";
import * as core from "../../core";

export const UndiscriminatedUnion1DiscriminatedUnion1: core.serialization.Schema<
    serializers.UndiscriminatedUnion1DiscriminatedUnion1.Raw,
    SeedObject.UndiscriminatedUnion1DiscriminatedUnion1
> = core.serialization
    .union("type", {
        type1: core.serialization.lazyObject(() => serializers.UndiscriminatedUnion1DiscriminatedUnion1InlineType1),
        type2: core.serialization.lazyObject(() => serializers.UndiscriminatedUnion1DiscriminatedUnion1InlineType2),
        ref: core.serialization.lazyObject(() => serializers.ReferenceType),
    })
    .transform<SeedObject.UndiscriminatedUnion1DiscriminatedUnion1>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace UndiscriminatedUnion1DiscriminatedUnion1 {
    export type Raw =
        | UndiscriminatedUnion1DiscriminatedUnion1.Type1
        | UndiscriminatedUnion1DiscriminatedUnion1.Type2
        | UndiscriminatedUnion1DiscriminatedUnion1.Ref;

    export interface Type1 extends serializers.UndiscriminatedUnion1DiscriminatedUnion1InlineType1.Raw {
        type: "type1";
    }

    export interface Type2 extends serializers.UndiscriminatedUnion1DiscriminatedUnion1InlineType2.Raw {
        type: "type2";
    }

    export interface Ref extends serializers.ReferenceType.Raw {
        type: "ref";
    }
}
