/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedApi from "../../../../api/index";
import * as core from "../../../../core";

export const ContainerValue: core.serialization.Schema<serializers.ContainerValue.Raw, SeedApi.ContainerValue> =
    core.serialization
        .union("type", {
            list: core.serialization.object({
                value: core.serialization.list(core.serialization.lazy(() => serializers.FieldValue)),
            }),
            optional: core.serialization.object({
                value: core.serialization.lazy(() => serializers.FieldValue).optional(),
            }),
        })
        .transform<SeedApi.ContainerValue>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace ContainerValue {
    export type Raw = ContainerValue.List | ContainerValue.Optional;

    export interface List {
        type: "list";
        value: serializers.FieldValue.Raw[];
    }

    export interface Optional {
        type: "optional";
        value?: serializers.FieldValue.Raw | null;
    }
}
