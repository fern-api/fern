/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedClientSideParams from "../../../../api/index";
import * as core from "../../../../core";

export const User: core.serialization.ObjectSchema<serializers.User.Raw, SeedClientSideParams.User> =
    core.serialization.object({
        userId: core.serialization.property("user_id", core.serialization.string()),
        email: core.serialization.string(),
        emailVerified: core.serialization.property("email_verified", core.serialization.boolean()),
        username: core.serialization.string().optional(),
        phoneNumber: core.serialization.property("phone_number", core.serialization.string().optional()),
        phoneVerified: core.serialization.property("phone_verified", core.serialization.boolean().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date()),
        updatedAt: core.serialization.property("updated_at", core.serialization.date()),
        identities: core.serialization.list(core.serialization.lazyObject(() => serializers.Identity)).optional(),
        appMetadata: core.serialization.property(
            "app_metadata",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        ),
        userMetadata: core.serialization.property(
            "user_metadata",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        ),
        picture: core.serialization.string().optional(),
        name: core.serialization.string().optional(),
        nickname: core.serialization.string().optional(),
        multifactor: core.serialization.list(core.serialization.string()).optional(),
        lastIp: core.serialization.property("last_ip", core.serialization.string().optional()),
        lastLogin: core.serialization.property("last_login", core.serialization.date().optional()),
        loginsCount: core.serialization.property("logins_count", core.serialization.number().optional()),
        blocked: core.serialization.boolean().optional(),
        givenName: core.serialization.property("given_name", core.serialization.string().optional()),
        familyName: core.serialization.property("family_name", core.serialization.string().optional()),
    });

export declare namespace User {
    export interface Raw {
        user_id: string;
        email: string;
        email_verified: boolean;
        username?: string | null;
        phone_number?: string | null;
        phone_verified?: boolean | null;
        created_at: string;
        updated_at: string;
        identities?: serializers.Identity.Raw[] | null;
        app_metadata?: Record<string, unknown> | null;
        user_metadata?: Record<string, unknown> | null;
        picture?: string | null;
        name?: string | null;
        nickname?: string | null;
        multifactor?: string[] | null;
        last_ip?: string | null;
        last_login?: string | null;
        logins_count?: number | null;
        blocked?: boolean | null;
        given_name?: string | null;
        family_name?: string | null;
    }
}
