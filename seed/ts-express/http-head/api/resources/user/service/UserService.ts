/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from "express";
import * as SeedHttpHead from "../../../index";
import * as errors from "../../../../errors/index";
import * as serializers from "../../../../serialization/index";

export interface UserServiceMethods {
    head(
        req: express.Request<never, never, never, never>,
        res: {
            send: () => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
    list(
        req: express.Request<
            never,
            SeedHttpHead.User[],
            never,
            {
                limit: number;
            }
        >,
        res: {
            send: (responseBody: SeedHttpHead.User[]) => Promise<void>;
            cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
            locals: any;
        },
        next: express.NextFunction,
    ): void | Promise<void>;
}

export class UserService {
    private router;

    constructor(
        private readonly methods: UserServiceMethods,
        middleware: express.RequestHandler[] = [],
    ) {
        this.router = express.Router({ mergeParams: true }).use(
            express.json({
                strict: false,
            }),
            ...middleware,
        );
    }

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.head("/users", async (req, res, next) => {
            try {
                await this.methods.head(
                    req as any,
                    {
                        send: async () => {
                            res.sendStatus(204);
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    },
                    next,
                );
                if (!res.writableEnded) {
                    next();
                }
            } catch (error) {
                if (error instanceof errors.SeedHttpHeadError) {
                    console.warn(
                        `Endpoint 'head' unexpectedly threw ${error.constructor.name}.` +
                            ` If this was intentional, please add ${error.constructor.name} to` +
                            " the endpoint's errors list in your Fern Definition.",
                    );
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        this.router.get("/users", async (req, res, next) => {
            try {
                await this.methods.list(
                    req as any,
                    {
                        send: async (responseBody) => {
                            res.json(
                                serializers.user.list.Response.jsonOrThrow(responseBody, {
                                    unrecognizedObjectKeys: "strip",
                                }),
                            );
                        },
                        cookie: res.cookie.bind(res),
                        locals: res.locals,
                    },
                    next,
                );
                if (!res.writableEnded) {
                    next();
                }
            } catch (error) {
                if (error instanceof errors.SeedHttpHeadError) {
                    console.warn(
                        `Endpoint 'list' unexpectedly threw ${error.constructor.name}.` +
                            ` If this was intentional, please add ${error.constructor.name} to` +
                            " the endpoint's errors list in your Fern Definition.",
                    );
                    await error.send(res);
                } else {
                    res.status(500).json("Internal Server Error");
                }
                next(error);
            }
        });
        return this.router;
    }
}
