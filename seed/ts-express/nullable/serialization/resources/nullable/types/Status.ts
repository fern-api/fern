/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedNullable from "../../../../api/index";
import * as core from "../../../../core";

export const Status: core.serialization.Schema<serializers.Status.Raw, SeedNullable.Status> = core.serialization
    .union("type", {
        active: core.serialization.object({}),
        archived: core.serialization.object({
            value: core.serialization.date().optional(),
        }),
        "soft-deleted": core.serialization.object({
            value: core.serialization.date().optional(),
        }),
    })
    .transform<SeedNullable.Status>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Status {
    export type Raw = Status.Active | Status.Archived | Status.SoftDeleted;

    export interface Active {
        type: "active";
    }

    export interface Archived {
        type: "archived";
        value?: string | null;
    }

    export interface SoftDeleted {
        type: "soft-deleted";
        value?: string | null;
    }
}
