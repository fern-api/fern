/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as core from "../../core";
import * as SeedPropertyAccess from "../../api/index";

const _Base = core.serialization.object({
    normal: core.serialization.string(),
    foo: core.serialization.lazyObject(() => serializers.Foo),
});
export const UserOrAdminDiscriminated: core.serialization.Schema<
    serializers.UserOrAdminDiscriminated.Raw,
    SeedPropertyAccess.UserOrAdminDiscriminated
> = core.serialization
    .union("type", {
        user: core.serialization.lazyObject(() => serializers.User).extend(_Base),
        admin: core.serialization
            .object({
                admin: core.serialization.lazyObject(() => serializers.Admin),
            })
            .extend(_Base),
        empty: core.serialization.object({}).extend(_Base),
    })
    .transform<SeedPropertyAccess.UserOrAdminDiscriminated>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace UserOrAdminDiscriminated {
    export type Raw = UserOrAdminDiscriminated.User | UserOrAdminDiscriminated.Admin | UserOrAdminDiscriminated.Empty;

    export interface User extends _Base, serializers.User.Raw {
        type: "user";
    }

    export interface Admin extends _Base {
        type: "admin";
        admin: serializers.Admin.Raw;
    }

    export interface Empty extends _Base {
        type: "empty";
    }

    export interface _Base extends serializers.Foo.Raw {
        normal: string;
        foo: serializers.Foo.Raw;
    }
}
