/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from "express";
import * as SeedExhaustive from "../../../../..";
export interface HttpMethodsServiceMethods {
    testGet(req: express.Request<{
        id: string;
    }, string, never, never>, res: {
        send: (responseBody: string) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    testPost(req: express.Request<never, SeedExhaustive.types.ObjectWithOptionalField, SeedExhaustive.types.ObjectWithRequiredField, never>, res: {
        send: (responseBody: SeedExhaustive.types.ObjectWithOptionalField) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    testPut(req: express.Request<{
        id: string;
    }, SeedExhaustive.types.ObjectWithOptionalField, SeedExhaustive.types.ObjectWithRequiredField, never>, res: {
        send: (responseBody: SeedExhaustive.types.ObjectWithOptionalField) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    testPatch(req: express.Request<{
        id: string;
    }, SeedExhaustive.types.ObjectWithOptionalField, SeedExhaustive.types.ObjectWithOptionalField, never>, res: {
        send: (responseBody: SeedExhaustive.types.ObjectWithOptionalField) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    testDelete(req: express.Request<{
        id: string;
    }, boolean, never, never>, res: {
        send: (responseBody: boolean) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class HttpMethodsService {
    private readonly methods;
    private router;
    constructor(methods: HttpMethodsServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
