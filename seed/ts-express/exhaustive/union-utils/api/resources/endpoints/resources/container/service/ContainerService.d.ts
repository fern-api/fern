/**
 * This file was auto-generated by Fern from our API Definition.
 */
import express from "express";
import * as SeedExhaustive from "../../../../..";
export interface ContainerServiceMethods {
    getAndReturnListOfPrimitives(req: express.Request<never, string[], string[], never>, res: {
        send: (responseBody: string[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getAndReturnListOfObjects(req: express.Request<never, SeedExhaustive.types.ObjectWithRequiredField[], SeedExhaustive.types.ObjectWithRequiredField[], never>, res: {
        send: (responseBody: SeedExhaustive.types.ObjectWithRequiredField[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getAndReturnSetOfPrimitives(req: express.Request<never, Set<string>, Set<string>, never>, res: {
        send: (responseBody: Set<string>) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getAndReturnSetOfObjects(req: express.Request<never, SeedExhaustive.types.ObjectWithRequiredField[], SeedExhaustive.types.ObjectWithRequiredField[], never>, res: {
        send: (responseBody: SeedExhaustive.types.ObjectWithRequiredField[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getAndReturnMapPrimToPrim(req: express.Request<never, Record<string, string>, Record<string, string>, never>, res: {
        send: (responseBody: Record<string, string>) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getAndReturnMapOfPrimToObject(req: express.Request<never, Record<string, SeedExhaustive.types.ObjectWithRequiredField>, Record<string, SeedExhaustive.types.ObjectWithRequiredField>, never>, res: {
        send: (responseBody: Record<string, SeedExhaustive.types.ObjectWithRequiredField>) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getAndReturnOptional(req: express.Request<never, SeedExhaustive.types.ObjectWithRequiredField | undefined, SeedExhaustive.types.ObjectWithRequiredField | undefined, never>, res: {
        send: (responseBody: SeedExhaustive.types.ObjectWithRequiredField | undefined) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class ContainerService {
    private readonly methods;
    private router;
    constructor(methods: ContainerServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
