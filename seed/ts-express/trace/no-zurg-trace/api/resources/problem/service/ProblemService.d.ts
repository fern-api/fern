/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as SeedTrace from "../../..";
import express from "express";
export interface ProblemServiceMethods {
    createProblem(req: express.Request<never, SeedTrace.CreateProblemResponse, SeedTrace.CreateProblemRequest, never>, res: {
        send: (responseBody: SeedTrace.CreateProblemResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    updateProblem(req: express.Request<{
        problemId: SeedTrace.ProblemId;
    }, SeedTrace.UpdateProblemResponse, SeedTrace.CreateProblemRequest, never>, res: {
        send: (responseBody: SeedTrace.UpdateProblemResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    deleteProblem(req: express.Request<{
        problemId: SeedTrace.ProblemId;
    }, never, never, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getDefaultStarterFiles(req: express.Request<never, SeedTrace.GetDefaultStarterFilesResponse, SeedTrace.GetDefaultStarterFilesRequest, never>, res: {
        send: (responseBody: SeedTrace.GetDefaultStarterFilesResponse) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class ProblemService {
    private readonly methods;
    private router;
    constructor(methods: ProblemServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
