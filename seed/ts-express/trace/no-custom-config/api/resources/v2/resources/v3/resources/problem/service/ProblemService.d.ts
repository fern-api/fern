/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as SeedTrace from "../../../../../../..";
import express from "express";
import * as serializers from "../../../../../../../../serialization";
export interface ProblemServiceMethods {
    getLightweightProblems(req: express.Request<never, SeedTrace.v2.v3.LightweightProblemInfoV2[], never, never>, res: {
        send: (responseBody: SeedTrace.v2.v3.LightweightProblemInfoV2[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getProblems(req: express.Request<never, SeedTrace.v2.v3.ProblemInfoV2[], never, never>, res: {
        send: (responseBody: SeedTrace.v2.v3.ProblemInfoV2[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getLatestProblem(req: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, SeedTrace.v2.v3.ProblemInfoV2, never, never>, res: {
        send: (responseBody: SeedTrace.v2.v3.ProblemInfoV2) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getProblemVersion(req: express.Request<{
        problemId: serializers.ProblemId.Raw;
        problemVersion: number;
    }, SeedTrace.v2.v3.ProblemInfoV2, never, never>, res: {
        send: (responseBody: SeedTrace.v2.v3.ProblemInfoV2) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class ProblemService {
    private readonly methods;
    private router;
    constructor(methods: ProblemServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
