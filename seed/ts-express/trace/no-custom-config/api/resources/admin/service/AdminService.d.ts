/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../../../serialization";
import * as SeedTrace from "../../..";
import express from "express";
export interface AdminServiceMethods {
    updateTestSubmissionStatus(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, SeedTrace.TestSubmissionStatus, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    sendTestSubmissionUpdate(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, SeedTrace.TestSubmissionUpdate, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    updateWorkspaceSubmissionStatus(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, SeedTrace.WorkspaceSubmissionStatus, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    sendWorkspaceSubmissionUpdate(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, SeedTrace.WorkspaceSubmissionUpdate, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    storeTracedTestCase(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
        testCaseId: string;
    }, never, SeedTrace.StoreTracedTestCaseRequest, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    storeTracedTestCaseV2(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
        testCaseId: serializers.v2.TestCaseId.Raw;
    }, never, SeedTrace.TraceResponseV2[], never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    storeTracedWorkspace(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, SeedTrace.StoreTracedWorkspaceRequest, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    storeTracedWorkspaceV2(req: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, SeedTrace.TraceResponseV2[], never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class AdminService {
    private readonly methods;
    private router;
    constructor(methods: AdminServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
