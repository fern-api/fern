/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as SeedTrace from "../../..";
import express from "express";
import * as serializers from "../../../../serialization";
export interface PlaylistServiceMethods {
    createPlaylist(req: express.Request<{
        serviceParam: number;
    }, SeedTrace.Playlist, SeedTrace.PlaylistCreateRequest, {
        datetime: Date;
        optionalDatetime?: Date;
    }>, res: {
        send: (responseBody: SeedTrace.Playlist) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getPlaylists(req: express.Request<{
        serviceParam: number;
    }, SeedTrace.Playlist[], never, {
        limit?: number;
        otherField: string;
        multiLineDocs: string;
        optionalMultipleField?: string;
        multipleField: string;
    }>, res: {
        send: (responseBody: SeedTrace.Playlist[]) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    getPlaylist(req: express.Request<{
        serviceParam: number;
        playlistId: serializers.PlaylistId.Raw;
    }, SeedTrace.Playlist, never, never>, res: {
        send: (responseBody: SeedTrace.Playlist) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    updatePlaylist(req: express.Request<{
        serviceParam: number;
        playlistId: serializers.PlaylistId.Raw;
    }, SeedTrace.Playlist | undefined, SeedTrace.UpdatePlaylistRequest | undefined, never>, res: {
        send: (responseBody: SeedTrace.Playlist | undefined) => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
    deletePlaylist(req: express.Request<{
        serviceParam: number;
        playlist_id: serializers.PlaylistId.Raw;
    }, never, never, never>, res: {
        send: () => Promise<void>;
        cookie: (cookie: string, value: string, options?: express.CookieOptions) => void;
        locals: any;
    }): void | Promise<void>;
}
export declare class PlaylistService {
    private readonly methods;
    private router;
    constructor(methods: PlaylistServiceMethods, middleware?: express.RequestHandler[]);
    addMiddleware(handler: express.RequestHandler): this;
    toRouter(): express.Router;
}
