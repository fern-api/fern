/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedTrace from "../../../../api/index";
import * as core from "../../../../core";

export const TestSubmissionStatus: core.serialization.Schema<
    serializers.TestSubmissionStatus.Raw,
    SeedTrace.TestSubmissionStatus
> = core.serialization
    .union("type", {
        stopped: core.serialization.object({}),
        errored: core.serialization.object({
            value: core.serialization.lazy(() => serializers.ErrorInfo),
        }),
        running: core.serialization.object({
            value: core.serialization.lazy(() => serializers.RunningSubmissionState),
        }),
        testCaseIdToState: core.serialization.object({
            value: core.serialization.record(
                core.serialization.string(),
                core.serialization.lazy(() => serializers.SubmissionStatusForTestCase),
            ),
        }),
    })
    .transform<SeedTrace.TestSubmissionStatus>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace TestSubmissionStatus {
    export type Raw =
        | TestSubmissionStatus.Stopped
        | TestSubmissionStatus.Errored
        | TestSubmissionStatus.Running
        | TestSubmissionStatus.TestCaseIdToState;

    export interface Stopped {
        type: "stopped";
    }

    export interface Errored {
        type: "errored";
        value: serializers.ErrorInfo.Raw;
    }

    export interface Running {
        type: "running";
        value: serializers.RunningSubmissionState.Raw;
    }

    export interface TestCaseIdToState {
        type: "testCaseIdToState";
        value: Record<string, serializers.SubmissionStatusForTestCase.Raw>;
    }
}
