/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedTrace from "../../../../api/index";
import * as core from "../../../../core";

export const SubmissionResponse: core.serialization.Schema<
    serializers.SubmissionResponse.Raw,
    SeedTrace.SubmissionResponse
> = core.serialization
    .union("type", {
        serverInitialized: core.serialization.object({}),
        problemInitialized: core.serialization.object({
            value: core.serialization.lazy(() => serializers.ProblemId),
        }),
        workspaceInitialized: core.serialization.object({}),
        serverErrored: core.serialization.lazyObject(() => serializers.ExceptionInfo),
        codeExecutionUpdate: core.serialization.object({
            value: core.serialization.lazy(() => serializers.CodeExecutionUpdate),
        }),
        terminated: core.serialization.lazyObject(() => serializers.TerminatedResponse),
    })
    .transform<SeedTrace.SubmissionResponse>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SubmissionResponse {
    export type Raw =
        | SubmissionResponse.ServerInitialized
        | SubmissionResponse.ProblemInitialized
        | SubmissionResponse.WorkspaceInitialized
        | SubmissionResponse.ServerErrored
        | SubmissionResponse.CodeExecutionUpdate
        | SubmissionResponse.Terminated;

    export interface ServerInitialized {
        type: "serverInitialized";
    }

    export interface ProblemInitialized {
        type: "problemInitialized";
        value: serializers.ProblemId.Raw;
    }

    export interface WorkspaceInitialized {
        type: "workspaceInitialized";
    }

    export interface ServerErrored extends serializers.ExceptionInfo.Raw {
        type: "serverErrored";
    }

    export interface CodeExecutionUpdate {
        type: "codeExecutionUpdate";
        value: serializers.CodeExecutionUpdate.Raw;
    }

    export interface Terminated extends serializers.TerminatedResponse.Raw {
        type: "terminated";
    }
}
