/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as serializers from "../../..";
import * as SeedTrace from "../../../../api";
import * as core from "../../../../core";
export declare const SubmissionResponse: core.serialization.Schema<serializers.SubmissionResponse.Raw, SeedTrace.SubmissionResponse>;
export declare namespace SubmissionResponse {
    type Raw = SubmissionResponse.ServerInitialized | SubmissionResponse.ProblemInitialized | SubmissionResponse.WorkspaceInitialized | SubmissionResponse.ServerErrored | SubmissionResponse.CodeExecutionUpdate | SubmissionResponse.Terminated;
    interface ServerInitialized {
        type: "serverInitialized";
    }
    interface ProblemInitialized {
        type: "problemInitialized";
        value: serializers.ProblemId.Raw;
    }
    interface WorkspaceInitialized {
        type: "workspaceInitialized";
    }
    interface ServerErrored extends serializers.ExceptionInfo.Raw {
        type: "serverErrored";
    }
    interface CodeExecutionUpdate {
        type: "codeExecutionUpdate";
        value: serializers.CodeExecutionUpdate.Raw;
    }
    interface Terminated extends serializers.TerminatedResponse.Raw {
        type: "terminated";
    }
}
