/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = User.Builder.class
)
public final class User implements IUser {
  private final String id;

  private final String email;

  private final String password;

  private final UserProfile profile;

  private User(String id, String email, String password, UserProfile profile) {
    this.id = id;
    this.email = email;
    this.password = password;
    this.profile = profile;
  }

  /**
   * @return The unique identifier for the user.
   */
  @JsonProperty("id")
  @java.lang.Override
  public String getId() {
    return id;
  }

  /**
   * @return The email address of the user.
   */
  @JsonProperty("email")
  @java.lang.Override
  public String getEmail() {
    return email;
  }

  /**
   * @return The password for the user.
   */
  @JsonProperty("password")
  @java.lang.Override
  public String getPassword() {
    return password;
  }

  /**
   * @return User profile object
   */
  @JsonProperty("profile")
  @java.lang.Override
  public UserProfile getProfile() {
    return profile;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof User && equalTo((User) other);
  }

  private boolean equalTo(User other) {
    return id.equals(other.id) && email.equals(other.email) && password.equals(other.password) && profile.equals(other.profile);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.email, this.password, this.profile);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    /**
     * <p>The unique identifier for the user.</p>
     */
    EmailStage id(@NotNull String id);

    Builder from(User other);
  }

  public interface EmailStage {
    /**
     * <p>The email address of the user.</p>
     */
    PasswordStage email(@NotNull String email);
  }

  public interface PasswordStage {
    /**
     * <p>The password for the user.</p>
     */
    ProfileStage password(@NotNull String password);
  }

  public interface ProfileStage {
    /**
     * <p>User profile object</p>
     */
    _FinalStage profile(@NotNull UserProfile profile);
  }

  public interface _FinalStage {
    User build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, EmailStage, PasswordStage, ProfileStage, _FinalStage {
    private String id;

    private String email;

    private String password;

    private UserProfile profile;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(User other) {
      id(other.getId());
      email(other.getEmail());
      password(other.getPassword());
      profile(other.getProfile());
      return this;
    }

    /**
     * <p>The unique identifier for the user.</p>
     * <p>The unique identifier for the user.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("id")
    public EmailStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    /**
     * <p>The email address of the user.</p>
     * <p>The email address of the user.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("email")
    public PasswordStage email(@NotNull String email) {
      this.email = Objects.requireNonNull(email, "email must not be null");
      return this;
    }

    /**
     * <p>The password for the user.</p>
     * <p>The password for the user.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("password")
    public ProfileStage password(@NotNull String password) {
      this.password = Objects.requireNonNull(password, "password must not be null");
      return this;
    }

    /**
     * <p>User profile object</p>
     * <p>User profile object</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("profile")
    public _FinalStage profile(@NotNull UserProfile profile) {
      this.profile = Objects.requireNonNull(profile, "profile must not be null");
      return this;
    }

    @java.lang.Override
    public User build() {
      return new User(id, email, password, profile);
    }
  }
}
