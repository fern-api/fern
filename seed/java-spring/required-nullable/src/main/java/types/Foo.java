/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.Nullable;
import core.NullableNonemptyFilter;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Foo.Builder.class
)
public final class Foo {
  private final Optional<String> bar;

  private final Optional<String> nullableBar;

  private final Optional<String> nullableRequiredBar;

  private final String requiredBar;

  private Foo(Optional<String> bar, Optional<String> nullableBar,
      Optional<String> nullableRequiredBar, String requiredBar) {
    this.bar = bar;
    this.nullableBar = nullableBar;
    this.nullableRequiredBar = nullableRequiredBar;
    this.requiredBar = requiredBar;
  }

  @JsonProperty("bar")
  public Optional<String> getBar() {
    return bar;
  }

  @JsonProperty("nullable_bar")
  public Optional<String> getNullableBar() {
    return nullableBar;
  }

  @JsonIgnore
  public Optional<String> getNullableRequiredBar() {
    if (nullableRequiredBar == null) {
      return Optional.empty();
    }
    return nullableRequiredBar;
  }

  @JsonProperty("required_bar")
  public String getRequiredBar() {
    return requiredBar;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("nullable_required_bar")
  private Optional<String> _getNullableRequiredBar() {
    return nullableRequiredBar;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Foo && equalTo((Foo) other);
  }

  private boolean equalTo(Foo other) {
    return bar.equals(other.bar) && nullableBar.equals(other.nullableBar) && nullableRequiredBar.equals(other.nullableRequiredBar) && requiredBar.equals(other.requiredBar);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.bar, this.nullableBar, this.nullableRequiredBar, this.requiredBar);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static RequiredBarStage builder() {
    return new Builder();
  }

  public interface RequiredBarStage {
    _FinalStage requiredBar(@NotNull String requiredBar);

    Builder from(Foo other);
  }

  public interface _FinalStage {
    Foo build();

    _FinalStage bar(Optional<String> bar);

    _FinalStage bar(String bar);

    _FinalStage nullableBar(Optional<String> nullableBar);

    _FinalStage nullableBar(String nullableBar);

    _FinalStage nullableRequiredBar(Optional<String> nullableRequiredBar);

    _FinalStage nullableRequiredBar(String nullableRequiredBar);

    _FinalStage nullableRequiredBar(Nullable<String> nullableRequiredBar);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements RequiredBarStage, _FinalStage {
    private String requiredBar;

    private Optional<String> nullableRequiredBar = Optional.empty();

    private Optional<String> nullableBar = Optional.empty();

    private Optional<String> bar = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(Foo other) {
      bar(other.getBar());
      nullableBar(other.getNullableBar());
      nullableRequiredBar(other.getNullableRequiredBar());
      requiredBar(other.getRequiredBar());
      return this;
    }

    @java.lang.Override
    @JsonSetter("required_bar")
    public _FinalStage requiredBar(@NotNull String requiredBar) {
      this.requiredBar = Objects.requireNonNull(requiredBar, "requiredBar must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableRequiredBar(Nullable<String> nullableRequiredBar) {
      if (nullableRequiredBar.isNull()) {
        this.nullableRequiredBar = null;
      }
      else if (nullableRequiredBar.isEmpty()) {
        this.nullableRequiredBar = Optional.empty();
      }
      else {
        this.nullableRequiredBar = Optional.of(nullableRequiredBar.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableRequiredBar(String nullableRequiredBar) {
      this.nullableRequiredBar = Optional.ofNullable(nullableRequiredBar);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullable_required_bar",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableRequiredBar(Optional<String> nullableRequiredBar) {
      this.nullableRequiredBar = nullableRequiredBar;
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableBar(String nullableBar) {
      this.nullableBar = Optional.ofNullable(nullableBar);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullable_bar",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableBar(Optional<String> nullableBar) {
      this.nullableBar = nullableBar;
      return this;
    }

    @java.lang.Override
    public _FinalStage bar(String bar) {
      this.bar = Optional.ofNullable(bar);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "bar",
        nulls = Nulls.SKIP
    )
    public _FinalStage bar(Optional<String> bar) {
      this.bar = bar;
      return this;
    }

    @java.lang.Override
    public Foo build() {
      return new Foo(bar, nullableBar, nullableRequiredBar, requiredBar);
    }
  }
}
