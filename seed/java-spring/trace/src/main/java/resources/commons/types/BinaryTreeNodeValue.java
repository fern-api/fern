/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.commons.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = BinaryTreeNodeValue.Builder.class
)
public final class BinaryTreeNodeValue {
  private final NodeId nodeId;

  private final double val;

  private final Optional<NodeId> right;

  private final Optional<NodeId> left;

  private BinaryTreeNodeValue(NodeId nodeId, double val, Optional<NodeId> right,
      Optional<NodeId> left) {
    this.nodeId = nodeId;
    this.val = val;
    this.right = right;
    this.left = left;
  }

  @JsonProperty("nodeId")
  public NodeId getNodeId() {
    return nodeId;
  }

  @JsonProperty("val")
  public double getVal() {
    return val;
  }

  @JsonProperty("right")
  public Optional<NodeId> getRight() {
    return right;
  }

  @JsonProperty("left")
  public Optional<NodeId> getLeft() {
    return left;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BinaryTreeNodeValue && equalTo((BinaryTreeNodeValue) other);
  }

  private boolean equalTo(BinaryTreeNodeValue other) {
    return nodeId.equals(other.nodeId) && val == other.val && right.equals(other.right) && left.equals(other.left);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.nodeId, this.val, this.right, this.left);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static NodeIdStage builder() {
    return new Builder();
  }

  public interface NodeIdStage {
    ValStage nodeId(@NotNull NodeId nodeId);

    Builder from(BinaryTreeNodeValue other);
  }

  public interface ValStage {
    _FinalStage val(double val);
  }

  public interface _FinalStage {
    BinaryTreeNodeValue build();

    _FinalStage right(Optional<NodeId> right);

    _FinalStage right(NodeId right);

    _FinalStage left(Optional<NodeId> left);

    _FinalStage left(NodeId left);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements NodeIdStage, ValStage, _FinalStage {
    private NodeId nodeId;

    private double val;

    private Optional<NodeId> left = Optional.empty();

    private Optional<NodeId> right = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(BinaryTreeNodeValue other) {
      nodeId(other.getNodeId());
      val(other.getVal());
      right(other.getRight());
      left(other.getLeft());
      return this;
    }

    @java.lang.Override
    @JsonSetter("nodeId")
    public ValStage nodeId(@NotNull NodeId nodeId) {
      this.nodeId = Objects.requireNonNull(nodeId, "nodeId must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("val")
    public _FinalStage val(double val) {
      this.val = val;
      return this;
    }

    @java.lang.Override
    public _FinalStage left(NodeId left) {
      this.left = Optional.ofNullable(left);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "left",
        nulls = Nulls.SKIP
    )
    public _FinalStage left(Optional<NodeId> left) {
      this.left = left;
      return this;
    }

    @java.lang.Override
    public _FinalStage right(NodeId right) {
      this.right = Optional.ofNullable(right);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "right",
        nulls = Nulls.SKIP
    )
    public _FinalStage right(Optional<NodeId> right) {
      this.right = right;
      return this;
    }

    @java.lang.Override
    public BinaryTreeNodeValue build() {
      return new BinaryTreeNodeValue(nodeId, val, right, left);
    }
  }
}
