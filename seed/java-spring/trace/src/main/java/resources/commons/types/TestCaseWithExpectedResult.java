/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.commons.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TestCaseWithExpectedResult.Builder.class
)
public final class TestCaseWithExpectedResult {
  private final TestCase testCase;

  private final VariableValue expectedResult;

  private TestCaseWithExpectedResult(TestCase testCase, VariableValue expectedResult) {
    this.testCase = testCase;
    this.expectedResult = expectedResult;
  }

  @JsonProperty("testCase")
  public TestCase getTestCase() {
    return testCase;
  }

  @JsonProperty("expectedResult")
  public VariableValue getExpectedResult() {
    return expectedResult;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TestCaseWithExpectedResult && equalTo((TestCaseWithExpectedResult) other);
  }

  private boolean equalTo(TestCaseWithExpectedResult other) {
    return testCase.equals(other.testCase) && expectedResult.equals(other.expectedResult);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.testCase, this.expectedResult);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TestCaseStage builder() {
    return new Builder();
  }

  public interface TestCaseStage {
    ExpectedResultStage testCase(@NotNull TestCase testCase);

    Builder from(TestCaseWithExpectedResult other);
  }

  public interface ExpectedResultStage {
    _FinalStage expectedResult(@NotNull VariableValue expectedResult);
  }

  public interface _FinalStage {
    TestCaseWithExpectedResult build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TestCaseStage, ExpectedResultStage, _FinalStage {
    private TestCase testCase;

    private VariableValue expectedResult;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(TestCaseWithExpectedResult other) {
      testCase(other.getTestCase());
      expectedResult(other.getExpectedResult());
      return this;
    }

    @java.lang.Override
    @JsonSetter("testCase")
    public ExpectedResultStage testCase(@NotNull TestCase testCase) {
      this.testCase = Objects.requireNonNull(testCase, "testCase must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("expectedResult")
    public _FinalStage expectedResult(@NotNull VariableValue expectedResult) {
      this.expectedResult = Objects.requireNonNull(expectedResult, "expectedResult must not be null");
      return this;
    }

    @java.lang.Override
    public TestCaseWithExpectedResult build() {
      return new TestCaseWithExpectedResult(testCase, expectedResult);
    }
  }
}
