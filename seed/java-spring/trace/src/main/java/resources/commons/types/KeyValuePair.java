/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.commons.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = KeyValuePair.Builder.class
)
public final class KeyValuePair {
  private final VariableValue key;

  private final VariableValue value;

  private KeyValuePair(VariableValue key, VariableValue value) {
    this.key = key;
    this.value = value;
  }

  @JsonProperty("key")
  public VariableValue getKey() {
    return key;
  }

  @JsonProperty("value")
  public VariableValue getValue() {
    return value;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof KeyValuePair && equalTo((KeyValuePair) other);
  }

  private boolean equalTo(KeyValuePair other) {
    return key.equals(other.key) && value.equals(other.value);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.key, this.value);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static KeyStage builder() {
    return new Builder();
  }

  public interface KeyStage {
    ValueStage key(@NotNull VariableValue key);

    Builder from(KeyValuePair other);
  }

  public interface ValueStage {
    _FinalStage value(@NotNull VariableValue value);
  }

  public interface _FinalStage {
    KeyValuePair build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements KeyStage, ValueStage, _FinalStage {
    private VariableValue key;

    private VariableValue value;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(KeyValuePair other) {
      key(other.getKey());
      value(other.getValue());
      return this;
    }

    @java.lang.Override
    @JsonSetter("key")
    public ValueStage key(@NotNull VariableValue key) {
      this.key = Objects.requireNonNull(key, "key must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("value")
    public _FinalStage value(@NotNull VariableValue value) {
      this.value = Objects.requireNonNull(value, "value must not be null");
      return this;
    }

    @java.lang.Override
    public KeyValuePair build() {
      return new KeyValuePair(key, value);
    }
  }
}
