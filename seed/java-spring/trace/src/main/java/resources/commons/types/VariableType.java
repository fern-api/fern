/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.commons.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class VariableType {
  private final Value value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private VariableType(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static VariableType integerType() {
    return new VariableType(new IntegerTypeValue());
  }

  public static VariableType doubleType() {
    return new VariableType(new DoubleTypeValue());
  }

  public static VariableType booleanType() {
    return new VariableType(new BooleanTypeValue());
  }

  public static VariableType stringType() {
    return new VariableType(new StringTypeValue());
  }

  public static VariableType charType() {
    return new VariableType(new CharTypeValue());
  }

  public static VariableType listType(ListType value) {
    return new VariableType(new ListTypeValue(value));
  }

  public static VariableType mapType(MapType value) {
    return new VariableType(new MapTypeValue(value));
  }

  public static VariableType binaryTreeType() {
    return new VariableType(new BinaryTreeTypeValue());
  }

  public static VariableType singlyLinkedListType() {
    return new VariableType(new SinglyLinkedListTypeValue());
  }

  public static VariableType doublyLinkedListType() {
    return new VariableType(new DoublyLinkedListTypeValue());
  }

  public boolean isIntegerType() {
    return value instanceof IntegerTypeValue;
  }

  public boolean isDoubleType() {
    return value instanceof DoubleTypeValue;
  }

  public boolean isBooleanType() {
    return value instanceof BooleanTypeValue;
  }

  public boolean isStringType() {
    return value instanceof StringTypeValue;
  }

  public boolean isCharType() {
    return value instanceof CharTypeValue;
  }

  public boolean isListType() {
    return value instanceof ListTypeValue;
  }

  public boolean isMapType() {
    return value instanceof MapTypeValue;
  }

  public boolean isBinaryTreeType() {
    return value instanceof BinaryTreeTypeValue;
  }

  public boolean isSinglyLinkedListType() {
    return value instanceof SinglyLinkedListTypeValue;
  }

  public boolean isDoublyLinkedListType() {
    return value instanceof DoublyLinkedListTypeValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<ListType> getListType() {
    if (isListType()) {
      return Optional.of(((ListTypeValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<MapType> getMapType() {
    if (isMapType()) {
      return Optional.of(((MapTypeValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitIntegerType();

    T visitDoubleType();

    T visitBooleanType();

    T visitStringType();

    T visitCharType();

    T visitListType(ListType listType);

    T visitMapType(MapType mapType);

    T visitBinaryTreeType();

    T visitSinglyLinkedListType();

    T visitDoublyLinkedListType();

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "type",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(IntegerTypeValue.class),
      @JsonSubTypes.Type(DoubleTypeValue.class),
      @JsonSubTypes.Type(BooleanTypeValue.class),
      @JsonSubTypes.Type(StringTypeValue.class),
      @JsonSubTypes.Type(CharTypeValue.class),
      @JsonSubTypes.Type(ListTypeValue.class),
      @JsonSubTypes.Type(MapTypeValue.class),
      @JsonSubTypes.Type(BinaryTreeTypeValue.class),
      @JsonSubTypes.Type(SinglyLinkedListTypeValue.class),
      @JsonSubTypes.Type(DoublyLinkedListTypeValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("integerType")
  @JsonIgnoreProperties("type")
  private static final class IntegerTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private IntegerTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitIntegerType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof IntegerTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonTypeName("doubleType")
  @JsonIgnoreProperties("type")
  private static final class DoubleTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DoubleTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDoubleType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DoubleTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonTypeName("booleanType")
  @JsonIgnoreProperties("type")
  private static final class BooleanTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private BooleanTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitBooleanType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof BooleanTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonTypeName("stringType")
  @JsonIgnoreProperties("type")
  private static final class StringTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private StringTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitStringType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof StringTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonTypeName("charType")
  @JsonIgnoreProperties("type")
  private static final class CharTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private CharTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitCharType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof CharTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonTypeName("listType")
  @JsonIgnoreProperties("type")
  private static final class ListTypeValue implements Value {
    @JsonUnwrapped
    private ListType value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ListTypeValue() {
    }

    private ListTypeValue(ListType value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitListType(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ListTypeValue && equalTo((ListTypeValue) other);
    }

    private boolean equalTo(ListTypeValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("mapType")
  @JsonIgnoreProperties("type")
  private static final class MapTypeValue implements Value {
    @JsonUnwrapped
    private MapType value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private MapTypeValue() {
    }

    private MapTypeValue(MapType value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitMapType(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof MapTypeValue && equalTo((MapTypeValue) other);
    }

    private boolean equalTo(MapTypeValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("binaryTreeType")
  @JsonIgnoreProperties("type")
  private static final class BinaryTreeTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private BinaryTreeTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitBinaryTreeType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof BinaryTreeTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonTypeName("singlyLinkedListType")
  @JsonIgnoreProperties("type")
  private static final class SinglyLinkedListTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private SinglyLinkedListTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitSinglyLinkedListType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof SinglyLinkedListTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonTypeName("doublyLinkedListType")
  @JsonIgnoreProperties("type")
  private static final class DoublyLinkedListTypeValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DoublyLinkedListTypeValue() {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDoublyLinkedListType();
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DoublyLinkedListTypeValue;
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "}";
    }
  }

  @JsonIgnoreProperties("type")
  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @java.lang.Override
    public String toString() {
      return "VariableType{" + "type: " + type + ", value: " + value + "}";
    }
  }
}
