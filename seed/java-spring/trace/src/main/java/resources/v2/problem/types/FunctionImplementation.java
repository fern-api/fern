/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.v2.problem.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = FunctionImplementation.Builder.class
)
public final class FunctionImplementation {
  private final String impl;

  private final Optional<String> imports;

  private FunctionImplementation(String impl, Optional<String> imports) {
    this.impl = impl;
    this.imports = imports;
  }

  @JsonProperty("impl")
  public String getImpl() {
    return impl;
  }

  @JsonProperty("imports")
  public Optional<String> getImports() {
    return imports;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof FunctionImplementation && equalTo((FunctionImplementation) other);
  }

  private boolean equalTo(FunctionImplementation other) {
    return impl.equals(other.impl) && imports.equals(other.imports);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.impl, this.imports);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static ImplStage builder() {
    return new Builder();
  }

  public interface ImplStage {
    _FinalStage impl(@NotNull String impl);

    Builder from(FunctionImplementation other);
  }

  public interface _FinalStage {
    FunctionImplementation build();

    _FinalStage imports(Optional<String> imports);

    _FinalStage imports(String imports);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ImplStage, _FinalStage {
    private String impl;

    private Optional<String> imports = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(FunctionImplementation other) {
      impl(other.getImpl());
      imports(other.getImports());
      return this;
    }

    @java.lang.Override
    @JsonSetter("impl")
    public _FinalStage impl(@NotNull String impl) {
      this.impl = Objects.requireNonNull(impl, "impl must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage imports(String imports) {
      this.imports = Optional.ofNullable(imports);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "imports",
        nulls = Nulls.SKIP
    )
    public _FinalStage imports(Optional<String> imports) {
      this.imports = imports;
      return this;
    }

    @java.lang.Override
    public FunctionImplementation build() {
      return new FunctionImplementation(impl, imports);
    }
  }
}
