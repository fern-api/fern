/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.v2.v3.problem.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = NonVoidFunctionDefinition.Builder.class
)
public final class NonVoidFunctionDefinition {
  private final NonVoidFunctionSignature signature;

  private final FunctionImplementationForMultipleLanguages code;

  private NonVoidFunctionDefinition(NonVoidFunctionSignature signature,
      FunctionImplementationForMultipleLanguages code) {
    this.signature = signature;
    this.code = code;
  }

  @JsonProperty("signature")
  public NonVoidFunctionSignature getSignature() {
    return signature;
  }

  @JsonProperty("code")
  public FunctionImplementationForMultipleLanguages getCode() {
    return code;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof NonVoidFunctionDefinition && equalTo((NonVoidFunctionDefinition) other);
  }

  private boolean equalTo(NonVoidFunctionDefinition other) {
    return signature.equals(other.signature) && code.equals(other.code);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.signature, this.code);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static SignatureStage builder() {
    return new Builder();
  }

  public interface SignatureStage {
    CodeStage signature(@NotNull NonVoidFunctionSignature signature);

    Builder from(NonVoidFunctionDefinition other);
  }

  public interface CodeStage {
    _FinalStage code(@NotNull FunctionImplementationForMultipleLanguages code);
  }

  public interface _FinalStage {
    NonVoidFunctionDefinition build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements SignatureStage, CodeStage, _FinalStage {
    private NonVoidFunctionSignature signature;

    private FunctionImplementationForMultipleLanguages code;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(NonVoidFunctionDefinition other) {
      signature(other.getSignature());
      code(other.getCode());
      return this;
    }

    @java.lang.Override
    @JsonSetter("signature")
    public CodeStage signature(@NotNull NonVoidFunctionSignature signature) {
      this.signature = Objects.requireNonNull(signature, "signature must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("code")
    public _FinalStage code(@NotNull FunctionImplementationForMultipleLanguages code) {
      this.code = Objects.requireNonNull(code, "code must not be null");
      return this;
    }

    @java.lang.Override
    public NonVoidFunctionDefinition build() {
      return new NonVoidFunctionDefinition(signature, code);
    }
  }
}
