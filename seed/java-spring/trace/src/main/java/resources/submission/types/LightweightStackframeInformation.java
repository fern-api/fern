/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.submission.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = LightweightStackframeInformation.Builder.class
)
public final class LightweightStackframeInformation {
  private final int numStackFrames;

  private final String topStackFrameMethodName;

  private LightweightStackframeInformation(int numStackFrames, String topStackFrameMethodName) {
    this.numStackFrames = numStackFrames;
    this.topStackFrameMethodName = topStackFrameMethodName;
  }

  @JsonProperty("numStackFrames")
  public int getNumStackFrames() {
    return numStackFrames;
  }

  @JsonProperty("topStackFrameMethodName")
  public String getTopStackFrameMethodName() {
    return topStackFrameMethodName;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof LightweightStackframeInformation && equalTo((LightweightStackframeInformation) other);
  }

  private boolean equalTo(LightweightStackframeInformation other) {
    return numStackFrames == other.numStackFrames && topStackFrameMethodName.equals(other.topStackFrameMethodName);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.numStackFrames, this.topStackFrameMethodName);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static NumStackFramesStage builder() {
    return new Builder();
  }

  public interface NumStackFramesStage {
    TopStackFrameMethodNameStage numStackFrames(int numStackFrames);

    Builder from(LightweightStackframeInformation other);
  }

  public interface TopStackFrameMethodNameStage {
    _FinalStage topStackFrameMethodName(@NotNull String topStackFrameMethodName);
  }

  public interface _FinalStage {
    LightweightStackframeInformation build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements NumStackFramesStage, TopStackFrameMethodNameStage, _FinalStage {
    private int numStackFrames;

    private String topStackFrameMethodName;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(LightweightStackframeInformation other) {
      numStackFrames(other.getNumStackFrames());
      topStackFrameMethodName(other.getTopStackFrameMethodName());
      return this;
    }

    @java.lang.Override
    @JsonSetter("numStackFrames")
    public TopStackFrameMethodNameStage numStackFrames(int numStackFrames) {
      this.numStackFrames = numStackFrames;
      return this;
    }

    @java.lang.Override
    @JsonSetter("topStackFrameMethodName")
    public _FinalStage topStackFrameMethodName(@NotNull String topStackFrameMethodName) {
      this.topStackFrameMethodName = Objects.requireNonNull(topStackFrameMethodName, "topStackFrameMethodName must not be null");
      return this;
    }

    @java.lang.Override
    public LightweightStackframeInformation build() {
      return new LightweightStackframeInformation(numStackFrames, topStackFrameMethodName);
    }
  }
}
