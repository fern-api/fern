/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.submission.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;
import resources.commons.types.Language;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UnexpectedLanguageError.Builder.class
)
public final class UnexpectedLanguageError {
  private final Language expectedLanguage;

  private final Language actualLanguage;

  private UnexpectedLanguageError(Language expectedLanguage, Language actualLanguage) {
    this.expectedLanguage = expectedLanguage;
    this.actualLanguage = actualLanguage;
  }

  @JsonProperty("expectedLanguage")
  public Language getExpectedLanguage() {
    return expectedLanguage;
  }

  @JsonProperty("actualLanguage")
  public Language getActualLanguage() {
    return actualLanguage;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UnexpectedLanguageError && equalTo((UnexpectedLanguageError) other);
  }

  private boolean equalTo(UnexpectedLanguageError other) {
    return expectedLanguage.equals(other.expectedLanguage) && actualLanguage.equals(other.actualLanguage);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.expectedLanguage, this.actualLanguage);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static ExpectedLanguageStage builder() {
    return new Builder();
  }

  public interface ExpectedLanguageStage {
    ActualLanguageStage expectedLanguage(@NotNull Language expectedLanguage);

    Builder from(UnexpectedLanguageError other);
  }

  public interface ActualLanguageStage {
    _FinalStage actualLanguage(@NotNull Language actualLanguage);
  }

  public interface _FinalStage {
    UnexpectedLanguageError build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ExpectedLanguageStage, ActualLanguageStage, _FinalStage {
    private Language expectedLanguage;

    private Language actualLanguage;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(UnexpectedLanguageError other) {
      expectedLanguage(other.getExpectedLanguage());
      actualLanguage(other.getActualLanguage());
      return this;
    }

    @java.lang.Override
    @JsonSetter("expectedLanguage")
    public ActualLanguageStage expectedLanguage(@NotNull Language expectedLanguage) {
      this.expectedLanguage = Objects.requireNonNull(expectedLanguage, "expectedLanguage must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("actualLanguage")
    public _FinalStage actualLanguage(@NotNull Language actualLanguage) {
      this.actualLanguage = Objects.requireNonNull(actualLanguage, "actualLanguage must not be null");
      return this;
    }

    @java.lang.Override
    public UnexpectedLanguageError build() {
      return new UnexpectedLanguageError(expectedLanguage, actualLanguage);
    }
  }
}
