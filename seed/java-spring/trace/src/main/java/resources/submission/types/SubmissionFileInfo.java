/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.submission.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = SubmissionFileInfo.Builder.class
)
public final class SubmissionFileInfo {
  private final String directory;

  private final String filename;

  private final String contents;

  private SubmissionFileInfo(String directory, String filename, String contents) {
    this.directory = directory;
    this.filename = filename;
    this.contents = contents;
  }

  @JsonProperty("directory")
  public String getDirectory() {
    return directory;
  }

  @JsonProperty("filename")
  public String getFilename() {
    return filename;
  }

  @JsonProperty("contents")
  public String getContents() {
    return contents;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SubmissionFileInfo && equalTo((SubmissionFileInfo) other);
  }

  private boolean equalTo(SubmissionFileInfo other) {
    return directory.equals(other.directory) && filename.equals(other.filename) && contents.equals(other.contents);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.directory, this.filename, this.contents);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static DirectoryStage builder() {
    return new Builder();
  }

  public interface DirectoryStage {
    FilenameStage directory(@NotNull String directory);

    Builder from(SubmissionFileInfo other);
  }

  public interface FilenameStage {
    ContentsStage filename(@NotNull String filename);
  }

  public interface ContentsStage {
    _FinalStage contents(@NotNull String contents);
  }

  public interface _FinalStage {
    SubmissionFileInfo build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DirectoryStage, FilenameStage, ContentsStage, _FinalStage {
    private String directory;

    private String filename;

    private String contents;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(SubmissionFileInfo other) {
      directory(other.getDirectory());
      filename(other.getFilename());
      contents(other.getContents());
      return this;
    }

    @java.lang.Override
    @JsonSetter("directory")
    public FilenameStage directory(@NotNull String directory) {
      this.directory = Objects.requireNonNull(directory, "directory must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("filename")
    public ContentsStage filename(@NotNull String filename) {
      this.filename = Objects.requireNonNull(filename, "filename must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("contents")
    public _FinalStage contents(@NotNull String contents) {
      this.contents = Objects.requireNonNull(contents, "contents must not be null");
      return this;
    }

    @java.lang.Override
    public SubmissionFileInfo build() {
      return new SubmissionFileInfo(directory, filename, contents);
    }
  }
}
