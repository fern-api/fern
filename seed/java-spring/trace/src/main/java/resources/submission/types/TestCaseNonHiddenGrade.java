/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.submission.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import resources.commons.types.VariableValue;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TestCaseNonHiddenGrade.Builder.class
)
public final class TestCaseNonHiddenGrade {
  private final boolean passed;

  private final Optional<VariableValue> actualResult;

  private final Optional<ExceptionV2> exception;

  private final String stdout;

  private TestCaseNonHiddenGrade(boolean passed, Optional<VariableValue> actualResult,
      Optional<ExceptionV2> exception, String stdout) {
    this.passed = passed;
    this.actualResult = actualResult;
    this.exception = exception;
    this.stdout = stdout;
  }

  @JsonProperty("passed")
  public boolean getPassed() {
    return passed;
  }

  @JsonProperty("actualResult")
  public Optional<VariableValue> getActualResult() {
    return actualResult;
  }

  @JsonProperty("exception")
  public Optional<ExceptionV2> getException() {
    return exception;
  }

  @JsonProperty("stdout")
  public String getStdout() {
    return stdout;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TestCaseNonHiddenGrade && equalTo((TestCaseNonHiddenGrade) other);
  }

  private boolean equalTo(TestCaseNonHiddenGrade other) {
    return passed == other.passed && actualResult.equals(other.actualResult) && exception.equals(other.exception) && stdout.equals(other.stdout);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.passed, this.actualResult, this.exception, this.stdout);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static PassedStage builder() {
    return new Builder();
  }

  public interface PassedStage {
    StdoutStage passed(boolean passed);

    Builder from(TestCaseNonHiddenGrade other);
  }

  public interface StdoutStage {
    _FinalStage stdout(@NotNull String stdout);
  }

  public interface _FinalStage {
    TestCaseNonHiddenGrade build();

    _FinalStage actualResult(Optional<VariableValue> actualResult);

    _FinalStage actualResult(VariableValue actualResult);

    _FinalStage exception(Optional<ExceptionV2> exception);

    _FinalStage exception(ExceptionV2 exception);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements PassedStage, StdoutStage, _FinalStage {
    private boolean passed;

    private String stdout;

    private Optional<ExceptionV2> exception = Optional.empty();

    private Optional<VariableValue> actualResult = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(TestCaseNonHiddenGrade other) {
      passed(other.getPassed());
      actualResult(other.getActualResult());
      exception(other.getException());
      stdout(other.getStdout());
      return this;
    }

    @java.lang.Override
    @JsonSetter("passed")
    public StdoutStage passed(boolean passed) {
      this.passed = passed;
      return this;
    }

    @java.lang.Override
    @JsonSetter("stdout")
    public _FinalStage stdout(@NotNull String stdout) {
      this.stdout = Objects.requireNonNull(stdout, "stdout must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage exception(ExceptionV2 exception) {
      this.exception = Optional.ofNullable(exception);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "exception",
        nulls = Nulls.SKIP
    )
    public _FinalStage exception(Optional<ExceptionV2> exception) {
      this.exception = exception;
      return this;
    }

    @java.lang.Override
    public _FinalStage actualResult(VariableValue actualResult) {
      this.actualResult = Optional.ofNullable(actualResult);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "actualResult",
        nulls = Nulls.SKIP
    )
    public _FinalStage actualResult(Optional<VariableValue> actualResult) {
      this.actualResult = actualResult;
      return this;
    }

    @java.lang.Override
    public TestCaseNonHiddenGrade build() {
      return new TestCaseNonHiddenGrade(passed, actualResult, exception, stdout);
    }
  }
}
