/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.submission.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = RuntimeError.Builder.class
)
public final class RuntimeError {
  private final String message;

  private RuntimeError(String message) {
    this.message = message;
  }

  @JsonProperty("message")
  public String getMessage() {
    return message;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof RuntimeError && equalTo((RuntimeError) other);
  }

  private boolean equalTo(RuntimeError other) {
    return message.equals(other.message);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.message);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static MessageStage builder() {
    return new Builder();
  }

  public interface MessageStage {
    _FinalStage message(@NotNull String message);

    Builder from(RuntimeError other);
  }

  public interface _FinalStage {
    RuntimeError build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements MessageStage, _FinalStage {
    private String message;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(RuntimeError other) {
      message(other.getMessage());
      return this;
    }

    @java.lang.Override
    @JsonSetter("message")
    public _FinalStage message(@NotNull String message) {
      this.message = Objects.requireNonNull(message, "message must not be null");
      return this;
    }

    @java.lang.Override
    public RuntimeError build() {
      return new RuntimeError(message);
    }
  }
}
