/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.submission.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;
import resources.commons.types.FileInfo;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = WorkspaceFiles.Builder.class
)
public final class WorkspaceFiles {
  private final FileInfo mainFile;

  private final List<FileInfo> readOnlyFiles;

  private WorkspaceFiles(FileInfo mainFile, List<FileInfo> readOnlyFiles) {
    this.mainFile = mainFile;
    this.readOnlyFiles = readOnlyFiles;
  }

  @JsonProperty("mainFile")
  public FileInfo getMainFile() {
    return mainFile;
  }

  @JsonProperty("readOnlyFiles")
  public List<FileInfo> getReadOnlyFiles() {
    return readOnlyFiles;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WorkspaceFiles && equalTo((WorkspaceFiles) other);
  }

  private boolean equalTo(WorkspaceFiles other) {
    return mainFile.equals(other.mainFile) && readOnlyFiles.equals(other.readOnlyFiles);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.mainFile, this.readOnlyFiles);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static MainFileStage builder() {
    return new Builder();
  }

  public interface MainFileStage {
    _FinalStage mainFile(@NotNull FileInfo mainFile);

    Builder from(WorkspaceFiles other);
  }

  public interface _FinalStage {
    WorkspaceFiles build();

    _FinalStage readOnlyFiles(List<FileInfo> readOnlyFiles);

    _FinalStage addReadOnlyFiles(FileInfo readOnlyFiles);

    _FinalStage addAllReadOnlyFiles(List<FileInfo> readOnlyFiles);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements MainFileStage, _FinalStage {
    private FileInfo mainFile;

    private List<FileInfo> readOnlyFiles = new ArrayList<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(WorkspaceFiles other) {
      mainFile(other.getMainFile());
      readOnlyFiles(other.getReadOnlyFiles());
      return this;
    }

    @java.lang.Override
    @JsonSetter("mainFile")
    public _FinalStage mainFile(@NotNull FileInfo mainFile) {
      this.mainFile = Objects.requireNonNull(mainFile, "mainFile must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage addAllReadOnlyFiles(List<FileInfo> readOnlyFiles) {
      if (readOnlyFiles != null) {
        this.readOnlyFiles.addAll(readOnlyFiles);
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage addReadOnlyFiles(FileInfo readOnlyFiles) {
      this.readOnlyFiles.add(readOnlyFiles);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "readOnlyFiles",
        nulls = Nulls.SKIP
    )
    public _FinalStage readOnlyFiles(List<FileInfo> readOnlyFiles) {
      this.readOnlyFiles.clear();
      this.readOnlyFiles.addAll(readOnlyFiles);
      return this;
    }

    @java.lang.Override
    public WorkspaceFiles build() {
      return new WorkspaceFiles(mainFile, readOnlyFiles);
    }
  }
}
