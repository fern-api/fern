/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.users.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import resources.users.types.WithPage;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ListUsersBodyOffsetPaginationRequest.Builder.class
)
public final class ListUsersBodyOffsetPaginationRequest {
  private final Optional<WithPage> pagination;

  private ListUsersBodyOffsetPaginationRequest(Optional<WithPage> pagination) {
    this.pagination = pagination;
  }

  /**
   * @return The object that contains the offset used for pagination
   * in order to fetch the next page of results.
   */
  @JsonProperty("pagination")
  public Optional<WithPage> getPagination() {
    return pagination;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ListUsersBodyOffsetPaginationRequest && equalTo((ListUsersBodyOffsetPaginationRequest) other);
  }

  private boolean equalTo(ListUsersBodyOffsetPaginationRequest other) {
    return pagination.equals(other.pagination);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.pagination);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<WithPage> pagination = Optional.empty();

    private Builder() {
    }

    public Builder from(ListUsersBodyOffsetPaginationRequest other) {
      pagination(other.getPagination());
      return this;
    }

    /**
     * <p>The object that contains the offset used for pagination
     * in order to fetch the next page of results.</p>
     */
    @JsonSetter(
        value = "pagination",
        nulls = Nulls.SKIP
    )
    public Builder pagination(Optional<WithPage> pagination) {
      this.pagination = pagination;
      return this;
    }

    public Builder pagination(WithPage pagination) {
      this.pagination = Optional.ofNullable(pagination);
      return this;
    }

    public ListUsersBodyOffsetPaginationRequest build() {
      return new ListUsersBodyOffsetPaginationRequest(pagination);
    }
  }
}
