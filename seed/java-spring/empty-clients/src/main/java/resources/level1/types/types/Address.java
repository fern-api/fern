/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.level1.types.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Address.Builder.class
)
public final class Address {
  private final String line1;

  private final Optional<String> line2;

  private final String city;

  private final String state;

  private final String zip;

  private Address(String line1, Optional<String> line2, String city, String state, String zip) {
    this.line1 = line1;
    this.line2 = line2;
    this.city = city;
    this.state = state;
    this.zip = zip;
  }

  @JsonProperty("line1")
  public String getLine1() {
    return line1;
  }

  @JsonProperty("line2")
  public Optional<String> getLine2() {
    return line2;
  }

  @JsonProperty("city")
  public String getCity() {
    return city;
  }

  @JsonProperty("state")
  public String getState() {
    return state;
  }

  @JsonProperty("zip")
  public String getZip() {
    return zip;
  }

  @JsonProperty("country")
  public String getCountry() {
    return "USA";
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Address && equalTo((Address) other);
  }

  private boolean equalTo(Address other) {
    return line1.equals(other.line1) && line2.equals(other.line2) && city.equals(other.city) && state.equals(other.state) && zip.equals(other.zip);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.line1, this.line2, this.city, this.state, this.zip);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Line1Stage builder() {
    return new Builder();
  }

  public interface Line1Stage {
    CityStage line1(@NotNull String line1);

    Builder from(Address other);
  }

  public interface CityStage {
    StateStage city(@NotNull String city);
  }

  public interface StateStage {
    ZipStage state(@NotNull String state);
  }

  public interface ZipStage {
    _FinalStage zip(@NotNull String zip);
  }

  public interface _FinalStage {
    Address build();

    _FinalStage line2(Optional<String> line2);

    _FinalStage line2(String line2);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements Line1Stage, CityStage, StateStage, ZipStage, _FinalStage {
    private String line1;

    private String city;

    private String state;

    private String zip;

    private Optional<String> line2 = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(Address other) {
      line1(other.getLine1());
      line2(other.getLine2());
      city(other.getCity());
      state(other.getState());
      zip(other.getZip());
      return this;
    }

    @java.lang.Override
    @JsonSetter("line1")
    public CityStage line1(@NotNull String line1) {
      this.line1 = Objects.requireNonNull(line1, "line1 must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("city")
    public StateStage city(@NotNull String city) {
      this.city = Objects.requireNonNull(city, "city must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("state")
    public ZipStage state(@NotNull String state) {
      this.state = Objects.requireNonNull(state, "state must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("zip")
    public _FinalStage zip(@NotNull String zip) {
      this.zip = Objects.requireNonNull(zip, "zip must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage line2(String line2) {
      this.line2 = Optional.ofNullable(line2);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "line2",
        nulls = Nulls.SKIP
    )
    public _FinalStage line2(Optional<String> line2) {
      this.line2 = line2;
      return this;
    }

    @java.lang.Override
    public Address build() {
      return new Address(line1, line2, city, state, zip);
    }
  }
}
