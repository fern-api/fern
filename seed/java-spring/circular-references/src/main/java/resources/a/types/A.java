/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.a.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;
import types.IRootType;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = A.Builder.class
)
public final class A implements IRootType {
  private final String s;

  private A(String s) {
    this.s = s;
  }

  @JsonProperty("s")
  @java.lang.Override
  public String getS() {
    return s;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof A && equalTo((A) other);
  }

  private boolean equalTo(A other) {
    return s.equals(other.s);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.s);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static SStage builder() {
    return new Builder();
  }

  public interface SStage {
    _FinalStage s(@NotNull String s);

    Builder from(A other);
  }

  public interface _FinalStage {
    A build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements SStage, _FinalStage {
    private String s;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(A other) {
      s(other.getS());
      return this;
    }

    @java.lang.Override
    @JsonSetter("s")
    public _FinalStage s(@NotNull String s) {
      this.s = Objects.requireNonNull(s, "s must not be null");
      return this;
    }

    @java.lang.Override
    public A build() {
      return new A(s);
    }
  }
}
