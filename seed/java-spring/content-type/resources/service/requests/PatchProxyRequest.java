/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.service.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import core.TriStateOptional;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

@JsonDeserialize(
    builder = PatchProxyRequest.Builder.class
)
public final class PatchProxyRequest {
  private final TriStateOptional<String> application;

  private final TriStateOptional<Boolean> requireAuth;

  private PatchProxyRequest(TriStateOptional<String> application,
      TriStateOptional<Boolean> requireAuth) {
    this.application = application;
    this.requireAuth = requireAuth;
  }

  @JsonProperty("application")
  public TriStateOptional<String> getApplication() {
    return application;
  }

  @JsonProperty("require_auth")
  public TriStateOptional<Boolean> getRequireAuth() {
    return requireAuth;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) {
      return true;
    }
    if (other == null || getClass() != other.getClass()) {
      return false;
    }
    PatchProxyRequest that = (PatchProxyRequest) other;
    return java.util.Objects.equals(this.application, that.application);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(this.application, this.requireAuth);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private TriStateOptional<String> application = TriStateOptional.absent();

    private TriStateOptional<Boolean> requireAuth = TriStateOptional.absent();

    private Builder() {
    }

    @JsonSetter("application")
    public Builder application(String value) {
      this.application = TriStateOptional.ofNullable(value);
      return this;
    }

    @JsonSetter("require_auth")
    public Builder requireAuth(Boolean value) {
      this.requireAuth = TriStateOptional.ofNullable(value);
      return this;
    }

    public PatchProxyRequest build() {
      return new PatchProxyRequest(application, requireAuth);
    }
  }
}
