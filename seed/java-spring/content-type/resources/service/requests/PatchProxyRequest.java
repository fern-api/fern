/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.service.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PatchProxyRequest.Builder.class
)
public final class PatchProxyRequest {
  private final Optional<String> application;

  private final Optional<Boolean> requireAuth;

  private PatchProxyRequest(Optional<String> application, Optional<Boolean> requireAuth) {
    this.application = application;
    this.requireAuth = requireAuth;
  }

  @JsonProperty("application")
  public Optional<String> getApplication() {
    return application;
  }

  @JsonProperty("require_auth")
  public Optional<Boolean> getRequireAuth() {
    return requireAuth;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PatchProxyRequest && equalTo((PatchProxyRequest) other);
  }

  private boolean equalTo(PatchProxyRequest other) {
    return application.equals(other.application) && requireAuth.equals(other.requireAuth);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.application, this.requireAuth);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> application = Optional.empty();

    private Optional<Boolean> requireAuth = Optional.empty();

    private Builder() {
    }

    public Builder from(PatchProxyRequest other) {
      application(other.getApplication());
      requireAuth(other.getRequireAuth());
      return this;
    }

    @JsonSetter(
        value = "application",
        nulls = Nulls.SKIP
    )
    public Builder application(Optional<String> application) {
      this.application = application;
      return this;
    }

    public Builder application(String application) {
      this.application = Optional.ofNullable(application);
      return this;
    }

    @JsonSetter(
        value = "require_auth",
        nulls = Nulls.SKIP
    )
    public Builder requireAuth(Optional<Boolean> requireAuth) {
      this.requireAuth = requireAuth;
      return this;
    }

    public Builder requireAuth(Boolean requireAuth) {
      this.requireAuth = Optional.ofNullable(requireAuth);
      return this;
    }

    public PatchProxyRequest build() {
      return new PatchProxyRequest(application, requireAuth);
    }
  }
}
