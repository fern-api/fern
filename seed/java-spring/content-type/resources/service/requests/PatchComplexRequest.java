/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.service.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import core.TriStateOptional;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@JsonDeserialize(
    builder = PatchComplexRequest.Builder.class
)
public final class PatchComplexRequest {
  private final TriStateOptional<String> name;

  private final TriStateOptional<Optional<String>> email;

  private final TriStateOptional<Integer> age;

  private final TriStateOptional<Boolean> active;

  private final TriStateOptional<Map<String, Object>> metadata;

  private final TriStateOptional<List<String>> tags;

  private PatchComplexRequest(TriStateOptional<String> name,
      TriStateOptional<Optional<String>> email, TriStateOptional<Integer> age,
      TriStateOptional<Boolean> active, TriStateOptional<Map<String, Object>> metadata,
      TriStateOptional<List<String>> tags) {
    this.name = name;
    this.email = email;
    this.age = age;
    this.active = active;
    this.metadata = metadata;
    this.tags = tags;
  }

  @JsonProperty("name")
  public TriStateOptional<String> getName() {
    return name;
  }

  @JsonProperty("email")
  public TriStateOptional<Optional<String>> getEmail() {
    return email;
  }

  @JsonProperty("age")
  public TriStateOptional<Integer> getAge() {
    return age;
  }

  @JsonProperty("active")
  public TriStateOptional<Boolean> getActive() {
    return active;
  }

  @JsonProperty("metadata")
  public TriStateOptional<Map<String, Object>> getMetadata() {
    return metadata;
  }

  @JsonProperty("tags")
  public TriStateOptional<List<String>> getTags() {
    return tags;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) {
      return true;
    }
    if (other == null || getClass() != other.getClass()) {
      return false;
    }
    PatchComplexRequest that = (PatchComplexRequest) other;
    return java.util.Objects.equals(this.name, that.name);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(this.name, this.email, this.age, this.active, this.metadata, this.tags);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private TriStateOptional<String> name = TriStateOptional.absent();

    private TriStateOptional<Optional<String>> email = TriStateOptional.absent();

    private TriStateOptional<Integer> age = TriStateOptional.absent();

    private TriStateOptional<Boolean> active = TriStateOptional.absent();

    private TriStateOptional<Map<String, Object>> metadata = TriStateOptional.absent();

    private TriStateOptional<List<String>> tags = TriStateOptional.absent();

    private Builder() {
    }

    @JsonSetter("name")
    public Builder name(String value) {
      this.name = TriStateOptional.ofNullable(value);
      return this;
    }

    @JsonSetter("email")
    public Builder email(Optional<String> value) {
      this.email = TriStateOptional.ofNullable(value);
      return this;
    }

    @JsonSetter("age")
    public Builder age(Integer value) {
      this.age = TriStateOptional.ofNullable(value);
      return this;
    }

    @JsonSetter("active")
    public Builder active(Boolean value) {
      this.active = TriStateOptional.ofNullable(value);
      return this;
    }

    @JsonSetter("metadata")
    public Builder metadata(Map<String, Object> value) {
      this.metadata = TriStateOptional.ofNullable(value);
      return this;
    }

    @JsonSetter("tags")
    public Builder tags(List<String> value) {
      this.tags = TriStateOptional.ofNullable(value);
      return this;
    }

    public PatchComplexRequest build() {
      return new PatchComplexRequest(name, email, age, active, metadata, tags);
    }
  }
}
