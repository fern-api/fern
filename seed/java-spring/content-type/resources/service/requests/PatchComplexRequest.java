/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.service.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import core.OptionalNullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@JsonDeserialize(
    builder = PatchComplexRequest.Builder.class
)
public final class PatchComplexRequest {
  private final Optional<String> name;

  private final Optional<Integer> age;

  private final Optional<Boolean> active;

  private final Optional<Map<String, Object>> metadata;

  private final Optional<List<String>> tags;

  private final OptionalNullable<String> email;

  private final OptionalNullable<String> nickname;

  private final OptionalNullable<String> bio;

  private final OptionalNullable<String> profileImageUrl;

  private final OptionalNullable<Map<String, Object>> settings;

  private PatchComplexRequest(Optional<String> name, Optional<Integer> age,
      Optional<Boolean> active, Optional<Map<String, Object>> metadata, Optional<List<String>> tags,
      OptionalNullable<String> email, OptionalNullable<String> nickname,
      OptionalNullable<String> bio, OptionalNullable<String> profileImageUrl,
      OptionalNullable<Map<String, Object>> settings) {
    this.name = name;
    this.age = age;
    this.active = active;
    this.metadata = metadata;
    this.tags = tags;
    this.email = email;
    this.nickname = nickname;
    this.bio = bio;
    this.profileImageUrl = profileImageUrl;
    this.settings = settings;
  }

  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  @JsonProperty("age")
  public Optional<Integer> getAge() {
    return age;
  }

  @JsonProperty("active")
  public Optional<Boolean> getActive() {
    return active;
  }

  @JsonProperty("metadata")
  public Optional<Map<String, Object>> getMetadata() {
    return metadata;
  }

  @JsonProperty("tags")
  public Optional<List<String>> getTags() {
    return tags;
  }

  @JsonProperty("email")
  public OptionalNullable<String> getEmail() {
    return email;
  }

  @JsonProperty("nickname")
  public OptionalNullable<String> getNickname() {
    return nickname;
  }

  @JsonProperty("bio")
  public OptionalNullable<String> getBio() {
    return bio;
  }

  @JsonProperty("profileImageUrl")
  public OptionalNullable<String> getProfileImageUrl() {
    return profileImageUrl;
  }

  @JsonProperty("settings")
  public OptionalNullable<Map<String, Object>> getSettings() {
    return settings;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) {
      return true;
    }
    if (other == null || getClass() != other.getClass()) {
      return false;
    }
    PatchComplexRequest that = (PatchComplexRequest) other;
    return java.util.Objects.equals(this.name, that.name);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(this.name, this.age, this.active, this.metadata, this.tags, this.email, this.nickname, this.bio, this.profileImageUrl, this.settings);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> name = Optional.empty();

    private Optional<Integer> age = Optional.empty();

    private Optional<Boolean> active = Optional.empty();

    private Optional<Map<String, Object>> metadata = Optional.empty();

    private Optional<List<String>> tags = Optional.empty();

    private OptionalNullable<String> email = OptionalNullable.absent();

    private OptionalNullable<String> nickname = OptionalNullable.absent();

    private OptionalNullable<String> bio = OptionalNullable.absent();

    private OptionalNullable<String> profileImageUrl = OptionalNullable.absent();

    private OptionalNullable<Map<String, Object>> settings = OptionalNullable.absent();

    private Builder() {
    }

    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public Builder name(String value) {
      this.name = Optional.ofNullable(value);
      return this;
    }

    @JsonSetter(
        value = "age",
        nulls = Nulls.SKIP
    )
    public Builder age(Integer value) {
      this.age = Optional.ofNullable(value);
      return this;
    }

    @JsonSetter(
        value = "active",
        nulls = Nulls.SKIP
    )
    public Builder active(Boolean value) {
      this.active = Optional.ofNullable(value);
      return this;
    }

    @JsonSetter(
        value = "metadata",
        nulls = Nulls.SKIP
    )
    public Builder metadata(Map<String, Object> value) {
      this.metadata = Optional.ofNullable(value);
      return this;
    }

    @JsonSetter(
        value = "tags",
        nulls = Nulls.SKIP
    )
    public Builder tags(List<String> value) {
      this.tags = Optional.ofNullable(value);
      return this;
    }

    @JsonSetter("email")
    public Builder email(String value) {
      this.email = OptionalNullable.ofNullable(value);
      return this;
    }

    @JsonSetter("nickname")
    public Builder nickname(String value) {
      this.nickname = OptionalNullable.ofNullable(value);
      return this;
    }

    @JsonSetter("bio")
    public Builder bio(String value) {
      this.bio = OptionalNullable.ofNullable(value);
      return this;
    }

    @JsonSetter("profileImageUrl")
    public Builder profileImageUrl(String value) {
      this.profileImageUrl = OptionalNullable.ofNullable(value);
      return this;
    }

    @JsonSetter("settings")
    public Builder settings(Map<String, Object> value) {
      this.settings = OptionalNullable.ofNullable(value);
      return this;
    }

    public PatchComplexRequest build() {
      return new PatchComplexRequest(name, age, active, metadata, tags, email, nickname, bio, profileImageUrl, settings);
    }
  }
}
