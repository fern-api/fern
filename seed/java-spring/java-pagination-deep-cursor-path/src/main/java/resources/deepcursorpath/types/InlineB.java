/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.deepcursorpath.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = InlineB.Builder.class
)
public final class InlineB {
  private final InlineC c;

  private InlineB(InlineC c) {
    this.c = c;
  }

  @JsonProperty("c")
  public InlineC getC() {
    return c;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof InlineB && equalTo((InlineB) other);
  }

  private boolean equalTo(InlineB other) {
    return c.equals(other.c);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.c);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static CStage builder() {
    return new Builder();
  }

  public interface CStage {
    _FinalStage c(@NotNull InlineC c);

    Builder from(InlineB other);
  }

  public interface _FinalStage {
    InlineB build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements CStage, _FinalStage {
    private InlineC c;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(InlineB other) {
      c(other.getC());
      return this;
    }

    @java.lang.Override
    @JsonSetter("c")
    public _FinalStage c(@NotNull InlineC c) {
      this.c = Objects.requireNonNull(c, "c must not be null");
      return this;
    }

    @java.lang.Override
    public InlineB build() {
      return new InlineB(c);
    }
  }
}
