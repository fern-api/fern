/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.deepcursorpath.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = InlineA.Builder.class
)
public final class InlineA {
  private final Optional<InlineB> b;

  private InlineA(Optional<InlineB> b) {
    this.b = b;
  }

  @JsonProperty("b")
  public Optional<InlineB> getB() {
    return b;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof InlineA && equalTo((InlineA) other);
  }

  private boolean equalTo(InlineA other) {
    return b.equals(other.b);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.b);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<InlineB> b = Optional.empty();

    private Builder() {
    }

    public Builder from(InlineA other) {
      b(other.getB());
      return this;
    }

    @JsonSetter(
        value = "b",
        nulls = Nulls.SKIP
    )
    public Builder b(Optional<InlineB> b) {
      this.b = b;
      return this;
    }

    public Builder b(InlineB b) {
      this.b = Optional.ofNullable(b);
      return this;
    }

    public InlineA build() {
      return new InlineA(b);
    }
  }
}
