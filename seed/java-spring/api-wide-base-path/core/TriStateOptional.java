/**
 * This file was auto-generated by Fern from our API Definition.
 */

package core;

import static java.util.Objects.requireNonNull;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

/**
 * A tri-state wrapper type that distinguishes between:
 * - ABSENT: field not present (e.g., not included in request)
 * - NULL: field explicitly set to null
 * - PRESENT: field has a non-null value
 *
 * This is useful for partial updates, JSON Merge Patch (RFC 7396), and any API
 * that needs to differentiate between "not specified" and "set to null".
 */
public final class TriStateOptional<T> {
  private final State state;

  private final T value;

  private TriStateOptional(State state, T value) {
    this.state = state;
    this.value = value;
  }

  /**
   * Creates an absent TriStateOptional (field not present).
   */
  public static <T> TriStateOptional<T> absent() {
    return new TriStateOptional<>(State.ABSENT, null);
  }

  /**
   * Creates a null TriStateOptional (field explicitly set to null).
   */
  public static <T> TriStateOptional<T> ofNull() {
    return new TriStateOptional<>(State.NULL, null);
  }

  /**
   * Creates a TriStateOptional with a value.
   */
  public static <T> TriStateOptional<T> of(T value) {
    requireNonNull(value, "Use ofNull() for null values");
    return new TriStateOptional<>(State.PRESENT, value);
  }

  /**
   * Creates a TriStateOptional from a nullable value.
   */
  @JsonCreator
  public static <T> TriStateOptional<T> ofNullable(T value) {
    return value == null ? ofNull() : of(value);
  }

  /**
   * Returns true if the field was absent from the request.
   */
  public boolean isAbsent() {
    return state == State.ABSENT;
  }

  /**
   * Returns true if the field was explicitly set to null.
   */
  public boolean isNull() {
    return state == State.NULL;
  }

  /**
   * Returns true if the field has a value.
   */
  public boolean isPresent() {
    return state == State.PRESENT;
  }

  /**
   * Returns true if the field was present in the request (either null or with a value).
   */
  public boolean wasSpecified() {
    return state != State.ABSENT;
  }

  /**
   * Gets the value if present, throws if absent or null.
   */
  public T get() {
    if (state != State.PRESENT) {
      throw new IllegalStateException("Cannot get value from " + state + " TriStateOptional");
    }
    return value;
  }

  /**
   * Gets the value if present or explicitly null, throws if absent.
   * This is useful for update operations where null is a valid value to set.
   */
  public T getValueOrNull() {
    if (state == State.ABSENT) {
      throw new IllegalStateException("No value set");
    }
    return value;
  }

  /**
   * Gets the value if present, returns null if explicitly set to null, or returns the provided default if absent.
   */
  public T orElse(T defaultValue) {
    if (state == State.PRESENT) {
      return value;
    }
    if (state == State.NULL) {
      return null;
    }
    return defaultValue;
  }

  /**
   * Converts to an Optional, returning empty for both absent and null states.
   */
  public Optional<T> toOptional() {
    return state == State.PRESENT ? Optional.of(value) : Optional.empty();
  }

  /**
   * For JSON serialization - serialize the actual value or null.
   * Absent values should be handled by @JsonInclude(JsonInclude.Include.CUSTOM)
   */
  @JsonValue
  public Object getJsonValue() {
    if (state == State.ABSENT) {
      // Should not be serialized - handled by custom inclusion
      throw new IllegalStateException("Absent values should not be serialized");
    }
    return state == State.NULL ? null : value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TriStateOptional<?> that = (TriStateOptional<?>) o;
    return state == that.state && Objects.equals(value, that.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, value);
  }

  @Override
  public String toString() {
    switch (state) {
      case ABSENT: return "TriStateOptional.absent()";
      case NULL: return "TriStateOptional.ofNull()";
      case PRESENT: return "TriStateOptional.of(" + value + ")";
      default: throw new IllegalStateException("Unknown state: " + state);
    }
  }

  private enum State {
    ABSENT,

    NULL,

    PRESENT
  }
}
