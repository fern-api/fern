/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.inlined.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class DiscriminatedLiteral {
  private final Value value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private DiscriminatedLiteral(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static DiscriminatedLiteral customName(String value) {
    return new DiscriminatedLiteral(new CustomNameValue(value));
  }

  public static DiscriminatedLiteral defaultName() {
    return new DiscriminatedLiteral(new DefaultNameValue("Bob"));
  }

  public static DiscriminatedLiteral george(boolean value) {
    return new DiscriminatedLiteral(new GeorgeValue(value));
  }

  public static DiscriminatedLiteral literalGeorge() {
    return new DiscriminatedLiteral(new LiteralGeorgeValue(true));
  }

  public boolean isCustomName() {
    return value instanceof CustomNameValue;
  }

  public boolean isDefaultName() {
    return value instanceof DefaultNameValue;
  }

  public boolean isGeorge() {
    return value instanceof GeorgeValue;
  }

  public boolean isLiteralGeorge() {
    return value instanceof LiteralGeorgeValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<String> getCustomName() {
    if (isCustomName()) {
      return Optional.of(((CustomNameValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<String> getDefaultName() {
    if (isDefaultName()) {
      return Optional.of(((DefaultNameValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Boolean> getGeorge() {
    if (isGeorge()) {
      return Optional.of(((GeorgeValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Boolean> getLiteralGeorge() {
    if (isLiteralGeorge()) {
      return Optional.of(((LiteralGeorgeValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitCustomName(String customName);

    T visitDefaultName(String defaultName);

    T visitGeorge(boolean george);

    T visitLiteralGeorge(Boolean literalGeorge);

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "type",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(CustomNameValue.class),
      @JsonSubTypes.Type(DefaultNameValue.class),
      @JsonSubTypes.Type(GeorgeValue.class),
      @JsonSubTypes.Type(LiteralGeorgeValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("customName")
  @JsonIgnoreProperties("type")
  private static final class CustomNameValue implements Value {
    @JsonProperty("value")
    private String value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private CustomNameValue(@JsonProperty("value") String value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitCustomName(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof CustomNameValue && equalTo((CustomNameValue) other);
    }

    private boolean equalTo(CustomNameValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "DiscriminatedLiteral{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("defaultName")
  @JsonIgnoreProperties("type")
  private static final class DefaultNameValue implements Value {
    @JsonProperty("value")
    private String value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private DefaultNameValue(@JsonProperty("value") String value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitDefaultName(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof DefaultNameValue && equalTo((DefaultNameValue) other);
    }

    private boolean equalTo(DefaultNameValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "DiscriminatedLiteral{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("george")
  @JsonIgnoreProperties("type")
  private static final class GeorgeValue implements Value {
    @JsonProperty("value")
    private boolean value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private GeorgeValue(@JsonProperty("value") boolean value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitGeorge(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof GeorgeValue && equalTo((GeorgeValue) other);
    }

    private boolean equalTo(GeorgeValue other) {
      return value == other.value;
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "DiscriminatedLiteral{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("literalGeorge")
  @JsonIgnoreProperties("type")
  private static final class LiteralGeorgeValue implements Value {
    @JsonProperty("value")
    private Boolean value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private LiteralGeorgeValue(@JsonProperty("value") Boolean value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitLiteralGeorge(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof LiteralGeorgeValue && equalTo((LiteralGeorgeValue) other);
    }

    private boolean equalTo(LiteralGeorgeValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "DiscriminatedLiteral{" + "value: " + value + "}";
    }
  }

  @JsonIgnoreProperties("type")
  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @java.lang.Override
    public String toString() {
      return "DiscriminatedLiteral{" + "type: " + type + ", value: " + value + "}";
    }
  }
}
