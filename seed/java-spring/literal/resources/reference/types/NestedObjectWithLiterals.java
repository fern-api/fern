/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.reference.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = NestedObjectWithLiterals.Builder.class
)
public final class NestedObjectWithLiterals {
  private final String strProp;

  private NestedObjectWithLiterals(String strProp) {
    this.strProp = strProp;
  }

  @JsonProperty("literal1")
  public String getLiteral1() {
    return "literal1";
  }

  @JsonProperty("literal2")
  public String getLiteral2() {
    return "literal2";
  }

  @JsonProperty("strProp")
  public String getStrProp() {
    return strProp;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof NestedObjectWithLiterals && equalTo((NestedObjectWithLiterals) other);
  }

  private boolean equalTo(NestedObjectWithLiterals other) {
    return strProp.equals(other.strProp);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.strProp);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static StrPropStage builder() {
    return new Builder();
  }

  public interface StrPropStage {
    _FinalStage strProp(@NotNull String strProp);

    Builder from(NestedObjectWithLiterals other);
  }

  public interface _FinalStage {
    NestedObjectWithLiterals build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements StrPropStage, _FinalStage {
    private String strProp;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(NestedObjectWithLiterals other) {
      strProp(other.getStrProp());
      return this;
    }

    @java.lang.Override
    @JsonSetter("strProp")
    public _FinalStage strProp(@NotNull String strProp) {
      this.strProp = Objects.requireNonNull(strProp, "strProp must not be null");
      return this;
    }

    @java.lang.Override
    public NestedObjectWithLiterals build() {
      return new NestedObjectWithLiterals(strProp);
    }
  }
}
