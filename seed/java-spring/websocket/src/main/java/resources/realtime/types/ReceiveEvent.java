/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.realtime.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ReceiveEvent.Builder.class
)
public final class ReceiveEvent {
  private final String alpha;

  private final int beta;

  private ReceiveEvent(String alpha, int beta) {
    this.alpha = alpha;
    this.beta = beta;
  }

  @JsonProperty("alpha")
  public String getAlpha() {
    return alpha;
  }

  @JsonProperty("beta")
  public int getBeta() {
    return beta;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ReceiveEvent && equalTo((ReceiveEvent) other);
  }

  private boolean equalTo(ReceiveEvent other) {
    return alpha.equals(other.alpha) && beta == other.beta;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.alpha, this.beta);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static AlphaStage builder() {
    return new Builder();
  }

  public interface AlphaStage {
    BetaStage alpha(@NotNull String alpha);

    Builder from(ReceiveEvent other);
  }

  public interface BetaStage {
    _FinalStage beta(int beta);
  }

  public interface _FinalStage {
    ReceiveEvent build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements AlphaStage, BetaStage, _FinalStage {
    private String alpha;

    private int beta;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(ReceiveEvent other) {
      alpha(other.getAlpha());
      beta(other.getBeta());
      return this;
    }

    @java.lang.Override
    @JsonSetter("alpha")
    public BetaStage alpha(@NotNull String alpha) {
      this.alpha = Objects.requireNonNull(alpha, "alpha must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("beta")
    public _FinalStage beta(int beta) {
      this.beta = beta;
      return this;
    }

    @java.lang.Override
    public ReceiveEvent build() {
      return new ReceiveEvent(alpha, beta);
    }
  }
}
