/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.endpoints.put.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Error.Builder.class
)
public final class Error {
  private final ErrorCategory category;

  private final ErrorCode code;

  private final Optional<String> detail;

  private final Optional<String> field;

  private Error(ErrorCategory category, ErrorCode code, Optional<String> detail,
      Optional<String> field) {
    this.category = category;
    this.code = code;
    this.detail = detail;
    this.field = field;
  }

  @JsonProperty("category")
  public ErrorCategory getCategory() {
    return category;
  }

  @JsonProperty("code")
  public ErrorCode getCode() {
    return code;
  }

  @JsonProperty("detail")
  public Optional<String> getDetail() {
    return detail;
  }

  @JsonProperty("field")
  public Optional<String> getField() {
    return field;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Error && equalTo((Error) other);
  }

  private boolean equalTo(Error other) {
    return category.equals(other.category) && code.equals(other.code) && detail.equals(other.detail) && field.equals(other.field);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.category, this.code, this.detail, this.field);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static CategoryStage builder() {
    return new Builder();
  }

  public interface CategoryStage {
    CodeStage category(@NotNull ErrorCategory category);

    Builder from(Error other);
  }

  public interface CodeStage {
    _FinalStage code(@NotNull ErrorCode code);
  }

  public interface _FinalStage {
    Error build();

    _FinalStage detail(Optional<String> detail);

    _FinalStage detail(String detail);

    _FinalStage field(Optional<String> field);

    _FinalStage field(String field);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements CategoryStage, CodeStage, _FinalStage {
    private ErrorCategory category;

    private ErrorCode code;

    private Optional<String> field = Optional.empty();

    private Optional<String> detail = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(Error other) {
      category(other.getCategory());
      code(other.getCode());
      detail(other.getDetail());
      field(other.getField());
      return this;
    }

    @java.lang.Override
    @JsonSetter("category")
    public CodeStage category(@NotNull ErrorCategory category) {
      this.category = Objects.requireNonNull(category, "category must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("code")
    public _FinalStage code(@NotNull ErrorCode code) {
      this.code = Objects.requireNonNull(code, "code must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage field(String field) {
      this.field = Optional.ofNullable(field);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "field",
        nulls = Nulls.SKIP
    )
    public _FinalStage field(Optional<String> field) {
      this.field = field;
      return this;
    }

    @java.lang.Override
    public _FinalStage detail(String detail) {
      this.detail = Optional.ofNullable(detail);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "detail",
        nulls = Nulls.SKIP
    )
    public _FinalStage detail(Optional<String> detail) {
      this.detail = detail;
      return this;
    }

    @java.lang.Override
    public Error build() {
      return new Error(category, code, detail, field);
    }
  }
}
