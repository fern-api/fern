/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.types.docs.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ObjectWithDocs.Builder.class
)
public final class ObjectWithDocs {
  private final String string;

  private ObjectWithDocs(String string) {
    this.string = string;
  }

  /**
   * @return Characters that could lead to broken generated SDKs:
   * <p>JSDoc (JavaScript/TypeScript):</p>
   * <ul>
   * <li>@: Used for JSDoc tags</li>
   * <li>{: }: Used for type definitions</li>
   * <li>&lt;: &gt;: HTML tags</li>
   * <li>*: Can interfere with comment blocks</li>
   * <li>/**: JSDoc comment start</li>
   * <li>** /: JSDoc comment end</li>
   * <li>&amp;: HTML entities</li>
   * </ul>
   * <p>XMLDoc (C#):</p>
   * <ul>
   * <li>&lt;: &gt;: XML tags</li>
   * <li>&amp;: ': &quot;: &lt;: &gt;: XML special characters</li>
   * <li>{: }: Used for interpolated strings</li>
   * <li>///: Comment marker</li>
   * <li>/**: Block comment start</li>
   * <li>** /: Block comment end</li>
   * </ul>
   * <p>Javadoc (Java):</p>
   * <ul>
   * <li>@: Used for Javadoc tags</li>
   * <li>&lt;: &gt;: HTML tags</li>
   * <li>&amp;: HTML entities</li>
   * <li>*: Can interfere with comment blocks</li>
   * <li>/**: Javadoc comment start</li>
   * <li>** /: Javadoc comment end</li>
   * </ul>
   * <p>Doxygen (C++):</p>
   * <ul>
   * <li>: Used for Doxygen commands</li>
   * <li>@: Alternative command prefix</li>
   * <li>&lt;: &gt;: XML/HTML tags</li>
   * <li>&amp;: HTML entities</li>
   * <li>/**: C-style comment start</li>
   * <li>** /: C-style comment end</li>
   * </ul>
   * <p>RDoc (Ruby):</p>
   * <ul>
   * <li>:: Used in symbol notation</li>
   * <li>=: Section markers</li>
   * <li>#: Comment marker</li>
   * <li>=begin: Block comment start</li>
   * <li>=end: Block comment end</li>
   * <li>@: Instance variable prefix</li>
   * <li>$: Global variable prefix</li>
   * <li>%: String literal delimiter</li>
   * <li>#{: String interpolation start</li>
   * <li>}: String interpolation end</li>
   * </ul>
   * <p>PHPDoc (PHP):</p>
   * <ul>
   * <li>@: Used for PHPDoc tags</li>
   * <li>{: }: Used for type definitions</li>
   * <li>$: Variable prefix</li>
   * <li>/**: PHPDoc comment start</li>
   * <li>** /: PHPDoc comment end</li>
   * <li>*: Can interfere with comment blocks</li>
   * <li>&amp;: HTML entities</li>
   * </ul>
   */
  @JsonProperty("string")
  public String getString() {
    return string;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ObjectWithDocs && equalTo((ObjectWithDocs) other);
  }

  private boolean equalTo(ObjectWithDocs other) {
    return string.equals(other.string);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.string);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static StringStage builder() {
    return new Builder();
  }

  public interface StringStage {
    /**
     * <p>Characters that could lead to broken generated SDKs:</p>
     * <p>JSDoc (JavaScript/TypeScript):</p>
     * <ul>
     * <li>@: Used for JSDoc tags</li>
     * <li>{: }: Used for type definitions</li>
     * <li>&lt;: &gt;: HTML tags</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>/**: JSDoc comment start</li>
     * <li>** /: JSDoc comment end</li>
     * <li>&amp;: HTML entities</li>
     * </ul>
     * <p>XMLDoc (C#):</p>
     * <ul>
     * <li>&lt;: &gt;: XML tags</li>
     * <li>&amp;: ': &quot;: &lt;: &gt;: XML special characters</li>
     * <li>{: }: Used for interpolated strings</li>
     * <li>///: Comment marker</li>
     * <li>/**: Block comment start</li>
     * <li>** /: Block comment end</li>
     * </ul>
     * <p>Javadoc (Java):</p>
     * <ul>
     * <li>@: Used for Javadoc tags</li>
     * <li>&lt;: &gt;: HTML tags</li>
     * <li>&amp;: HTML entities</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>/**: Javadoc comment start</li>
     * <li>** /: Javadoc comment end</li>
     * </ul>
     * <p>Doxygen (C++):</p>
     * <ul>
     * <li>: Used for Doxygen commands</li>
     * <li>@: Alternative command prefix</li>
     * <li>&lt;: &gt;: XML/HTML tags</li>
     * <li>&amp;: HTML entities</li>
     * <li>/**: C-style comment start</li>
     * <li>** /: C-style comment end</li>
     * </ul>
     * <p>RDoc (Ruby):</p>
     * <ul>
     * <li>:: Used in symbol notation</li>
     * <li>=: Section markers</li>
     * <li>#: Comment marker</li>
     * <li>=begin: Block comment start</li>
     * <li>=end: Block comment end</li>
     * <li>@: Instance variable prefix</li>
     * <li>$: Global variable prefix</li>
     * <li>%: String literal delimiter</li>
     * <li>#{: String interpolation start</li>
     * <li>}: String interpolation end</li>
     * </ul>
     * <p>PHPDoc (PHP):</p>
     * <ul>
     * <li>@: Used for PHPDoc tags</li>
     * <li>{: }: Used for type definitions</li>
     * <li>$: Variable prefix</li>
     * <li>/**: PHPDoc comment start</li>
     * <li>** /: PHPDoc comment end</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>&amp;: HTML entities</li>
     * </ul>
     */
    _FinalStage string(@NotNull String string);

    Builder from(ObjectWithDocs other);
  }

  public interface _FinalStage {
    ObjectWithDocs build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements StringStage, _FinalStage {
    private String string;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(ObjectWithDocs other) {
      string(other.getString());
      return this;
    }

    /**
     * <p>Characters that could lead to broken generated SDKs:</p>
     * <p>JSDoc (JavaScript/TypeScript):</p>
     * <ul>
     * <li>@: Used for JSDoc tags</li>
     * <li>{: }: Used for type definitions</li>
     * <li>&lt;: &gt;: HTML tags</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>/**: JSDoc comment start</li>
     * <li>** /: JSDoc comment end</li>
     * <li>&amp;: HTML entities</li>
     * </ul>
     * <p>XMLDoc (C#):</p>
     * <ul>
     * <li>&lt;: &gt;: XML tags</li>
     * <li>&amp;: ': &quot;: &lt;: &gt;: XML special characters</li>
     * <li>{: }: Used for interpolated strings</li>
     * <li>///: Comment marker</li>
     * <li>/**: Block comment start</li>
     * <li>** /: Block comment end</li>
     * </ul>
     * <p>Javadoc (Java):</p>
     * <ul>
     * <li>@: Used for Javadoc tags</li>
     * <li>&lt;: &gt;: HTML tags</li>
     * <li>&amp;: HTML entities</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>/**: Javadoc comment start</li>
     * <li>** /: Javadoc comment end</li>
     * </ul>
     * <p>Doxygen (C++):</p>
     * <ul>
     * <li>: Used for Doxygen commands</li>
     * <li>@: Alternative command prefix</li>
     * <li>&lt;: &gt;: XML/HTML tags</li>
     * <li>&amp;: HTML entities</li>
     * <li>/**: C-style comment start</li>
     * <li>** /: C-style comment end</li>
     * </ul>
     * <p>RDoc (Ruby):</p>
     * <ul>
     * <li>:: Used in symbol notation</li>
     * <li>=: Section markers</li>
     * <li>#: Comment marker</li>
     * <li>=begin: Block comment start</li>
     * <li>=end: Block comment end</li>
     * <li>@: Instance variable prefix</li>
     * <li>$: Global variable prefix</li>
     * <li>%: String literal delimiter</li>
     * <li>#{: String interpolation start</li>
     * <li>}: String interpolation end</li>
     * </ul>
     * <p>PHPDoc (PHP):</p>
     * <ul>
     * <li>@: Used for PHPDoc tags</li>
     * <li>{: }: Used for type definitions</li>
     * <li>$: Variable prefix</li>
     * <li>/**: PHPDoc comment start</li>
     * <li>** /: PHPDoc comment end</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>&amp;: HTML entities</li>
     * </ul>
     * <p>Characters that could lead to broken generated SDKs:</p>
     * <p>JSDoc (JavaScript/TypeScript):</p>
     * <ul>
     * <li>@: Used for JSDoc tags</li>
     * <li>{: }: Used for type definitions</li>
     * <li>&lt;: &gt;: HTML tags</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>/**: JSDoc comment start</li>
     * <li>** /: JSDoc comment end</li>
     * <li>&amp;: HTML entities</li>
     * </ul>
     * <p>XMLDoc (C#):</p>
     * <ul>
     * <li>&lt;: &gt;: XML tags</li>
     * <li>&amp;: ': &quot;: &lt;: &gt;: XML special characters</li>
     * <li>{: }: Used for interpolated strings</li>
     * <li>///: Comment marker</li>
     * <li>/**: Block comment start</li>
     * <li>** /: Block comment end</li>
     * </ul>
     * <p>Javadoc (Java):</p>
     * <ul>
     * <li>@: Used for Javadoc tags</li>
     * <li>&lt;: &gt;: HTML tags</li>
     * <li>&amp;: HTML entities</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>/**: Javadoc comment start</li>
     * <li>** /: Javadoc comment end</li>
     * </ul>
     * <p>Doxygen (C++):</p>
     * <ul>
     * <li>: Used for Doxygen commands</li>
     * <li>@: Alternative command prefix</li>
     * <li>&lt;: &gt;: XML/HTML tags</li>
     * <li>&amp;: HTML entities</li>
     * <li>/**: C-style comment start</li>
     * <li>** /: C-style comment end</li>
     * </ul>
     * <p>RDoc (Ruby):</p>
     * <ul>
     * <li>:: Used in symbol notation</li>
     * <li>=: Section markers</li>
     * <li>#: Comment marker</li>
     * <li>=begin: Block comment start</li>
     * <li>=end: Block comment end</li>
     * <li>@: Instance variable prefix</li>
     * <li>$: Global variable prefix</li>
     * <li>%: String literal delimiter</li>
     * <li>#{: String interpolation start</li>
     * <li>}: String interpolation end</li>
     * </ul>
     * <p>PHPDoc (PHP):</p>
     * <ul>
     * <li>@: Used for PHPDoc tags</li>
     * <li>{: }: Used for type definitions</li>
     * <li>$: Variable prefix</li>
     * <li>/**: PHPDoc comment start</li>
     * <li>** /: PHPDoc comment end</li>
     * <li>*: Can interfere with comment blocks</li>
     * <li>&amp;: HTML entities</li>
     * </ul>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("string")
    public _FinalStage string(@NotNull String string) {
      this.string = Objects.requireNonNull(string, "string must not be null");
      return this;
    }

    @java.lang.Override
    public ObjectWithDocs build() {
      return new ObjectWithDocs(string);
    }
  }
}
