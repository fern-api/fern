/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.service.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = SearchResourcesRequest.Builder.class
)
public final class SearchResourcesRequest {
  private final String query;

  private final Optional<Map<String, Object>> filters;

  private SearchResourcesRequest(String query, Optional<Map<String, Object>> filters) {
    this.query = query;
    this.filters = filters;
  }

  @JsonProperty("query")
  public String getQuery() {
    return query;
  }

  @JsonProperty("filters")
  public Optional<Map<String, Object>> getFilters() {
    return filters;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SearchResourcesRequest && equalTo((SearchResourcesRequest) other);
  }

  private boolean equalTo(SearchResourcesRequest other) {
    return query.equals(other.query) && filters.equals(other.filters);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.query, this.filters);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static QueryStage builder() {
    return new Builder();
  }

  public interface QueryStage {
    _FinalStage query(@NotNull String query);

    Builder from(SearchResourcesRequest other);
  }

  public interface _FinalStage {
    SearchResourcesRequest build();

    _FinalStage filters(Optional<Map<String, Object>> filters);

    _FinalStage filters(Map<String, Object> filters);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements QueryStage, _FinalStage {
    private String query;

    private Optional<Map<String, Object>> filters = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(SearchResourcesRequest other) {
      query(other.getQuery());
      filters(other.getFilters());
      return this;
    }

    @java.lang.Override
    @JsonSetter("query")
    public _FinalStage query(@NotNull String query) {
      this.query = Objects.requireNonNull(query, "query must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage filters(Map<String, Object> filters) {
      this.filters = Optional.ofNullable(filters);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "filters",
        nulls = Nulls.SKIP
    )
    public _FinalStage filters(Optional<Map<String, Object>> filters) {
      this.filters = filters;
      return this;
    }

    @java.lang.Override
    public SearchResourcesRequest build() {
      return new SearchResourcesRequest(query, filters);
    }
  }
}
