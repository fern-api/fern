/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.user.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CreateUsernameRequest.Builder.class
)
public final class CreateUsernameRequest {
  private final String username;

  private final String password;

  private final String name;

  private CreateUsernameRequest(String username, String password, String name) {
    this.username = username;
    this.password = password;
    this.name = name;
  }

  @JsonProperty("username")
  public String getUsername() {
    return username;
  }

  @JsonProperty("password")
  public String getPassword() {
    return password;
  }

  @JsonProperty("name")
  public String getName() {
    return name;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateUsernameRequest && equalTo((CreateUsernameRequest) other);
  }

  private boolean equalTo(CreateUsernameRequest other) {
    return username.equals(other.username) && password.equals(other.password) && name.equals(other.name);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.username, this.password, this.name);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UsernameStage builder() {
    return new Builder();
  }

  public interface UsernameStage {
    PasswordStage username(@NotNull String username);

    Builder from(CreateUsernameRequest other);
  }

  public interface PasswordStage {
    NameStage password(@NotNull String password);
  }

  public interface NameStage {
    _FinalStage name(@NotNull String name);
  }

  public interface _FinalStage {
    CreateUsernameRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UsernameStage, PasswordStage, NameStage, _FinalStage {
    private String username;

    private String password;

    private String name;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(CreateUsernameRequest other) {
      username(other.getUsername());
      password(other.getPassword());
      name(other.getName());
      return this;
    }

    @java.lang.Override
    @JsonSetter("username")
    public PasswordStage username(@NotNull String username) {
      this.username = Objects.requireNonNull(username, "username must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("password")
    public NameStage password(@NotNull String password) {
      this.password = Objects.requireNonNull(password, "password must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("name")
    public _FinalStage name(@NotNull String name) {
      this.name = Objects.requireNonNull(name, "name must not be null");
      return this;
    }

    @java.lang.Override
    public CreateUsernameRequest build() {
      return new CreateUsernameRequest(username, password, name);
    }
  }
}
