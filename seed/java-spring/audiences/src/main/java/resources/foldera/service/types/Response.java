/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.foldera.service.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import resources.folderb.common.types.Foo;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Response.Builder.class
)
public final class Response {
  private final Optional<Foo> foo;

  private Response(Optional<Foo> foo) {
    this.foo = foo;
  }

  @JsonProperty("foo")
  public Optional<Foo> getFoo() {
    return foo;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Response && equalTo((Response) other);
  }

  private boolean equalTo(Response other) {
    return foo.equals(other.foo);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.foo);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Foo> foo = Optional.empty();

    private Builder() {
    }

    public Builder from(Response other) {
      foo(other.getFoo());
      return this;
    }

    @JsonSetter(
        value = "foo",
        nulls = Nulls.SKIP
    )
    public Builder foo(Optional<Foo> foo) {
      this.foo = foo;
      return this;
    }

    public Builder foo(Foo foo) {
      this.foo = Optional.ofNullable(foo);
      return this;
    }

    public Response build() {
      return new Response(foo);
    }
  }
}
