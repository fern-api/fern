/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.foo.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = FindRequest.Builder.class
)
public final class FindRequest {
  private final Optional<String> publicProperty;

  private final Optional<Integer> privateProperty;

  private FindRequest(Optional<String> publicProperty, Optional<Integer> privateProperty) {
    this.publicProperty = publicProperty;
    this.privateProperty = privateProperty;
  }

  @JsonProperty("publicProperty")
  public Optional<String> getPublicProperty() {
    return publicProperty;
  }

  @JsonProperty("privateProperty")
  public Optional<Integer> getPrivateProperty() {
    return privateProperty;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof FindRequest && equalTo((FindRequest) other);
  }

  private boolean equalTo(FindRequest other) {
    return publicProperty.equals(other.publicProperty) && privateProperty.equals(other.privateProperty);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.publicProperty, this.privateProperty);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> publicProperty = Optional.empty();

    private Optional<Integer> privateProperty = Optional.empty();

    private Builder() {
    }

    public Builder from(FindRequest other) {
      publicProperty(other.getPublicProperty());
      privateProperty(other.getPrivateProperty());
      return this;
    }

    @JsonSetter(
        value = "publicProperty",
        nulls = Nulls.SKIP
    )
    public Builder publicProperty(Optional<String> publicProperty) {
      this.publicProperty = publicProperty;
      return this;
    }

    public Builder publicProperty(String publicProperty) {
      this.publicProperty = Optional.ofNullable(publicProperty);
      return this;
    }

    @JsonSetter(
        value = "privateProperty",
        nulls = Nulls.SKIP
    )
    public Builder privateProperty(Optional<Integer> privateProperty) {
      this.privateProperty = privateProperty;
      return this;
    }

    public Builder privateProperty(Integer privateProperty) {
      this.privateProperty = Optional.ofNullable(privateProperty);
      return this;
    }

    public FindRequest build() {
      return new FindRequest(publicProperty, privateProperty);
    }
  }
}
