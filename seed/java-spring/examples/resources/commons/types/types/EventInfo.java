/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.commons.types.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class EventInfo {
  private final Value value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private EventInfo(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static EventInfo metadata(Metadata value) {
    return new EventInfo(new MetadataValue(value));
  }

  public static EventInfo tag(Tag value) {
    return new EventInfo(new TagValue(value));
  }

  public boolean isMetadata() {
    return value instanceof MetadataValue;
  }

  public boolean isTag() {
    return value instanceof TagValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<Metadata> getMetadata() {
    if (isMetadata()) {
      return Optional.of(((MetadataValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Tag> getTag() {
    if (isTag()) {
      return Optional.of(((TagValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitMetadata(Metadata metadata);

    T visitTag(Tag tag);

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "type",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(MetadataValue.class),
      @JsonSubTypes.Type(TagValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("metadata")
  @JsonIgnoreProperties("type")
  private static final class MetadataValue implements Value {
    @JsonUnwrapped
    private Metadata value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private MetadataValue() {
    }

    private MetadataValue(Metadata value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitMetadata(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof MetadataValue && equalTo((MetadataValue) other);
    }

    private boolean equalTo(MetadataValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "EventInfo{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("tag")
  @JsonIgnoreProperties("type")
  private static final class TagValue implements Value {
    @JsonProperty("value")
    private Tag value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private TagValue(@JsonProperty("value") Tag value) {
      this.value = value;
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitTag(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof TagValue && equalTo((TagValue) other);
    }

    private boolean equalTo(TagValue other) {
      return value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @java.lang.Override
    public String toString() {
      return "EventInfo{" + "value: " + value + "}";
    }
  }

  @JsonIgnoreProperties("type")
  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @java.lang.Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @java.lang.Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @java.lang.Override
    public String toString() {
      return "EventInfo{" + "type: " + type + ", value: " + value + "}";
    }
  }
}
