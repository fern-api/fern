/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TypeWithSingleCharPropertyEqualToTypeStartingLetter.Builder.class
)
public final class TypeWithSingleCharPropertyEqualToTypeStartingLetter {
  private final String t;

  private final String ty;

  private TypeWithSingleCharPropertyEqualToTypeStartingLetter(String t, String ty) {
    this.t = t;
    this.ty = ty;
  }

  @JsonProperty("t")
  public String getT() {
    return t;
  }

  @JsonProperty("ty")
  public String getTy() {
    return ty;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TypeWithSingleCharPropertyEqualToTypeStartingLetter && equalTo((TypeWithSingleCharPropertyEqualToTypeStartingLetter) other);
  }

  private boolean equalTo(TypeWithSingleCharPropertyEqualToTypeStartingLetter other) {
    return t.equals(other.t) && ty.equals(other.ty);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.t, this.ty);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TStage builder() {
    return new Builder();
  }

  public interface TStage {
    TyStage t(@NotNull String t);

    Builder from(TypeWithSingleCharPropertyEqualToTypeStartingLetter other);
  }

  public interface TyStage {
    _FinalStage ty(@NotNull String ty);
  }

  public interface _FinalStage {
    TypeWithSingleCharPropertyEqualToTypeStartingLetter build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TStage, TyStage, _FinalStage {
    private String t;

    private String ty;

    private Builder() {
    }

    @java.lang.Override
    public Builder from(TypeWithSingleCharPropertyEqualToTypeStartingLetter other) {
      t(other.getT());
      ty(other.getTy());
      return this;
    }

    @java.lang.Override
    @JsonSetter("t")
    public TyStage t(@NotNull String t) {
      this.t = Objects.requireNonNull(t, "t must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("ty")
    public _FinalStage ty(@NotNull String ty) {
      this.ty = Objects.requireNonNull(ty, "ty must not be null");
      return this;
    }

    @java.lang.Override
    public TypeWithSingleCharPropertyEqualToTypeStartingLetter build() {
      return new TypeWithSingleCharPropertyEqualToTypeStartingLetter(t, ty);
    }
  }
}
