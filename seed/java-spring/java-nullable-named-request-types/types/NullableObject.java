/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = NullableObject.Builder.class
)
public final class NullableObject {
  private final Optional<String> id;

  private final Optional<String> name;

  private final Optional<Integer> age;

  private NullableObject(Optional<String> id, Optional<String> name, Optional<Integer> age) {
    this.id = id;
    this.name = name;
    this.age = age;
  }

  @JsonProperty("id")
  public Optional<String> getId() {
    return id;
  }

  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  @JsonProperty("age")
  public Optional<Integer> getAge() {
    return age;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof NullableObject && equalTo((NullableObject) other);
  }

  private boolean equalTo(NullableObject other) {
    return id.equals(other.id) && name.equals(other.name) && age.equals(other.age);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.name, this.age);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> id = Optional.empty();

    private Optional<String> name = Optional.empty();

    private Optional<Integer> age = Optional.empty();

    private Builder() {
    }

    public Builder from(NullableObject other) {
      id(other.getId());
      name(other.getName());
      age(other.getAge());
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.ofNullable(id);
      return this;
    }

    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public Builder name(Optional<String> name) {
      this.name = name;
      return this;
    }

    public Builder name(String name) {
      this.name = Optional.ofNullable(name);
      return this;
    }

    @JsonSetter(
        value = "age",
        nulls = Nulls.SKIP
    )
    public Builder age(Optional<Integer> age) {
      this.age = age;
      return this;
    }

    public Builder age(Integer age) {
      this.age = Optional.ofNullable(age);
      return this;
    }

    public NullableObject build() {
      return new NullableObject(id, name, age);
    }
  }
}
