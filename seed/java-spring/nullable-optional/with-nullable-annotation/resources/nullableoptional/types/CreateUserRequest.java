/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CreateUserRequest.Builder.class
)
public final class CreateUserRequest {
  private final String username;

  private final String email;

  private final Optional<String> phone;

  private final Optional<Address> address;

  private CreateUserRequest(String username, String email, Optional<String> phone,
      Optional<Address> address) {
    this.username = username;
    this.email = email;
    this.phone = phone;
    this.address = address;
  }

  @JsonProperty("username")
  public String getUsername() {
    return username;
  }

  @Nullable
  @JsonProperty("email")
  public String getEmail() {
    return email;
  }

  @JsonProperty("phone")
  public Optional<String> getPhone() {
    return phone;
  }

  @JsonProperty("address")
  public Optional<Address> getAddress() {
    return address;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateUserRequest && equalTo((CreateUserRequest) other);
  }

  private boolean equalTo(CreateUserRequest other) {
    return java.util.Objects.equals(username, other.username) && java.util.Objects.equals(email, other.email) && java.util.Objects.equals(phone, other.phone) && java.util.Objects.equals(address, other.address);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.username, this.email, this.phone, this.address);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UsernameStage builder() {
    return new Builder();
  }

  public interface UsernameStage {
    EmailStage username(@NotNull String username);

    Builder from(CreateUserRequest other);
  }

  public interface EmailStage {
    _FinalStage email(@NotNull String email);
  }

  public interface _FinalStage {
    CreateUserRequest build();

    _FinalStage phone(Optional<String> phone);

    _FinalStage phone(String phone);

    _FinalStage address(Optional<Address> address);

    _FinalStage address(Address address);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UsernameStage, EmailStage, _FinalStage {
    private String username;

    private String email;

    private Optional<Address> address = Optional.empty();

    private Optional<String> phone = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(CreateUserRequest other) {
      username(other.getUsername());
      email(other.getEmail());
      phone(other.getPhone());
      address(other.getAddress());
      return this;
    }

    @java.lang.Override
    @JsonSetter("username")
    public EmailStage username(@NotNull String username) {
      this.username = Objects.requireNonNull(username, "username must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("email")
    public _FinalStage email(@NotNull String email) {
      this.email = Objects.requireNonNull(email, "email must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage address(Address address) {
      this.address = Optional.ofNullable(address);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "address",
        nulls = Nulls.SKIP
    )
    public _FinalStage address(Optional<Address> address) {
      this.address = address;
      return this;
    }

    @java.lang.Override
    public _FinalStage phone(String phone) {
      this.phone = Optional.ofNullable(phone);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "phone",
        nulls = Nulls.SKIP
    )
    public _FinalStage phone(Optional<String> phone) {
      this.phone = phone;
      return this;
    }

    @java.lang.Override
    public CreateUserRequest build() {
      return new CreateUserRequest(username, email, phone, address);
    }
  }
}
