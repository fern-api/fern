/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = EmailNotification.Builder.class
)
public final class EmailNotification {
  private final String emailAddress;

  private final String subject;

  private final Optional<String> htmlContent;

  private EmailNotification(String emailAddress, String subject, Optional<String> htmlContent) {
    this.emailAddress = emailAddress;
    this.subject = subject;
    this.htmlContent = htmlContent;
  }

  @JsonProperty("emailAddress")
  public String getEmailAddress() {
    return emailAddress;
  }

  @JsonProperty("subject")
  public String getSubject() {
    return subject;
  }

  @JsonProperty("htmlContent")
  public Optional<String> getHtmlContent() {
    return htmlContent;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EmailNotification && equalTo((EmailNotification) other);
  }

  private boolean equalTo(EmailNotification other) {
    return emailAddress.equals(other.emailAddress) && subject.equals(other.subject) && htmlContent.equals(other.htmlContent);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.emailAddress, this.subject, this.htmlContent);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static EmailAddressStage builder() {
    return new Builder();
  }

  public interface EmailAddressStage {
    SubjectStage emailAddress(@NotNull String emailAddress);

    Builder from(EmailNotification other);
  }

  public interface SubjectStage {
    _FinalStage subject(@NotNull String subject);
  }

  public interface _FinalStage {
    EmailNotification build();

    _FinalStage htmlContent(Optional<String> htmlContent);

    _FinalStage htmlContent(String htmlContent);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements EmailAddressStage, SubjectStage, _FinalStage {
    private String emailAddress;

    private String subject;

    private Optional<String> htmlContent = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(EmailNotification other) {
      emailAddress(other.getEmailAddress());
      subject(other.getSubject());
      htmlContent(other.getHtmlContent());
      return this;
    }

    @java.lang.Override
    @JsonSetter("emailAddress")
    public SubjectStage emailAddress(@NotNull String emailAddress) {
      this.emailAddress = Objects.requireNonNull(emailAddress, "emailAddress must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("subject")
    public _FinalStage subject(@NotNull String subject) {
      this.subject = Objects.requireNonNull(subject, "subject must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage htmlContent(String htmlContent) {
      this.htmlContent = Optional.ofNullable(htmlContent);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "htmlContent",
        nulls = Nulls.SKIP
    )
    public _FinalStage htmlContent(Optional<String> htmlContent) {
      this.htmlContent = htmlContent;
      return this;
    }

    @java.lang.Override
    public EmailNotification build() {
      return new EmailNotification(emailAddress, subject, htmlContent);
    }
  }
}
