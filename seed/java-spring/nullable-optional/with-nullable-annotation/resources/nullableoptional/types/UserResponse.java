/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UserResponse.Builder.class
)
public final class UserResponse {
  private final String id;

  private final String username;

  private final String email;

  private final Optional<String> phone;

  private final OffsetDateTime createdAt;

  private final OffsetDateTime updatedAt;

  private final Optional<Address> address;

  private UserResponse(String id, String username, String email, Optional<String> phone,
      OffsetDateTime createdAt, OffsetDateTime updatedAt, Optional<Address> address) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.phone = phone;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
    this.address = address;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("username")
  public String getUsername() {
    return username;
  }

  @Nullable
  @JsonProperty("email")
  public String getEmail() {
    return email;
  }

  @JsonProperty("phone")
  public Optional<String> getPhone() {
    return phone;
  }

  @JsonProperty("createdAt")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  @Nullable
  @JsonProperty("updatedAt")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  @JsonProperty("address")
  public Optional<Address> getAddress() {
    return address;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserResponse && equalTo((UserResponse) other);
  }

  private boolean equalTo(UserResponse other) {
    return id.equals(other.id) && username.equals(other.username) && email.equals(other.email) && phone.equals(other.phone) && createdAt.equals(other.createdAt) && updatedAt.equals(other.updatedAt) && address.equals(other.address);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.id, this.username, this.email, this.phone, this.createdAt, this.updatedAt, this.address);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    UsernameStage id(@NotNull String id);

    Builder from(UserResponse other);
  }

  public interface UsernameStage {
    EmailStage username(@NotNull String username);
  }

  public interface EmailStage {
    CreatedAtStage email(@NotNull String email);
  }

  public interface CreatedAtStage {
    UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);
  }

  public interface UpdatedAtStage {
    _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
  }

  public interface _FinalStage {
    UserResponse build();

    _FinalStage phone(Optional<String> phone);

    _FinalStage phone(String phone);

    _FinalStage address(Optional<Address> address);

    _FinalStage address(Address address);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, UsernameStage, EmailStage, CreatedAtStage, UpdatedAtStage, _FinalStage {
    private String id;

    private String username;

    private String email;

    private OffsetDateTime createdAt;

    private OffsetDateTime updatedAt;

    private Optional<Address> address = Optional.empty();

    private Optional<String> phone = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(UserResponse other) {
      id(other.getId());
      username(other.getUsername());
      email(other.getEmail());
      phone(other.getPhone());
      createdAt(other.getCreatedAt());
      updatedAt(other.getUpdatedAt());
      address(other.getAddress());
      return this;
    }

    @java.lang.Override
    @JsonSetter("id")
    public UsernameStage id(@NotNull String id) {
      this.id = Objects.requireNonNull(id, "id must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("username")
    public EmailStage username(@NotNull String username) {
      this.username = Objects.requireNonNull(username, "username must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("email")
    public CreatedAtStage email(@NotNull String email) {
      this.email = Objects.requireNonNull(email, "email must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("createdAt")
    public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
      this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("updatedAt")
    public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
      this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage address(Address address) {
      this.address = Optional.ofNullable(address);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "address",
        nulls = Nulls.SKIP
    )
    public _FinalStage address(Optional<Address> address) {
      this.address = address;
      return this;
    }

    @java.lang.Override
    public _FinalStage phone(String phone) {
      this.phone = Optional.ofNullable(phone);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "phone",
        nulls = Nulls.SKIP
    )
    public _FinalStage phone(Optional<String> phone) {
      this.phone = phone;
      return this;
    }

    @java.lang.Override
    public UserResponse build() {
      return new UserResponse(id, username, email, phone, createdAt, updatedAt, address);
    }
  }
}
