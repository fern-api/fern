/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.NullableNonemptyFilter;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.Nullable;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UpdateTagsRequest.Builder.class
)
public final class UpdateTagsRequest {
  private final List<String> tags;

  private final Optional<List<String>> categories;

  private final Optional<List<String>> labels;

  private UpdateTagsRequest(List<String> tags, Optional<List<String>> categories,
      Optional<List<String>> labels) {
    this.tags = tags;
    this.categories = categories;
    this.labels = labels;
  }

  @Nullable
  @JsonIgnore
  public List<String> getTags() {
    return tags;
  }

  @JsonProperty("categories")
  public Optional<List<String>> getCategories() {
    return categories;
  }

  @JsonProperty("labels")
  public Optional<List<String>> getLabels() {
    return labels;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("tags")
  private List<String> _getTags() {
    return tags;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UpdateTagsRequest && equalTo((UpdateTagsRequest) other);
  }

  private boolean equalTo(UpdateTagsRequest other) {
    return tags.equals(other.tags) && categories.equals(other.categories) && labels.equals(other.labels);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.tags, this.categories, this.labels);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private List<String> tags = new ArrayList<>();

    private Optional<List<String>> categories = Optional.empty();

    private Optional<List<String>> labels = Optional.empty();

    private Builder() {
    }

    public Builder from(UpdateTagsRequest other) {
      tags(other.getTags());
      categories(other.getCategories());
      labels(other.getLabels());
      return this;
    }

    @JsonSetter(
        value = "tags",
        nulls = Nulls.SKIP
    )
    public Builder tags(List<String> tags) {
      this.tags.clear();
      this.tags.addAll(tags);
      return this;
    }

    public Builder addTags(String tags) {
      this.tags.add(tags);
      return this;
    }

    public Builder addAllTags(List<String> tags) {
      if (tags != null) {
        this.tags.addAll(tags);
      }
      return this;
    }

    @JsonSetter(
        value = "categories",
        nulls = Nulls.SKIP
    )
    public Builder categories(Optional<List<String>> categories) {
      this.categories = categories;
      return this;
    }

    public Builder categories(List<String> categories) {
      this.categories = Optional.ofNullable(categories);
      return this;
    }

    @JsonSetter(
        value = "labels",
        nulls = Nulls.SKIP
    )
    public Builder labels(Optional<List<String>> labels) {
      this.labels = labels;
      return this;
    }

    public Builder labels(List<String> labels) {
      this.labels = Optional.ofNullable(labels);
      return this;
    }

    public UpdateTagsRequest build() {
      return new UpdateTagsRequest(tags, categories, labels);
    }
  }
}
