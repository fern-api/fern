/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = PushNotification.Builder.class
)
public final class PushNotification {
  private final String deviceToken;

  private final String title;

  private final String body;

  private final Optional<Integer> badge;

  private PushNotification(String deviceToken, String title, String body, Optional<Integer> badge) {
    this.deviceToken = deviceToken;
    this.title = title;
    this.body = body;
    this.badge = badge;
  }

  @JsonProperty("deviceToken")
  public String getDeviceToken() {
    return deviceToken;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("body")
  public String getBody() {
    return body;
  }

  @JsonProperty("badge")
  public Optional<Integer> getBadge() {
    return badge;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PushNotification && equalTo((PushNotification) other);
  }

  private boolean equalTo(PushNotification other) {
    return deviceToken.equals(other.deviceToken) && title.equals(other.title) && body.equals(other.body) && badge.equals(other.badge);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.deviceToken, this.title, this.body, this.badge);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static DeviceTokenStage builder() {
    return new Builder();
  }

  public interface DeviceTokenStage {
    TitleStage deviceToken(@NotNull String deviceToken);

    Builder from(PushNotification other);
  }

  public interface TitleStage {
    BodyStage title(@NotNull String title);
  }

  public interface BodyStage {
    _FinalStage body(@NotNull String body);
  }

  public interface _FinalStage {
    PushNotification build();

    _FinalStage badge(Optional<Integer> badge);

    _FinalStage badge(Integer badge);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DeviceTokenStage, TitleStage, BodyStage, _FinalStage {
    private String deviceToken;

    private String title;

    private String body;

    private Optional<Integer> badge = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(PushNotification other) {
      deviceToken(other.getDeviceToken());
      title(other.getTitle());
      body(other.getBody());
      badge(other.getBadge());
      return this;
    }

    @java.lang.Override
    @JsonSetter("deviceToken")
    public TitleStage deviceToken(@NotNull String deviceToken) {
      this.deviceToken = Objects.requireNonNull(deviceToken, "deviceToken must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("title")
    public BodyStage title(@NotNull String title) {
      this.title = Objects.requireNonNull(title, "title must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("body")
    public _FinalStage body(@NotNull String body) {
      this.body = Objects.requireNonNull(body, "body must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage badge(Integer badge) {
      this.badge = Optional.ofNullable(badge);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "badge",
        nulls = Nulls.SKIP
    )
    public _FinalStage badge(Optional<Integer> badge) {
      this.badge = badge;
      return this;
    }

    @java.lang.Override
    public PushNotification build() {
      return new PushNotification(deviceToken, title, body, badge);
    }
  }
}
