/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.Nullable;
import core.NullableNonemptyFilter;
import core.ObjectMappers;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = DeserializationTestRequest.Builder.class
)
public final class DeserializationTestRequest {
  private final String requiredString;

  private final Optional<String> nullableString;

  private final Optional<String> optionalString;

  private final Optional<String> optionalNullableString;

  private final Optional<UserRole> nullableEnum;

  private final Optional<UserStatus> optionalEnum;

  private final Optional<NotificationMethod> nullableUnion;

  private final Optional<SearchResult> optionalUnion;

  private final Optional<List<String>> nullableList;

  private final Optional<Map<String, Integer>> nullableMap;

  private final Optional<Address> nullableObject;

  private final Optional<Organization> optionalObject;

  private DeserializationTestRequest(String requiredString, Optional<String> nullableString,
      Optional<String> optionalString, Optional<String> optionalNullableString,
      Optional<UserRole> nullableEnum, Optional<UserStatus> optionalEnum,
      Optional<NotificationMethod> nullableUnion, Optional<SearchResult> optionalUnion,
      Optional<List<String>> nullableList, Optional<Map<String, Integer>> nullableMap,
      Optional<Address> nullableObject, Optional<Organization> optionalObject) {
    this.requiredString = requiredString;
    this.nullableString = nullableString;
    this.optionalString = optionalString;
    this.optionalNullableString = optionalNullableString;
    this.nullableEnum = nullableEnum;
    this.optionalEnum = optionalEnum;
    this.nullableUnion = nullableUnion;
    this.optionalUnion = optionalUnion;
    this.nullableList = nullableList;
    this.nullableMap = nullableMap;
    this.nullableObject = nullableObject;
    this.optionalObject = optionalObject;
  }

  @JsonProperty("requiredString")
  public String getRequiredString() {
    return requiredString;
  }

  @JsonIgnore
  public Optional<String> getNullableString() {
    if (nullableString == null) {
      return Optional.empty();
    }
    return nullableString;
  }

  @JsonProperty("optionalString")
  public Optional<String> getOptionalString() {
    return optionalString;
  }

  @JsonProperty("optionalNullableString")
  public Optional<String> getOptionalNullableString() {
    return optionalNullableString;
  }

  @JsonIgnore
  public Optional<UserRole> getNullableEnum() {
    if (nullableEnum == null) {
      return Optional.empty();
    }
    return nullableEnum;
  }

  @JsonProperty("optionalEnum")
  public Optional<UserStatus> getOptionalEnum() {
    return optionalEnum;
  }

  @JsonIgnore
  public Optional<NotificationMethod> getNullableUnion() {
    if (nullableUnion == null) {
      return Optional.empty();
    }
    return nullableUnion;
  }

  @JsonProperty("optionalUnion")
  public Optional<SearchResult> getOptionalUnion() {
    return optionalUnion;
  }

  @JsonIgnore
  public Optional<List<String>> getNullableList() {
    if (nullableList == null) {
      return Optional.empty();
    }
    return nullableList;
  }

  @JsonIgnore
  public Optional<Map<String, Integer>> getNullableMap() {
    if (nullableMap == null) {
      return Optional.empty();
    }
    return nullableMap;
  }

  @JsonIgnore
  public Optional<Address> getNullableObject() {
    if (nullableObject == null) {
      return Optional.empty();
    }
    return nullableObject;
  }

  @JsonProperty("optionalObject")
  public Optional<Organization> getOptionalObject() {
    return optionalObject;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("nullableString")
  private Optional<String> _getNullableString() {
    return nullableString;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("nullableEnum")
  private Optional<UserRole> _getNullableEnum() {
    return nullableEnum;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("nullableUnion")
  private Optional<NotificationMethod> _getNullableUnion() {
    return nullableUnion;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("nullableList")
  private Optional<List<String>> _getNullableList() {
    return nullableList;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("nullableMap")
  private Optional<Map<String, Integer>> _getNullableMap() {
    return nullableMap;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("nullableObject")
  private Optional<Address> _getNullableObject() {
    return nullableObject;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DeserializationTestRequest && equalTo((DeserializationTestRequest) other);
  }

  private boolean equalTo(DeserializationTestRequest other) {
    return requiredString.equals(other.requiredString) && nullableString.equals(other.nullableString) && optionalString.equals(other.optionalString) && optionalNullableString.equals(other.optionalNullableString) && nullableEnum.equals(other.nullableEnum) && optionalEnum.equals(other.optionalEnum) && nullableUnion.equals(other.nullableUnion) && optionalUnion.equals(other.optionalUnion) && nullableList.equals(other.nullableList) && nullableMap.equals(other.nullableMap) && nullableObject.equals(other.nullableObject) && optionalObject.equals(other.optionalObject);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.requiredString, this.nullableString, this.optionalString, this.optionalNullableString, this.nullableEnum, this.optionalEnum, this.nullableUnion, this.optionalUnion, this.nullableList, this.nullableMap, this.nullableObject, this.optionalObject);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static RequiredStringStage builder() {
    return new Builder();
  }

  public interface RequiredStringStage {
    _FinalStage requiredString(@NotNull String requiredString);

    Builder from(DeserializationTestRequest other);
  }

  public interface _FinalStage {
    DeserializationTestRequest build();

    _FinalStage nullableString(Optional<String> nullableString);

    _FinalStage nullableString(String nullableString);

    _FinalStage nullableString(Nullable<String> nullableString);

    _FinalStage optionalString(Optional<String> optionalString);

    _FinalStage optionalString(String optionalString);

    _FinalStage optionalNullableString(Optional<String> optionalNullableString);

    _FinalStage optionalNullableString(String optionalNullableString);

    _FinalStage nullableEnum(Optional<UserRole> nullableEnum);

    _FinalStage nullableEnum(UserRole nullableEnum);

    _FinalStage nullableEnum(Nullable<UserRole> nullableEnum);

    _FinalStage optionalEnum(Optional<UserStatus> optionalEnum);

    _FinalStage optionalEnum(UserStatus optionalEnum);

    _FinalStage nullableUnion(Optional<NotificationMethod> nullableUnion);

    _FinalStage nullableUnion(NotificationMethod nullableUnion);

    _FinalStage nullableUnion(Nullable<NotificationMethod> nullableUnion);

    _FinalStage optionalUnion(Optional<SearchResult> optionalUnion);

    _FinalStage optionalUnion(SearchResult optionalUnion);

    _FinalStage nullableList(Optional<List<String>> nullableList);

    _FinalStage nullableList(List<String> nullableList);

    _FinalStage nullableList(Nullable<List<String>> nullableList);

    _FinalStage nullableMap(Optional<Map<String, Integer>> nullableMap);

    _FinalStage nullableMap(Map<String, Integer> nullableMap);

    _FinalStage nullableMap(Nullable<Map<String, Integer>> nullableMap);

    _FinalStage nullableObject(Optional<Address> nullableObject);

    _FinalStage nullableObject(Address nullableObject);

    _FinalStage nullableObject(Nullable<Address> nullableObject);

    _FinalStage optionalObject(Optional<Organization> optionalObject);

    _FinalStage optionalObject(Organization optionalObject);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements RequiredStringStage, _FinalStage {
    private String requiredString;

    private Optional<Organization> optionalObject = Optional.empty();

    private Optional<Address> nullableObject = Optional.empty();

    private Optional<Map<String, Integer>> nullableMap = Optional.empty();

    private Optional<List<String>> nullableList = Optional.empty();

    private Optional<SearchResult> optionalUnion = Optional.empty();

    private Optional<NotificationMethod> nullableUnion = Optional.empty();

    private Optional<UserStatus> optionalEnum = Optional.empty();

    private Optional<UserRole> nullableEnum = Optional.empty();

    private Optional<String> optionalNullableString = Optional.empty();

    private Optional<String> optionalString = Optional.empty();

    private Optional<String> nullableString = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(DeserializationTestRequest other) {
      requiredString(other.getRequiredString());
      nullableString(other.getNullableString());
      optionalString(other.getOptionalString());
      optionalNullableString(other.getOptionalNullableString());
      nullableEnum(other.getNullableEnum());
      optionalEnum(other.getOptionalEnum());
      nullableUnion(other.getNullableUnion());
      optionalUnion(other.getOptionalUnion());
      nullableList(other.getNullableList());
      nullableMap(other.getNullableMap());
      nullableObject(other.getNullableObject());
      optionalObject(other.getOptionalObject());
      return this;
    }

    @java.lang.Override
    @JsonSetter("requiredString")
    public _FinalStage requiredString(@NotNull String requiredString) {
      this.requiredString = Objects.requireNonNull(requiredString, "requiredString must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage optionalObject(Organization optionalObject) {
      this.optionalObject = Optional.ofNullable(optionalObject);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "optionalObject",
        nulls = Nulls.SKIP
    )
    public _FinalStage optionalObject(Optional<Organization> optionalObject) {
      this.optionalObject = optionalObject;
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableObject(Nullable<Address> nullableObject) {
      if (nullableObject.isNull()) {
        this.nullableObject = null;
      }
      else if (nullableObject.isEmpty()) {
        this.nullableObject = Optional.empty();
      }
      else {
        this.nullableObject = Optional.of(nullableObject.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableObject(Address nullableObject) {
      this.nullableObject = Optional.ofNullable(nullableObject);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullableObject",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableObject(Optional<Address> nullableObject) {
      this.nullableObject = nullableObject;
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableMap(Nullable<Map<String, Integer>> nullableMap) {
      if (nullableMap.isNull()) {
        this.nullableMap = null;
      }
      else if (nullableMap.isEmpty()) {
        this.nullableMap = Optional.empty();
      }
      else {
        this.nullableMap = Optional.of(nullableMap.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableMap(Map<String, Integer> nullableMap) {
      this.nullableMap = Optional.ofNullable(nullableMap);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullableMap",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableMap(Optional<Map<String, Integer>> nullableMap) {
      this.nullableMap = nullableMap;
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableList(Nullable<List<String>> nullableList) {
      if (nullableList.isNull()) {
        this.nullableList = null;
      }
      else if (nullableList.isEmpty()) {
        this.nullableList = Optional.empty();
      }
      else {
        this.nullableList = Optional.of(nullableList.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableList(List<String> nullableList) {
      this.nullableList = Optional.ofNullable(nullableList);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullableList",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableList(Optional<List<String>> nullableList) {
      this.nullableList = nullableList;
      return this;
    }

    @java.lang.Override
    public _FinalStage optionalUnion(SearchResult optionalUnion) {
      this.optionalUnion = Optional.ofNullable(optionalUnion);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "optionalUnion",
        nulls = Nulls.SKIP
    )
    public _FinalStage optionalUnion(Optional<SearchResult> optionalUnion) {
      this.optionalUnion = optionalUnion;
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableUnion(Nullable<NotificationMethod> nullableUnion) {
      if (nullableUnion.isNull()) {
        this.nullableUnion = null;
      }
      else if (nullableUnion.isEmpty()) {
        this.nullableUnion = Optional.empty();
      }
      else {
        this.nullableUnion = Optional.of(nullableUnion.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableUnion(NotificationMethod nullableUnion) {
      this.nullableUnion = Optional.ofNullable(nullableUnion);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullableUnion",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableUnion(Optional<NotificationMethod> nullableUnion) {
      this.nullableUnion = nullableUnion;
      return this;
    }

    @java.lang.Override
    public _FinalStage optionalEnum(UserStatus optionalEnum) {
      this.optionalEnum = Optional.ofNullable(optionalEnum);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "optionalEnum",
        nulls = Nulls.SKIP
    )
    public _FinalStage optionalEnum(Optional<UserStatus> optionalEnum) {
      this.optionalEnum = optionalEnum;
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableEnum(Nullable<UserRole> nullableEnum) {
      if (nullableEnum.isNull()) {
        this.nullableEnum = null;
      }
      else if (nullableEnum.isEmpty()) {
        this.nullableEnum = Optional.empty();
      }
      else {
        this.nullableEnum = Optional.of(nullableEnum.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableEnum(UserRole nullableEnum) {
      this.nullableEnum = Optional.ofNullable(nullableEnum);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullableEnum",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableEnum(Optional<UserRole> nullableEnum) {
      this.nullableEnum = nullableEnum;
      return this;
    }

    @java.lang.Override
    public _FinalStage optionalNullableString(String optionalNullableString) {
      this.optionalNullableString = Optional.ofNullable(optionalNullableString);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "optionalNullableString",
        nulls = Nulls.SKIP
    )
    public _FinalStage optionalNullableString(Optional<String> optionalNullableString) {
      this.optionalNullableString = optionalNullableString;
      return this;
    }

    @java.lang.Override
    public _FinalStage optionalString(String optionalString) {
      this.optionalString = Optional.ofNullable(optionalString);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "optionalString",
        nulls = Nulls.SKIP
    )
    public _FinalStage optionalString(Optional<String> optionalString) {
      this.optionalString = optionalString;
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableString(Nullable<String> nullableString) {
      if (nullableString.isNull()) {
        this.nullableString = null;
      }
      else if (nullableString.isEmpty()) {
        this.nullableString = Optional.empty();
      }
      else {
        this.nullableString = Optional.of(nullableString.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage nullableString(String nullableString) {
      this.nullableString = Optional.ofNullable(nullableString);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "nullableString",
        nulls = Nulls.SKIP
    )
    public _FinalStage nullableString(Optional<String> nullableString) {
      this.nullableString = nullableString;
      return this;
    }

    @java.lang.Override
    public DeserializationTestRequest build() {
      return new DeserializationTestRequest(requiredString, nullableString, optionalString, optionalNullableString, nullableEnum, optionalEnum, nullableUnion, optionalUnion, nullableList, nullableMap, nullableObject, optionalObject);
    }
  }
}
