/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Address.Builder.class
)
public final class Address {
  private final String street;

  private final Optional<String> city;

  private final Optional<String> state;

  private final String zipCode;

  private final Optional<String> country;

  private Address(String street, Optional<String> city, Optional<String> state, String zipCode,
      Optional<String> country) {
    this.street = street;
    this.city = city;
    this.state = state;
    this.zipCode = zipCode;
    this.country = country;
  }

  @JsonProperty("street")
  public String getStreet() {
    return street;
  }

  @JsonProperty("city")
  public Optional<String> getCity() {
    return city;
  }

  @JsonProperty("state")
  public Optional<String> getState() {
    return state;
  }

  @JsonProperty("zipCode")
  public String getZipCode() {
    return zipCode;
  }

  @JsonProperty("country")
  public Optional<String> getCountry() {
    return country;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Address && equalTo((Address) other);
  }

  private boolean equalTo(Address other) {
    return java.util.Objects.equals(street, other.street) && java.util.Objects.equals(city, other.city) && java.util.Objects.equals(state, other.state) && java.util.Objects.equals(zipCode, other.zipCode) && java.util.Objects.equals(country, other.country);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.street, this.city, this.state, this.zipCode, this.country);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static StreetStage builder() {
    return new Builder();
  }

  public interface StreetStage {
    ZipCodeStage street(@NotNull String street);

    Builder from(Address other);
  }

  public interface ZipCodeStage {
    _FinalStage zipCode(@NotNull String zipCode);
  }

  public interface _FinalStage {
    Address build();

    _FinalStage city(Optional<String> city);

    _FinalStage city(String city);

    _FinalStage state(Optional<String> state);

    _FinalStage state(String state);

    _FinalStage country(Optional<String> country);

    _FinalStage country(String country);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements StreetStage, ZipCodeStage, _FinalStage {
    private String street;

    private String zipCode;

    private Optional<String> country = Optional.empty();

    private Optional<String> state = Optional.empty();

    private Optional<String> city = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(Address other) {
      street(other.getStreet());
      city(other.getCity());
      state(other.getState());
      zipCode(other.getZipCode());
      country(other.getCountry());
      return this;
    }

    @java.lang.Override
    @JsonSetter("street")
    public ZipCodeStage street(@NotNull String street) {
      this.street = Objects.requireNonNull(street, "street must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("zipCode")
    public _FinalStage zipCode(@NotNull String zipCode) {
      this.zipCode = Objects.requireNonNull(zipCode, "zipCode must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage country(String country) {
      this.country = Optional.ofNullable(country);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "country",
        nulls = Nulls.SKIP
    )
    public _FinalStage country(Optional<String> country) {
      this.country = country;
      return this;
    }

    @java.lang.Override
    public _FinalStage state(String state) {
      this.state = Optional.ofNullable(state);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "state",
        nulls = Nulls.SKIP
    )
    public _FinalStage state(Optional<String> state) {
      this.state = state;
      return this;
    }

    @java.lang.Override
    public _FinalStage city(String city) {
      this.city = Optional.ofNullable(city);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "city",
        nulls = Nulls.SKIP
    )
    public _FinalStage city(Optional<String> city) {
      this.city = city;
      return this;
    }

    @java.lang.Override
    public Address build() {
      return new Address(street, city, state, zipCode, country);
    }
  }
}
