/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.Nullable;
import core.NullableNonemptyFilter;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = Address.Builder.class
)
public final class Address {
  private final String street;

  private final Optional<String> city;

  private final Optional<String> state;

  private final String zipCode;

  private final Optional<String> country;

  private final NullableUserId buildingId;

  private final OptionalUserId tenantId;

  private Address(String street, Optional<String> city, Optional<String> state, String zipCode,
      Optional<String> country, NullableUserId buildingId, OptionalUserId tenantId) {
    this.street = street;
    this.city = city;
    this.state = state;
    this.zipCode = zipCode;
    this.country = country;
    this.buildingId = buildingId;
    this.tenantId = tenantId;
  }

  @JsonProperty("street")
  public String getStreet() {
    return street;
  }

  @JsonIgnore
  public Optional<String> getCity() {
    if (city == null) {
      return Optional.empty();
    }
    return city;
  }

  @JsonProperty("state")
  public Optional<String> getState() {
    return state;
  }

  @JsonProperty("zipCode")
  public String getZipCode() {
    return zipCode;
  }

  @JsonProperty("country")
  public Optional<String> getCountry() {
    return country;
  }

  @JsonIgnore
  public NullableUserId getBuildingId() {
    if (buildingId == null) {
      return NullableUserId.of(Optional.empty());
    }
    return buildingId;
  }

  @JsonProperty("tenantId")
  public OptionalUserId getTenantId() {
    return tenantId;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("city")
  private Optional<String> _getCity() {
    return city;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("buildingId")
  private NullableUserId _getBuildingId() {
    return buildingId;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Address && equalTo((Address) other);
  }

  private boolean equalTo(Address other) {
    return street.equals(other.street) && city.equals(other.city) && state.equals(other.state) && zipCode.equals(other.zipCode) && country.equals(other.country) && buildingId.equals(other.buildingId) && tenantId.equals(other.tenantId);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.street, this.city, this.state, this.zipCode, this.country, this.buildingId, this.tenantId);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static StreetStage builder() {
    return new Builder();
  }

  public interface StreetStage {
    ZipCodeStage street(@NotNull String street);

    Builder from(Address other);
  }

  public interface ZipCodeStage {
    TenantIdStage zipCode(@NotNull String zipCode);
  }

  public interface TenantIdStage {
    _FinalStage tenantId(@NotNull OptionalUserId tenantId);
  }

  public interface _FinalStage {
    Address build();

    _FinalStage city(Optional<String> city);

    _FinalStage city(String city);

    _FinalStage city(Nullable<String> city);

    _FinalStage state(Optional<String> state);

    _FinalStage state(String state);

    _FinalStage country(Optional<String> country);

    _FinalStage country(String country);

    _FinalStage buildingId(Nullable<NullableUserId> buildingId);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements StreetStage, ZipCodeStage, TenantIdStage, _FinalStage {
    private String street;

    private String zipCode;

    private OptionalUserId tenantId;

    private Optional<String> country = Optional.empty();

    private Optional<String> state = Optional.empty();

    private Optional<String> city = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(Address other) {
      street(other.getStreet());
      city(other.getCity());
      state(other.getState());
      zipCode(other.getZipCode());
      country(other.getCountry());
      buildingId(other.getBuildingId());
      tenantId(other.getTenantId());
      return this;
    }

    @java.lang.Override
    @JsonSetter("street")
    public ZipCodeStage street(@NotNull String street) {
      this.street = Objects.requireNonNull(street, "street must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("zipCode")
    public TenantIdStage zipCode(@NotNull String zipCode) {
      this.zipCode = Objects.requireNonNull(zipCode, "zipCode must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("tenantId")
    public _FinalStage tenantId(@NotNull OptionalUserId tenantId) {
      this.tenantId = Objects.requireNonNull(tenantId, "tenantId must not be null");
      return this;
    }

    public _FinalStage buildingId(Nullable<NullableUserId> buildingId) {
      if (buildingId.isNull()) {
        this.buildingId = null;
      }
      else if (buildingId.isEmpty()) {
        this.buildingId = NullableUserId.of(Optional.empty());
      }
      else {
        this.buildingId = buildingId.get();
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage country(String country) {
      this.country = Optional.ofNullable(country);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "country",
        nulls = Nulls.SKIP
    )
    public _FinalStage country(Optional<String> country) {
      this.country = country;
      return this;
    }

    @java.lang.Override
    public _FinalStage state(String state) {
      this.state = Optional.ofNullable(state);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "state",
        nulls = Nulls.SKIP
    )
    public _FinalStage state(Optional<String> state) {
      this.state = state;
      return this;
    }

    @java.lang.Override
    public _FinalStage city(Nullable<String> city) {
      if (city.isNull()) {
        this.city = null;
      }
      else if (city.isEmpty()) {
        this.city = Optional.empty();
      }
      else {
        this.city = Optional.of(city.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage city(String city) {
      this.city = Optional.ofNullable(city);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "city",
        nulls = Nulls.SKIP
    )
    public _FinalStage city(Optional<String> city) {
      this.city = city;
      return this;
    }

    @java.lang.Override
    public Address build() {
      return new Address(street, city, state, zipCode, country, buildingId, tenantId);
    }
  }
}
