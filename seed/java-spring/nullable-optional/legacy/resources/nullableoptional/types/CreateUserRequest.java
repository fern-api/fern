/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.Nullable;
import core.NullableNonemptyFilter;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = CreateUserRequest.Builder.class
)
public final class CreateUserRequest {
  private final String username;

  private final Optional<String> email;

  private final Optional<String> phone;

  private final Optional<Address> address;

  private CreateUserRequest(String username, Optional<String> email, Optional<String> phone,
      Optional<Address> address) {
    this.username = username;
    this.email = email;
    this.phone = phone;
    this.address = address;
  }

  @JsonProperty("username")
  public String getUsername() {
    return username;
  }

  @JsonIgnore
  public Optional<String> getEmail() {
    if (email == null) {
      return Optional.empty();
    }
    return email;
  }

  @JsonProperty("phone")
  public Optional<String> getPhone() {
    return phone;
  }

  @JsonProperty("address")
  public Optional<Address> getAddress() {
    return address;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("email")
  private Optional<String> _getEmail() {
    return email;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateUserRequest && equalTo((CreateUserRequest) other);
  }

  private boolean equalTo(CreateUserRequest other) {
    return username.equals(other.username) && email.equals(other.email) && phone.equals(other.phone) && address.equals(other.address);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.username, this.email, this.phone, this.address);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static UsernameStage builder() {
    return new Builder();
  }

  public interface UsernameStage {
    _FinalStage username(@NotNull String username);

    Builder from(CreateUserRequest other);
  }

  public interface _FinalStage {
    CreateUserRequest build();

    _FinalStage email(Optional<String> email);

    _FinalStage email(String email);

    _FinalStage email(Nullable<String> email);

    _FinalStage phone(Optional<String> phone);

    _FinalStage phone(String phone);

    _FinalStage address(Optional<Address> address);

    _FinalStage address(Address address);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UsernameStage, _FinalStage {
    private String username;

    private Optional<Address> address = Optional.empty();

    private Optional<String> phone = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(CreateUserRequest other) {
      username(other.getUsername());
      email(other.getEmail());
      phone(other.getPhone());
      address(other.getAddress());
      return this;
    }

    @java.lang.Override
    @JsonSetter("username")
    public _FinalStage username(@NotNull String username) {
      this.username = Objects.requireNonNull(username, "username must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage address(Address address) {
      this.address = Optional.ofNullable(address);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "address",
        nulls = Nulls.SKIP
    )
    public _FinalStage address(Optional<Address> address) {
      this.address = address;
      return this;
    }

    @java.lang.Override
    public _FinalStage phone(String phone) {
      this.phone = Optional.ofNullable(phone);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "phone",
        nulls = Nulls.SKIP
    )
    public _FinalStage phone(Optional<String> phone) {
      this.phone = phone;
      return this;
    }

    @java.lang.Override
    public _FinalStage email(Nullable<String> email) {
      if (email.isNull()) {
        this.email = null;
      }
      else if (email.isEmpty()) {
        this.email = Optional.empty();
      }
      else {
        this.email = Optional.of(email.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage email(String email) {
      this.email = Optional.ofNullable(email);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public _FinalStage email(Optional<String> email) {
      this.email = email;
      return this;
    }

    @java.lang.Override
    public CreateUserRequest build() {
      return new CreateUserRequest(username, email, phone, address);
    }
  }
}
