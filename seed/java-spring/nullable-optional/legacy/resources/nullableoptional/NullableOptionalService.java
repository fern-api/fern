/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional;

import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import resources.nullableoptional.requests.SearchRequest;
import resources.nullableoptional.requests.UpdateComplexProfileRequest;
import resources.nullableoptional.requests.UpdateTagsRequest;
import resources.nullableoptional.types.ComplexProfile;
import resources.nullableoptional.types.CreateUserRequest;
import resources.nullableoptional.types.DeserializationTestRequest;
import resources.nullableoptional.types.DeserializationTestResponse;
import resources.nullableoptional.types.NotificationMethod;
import resources.nullableoptional.types.SearchResult;
import resources.nullableoptional.types.UpdateUserRequest;
import resources.nullableoptional.types.UserResponse;
import resources.nullableoptional.types.UserRole;
import resources.nullableoptional.types.UserStatus;

@RequestMapping(
    path = "/api"
)
public interface NullableOptionalService {
  @GetMapping(
      value = "/users/{userId}",
      produces = "application/json"
  )
  UserResponse getUser(@PathVariable("userId") String userId);

  @PostMapping(
      value = "/users",
      produces = "application/json",
      consumes = "application/json"
  )
  UserResponse createUser(@RequestBody CreateUserRequest body);

  @PatchMapping(
      value = "/users/{userId}",
      produces = "application/json",
      consumes = "application/json"
  )
  UserResponse updateUser(@PathVariable("userId") String userId,
      @RequestBody UpdateUserRequest body);

  @GetMapping(
      value = "/users",
      produces = "application/json"
  )
  List<UserResponse> listUsers(@RequestParam("limit") Optional<Integer> limit,
      @RequestParam("offset") Optional<Integer> offset,
      @RequestParam("includeDeleted") Optional<Boolean> includeDeleted,
      @RequestParam("sortBy") Optional<String> sortBy);

  @GetMapping(
      value = "/users/search",
      produces = "application/json"
  )
  List<UserResponse> searchUsers(@RequestParam("query") String query,
      @RequestParam("department") Optional<String> department,
      @RequestParam("role") Optional<String> role,
      @RequestParam("isActive") Optional<Boolean> isActive);

  @PostMapping(
      value = "/profiles/complex",
      produces = "application/json",
      consumes = "application/json"
  )
  ComplexProfile createComplexProfile(@RequestBody ComplexProfile body);

  @GetMapping(
      value = "/profiles/complex/{profileId}",
      produces = "application/json"
  )
  ComplexProfile getComplexProfile(@PathVariable("profileId") String profileId);

  @PatchMapping(
      value = "/profiles/complex/{profileId}",
      produces = "application/json",
      consumes = "application/json"
  )
  ComplexProfile updateComplexProfile(@PathVariable("profileId") String profileId,
      @RequestBody UpdateComplexProfileRequest body);

  @PostMapping(
      value = "/test/deserialization",
      produces = "application/json",
      consumes = "application/json"
  )
  DeserializationTestResponse testDeserialization(@RequestBody DeserializationTestRequest body);

  @GetMapping(
      value = "/users/filter",
      produces = "application/json"
  )
  List<UserResponse> filterByRole(@RequestParam("role") Optional<UserRole> role,
      @RequestParam("status") Optional<UserStatus> status,
      @RequestParam("secondaryRole") Optional<UserRole> secondaryRole);

  @GetMapping(
      value = "/users/{userId}/notifications",
      produces = "application/json"
  )
  Optional<NotificationMethod> getNotificationSettings(@PathVariable("userId") String userId);

  @PutMapping(
      value = "/users/{userId}/tags",
      produces = "application/json",
      consumes = "application/json"
  )
  List<String> updateTags(@PathVariable("userId") String userId,
      @RequestBody UpdateTagsRequest body);

  @PostMapping(
      value = "/search",
      produces = "application/json",
      consumes = "application/json"
  )
  Optional<List<SearchResult>> getSearchResults(@RequestBody SearchRequest body);
}
