/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.Nullable;
import core.NullableNonemptyFilter;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = SearchRequest.Builder.class
)
public final class SearchRequest {
  private final String query;

  private final Optional<Map<String, Optional<String>>> filters;

  private final Optional<List<String>> includeTypes;

  private SearchRequest(String query, Optional<Map<String, Optional<String>>> filters,
      Optional<List<String>> includeTypes) {
    this.query = query;
    this.filters = filters;
    this.includeTypes = includeTypes;
  }

  @JsonProperty("query")
  public String getQuery() {
    return query;
  }

  @JsonProperty("filters")
  public Optional<Map<String, Optional<String>>> getFilters() {
    return filters;
  }

  @JsonIgnore
  public Optional<List<String>> getIncludeTypes() {
    if (includeTypes == null) {
      return Optional.empty();
    }
    return includeTypes;
  }

  @JsonInclude(
      value = JsonInclude.Include.CUSTOM,
      valueFilter = NullableNonemptyFilter.class
  )
  @JsonProperty("includeTypes")
  private Optional<List<String>> _getIncludeTypes() {
    return includeTypes;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SearchRequest && equalTo((SearchRequest) other);
  }

  private boolean equalTo(SearchRequest other) {
    return query.equals(other.query) && filters.equals(other.filters) && includeTypes.equals(other.includeTypes);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.query, this.filters, this.includeTypes);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static QueryStage builder() {
    return new Builder();
  }

  public interface QueryStage {
    _FinalStage query(@NotNull String query);

    Builder from(SearchRequest other);
  }

  public interface _FinalStage {
    SearchRequest build();

    _FinalStage filters(Optional<Map<String, Optional<String>>> filters);

    _FinalStage filters(Map<String, Optional<String>> filters);

    _FinalStage includeTypes(Optional<List<String>> includeTypes);

    _FinalStage includeTypes(List<String> includeTypes);

    _FinalStage includeTypes(Nullable<List<String>> includeTypes);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements QueryStage, _FinalStage {
    private String query;

    private Optional<List<String>> includeTypes = Optional.empty();

    private Optional<Map<String, Optional<String>>> filters = Optional.empty();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(SearchRequest other) {
      query(other.getQuery());
      filters(other.getFilters());
      includeTypes(other.getIncludeTypes());
      return this;
    }

    @java.lang.Override
    @JsonSetter("query")
    public _FinalStage query(@NotNull String query) {
      this.query = Objects.requireNonNull(query, "query must not be null");
      return this;
    }

    @java.lang.Override
    public _FinalStage includeTypes(Nullable<List<String>> includeTypes) {
      if (includeTypes.isNull()) {
        this.includeTypes = null;
      }
      else if (includeTypes.isEmpty()) {
        this.includeTypes = Optional.empty();
      }
      else {
        this.includeTypes = Optional.of(includeTypes.get());
      }
      return this;
    }

    @java.lang.Override
    public _FinalStage includeTypes(List<String> includeTypes) {
      this.includeTypes = Optional.ofNullable(includeTypes);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "includeTypes",
        nulls = Nulls.SKIP
    )
    public _FinalStage includeTypes(Optional<List<String>> includeTypes) {
      this.includeTypes = includeTypes;
      return this;
    }

    @java.lang.Override
    public _FinalStage filters(Map<String, Optional<String>> filters) {
      this.filters = Optional.ofNullable(filters);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "filters",
        nulls = Nulls.SKIP
    )
    public _FinalStage filters(Optional<Map<String, Optional<String>>> filters) {
      this.filters = filters;
      return this;
    }

    @java.lang.Override
    public SearchRequest build() {
      return new SearchRequest(query, filters, includeTypes);
    }
  }
}
