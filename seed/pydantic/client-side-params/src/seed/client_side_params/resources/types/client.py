# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class Client(UniversalBaseModel):
    """
    Represents a client application
    """

    client_id: str = pydantic.Field()
    """
    The unique client identifier
    """

    tenant: typing.Optional[str] = pydantic.Field(default=None)
    """
    The tenant name
    """

    name: str = pydantic.Field()
    """
    Name of the client
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Free text description of the client
    """

    global_: typing.Optional[bool] = pydantic.Field(alias="global", default=None)
    """
    Whether this is a global client
    """

    client_secret: typing.Optional[str] = pydantic.Field(default=None)
    """
    The client secret (only for non-public clients)
    """

    app_type: typing.Optional[str] = pydantic.Field(default=None)
    """
    The type of application (spa, native, regular_web, non_interactive)
    """

    logo_uri: typing.Optional[str] = pydantic.Field(default=None)
    """
    URL of the client logo
    """

    is_first_party: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this client is a first party client
    """

    oidc_conformant: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this client conforms to OIDC specifications
    """

    callbacks: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Allowed callback URLs
    """

    allowed_origins: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Allowed origins for CORS
    """

    web_origins: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Allowed web origins for CORS
    """

    grant_types: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Allowed grant types
    """

    jwt_configuration: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    JWT configuration for the client
    """

    signing_keys: typing.Optional[typing.List[typing.Dict[str, typing.Optional[typing.Any]]]] = pydantic.Field(
        default=None
    )
    """
    Client signing keys
    """

    encryption_key: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Encryption key
    """

    sso: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether SSO is enabled
    """

    sso_disabled: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether SSO is disabled
    """

    cross_origin_auth: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether to use cross-origin authentication
    """

    cross_origin_loc: typing.Optional[str] = pydantic.Field(default=None)
    """
    URL for cross-origin authentication
    """

    custom_login_page_on: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether a custom login page is enabled
    """

    custom_login_page: typing.Optional[str] = pydantic.Field(default=None)
    """
    Custom login page URL
    """

    custom_login_page_preview: typing.Optional[str] = pydantic.Field(default=None)
    """
    Custom login page preview URL
    """

    form_template: typing.Optional[str] = pydantic.Field(default=None)
    """
    Form template for WS-Federation
    """

    is_heroku_app: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this is a Heroku application
    """

    addons: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Addons enabled for this client
    """

    token_endpoint_auth_method: typing.Optional[str] = pydantic.Field(default=None)
    """
    Requested authentication method for the token endpoint
    """

    client_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Metadata associated with the client
    """

    mobile: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Mobile app settings
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
