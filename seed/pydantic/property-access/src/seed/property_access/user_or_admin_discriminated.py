# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from .admin import Admin
from .core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .foo import Foo
from .user_profile import UserProfile


class Base(UniversalBaseModel):
    normal: str
    foo: Foo

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class UserOrAdminDiscriminated_User(Base):
    """
    Example of an discriminated union
    """

    type: typing.Literal["user"] = "user"
    id: str
    email: str
    password: str
    profile: UserProfile

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class UserOrAdminDiscriminated_Admin(Base):
    admin: Admin
    type: typing.Literal["admin"] = "admin"


class UserOrAdminDiscriminated_Empty(Base):
    """
    Example of an discriminated union
    """

    type: typing.Literal["empty"] = "empty"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


UserOrAdminDiscriminated = typing.Union[
    UserOrAdminDiscriminated_User, UserOrAdminDiscriminated_Admin, UserOrAdminDiscriminated_Empty
]
