# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class Base(UniversalBaseModel):
    """
    Examples
    --------
    from seed.unions.resources import Shape_Circle
    Shape_Circle(radius=5.0, )
    """

    id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Shape_Circle(Base):
    """
    Examples
    --------
    from seed.unions.resources import Shape_Circle
    Shape_Circle(radius=5.0, )
    """

    type: typing.Literal["circle"] = "circle"
    radius: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class Shape_Square(Base):
    """
    Examples
    --------
    from seed.unions.resources import Shape_Circle
    Shape_Circle(radius=5.0, )
    """

    type: typing.Literal["square"] = "square"
    length: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


"""
from seed.unions.resources import Shape_Circle
Shape_Circle(radius=5.0, )
"""
Shape = typing.Union[Shape_Circle, Shape_Square]
