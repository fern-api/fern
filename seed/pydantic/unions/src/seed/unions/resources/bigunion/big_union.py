# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import datetime as dt
import pydantic
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class Base(UniversalBaseModel):
    id: str
    created_at: dt.datetime = pydantic.Field(alias="created-at")
    archived_at: typing.Optional[dt.datetime] = pydantic.Field(alias="archived-at", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_NormalSweet(Base):
    type: typing.Literal["normalSweet"] = "normalSweet"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_ThankfulFactor(Base):
    type: typing.Literal["thankfulFactor"] = "thankfulFactor"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_JumboEnd(Base):
    type: typing.Literal["jumboEnd"] = "jumboEnd"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_HastyPain(Base):
    type: typing.Literal["hastyPain"] = "hastyPain"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_MistySnow(Base):
    type: typing.Literal["mistySnow"] = "mistySnow"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_DistinctFailure(Base):
    type: typing.Literal["distinctFailure"] = "distinctFailure"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_PracticalPrinciple(Base):
    type: typing.Literal["practicalPrinciple"] = "practicalPrinciple"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_LimpingStep(Base):
    type: typing.Literal["limpingStep"] = "limpingStep"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_VibrantExcitement(Base):
    type: typing.Literal["vibrantExcitement"] = "vibrantExcitement"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_ActiveDiamond(Base):
    type: typing.Literal["activeDiamond"] = "activeDiamond"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_PopularLimit(Base):
    type: typing.Literal["popularLimit"] = "popularLimit"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_FalseMirror(Base):
    type: typing.Literal["falseMirror"] = "falseMirror"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_PrimaryBlock(Base):
    type: typing.Literal["primaryBlock"] = "primaryBlock"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_RotatingRatio(Base):
    type: typing.Literal["rotatingRatio"] = "rotatingRatio"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_ColorfulCover(Base):
    type: typing.Literal["colorfulCover"] = "colorfulCover"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_DisloyalValue(Base):
    type: typing.Literal["disloyalValue"] = "disloyalValue"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_GruesomeCoach(Base):
    type: typing.Literal["gruesomeCoach"] = "gruesomeCoach"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_TotalWork(Base):
    type: typing.Literal["totalWork"] = "totalWork"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_HarmoniousPlay(Base):
    type: typing.Literal["harmoniousPlay"] = "harmoniousPlay"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_UniqueStress(Base):
    type: typing.Literal["uniqueStress"] = "uniqueStress"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_UnwillingSmoke(Base):
    type: typing.Literal["unwillingSmoke"] = "unwillingSmoke"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_FrozenSleep(Base):
    type: typing.Literal["frozenSleep"] = "frozenSleep"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_DiligentDeal(Base):
    type: typing.Literal["diligentDeal"] = "diligentDeal"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_AttractiveScript(Base):
    type: typing.Literal["attractiveScript"] = "attractiveScript"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_HoarseMouse(Base):
    type: typing.Literal["hoarseMouse"] = "hoarseMouse"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_CircularCard(Base):
    type: typing.Literal["circularCard"] = "circularCard"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_PotableBad(Base):
    type: typing.Literal["potableBad"] = "potableBad"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_TriangularRepair(Base):
    type: typing.Literal["triangularRepair"] = "triangularRepair"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class BigUnion_GaseousRoad(Base):
    type: typing.Literal["gaseousRoad"] = "gaseousRoad"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


BigUnion = typing.Union[
    BigUnion_NormalSweet,
    BigUnion_ThankfulFactor,
    BigUnion_JumboEnd,
    BigUnion_HastyPain,
    BigUnion_MistySnow,
    BigUnion_DistinctFailure,
    BigUnion_PracticalPrinciple,
    BigUnion_LimpingStep,
    BigUnion_VibrantExcitement,
    BigUnion_ActiveDiamond,
    BigUnion_PopularLimit,
    BigUnion_FalseMirror,
    BigUnion_PrimaryBlock,
    BigUnion_RotatingRatio,
    BigUnion_ColorfulCover,
    BigUnion_DisloyalValue,
    BigUnion_GruesomeCoach,
    BigUnion_TotalWork,
    BigUnion_HarmoniousPlay,
    BigUnion_UniqueStress,
    BigUnion_UnwillingSmoke,
    BigUnion_FrozenSleep,
    BigUnion_DiligentDeal,
    BigUnion_AttractiveScript,
    BigUnion_HoarseMouse,
    BigUnion_CircularCard,
    BigUnion_PotableBad,
    BigUnion_TriangularRepair,
    BigUnion_GaseousRoad,
]
