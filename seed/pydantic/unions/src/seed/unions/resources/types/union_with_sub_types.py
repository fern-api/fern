# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class UnionWithSubTypes_Foo(UniversalBaseModel):
    """
    Examples
    --------
    from seed.unions.resources import UnionWithSubTypes_Foo
    UnionWithSubTypes_Foo(name='example1', )
    """

    type: typing.Literal["foo"] = "foo"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class UnionWithSubTypes_FooExtended(UniversalBaseModel):
    """
    Examples
    --------
    from seed.unions.resources import UnionWithSubTypes_Foo
    UnionWithSubTypes_Foo(name='example1', )
    """

    type: typing.Literal["fooExtended"] = "fooExtended"
    age: int
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


"""
from seed.unions.resources import UnionWithSubTypes_Foo
UnionWithSubTypes_Foo(name='example1', )
"""
UnionWithSubTypes = typing.Union[UnionWithSubTypes_Foo, UnionWithSubTypes_FooExtended]
