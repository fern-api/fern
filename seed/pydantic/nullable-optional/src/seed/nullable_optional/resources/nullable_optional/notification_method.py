# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class NotificationMethod_Email(UniversalBaseModel):
    """
    Discriminated union for testing nullable unions
    """

    type: typing.Literal["email"] = "email"
    email_address: str = pydantic.Field(alias="emailAddress")
    subject: str
    html_content: typing.Optional[str] = pydantic.Field(alias="htmlContent", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class NotificationMethod_Sms(UniversalBaseModel):
    """
    Discriminated union for testing nullable unions
    """

    type: typing.Literal["sms"] = "sms"
    phone_number: str = pydantic.Field(alias="phoneNumber")
    message: str
    short_code: typing.Optional[str] = pydantic.Field(alias="shortCode", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class NotificationMethod_Push(UniversalBaseModel):
    """
    Discriminated union for testing nullable unions
    """

    type: typing.Literal["push"] = "push"
    device_token: str = pydantic.Field(alias="deviceToken")
    title: str
    body: str
    badge: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


NotificationMethod = typing.Union[NotificationMethod_Email, NotificationMethod_Sms, NotificationMethod_Push]
