# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .address import Address


class UserProfile(UniversalBaseModel):
    """
    Test object with nullable and optional fields
    """

    id: str
    username: str
    nullable_string: typing.Optional[str] = pydantic.Field(alias="nullableString", default=None)
    nullable_integer: typing.Optional[int] = pydantic.Field(alias="nullableInteger", default=None)
    nullable_boolean: typing.Optional[bool] = pydantic.Field(alias="nullableBoolean", default=None)
    nullable_date: typing.Optional[dt.datetime] = pydantic.Field(alias="nullableDate", default=None)
    nullable_object: typing.Optional[Address] = pydantic.Field(alias="nullableObject", default=None)
    nullable_list: typing.Optional[typing.List[str]] = pydantic.Field(alias="nullableList", default=None)
    nullable_map: typing.Optional[typing.Dict[str, str]] = pydantic.Field(alias="nullableMap", default=None)
    optional_string: typing.Optional[str] = pydantic.Field(alias="optionalString", default=None)
    optional_integer: typing.Optional[int] = pydantic.Field(alias="optionalInteger", default=None)
    optional_boolean: typing.Optional[bool] = pydantic.Field(alias="optionalBoolean", default=None)
    optional_date: typing.Optional[dt.datetime] = pydantic.Field(alias="optionalDate", default=None)
    optional_object: typing.Optional[Address] = pydantic.Field(alias="optionalObject", default=None)
    optional_list: typing.Optional[typing.List[str]] = pydantic.Field(alias="optionalList", default=None)
    optional_map: typing.Optional[typing.Dict[str, str]] = pydantic.Field(alias="optionalMap", default=None)
    optional_nullable_string: typing.Optional[str] = pydantic.Field(alias="optionalNullableString", default=None)
    optional_nullable_object: typing.Optional[Address] = pydantic.Field(alias="optionalNullableObject", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
