syntax = "proto3";

package data.v1;

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

option csharp_namespace = "Data.V1.Grpc";
option go_package = "github.com/acme.co/data-go-grpc";

message IndexedData {
  repeated uint32 indices = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  repeated float values = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
}

message Column {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  repeated float values = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
  google.protobuf.Struct metadata = 3;
  IndexedData indexed_data = 4;
}

message ScoredColumn {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  float score = 2;
  repeated float values = 3;
  google.protobuf.Struct metadata = 4;
  IndexedData indexed_data = 5;
}

message UploadRequest {
  repeated Column columns = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string namespace = 2;
}

message UploadResponse {
  uint32 count = 1;
}

message DeleteRequest {
  repeated string ids = 1;
  bool delete_all = 2;
  string namespace  = 3;
  google.protobuf.Struct filter = 4;
}

message DeleteResponse {}

message FetchRequest {
  repeated string ids = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  string namespace = 2;
}

message FetchResponse {
  map<string, Column> columns = 1;
  string namespace = 2;
  optional Usage usage = 3;
}

message ListRequest {
  optional string prefix = 1;
  optional uint32 limit = 2;
  optional string pagination_token = 3;
  string namespace = 4;
}

message Pagination {
  string next = 1;
}

message ListElement {
  string id = 1;
}

message ListResponse {
  repeated ListElement columns = 1;
  optional Pagination pagination = 2;
  string namespace = 3;
  optional Usage usage = 4;
}

message QueryColumn {
  repeated float values = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  uint32 top_k = 2;
  string namespace = 3;
  google.protobuf.Struct filter = 4;
  IndexedData indexed_data = 5;
}

message QueryRequest {
  string namespace = 1;
  uint32 top_k = 2 [
    (google.api.field_behavior) = REQUIRED
  ];
  google.protobuf.Struct filter = 3;
  bool include_values = 4;
  bool include_metadata = 5;
  repeated QueryColumn queries = 6 [
    deprecated = true
  ];
  repeated float column = 7;
  string id = 8;
  IndexedData indexed_data = 9;
}

message QueryResult {
  repeated ScoredColumn matches = 1;
  string namespace = 2;
}

message QueryResponse {
  repeated QueryResult results = 1 [deprecated=true];
  repeated ScoredColumn matches = 2;
  string namespace = 3;
  optional Usage usage = 4;
}

message Usage {
  optional uint32 units = 1;
}

message UpdateRequest {
  string id = 1 [
    (google.api.field_behavior) = REQUIRED
  ];
  repeated float values = 2;
  google.protobuf.Struct set_metadata = 3;
  string namespace = 4;
  IndexedData indexed_data = 5;
}

message UpdateResponse {}

message DescribeRequest {
  google.protobuf.Struct filter = 1;
}

message NamespaceSummary {
  uint32 count = 1;
}

message DescribeResponse {
  map<string, NamespaceSummary> namespaces = 1;
  uint32 dimension  = 2;
  float fullness = 3;
  uint32 total_count = 4;
}

service DataService {
  rpc Upload(UploadRequest) returns (UploadResponse) {
    option (google.api.http) = {
      post: "/data"
      body: "*"
    };
  }

  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      post: "/data/delete"
      body: "*"
    };
  }

  rpc Fetch(FetchRequest) returns (FetchResponse) {
    option (google.api.http) = {
      get: "/data/fetch"
    };
  }

  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/data/list"
    };
  }

  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/data/query"
      body: "*"
    };
  }

  rpc Update(UpdateRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      post: "/data/update"
      body: "*"
    };
  }

  rpc Describe(DescribeRequest) returns (DescribeResponse) {
    option (google.api.http) = {
      post: "/data/describe"
      body: "*"
    };
  }
}
