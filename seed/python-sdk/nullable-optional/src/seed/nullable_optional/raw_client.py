# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.address import Address
from .types.user_response import UserResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawNullableOptionalClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_user(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[UserResponse]:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_user(
        self,
        *,
        username: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UserResponse]:
        """
        Create a new user

        Parameters
        ----------
        username : str

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/users",
            method="POST",
            json={
                "username": username,
                "email": email,
                "phone": phone,
                "address": convert_and_respect_annotation_metadata(
                    object_=address, annotation=typing.Optional[Address], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_user(
        self,
        user_id: str,
        *,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[UserResponse]:
        """
        Update a user (partial update)

        Parameters
        ----------
        user_id : str

        username : typing.Optional[str]

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="PATCH",
            json={
                "username": username,
                "email": email,
                "phone": phone,
                "address": convert_and_respect_annotation_metadata(
                    object_=address, annotation=typing.Optional[Address], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_users(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        include_deleted: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[UserResponse]]:
        """
        List all users

        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        include_deleted : typing.Optional[bool]

        sort_by : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[UserResponse]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/users",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "includeDeleted": include_deleted,
                "sortBy": sort_by,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[UserResponse],
                    parse_obj_as(
                        type_=typing.List[UserResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def search_users(
        self,
        *,
        query: str,
        department: typing.Optional[str] = None,
        role: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[UserResponse]]:
        """
        Search users

        Parameters
        ----------
        query : str

        department : typing.Optional[str]

        role : typing.Optional[str]

        is_active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[UserResponse]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/users/search",
            method="GET",
            params={
                "query": query,
                "department": department,
                "role": role,
                "isActive": is_active,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[UserResponse],
                    parse_obj_as(
                        type_=typing.List[UserResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawNullableOptionalClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_user(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[UserResponse]:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_user(
        self,
        *,
        username: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UserResponse]:
        """
        Create a new user

        Parameters
        ----------
        username : str

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/users",
            method="POST",
            json={
                "username": username,
                "email": email,
                "phone": phone,
                "address": convert_and_respect_annotation_metadata(
                    object_=address, annotation=typing.Optional[Address], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_user(
        self,
        user_id: str,
        *,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[UserResponse]:
        """
        Update a user (partial update)

        Parameters
        ----------
        user_id : str

        username : typing.Optional[str]

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="PATCH",
            json={
                "username": username,
                "email": email,
                "phone": phone,
                "address": convert_and_respect_annotation_metadata(
                    object_=address, annotation=typing.Optional[Address], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserResponse,
                    parse_obj_as(
                        type_=UserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_users(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        include_deleted: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[UserResponse]]:
        """
        List all users

        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        include_deleted : typing.Optional[bool]

        sort_by : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[UserResponse]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/users",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "includeDeleted": include_deleted,
                "sortBy": sort_by,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[UserResponse],
                    parse_obj_as(
                        type_=typing.List[UserResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def search_users(
        self,
        *,
        query: str,
        department: typing.Optional[str] = None,
        role: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[UserResponse]]:
        """
        Search users

        Parameters
        ----------
        query : str

        department : typing.Optional[str]

        role : typing.Optional[str]

        is_active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[UserResponse]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/users/search",
            method="GET",
            params={
                "query": query,
                "department": department,
                "role": role,
                "isActive": is_active,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[UserResponse],
                    parse_obj_as(
                        type_=typing.List[UserResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
