# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawNullableOptionalClient, RawNullableOptionalClient
from .types.address import Address
from .types.user_response import UserResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NullableOptionalClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNullableOptionalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNullableOptionalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNullableOptionalClient
        """
        return self._raw_client

    def get_user(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> UserResponse:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.get_user(
            user_id="userId",
        )
        """
        _response = self._raw_client.get_user(user_id, request_options=request_options)
        return _response.data

    def create_user(
        self,
        *,
        username: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Create a new user

        Parameters
        ----------
        username : str

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        from seed import SeedNullableOptional
        from seed.nullable_optional import Address

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.create_user(
            username="username",
            email="email",
            phone="phone",
            address=Address(
                street="street",
                city="city",
                state="state",
                zip_code="zipCode",
                country="country",
            ),
        )
        """
        _response = self._raw_client.create_user(
            username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    def update_user(
        self,
        user_id: str,
        *,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Update a user (partial update)

        Parameters
        ----------
        user_id : str

        username : typing.Optional[str]

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        from seed import SeedNullableOptional
        from seed.nullable_optional import Address

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.update_user(
            user_id="userId",
            username="username",
            email="email",
            phone="phone",
            address=Address(
                street="street",
                city="city",
                state="state",
                zip_code="zipCode",
                country="country",
            ),
        )
        """
        _response = self._raw_client.update_user(
            user_id, username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    def list_users(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        include_deleted: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        List all users

        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        include_deleted : typing.Optional[bool]

        sort_by : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.list_users(
            limit=1,
            offset=1,
            include_deleted=True,
            sort_by="sortBy",
        )
        """
        _response = self._raw_client.list_users(
            limit=limit,
            offset=offset,
            include_deleted=include_deleted,
            sort_by=sort_by,
            request_options=request_options,
        )
        return _response.data

    def search_users(
        self,
        *,
        query: str,
        department: typing.Optional[str] = None,
        role: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        Search users

        Parameters
        ----------
        query : str

        department : typing.Optional[str]

        role : typing.Optional[str]

        is_active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.search_users(
            query="query",
            department="department",
            role="role",
            is_active=True,
        )
        """
        _response = self._raw_client.search_users(
            query=query, department=department, role=role, is_active=is_active, request_options=request_options
        )
        return _response.data


class AsyncNullableOptionalClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNullableOptionalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNullableOptionalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNullableOptionalClient
        """
        return self._raw_client

    async def get_user(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> UserResponse:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.get_user(
                user_id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user(user_id, request_options=request_options)
        return _response.data

    async def create_user(
        self,
        *,
        username: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Create a new user

        Parameters
        ----------
        username : str

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional
        from seed.nullable_optional import Address

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.create_user(
                username="username",
                email="email",
                phone="phone",
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_user(
            username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    async def update_user(
        self,
        user_id: str,
        *,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Update a user (partial update)

        Parameters
        ----------
        user_id : str

        username : typing.Optional[str]

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional
        from seed.nullable_optional import Address

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.update_user(
                user_id="userId",
                username="username",
                email="email",
                phone="phone",
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_user(
            user_id, username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    async def list_users(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        include_deleted: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        List all users

        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        include_deleted : typing.Optional[bool]

        sort_by : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.list_users(
                limit=1,
                offset=1,
                include_deleted=True,
                sort_by="sortBy",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_users(
            limit=limit,
            offset=offset,
            include_deleted=include_deleted,
            sort_by=sort_by,
            request_options=request_options,
        )
        return _response.data

    async def search_users(
        self,
        *,
        query: str,
        department: typing.Optional[str] = None,
        role: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        Search users

        Parameters
        ----------
        query : str

        department : typing.Optional[str]

        role : typing.Optional[str]

        is_active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.search_users(
                query="query",
                department="department",
                role="role",
                is_active=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_users(
            query=query, department=department, role=role, is_active=is_active, request_options=request_options
        )
        return _response.data
