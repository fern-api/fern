# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawNullableOptionalClient, RawNullableOptionalClient
from .types.address import Address
from .types.complex_profile import ComplexProfile
from .types.deserialization_test_response import DeserializationTestResponse
from .types.notification_method import NotificationMethod
from .types.organization import Organization
from .types.search_result import SearchResult
from .types.user_response import UserResponse
from .types.user_role import UserRole
from .types.user_status import UserStatus

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NullableOptionalClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNullableOptionalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNullableOptionalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNullableOptionalClient
        """
        return self._raw_client

    def get_user(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> UserResponse:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.get_user(
            user_id="userId",
        )
        """
        _response = self._raw_client.get_user(user_id, request_options=request_options)
        return _response.data

    def create_user(
        self,
        *,
        username: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Create a new user

        Parameters
        ----------
        username : str

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        from seed import SeedNullableOptional
        from seed.nullable_optional import Address

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.create_user(
            username="username",
            email="email",
            phone="phone",
            address=Address(
                street="street",
                city="city",
                state="state",
                zip_code="zipCode",
                country="country",
                building_id="buildingId",
                tenant_id="tenantId",
            ),
        )
        """
        _response = self._raw_client.create_user(
            username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    def update_user(
        self,
        user_id: str,
        *,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Update a user (partial update)

        Parameters
        ----------
        user_id : str

        username : typing.Optional[str]

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        from seed import SeedNullableOptional
        from seed.nullable_optional import Address

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.update_user(
            user_id="userId",
            username="username",
            email="email",
            phone="phone",
            address=Address(
                street="street",
                city="city",
                state="state",
                zip_code="zipCode",
                country="country",
                building_id="buildingId",
                tenant_id="tenantId",
            ),
        )
        """
        _response = self._raw_client.update_user(
            user_id, username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    def list_users(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        include_deleted: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        List all users

        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        include_deleted : typing.Optional[bool]

        sort_by : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.list_users(
            limit=1,
            offset=1,
            include_deleted=True,
            sort_by="sortBy",
        )
        """
        _response = self._raw_client.list_users(
            limit=limit,
            offset=offset,
            include_deleted=include_deleted,
            sort_by=sort_by,
            request_options=request_options,
        )
        return _response.data

    def search_users(
        self,
        *,
        query: str,
        department: typing.Optional[str] = None,
        role: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        Search users

        Parameters
        ----------
        query : str

        department : typing.Optional[str]

        role : typing.Optional[str]

        is_active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.search_users(
            query="query",
            department="department",
            role="role",
            is_active=True,
        )
        """
        _response = self._raw_client.search_users(
            query=query, department=department, role=role, is_active=is_active, request_options=request_options
        )
        return _response.data

    def create_complex_profile(
        self,
        *,
        id: str,
        nullable_role: typing.Optional[UserRole] = OMIT,
        optional_role: typing.Optional[UserRole] = OMIT,
        optional_nullable_role: typing.Optional[UserRole] = OMIT,
        nullable_status: typing.Optional[UserStatus] = OMIT,
        optional_status: typing.Optional[UserStatus] = OMIT,
        optional_nullable_status: typing.Optional[UserStatus] = OMIT,
        nullable_notification: typing.Optional[NotificationMethod] = OMIT,
        optional_notification: typing.Optional[NotificationMethod] = OMIT,
        optional_nullable_notification: typing.Optional[NotificationMethod] = OMIT,
        nullable_search_result: typing.Optional[SearchResult] = OMIT,
        optional_search_result: typing.Optional[SearchResult] = OMIT,
        nullable_array: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_array: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_nullable_array: typing.Optional[typing.Sequence[str]] = OMIT,
        nullable_list_of_nullables: typing.Optional[typing.Sequence[typing.Optional[str]]] = OMIT,
        nullable_map_of_nullables: typing.Optional[typing.Dict[str, typing.Optional[Address]]] = OMIT,
        nullable_list_of_unions: typing.Optional[typing.Sequence[NotificationMethod]] = OMIT,
        optional_map_of_enums: typing.Optional[typing.Dict[str, UserRole]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComplexProfile:
        """
        Create a complex profile to test nullable enums and unions

        Parameters
        ----------
        id : str

        nullable_role : typing.Optional[UserRole]

        optional_role : typing.Optional[UserRole]

        optional_nullable_role : typing.Optional[UserRole]

        nullable_status : typing.Optional[UserStatus]

        optional_status : typing.Optional[UserStatus]

        optional_nullable_status : typing.Optional[UserStatus]

        nullable_notification : typing.Optional[NotificationMethod]

        optional_notification : typing.Optional[NotificationMethod]

        optional_nullable_notification : typing.Optional[NotificationMethod]

        nullable_search_result : typing.Optional[SearchResult]

        optional_search_result : typing.Optional[SearchResult]

        nullable_array : typing.Optional[typing.Sequence[str]]

        optional_array : typing.Optional[typing.Sequence[str]]

        optional_nullable_array : typing.Optional[typing.Sequence[str]]

        nullable_list_of_nullables : typing.Optional[typing.Sequence[typing.Optional[str]]]

        nullable_map_of_nullables : typing.Optional[typing.Dict[str, typing.Optional[Address]]]

        nullable_list_of_unions : typing.Optional[typing.Sequence[NotificationMethod]]

        optional_map_of_enums : typing.Optional[typing.Dict[str, UserRole]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComplexProfile

        Examples
        --------
        import datetime

        from seed import SeedNullableOptional
        from seed.nullable_optional import (
            Address,
            NotificationMethod_Email,
            SearchResult_User,
        )

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.create_complex_profile(
            id="id",
            nullable_role="ADMIN",
            optional_role="ADMIN",
            optional_nullable_role="ADMIN",
            nullable_status="active",
            optional_status="active",
            optional_nullable_status="active",
            nullable_notification=NotificationMethod_Email(
                email_address="emailAddress",
                subject="subject",
                html_content="htmlContent",
            ),
            optional_notification=NotificationMethod_Email(
                email_address="emailAddress",
                subject="subject",
                html_content="htmlContent",
            ),
            optional_nullable_notification=NotificationMethod_Email(
                email_address="emailAddress",
                subject="subject",
                html_content="htmlContent",
            ),
            nullable_search_result=SearchResult_User(
                id="id",
                username="username",
                email="email",
                phone="phone",
                created_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                ),
            ),
            optional_search_result=SearchResult_User(
                id="id",
                username="username",
                email="email",
                phone="phone",
                created_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                ),
            ),
            nullable_array=["nullableArray", "nullableArray"],
            optional_array=["optionalArray", "optionalArray"],
            optional_nullable_array=["optionalNullableArray", "optionalNullableArray"],
            nullable_list_of_nullables=[
                "nullableListOfNullables",
                "nullableListOfNullables",
            ],
            nullable_map_of_nullables={
                "nullableMapOfNullables": Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                )
            },
            nullable_list_of_unions=[
                NotificationMethod_Email(
                    email_address="emailAddress",
                    subject="subject",
                    html_content="htmlContent",
                ),
                NotificationMethod_Email(
                    email_address="emailAddress",
                    subject="subject",
                    html_content="htmlContent",
                ),
            ],
            optional_map_of_enums={"optionalMapOfEnums": "ADMIN"},
        )
        """
        _response = self._raw_client.create_complex_profile(
            id=id,
            nullable_role=nullable_role,
            optional_role=optional_role,
            optional_nullable_role=optional_nullable_role,
            nullable_status=nullable_status,
            optional_status=optional_status,
            optional_nullable_status=optional_nullable_status,
            nullable_notification=nullable_notification,
            optional_notification=optional_notification,
            optional_nullable_notification=optional_nullable_notification,
            nullable_search_result=nullable_search_result,
            optional_search_result=optional_search_result,
            nullable_array=nullable_array,
            optional_array=optional_array,
            optional_nullable_array=optional_nullable_array,
            nullable_list_of_nullables=nullable_list_of_nullables,
            nullable_map_of_nullables=nullable_map_of_nullables,
            nullable_list_of_unions=nullable_list_of_unions,
            optional_map_of_enums=optional_map_of_enums,
            request_options=request_options,
        )
        return _response.data

    def get_complex_profile(
        self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ComplexProfile:
        """
        Get a complex profile by ID

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComplexProfile

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.get_complex_profile(
            profile_id="profileId",
        )
        """
        _response = self._raw_client.get_complex_profile(profile_id, request_options=request_options)
        return _response.data

    def update_complex_profile(
        self,
        profile_id: str,
        *,
        nullable_role: typing.Optional[UserRole] = OMIT,
        nullable_status: typing.Optional[UserStatus] = OMIT,
        nullable_notification: typing.Optional[NotificationMethod] = OMIT,
        nullable_search_result: typing.Optional[SearchResult] = OMIT,
        nullable_array: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComplexProfile:
        """
        Update complex profile to test nullable field updates

        Parameters
        ----------
        profile_id : str

        nullable_role : typing.Optional[UserRole]

        nullable_status : typing.Optional[UserStatus]

        nullable_notification : typing.Optional[NotificationMethod]

        nullable_search_result : typing.Optional[SearchResult]

        nullable_array : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComplexProfile

        Examples
        --------
        import datetime

        from seed import SeedNullableOptional
        from seed.nullable_optional import (
            Address,
            NotificationMethod_Email,
            SearchResult_User,
        )

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.update_complex_profile(
            profile_id="profileId",
            nullable_role="ADMIN",
            nullable_status="active",
            nullable_notification=NotificationMethod_Email(
                email_address="emailAddress",
                subject="subject",
                html_content="htmlContent",
            ),
            nullable_search_result=SearchResult_User(
                id="id",
                username="username",
                email="email",
                phone="phone",
                created_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                ),
            ),
            nullable_array=["nullableArray", "nullableArray"],
        )
        """
        _response = self._raw_client.update_complex_profile(
            profile_id,
            nullable_role=nullable_role,
            nullable_status=nullable_status,
            nullable_notification=nullable_notification,
            nullable_search_result=nullable_search_result,
            nullable_array=nullable_array,
            request_options=request_options,
        )
        return _response.data

    def test_deserialization(
        self,
        *,
        required_string: str,
        nullable_string: typing.Optional[str] = OMIT,
        optional_string: typing.Optional[str] = OMIT,
        optional_nullable_string: typing.Optional[str] = OMIT,
        nullable_enum: typing.Optional[UserRole] = OMIT,
        optional_enum: typing.Optional[UserStatus] = OMIT,
        nullable_union: typing.Optional[NotificationMethod] = OMIT,
        optional_union: typing.Optional[SearchResult] = OMIT,
        nullable_list: typing.Optional[typing.Sequence[str]] = OMIT,
        nullable_map: typing.Optional[typing.Dict[str, int]] = OMIT,
        nullable_object: typing.Optional[Address] = OMIT,
        optional_object: typing.Optional[Organization] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeserializationTestResponse:
        """
        Test endpoint for validating null deserialization

        Parameters
        ----------
        required_string : str

        nullable_string : typing.Optional[str]

        optional_string : typing.Optional[str]

        optional_nullable_string : typing.Optional[str]

        nullable_enum : typing.Optional[UserRole]

        optional_enum : typing.Optional[UserStatus]

        nullable_union : typing.Optional[NotificationMethod]

        optional_union : typing.Optional[SearchResult]

        nullable_list : typing.Optional[typing.Sequence[str]]

        nullable_map : typing.Optional[typing.Dict[str, int]]

        nullable_object : typing.Optional[Address]

        optional_object : typing.Optional[Organization]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeserializationTestResponse

        Examples
        --------
        import datetime

        from seed import SeedNullableOptional
        from seed.nullable_optional import (
            Address,
            NotificationMethod_Email,
            Organization,
            SearchResult_User,
        )

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.test_deserialization(
            required_string="requiredString",
            nullable_string="nullableString",
            optional_string="optionalString",
            optional_nullable_string="optionalNullableString",
            nullable_enum="ADMIN",
            optional_enum="active",
            nullable_union=NotificationMethod_Email(
                email_address="emailAddress",
                subject="subject",
                html_content="htmlContent",
            ),
            optional_union=SearchResult_User(
                id="id",
                username="username",
                email="email",
                phone="phone",
                created_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                updated_at=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                ),
            ),
            nullable_list=["nullableList", "nullableList"],
            nullable_map={"nullableMap": 1},
            nullable_object=Address(
                street="street",
                city="city",
                state="state",
                zip_code="zipCode",
                country="country",
                building_id="buildingId",
                tenant_id="tenantId",
            ),
            optional_object=Organization(
                id="id",
                name="name",
                domain="domain",
                employee_count=1,
            ),
        )
        """
        _response = self._raw_client.test_deserialization(
            required_string=required_string,
            nullable_string=nullable_string,
            optional_string=optional_string,
            optional_nullable_string=optional_nullable_string,
            nullable_enum=nullable_enum,
            optional_enum=optional_enum,
            nullable_union=nullable_union,
            optional_union=optional_union,
            nullable_list=nullable_list,
            nullable_map=nullable_map,
            nullable_object=nullable_object,
            optional_object=optional_object,
            request_options=request_options,
        )
        return _response.data

    def filter_by_role(
        self,
        *,
        role: typing.Optional[UserRole] = None,
        status: typing.Optional[UserStatus] = None,
        secondary_role: typing.Optional[UserRole] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        Filter users by role with nullable enum

        Parameters
        ----------
        role : typing.Optional[UserRole]

        status : typing.Optional[UserStatus]

        secondary_role : typing.Optional[UserRole]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.filter_by_role(
            role="ADMIN",
            status="active",
            secondary_role="ADMIN",
        )
        """
        _response = self._raw_client.filter_by_role(
            role=role, status=status, secondary_role=secondary_role, request_options=request_options
        )
        return _response.data

    def get_notification_settings(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[NotificationMethod]:
        """
        Get notification settings which may be null

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[NotificationMethod]
            Nullable notification method or empty for no preference

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.get_notification_settings(
            user_id="userId",
        )
        """
        _response = self._raw_client.get_notification_settings(user_id, request_options=request_options)
        return _response.data

    def update_tags(
        self,
        user_id: str,
        *,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        categories: typing.Optional[typing.Sequence[str]] = OMIT,
        labels: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[str]:
        """
        Update tags to test array handling

        Parameters
        ----------
        user_id : str

        tags : typing.Optional[typing.Sequence[str]]

        categories : typing.Optional[typing.Sequence[str]]

        labels : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            Updated tags

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.update_tags(
            user_id="userId",
            tags=["tags", "tags"],
            categories=["categories", "categories"],
            labels=["labels", "labels"],
        )
        """
        _response = self._raw_client.update_tags(
            user_id, tags=tags, categories=categories, labels=labels, request_options=request_options
        )
        return _response.data

    def get_search_results(
        self,
        *,
        query: str,
        filters: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        include_types: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.List[SearchResult]]:
        """
        Get search results with nullable unions

        Parameters
        ----------
        query : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        include_types : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.List[SearchResult]]
            List of search results, can be null if no results

        Examples
        --------
        from seed import SeedNullableOptional

        client = SeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )
        client.nullable_optional.get_search_results(
            query="query",
            filters={"filters": "filters"},
            include_types=["includeTypes", "includeTypes"],
        )
        """
        _response = self._raw_client.get_search_results(
            query=query, filters=filters, include_types=include_types, request_options=request_options
        )
        return _response.data


class AsyncNullableOptionalClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNullableOptionalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNullableOptionalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNullableOptionalClient
        """
        return self._raw_client

    async def get_user(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> UserResponse:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.get_user(
                user_id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user(user_id, request_options=request_options)
        return _response.data

    async def create_user(
        self,
        *,
        username: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Create a new user

        Parameters
        ----------
        username : str

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional
        from seed.nullable_optional import Address

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.create_user(
                username="username",
                email="email",
                phone="phone",
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_user(
            username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    async def update_user(
        self,
        user_id: str,
        *,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        address: typing.Optional[Address] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UserResponse:
        """
        Update a user (partial update)

        Parameters
        ----------
        user_id : str

        username : typing.Optional[str]

        email : typing.Optional[str]

        phone : typing.Optional[str]

        address : typing.Optional[Address]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional
        from seed.nullable_optional import Address

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.update_user(
                user_id="userId",
                username="username",
                email="email",
                phone="phone",
                address=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_user(
            user_id, username=username, email=email, phone=phone, address=address, request_options=request_options
        )
        return _response.data

    async def list_users(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        include_deleted: typing.Optional[bool] = None,
        sort_by: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        List all users

        Parameters
        ----------
        limit : typing.Optional[int]

        offset : typing.Optional[int]

        include_deleted : typing.Optional[bool]

        sort_by : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.list_users(
                limit=1,
                offset=1,
                include_deleted=True,
                sort_by="sortBy",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_users(
            limit=limit,
            offset=offset,
            include_deleted=include_deleted,
            sort_by=sort_by,
            request_options=request_options,
        )
        return _response.data

    async def search_users(
        self,
        *,
        query: str,
        department: typing.Optional[str] = None,
        role: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        Search users

        Parameters
        ----------
        query : str

        department : typing.Optional[str]

        role : typing.Optional[str]

        is_active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.search_users(
                query="query",
                department="department",
                role="role",
                is_active=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_users(
            query=query, department=department, role=role, is_active=is_active, request_options=request_options
        )
        return _response.data

    async def create_complex_profile(
        self,
        *,
        id: str,
        nullable_role: typing.Optional[UserRole] = OMIT,
        optional_role: typing.Optional[UserRole] = OMIT,
        optional_nullable_role: typing.Optional[UserRole] = OMIT,
        nullable_status: typing.Optional[UserStatus] = OMIT,
        optional_status: typing.Optional[UserStatus] = OMIT,
        optional_nullable_status: typing.Optional[UserStatus] = OMIT,
        nullable_notification: typing.Optional[NotificationMethod] = OMIT,
        optional_notification: typing.Optional[NotificationMethod] = OMIT,
        optional_nullable_notification: typing.Optional[NotificationMethod] = OMIT,
        nullable_search_result: typing.Optional[SearchResult] = OMIT,
        optional_search_result: typing.Optional[SearchResult] = OMIT,
        nullable_array: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_array: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_nullable_array: typing.Optional[typing.Sequence[str]] = OMIT,
        nullable_list_of_nullables: typing.Optional[typing.Sequence[typing.Optional[str]]] = OMIT,
        nullable_map_of_nullables: typing.Optional[typing.Dict[str, typing.Optional[Address]]] = OMIT,
        nullable_list_of_unions: typing.Optional[typing.Sequence[NotificationMethod]] = OMIT,
        optional_map_of_enums: typing.Optional[typing.Dict[str, UserRole]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComplexProfile:
        """
        Create a complex profile to test nullable enums and unions

        Parameters
        ----------
        id : str

        nullable_role : typing.Optional[UserRole]

        optional_role : typing.Optional[UserRole]

        optional_nullable_role : typing.Optional[UserRole]

        nullable_status : typing.Optional[UserStatus]

        optional_status : typing.Optional[UserStatus]

        optional_nullable_status : typing.Optional[UserStatus]

        nullable_notification : typing.Optional[NotificationMethod]

        optional_notification : typing.Optional[NotificationMethod]

        optional_nullable_notification : typing.Optional[NotificationMethod]

        nullable_search_result : typing.Optional[SearchResult]

        optional_search_result : typing.Optional[SearchResult]

        nullable_array : typing.Optional[typing.Sequence[str]]

        optional_array : typing.Optional[typing.Sequence[str]]

        optional_nullable_array : typing.Optional[typing.Sequence[str]]

        nullable_list_of_nullables : typing.Optional[typing.Sequence[typing.Optional[str]]]

        nullable_map_of_nullables : typing.Optional[typing.Dict[str, typing.Optional[Address]]]

        nullable_list_of_unions : typing.Optional[typing.Sequence[NotificationMethod]]

        optional_map_of_enums : typing.Optional[typing.Dict[str, UserRole]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComplexProfile

        Examples
        --------
        import asyncio
        import datetime

        from seed import AsyncSeedNullableOptional
        from seed.nullable_optional import (
            Address,
            NotificationMethod_Email,
            SearchResult_User,
        )

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.create_complex_profile(
                id="id",
                nullable_role="ADMIN",
                optional_role="ADMIN",
                optional_nullable_role="ADMIN",
                nullable_status="active",
                optional_status="active",
                optional_nullable_status="active",
                nullable_notification=NotificationMethod_Email(
                    email_address="emailAddress",
                    subject="subject",
                    html_content="htmlContent",
                ),
                optional_notification=NotificationMethod_Email(
                    email_address="emailAddress",
                    subject="subject",
                    html_content="htmlContent",
                ),
                optional_nullable_notification=NotificationMethod_Email(
                    email_address="emailAddress",
                    subject="subject",
                    html_content="htmlContent",
                ),
                nullable_search_result=SearchResult_User(
                    id="id",
                    username="username",
                    email="email",
                    phone="phone",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    updated_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    address=Address(
                        street="street",
                        city="city",
                        state="state",
                        zip_code="zipCode",
                        country="country",
                        building_id="buildingId",
                        tenant_id="tenantId",
                    ),
                ),
                optional_search_result=SearchResult_User(
                    id="id",
                    username="username",
                    email="email",
                    phone="phone",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    updated_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    address=Address(
                        street="street",
                        city="city",
                        state="state",
                        zip_code="zipCode",
                        country="country",
                        building_id="buildingId",
                        tenant_id="tenantId",
                    ),
                ),
                nullable_array=["nullableArray", "nullableArray"],
                optional_array=["optionalArray", "optionalArray"],
                optional_nullable_array=[
                    "optionalNullableArray",
                    "optionalNullableArray",
                ],
                nullable_list_of_nullables=[
                    "nullableListOfNullables",
                    "nullableListOfNullables",
                ],
                nullable_map_of_nullables={
                    "nullableMapOfNullables": Address(
                        street="street",
                        city="city",
                        state="state",
                        zip_code="zipCode",
                        country="country",
                        building_id="buildingId",
                        tenant_id="tenantId",
                    )
                },
                nullable_list_of_unions=[
                    NotificationMethod_Email(
                        email_address="emailAddress",
                        subject="subject",
                        html_content="htmlContent",
                    ),
                    NotificationMethod_Email(
                        email_address="emailAddress",
                        subject="subject",
                        html_content="htmlContent",
                    ),
                ],
                optional_map_of_enums={"optionalMapOfEnums": "ADMIN"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_complex_profile(
            id=id,
            nullable_role=nullable_role,
            optional_role=optional_role,
            optional_nullable_role=optional_nullable_role,
            nullable_status=nullable_status,
            optional_status=optional_status,
            optional_nullable_status=optional_nullable_status,
            nullable_notification=nullable_notification,
            optional_notification=optional_notification,
            optional_nullable_notification=optional_nullable_notification,
            nullable_search_result=nullable_search_result,
            optional_search_result=optional_search_result,
            nullable_array=nullable_array,
            optional_array=optional_array,
            optional_nullable_array=optional_nullable_array,
            nullable_list_of_nullables=nullable_list_of_nullables,
            nullable_map_of_nullables=nullable_map_of_nullables,
            nullable_list_of_unions=nullable_list_of_unions,
            optional_map_of_enums=optional_map_of_enums,
            request_options=request_options,
        )
        return _response.data

    async def get_complex_profile(
        self, profile_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ComplexProfile:
        """
        Get a complex profile by ID

        Parameters
        ----------
        profile_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComplexProfile

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.get_complex_profile(
                profile_id="profileId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_complex_profile(profile_id, request_options=request_options)
        return _response.data

    async def update_complex_profile(
        self,
        profile_id: str,
        *,
        nullable_role: typing.Optional[UserRole] = OMIT,
        nullable_status: typing.Optional[UserStatus] = OMIT,
        nullable_notification: typing.Optional[NotificationMethod] = OMIT,
        nullable_search_result: typing.Optional[SearchResult] = OMIT,
        nullable_array: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ComplexProfile:
        """
        Update complex profile to test nullable field updates

        Parameters
        ----------
        profile_id : str

        nullable_role : typing.Optional[UserRole]

        nullable_status : typing.Optional[UserStatus]

        nullable_notification : typing.Optional[NotificationMethod]

        nullable_search_result : typing.Optional[SearchResult]

        nullable_array : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ComplexProfile

        Examples
        --------
        import asyncio
        import datetime

        from seed import AsyncSeedNullableOptional
        from seed.nullable_optional import (
            Address,
            NotificationMethod_Email,
            SearchResult_User,
        )

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.update_complex_profile(
                profile_id="profileId",
                nullable_role="ADMIN",
                nullable_status="active",
                nullable_notification=NotificationMethod_Email(
                    email_address="emailAddress",
                    subject="subject",
                    html_content="htmlContent",
                ),
                nullable_search_result=SearchResult_User(
                    id="id",
                    username="username",
                    email="email",
                    phone="phone",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    updated_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    address=Address(
                        street="street",
                        city="city",
                        state="state",
                        zip_code="zipCode",
                        country="country",
                        building_id="buildingId",
                        tenant_id="tenantId",
                    ),
                ),
                nullable_array=["nullableArray", "nullableArray"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_complex_profile(
            profile_id,
            nullable_role=nullable_role,
            nullable_status=nullable_status,
            nullable_notification=nullable_notification,
            nullable_search_result=nullable_search_result,
            nullable_array=nullable_array,
            request_options=request_options,
        )
        return _response.data

    async def test_deserialization(
        self,
        *,
        required_string: str,
        nullable_string: typing.Optional[str] = OMIT,
        optional_string: typing.Optional[str] = OMIT,
        optional_nullable_string: typing.Optional[str] = OMIT,
        nullable_enum: typing.Optional[UserRole] = OMIT,
        optional_enum: typing.Optional[UserStatus] = OMIT,
        nullable_union: typing.Optional[NotificationMethod] = OMIT,
        optional_union: typing.Optional[SearchResult] = OMIT,
        nullable_list: typing.Optional[typing.Sequence[str]] = OMIT,
        nullable_map: typing.Optional[typing.Dict[str, int]] = OMIT,
        nullable_object: typing.Optional[Address] = OMIT,
        optional_object: typing.Optional[Organization] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeserializationTestResponse:
        """
        Test endpoint for validating null deserialization

        Parameters
        ----------
        required_string : str

        nullable_string : typing.Optional[str]

        optional_string : typing.Optional[str]

        optional_nullable_string : typing.Optional[str]

        nullable_enum : typing.Optional[UserRole]

        optional_enum : typing.Optional[UserStatus]

        nullable_union : typing.Optional[NotificationMethod]

        optional_union : typing.Optional[SearchResult]

        nullable_list : typing.Optional[typing.Sequence[str]]

        nullable_map : typing.Optional[typing.Dict[str, int]]

        nullable_object : typing.Optional[Address]

        optional_object : typing.Optional[Organization]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeserializationTestResponse

        Examples
        --------
        import asyncio
        import datetime

        from seed import AsyncSeedNullableOptional
        from seed.nullable_optional import (
            Address,
            NotificationMethod_Email,
            Organization,
            SearchResult_User,
        )

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.test_deserialization(
                required_string="requiredString",
                nullable_string="nullableString",
                optional_string="optionalString",
                optional_nullable_string="optionalNullableString",
                nullable_enum="ADMIN",
                optional_enum="active",
                nullable_union=NotificationMethod_Email(
                    email_address="emailAddress",
                    subject="subject",
                    html_content="htmlContent",
                ),
                optional_union=SearchResult_User(
                    id="id",
                    username="username",
                    email="email",
                    phone="phone",
                    created_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    updated_at=datetime.datetime.fromisoformat(
                        "2024-01-15 09:30:00+00:00",
                    ),
                    address=Address(
                        street="street",
                        city="city",
                        state="state",
                        zip_code="zipCode",
                        country="country",
                        building_id="buildingId",
                        tenant_id="tenantId",
                    ),
                ),
                nullable_list=["nullableList", "nullableList"],
                nullable_map={"nullableMap": 1},
                nullable_object=Address(
                    street="street",
                    city="city",
                    state="state",
                    zip_code="zipCode",
                    country="country",
                    building_id="buildingId",
                    tenant_id="tenantId",
                ),
                optional_object=Organization(
                    id="id",
                    name="name",
                    domain="domain",
                    employee_count=1,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.test_deserialization(
            required_string=required_string,
            nullable_string=nullable_string,
            optional_string=optional_string,
            optional_nullable_string=optional_nullable_string,
            nullable_enum=nullable_enum,
            optional_enum=optional_enum,
            nullable_union=nullable_union,
            optional_union=optional_union,
            nullable_list=nullable_list,
            nullable_map=nullable_map,
            nullable_object=nullable_object,
            optional_object=optional_object,
            request_options=request_options,
        )
        return _response.data

    async def filter_by_role(
        self,
        *,
        role: typing.Optional[UserRole] = None,
        status: typing.Optional[UserStatus] = None,
        secondary_role: typing.Optional[UserRole] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[UserResponse]:
        """
        Filter users by role with nullable enum

        Parameters
        ----------
        role : typing.Optional[UserRole]

        status : typing.Optional[UserStatus]

        secondary_role : typing.Optional[UserRole]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[UserResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.filter_by_role(
                role="ADMIN",
                status="active",
                secondary_role="ADMIN",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.filter_by_role(
            role=role, status=status, secondary_role=secondary_role, request_options=request_options
        )
        return _response.data

    async def get_notification_settings(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[NotificationMethod]:
        """
        Get notification settings which may be null

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[NotificationMethod]
            Nullable notification method or empty for no preference

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.get_notification_settings(
                user_id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_notification_settings(user_id, request_options=request_options)
        return _response.data

    async def update_tags(
        self,
        user_id: str,
        *,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        categories: typing.Optional[typing.Sequence[str]] = OMIT,
        labels: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[str]:
        """
        Update tags to test array handling

        Parameters
        ----------
        user_id : str

        tags : typing.Optional[typing.Sequence[str]]

        categories : typing.Optional[typing.Sequence[str]]

        labels : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[str]
            Updated tags

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.update_tags(
                user_id="userId",
                tags=["tags", "tags"],
                categories=["categories", "categories"],
                labels=["labels", "labels"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_tags(
            user_id, tags=tags, categories=categories, labels=labels, request_options=request_options
        )
        return _response.data

    async def get_search_results(
        self,
        *,
        query: str,
        filters: typing.Optional[typing.Dict[str, typing.Optional[str]]] = OMIT,
        include_types: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.List[SearchResult]]:
        """
        Get search results with nullable unions

        Parameters
        ----------
        query : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        include_types : typing.Optional[typing.Sequence[str]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.List[SearchResult]]
            List of search results, can be null if no results

        Examples
        --------
        import asyncio

        from seed import AsyncSeedNullableOptional

        client = AsyncSeedNullableOptional(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.nullable_optional.get_search_results(
                query="query",
                filters={"filters": "filters"},
                include_types=["includeTypes", "includeTypes"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_search_results(
            query=query, filters=filters, include_types=include_types, request_options=request_options
        )
        return _response.data
