# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .address import Address


class UserProfile(UniversalBaseModel):
    """
    Test object with nullable and optional fields
    """

    id: str
    username: str
    nullable_string: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="nullableString")] = None
    nullable_integer: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="nullableInteger")] = None
    nullable_boolean: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="nullableBoolean")] = None
    nullable_date: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="nullableDate")] = None
    nullable_object: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="nullableObject")] = None
    nullable_list: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="nullableList")
    ] = None
    nullable_map: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, str]], FieldMetadata(alias="nullableMap")
    ] = None
    optional_string: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="optionalString")] = None
    optional_integer: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="optionalInteger")] = None
    optional_boolean: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="optionalBoolean")] = None
    optional_date: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="optionalDate")] = None
    optional_object: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="optionalObject")] = None
    optional_list: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="optionalList")
    ] = None
    optional_map: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, str]], FieldMetadata(alias="optionalMap")
    ] = None
    optional_nullable_string: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="optionalNullableString")
    ] = None
    optional_nullable_object: typing_extensions.Annotated[
        typing.Optional[Address], FieldMetadata(alias="optionalNullableObject")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
