# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .address import Address
from .notification_method import NotificationMethod
from .search_result import SearchResult
from .user_role import UserRole
from .user_status import UserStatus


class ComplexProfile(UniversalBaseModel):
    """
    Test object with nullable enums, unions, and arrays
    """

    id: str
    nullable_role: typing_extensions.Annotated[typing.Optional[UserRole], FieldMetadata(alias="nullableRole")] = None
    optional_role: typing_extensions.Annotated[typing.Optional[UserRole], FieldMetadata(alias="optionalRole")] = None
    optional_nullable_role: typing_extensions.Annotated[
        typing.Optional[UserRole], FieldMetadata(alias="optionalNullableRole")
    ] = None
    nullable_status: typing_extensions.Annotated[typing.Optional[UserStatus], FieldMetadata(alias="nullableStatus")] = (
        None
    )
    optional_status: typing_extensions.Annotated[typing.Optional[UserStatus], FieldMetadata(alias="optionalStatus")] = (
        None
    )
    optional_nullable_status: typing_extensions.Annotated[
        typing.Optional[UserStatus], FieldMetadata(alias="optionalNullableStatus")
    ] = None
    nullable_notification: typing_extensions.Annotated[
        typing.Optional[NotificationMethod], FieldMetadata(alias="nullableNotification")
    ] = None
    optional_notification: typing_extensions.Annotated[
        typing.Optional[NotificationMethod], FieldMetadata(alias="optionalNotification")
    ] = None
    optional_nullable_notification: typing_extensions.Annotated[
        typing.Optional[NotificationMethod], FieldMetadata(alias="optionalNullableNotification")
    ] = None
    nullable_search_result: typing_extensions.Annotated[
        typing.Optional[SearchResult], FieldMetadata(alias="nullableSearchResult")
    ] = None
    optional_search_result: typing_extensions.Annotated[
        typing.Optional[SearchResult], FieldMetadata(alias="optionalSearchResult")
    ] = None
    nullable_array: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="nullableArray")
    ] = None
    optional_array: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="optionalArray")
    ] = None
    optional_nullable_array: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="optionalNullableArray")
    ] = None
    nullable_list_of_nullables: typing_extensions.Annotated[
        typing.Optional[typing.List[typing.Optional[str]]], FieldMetadata(alias="nullableListOfNullables")
    ] = None
    nullable_map_of_nullables: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, typing.Optional[Address]]], FieldMetadata(alias="nullableMapOfNullables")
    ] = None
    nullable_list_of_unions: typing_extensions.Annotated[
        typing.Optional[typing.List[NotificationMethod]], FieldMetadata(alias="nullableListOfUnions")
    ] = None
    optional_map_of_enums: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, UserRole]], FieldMetadata(alias="optionalMapOfEnums")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
