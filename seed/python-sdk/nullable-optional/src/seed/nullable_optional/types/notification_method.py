# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata


class NotificationMethod_Email(UniversalBaseModel):
    """
    Discriminated union for testing nullable unions
    """

    type: typing.Literal["email"] = "email"
    email_address: typing_extensions.Annotated[str, FieldMetadata(alias="emailAddress")]
    subject: str
    html_content: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="htmlContent")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NotificationMethod_Sms(UniversalBaseModel):
    """
    Discriminated union for testing nullable unions
    """

    type: typing.Literal["sms"] = "sms"
    phone_number: typing_extensions.Annotated[str, FieldMetadata(alias="phoneNumber")]
    message: str
    short_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="shortCode")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NotificationMethod_Push(UniversalBaseModel):
    """
    Discriminated union for testing nullable unions
    """

    type: typing.Literal["push"] = "push"
    device_token: typing_extensions.Annotated[str, FieldMetadata(alias="deviceToken")]
    title: str
    body: str
    badge: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


NotificationMethod = typing.Union[NotificationMethod_Email, NotificationMethod_Sms, NotificationMethod_Push]
