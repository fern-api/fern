# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .address import Address
from .notification_method import NotificationMethod
from .organization import Organization
from .search_result import SearchResult
from .user_role import UserRole
from .user_status import UserStatus


class DeserializationTestRequest(UniversalBaseModel):
    """
    Request body for testing deserialization of null values
    """

    required_string: typing_extensions.Annotated[str, FieldMetadata(alias="requiredString")]
    nullable_string: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="nullableString")] = None
    optional_string: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="optionalString")] = None
    optional_nullable_string: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="optionalNullableString")
    ] = None
    nullable_enum: typing_extensions.Annotated[typing.Optional[UserRole], FieldMetadata(alias="nullableEnum")] = None
    optional_enum: typing_extensions.Annotated[typing.Optional[UserStatus], FieldMetadata(alias="optionalEnum")] = None
    nullable_union: typing_extensions.Annotated[
        typing.Optional[NotificationMethod], FieldMetadata(alias="nullableUnion")
    ] = None
    optional_union: typing_extensions.Annotated[typing.Optional[SearchResult], FieldMetadata(alias="optionalUnion")] = (
        None
    )
    nullable_list: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="nullableList")
    ] = None
    nullable_map: typing_extensions.Annotated[
        typing.Optional[typing.Dict[str, int]], FieldMetadata(alias="nullableMap")
    ] = None
    nullable_object: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="nullableObject")] = None
    optional_object: typing_extensions.Annotated[
        typing.Optional[Organization], FieldMetadata(alias="optionalObject")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
