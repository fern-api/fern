# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .metadata.client import AsyncMetadataClient, MetadataClient
from .raw_client import AsyncRawEventsClient, RawEventsClient
from .types.event import Event


class EventsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEventsClient(client_wrapper=client_wrapper)
        self.metadata = MetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEventsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEventsClient
        """
        return self._raw_client

    def list_events(
        self, *, limit: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Event]:
        """
        List all user events.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of results to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Event]

        Examples
        --------
        from seed import SeedMixedFileDirectory
        client = SeedMixedFileDirectory(base_url="https://yourhost.com/path/to/api", )
        client.user.events.list_events(limit=1, )
        """
        _response = self._raw_client.list_events(limit=limit, request_options=request_options)
        return _response.data


class AsyncEventsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEventsClient(client_wrapper=client_wrapper)
        self.metadata = AsyncMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEventsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEventsClient
        """
        return self._raw_client

    async def list_events(
        self, *, limit: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Event]:
        """
        List all user events.

        Parameters
        ----------
        limit : typing.Optional[int]
            The maximum number of results to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Event]

        Examples
        --------
        from seed import AsyncSeedMixedFileDirectory
        import asyncio
        client = AsyncSeedMixedFileDirectory(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.events.list_events(limit=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.list_events(limit=limit, request_options=request_options)
        return _response.data
