# This file was auto-generated by Fern from our API Definition.

from ....core.client_wrapper import SyncClientWrapper
from ....types.id import Id
import typing
from ....core.request_options import RequestOptions
from ....core.http_response import HttpResponse
from .types.metadata import Metadata
from ....core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper
from ....core.http_response import AsyncHttpResponse


class RawMetadataClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_metadata(
        self, *, id: Id, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[Metadata]:
        """
        Get event metadata.

        Parameters
        ----------
        id : Id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Metadata]
        """
        _response = self._client_wrapper.httpx_client.request(
            "users/events/metadata/",
            method="GET",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Metadata,
                    parse_obj_as(
                        type_=Metadata,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawMetadataClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_metadata(
        self, *, id: Id, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Metadata]:
        """
        Get event metadata.

        Parameters
        ----------
        id : Id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Metadata]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "users/events/metadata/",
            method="GET",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Metadata,
                    parse_obj_as(
                        type_=Metadata,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
