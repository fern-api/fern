# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawOrganizationClient
from ..core.request_options import RequestOptions
from .types.organization import Organization
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawOrganizationClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OrganizationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOrganizationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOrganizationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOrganizationClient
        """
        return self._raw_client

    def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Create a new organization.

        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization

        Examples
        --------
        from seed import SeedMixedFileDirectory

        client = SeedMixedFileDirectory(
            base_url="https://yourhost.com/path/to/api",
        )
        client.organization.create(
            name="name",
        )
        """
        response = self._raw_client.create(
            name=name,
            request_options=request_options,
        )
        return response.data


class AsyncOrganizationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOrganizationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOrganizationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOrganizationClient
        """
        return self._raw_client

    async def create(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> Organization:
        """
        Create a new organization.

        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization

        Examples
        --------
        import asyncio

        from seed import AsyncSeedMixedFileDirectory

        client = AsyncSeedMixedFileDirectory(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organization.create(
                name="name",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            name=name,
            request_options=request_options,
        )
        return response.data
