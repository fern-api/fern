# This file was auto-generated by Fern from our API Definition.

from ....core.client_wrapper import SyncClientWrapper
from .raw_client import RawMetadataClient
from ....types.id import Id
import typing
from ....core.request_options import RequestOptions
from .types.metadata import Metadata
from ....core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawMetadataClient


class MetadataClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMetadataClient
        """
        return self._raw_client

    def get_metadata(self, *, id: Id, request_options: typing.Optional[RequestOptions] = None) -> Metadata:
        """
        Get event metadata.

        Parameters
        ----------
        id : Id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Metadata

        Examples
        --------
        from seed import SeedMixedFileDirectory
        client = SeedMixedFileDirectory(base_url="https://yourhost.com/path/to/api", )
        client.user.events.metadata.get_metadata(id='id', )
        """
        response = self._raw_client.get_metadata(id=id, request_options=request_options)
        return response.data


class AsyncMetadataClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMetadataClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMetadataClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMetadataClient
        """
        return self._raw_client

    async def get_metadata(self, *, id: Id, request_options: typing.Optional[RequestOptions] = None) -> Metadata:
        """
        Get event metadata.

        Parameters
        ----------
        id : Id

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Metadata

        Examples
        --------
        from seed import AsyncSeedMixedFileDirectory
        import asyncio
        client = AsyncSeedMixedFileDirectory(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.events.metadata.get_metadata(id='id', )
        asyncio.run(main())
        """
        response = await self._raw_client.get_metadata(id=id, request_options=request_options)
        return response.data
