# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .foo import Foo as types_types_foo_Foo
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.pydantic_utilities import UniversalRootModel
import typing
import pydantic
from ...core.pydantic_utilities import update_forward_refs

T_Result = typing.TypeVar("T_Result")


class _Factory:
    def foo(self, value: types_types_foo_Foo) -> UnionWithSingleElement:
        if IS_PYDANTIC_V2:
            return UnionWithSingleElement(
                root=_UnionWithSingleElement.Foo(**value.dict(exclude_unset=True), type="foo")
            )  # type: ignore
        else:
            return UnionWithSingleElement(
                __root__=_UnionWithSingleElement.Foo(**value.dict(exclude_unset=True), type="foo")
            )  # type: ignore


class UnionWithSingleElement(UniversalRootModel):
    """
    Examples
    --------
    from seed.types import UnionWithSingleElement_Foo
    UnionWithSingleElement_Foo(name='example1', )
    """

    factory: typing.ClassVar[_Factory] = _Factory()

    if IS_PYDANTIC_V2:
        root: typing.Union[_UnionWithSingleElement.Foo]

        def get_as_union(self) -> typing.Union[_UnionWithSingleElement.Foo]:
            return self.root
    else:
        __root__: typing.Union[_UnionWithSingleElement.Foo]

        def get_as_union(self) -> typing.Union[_UnionWithSingleElement.Foo]:
            return self.__root__

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        if IS_PYDANTIC_V2:
            return self.root.dict(**kwargs)
        else:
            return self.__root__.dict(**kwargs)

    def visit(self, foo: typing.Callable[[types_types_foo_Foo], T_Result]) -> T_Result:
        unioned_value = self.get_as_union()
        if unioned_value.type == "foo":
            return foo(types_types_foo_Foo(**unioned_value.dict(exclude_unset=True, exclude={"type"})))

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class _UnionWithSingleElement:
    class Foo(types_types_foo_Foo):
        type: typing.Literal["foo"] = "foo"

        if IS_PYDANTIC_V2:
            model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
        else:

            class Config:
                frozen = True
                smart_union = True


update_forward_refs(UnionWithSingleElement)
