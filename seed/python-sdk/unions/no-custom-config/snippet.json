{
    "types": {
        "type_bigunion:NormalSweet": "from seed.bigunion import NormalSweet\nNormalSweet(value='example1', )",
        "type_bigunion:ThankfulFactor": "from seed.bigunion import ThankfulFactor\nThankfulFactor(value='example1', )",
        "type_types:UnionWithPrimitive": "from seed.types import UnionWithPrimitive_Integer\nUnionWithPrimitive_Integer(value=9)",
        "type_types:UnionWithDuplicatePrimitive": "from seed.types import UnionWithDuplicatePrimitive_Integer1\nUnionWithDuplicatePrimitive_Integer1(value=9)",
        "type_types:UnionWithoutKey": "from seed.types import UnionWithoutKey_Foo\nUnionWithoutKey_Foo(name='example1', )",
        "type_types:UnionWithNoProperties": "from seed.types import UnionWithNoProperties_Foo\nUnionWithNoProperties_Foo(name='example', )",
        "type_types:UnionWithMultipleNoProperties": "from seed.types import UnionWithMultipleNoProperties_Foo\nUnionWithMultipleNoProperties_Foo(name='example', )",
        "type_types:UnionWithLiteral": "from seed.types import UnionWithLiteral_Fern\nUnionWithLiteral_Fern()",
        "type_types:UnionWithBaseProperties": "from seed.types import UnionWithBaseProperties_Integer\nUnionWithBaseProperties_Integer(value=5)",
        "type_types:UnionWithTime": "from seed.types import UnionWithTime_Value\nUnionWithTime_Value(value=5)",
        "type_types:UnionWithOptionalTime": "from seed.types import UnionWithOptionalTime_Date\nimport datetime\nUnionWithOptionalTime_Date(value=datetime.date.fromisoformat(\"1994-01-01\", ))",
        "type_types:UnionWithSingleElement": "from seed.types import UnionWithSingleElement_Foo\nUnionWithSingleElement_Foo(name='example1', )",
        "type_types:UnionWithDuplicateTypes": "from seed.types import UnionWithDuplicateTypes_Foo1\nUnionWithDuplicateTypes_Foo1(name='example1', )",
        "type_types:UnionWithSubTypes": "from seed.types import UnionWithSubTypes_Foo\nUnionWithSubTypes_Foo(name='example1', )",
        "type_types:Foo": "from seed.types import Foo\nFoo(name='example1', )",
        "type_types:FooExtended": "from seed.types import FooExtended\nFooExtended(name='example1', age=5, )",
        "type_types:Bar": "from seed.types import Bar\nBar(name='example1', )",
        "type_union:GetShapeRequest": "from seed.union import GetShapeRequest\nGetShapeRequest(id='example', )",
        "type_union:Shape": "from seed.union import Shape_Circle\nShape_Circle(radius=5.0, )"
    },
    "endpoints": [
        {
            "example_identifier": "default",
            "id": {
                "path": "/{id}",
                "method": "GET",
                "identifier_override": "endpoint_bigunion.get"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.bigunion.get(id='id', )\n",
                "async_client": "from seed import AsyncSeedUnions\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.bigunion.get(id='id', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/",
                "method": "PATCH",
                "identifier_override": "endpoint_bigunion.update"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nfrom seed.bigunion import BigUnion_NormalSweet\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.bigunion.update(request=BigUnion_NormalSweet(value='value', ), )\n",
                "async_client": "from seed import AsyncSeedUnions\nfrom seed.bigunion import BigUnion_NormalSweet\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.bigunion.update(request=BigUnion_NormalSweet(value='value', ), )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/many",
                "method": "PATCH",
                "identifier_override": "endpoint_bigunion.update-many"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nfrom seed.bigunion import BigUnion_NormalSweet\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.bigunion.update_many(request=[BigUnion_NormalSweet(value='value', ), BigUnion_NormalSweet(value='value', )], )\n",
                "async_client": "from seed import AsyncSeedUnions\nfrom seed.bigunion import BigUnion_NormalSweet\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.bigunion.update_many(request=[BigUnion_NormalSweet(value='value', ), BigUnion_NormalSweet(value='value', )], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/{id}",
                "method": "GET",
                "identifier_override": "endpoint_union.get"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.union.get(id='id', )\n",
                "async_client": "from seed import AsyncSeedUnions\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.union.get(id='id', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/",
                "method": "PATCH",
                "identifier_override": "endpoint_union.update"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nfrom seed.union import Shape_Circle\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.union.update(request=Shape_Circle(radius=1.1, ), )\n",
                "async_client": "from seed import AsyncSeedUnions\nfrom seed.union import Shape_Circle\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.union.update(request=Shape_Circle(radius=1.1, ), )\nasyncio.run(main())",
                "type": "python"
            }
        }
    ]
}