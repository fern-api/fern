# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
from .foo import Foo
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .bar import Bar
class Union_Foo(UniversalBaseModel):
    foo: Foo
    type: typing.Literal["foo"] = "foo"
    
    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:
        class Config:
            frozen = True
            smart_union = True
class Union_Bar(UniversalBaseModel):
    bar: Bar
    type: typing.Literal["bar"] = "bar"
    
    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:
        class Config:
            frozen = True
            smart_union = True
Union = typing.Union[Union_Foo, Union_Bar]
