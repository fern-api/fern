# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class UnionWithNoProperties_Foo(UniversalBaseModel):
    """
    Examples
    --------
    from seed.types import UnionWithNoProperties_Foo
    UnionWithNoProperties_Foo(name='example', )
    """

    type: typing.Literal["foo"] = "foo"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class UnionWithNoProperties_Empty(UniversalBaseModel):
    """
    Examples
    --------
    from seed.types import UnionWithNoProperties_Foo
    UnionWithNoProperties_Foo(name='example', )
    """

    type: typing.Literal["empty"] = "empty"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from seed.types import UnionWithNoProperties_Foo
UnionWithNoProperties_Foo(name='example', )
"""
UnionWithNoProperties = typing.Union[UnionWithNoProperties_Foo, UnionWithNoProperties_Empty]
