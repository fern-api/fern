# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Bar,
        Foo,
        FooExtended,
        Union,
        UnionWithBaseProperties,
        UnionWithBaseProperties_Foo,
        UnionWithBaseProperties_Integer,
        UnionWithBaseProperties_String,
        UnionWithDiscriminant,
        UnionWithDiscriminant_Bar,
        UnionWithDiscriminant_Foo,
        UnionWithDuplicatePrimitive,
        UnionWithDuplicatePrimitive_Integer1,
        UnionWithDuplicatePrimitive_Integer2,
        UnionWithDuplicatePrimitive_String1,
        UnionWithDuplicatePrimitive_String2,
        UnionWithDuplicateTypes,
        UnionWithDuplicateTypes_Foo1,
        UnionWithDuplicateTypes_Foo2,
        UnionWithLiteral,
        UnionWithLiteral_Fern,
        UnionWithMultipleNoProperties,
        UnionWithMultipleNoProperties_Empty1,
        UnionWithMultipleNoProperties_Empty2,
        UnionWithMultipleNoProperties_Foo,
        UnionWithNoProperties,
        UnionWithNoProperties_Empty,
        UnionWithNoProperties_Foo,
        UnionWithOptionalTime,
        UnionWithOptionalTime_Date,
        UnionWithOptionalTime_Datetime,
        UnionWithPrimitive,
        UnionWithPrimitive_Integer,
        UnionWithPrimitive_String,
        UnionWithSingleElement,
        UnionWithSingleElement_Foo,
        UnionWithSubTypes,
        UnionWithSubTypes_Foo,
        UnionWithSubTypes_FooExtended,
        UnionWithTime,
        UnionWithTime_Date,
        UnionWithTime_Datetime,
        UnionWithTime_Value,
        UnionWithoutKey,
        UnionWithoutKey_Bar,
        UnionWithoutKey_Foo,
        Union_Bar,
        Union_Foo,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "Bar": ".types",
    "Foo": ".types",
    "FooExtended": ".types",
    "Union": ".types",
    "UnionWithBaseProperties": ".types",
    "UnionWithBaseProperties_Foo": ".types",
    "UnionWithBaseProperties_Integer": ".types",
    "UnionWithBaseProperties_String": ".types",
    "UnionWithDiscriminant": ".types",
    "UnionWithDiscriminant_Bar": ".types",
    "UnionWithDiscriminant_Foo": ".types",
    "UnionWithDuplicatePrimitive": ".types",
    "UnionWithDuplicatePrimitive_Integer1": ".types",
    "UnionWithDuplicatePrimitive_Integer2": ".types",
    "UnionWithDuplicatePrimitive_String1": ".types",
    "UnionWithDuplicatePrimitive_String2": ".types",
    "UnionWithDuplicateTypes": ".types",
    "UnionWithDuplicateTypes_Foo1": ".types",
    "UnionWithDuplicateTypes_Foo2": ".types",
    "UnionWithLiteral": ".types",
    "UnionWithLiteral_Fern": ".types",
    "UnionWithMultipleNoProperties": ".types",
    "UnionWithMultipleNoProperties_Empty1": ".types",
    "UnionWithMultipleNoProperties_Empty2": ".types",
    "UnionWithMultipleNoProperties_Foo": ".types",
    "UnionWithNoProperties": ".types",
    "UnionWithNoProperties_Empty": ".types",
    "UnionWithNoProperties_Foo": ".types",
    "UnionWithOptionalTime": ".types",
    "UnionWithOptionalTime_Date": ".types",
    "UnionWithOptionalTime_Datetime": ".types",
    "UnionWithPrimitive": ".types",
    "UnionWithPrimitive_Integer": ".types",
    "UnionWithPrimitive_String": ".types",
    "UnionWithSingleElement": ".types",
    "UnionWithSingleElement_Foo": ".types",
    "UnionWithSubTypes": ".types",
    "UnionWithSubTypes_Foo": ".types",
    "UnionWithSubTypes_FooExtended": ".types",
    "UnionWithTime": ".types",
    "UnionWithTime_Date": ".types",
    "UnionWithTime_Datetime": ".types",
    "UnionWithTime_Value": ".types",
    "UnionWithoutKey": ".types",
    "UnionWithoutKey_Bar": ".types",
    "UnionWithoutKey_Foo": ".types",
    "Union_Bar": ".types",
    "Union_Foo": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Bar",
    "Foo",
    "FooExtended",
    "Union",
    "UnionWithBaseProperties",
    "UnionWithBaseProperties_Foo",
    "UnionWithBaseProperties_Integer",
    "UnionWithBaseProperties_String",
    "UnionWithDiscriminant",
    "UnionWithDiscriminant_Bar",
    "UnionWithDiscriminant_Foo",
    "UnionWithDuplicatePrimitive",
    "UnionWithDuplicatePrimitive_Integer1",
    "UnionWithDuplicatePrimitive_Integer2",
    "UnionWithDuplicatePrimitive_String1",
    "UnionWithDuplicatePrimitive_String2",
    "UnionWithDuplicateTypes",
    "UnionWithDuplicateTypes_Foo1",
    "UnionWithDuplicateTypes_Foo2",
    "UnionWithLiteral",
    "UnionWithLiteral_Fern",
    "UnionWithMultipleNoProperties",
    "UnionWithMultipleNoProperties_Empty1",
    "UnionWithMultipleNoProperties_Empty2",
    "UnionWithMultipleNoProperties_Foo",
    "UnionWithNoProperties",
    "UnionWithNoProperties_Empty",
    "UnionWithNoProperties_Foo",
    "UnionWithOptionalTime",
    "UnionWithOptionalTime_Date",
    "UnionWithOptionalTime_Datetime",
    "UnionWithPrimitive",
    "UnionWithPrimitive_Integer",
    "UnionWithPrimitive_String",
    "UnionWithSingleElement",
    "UnionWithSingleElement_Foo",
    "UnionWithSubTypes",
    "UnionWithSubTypes_Foo",
    "UnionWithSubTypes_FooExtended",
    "UnionWithTime",
    "UnionWithTime_Date",
    "UnionWithTime_Datetime",
    "UnionWithTime_Value",
    "UnionWithoutKey",
    "UnionWithoutKey_Bar",
    "UnionWithoutKey_Foo",
    "Union_Bar",
    "Union_Foo",
]
