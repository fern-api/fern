# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawUnionClient
from ..core.request_options import RequestOptions
from .types.shape import Shape
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawUnionClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UnionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUnionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUnionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUnionClient
        """
        return self._raw_client

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Shape:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Shape

        Examples
        --------
        from seed import SeedUnions

        client = SeedUnions(
            base_url="https://yourhost.com/path/to/api",
        )
        client.union.get(
            id="id",
        )
        """
        response = self._raw_client.get(id, request_options=request_options)
        return response.data

    def update(self, *, request: Shape, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Parameters
        ----------
        request : Shape

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedUnions
        from seed.union import Shape_Circle

        client = SeedUnions(
            base_url="https://yourhost.com/path/to/api",
        )
        client.union.update(
            request=Shape_Circle(
                radius=1.1,
            ),
        )
        """
        response = self._raw_client.update(request=request, request_options=request_options)
        return response.data


class AsyncUnionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUnionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUnionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUnionClient
        """
        return self._raw_client

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Shape:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Shape

        Examples
        --------
        import asyncio

        from seed import AsyncSeedUnions

        client = AsyncSeedUnions(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.union.get(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(id, request_options=request_options)
        return response.data

    async def update(self, *, request: Shape, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Parameters
        ----------
        request : Shape

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        import asyncio

        from seed import AsyncSeedUnions
        from seed.union import Shape_Circle

        client = AsyncSeedUnions(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.union.update(
                request=Shape_Circle(
                    radius=1.1,
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update(request=request, request_options=request_options)
        return response.data
