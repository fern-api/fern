{
    "types": {
        "type_bigunion:NormalSweet": "from seed.bigunion import NormalSweet\nNormalSweet(value='example1', )",
        "type_bigunion:ThankfulFactor": "from seed.bigunion import ThankfulFactor\nThankfulFactor(value='example1', )",
        "type_types:UnionWithPrimitive": "from seed.types import IntegerUnionWithPrimitive\nIntegerUnionWithPrimitive(value=9)",
        "type_types:UnionWithDuplicatePrimitive": "from seed.types import Integer1UnionWithDuplicatePrimitive\nInteger1UnionWithDuplicatePrimitive(value=9)",
        "type_types:UnionWithoutKey": "from seed.types import FooUnionWithoutKey\nFooUnionWithoutKey(name='example1', )",
        "type_types:UnionWithNoProperties": "from seed.types import FooUnionWithNoProperties\nFooUnionWithNoProperties(name='example', )",
        "type_types:UnionWithMultipleNoProperties": "from seed.types import FooUnionWithMultipleNoProperties\nFooUnionWithMultipleNoProperties(name='example', )",
        "type_types:UnionWithLiteral": "from seed.types import FernUnionWithLiteral\nFernUnionWithLiteral()",
        "type_types:UnionWithBaseProperties": "from seed.types import IntegerUnionWithBaseProperties\nIntegerUnionWithBaseProperties(value=5)",
        "type_types:UnionWithTime": "from seed.types import ValueUnionWithTime\nValueUnionWithTime(value=5)",
        "type_types:UnionWithOptionalTime": "from seed.types import DateUnionWithOptionalTime\nimport datetime\nDateUnionWithOptionalTime(value=datetime.date.fromisoformat(\"1994-01-01\", ))",
        "type_types:UnionWithSingleElement": "from seed.types import FooUnionWithSingleElement\nFooUnionWithSingleElement(name='example1', )",
        "type_types:UnionWithDuplicateTypes": "from seed.types import Foo1UnionWithDuplicateTypes\nFoo1UnionWithDuplicateTypes(name='example1', )",
        "type_types:UnionWithSubTypes": "from seed.types import FooUnionWithSubTypes\nFooUnionWithSubTypes(name='example1', )",
        "type_types:Foo": "from seed.types import Foo\nFoo(name='example1', )",
        "type_types:FooExtended": "from seed.types import FooExtended\nFooExtended(name='example1', age=5, )",
        "type_types:Bar": "from seed.types import Bar\nBar(name='example1', )",
        "type_union:GetShapeRequest": "from seed.union import GetShapeRequest\nGetShapeRequest(id='example', )",
        "type_union:Shape": "from seed.union import CircleShape\nCircleShape(radius=5.0, )"
    },
    "endpoints": [
        {
            "example_identifier": "default",
            "id": {
                "path": "/{id}",
                "method": "GET",
                "identifier_override": "endpoint_bigunion.get"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.bigunion.get(id='id', )\n",
                "async_client": "from seed import AsyncSeedUnions\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.bigunion.get(id='id', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/",
                "method": "PATCH",
                "identifier_override": "endpoint_bigunion.update"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nfrom seed.bigunion import NormalSweetBigUnion\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.bigunion.update(request=NormalSweetBigUnion(value='value', ), )\n",
                "async_client": "from seed import AsyncSeedUnions\nfrom seed.bigunion import NormalSweetBigUnion\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.bigunion.update(request=NormalSweetBigUnion(value='value', ), )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/many",
                "method": "PATCH",
                "identifier_override": "endpoint_bigunion.update-many"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nfrom seed.bigunion import NormalSweetBigUnion\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.bigunion.update_many(request=[NormalSweetBigUnion(value='value', ), NormalSweetBigUnion(value='value', )], )\n",
                "async_client": "from seed import AsyncSeedUnions\nfrom seed.bigunion import NormalSweetBigUnion\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.bigunion.update_many(request=[NormalSweetBigUnion(value='value', ), NormalSweetBigUnion(value='value', )], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/{id}",
                "method": "GET",
                "identifier_override": "endpoint_union.get"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.union.get(id='id', )\n",
                "async_client": "from seed import AsyncSeedUnions\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.union.get(id='id', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/",
                "method": "PATCH",
                "identifier_override": "endpoint_union.update"
            },
            "snippet": {
                "sync_client": "from seed import SeedUnions\nfrom seed.union import CircleShape\nclient = SeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nclient.union.update(request=CircleShape(radius=1.1, ), )\n",
                "async_client": "from seed import AsyncSeedUnions\nfrom seed.union import CircleShape\nimport asyncio\nclient = AsyncSeedUnions(base_url=\"https://yourhost.com/path/to/api\", )\nasync def main() -> None:\n    await client.union.update(request=CircleShape(radius=1.1, ), )\nasyncio.run(main())",
                "type": "python"
            }
        }
    ]
}