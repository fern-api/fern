# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawBigunionClient, RawBigunionClient
from .types.big_union import BigUnion

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BigunionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBigunionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBigunionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBigunionClient
        """
        return self._raw_client

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> BigUnion:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BigUnion

        Examples
        --------
        from seed import SeedUnions
        client = SeedUnions(base_url="https://yourhost.com/path/to/api", )
        client.bigunion.get(id='id', )
        """
        response = self._raw_client.get(id, request_options=request_options)
        return response.data

    def update(self, *, request: BigUnion, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Parameters
        ----------
        request : BigUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedUnions
        from seed.bigunion import NormalSweetBigUnion
        client = SeedUnions(base_url="https://yourhost.com/path/to/api", )
        client.bigunion.update(request=NormalSweetBigUnion(value='value', ), )
        """
        response = self._raw_client.update(request=request, request_options=request_options)
        return response.data

    def update_many(
        self, *, request: typing.Sequence[BigUnion], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, bool]:
        """
        Parameters
        ----------
        request : typing.Sequence[BigUnion]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, bool]

        Examples
        --------
        from seed import SeedUnions
        from seed.bigunion import NormalSweetBigUnion
        client = SeedUnions(base_url="https://yourhost.com/path/to/api", )
        client.bigunion.update_many(request=[NormalSweetBigUnion(value='value', ), NormalSweetBigUnion(value='value', )], )
        """
        response = self._raw_client.update_many(request=request, request_options=request_options)
        return response.data


class AsyncBigunionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBigunionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBigunionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBigunionClient
        """
        return self._raw_client

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> BigUnion:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BigUnion

        Examples
        --------
        from seed import AsyncSeedUnions
        import asyncio
        client = AsyncSeedUnions(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.bigunion.get(id='id', )
        asyncio.run(main())
        """
        response = await self._raw_client.get(id, request_options=request_options)
        return response.data

    async def update(self, *, request: BigUnion, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Parameters
        ----------
        request : BigUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import AsyncSeedUnions
        from seed.bigunion import NormalSweetBigUnion
        import asyncio
        client = AsyncSeedUnions(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.bigunion.update(request=NormalSweetBigUnion(value='value', ), )
        asyncio.run(main())
        """
        response = await self._raw_client.update(request=request, request_options=request_options)
        return response.data

    async def update_many(
        self, *, request: typing.Sequence[BigUnion], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, bool]:
        """
        Parameters
        ----------
        request : typing.Sequence[BigUnion]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, bool]

        Examples
        --------
        from seed import AsyncSeedUnions
        from seed.bigunion import NormalSweetBigUnion
        import asyncio
        client = AsyncSeedUnions(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.bigunion.update_many(request=[NormalSweetBigUnion(value='value', ), NormalSweetBigUnion(value='value', )], )
        asyncio.run(main())
        """
        response = await self._raw_client.update_many(request=request, request_options=request_options)
        return response.data
