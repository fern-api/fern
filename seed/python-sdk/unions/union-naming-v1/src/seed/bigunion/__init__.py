# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        ActiveDiamond,
        ActiveDiamondBigUnion,
        AttractiveScript,
        AttractiveScriptBigUnion,
        BigUnion,
        CircularCard,
        CircularCardBigUnion,
        ColorfulCover,
        ColorfulCoverBigUnion,
        DiligentDeal,
        DiligentDealBigUnion,
        DisloyalValue,
        DisloyalValueBigUnion,
        DistinctFailure,
        DistinctFailureBigUnion,
        FalseMirror,
        FalseMirrorBigUnion,
        FrozenSleep,
        FrozenSleepBigUnion,
        GaseousRoad,
        GaseousRoadBigUnion,
        GruesomeCoach,
        GruesomeCoachBigUnion,
        HarmoniousPlay,
        HarmoniousPlayBigUnion,
        HastyPain,
        HastyPainBigUnion,
        HoarseMouse,
        HoarseMouseBigUnion,
        JumboEnd,
        JumboEndBigUnion,
        LimpingStep,
        LimpingStepBigUnion,
        MistySnow,
        MistySnowBigUnion,
        NormalSweet,
        NormalSweetBigUnion,
        PopularLimit,
        PopularLimitBigUnion,
        PotableBad,
        PotableBadBigUnion,
        PracticalPrinciple,
        PracticalPrincipleBigUnion,
        PrimaryBlock,
        PrimaryBlockBigUnion,
        RotatingRatio,
        RotatingRatioBigUnion,
        ThankfulFactor,
        ThankfulFactorBigUnion,
        TotalWork,
        TotalWorkBigUnion,
        TriangularRepair,
        TriangularRepairBigUnion,
        UniqueStress,
        UniqueStressBigUnion,
        UnwillingSmoke,
        UnwillingSmokeBigUnion,
        VibrantExcitement,
        VibrantExcitementBigUnion,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "ActiveDiamond": ".types",
    "ActiveDiamondBigUnion": ".types",
    "AttractiveScript": ".types",
    "AttractiveScriptBigUnion": ".types",
    "BigUnion": ".types",
    "CircularCard": ".types",
    "CircularCardBigUnion": ".types",
    "ColorfulCover": ".types",
    "ColorfulCoverBigUnion": ".types",
    "DiligentDeal": ".types",
    "DiligentDealBigUnion": ".types",
    "DisloyalValue": ".types",
    "DisloyalValueBigUnion": ".types",
    "DistinctFailure": ".types",
    "DistinctFailureBigUnion": ".types",
    "FalseMirror": ".types",
    "FalseMirrorBigUnion": ".types",
    "FrozenSleep": ".types",
    "FrozenSleepBigUnion": ".types",
    "GaseousRoad": ".types",
    "GaseousRoadBigUnion": ".types",
    "GruesomeCoach": ".types",
    "GruesomeCoachBigUnion": ".types",
    "HarmoniousPlay": ".types",
    "HarmoniousPlayBigUnion": ".types",
    "HastyPain": ".types",
    "HastyPainBigUnion": ".types",
    "HoarseMouse": ".types",
    "HoarseMouseBigUnion": ".types",
    "JumboEnd": ".types",
    "JumboEndBigUnion": ".types",
    "LimpingStep": ".types",
    "LimpingStepBigUnion": ".types",
    "MistySnow": ".types",
    "MistySnowBigUnion": ".types",
    "NormalSweet": ".types",
    "NormalSweetBigUnion": ".types",
    "PopularLimit": ".types",
    "PopularLimitBigUnion": ".types",
    "PotableBad": ".types",
    "PotableBadBigUnion": ".types",
    "PracticalPrinciple": ".types",
    "PracticalPrincipleBigUnion": ".types",
    "PrimaryBlock": ".types",
    "PrimaryBlockBigUnion": ".types",
    "RotatingRatio": ".types",
    "RotatingRatioBigUnion": ".types",
    "ThankfulFactor": ".types",
    "ThankfulFactorBigUnion": ".types",
    "TotalWork": ".types",
    "TotalWorkBigUnion": ".types",
    "TriangularRepair": ".types",
    "TriangularRepairBigUnion": ".types",
    "UniqueStress": ".types",
    "UniqueStressBigUnion": ".types",
    "UnwillingSmoke": ".types",
    "UnwillingSmokeBigUnion": ".types",
    "VibrantExcitement": ".types",
    "VibrantExcitementBigUnion": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ActiveDiamond",
    "ActiveDiamondBigUnion",
    "AttractiveScript",
    "AttractiveScriptBigUnion",
    "BigUnion",
    "CircularCard",
    "CircularCardBigUnion",
    "ColorfulCover",
    "ColorfulCoverBigUnion",
    "DiligentDeal",
    "DiligentDealBigUnion",
    "DisloyalValue",
    "DisloyalValueBigUnion",
    "DistinctFailure",
    "DistinctFailureBigUnion",
    "FalseMirror",
    "FalseMirrorBigUnion",
    "FrozenSleep",
    "FrozenSleepBigUnion",
    "GaseousRoad",
    "GaseousRoadBigUnion",
    "GruesomeCoach",
    "GruesomeCoachBigUnion",
    "HarmoniousPlay",
    "HarmoniousPlayBigUnion",
    "HastyPain",
    "HastyPainBigUnion",
    "HoarseMouse",
    "HoarseMouseBigUnion",
    "JumboEnd",
    "JumboEndBigUnion",
    "LimpingStep",
    "LimpingStepBigUnion",
    "MistySnow",
    "MistySnowBigUnion",
    "NormalSweet",
    "NormalSweetBigUnion",
    "PopularLimit",
    "PopularLimitBigUnion",
    "PotableBad",
    "PotableBadBigUnion",
    "PracticalPrinciple",
    "PracticalPrincipleBigUnion",
    "PrimaryBlock",
    "PrimaryBlockBigUnion",
    "RotatingRatio",
    "RotatingRatioBigUnion",
    "ThankfulFactor",
    "ThankfulFactorBigUnion",
    "TotalWork",
    "TotalWorkBigUnion",
    "TriangularRepair",
    "TriangularRepairBigUnion",
    "UniqueStress",
    "UniqueStressBigUnion",
    "UnwillingSmoke",
    "UnwillingSmokeBigUnion",
    "VibrantExcitement",
    "VibrantExcitementBigUnion",
]
