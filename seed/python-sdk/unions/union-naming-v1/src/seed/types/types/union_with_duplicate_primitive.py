# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Integer1UnionWithDuplicatePrimitive(UniversalBaseModel):
    value: int
    type: typing.Literal["integer1"] = "integer1"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class Integer2UnionWithDuplicatePrimitive(UniversalBaseModel):
    value: int
    type: typing.Literal["integer2"] = "integer2"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class String1UnionWithDuplicatePrimitive(UniversalBaseModel):
    value: str
    type: typing.Literal["string1"] = "string1"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class String2UnionWithDuplicatePrimitive(UniversalBaseModel):
    value: str
    type: typing.Literal["string2"] = "string2"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


"""
from seed.types import Integer1UnionWithDuplicatePrimitive

Integer1UnionWithDuplicatePrimitive(value=9)
"""
UnionWithDuplicatePrimitive = typing.Union[
    Integer1UnionWithDuplicatePrimitive,
    Integer2UnionWithDuplicatePrimitive,
    String1UnionWithDuplicatePrimitive,
    String2UnionWithDuplicatePrimitive,
]
