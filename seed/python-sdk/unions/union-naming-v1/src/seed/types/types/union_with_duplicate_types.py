# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class Foo1UnionWithDuplicateTypes(UniversalBaseModel):
    """
    Examples
    --------
    from seed.types import Foo1UnionWithDuplicateTypes
    Foo1UnionWithDuplicateTypes(name='example1', )
    """

    type: typing.Literal["foo1"] = "foo1"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class Foo2UnionWithDuplicateTypes(UniversalBaseModel):
    """
    Examples
    --------
    from seed.types import Foo1UnionWithDuplicateTypes
    Foo1UnionWithDuplicateTypes(name='example1', )
    """

    type: typing.Literal["foo2"] = "foo2"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from seed.types import Foo1UnionWithDuplicateTypes
Foo1UnionWithDuplicateTypes(name='example1', )
"""
UnionWithDuplicateTypes = typing.Union[Foo1UnionWithDuplicateTypes, Foo2UnionWithDuplicateTypes]
