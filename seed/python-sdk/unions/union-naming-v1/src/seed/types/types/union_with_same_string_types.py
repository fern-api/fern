# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class CustomFormatUnionWithSameStringTypes(UniversalBaseModel):
    value: str
    type: typing.Literal["customFormat"] = "customFormat"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class RegularStringUnionWithSameStringTypes(UniversalBaseModel):
    value: str
    type: typing.Literal["regularString"] = "regularString"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class PatternStringUnionWithSameStringTypes(UniversalBaseModel):
    value: str
    type: typing.Literal["patternString"] = "patternString"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


"""
from seed.types import CustomFormatUnionWithSameStringTypes

CustomFormatUnionWithSameStringTypes(value="custom-123")
"""
UnionWithSameStringTypes = typing.Union[
    CustomFormatUnionWithSameStringTypes, RegularStringUnionWithSameStringTypes, PatternStringUnionWithSameStringTypes
]
