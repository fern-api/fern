# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
import datetime as dt


class ValueUnionWithTime(UniversalBaseModel):
    value: int
    type: typing.Literal["value"] = "value"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class DateUnionWithTime(UniversalBaseModel):
    value: dt.date
    type: typing.Literal["date"] = "date"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class DatetimeUnionWithTime(UniversalBaseModel):
    value: dt.datetime
    type: typing.Literal["datetime"] = "datetime"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


"""
from seed.types import ValueUnionWithTime

ValueUnionWithTime(value=5)
"""
UnionWithTime = typing.Union[ValueUnionWithTime, DateUnionWithTime, DatetimeUnionWithTime]
