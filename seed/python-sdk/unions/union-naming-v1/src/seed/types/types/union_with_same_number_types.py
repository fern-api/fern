# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class PositiveIntUnionWithSameNumberTypes(UniversalBaseModel):
    value: int
    type: typing.Literal["positiveInt"] = "positiveInt"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class NegativeIntUnionWithSameNumberTypes(UniversalBaseModel):
    value: int
    type: typing.Literal["negativeInt"] = "negativeInt"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class AnyNumberUnionWithSameNumberTypes(UniversalBaseModel):
    value: float
    type: typing.Literal["anyNumber"] = "anyNumber"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


"""
from seed.types import PositiveIntUnionWithSameNumberTypes

PositiveIntUnionWithSameNumberTypes(value=100)
"""
UnionWithSameNumberTypes = typing.Union[
    PositiveIntUnionWithSameNumberTypes, NegativeIntUnionWithSameNumberTypes, AnyNumberUnionWithSameNumberTypes
]
