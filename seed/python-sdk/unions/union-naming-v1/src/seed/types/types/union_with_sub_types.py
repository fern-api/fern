# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FooUnionWithSubTypes(UniversalBaseModel):
    """
    Examples
    --------
    from seed.types import FooUnionWithSubTypes
    FooUnionWithSubTypes(name='example1', )
    """

    type: typing.Literal["foo"] = "foo"
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FooExtendedUnionWithSubTypes(UniversalBaseModel):
    """
    Examples
    --------
    from seed.types import FooUnionWithSubTypes
    FooUnionWithSubTypes(name='example1', )
    """

    type: typing.Literal["fooExtended"] = "fooExtended"
    age: int
    name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from seed.types import FooUnionWithSubTypes
FooUnionWithSubTypes(name='example1', )
"""
UnionWithSubTypes = typing.Union[FooUnionWithSubTypes, FooExtendedUnionWithSubTypes]
