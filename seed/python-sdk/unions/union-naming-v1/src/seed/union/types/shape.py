# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class Base(UniversalBaseModel):
    """
    Examples
    --------
    from seed.union import CircleShape
    CircleShape(radius=5.0, )
    """

    id: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CircleShape(Base):
    """
    Examples
    --------
    from seed.union import CircleShape
    CircleShape(radius=5.0, )
    """

    type: typing.Literal["circle"] = "circle"
    radius: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class SquareShape(Base):
    """
    Examples
    --------
    from seed.union import CircleShape
    CircleShape(radius=5.0, )
    """

    type: typing.Literal["square"] = "square"
    length: float

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


"""
from seed.union import CircleShape
CircleShape(radius=5.0, )
"""
Shape = typing.Union[CircleShape, SquareShape]
