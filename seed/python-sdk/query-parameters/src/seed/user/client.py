# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawUserClient
import uuid
import datetime as dt
from .types.user import User
import typing
from .types.nested_user import NestedUser
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawUserClient


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def get_username(
        self,
        *,
        limit: int,
        id: uuid.UUID,
        date: dt.date,
        deadline: dt.datetime,
        bytes: str,
        user: User,
        user_list: typing.Sequence[User],
        key_value: typing.Dict[str, str],
        nested_user: NestedUser,
        exclude_user: typing.Union[User, typing.Sequence[User]],
        filter: typing.Union[str, typing.Sequence[str]],
        optional_deadline: typing.Optional[dt.datetime] = None,
        optional_string: typing.Optional[str] = None,
        optional_user: typing.Optional[User] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        limit : int

        id : uuid.UUID

        date : dt.date

        deadline : dt.datetime

        bytes : str

        user : User

        user_list : typing.Sequence[User]

        key_value : typing.Dict[str, str]

        nested_user : NestedUser

        exclude_user : typing.Union[User, typing.Sequence[User]]

        filter : typing.Union[str, typing.Sequence[str]]

        optional_deadline : typing.Optional[dt.datetime]

        optional_string : typing.Optional[str]

        optional_user : typing.Optional[User]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedQueryParameters
        import uuid
        import datetime
        from seed.user import User
        from seed.user import NestedUser
        client = SeedQueryParameters(base_url="https://yourhost.com/path/to/api", )
        client.user.get_username(limit=1, id=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", ), date=datetime.date.fromisoformat("2023-01-15", ), deadline=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), bytes='SGVsbG8gd29ybGQh', user=User(name='name', tags=['tags', 'tags'], ), user_list=[User(name='name', tags=['tags', 'tags'], ), User(name='name', tags=['tags', 'tags'], )], optional_deadline=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), key_value={'keyValue': 'keyValue'}, optional_string='optionalString', nested_user=NestedUser(name='name', user=User(name='name', tags=['tags', 'tags'], ), ), optional_user=User(name='name', tags=['tags', 'tags'], ), exclude_user=User(name='name', tags=['tags', 'tags'], ), filter='filter', )
        """
        response = self._raw_client.get_username(
            limit=limit,
            id=id,
            date=date,
            deadline=deadline,
            bytes=bytes,
            user=user,
            user_list=user_list,
            key_value=key_value,
            nested_user=nested_user,
            exclude_user=exclude_user,
            filter=filter,
            optional_deadline=optional_deadline,
            optional_string=optional_string,
            optional_user=optional_user,
            request_options=request_options,
        )
        return response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def get_username(
        self,
        *,
        limit: int,
        id: uuid.UUID,
        date: dt.date,
        deadline: dt.datetime,
        bytes: str,
        user: User,
        user_list: typing.Sequence[User],
        key_value: typing.Dict[str, str],
        nested_user: NestedUser,
        exclude_user: typing.Union[User, typing.Sequence[User]],
        filter: typing.Union[str, typing.Sequence[str]],
        optional_deadline: typing.Optional[dt.datetime] = None,
        optional_string: typing.Optional[str] = None,
        optional_user: typing.Optional[User] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        limit : int

        id : uuid.UUID

        date : dt.date

        deadline : dt.datetime

        bytes : str

        user : User

        user_list : typing.Sequence[User]

        key_value : typing.Dict[str, str]

        nested_user : NestedUser

        exclude_user : typing.Union[User, typing.Sequence[User]]

        filter : typing.Union[str, typing.Sequence[str]]

        optional_deadline : typing.Optional[dt.datetime]

        optional_string : typing.Optional[str]

        optional_user : typing.Optional[User]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import AsyncSeedQueryParameters
        import uuid
        import datetime
        from seed.user import User
        from seed.user import NestedUser
        import asyncio
        client = AsyncSeedQueryParameters(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.get_username(limit=1, id=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", ), date=datetime.date.fromisoformat("2023-01-15", ), deadline=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), bytes='SGVsbG8gd29ybGQh', user=User(name='name', tags=['tags', 'tags'], ), user_list=[User(name='name', tags=['tags', 'tags'], ), User(name='name', tags=['tags', 'tags'], )], optional_deadline=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), key_value={'keyValue': 'keyValue'}, optional_string='optionalString', nested_user=NestedUser(name='name', user=User(name='name', tags=['tags', 'tags'], ), ), optional_user=User(name='name', tags=['tags', 'tags'], ), exclude_user=User(name='name', tags=['tags', 'tags'], ), filter='filter', )
        asyncio.run(main())
        """
        response = await self._raw_client.get_username(
            limit=limit,
            id=id,
            date=date,
            deadline=deadline,
            bytes=bytes,
            user=user,
            user_list=user_list,
            key_value=key_value,
            nested_user=nested_user,
            exclude_user=exclude_user,
            filter=filter,
            optional_deadline=optional_deadline,
            optional_string=optional_string,
            optional_user=optional_user,
            request_options=request_options,
        )
        return response.data
