# This file was auto-generated by Fern from our API Definition.

import typing
import os
import httpx
from .core.api_error import ApiError
from .core.client_wrapper import SyncClientWrapper
from .basic_auth.client import BasicAuthClient
from .core.client_wrapper import AsyncClientWrapper
from .basic_auth.client import AsyncBasicAuthClient


class SeedBasicAuthEnvironmentVariables:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    username : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    access_token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedBasicAuthEnvironmentVariables

    client = SeedBasicAuthEnvironmentVariables(
        username="YOUR_USERNAME",
        access_token="YOUR_ACCESS_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        username: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("USERNAME"),
        access_token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("PASSWORD"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if username is None:
            raise ApiError(body="The client must be instantiated be either passing in username or setting USERNAME")
        if access_token is None:
            raise ApiError(body="The client must be instantiated be either passing in access_token or setting PASSWORD")
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            username=username,
            access_token=access_token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.basic_auth = BasicAuthClient(client_wrapper=self._client_wrapper)


class AsyncSeedBasicAuthEnvironmentVariables:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    username : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    access_token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedBasicAuthEnvironmentVariables

    client = AsyncSeedBasicAuthEnvironmentVariables(
        username="YOUR_USERNAME",
        access_token="YOUR_ACCESS_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        username: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("USERNAME"),
        access_token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("PASSWORD"),
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if username is None:
            raise ApiError(body="The client must be instantiated be either passing in username or setting USERNAME")
        if access_token is None:
            raise ApiError(body="The client must be instantiated be either passing in access_token or setting PASSWORD")
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            username=username,
            access_token=access_token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.basic_auth = AsyncBasicAuthClient(client_wrapper=self._client_wrapper)
