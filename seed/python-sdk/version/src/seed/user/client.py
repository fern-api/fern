# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawUserClient, RawUserClient
from .types.user import User
from .types.user_id import UserId


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def get_user(self, user_id: UserId, *, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Parameters
        ----------
        user_id : UserId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedVersion
        client = SeedVersion(base_url="https://yourhost.com/path/to/api", )
        client.user.get_user(user_id='userId', )
        """
        _response = self._raw_client.get_user(user_id, request_options=request_options)
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def get_user(self, user_id: UserId, *, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Parameters
        ----------
        user_id : UserId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import AsyncSeedVersion
        import asyncio
        client = AsyncSeedVersion(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.get_user(user_id='userId', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_user(user_id, request_options=request_options)
        return _response.data
