# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import union
    from .client import AsyncSeedUndiscriminatedUnions, SeedUndiscriminatedUnions
    from .union import (
        Key,
        KeyType,
        Metadata,
        MetadataUnion,
        MyUnion,
        NamedMetadata,
        NestedUnionL1,
        NestedUnionL2,
        NestedUnionRoot,
        OptionalMetadata,
        Request,
        TypeWithOptionalUnion,
        UnionWithDuplicateTypes,
    )
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncSeedUndiscriminatedUnions": ".client",
    "Key": ".union",
    "KeyType": ".union",
    "Metadata": ".union",
    "MetadataUnion": ".union",
    "MyUnion": ".union",
    "NamedMetadata": ".union",
    "NestedUnionL1": ".union",
    "NestedUnionL2": ".union",
    "NestedUnionRoot": ".union",
    "OptionalMetadata": ".union",
    "Request": ".union",
    "SeedUndiscriminatedUnions": ".client",
    "TypeWithOptionalUnion": ".union",
    "UnionWithDuplicateTypes": ".union",
    "__version__": ".version",
    "union": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncSeedUndiscriminatedUnions",
    "Key",
    "KeyType",
    "Metadata",
    "MetadataUnion",
    "MyUnion",
    "NamedMetadata",
    "NestedUnionL1",
    "NestedUnionL2",
    "NestedUnionRoot",
    "OptionalMetadata",
    "Request",
    "SeedUndiscriminatedUnions",
    "TypeWithOptionalUnion",
    "UnionWithDuplicateTypes",
    "__version__",
    "union",
]
