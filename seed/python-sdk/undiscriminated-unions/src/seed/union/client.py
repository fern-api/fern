# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.my_union import MyUnion
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.metadata import Metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UnionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, *, request: MyUnion, request_options: typing.Optional[RequestOptions] = None) -> MyUnion:
        """
        Parameters
        ----------
        request : MyUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MyUnion

        Examples
        --------
        from seed import SeedUndiscriminatedUnions

        client = SeedUndiscriminatedUnions(
            base_url="https://yourhost.com/path/to/api",
        )
        client.union.get(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            json=convert_and_respect_annotation_metadata(object_=request, annotation=MyUnion, direction="write"),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MyUnion,
                    parse_obj_as(
                        type_=MyUnion,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_metadata(self, *, request_options: typing.Optional[RequestOptions] = None) -> Metadata:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Metadata

        Examples
        --------
        from seed import SeedUndiscriminatedUnions

        client = SeedUndiscriminatedUnions(
            base_url="https://yourhost.com/path/to/api",
        )
        client.union.get_metadata()
        """
        _response = self._client_wrapper.httpx_client.request(
            "metadata",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Metadata,
                    parse_obj_as(
                        type_=Metadata,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUnionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, *, request: MyUnion, request_options: typing.Optional[RequestOptions] = None) -> MyUnion:
        """
        Parameters
        ----------
        request : MyUnion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MyUnion

        Examples
        --------
        import asyncio

        from seed import AsyncSeedUndiscriminatedUnions

        client = AsyncSeedUndiscriminatedUnions(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.union.get(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            json=convert_and_respect_annotation_metadata(object_=request, annotation=MyUnion, direction="write"),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MyUnion,
                    parse_obj_as(
                        type_=MyUnion,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_metadata(self, *, request_options: typing.Optional[RequestOptions] = None) -> Metadata:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Metadata

        Examples
        --------
        import asyncio

        from seed import AsyncSeedUndiscriminatedUnions

        client = AsyncSeedUndiscriminatedUnions(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.union.get_metadata()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "metadata",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Metadata,
                    parse_obj_as(
                        type_=Metadata,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
