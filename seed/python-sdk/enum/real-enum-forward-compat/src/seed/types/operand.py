# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class Operand(str, enum.Enum):
    """
    Tests enum name and value can be
    different.

    Examples
    --------
    from seed import Operand

    Operand.GREATER_THAN
    """

    GREATER_THAN = ">"
    EQUAL_TO = "="
    LESS_THAN = "less_than"
    """
    The name and value should be similar
    are similar for less than.
    """

    _UNKNOWN = "__OPERAND_UNKNOWN__"
    """
    This member is used for forward compatibility. If the value is not recognized by the enum, it will be stored here, and the raw value is accessible through `.value`.
    """

    @classmethod
    def _missing_(cls, value: typing.Any) -> "Operand":
        unknown = cls._UNKNOWN
        unknown._value_ = value
        return unknown

    def visit(
        self,
        greater_than: typing.Callable[[], T_Result],
        equal_to: typing.Callable[[], T_Result],
        less_than: typing.Callable[[], T_Result],
        _unknown_member: typing.Callable[[str], T_Result],
    ) -> T_Result:
        if self is Operand.GREATER_THAN:
            return greater_than()
        if self is Operand.EQUAL_TO:
            return equal_to()
        if self is Operand.LESS_THAN:
            return less_than()
        return _unknown_member(self._value_)
