# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.color_or_operand import ColorOrOperand
from ..types.operand import Operand
from .raw_client import AsyncRawHeadersClient, RawHeadersClient


class HeadersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawHeadersClient(client_wrapper=client_wrapper)
    
    @property
    def with_raw_response(self) -> RawHeadersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.
        
        Returns
        -------
        RawHeadersClient
        """
        return self._raw_client
    
    def send(self, *, operand: Operand, operand_or_color: ColorOrOperand, maybe_operand: typing.Optional[Operand] = None, maybe_operand_or_color: typing.Optional[ColorOrOperand] = None, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        operand : Operand
        
        operand_or_color : ColorOrOperand
        
        maybe_operand : typing.Optional[Operand]
        
        maybe_operand_or_color : typing.Optional[ColorOrOperand]
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        None
        
        Examples
        --------
        from seed import Color, Operand, SeedEnum
        
        client = SeedEnum(
            base_url="https://yourhost.com/path/to/api",
        )
        client.headers.send(
            operand=Operand.GREATER_THAN,
            maybe_operand=Operand.GREATER_THAN,
            operand_or_color=Color.RED,
        )
        """
        _response = self._raw_client.send(operand=operand, operand_or_color=operand_or_color, maybe_operand=maybe_operand, maybe_operand_or_color=maybe_operand_or_color, request_options=request_options)
        return _response.data
class AsyncHeadersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawHeadersClient(client_wrapper=client_wrapper)
    
    @property
    def with_raw_response(self) -> AsyncRawHeadersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.
        
        Returns
        -------
        AsyncRawHeadersClient
        """
        return self._raw_client
    
    async def send(self, *, operand: Operand, operand_or_color: ColorOrOperand, maybe_operand: typing.Optional[Operand] = None, maybe_operand_or_color: typing.Optional[ColorOrOperand] = None, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        operand : Operand
        
        operand_or_color : ColorOrOperand
        
        maybe_operand : typing.Optional[Operand]
        
        maybe_operand_or_color : typing.Optional[ColorOrOperand]
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        None
        
        Examples
        --------
        import asyncio
        
        from seed import AsyncSeedEnum, Color, Operand
        
        client = AsyncSeedEnum(
            base_url="https://yourhost.com/path/to/api",
        )
        
        
        async def main() -> None:
            await client.headers.send(
                operand=Operand.GREATER_THAN,
                maybe_operand=Operand.GREATER_THAN,
                operand_or_color=Color.RED,
            )
        
        
        asyncio.run(main())
        """
        _response = await self._raw_client.send(operand=operand, operand_or_color=operand_or_color, maybe_operand=maybe_operand, maybe_operand_or_color=maybe_operand_or_color, request_options=request_options)
        return _response.data
