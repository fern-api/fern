# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.color_or_operand import ColorOrOperand
from ..types.operand import Operand
from .raw_client import AsyncRawInlinedRequestClient, RawInlinedRequestClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InlinedRequestClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInlinedRequestClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInlinedRequestClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInlinedRequestClient
        """
        return self._raw_client

    def send(
        self,
        *,
        operand: Operand,
        operand_or_color: ColorOrOperand,
        maybe_operand: typing.Optional[Operand] = OMIT,
        maybe_operand_or_color: typing.Optional[ColorOrOperand] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        operand : Operand

        operand_or_color : ColorOrOperand

        maybe_operand : typing.Optional[Operand]

        maybe_operand_or_color : typing.Optional[ColorOrOperand]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedEnum
        client = SeedEnum(base_url="https://yourhost.com/path/to/api", )
        client.inlined_request.send(operand=">", operand_or_color="red", )
        """
        response = self._raw_client.send(
            operand=operand,
            operand_or_color=operand_or_color,
            maybe_operand=maybe_operand,
            maybe_operand_or_color=maybe_operand_or_color,
            request_options=request_options,
        )
        return response.data


class AsyncInlinedRequestClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInlinedRequestClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInlinedRequestClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInlinedRequestClient
        """
        return self._raw_client

    async def send(
        self,
        *,
        operand: Operand,
        operand_or_color: ColorOrOperand,
        maybe_operand: typing.Optional[Operand] = OMIT,
        maybe_operand_or_color: typing.Optional[ColorOrOperand] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        operand : Operand

        operand_or_color : ColorOrOperand

        maybe_operand : typing.Optional[Operand]

        maybe_operand_or_color : typing.Optional[ColorOrOperand]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedEnum
        import asyncio
        client = AsyncSeedEnum(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.inlined_request.send(operand=">", operand_or_color="red", )
        asyncio.run(main())
        """
        response = await self._raw_client.send(
            operand=operand,
            operand_or_color=operand_or_color,
            maybe_operand=maybe_operand,
            maybe_operand_or_color=maybe_operand_or_color,
            request_options=request_options,
        )
        return response.data
