# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper

if typing.TYPE_CHECKING:
    from .headers.client import AsyncHeadersClient, HeadersClient
    from .inlined_request.client import AsyncInlinedRequestClient, InlinedRequestClient
    from .path_param.client import AsyncPathParamClient, PathParamClient
    from .query_param.client import AsyncQueryParamClient, QueryParamClient


class SeedEnum:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedEnum

    client = SeedEnum(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._headers: typing.Optional[HeadersClient] = None
        self._inlined_request: typing.Optional[InlinedRequestClient] = None
        self._path_param: typing.Optional[PathParamClient] = None
        self._query_param: typing.Optional[QueryParamClient] = None

    @property
    def headers(self):
        if self._headers is None:
            from .headers.client import HeadersClient  # noqa: E402

            self._headers = HeadersClient(client_wrapper=self._client_wrapper)
        return self._headers

    @property
    def inlined_request(self):
        if self._inlined_request is None:
            from .inlined_request.client import InlinedRequestClient  # noqa: E402

            self._inlined_request = InlinedRequestClient(client_wrapper=self._client_wrapper)
        return self._inlined_request

    @property
    def path_param(self):
        if self._path_param is None:
            from .path_param.client import PathParamClient  # noqa: E402

            self._path_param = PathParamClient(client_wrapper=self._client_wrapper)
        return self._path_param

    @property
    def query_param(self):
        if self._query_param is None:
            from .query_param.client import QueryParamClient  # noqa: E402

            self._query_param = QueryParamClient(client_wrapper=self._client_wrapper)
        return self._query_param


class AsyncSeedEnum:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedEnum

    client = AsyncSeedEnum(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._headers: typing.Optional[AsyncHeadersClient] = None
        self._inlined_request: typing.Optional[AsyncInlinedRequestClient] = None
        self._path_param: typing.Optional[AsyncPathParamClient] = None
        self._query_param: typing.Optional[AsyncQueryParamClient] = None

    @property
    def headers(self):
        if self._headers is None:
            from .headers.client import AsyncHeadersClient  # noqa: E402

            self._headers = AsyncHeadersClient(client_wrapper=self._client_wrapper)
        return self._headers

    @property
    def inlined_request(self):
        if self._inlined_request is None:
            from .inlined_request.client import AsyncInlinedRequestClient  # noqa: E402

            self._inlined_request = AsyncInlinedRequestClient(client_wrapper=self._client_wrapper)
        return self._inlined_request

    @property
    def path_param(self):
        if self._path_param is None:
            from .path_param.client import AsyncPathParamClient  # noqa: E402

            self._path_param = AsyncPathParamClient(client_wrapper=self._client_wrapper)
        return self._path_param

    @property
    def query_param(self):
        if self._query_param is None:
            from .query_param.client import AsyncQueryParamClient  # noqa: E402

            self._query_param = AsyncQueryParamClient(client_wrapper=self._client_wrapper)
        return self._query_param
