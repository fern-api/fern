# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...core.request_options import RequestOptions
from ...types.color_or_operand import ColorOrOperand
from ...types.operand import Operand

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InlinedRequestClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def send(
        self,
        *,
        operand: Operand,
        maybe_operand: typing.Optional[Operand] = OMIT,
        operand_or_color: ColorOrOperand,
        maybe_operand_or_color: typing.Optional[ColorOrOperand] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - operand: Operand.

            - maybe_operand: typing.Optional[Operand].

            - operand_or_color: ColorOrOperand.

            - maybe_operand_or_color: typing.Optional[ColorOrOperand].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import Operand
        from seed.client import SeedEnum

        client = SeedEnum(base_url="https://yourhost.com/path/to/api", )
        client.inlined_request.send(operand=Operand., )
        """
        _request: typing.Dict[str, typing.Any] = {"operand": operand, "operandOrColor": operand_or_color}
        if maybe_operand is not OMIT:
            _request["maybeOperand"] = maybe_operand.value if maybe_operand is not None else None
        if maybe_operand_or_color is not OMIT:
            _request["maybeOperandOrColor"] = maybe_operand_or_color
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "inlined"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncInlinedRequestClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def send(
        self,
        *,
        operand: Operand,
        maybe_operand: typing.Optional[Operand] = OMIT,
        operand_or_color: ColorOrOperand,
        maybe_operand_or_color: typing.Optional[ColorOrOperand] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters:
            - operand: Operand.

            - maybe_operand: typing.Optional[Operand].

            - operand_or_color: ColorOrOperand.

            - maybe_operand_or_color: typing.Optional[ColorOrOperand].

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from seed import Operand
        from seed.client import AsyncSeedEnum

        client = AsyncSeedEnum(base_url="https://yourhost.com/path/to/api", )
        await client.inlined_request.send(operand=Operand., )
        """
        _request: typing.Dict[str, typing.Any] = {"operand": operand, "operandOrColor": operand_or_color}
        if maybe_operand is not OMIT:
            _request["maybeOperand"] = maybe_operand.value if maybe_operand is not None else None
        if maybe_operand_or_color is not OMIT:
            _request["maybeOperandOrColor"] = maybe_operand_or_color
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "inlined"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else 60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
