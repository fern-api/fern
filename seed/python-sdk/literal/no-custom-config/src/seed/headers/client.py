# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.send_response import SendResponse
from .raw_client import AsyncRawHeadersClient, RawHeadersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class HeadersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawHeadersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawHeadersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawHeadersClient
        """
        return self._raw_client

    def send(self, *, query: str, request_options: typing.Optional[RequestOptions] = None) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import SeedLiteral
        client = SeedLiteral(base_url="https://yourhost.com/path/to/api", )
        client.headers.send(query='What is the weather today', )
        """
        _response = self._raw_client.send(query=query, request_options=request_options)
        return _response.data


class AsyncHeadersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawHeadersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawHeadersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawHeadersClient
        """
        return self._raw_client

    async def send(self, *, query: str, request_options: typing.Optional[RequestOptions] = None) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import AsyncSeedLiteral
        import asyncio
        client = AsyncSeedLiteral(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.headers.send(query='What is the weather today', )
        asyncio.run(main())
        """
        _response = await self._raw_client.send(query=query, request_options=request_options)
        return _response.data
