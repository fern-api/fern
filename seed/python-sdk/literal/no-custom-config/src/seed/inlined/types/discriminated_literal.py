# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class DiscriminatedLiteral_CustomName(UniversalBaseModel):
    value: str
    type: typing.Literal["customName"] = "customName"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class DiscriminatedLiteral_DefaultName(UniversalBaseModel):
    value: typing.Literal["Bob"]
    type: typing.Literal["defaultName"] = "defaultName"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class DiscriminatedLiteral_George(UniversalBaseModel):
    value: bool
    type: typing.Literal["george"] = "george"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class DiscriminatedLiteral_LiteralGeorge(UniversalBaseModel):
    value: typing.Literal[True]
    type: typing.Literal["literalGeorge"] = "literalGeorge"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


DiscriminatedLiteral = typing.Union[
    DiscriminatedLiteral_CustomName,
    DiscriminatedLiteral_DefaultName,
    DiscriminatedLiteral_George,
    DiscriminatedLiteral_LiteralGeorge,
]
