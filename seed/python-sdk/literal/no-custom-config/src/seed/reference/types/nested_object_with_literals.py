# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class NestedObjectWithLiterals(UniversalBaseModel):
    literal_1: typing_extensions.Annotated[typing.Literal["literal1"], FieldMetadata(alias="literal1")] = "literal1"
    literal_2: typing_extensions.Annotated[typing.Literal["literal2"], FieldMetadata(alias="literal2")] = "literal2"
    str_prop: typing_extensions.Annotated[str, FieldMetadata(alias="strProp")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
