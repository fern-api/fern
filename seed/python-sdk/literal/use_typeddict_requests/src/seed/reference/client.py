# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.send_response import SendResponse
from .raw_client import AsyncRawReferenceClient, RawReferenceClient
from .requests.container_object import ContainerObjectParams
from .types.some_literal import SomeLiteral

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReferenceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawReferenceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawReferenceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawReferenceClient
        """
        return self._raw_client

    def send(
        self,
        *,
        query: str,
        container_object: ContainerObjectParams,
        maybe_context: typing.Optional[SomeLiteral] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        container_object : ContainerObjectParams

        maybe_context : typing.Optional[SomeLiteral]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import SeedLiteral
        client = SeedLiteral(base_url="https://yourhost.com/path/to/api", )
        client.reference.send(query='What is the weather today', container_object={'nested_objects': [{'literal_1': 'literal1', 'literal_2': 'literal2', 'str_prop': 'strProp'}]}, )
        """
        response = self._raw_client.send(
            query=query, container_object=container_object, maybe_context=maybe_context, request_options=request_options
        )
        return response.data


class AsyncReferenceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawReferenceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawReferenceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawReferenceClient
        """
        return self._raw_client

    async def send(
        self,
        *,
        query: str,
        container_object: ContainerObjectParams,
        maybe_context: typing.Optional[SomeLiteral] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        container_object : ContainerObjectParams

        maybe_context : typing.Optional[SomeLiteral]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import AsyncSeedLiteral
        import asyncio
        client = AsyncSeedLiteral(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.reference.send(query='What is the weather today', container_object={'nested_objects': [{'literal_1': 'literal1', 'literal_2': 'literal2', 'str_prop': 'strProp'}]}, )
        asyncio.run(main())
        """
        response = await self._raw_client.send(
            query=query, container_object=container_object, maybe_context=maybe_context, request_options=request_options
        )
        return response.data
