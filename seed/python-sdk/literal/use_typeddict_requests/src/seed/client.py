# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper

if typing.TYPE_CHECKING:
    from .headers.client import AsyncHeadersClient, HeadersClient
    from .inlined.client import AsyncInlinedClient, InlinedClient
    from .path.client import AsyncPathClient, PathClient
    from .query.client import AsyncQueryClient, QueryClient
    from .reference.client import AsyncReferenceClient, ReferenceClient


class SeedLiteral:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    version : typing.Optional[str]
    audit_logging : typing.Optional[str]
    Examples
    --------
    from seed import SeedLiteral

    client = SeedLiteral(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
        version: typing.Optional[str] = None,
        audit_logging: typing.Optional[str] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
            version=version,
            audit_logging=audit_logging,
        )
        self._headers: typing.Optional[HeadersClient] = None
        self._inlined: typing.Optional[InlinedClient] = None
        self._path: typing.Optional[PathClient] = None
        self._query: typing.Optional[QueryClient] = None
        self._reference: typing.Optional[ReferenceClient] = None

    @property
    def headers(self):
        if self._headers is None:
            from .headers.client import HeadersClient  # noqa: E402

            self._headers = HeadersClient(client_wrapper=self._client_wrapper)
        return self._headers

    @property
    def inlined(self):
        if self._inlined is None:
            from .inlined.client import InlinedClient  # noqa: E402

            self._inlined = InlinedClient(client_wrapper=self._client_wrapper)
        return self._inlined

    @property
    def path(self):
        if self._path is None:
            from .path.client import PathClient  # noqa: E402

            self._path = PathClient(client_wrapper=self._client_wrapper)
        return self._path

    @property
    def query(self):
        if self._query is None:
            from .query.client import QueryClient  # noqa: E402

            self._query = QueryClient(client_wrapper=self._client_wrapper)
        return self._query

    @property
    def reference(self):
        if self._reference is None:
            from .reference.client import ReferenceClient  # noqa: E402

            self._reference = ReferenceClient(client_wrapper=self._client_wrapper)
        return self._reference


class AsyncSeedLiteral:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    version : typing.Optional[str]
    audit_logging : typing.Optional[str]
    Examples
    --------
    from seed import AsyncSeedLiteral

    client = AsyncSeedLiteral(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
        version: typing.Optional[str] = None,
        audit_logging: typing.Optional[str] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
            version=version,
            audit_logging=audit_logging,
        )
        self._headers: typing.Optional[AsyncHeadersClient] = None
        self._inlined: typing.Optional[AsyncInlinedClient] = None
        self._path: typing.Optional[AsyncPathClient] = None
        self._query: typing.Optional[AsyncQueryClient] = None
        self._reference: typing.Optional[AsyncReferenceClient] = None

    @property
    def headers(self):
        if self._headers is None:
            from .headers.client import AsyncHeadersClient  # noqa: E402

            self._headers = AsyncHeadersClient(client_wrapper=self._client_wrapper)
        return self._headers

    @property
    def inlined(self):
        if self._inlined is None:
            from .inlined.client import AsyncInlinedClient  # noqa: E402

            self._inlined = AsyncInlinedClient(client_wrapper=self._client_wrapper)
        return self._inlined

    @property
    def path(self):
        if self._path is None:
            from .path.client import AsyncPathClient  # noqa: E402

            self._path = AsyncPathClient(client_wrapper=self._client_wrapper)
        return self._path

    @property
    def query(self):
        if self._query is None:
            from .query.client import AsyncQueryClient  # noqa: E402

            self._query = AsyncQueryClient(client_wrapper=self._client_wrapper)
        return self._query

    @property
    def reference(self):
        if self._reference is None:
            from .reference.client import AsyncReferenceClient  # noqa: E402

            self._reference = AsyncReferenceClient(client_wrapper=self._client_wrapper)
        return self._reference
