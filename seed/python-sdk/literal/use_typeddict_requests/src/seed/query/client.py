# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.send_response import SendResponse
from .raw_client import AsyncRawQueryClient, RawQueryClient
from .types.alias_to_prompt import AliasToPrompt
from .types.alias_to_stream import AliasToStream


class QueryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawQueryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawQueryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawQueryClient
        """
        return self._raw_client

    def send(
        self,
        *,
        query: str,
        optional_prompt: typing.Optional[typing.Literal["You are a helpful assistant"]] = None,
        alias_optional_prompt: typing.Optional[AliasToPrompt] = None,
        optional_stream: typing.Optional[typing.Literal[False]] = None,
        alias_optional_stream: typing.Optional[AliasToStream] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        optional_prompt : typing.Optional[typing.Literal["You are a helpful assistant"]]

        alias_optional_prompt : typing.Optional[AliasToPrompt]

        optional_stream : typing.Optional[typing.Literal[False]]

        alias_optional_stream : typing.Optional[AliasToStream]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import SeedLiteral
        client = SeedLiteral(base_url="https://yourhost.com/path/to/api", )
        client.query.send(query='What is the weather today', )
        """
        response = self._raw_client.send(
            query=query,
            optional_prompt=optional_prompt,
            alias_optional_prompt=alias_optional_prompt,
            optional_stream=optional_stream,
            alias_optional_stream=alias_optional_stream,
            request_options=request_options,
        )
        return response.data


class AsyncQueryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawQueryClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawQueryClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawQueryClient
        """
        return self._raw_client

    async def send(
        self,
        *,
        query: str,
        optional_prompt: typing.Optional[typing.Literal["You are a helpful assistant"]] = None,
        alias_optional_prompt: typing.Optional[AliasToPrompt] = None,
        optional_stream: typing.Optional[typing.Literal[False]] = None,
        alias_optional_stream: typing.Optional[AliasToStream] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        optional_prompt : typing.Optional[typing.Literal["You are a helpful assistant"]]

        alias_optional_prompt : typing.Optional[AliasToPrompt]

        optional_stream : typing.Optional[typing.Literal[False]]

        alias_optional_stream : typing.Optional[AliasToStream]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import AsyncSeedLiteral
        import asyncio
        client = AsyncSeedLiteral(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.query.send(query='What is the weather today', )
        asyncio.run(main())
        """
        response = await self._raw_client.send(
            query=query,
            optional_prompt=optional_prompt,
            alias_optional_prompt=alias_optional_prompt,
            optional_stream=optional_stream,
            alias_optional_stream=alias_optional_stream,
            request_options=request_options,
        )
        return response.data
