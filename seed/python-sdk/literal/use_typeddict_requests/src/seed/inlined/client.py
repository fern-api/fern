# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.send_response import SendResponse
from .raw_client import AsyncRawInlinedClient, RawInlinedClient
from .requests.a_top_level_literal import ATopLevelLiteralParams
from .types.some_aliased_literal import SomeAliasedLiteral

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InlinedClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInlinedClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInlinedClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInlinedClient
        """
        return self._raw_client

    def send(
        self,
        *,
        query: str,
        object_with_literal: ATopLevelLiteralParams,
        context: typing.Optional[typing.Literal["You're super wise"]] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        maybe_context: typing.Optional[SomeAliasedLiteral] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        object_with_literal : ATopLevelLiteralParams

        context : typing.Optional[typing.Literal["You're super wise"]]

        temperature : typing.Optional[float]

        maybe_context : typing.Optional[SomeAliasedLiteral]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import SeedLiteral
        client = SeedLiteral(base_url="https://yourhost.com/path/to/api", )
        client.inlined.send(temperature=10.1, context="You're super wise", maybe_context="You're super wise", object_with_literal={'nested_literal': {'my_literal': 'How super cool'}}, query='What is the weather today', )
        """
        response = self._raw_client.send(
            query=query,
            object_with_literal=object_with_literal,
            context=context,
            temperature=temperature,
            maybe_context=maybe_context,
            request_options=request_options,
        )
        return response.data


class AsyncInlinedClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInlinedClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInlinedClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInlinedClient
        """
        return self._raw_client

    async def send(
        self,
        *,
        query: str,
        object_with_literal: ATopLevelLiteralParams,
        context: typing.Optional[typing.Literal["You're super wise"]] = OMIT,
        temperature: typing.Optional[float] = OMIT,
        maybe_context: typing.Optional[SomeAliasedLiteral] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SendResponse:
        """
        Parameters
        ----------
        query : str

        object_with_literal : ATopLevelLiteralParams

        context : typing.Optional[typing.Literal["You're super wise"]]

        temperature : typing.Optional[float]

        maybe_context : typing.Optional[SomeAliasedLiteral]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SendResponse

        Examples
        --------
        from seed import AsyncSeedLiteral
        import asyncio
        client = AsyncSeedLiteral(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.inlined.send(temperature=10.1, context="You're super wise", maybe_context="You're super wise", object_with_literal={'nested_literal': {'my_literal': 'How super cool'}}, query='What is the weather today', )
        asyncio.run(main())
        """
        response = await self._raw_client.send(
            query=query,
            object_with_literal=object_with_literal,
            context=context,
            temperature=temperature,
            maybe_context=maybe_context,
            request_options=request_options,
        )
        return response.data
