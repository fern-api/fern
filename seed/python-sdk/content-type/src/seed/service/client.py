# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawServiceClient
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def patch(
        self,
        *,
        application: typing.Optional[str] = OMIT,
        require_auth: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        application : typing.Optional[str]

        require_auth : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedContentTypes
        client = SeedContentTypes(base_url="https://yourhost.com/path/to/api", )
        client.service.patch(application='application', require_auth=True, )
        """
        response = self._raw_client.patch(
            application=application, require_auth=require_auth, request_options=request_options
        )
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def patch(
        self,
        *,
        application: typing.Optional[str] = OMIT,
        require_auth: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        application : typing.Optional[str]

        require_auth : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedContentTypes
        import asyncio
        client = AsyncSeedContentTypes(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.service.patch(application='application', require_auth=True, )
        asyncio.run(main())
        """
        response = await self._raw_client.patch(
            application=application, require_auth=require_auth, request_options=request_options
        )
        return response.data
