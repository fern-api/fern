# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawServiceClient, RawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def patch(
        self,
        *,
        application: typing.Optional[str] = OMIT,
        require_auth: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        application : typing.Optional[str]

        require_auth : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedContentTypes

        client = SeedContentTypes(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.patch(
            application="application",
            require_auth=True,
        )
        """
        _response = self._raw_client.patch(
            application=application, require_auth=require_auth, request_options=request_options
        )
        return _response.data

    def patch_complex(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        age: typing.Optional[int] = OMIT,
        active: typing.Optional[bool] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        email: typing.Optional[str] = OMIT,
        nickname: typing.Optional[str] = OMIT,
        bio: typing.Optional[str] = OMIT,
        profile_image_url: typing.Optional[str] = OMIT,
        settings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update with JSON merge patch - complex types.
        This endpoint demonstrates the distinction between:
        - optional<T> fields (can be present or absent, but not null)
        - optional<nullable<T>> fields (can be present, absent, or null)

        Parameters
        ----------
        id : str

        name : typing.Optional[str]

        age : typing.Optional[int]

        active : typing.Optional[bool]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        tags : typing.Optional[typing.Sequence[str]]

        email : typing.Optional[str]

        nickname : typing.Optional[str]

        bio : typing.Optional[str]

        profile_image_url : typing.Optional[str]

        settings : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedContentTypes

        client = SeedContentTypes(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.patch_complex(
            id="id",
            name="name",
            age=1,
            active=True,
            metadata={"metadata": {"key": "value"}},
            tags=["tags", "tags"],
            email="email",
            nickname="nickname",
            bio="bio",
            profile_image_url="profileImageUrl",
            settings={"settings": {"key": "value"}},
        )
        """
        _response = self._raw_client.patch_complex(
            id,
            name=name,
            age=age,
            active=active,
            metadata=metadata,
            tags=tags,
            email=email,
            nickname=nickname,
            bio=bio,
            profile_image_url=profile_image_url,
            settings=settings,
            request_options=request_options,
        )
        return _response.data

    def regular_patch(
        self,
        id: str,
        *,
        field_1: typing.Optional[str] = OMIT,
        field_2: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Regular PATCH endpoint without merge-patch semantics

        Parameters
        ----------
        id : str

        field_1 : typing.Optional[str]

        field_2 : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedContentTypes

        client = SeedContentTypes(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.regular_patch(
            id="id",
            field_1="field1",
            field_2=1,
        )
        """
        _response = self._raw_client.regular_patch(
            id, field_1=field_1, field_2=field_2, request_options=request_options
        )
        return _response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def patch(
        self,
        *,
        application: typing.Optional[str] = OMIT,
        require_auth: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        application : typing.Optional[str]

        require_auth : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedContentTypes

        client = AsyncSeedContentTypes(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.patch(
                application="application",
                require_auth=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch(
            application=application, require_auth=require_auth, request_options=request_options
        )
        return _response.data

    async def patch_complex(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        age: typing.Optional[int] = OMIT,
        active: typing.Optional[bool] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        email: typing.Optional[str] = OMIT,
        nickname: typing.Optional[str] = OMIT,
        bio: typing.Optional[str] = OMIT,
        profile_image_url: typing.Optional[str] = OMIT,
        settings: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Update with JSON merge patch - complex types.
        This endpoint demonstrates the distinction between:
        - optional<T> fields (can be present or absent, but not null)
        - optional<nullable<T>> fields (can be present, absent, or null)

        Parameters
        ----------
        id : str

        name : typing.Optional[str]

        age : typing.Optional[int]

        active : typing.Optional[bool]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        tags : typing.Optional[typing.Sequence[str]]

        email : typing.Optional[str]

        nickname : typing.Optional[str]

        bio : typing.Optional[str]

        profile_image_url : typing.Optional[str]

        settings : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedContentTypes

        client = AsyncSeedContentTypes(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.patch_complex(
                id="id",
                name="name",
                age=1,
                active=True,
                metadata={"metadata": {"key": "value"}},
                tags=["tags", "tags"],
                email="email",
                nickname="nickname",
                bio="bio",
                profile_image_url="profileImageUrl",
                settings={"settings": {"key": "value"}},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_complex(
            id,
            name=name,
            age=age,
            active=active,
            metadata=metadata,
            tags=tags,
            email=email,
            nickname=nickname,
            bio=bio,
            profile_image_url=profile_image_url,
            settings=settings,
            request_options=request_options,
        )
        return _response.data

    async def regular_patch(
        self,
        id: str,
        *,
        field_1: typing.Optional[str] = OMIT,
        field_2: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Regular PATCH endpoint without merge-patch semantics

        Parameters
        ----------
        id : str

        field_1 : typing.Optional[str]

        field_2 : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedContentTypes

        client = AsyncSeedContentTypes(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.regular_patch(
                id="id",
                field_1="field1",
                field_2=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.regular_patch(
            id, field_1=field_1, field_2=field_2, request_options=request_options
        )
        return _response.data
