# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.http_response import AsyncHttpResponse, HttpResponse
from .core.pydantic_utilities import parse_obj_as
from .core.request_options import RequestOptions
from .types.foo import Foo


class RawSeedApi:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_foo(
        self,
        *,
        required_baz: str,
        optional_baz: typing.Optional[str] = None,
        optional_nullable_baz: typing.Optional[str] = None,
        required_nullable_baz: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Foo]:
        """
        Parameters
        ----------
        required_baz : str
            A required baz

        optional_baz : typing.Optional[str]
            An optional baz

        optional_nullable_baz : typing.Optional[str]
            An optional baz

        required_nullable_baz : typing.Optional[str]
            A required baz

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Foo]
            successful operation
        """
        _response = self._client_wrapper.httpx_client.request(
            "foo",
            method="GET",
            params={
                "optional_baz": optional_baz,
                "optional_nullable_baz": optional_nullable_baz,
                "required_baz": required_baz,
                "required_nullable_baz": required_nullable_baz,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Foo,
                    parse_obj_as(
                        type_=Foo,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawSeedApi:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_foo(
        self,
        *,
        required_baz: str,
        optional_baz: typing.Optional[str] = None,
        optional_nullable_baz: typing.Optional[str] = None,
        required_nullable_baz: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Foo]:
        """
        Parameters
        ----------
        required_baz : str
            A required baz

        optional_baz : typing.Optional[str]
            An optional baz

        optional_nullable_baz : typing.Optional[str]
            An optional baz

        required_nullable_baz : typing.Optional[str]
            A required baz

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Foo]
            successful operation
        """
        _response = await self._client_wrapper.httpx_client.request(
            "foo",
            method="GET",
            params={
                "optional_baz": optional_baz,
                "optional_nullable_baz": optional_nullable_baz,
                "required_baz": required_baz,
                "required_nullable_baz": required_nullable_baz,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Foo,
                    parse_obj_as(
                        type_=Foo,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
