# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import realtime
    from .client import AsyncSeedWebsocket, SeedWebsocket
    from .realtime import (
        ReceiveEvent,
        ReceiveEvent2,
        ReceiveEvent3,
        ReceiveSnakeCase,
        SendEvent,
        SendEvent2,
        SendSnakeCase,
    )
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncSeedWebsocket": ".client",
    "ReceiveEvent": ".realtime",
    "ReceiveEvent2": ".realtime",
    "ReceiveEvent3": ".realtime",
    "ReceiveSnakeCase": ".realtime",
    "SeedWebsocket": ".client",
    "SendEvent": ".realtime",
    "SendEvent2": ".realtime",
    "SendSnakeCase": ".realtime",
    "__version__": ".version",
    "realtime": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncSeedWebsocket",
    "ReceiveEvent",
    "ReceiveEvent2",
    "ReceiveEvent3",
    "ReceiveSnakeCase",
    "SeedWebsocket",
    "SendEvent",
    "SendEvent2",
    "SendSnakeCase",
    "__version__",
    "realtime",
]
