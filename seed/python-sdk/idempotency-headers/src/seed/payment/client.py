# This file was auto-generated by Fern from our API Definition.

import typing
import uuid

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawPaymentClient, RawPaymentClient
from .types.currency import Currency

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PaymentClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPaymentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPaymentClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPaymentClient
        """
        return self._raw_client

    def create(
        self,
        *,
        amount: int,
        currency: Currency,
        idempotency_key: str,
        idempotency_expiration: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> uuid.UUID:
        """
        Parameters
        ----------
        amount : int

        currency : Currency

        idempotency_key : str

        idempotency_expiration : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        uuid.UUID

        Examples
        --------
        from seed import SeedIdempotencyHeaders
        client = SeedIdempotencyHeaders(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.payment.create(amount=1, currency="USD", )
        """
        response = self._raw_client.create(
            amount=amount,
            currency=currency,
            idempotency_key=idempotency_key,
            idempotency_expiration=idempotency_expiration,
            request_options=request_options,
        )
        return response.data

    def delete(self, payment_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        payment_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedIdempotencyHeaders
        client = SeedIdempotencyHeaders(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.payment.delete(payment_id='paymentId', )
        """
        response = self._raw_client.delete(payment_id, request_options=request_options)
        return response.data


class AsyncPaymentClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPaymentClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPaymentClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPaymentClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        amount: int,
        currency: Currency,
        idempotency_key: str,
        idempotency_expiration: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> uuid.UUID:
        """
        Parameters
        ----------
        amount : int

        currency : Currency

        idempotency_key : str

        idempotency_expiration : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        uuid.UUID

        Examples
        --------
        from seed import AsyncSeedIdempotencyHeaders
        import asyncio
        client = AsyncSeedIdempotencyHeaders(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.payment.create(amount=1, currency="USD", )
        asyncio.run(main())
        """
        response = await self._raw_client.create(
            amount=amount,
            currency=currency,
            idempotency_key=idempotency_key,
            idempotency_expiration=idempotency_expiration,
            request_options=request_options,
        )
        return response.data

    async def delete(self, payment_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        payment_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedIdempotencyHeaders
        import asyncio
        client = AsyncSeedIdempotencyHeaders(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.payment.delete(payment_id='paymentId', )
        asyncio.run(main())
        """
        response = await self._raw_client.delete(payment_id, request_options=request_options)
        return response.data
