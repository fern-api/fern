# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper

if typing.TYPE_CHECKING:
    from .auth.client import AsyncAuthClient, AuthClient
    from .nested.client import AsyncNestedClient, NestedClient
    from .nested_no_auth.client import AsyncNestedNoAuthClient, NestedNoAuthClient
    from .simple.client import AsyncSimpleClient, SimpleClient


class SeedInferredAuthExplicit:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedInferredAuthExplicit

    client = SeedInferredAuthExplicit(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._auth: typing.Optional[AuthClient] = None
        self._nested_no_auth: typing.Optional[NestedNoAuthClient] = None
        self._nested: typing.Optional[NestedClient] = None
        self._simple: typing.Optional[SimpleClient] = None

    @property
    def auth(self):
        if self._auth is None:
            from .auth.client import AuthClient  # noqa: E402

            self._auth = AuthClient(client_wrapper=self._client_wrapper)
        return self._auth

    @property
    def nested_no_auth(self):
        if self._nested_no_auth is None:
            from .nested_no_auth.client import NestedNoAuthClient  # noqa: E402

            self._nested_no_auth = NestedNoAuthClient(client_wrapper=self._client_wrapper)
        return self._nested_no_auth

    @property
    def nested(self):
        if self._nested is None:
            from .nested.client import NestedClient  # noqa: E402

            self._nested = NestedClient(client_wrapper=self._client_wrapper)
        return self._nested

    @property
    def simple(self):
        if self._simple is None:
            from .simple.client import SimpleClient  # noqa: E402

            self._simple = SimpleClient(client_wrapper=self._client_wrapper)
        return self._simple


class AsyncSeedInferredAuthExplicit:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedInferredAuthExplicit

    client = AsyncSeedInferredAuthExplicit(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._auth: typing.Optional[AsyncAuthClient] = None
        self._nested_no_auth: typing.Optional[AsyncNestedNoAuthClient] = None
        self._nested: typing.Optional[AsyncNestedClient] = None
        self._simple: typing.Optional[AsyncSimpleClient] = None

    @property
    def auth(self):
        if self._auth is None:
            from .auth.client import AsyncAuthClient  # noqa: E402

            self._auth = AsyncAuthClient(client_wrapper=self._client_wrapper)
        return self._auth

    @property
    def nested_no_auth(self):
        if self._nested_no_auth is None:
            from .nested_no_auth.client import AsyncNestedNoAuthClient  # noqa: E402

            self._nested_no_auth = AsyncNestedNoAuthClient(client_wrapper=self._client_wrapper)
        return self._nested_no_auth

    @property
    def nested(self):
        if self._nested is None:
            from .nested.client import AsyncNestedClient  # noqa: E402

            self._nested = AsyncNestedClient(client_wrapper=self._client_wrapper)
        return self._nested

    @property
    def simple(self):
        if self._simple is None:
            from .simple.client import AsyncSimpleClient  # noqa: E402

            self._simple = AsyncSimpleClient(client_wrapper=self._client_wrapper)
        return self._simple
