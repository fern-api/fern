# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawServiceClient, RawServiceClient
from .types.response import Response


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def get_direct_thread(self, *, request_options: typing.Optional[RequestOptions] = None) -> Response:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Response

        Examples
        --------
        from seed import SeedAudiences
        from seed.environment import SeedAudiencesEnvironment
        client = SeedAudiences(environment=SeedAudiencesEnvironment.ENVIRONMENT_A, )
        client.folder_d.service.get_direct_thread()
        """
        response = self._raw_client.get_direct_thread(request_options=request_options)
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def get_direct_thread(self, *, request_options: typing.Optional[RequestOptions] = None) -> Response:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Response

        Examples
        --------
        from seed import AsyncSeedAudiences
        from seed.environment import SeedAudiencesEnvironment
        import asyncio
        client = AsyncSeedAudiences(environment=SeedAudiencesEnvironment.ENVIRONMENT_A, )
        async def main() -> None:
            await client.folder_d.service.get_direct_thread()
        asyncio.run(main())
        """
        response = await self._raw_client.get_direct_thread(request_options=request_options)
        return response.data
