# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawFooClient
from .types.optional_string import OptionalString
from ..core.request_options import RequestOptions
from .types.importing_type import ImportingType
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawFooClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FooClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFooClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFooClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFooClient
        """
        return self._raw_client

    def find(
        self,
        *,
        optional_string: OptionalString,
        public_property: typing.Optional[str] = OMIT,
        private_property: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ImportingType:
        """
        Parameters
        ----------
        optional_string : OptionalString

        public_property : typing.Optional[str]

        private_property : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ImportingType

        Examples
        --------
        from seed import SeedAudiences
        from seed.environment import SeedAudiencesEnvironment
        client = SeedAudiences(environment=SeedAudiencesEnvironment.ENVIRONMENT_A, )
        client.foo.find(optional_string='optionalString', public_property='publicProperty', private_property=1, )
        """
        response = self._raw_client.find(
            optional_string=optional_string,
            public_property=public_property,
            private_property=private_property,
            request_options=request_options,
        )
        return response.data


class AsyncFooClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFooClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFooClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFooClient
        """
        return self._raw_client

    async def find(
        self,
        *,
        optional_string: OptionalString,
        public_property: typing.Optional[str] = OMIT,
        private_property: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ImportingType:
        """
        Parameters
        ----------
        optional_string : OptionalString

        public_property : typing.Optional[str]

        private_property : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ImportingType

        Examples
        --------
        from seed import AsyncSeedAudiences
        from seed.environment import SeedAudiencesEnvironment
        import asyncio
        client = AsyncSeedAudiences(environment=SeedAudiencesEnvironment.ENVIRONMENT_A, )
        async def main() -> None:
            await client.foo.find(optional_string='optionalString', public_property='publicProperty', private_property=1, )
        asyncio.run(main())
        """
        response = await self._raw_client.find(
            optional_string=optional_string,
            public_property=public_property,
            private_property=private_property,
            request_options=request_options,
        )
        return response.data
