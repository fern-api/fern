# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .container_value import ContainerValue, ContainerValue_List, ContainerValue_Optional
    from .field_value import FieldValue, FieldValue_ContainerValue, FieldValue_ObjectValue, FieldValue_PrimitiveValue
    from .json_like import JsonLike
    from .object_value import ObjectValue
    from .primitive_value import PrimitiveValue
    from .t import T
    from .tor_u import TorU
    from .u import U
_dynamic_imports: typing.Dict[str, str] = {
    "ContainerValue": ".container_value",
    "ContainerValue_List": ".container_value",
    "ContainerValue_Optional": ".container_value",
    "FieldValue": ".field_value",
    "FieldValue_ContainerValue": ".field_value",
    "FieldValue_ObjectValue": ".field_value",
    "FieldValue_PrimitiveValue": ".field_value",
    "JsonLike": ".json_like",
    "ObjectValue": ".object_value",
    "PrimitiveValue": ".primitive_value",
    "T": ".t",
    "TorU": ".tor_u",
    "U": ".u",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ContainerValue",
    "ContainerValue_List",
    "ContainerValue_Optional",
    "FieldValue",
    "FieldValue_ContainerValue",
    "FieldValue_ObjectValue",
    "FieldValue_PrimitiveValue",
    "JsonLike",
    "ObjectValue",
    "PrimitiveValue",
    "T",
    "TorU",
    "U",
]
