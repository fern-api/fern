# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .errors.movie_does_not_exist_error import MovieDoesNotExistError
from .types.movie import Movie
from .types.movie_id import MovieId

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawImdbClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_movie(
        self, *, title: str, rating: float, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[MovieId]:
        """
        Add a movie to the database using the movies/* /... path.

        Parameters
        ----------
        title : str

        rating : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[MovieId]
        """
        _response = self._client_wrapper.httpx_client.request(
            "movies/create-movie",
            method="POST",
            json={
                "title": title,
                "rating": rating,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MovieId,
                    parse_obj_as(
                        type_=MovieId,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_movie(
        self, movie_id: MovieId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[Movie]:
        """
        Parameters
        ----------
        movie_id : MovieId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Movie]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"movies/{jsonable_encoder(movie_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Movie,
                    parse_obj_as(
                        type_=Movie,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise MovieDoesNotExistError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MovieId,
                        parse_obj_as(
                            type_=MovieId,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawImdbClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_movie(
        self, *, title: str, rating: float, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[MovieId]:
        """
        Add a movie to the database using the movies/* /... path.

        Parameters
        ----------
        title : str

        rating : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[MovieId]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movies/create-movie",
            method="POST",
            json={
                "title": title,
                "rating": rating,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    MovieId,
                    parse_obj_as(
                        type_=MovieId,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_movie(
        self, movie_id: MovieId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Movie]:
        """
        Parameters
        ----------
        movie_id : MovieId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Movie]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"movies/{jsonable_encoder(movie_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Movie,
                    parse_obj_as(
                        type_=Movie,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise MovieDoesNotExistError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        MovieId,
                        parse_obj_as(
                            type_=MovieId,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
