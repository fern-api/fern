# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .list_users_extended_optional_list_response import ListUsersExtendedOptionalListResponse
    from .list_users_extended_response import ListUsersExtendedResponse
    from .list_users_mixed_type_pagination_response import ListUsersMixedTypePaginationResponse
    from .list_users_pagination_response import ListUsersPaginationResponse
    from .next_page import NextPage
    from .order import Order
    from .page import Page
    from .user import User
    from .user_list_container import UserListContainer
    from .user_optional_list_container import UserOptionalListContainer
    from .user_optional_list_page import UserOptionalListPage
    from .user_page import UserPage
    from .username_container import UsernameContainer
    from .with_cursor import WithCursor
    from .with_page import WithPage
_dynamic_imports: typing.Dict[str, str] = {
    "ListUsersExtendedOptionalListResponse": ".list_users_extended_optional_list_response",
    "ListUsersExtendedResponse": ".list_users_extended_response",
    "ListUsersMixedTypePaginationResponse": ".list_users_mixed_type_pagination_response",
    "ListUsersPaginationResponse": ".list_users_pagination_response",
    "NextPage": ".next_page",
    "Order": ".order",
    "Page": ".page",
    "User": ".user",
    "UserListContainer": ".user_list_container",
    "UserOptionalListContainer": ".user_optional_list_container",
    "UserOptionalListPage": ".user_optional_list_page",
    "UserPage": ".user_page",
    "UsernameContainer": ".username_container",
    "WithCursor": ".with_cursor",
    "WithPage": ".with_page",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "ListUsersExtendedOptionalListResponse",
    "ListUsersExtendedResponse",
    "ListUsersMixedTypePaginationResponse",
    "ListUsersPaginationResponse",
    "NextPage",
    "Order",
    "Page",
    "User",
    "UserListContainer",
    "UserOptionalListContainer",
    "UserOptionalListPage",
    "UserPage",
    "UsernameContainer",
    "WithCursor",
    "WithPage",
]
