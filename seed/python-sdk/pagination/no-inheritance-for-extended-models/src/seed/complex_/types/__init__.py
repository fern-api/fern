# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .conversation import Conversation
    from .cursor_pages import CursorPages
    from .multiple_filter_search_request import MultipleFilterSearchRequest
    from .multiple_filter_search_request_operator import MultipleFilterSearchRequestOperator
    from .multiple_filter_search_request_value import MultipleFilterSearchRequestValue
    from .paginated_conversation_response import PaginatedConversationResponse
    from .search_request import SearchRequest
    from .search_request_query import SearchRequestQuery
    from .single_filter_search_request import SingleFilterSearchRequest
    from .single_filter_search_request_operator import SingleFilterSearchRequestOperator
    from .starting_after_paging import StartingAfterPaging
_dynamic_imports: typing.Dict[str, str] = {
    "Conversation": ".conversation",
    "CursorPages": ".cursor_pages",
    "MultipleFilterSearchRequest": ".multiple_filter_search_request",
    "MultipleFilterSearchRequestOperator": ".multiple_filter_search_request_operator",
    "MultipleFilterSearchRequestValue": ".multiple_filter_search_request_value",
    "PaginatedConversationResponse": ".paginated_conversation_response",
    "SearchRequest": ".search_request",
    "SearchRequestQuery": ".search_request_query",
    "SingleFilterSearchRequest": ".single_filter_search_request",
    "SingleFilterSearchRequestOperator": ".single_filter_search_request_operator",
    "StartingAfterPaging": ".starting_after_paging",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Conversation",
    "CursorPages",
    "MultipleFilterSearchRequest",
    "MultipleFilterSearchRequestOperator",
    "MultipleFilterSearchRequestValue",
    "PaginatedConversationResponse",
    "SearchRequest",
    "SearchRequestQuery",
    "SingleFilterSearchRequest",
    "SingleFilterSearchRequestOperator",
    "StartingAfterPaging",
]
