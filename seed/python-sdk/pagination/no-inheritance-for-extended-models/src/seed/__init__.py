# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import UsernameCursor, UsernamePage
    from . import complex_, users
    from .client import AsyncSeedPagination, SeedPagination
    from .complex_ import (
        Conversation,
        CursorPages,
        MultipleFilterSearchRequest,
        MultipleFilterSearchRequestOperator,
        MultipleFilterSearchRequestValue,
        PaginatedConversationResponse,
        SearchRequest,
        SearchRequestQuery,
        SingleFilterSearchRequest,
        SingleFilterSearchRequestOperator,
        StartingAfterPaging,
    )
    from .users import (
        ListUsersExtendedOptionalListResponse,
        ListUsersExtendedResponse,
        ListUsersMixedTypePaginationResponse,
        ListUsersPaginationResponse,
        NextPage,
        Order,
        Page,
        User,
        UserListContainer,
        UserOptionalListContainer,
        UserOptionalListPage,
        UserPage,
        UsernameContainer,
        WithCursor,
        WithPage,
    )
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncSeedPagination": ".client",
    "Conversation": ".complex_",
    "CursorPages": ".complex_",
    "ListUsersExtendedOptionalListResponse": ".users",
    "ListUsersExtendedResponse": ".users",
    "ListUsersMixedTypePaginationResponse": ".users",
    "ListUsersPaginationResponse": ".users",
    "MultipleFilterSearchRequest": ".complex_",
    "MultipleFilterSearchRequestOperator": ".complex_",
    "MultipleFilterSearchRequestValue": ".complex_",
    "NextPage": ".users",
    "Order": ".users",
    "Page": ".users",
    "PaginatedConversationResponse": ".complex_",
    "SearchRequest": ".complex_",
    "SearchRequestQuery": ".complex_",
    "SeedPagination": ".client",
    "SingleFilterSearchRequest": ".complex_",
    "SingleFilterSearchRequestOperator": ".complex_",
    "StartingAfterPaging": ".complex_",
    "User": ".users",
    "UserListContainer": ".users",
    "UserOptionalListContainer": ".users",
    "UserOptionalListPage": ".users",
    "UserPage": ".users",
    "UsernameContainer": ".users",
    "UsernameCursor": ".types",
    "UsernamePage": ".types",
    "WithCursor": ".users",
    "WithPage": ".users",
    "__version__": ".version",
    "complex_": ".",
    "users": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncSeedPagination",
    "Conversation",
    "CursorPages",
    "ListUsersExtendedOptionalListResponse",
    "ListUsersExtendedResponse",
    "ListUsersMixedTypePaginationResponse",
    "ListUsersPaginationResponse",
    "MultipleFilterSearchRequest",
    "MultipleFilterSearchRequestOperator",
    "MultipleFilterSearchRequestValue",
    "NextPage",
    "Order",
    "Page",
    "PaginatedConversationResponse",
    "SearchRequest",
    "SearchRequestQuery",
    "SeedPagination",
    "SingleFilterSearchRequest",
    "SingleFilterSearchRequestOperator",
    "StartingAfterPaging",
    "User",
    "UserListContainer",
    "UserOptionalListContainer",
    "UserOptionalListPage",
    "UserPage",
    "UsernameContainer",
    "UsernameCursor",
    "UsernamePage",
    "WithCursor",
    "WithPage",
    "__version__",
    "complex_",
    "users",
]
