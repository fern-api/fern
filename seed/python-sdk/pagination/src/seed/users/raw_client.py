# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError
import uuid
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import HttpResponse
from ..core.request_options import RequestOptions
from ..core.pagination import AsyncPager, SyncPager
from ..core.pydantic_utilities import parse_obj_as
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.list_users_extended_response import ListUsersExtendedResponse
from .types.list_users_extended_optional_list_response import ListUsersExtendedOptionalListResponse
from .types.list_users_pagination_response import ListUsersPaginationResponse
from .types.list_users_mixed_type_pagination_response import ListUsersMixedTypePaginationResponse
from .types.order import Order
from .types.user import User
from .types.username_container import UsernameContainer
from .types.with_cursor import WithCursor
from .types.with_page import WithPage
from ..types.username_cursor import UsernameCursor
# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawUsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
    
    def list_with_cursor_pagination(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SyncPager[User]]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "order": order,
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.page is not None and _parsed_response.page.next is not None:
                    _parsed_next = _parsed_response.page.next.starting_after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.list_with_cursor_pagination(
                        page=page,
                        per_page=per_page,
                        order=order,
                        starting_after=_parsed_next,
                        request_options=request_options,
                    )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_mixed_type_cursor_pagination(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SyncPager[User]]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="POST",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersMixedTypePaginationResponse,
                    parse_obj_as(
                        type_=ListUsersMixedTypePaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _parsed_next = _parsed_response.next
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list_with_mixed_type_cursor_pagination(
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_body_cursor_pagination(
        self, *, pagination: typing.Optional[WithCursor] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SyncPager[User]]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="POST",
            json={
                "pagination": convert_and_respect_annotation_metadata(
                    object_=pagination, annotation=WithCursor, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.page is not None and _parsed_response.page.next is not None:
                    _parsed_next = _parsed_response.page.next.starting_after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.list_with_body_cursor_pagination(
                        pagination=pagination,
                        request_options=request_options,
                    )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_offset_pagination(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SyncPager[User]]:
        page = page if page is not None else 0
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "order": order,
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_offset_pagination(
                    page=page + 1,
                    per_page=per_page,
                    order=order,
                    starting_after=starting_after,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_double_offset_pagination(
        self,
        *,
        page: typing.Optional[float] = None,
        per_page: typing.Optional[float] = None,
        order: typing.Optional[Order] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SyncPager[User]]:
        page = page if page is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "order": order,
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_double_offset_pagination(
                    page=page + 1,
                    per_page=per_page,
                    order=order,
                    starting_after=starting_after,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_body_offset_pagination(
        self, *, pagination: typing.Optional[WithPage] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SyncPager[User]]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="POST",
            json={
                "pagination": convert_and_respect_annotation_metadata(
                    object_=pagination, annotation=WithPage, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_body_offset_pagination(
                    pagination=pagination,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_offset_step_pagination(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SyncPager[User]]:
        page = page if page is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_offset_step_pagination(
                    page=page + 1,
                    limit=limit,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_offset_pagination_has_next_page(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SyncPager[User]]:
        page = page if page is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_offset_pagination_has_next_page(
                    page=page + 1,
                    limit=limit,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_extended_results(
        self, *, cursor: typing.Optional[uuid.UUID] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SyncPager[User]]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersExtendedResponse,
                    parse_obj_as(
                        type_=ListUsersExtendedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _parsed_next = _parsed_response.next
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list_with_extended_results(
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                _items = []
                if _parsed_response.data is not None:
                    _items = _parsed_response.data.users
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_extended_results_and_optional_data(
        self, *, cursor: typing.Optional[uuid.UUID] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SyncPager[User]]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersExtendedOptionalListResponse,
                    parse_obj_as(
                        type_=ListUsersExtendedOptionalListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _parsed_next = _parsed_response.next
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list_with_extended_results_and_optional_data(
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                _items = []
                if _parsed_response.data is not None:
                    _items = _parsed_response.data.users
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_usernames(
        self, *, starting_after: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SyncPager[str]]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    UsernameCursor,
                    parse_obj_as(
                        type_=UsernameCursor,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.cursor is not None:
                    _parsed_next = _parsed_response.cursor.after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.list_usernames(
                        starting_after=_parsed_next,
                        request_options=request_options,
                    )
                _items = []
                if _parsed_response.cursor is not None:
                    _items = _parsed_response.cursor.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_usernames_custom(
        self, *, starting_after: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[UsernameCursor]:
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=typing.cast(
                        UsernameCursor,
                        parse_obj_as(
                            type_=UsernameCursor,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_with_global_config(
        self, *, offset: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SyncPager[str]]:
        offset = offset if offset is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    UsernameContainer,
                    parse_obj_as(
                        type_=UsernameContainer,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_global_config(
                    offset=offset + 1,
                    request_options=request_options,
                )
                _items = _parsed_response.results
                return HttpResponse(
                    headers=dict(_response.headers),   
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

class AsyncRawUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_with_cursor_pagination(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AsyncPager[User]]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "order": order,
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.page is not None and _parsed_response.page.next is not None:
                    _parsed_next = _parsed_response.page.next.starting_after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.list_with_cursor_pagination(
                        page=page,
                        per_page=per_page,
                        order=order,
                        starting_after=_parsed_next,
                        request_options=request_options,
                    )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_mixed_type_cursor_pagination(
        self, *, cursor: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AsyncPager[User]]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="POST",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersMixedTypePaginationResponse,
                    parse_obj_as(
                        type_=ListUsersMixedTypePaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _parsed_next = _parsed_response.next
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list_with_mixed_type_cursor_pagination(
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_body_cursor_pagination(
        self, *, pagination: typing.Optional[WithCursor] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AsyncPager[User]]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="POST",
            json={
                "pagination": convert_and_respect_annotation_metadata(
                    object_=pagination, annotation=WithCursor, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.page is not None and _parsed_response.page.next is not None:
                    _parsed_next = _parsed_response.page.next.starting_after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.list_with_body_cursor_pagination(
                        pagination=pagination,
                        request_options=request_options,
                    )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_offset_pagination(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AsyncPager[User]]:
        page = page if page is not None else 0
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "order": order,
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_offset_pagination(
                    page=page + 1,
                    per_page=per_page,
                    order=order,
                    starting_after=starting_after,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_double_offset_pagination(
        self,
        *,
        page: typing.Optional[float] = None,
        per_page: typing.Optional[float] = None,
        order: typing.Optional[Order] = None,
        starting_after: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AsyncPager[User]]:
        page = page if page is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "order": order,
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_double_offset_pagination(
                    page=page + 1,
                    per_page=per_page,
                    order=order,
                    starting_after=starting_after,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_body_offset_pagination(
        self, *, pagination: typing.Optional[WithPage] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AsyncPager[User]]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="POST",
            json={
                "pagination": convert_and_respect_annotation_metadata(
                    object_=pagination, annotation=WithPage, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_body_offset_pagination(
                    pagination=pagination,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_offset_step_pagination(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AsyncPager[User]]:
        page = page if page is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_offset_step_pagination(
                    page=page + 1,
                    limit=limit,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_offset_pagination_has_next_page(
        self,
        *,
        page: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        order: typing.Optional[Order] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AsyncPager[User]]:
        page = page if page is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "page": page,
                "limit": limit,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersPaginationResponse,
                    parse_obj_as(
                        type_=ListUsersPaginationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_offset_pagination_has_next_page(
                    page=page + 1,
                    limit=limit,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_extended_results(
        self, *, cursor: typing.Optional[uuid.UUID] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AsyncPager[User]]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersExtendedResponse,
                    parse_obj_as(
                        type_=ListUsersExtendedResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _parsed_next = _parsed_response.next
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list_with_extended_results(
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                _items = []
                if _parsed_response.data is not None:
                    _items = _parsed_response.data.users
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_extended_results_and_optional_data(
        self, *, cursor: typing.Optional[uuid.UUID] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AsyncPager[User]]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "cursor": cursor,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    ListUsersExtendedOptionalListResponse,
                    parse_obj_as(
                        type_=ListUsersExtendedOptionalListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _parsed_next = _parsed_response.next
                _has_next = _parsed_next is not None and _parsed_next != ""
                _get_next = lambda: self.list_with_extended_results_and_optional_data(
                    cursor=_parsed_next,
                    request_options=request_options,
                )
                _items = []
                if _parsed_response.data is not None:
                    _items = _parsed_response.data.users
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_usernames(
        self, *, starting_after: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AsyncPager[str]]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    UsernameCursor,
                    parse_obj_as(
                        type_=UsernameCursor,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.cursor is not None:
                    _parsed_next = _parsed_response.cursor.after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.list_usernames(
                        starting_after=_parsed_next,
                        request_options=request_options,
                    )
                _items = []
                if _parsed_response.cursor is not None:
                    _items = _parsed_response.cursor.data
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_usernames_custom(
        self, *, starting_after: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[UsernameCursor]:
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "starting_after": starting_after,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=typing.cast(
                        UsernameCursor,
                        parse_obj_as(
                            type_=UsernameCursor,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_with_global_config(
        self, *, offset: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AsyncPager[str]]:
        offset = offset if offset is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "users",
            method="GET",
            params={
                "offset": offset,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    UsernameContainer,
                    parse_obj_as(
                        type_=UsernameContainer,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_with_global_config(
                    offset=offset + 1,
                    request_options=request_options,
                )
                _items = _parsed_response.results
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
