# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawComplexClient
from .types.search_request_query import SearchRequestQuery
from .types.starting_after_paging import StartingAfterPaging
from ..core.request_options import RequestOptions
from ..core.pagination import SyncPager
from .types.paginated_conversation_response import PaginatedConversationResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawComplexClient
from ..core.pagination import AsyncPager

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ComplexClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawComplexClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawComplexClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawComplexClient
        """
        return self._raw_client

    def search(
        self,
        *,
        query: SearchRequestQuery,
        pagination: typing.Optional[StartingAfterPaging] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[PaginatedConversationResponse]:
        """
        Parameters
        ----------
        query : SearchRequestQuery

        pagination : typing.Optional[StartingAfterPaging]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[PaginatedConversationResponse]

        Examples
        --------
        from seed import SeedPagination
        from seed.complex_ import SingleFilterSearchRequest, StartingAfterPaging

        client = SeedPagination(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        response = client.complex_.search(
            pagination=StartingAfterPaging(
                per_page=1,
                starting_after="starting_after",
            ),
            query=SingleFilterSearchRequest(
                field="field",
                operator="=",
                value="value",
            ),
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        response = self._raw_client.search(query=query, pagination=pagination, request_options=request_options)
        return response.data


class AsyncComplexClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawComplexClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawComplexClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawComplexClient
        """
        return self._raw_client

    async def search(
        self,
        *,
        query: SearchRequestQuery,
        pagination: typing.Optional[StartingAfterPaging] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[PaginatedConversationResponse]:
        """
        Parameters
        ----------
        query : SearchRequestQuery

        pagination : typing.Optional[StartingAfterPaging]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[PaginatedConversationResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedPagination
        from seed.complex_ import SingleFilterSearchRequest, StartingAfterPaging

        client = AsyncSeedPagination(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            response = await client.complex_.search(
                pagination=StartingAfterPaging(
                    per_page=1,
                    starting_after="starting_after",
                ),
                query=SingleFilterSearchRequest(
                    field="field",
                    operator="=",
                    value="value",
                ),
            )
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        response = await self._raw_client.search(query=query, pagination=pagination, request_options=request_options)
        return response.data
