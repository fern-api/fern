# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper,SyncClientWrapper
from ..core.http_response import HttpResponse
from ..core.pagination import SyncPager, AsyncPager
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.search_request_query import SearchRequestQuery
from .types.starting_after_paging import StartingAfterPaging
from .types.conversation import Conversation
from .types.paginated_conversation_response import PaginatedConversationResponse
from json.decoder import JSONDecodeError

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawComplexClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def search(
        self,
        *,
        query: SearchRequestQuery,
        pagination: typing.Optional[StartingAfterPaging] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SyncPager[Conversation]]:
        _response = self._client_wrapper.httpx_client.request(
            "conversations/search",
            method="POST",
            json={
                "pagination": convert_and_respect_annotation_metadata(
                    object_=pagination, annotation=StartingAfterPaging, direction="write"
                ),
                "query": convert_and_respect_annotation_metadata(
                    object_=query, annotation=SearchRequestQuery, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedConversationResponse,
                    parse_obj_as(
                        type_=PaginatedConversationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.pages is not None and _parsed_response.pages.next is not None:
                    _parsed_next = _parsed_response.pages.next.starting_after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.search(
                        query=query,
                        pagination=pagination,
                        request_options=request_options,
                    )
                _items = _parsed_response.conversations
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=SyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
    

class AsyncRawComplexClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def search(
        self,
        *,
        query: SearchRequestQuery,
        pagination: typing.Optional[StartingAfterPaging] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.AsyncIterator[Conversation]]:
        _response = await self._client_wrapper.httpx_client.request(
            "conversations/search",
            method="POST",
            json={
                "pagination": convert_and_respect_annotation_metadata(
                    object_=pagination, annotation=StartingAfterPaging, direction="write"
                ),
                "query": convert_and_respect_annotation_metadata(
                    object_=query, annotation=SearchRequestQuery, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedConversationResponse,
                    parse_obj_as(
                        type_=PaginatedConversationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = False
                _get_next = None
                if _parsed_response.pages is not None and _parsed_response.pages.next is not None:
                    _parsed_next = _parsed_response.pages.next.starting_after
                    _has_next = _parsed_next is not None and _parsed_next != ""
                    _get_next = lambda: self.search(
                        query=query,
                        pagination=pagination,
                        request_options=request_options,
                    )
                _items = _parsed_response.conversations
                return HttpResponse(
                    headers=dict(_response.headers),
                    data=AsyncPager(has_next=_has_next, items=_items, get_next=_get_next),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
