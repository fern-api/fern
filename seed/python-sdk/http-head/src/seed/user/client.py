# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawUserClient, RawUserClient
from .types.user import User


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def head(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Dict[str, str]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedHttpHead

        client = SeedHttpHead(
            base_url="https://yourhost.com/path/to/api",
        )
        client.user.head()
        """
        _response = self._raw_client.head(request_options=request_options)
        return _response.headers

    def list(self, *, limit: int, request_options: typing.Optional[RequestOptions] = None) -> typing.List[User]:
        """
        Parameters
        ----------
        limit : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]

        Examples
        --------
        from seed import SeedHttpHead

        client = SeedHttpHead(
            base_url="https://yourhost.com/path/to/api",
        )
        client.user.list(
            limit=1,
        )
        """
        _response = self._raw_client.list(limit=limit, request_options=request_options)
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def head(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Dict[str, str]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedHttpHead

        client = AsyncSeedHttpHead(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.user.head()


        asyncio.run(main())
        """
        _response = await self._raw_client.head(request_options=request_options)
        return _response.headers

    async def list(self, *, limit: int, request_options: typing.Optional[RequestOptions] = None) -> typing.List[User]:
        """
        Parameters
        ----------
        limit : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedHttpHead

        client = AsyncSeedHttpHead(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.user.list(
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(limit=limit, request_options=request_options)
        return _response.data
