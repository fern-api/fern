{
    "types": {},
    "endpoints": [
        {
            "example_identifier": "default",
            "id": {
                "path": "/",
                "method": "GET",
                "identifier_override": "endpoint_v2.test"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.test()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.test()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-test-submission-status/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.updateTestSubmissionStatus"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nfrom seed.submission import TestSubmissionStatus\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.update_test_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=TestSubmissionStatus(), )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nfrom seed.submission import TestSubmissionStatus\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.update_test_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=TestSubmissionStatus(), )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-test-submission-status-v2/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.sendTestSubmissionUpdate"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nimport datetime\nfrom seed.submission import TestSubmissionUpdateInfo_Running\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.send_test_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=TestSubmissionUpdateInfo_Running(value=\"QUEUEING_SUBMISSION\"), )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nimport datetime\nfrom seed.submission import TestSubmissionUpdateInfo_Running\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.send_test_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=TestSubmissionUpdateInfo_Running(value=\"QUEUEING_SUBMISSION\"), )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-workspace-submission-status/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.updateWorkspaceSubmissionStatus"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nfrom seed.submission import WorkspaceSubmissionStatus\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.update_workspace_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=WorkspaceSubmissionStatus(), )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nfrom seed.submission import WorkspaceSubmissionStatus\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.update_workspace_submission_status(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=WorkspaceSubmissionStatus(), )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-workspace-submission-status-v2/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.sendWorkspaceSubmissionUpdate"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nimport datetime\nfrom seed.submission import WorkspaceSubmissionUpdateInfo_Running\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.send_workspace_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=WorkspaceSubmissionUpdateInfo_Running(value=\"QUEUEING_SUBMISSION\"), )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nimport datetime\nfrom seed.submission import WorkspaceSubmissionUpdateInfo_Running\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.send_workspace_submission_update(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), update_time=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), update_info=WorkspaceSubmissionUpdateInfo_Running(value=\"QUEUEING_SUBMISSION\"), )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-test-trace/submission/{submissionId}/testCase/{testCaseId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedTestCase"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nfrom seed.submission import TestCaseResultWithStdout\nfrom seed.submission import TestCaseResult\nfrom seed.commons import VariableValue_IntegerValue\nfrom seed.submission import ActualResult_Value\nfrom seed.submission import TraceResponse\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_test_case(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id='testCaseId', result=TestCaseResultWithStdout(result=TestCaseResult(expected_result=VariableValue_IntegerValue(value=1), actual_result=ActualResult_Value(value=VariableValue_IntegerValue(value=1)), passed=True, ), stdout='stdout', ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nfrom seed.submission import TestCaseResultWithStdout\nfrom seed.submission import TestCaseResult\nfrom seed.commons import VariableValue_IntegerValue\nfrom seed.submission import ActualResult_Value\nfrom seed.submission import TraceResponse\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.store_traced_test_case(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id='testCaseId', result=TestCaseResultWithStdout(result=TestCaseResult(expected_result=VariableValue_IntegerValue(value=1), actual_result=ActualResult_Value(value=VariableValue_IntegerValue(value=1)), passed=True, ), stdout='stdout', ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-test-trace-v2/submission/{submissionId}/testCase/{testCaseId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedTestCaseV2"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nfrom seed.submission import TraceResponseV2\nfrom seed.submission import TracedFile\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_test_case_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id='testCaseId', request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nfrom seed.submission import TraceResponseV2\nfrom seed.submission import TracedFile\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.store_traced_test_case_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), test_case_id='testCaseId', request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-workspace-trace/submission/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedWorkspace"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nfrom seed.submission import WorkspaceRunDetails\nfrom seed.submission import ExceptionV2_Generic\nfrom seed.submission import ExceptionInfo\nfrom seed.submission import TraceResponse\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_workspace(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), workspace_run_details=WorkspaceRunDetails(exception_v_2=ExceptionV2_Generic(exception_type='exceptionType', exception_message='exceptionMessage', exception_stacktrace='exceptionStacktrace', ), exception=ExceptionInfo(exception_type='exceptionType', exception_message='exceptionMessage', exception_stacktrace='exceptionStacktrace', ), stdout='stdout', ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nfrom seed.submission import WorkspaceRunDetails\nfrom seed.submission import ExceptionV2_Generic\nfrom seed.submission import ExceptionInfo\nfrom seed.submission import TraceResponse\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.store_traced_workspace(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), workspace_run_details=WorkspaceRunDetails(exception_v_2=ExceptionV2_Generic(exception_type='exceptionType', exception_message='exceptionMessage', exception_stacktrace='exceptionStacktrace', ), exception=ExceptionInfo(exception_type='exceptionType', exception_message='exceptionMessage', exception_stacktrace='exceptionStacktrace', ), stdout='stdout', ), trace_responses=[TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponse(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/admin/store-workspace-trace-v2/submission/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedWorkspaceV2"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport uuid\nfrom seed.submission import TraceResponseV2\nfrom seed.submission import TracedFile\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.admin.store_traced_workspace_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport uuid\nfrom seed.submission import TraceResponseV2\nfrom seed.submission import TracedFile\nfrom seed.commons import DebugVariableValue_IntegerValue\nfrom seed.submission import ExpressionLocation\nfrom seed.submission import StackInformation\nfrom seed.submission import StackFrame\nfrom seed.submission import Scope\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.admin.store_traced_workspace_v_2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), request=[TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', ), TraceResponseV2(submission_id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), line_number=1, file=TracedFile(filename='filename', directory='directory', ), return_value=DebugVariableValue_IntegerValue(value=1), expression_location=ExpressionLocation(start=1, offset=1, ), stack=StackInformation(num_stack_frames=1, top_stack_frame=StackFrame(method_name='methodName', line_number=1, scopes=[Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, ), Scope(variables={'variables': DebugVariableValue_IntegerValue(value=1)}, )], ), ), stdout='stdout', )], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/homepage-problems",
                "method": "GET",
                "identifier_override": "endpoint_homepage.getHomepageProblems"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.homepage.get_homepage_problems()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.homepage.get_homepage_problems()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/homepage-problems",
                "method": "POST",
                "identifier_override": "endpoint_homepage.setHomepageProblems"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.homepage.set_homepage_problems(request=['string', 'string'], )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.homepage.set_homepage_problems(request=['string', 'string'], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/migration-info/all",
                "method": "GET",
                "identifier_override": "endpoint_migration.getAttemptedMigrations"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.migration.get_attempted_migrations(admin_key_header='admin-key-header', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.migration.get_attempted_migrations(admin_key_header='admin-key-header', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/v2/playlist/{serviceParam}/create",
                "method": "POST",
                "identifier_override": "endpoint_playlist.createPlaylist"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nimport datetime\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.create_playlist(service_param=1, datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), optional_datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), name='name', problems=['problems', 'problems'], )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport datetime\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.playlist.create_playlist(service_param=1, datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), optional_datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), name='name', problems=['problems', 'problems'], )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/v2/playlist/{serviceParam}/all",
                "method": "GET",
                "identifier_override": "endpoint_playlist.getPlaylists"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.get_playlists(service_param=1, limit=1, other_field='otherField', multi_line_docs='multiLineDocs', optional_multiple_field='optionalMultipleField', multiple_field='multipleField', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.playlist.get_playlists(service_param=1, limit=1, other_field='otherField', multi_line_docs='multiLineDocs', optional_multiple_field='optionalMultipleField', multiple_field='multipleField', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "method": "GET",
                "identifier_override": "endpoint_playlist.getPlaylist"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.get_playlist(service_param=1, playlist_id='playlistId', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.playlist.get_playlist(service_param=1, playlist_id='playlistId', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "method": "PUT",
                "identifier_override": "endpoint_playlist.updatePlaylist"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nfrom seed.playlist import UpdatePlaylistRequest\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.update_playlist(service_param=1, playlist_id='playlistId', request=UpdatePlaylistRequest(name='name', problems=['problems', 'problems'], ), )\n",
                "async_client": "from seed import AsyncSeedTrace\nfrom seed.playlist import UpdatePlaylistRequest\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.playlist.update_playlist(service_param=1, playlist_id='playlistId', request=UpdatePlaylistRequest(name='name', problems=['problems', 'problems'], ), )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlist_id}",
                "method": "DELETE",
                "identifier_override": "endpoint_playlist.deletePlaylist"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.playlist.delete_playlist(service_param=1, playlist_id='playlist_id', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.playlist.delete_playlist(service_param=1, playlist_id='playlist_id', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problem-crud/create",
                "method": "POST",
                "identifier_override": "endpoint_problem.createProblem"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nfrom seed.problem import ProblemDescription\nfrom seed.problem import ProblemDescriptionBoard_Html\nfrom seed.problem import ProblemFiles\nfrom seed.commons import FileInfo\nfrom seed.problem import VariableTypeAndName\nfrom seed.commons import VariableType\nfrom seed.commons import TestCaseWithExpectedResult\nfrom seed.commons import TestCase\nfrom seed.commons import VariableValue_IntegerValue\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.create_problem(problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={\"JAVA\": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )\n",
                "async_client": "from seed import AsyncSeedTrace\nfrom seed.problem import ProblemDescription\nfrom seed.problem import ProblemDescriptionBoard_Html\nfrom seed.problem import ProblemFiles\nfrom seed.commons import FileInfo\nfrom seed.problem import VariableTypeAndName\nfrom seed.commons import VariableType\nfrom seed.commons import TestCaseWithExpectedResult\nfrom seed.commons import TestCase\nfrom seed.commons import VariableValue_IntegerValue\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.problem.create_problem(problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={\"JAVA\": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problem-crud/update/{problemId}",
                "method": "POST",
                "identifier_override": "endpoint_problem.updateProblem"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nfrom seed.problem import ProblemDescription\nfrom seed.problem import ProblemDescriptionBoard_Html\nfrom seed.problem import ProblemFiles\nfrom seed.commons import FileInfo\nfrom seed.problem import VariableTypeAndName\nfrom seed.commons import VariableType\nfrom seed.commons import TestCaseWithExpectedResult\nfrom seed.commons import TestCase\nfrom seed.commons import VariableValue_IntegerValue\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.update_problem(problem_id='problemId', problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={\"JAVA\": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )\n",
                "async_client": "from seed import AsyncSeedTrace\nfrom seed.problem import ProblemDescription\nfrom seed.problem import ProblemDescriptionBoard_Html\nfrom seed.problem import ProblemFiles\nfrom seed.commons import FileInfo\nfrom seed.problem import VariableTypeAndName\nfrom seed.commons import VariableType\nfrom seed.commons import TestCaseWithExpectedResult\nfrom seed.commons import TestCase\nfrom seed.commons import VariableValue_IntegerValue\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.problem.update_problem(problem_id='problemId', problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={\"JAVA\": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problem-crud/delete/{problemId}",
                "method": "DELETE",
                "identifier_override": "endpoint_problem.deleteProblem"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.delete_problem(problem_id='problemId', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.problem.delete_problem(problem_id='problemId', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problem-crud/default-starter-files",
                "method": "POST",
                "identifier_override": "endpoint_problem.getDefaultStarterFiles"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nfrom seed.problem import VariableTypeAndName\nfrom seed.commons import VariableType\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.problem.get_default_starter_files(input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), method_name='methodName', )\n",
                "async_client": "from seed import AsyncSeedTrace\nfrom seed.problem import VariableTypeAndName\nfrom seed.commons import VariableType\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.problem.get_default_starter_files(input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), method_name='methodName', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/sessions/create-session/{language}",
                "method": "POST",
                "identifier_override": "endpoint_submission.createExecutionSession"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.create_execution_session(language=\"JAVA\", )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.submission.create_execution_session(language=\"JAVA\", )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/sessions/{sessionId}",
                "method": "GET",
                "identifier_override": "endpoint_submission.getExecutionSession"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.get_execution_session(session_id='sessionId', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.submission.get_execution_session(session_id='sessionId', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/sessions/stop/{sessionId}",
                "method": "DELETE",
                "identifier_override": "endpoint_submission.stopExecutionSession"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.stop_execution_session(session_id='sessionId', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.submission.stop_execution_session(session_id='sessionId', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/sessions/execution-sessions-state",
                "method": "GET",
                "identifier_override": "endpoint_submission.getExecutionSessionsState"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.submission.get_execution_sessions_state()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.submission.get_execution_sessions_state()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/sysprop/num-warm-instances/{language}/{numWarmInstances}",
                "method": "PUT",
                "identifier_override": "endpoint_sysprop.setNumWarmInstances"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.sysprop.set_num_warm_instances(language=\"JAVA\", num_warm_instances=1, )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.sysprop.set_num_warm_instances(language=\"JAVA\", num_warm_instances=1, )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/sysprop/num-warm-instances",
                "method": "GET",
                "identifier_override": "endpoint_sysprop.getNumWarmInstances"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.sysprop.get_num_warm_instances()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.sysprop.get_num_warm_instances()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/lightweight-problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getLightweightProblems"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_lightweight_problems()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.problem.get_lightweight_problems()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getProblems"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_problems()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.problem.get_problems()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/problem-info/{problemId}",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getLatestProblem"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_latest_problem(problem_id='problemId', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.problem.get_latest_problem(problem_id='problemId', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getProblemVersion"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.problem.get_problem_version(problem_id='problemId', problem_version=1, )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.problem.get_problem_version(problem_id='problemId', problem_version=1, )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/lightweight-problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getLightweightProblems"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_lightweight_problems()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.v_3.problem.get_lightweight_problems()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getProblems"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_problems()\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.v_3.problem.get_problems()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/problem-info/{problemId}",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getLatestProblem"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_latest_problem(problem_id='problemId', )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.v_3.problem.get_latest_problem(problem_id='problemId', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getProblemVersion"
            },
            "snippet": {
                "sync_client": "from seed import SeedTrace\nclient = SeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nclient.v_2.v_3.problem.get_problem_version(problem_id='problemId', problem_version=1, )\n",
                "async_client": "from seed import AsyncSeedTrace\nimport asyncio\nclient = AsyncSeedTrace(x_random_header=\"YOUR_X_RANDOM_HEADER\", token=\"YOUR_TOKEN\", )\nasync def main() -> None:\n    await client.v_2.v_3.problem.get_problem_version(problem_id='problemId', problem_version=1, )\nasyncio.run(main())",
                "type": "python"
            }
        }
    ]
}