# This file was auto-generated by Fern from our API Definition.

from seed import SeedTrace
from seed import AsyncSeedTrace
import typing
from .utilities import validate_response


async def test_set_num_warm_instances(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.sysprop.set_num_warm_instances(language="JAVA", num_warm_instances=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.sysprop.set_num_warm_instances(language="JAVA", num_warm_instances=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_get_num_warm_instances(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = {"JAVA": 1}
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "dict",
        {0: (None, "integer")},
    )
    response = client.sysprop.get_num_warm_instances()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.sysprop.get_num_warm_instances()
    validate_response(async_response, expected_response, expected_types)
