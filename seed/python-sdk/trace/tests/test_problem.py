# This file was auto-generated by Fern from our API Definition.

from seed import SeedTrace
from seed import AsyncSeedTrace
import typing
from seed.problem import ProblemDescription
from seed.problem import ProblemDescriptionBoard_Html
from seed.problem import ProblemFiles
from seed.commons import FileInfo
from seed.problem import VariableTypeAndName
from seed.commons import VariableType
from seed.commons import TestCaseWithExpectedResult
from seed.commons import TestCase
from seed.commons import VariableValue_IntegerValue
from .utilities import validate_response


async def test_create_problem(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = {"type": "success", "value": "string"}
    expected_types: typing.Any = "no_validate"
    response = client.problem.create_problem(
        problem_name="problemName",
        problem_description=ProblemDescription(
            boards=[
                ProblemDescriptionBoard_Html(value="boards"),
                ProblemDescriptionBoard_Html(value="boards"),
            ]
        ),
        files={
            "JAVA": ProblemFiles(
                solution_file=FileInfo(filename="filename", contents="contents"),
                read_only_files=[
                    FileInfo(filename="filename", contents="contents"),
                    FileInfo(filename="filename", contents="contents"),
                ],
            )
        },
        input_params=[
            VariableTypeAndName(variable_type=VariableType(), name="name"),
            VariableTypeAndName(variable_type=VariableType(), name="name"),
        ],
        output_type=VariableType(),
        testcases=[
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
        ],
        method_name="methodName",
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.problem.create_problem(
        problem_name="problemName",
        problem_description=ProblemDescription(
            boards=[
                ProblemDescriptionBoard_Html(value="boards"),
                ProblemDescriptionBoard_Html(value="boards"),
            ]
        ),
        files={
            "JAVA": ProblemFiles(
                solution_file=FileInfo(filename="filename", contents="contents"),
                read_only_files=[
                    FileInfo(filename="filename", contents="contents"),
                    FileInfo(filename="filename", contents="contents"),
                ],
            )
        },
        input_params=[
            VariableTypeAndName(variable_type=VariableType(), name="name"),
            VariableTypeAndName(variable_type=VariableType(), name="name"),
        ],
        output_type=VariableType(),
        testcases=[
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
        ],
        method_name="methodName",
    )
    validate_response(async_response, expected_response, expected_types)


async def test_update_problem(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = {"problemVersion": 1}
    expected_types: typing.Any = {"problemVersion": "integer"}
    response = client.problem.update_problem(
        problem_id="problemId",
        problem_name="problemName",
        problem_description=ProblemDescription(
            boards=[
                ProblemDescriptionBoard_Html(value="boards"),
                ProblemDescriptionBoard_Html(value="boards"),
            ]
        ),
        files={
            "JAVA": ProblemFiles(
                solution_file=FileInfo(filename="filename", contents="contents"),
                read_only_files=[
                    FileInfo(filename="filename", contents="contents"),
                    FileInfo(filename="filename", contents="contents"),
                ],
            )
        },
        input_params=[
            VariableTypeAndName(variable_type=VariableType(), name="name"),
            VariableTypeAndName(variable_type=VariableType(), name="name"),
        ],
        output_type=VariableType(),
        testcases=[
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
        ],
        method_name="methodName",
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.problem.update_problem(
        problem_id="problemId",
        problem_name="problemName",
        problem_description=ProblemDescription(
            boards=[
                ProblemDescriptionBoard_Html(value="boards"),
                ProblemDescriptionBoard_Html(value="boards"),
            ]
        ),
        files={
            "JAVA": ProblemFiles(
                solution_file=FileInfo(filename="filename", contents="contents"),
                read_only_files=[
                    FileInfo(filename="filename", contents="contents"),
                    FileInfo(filename="filename", contents="contents"),
                ],
            )
        },
        input_params=[
            VariableTypeAndName(variable_type=VariableType(), name="name"),
            VariableTypeAndName(variable_type=VariableType(), name="name"),
        ],
        output_type=VariableType(),
        testcases=[
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
            TestCaseWithExpectedResult(
                test_case=TestCase(
                    id="id",
                    params=[
                        VariableValue_IntegerValue(value=1),
                        VariableValue_IntegerValue(value=1),
                    ],
                ),
                expected_result=VariableValue_IntegerValue(value=1),
            ),
        ],
        method_name="methodName",
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete_problem(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.problem.delete_problem(problem_id="problemId")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.problem.delete_problem(problem_id="problemId")  # type: ignore[func-returns-value]
        is None
    )


async def test_get_default_starter_files(client: SeedTrace, async_client: AsyncSeedTrace) -> None:
    expected_response: typing.Any = {
        "files": {
            "JAVA": {
                "solutionFile": {"filename": "filename", "contents": "contents"},
                "readOnlyFiles": [
                    {"filename": "filename", "contents": "contents"},
                    {"filename": "filename", "contents": "contents"},
                ],
            }
        }
    }
    expected_types: typing.Any = {
        "files": (
            "dict",
            {
                0: (
                    None,
                    {
                        "solutionFile": {"filename": None, "contents": None},
                        "readOnlyFiles": (
                            "list",
                            {
                                0: {"filename": None, "contents": None},
                                1: {"filename": None, "contents": None},
                            },
                        ),
                    },
                )
            },
        )
    }
    response = client.problem.get_default_starter_files(
        input_params=[
            VariableTypeAndName(variable_type=VariableType(), name="name"),
            VariableTypeAndName(variable_type=VariableType(), name="name"),
        ],
        output_type=VariableType(),
        method_name="methodName",
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.problem.get_default_starter_files(
        input_params=[
            VariableTypeAndName(variable_type=VariableType(), name="name"),
            VariableTypeAndName(variable_type=VariableType(), name="name"),
        ],
        output_type=VariableType(),
        method_name="methodName",
    )
    validate_response(async_response, expected_response, expected_types)
