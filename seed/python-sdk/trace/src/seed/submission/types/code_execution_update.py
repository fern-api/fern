# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from ...v_2.problem.types.test_case_id import TestCaseId
from .error_info import ErrorInfo
from .execution_session_status import ExecutionSessionStatus
from .invalid_request_cause import InvalidRequestCause
from .lightweight_stackframe_information import LightweightStackframeInformation
from .running_submission_state import RunningSubmissionState
from .submission_id import SubmissionId
from .submission_request import SubmissionRequest
from .test_case_grade import TestCaseGrade
from .test_case_result_with_stdout import TestCaseResultWithStdout
from .traced_file import TracedFile
from .workspace_run_details import WorkspaceRunDetails


class CodeExecutionUpdate_BuildingExecutor(UniversalBaseModel):
    type: typing.Literal["buildingExecutor"] = "buildingExecutor"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    status: ExecutionSessionStatus

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Running(UniversalBaseModel):
    type: typing.Literal["running"] = "running"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    state: RunningSubmissionState

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Errored(UniversalBaseModel):
    type: typing.Literal["errored"] = "errored"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    error_info: typing_extensions.Annotated[ErrorInfo, FieldMetadata(alias="errorInfo")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Stopped(UniversalBaseModel):
    type: typing.Literal["stopped"] = "stopped"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Graded(UniversalBaseModel):
    type: typing.Literal["graded"] = "graded"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    test_cases: typing_extensions.Annotated[
        typing.Dict[str, TestCaseResultWithStdout], FieldMetadata(alias="testCases")
    ]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_GradedV2(UniversalBaseModel):
    type: typing.Literal["gradedV2"] = "gradedV2"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    test_cases: typing_extensions.Annotated[typing.Dict[TestCaseId, TestCaseGrade], FieldMetadata(alias="testCases")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_WorkspaceRan(UniversalBaseModel):
    type: typing.Literal["workspaceRan"] = "workspaceRan"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    run_details: typing_extensions.Annotated[WorkspaceRunDetails, FieldMetadata(alias="runDetails")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Recording(UniversalBaseModel):
    type: typing.Literal["recording"] = "recording"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    test_case_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="testCaseId")] = None
    line_number: typing_extensions.Annotated[int, FieldMetadata(alias="lineNumber")]
    lightweight_stack_info: typing_extensions.Annotated[
        LightweightStackframeInformation, FieldMetadata(alias="lightweightStackInfo")
    ]
    traced_file: typing_extensions.Annotated[typing.Optional[TracedFile], FieldMetadata(alias="tracedFile")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Recorded(UniversalBaseModel):
    type: typing.Literal["recorded"] = "recorded"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]
    trace_responses_size: typing_extensions.Annotated[int, FieldMetadata(alias="traceResponsesSize")]
    test_case_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="testCaseId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_InvalidRequest(UniversalBaseModel):
    type: typing.Literal["invalidRequest"] = "invalidRequest"
    request: SubmissionRequest
    cause: InvalidRequestCause

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class CodeExecutionUpdate_Finished(UniversalBaseModel):
    type: typing.Literal["finished"] = "finished"
    submission_id: typing_extensions.Annotated[SubmissionId, FieldMetadata(alias="submissionId")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


CodeExecutionUpdate = typing.Union[
    CodeExecutionUpdate_BuildingExecutor,
    CodeExecutionUpdate_Running,
    CodeExecutionUpdate_Errored,
    CodeExecutionUpdate_Stopped,
    CodeExecutionUpdate_Graded,
    CodeExecutionUpdate_GradedV2,
    CodeExecutionUpdate_WorkspaceRan,
    CodeExecutionUpdate_Recording,
    CodeExecutionUpdate_Recorded,
    CodeExecutionUpdate_InvalidRequest,
    CodeExecutionUpdate_Finished,
]
