# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from ...core.serialization import FieldMetadata
from .actual_result import ActualResult


class TestCaseResult(UniversalBaseModel):
    expected_result: typing_extensions.Annotated["VariableValue", FieldMetadata(alias="expectedResult")]
    actual_result: typing_extensions.Annotated[ActualResult, FieldMetadata(alias="actualResult")]
    passed: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...commons.types.key_value_pair import KeyValuePair  # noqa: E402, F401, I001
from ...commons.types.map_value import MapValue  # noqa: E402, F401, I001
from ...commons.types.variable_value import VariableValue  # noqa: E402, F401, I001

update_forward_refs(TestCaseResult)
