# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
from .running_submission_state import RunningSubmissionState
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .error_info import ErrorInfo
import typing_extensions
from ...v_2.problem.types.test_case_id import TestCaseId
from ...core.serialization import FieldMetadata
from .test_case_grade import TestCaseGrade


class TestSubmissionUpdateInfo_Running(UniversalBaseModel):
    value: RunningSubmissionState
    type: typing.Literal["running"] = "running"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class TestSubmissionUpdateInfo_Stopped(UniversalBaseModel):
    type: typing.Literal["stopped"] = "stopped"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TestSubmissionUpdateInfo_Errored(UniversalBaseModel):
    value: ErrorInfo
    type: typing.Literal["errored"] = "errored"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class TestSubmissionUpdateInfo_GradedTestCase(UniversalBaseModel):
    type: typing.Literal["gradedTestCase"] = "gradedTestCase"
    test_case_id: typing_extensions.Annotated[TestCaseId, FieldMetadata(alias="testCaseId")]
    grade: TestCaseGrade

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TestSubmissionUpdateInfo_RecordedTestCase(UniversalBaseModel):
    type: typing.Literal["recordedTestCase"] = "recordedTestCase"
    test_case_id: typing_extensions.Annotated[TestCaseId, FieldMetadata(alias="testCaseId")]
    trace_responses_size: typing_extensions.Annotated[int, FieldMetadata(alias="traceResponsesSize")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TestSubmissionUpdateInfo_Finished(UniversalBaseModel):
    type: typing.Literal["finished"] = "finished"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


TestSubmissionUpdateInfo = typing.Union[
    TestSubmissionUpdateInfo_Running,
    TestSubmissionUpdateInfo_Stopped,
    TestSubmissionUpdateInfo_Errored,
    TestSubmissionUpdateInfo_GradedTestCase,
    TestSubmissionUpdateInfo_RecordedTestCase,
    TestSubmissionUpdateInfo_Finished,
]
