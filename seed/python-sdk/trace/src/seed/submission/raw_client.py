# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from ..commons.types.language import Language
import typing
from ..core.request_options import RequestOptions
from ..core.http_response import HttpResponse
from .types.execution_session_response import ExecutionSessionResponse
from ..core.jsonable_encoder import jsonable_encoder
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.pydantic_utilities import parse_obj_as
from .types.get_execution_session_state_response import GetExecutionSessionStateResponse
from ..core.client_wrapper import AsyncClientWrapper
from ..core.http_response import AsyncHttpResponse


class RawSubmissionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_execution_session(
        self, language: Language, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[ExecutionSessionResponse]:
        """
        Returns sessionId and execution server URL for session. Spins up server.

        Parameters
        ----------
        language : Language

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ExecutionSessionResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/create-session/{jsonable_encoder(language)}",
            method="POST",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            data = typing.cast(
                ExecutionSessionResponse,
                parse_obj_as(
                    type_=ExecutionSessionResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=data)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[typing.Optional[ExecutionSessionResponse]]:
        """
        Returns execution server URL for session. Returns empty if session isn't registered.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[ExecutionSessionResponse]]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            data = typing.cast(
                typing.Optional[ExecutionSessionResponse],
                parse_obj_as(
                    type_=typing.Optional[ExecutionSessionResponse],  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=data)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def stop_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Stops execution session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"sessions/stop/{jsonable_encoder(session_id)}",
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_execution_sessions_state(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[GetExecutionSessionStateResponse]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[GetExecutionSessionStateResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "sessions/execution-sessions-state",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            data = typing.cast(
                GetExecutionSessionStateResponse,
                parse_obj_as(
                    type_=GetExecutionSessionStateResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=data)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawSubmissionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_execution_session(
        self, language: Language, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[ExecutionSessionResponse]:
        """
        Returns sessionId and execution server URL for session. Spins up server.

        Parameters
        ----------
        language : Language

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ExecutionSessionResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/create-session/{jsonable_encoder(language)}",
            method="POST",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            data = typing.cast(
                ExecutionSessionResponse,
                parse_obj_as(
                    type_=ExecutionSessionResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=data)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.Optional[ExecutionSessionResponse]]:
        """
        Returns execution server URL for session. Returns empty if session isn't registered.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[ExecutionSessionResponse]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/{jsonable_encoder(session_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            data = typing.cast(
                typing.Optional[ExecutionSessionResponse],
                parse_obj_as(
                    type_=typing.Optional[ExecutionSessionResponse],  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=data)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def stop_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Stops execution session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"sessions/stop/{jsonable_encoder(session_id)}",
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_execution_sessions_state(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[GetExecutionSessionStateResponse]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[GetExecutionSessionStateResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "sessions/execution-sessions-state",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        if 200 <= _response.status_code < 300:
            data = typing.cast(
                GetExecutionSessionStateResponse,
                parse_obj_as(
                    type_=GetExecutionSessionStateResponse,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=data)
        raise ApiError(status_code=_response.status_code, body=_response_json)
