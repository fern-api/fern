# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawSubmissionClient
from ..commons.types.language import Language
import typing
from ..core.request_options import RequestOptions
from .types.execution_session_response import ExecutionSessionResponse
from .types.get_execution_session_state_response import GetExecutionSessionStateResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawSubmissionClient


class SubmissionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSubmissionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSubmissionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSubmissionClient
        """
        return self._raw_client

    def create_execution_session(
        self, language: Language, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ExecutionSessionResponse:
        """
        Returns sessionId and execution server URL for session. Spins up server.

        Parameters
        ----------
        language : Language

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExecutionSessionResponse

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.submission.create_execution_session(
            language="JAVA",
        )
        """
        response = self._raw_client.create_execution_session(language, request_options=request_options)
        return response.data

    def get_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[ExecutionSessionResponse]:
        """
        Returns execution server URL for session. Returns empty if session isn't registered.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[ExecutionSessionResponse]

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.submission.get_execution_session(
            session_id="sessionId",
        )
        """
        response = self._raw_client.get_execution_session(session_id, request_options=request_options)
        return response.data

    def stop_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Stops execution session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.submission.stop_execution_session(
            session_id="sessionId",
        )
        """
        response = self._raw_client.stop_execution_session(session_id, request_options=request_options)
        return response.data

    def get_execution_sessions_state(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetExecutionSessionStateResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExecutionSessionStateResponse

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.submission.get_execution_sessions_state()
        """
        response = self._raw_client.get_execution_sessions_state(request_options=request_options)
        return response.data


class AsyncSubmissionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSubmissionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSubmissionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSubmissionClient
        """
        return self._raw_client

    async def create_execution_session(
        self, language: Language, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ExecutionSessionResponse:
        """
        Returns sessionId and execution server URL for session. Spins up server.

        Parameters
        ----------
        language : Language

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExecutionSessionResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.submission.create_execution_session(
                language="JAVA",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_execution_session(language, request_options=request_options)
        return response.data

    async def get_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[ExecutionSessionResponse]:
        """
        Returns execution server URL for session. Returns empty if session isn't registered.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[ExecutionSessionResponse]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.submission.get_execution_session(
                session_id="sessionId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_execution_session(session_id, request_options=request_options)
        return response.data

    async def stop_execution_session(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Stops execution session.

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.submission.stop_execution_session(
                session_id="sessionId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.stop_execution_session(session_id, request_options=request_options)
        return response.data

    async def get_execution_sessions_state(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetExecutionSessionStateResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetExecutionSessionStateResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.submission.get_execution_sessions_state()


        asyncio.run(main())
        """
        response = await self._raw_client.get_execution_sessions_state(request_options=request_options)
        return response.data
