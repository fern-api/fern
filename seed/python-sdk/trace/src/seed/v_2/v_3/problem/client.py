# This file was auto-generated by Fern from our API Definition.

from ....core.client_wrapper import SyncClientWrapper
from .raw_client import RawProblemClient
import typing
from ....core.request_options import RequestOptions
from .types.lightweight_problem_info_v_2 import LightweightProblemInfoV2
from .types.problem_info_v_2 import ProblemInfoV2
from ....commons.types.problem_id import ProblemId
from ....core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawProblemClient


class ProblemClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProblemClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProblemClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProblemClient
        """
        return self._raw_client

    def get_lightweight_problems(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LightweightProblemInfoV2]:
        """
        Returns lightweight versions of all problems

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LightweightProblemInfoV2]

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.v_2.v_3.problem.get_lightweight_problems()
        """
        response = self._raw_client.get_lightweight_problems(
            request_options=request_options,
        )
        return response.data

    def get_problems(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ProblemInfoV2]:
        """
        Returns latest versions of all problems

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProblemInfoV2]

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.v_2.v_3.problem.get_problems()
        """
        response = self._raw_client.get_problems(
            request_options=request_options,
        )
        return response.data

    def get_latest_problem(
        self, problem_id: ProblemId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProblemInfoV2:
        """
        Returns latest version of a problem

        Parameters
        ----------
        problem_id : ProblemId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProblemInfoV2

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.v_2.v_3.problem.get_latest_problem(
            problem_id="problemId",
        )
        """
        response = self._raw_client.get_latest_problem(
            problem_id,
            request_options=request_options,
        )
        return response.data

    def get_problem_version(
        self, problem_id: ProblemId, problem_version: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProblemInfoV2:
        """
        Returns requested version of a problem

        Parameters
        ----------
        problem_id : ProblemId

        problem_version : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProblemInfoV2

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.v_2.v_3.problem.get_problem_version(
            problem_id="problemId",
            problem_version=1,
        )
        """
        response = self._raw_client.get_problem_version(
            problem_id,
            problem_version,
            request_options=request_options,
        )
        return response.data


class AsyncProblemClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProblemClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProblemClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProblemClient
        """
        return self._raw_client

    async def get_lightweight_problems(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[LightweightProblemInfoV2]:
        """
        Returns lightweight versions of all problems

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[LightweightProblemInfoV2]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.v_2.v_3.problem.get_lightweight_problems()


        asyncio.run(main())
        """
        response = await self._raw_client.get_lightweight_problems(
            request_options=request_options,
        )
        return response.data

    async def get_problems(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ProblemInfoV2]:
        """
        Returns latest versions of all problems

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProblemInfoV2]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.v_2.v_3.problem.get_problems()


        asyncio.run(main())
        """
        response = await self._raw_client.get_problems(
            request_options=request_options,
        )
        return response.data

    async def get_latest_problem(
        self, problem_id: ProblemId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProblemInfoV2:
        """
        Returns latest version of a problem

        Parameters
        ----------
        problem_id : ProblemId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProblemInfoV2

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.v_2.v_3.problem.get_latest_problem(
                problem_id="problemId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_latest_problem(
            problem_id,
            request_options=request_options,
        )
        return response.data

    async def get_problem_version(
        self, problem_id: ProblemId, problem_version: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ProblemInfoV2:
        """
        Returns requested version of a problem

        Parameters
        ----------
        problem_id : ProblemId

        problem_version : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProblemInfoV2

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.v_2.v_3.problem.get_problem_version(
                problem_id="problemId",
                problem_version=1,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_problem_version(
            problem_id,
            problem_version,
            request_options=request_options,
        )
        return response.data
