# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from .....commons.types.variable_type import VariableType
from .....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .....core.serialization import FieldMetadata
from .parameter import Parameter


class VoidFunctionSignatureThatTakesActualResult(UniversalBaseModel):
    parameters: typing.List[Parameter]
    actual_result_type: typing_extensions.Annotated[VariableType, FieldMetadata(alias="actualResultType")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
