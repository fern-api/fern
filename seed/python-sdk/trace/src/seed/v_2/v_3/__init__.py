# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import problem
    from .problem import (
        AssertCorrectnessCheck,
        AssertCorrectnessCheck_Custom,
        AssertCorrectnessCheck_DeepEquality,
        BasicCustomFiles,
        BasicTestCaseTemplate,
        CreateProblemRequestV2,
        CustomFiles,
        CustomFiles_Basic,
        CustomFiles_Custom,
        DeepEqualityCorrectnessCheck,
        DefaultProvidedFile,
        FileInfoV2,
        Files,
        FunctionImplementation,
        FunctionImplementationForMultipleLanguages,
        FunctionSignature,
        FunctionSignature_NonVoid,
        FunctionSignature_Void,
        FunctionSignature_VoidThatTakesActualResult,
        GeneratedFiles,
        GetBasicSolutionFileRequest,
        GetBasicSolutionFileResponse,
        GetFunctionSignatureRequest,
        GetFunctionSignatureResponse,
        GetGeneratedTestCaseFileRequest,
        GetGeneratedTestCaseTemplateFileRequest,
        LightweightProblemInfoV2,
        NonVoidFunctionDefinition,
        NonVoidFunctionSignature,
        Parameter,
        ParameterId,
        ProblemInfoV2,
        TestCaseExpects,
        TestCaseFunction,
        TestCaseFunction_Custom,
        TestCaseFunction_WithActualResult,
        TestCaseId,
        TestCaseImplementation,
        TestCaseImplementationDescription,
        TestCaseImplementationDescriptionBoard,
        TestCaseImplementationDescriptionBoard_Html,
        TestCaseImplementationDescriptionBoard_ParamId,
        TestCaseImplementationReference,
        TestCaseImplementationReference_Implementation,
        TestCaseImplementationReference_TemplateId,
        TestCaseMetadata,
        TestCaseTemplate,
        TestCaseTemplateId,
        TestCaseV2,
        TestCaseWithActualResultImplementation,
        VoidFunctionDefinition,
        VoidFunctionDefinitionThatTakesActualResult,
        VoidFunctionSignature,
        VoidFunctionSignatureThatTakesActualResult,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "AssertCorrectnessCheck": ".problem",
    "AssertCorrectnessCheck_Custom": ".problem",
    "AssertCorrectnessCheck_DeepEquality": ".problem",
    "BasicCustomFiles": ".problem",
    "BasicTestCaseTemplate": ".problem",
    "CreateProblemRequestV2": ".problem",
    "CustomFiles": ".problem",
    "CustomFiles_Basic": ".problem",
    "CustomFiles_Custom": ".problem",
    "DeepEqualityCorrectnessCheck": ".problem",
    "DefaultProvidedFile": ".problem",
    "FileInfoV2": ".problem",
    "Files": ".problem",
    "FunctionImplementation": ".problem",
    "FunctionImplementationForMultipleLanguages": ".problem",
    "FunctionSignature": ".problem",
    "FunctionSignature_NonVoid": ".problem",
    "FunctionSignature_Void": ".problem",
    "FunctionSignature_VoidThatTakesActualResult": ".problem",
    "GeneratedFiles": ".problem",
    "GetBasicSolutionFileRequest": ".problem",
    "GetBasicSolutionFileResponse": ".problem",
    "GetFunctionSignatureRequest": ".problem",
    "GetFunctionSignatureResponse": ".problem",
    "GetGeneratedTestCaseFileRequest": ".problem",
    "GetGeneratedTestCaseTemplateFileRequest": ".problem",
    "LightweightProblemInfoV2": ".problem",
    "NonVoidFunctionDefinition": ".problem",
    "NonVoidFunctionSignature": ".problem",
    "Parameter": ".problem",
    "ParameterId": ".problem",
    "ProblemInfoV2": ".problem",
    "TestCaseExpects": ".problem",
    "TestCaseFunction": ".problem",
    "TestCaseFunction_Custom": ".problem",
    "TestCaseFunction_WithActualResult": ".problem",
    "TestCaseId": ".problem",
    "TestCaseImplementation": ".problem",
    "TestCaseImplementationDescription": ".problem",
    "TestCaseImplementationDescriptionBoard": ".problem",
    "TestCaseImplementationDescriptionBoard_Html": ".problem",
    "TestCaseImplementationDescriptionBoard_ParamId": ".problem",
    "TestCaseImplementationReference": ".problem",
    "TestCaseImplementationReference_Implementation": ".problem",
    "TestCaseImplementationReference_TemplateId": ".problem",
    "TestCaseMetadata": ".problem",
    "TestCaseTemplate": ".problem",
    "TestCaseTemplateId": ".problem",
    "TestCaseV2": ".problem",
    "TestCaseWithActualResultImplementation": ".problem",
    "VoidFunctionDefinition": ".problem",
    "VoidFunctionDefinitionThatTakesActualResult": ".problem",
    "VoidFunctionSignature": ".problem",
    "VoidFunctionSignatureThatTakesActualResult": ".problem",
    "problem": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AssertCorrectnessCheck",
    "AssertCorrectnessCheck_Custom",
    "AssertCorrectnessCheck_DeepEquality",
    "BasicCustomFiles",
    "BasicTestCaseTemplate",
    "CreateProblemRequestV2",
    "CustomFiles",
    "CustomFiles_Basic",
    "CustomFiles_Custom",
    "DeepEqualityCorrectnessCheck",
    "DefaultProvidedFile",
    "FileInfoV2",
    "Files",
    "FunctionImplementation",
    "FunctionImplementationForMultipleLanguages",
    "FunctionSignature",
    "FunctionSignature_NonVoid",
    "FunctionSignature_Void",
    "FunctionSignature_VoidThatTakesActualResult",
    "GeneratedFiles",
    "GetBasicSolutionFileRequest",
    "GetBasicSolutionFileResponse",
    "GetFunctionSignatureRequest",
    "GetFunctionSignatureResponse",
    "GetGeneratedTestCaseFileRequest",
    "GetGeneratedTestCaseTemplateFileRequest",
    "LightweightProblemInfoV2",
    "NonVoidFunctionDefinition",
    "NonVoidFunctionSignature",
    "Parameter",
    "ParameterId",
    "ProblemInfoV2",
    "TestCaseExpects",
    "TestCaseFunction",
    "TestCaseFunction_Custom",
    "TestCaseFunction_WithActualResult",
    "TestCaseId",
    "TestCaseImplementation",
    "TestCaseImplementationDescription",
    "TestCaseImplementationDescriptionBoard",
    "TestCaseImplementationDescriptionBoard_Html",
    "TestCaseImplementationDescriptionBoard_ParamId",
    "TestCaseImplementationReference",
    "TestCaseImplementationReference_Implementation",
    "TestCaseImplementationReference_TemplateId",
    "TestCaseMetadata",
    "TestCaseTemplate",
    "TestCaseTemplateId",
    "TestCaseV2",
    "TestCaseWithActualResultImplementation",
    "VoidFunctionDefinition",
    "VoidFunctionDefinitionThatTakesActualResult",
    "VoidFunctionSignature",
    "VoidFunctionSignatureThatTakesActualResult",
    "problem",
]
