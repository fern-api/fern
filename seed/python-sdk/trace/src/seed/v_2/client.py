# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawV2Client, RawV2Client

if typing.TYPE_CHECKING:
    from .problem.client import AsyncProblemClient, ProblemClient
    from .v_3.client import AsyncV3Client, V3Client


class V2Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawV2Client(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._problem: typing.Optional[ProblemClient] = None
        self._v_3: typing.Optional[V3Client] = None

    @property
    def with_raw_response(self) -> RawV2Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawV2Client
        """
        return self._raw_client

    def test(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.v_2.test()
        """
        _response = self._raw_client.test(request_options=request_options)
        return _response.data

    @property
    def problem(self):
        if self._problem is None:
            from .problem.client import ProblemClient  # noqa: E402

            self._problem = ProblemClient(client_wrapper=self._client_wrapper)
        return self._problem

    @property
    def v_3(self):
        if self._v_3 is None:
            from .v_3.client import V3Client  # noqa: E402

            self._v_3 = V3Client(client_wrapper=self._client_wrapper)
        return self._v_3


class AsyncV2Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawV2Client(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._problem: typing.Optional[AsyncProblemClient] = None
        self._v_3: typing.Optional[AsyncV3Client] = None

    @property
    def with_raw_response(self) -> AsyncRawV2Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawV2Client
        """
        return self._raw_client

    async def test(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.v_2.test()


        asyncio.run(main())
        """
        _response = await self._raw_client.test(request_options=request_options)
        return _response.data

    @property
    def problem(self):
        if self._problem is None:
            from .problem.client import AsyncProblemClient  # noqa: E402

            self._problem = AsyncProblemClient(client_wrapper=self._client_wrapper)
        return self._problem

    @property
    def v_3(self):
        if self._v_3 is None:
            from .v_3.client import AsyncV3Client  # noqa: E402

            self._v_3 = AsyncV3Client(client_wrapper=self._client_wrapper)
        return self._v_3
