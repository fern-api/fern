# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        BinaryTreeNodeAndTreeValue,
        BinaryTreeNodeValue,
        BinaryTreeValue,
        DebugKeyValuePairs,
        DebugMapValue,
        DebugVariableValue,
        DebugVariableValue_BinaryTreeNodeValue,
        DebugVariableValue_BooleanValue,
        DebugVariableValue_CharValue,
        DebugVariableValue_DoubleValue,
        DebugVariableValue_DoublyLinkedListNodeValue,
        DebugVariableValue_GenericValue,
        DebugVariableValue_IntegerValue,
        DebugVariableValue_ListValue,
        DebugVariableValue_MapValue,
        DebugVariableValue_NullValue,
        DebugVariableValue_SinglyLinkedListNodeValue,
        DebugVariableValue_StringValue,
        DebugVariableValue_UndefinedValue,
        DoublyLinkedListNodeAndListValue,
        DoublyLinkedListNodeValue,
        DoublyLinkedListValue,
        FileInfo,
        GenericValue,
        KeyValuePair,
        Language,
        ListType,
        MapType,
        MapValue,
        NodeId,
        ProblemId,
        SinglyLinkedListNodeAndListValue,
        SinglyLinkedListNodeValue,
        SinglyLinkedListValue,
        TestCase,
        TestCaseWithExpectedResult,
        UserId,
        VariableType,
        VariableType_BinaryTreeType,
        VariableType_BooleanType,
        VariableType_CharType,
        VariableType_DoubleType,
        VariableType_DoublyLinkedListType,
        VariableType_IntegerType,
        VariableType_ListType,
        VariableType_MapType,
        VariableType_SinglyLinkedListType,
        VariableType_StringType,
        VariableValue,
        VariableValue_BinaryTreeValue,
        VariableValue_BooleanValue,
        VariableValue_CharValue,
        VariableValue_DoubleValue,
        VariableValue_DoublyLinkedListValue,
        VariableValue_IntegerValue,
        VariableValue_ListValue,
        VariableValue_MapValue,
        VariableValue_NullValue,
        VariableValue_SinglyLinkedListValue,
        VariableValue_StringValue,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "BinaryTreeNodeAndTreeValue": ".types",
    "BinaryTreeNodeValue": ".types",
    "BinaryTreeValue": ".types",
    "DebugKeyValuePairs": ".types",
    "DebugMapValue": ".types",
    "DebugVariableValue": ".types",
    "DebugVariableValue_BinaryTreeNodeValue": ".types",
    "DebugVariableValue_BooleanValue": ".types",
    "DebugVariableValue_CharValue": ".types",
    "DebugVariableValue_DoubleValue": ".types",
    "DebugVariableValue_DoublyLinkedListNodeValue": ".types",
    "DebugVariableValue_GenericValue": ".types",
    "DebugVariableValue_IntegerValue": ".types",
    "DebugVariableValue_ListValue": ".types",
    "DebugVariableValue_MapValue": ".types",
    "DebugVariableValue_NullValue": ".types",
    "DebugVariableValue_SinglyLinkedListNodeValue": ".types",
    "DebugVariableValue_StringValue": ".types",
    "DebugVariableValue_UndefinedValue": ".types",
    "DoublyLinkedListNodeAndListValue": ".types",
    "DoublyLinkedListNodeValue": ".types",
    "DoublyLinkedListValue": ".types",
    "FileInfo": ".types",
    "GenericValue": ".types",
    "KeyValuePair": ".types",
    "Language": ".types",
    "ListType": ".types",
    "MapType": ".types",
    "MapValue": ".types",
    "NodeId": ".types",
    "ProblemId": ".types",
    "SinglyLinkedListNodeAndListValue": ".types",
    "SinglyLinkedListNodeValue": ".types",
    "SinglyLinkedListValue": ".types",
    "TestCase": ".types",
    "TestCaseWithExpectedResult": ".types",
    "UserId": ".types",
    "VariableType": ".types",
    "VariableType_BinaryTreeType": ".types",
    "VariableType_BooleanType": ".types",
    "VariableType_CharType": ".types",
    "VariableType_DoubleType": ".types",
    "VariableType_DoublyLinkedListType": ".types",
    "VariableType_IntegerType": ".types",
    "VariableType_ListType": ".types",
    "VariableType_MapType": ".types",
    "VariableType_SinglyLinkedListType": ".types",
    "VariableType_StringType": ".types",
    "VariableValue": ".types",
    "VariableValue_BinaryTreeValue": ".types",
    "VariableValue_BooleanValue": ".types",
    "VariableValue_CharValue": ".types",
    "VariableValue_DoubleValue": ".types",
    "VariableValue_DoublyLinkedListValue": ".types",
    "VariableValue_IntegerValue": ".types",
    "VariableValue_ListValue": ".types",
    "VariableValue_MapValue": ".types",
    "VariableValue_NullValue": ".types",
    "VariableValue_SinglyLinkedListValue": ".types",
    "VariableValue_StringValue": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "BinaryTreeNodeAndTreeValue",
    "BinaryTreeNodeValue",
    "BinaryTreeValue",
    "DebugKeyValuePairs",
    "DebugMapValue",
    "DebugVariableValue",
    "DebugVariableValue_BinaryTreeNodeValue",
    "DebugVariableValue_BooleanValue",
    "DebugVariableValue_CharValue",
    "DebugVariableValue_DoubleValue",
    "DebugVariableValue_DoublyLinkedListNodeValue",
    "DebugVariableValue_GenericValue",
    "DebugVariableValue_IntegerValue",
    "DebugVariableValue_ListValue",
    "DebugVariableValue_MapValue",
    "DebugVariableValue_NullValue",
    "DebugVariableValue_SinglyLinkedListNodeValue",
    "DebugVariableValue_StringValue",
    "DebugVariableValue_UndefinedValue",
    "DoublyLinkedListNodeAndListValue",
    "DoublyLinkedListNodeValue",
    "DoublyLinkedListValue",
    "FileInfo",
    "GenericValue",
    "KeyValuePair",
    "Language",
    "ListType",
    "MapType",
    "MapValue",
    "NodeId",
    "ProblemId",
    "SinglyLinkedListNodeAndListValue",
    "SinglyLinkedListNodeValue",
    "SinglyLinkedListValue",
    "TestCase",
    "TestCaseWithExpectedResult",
    "UserId",
    "VariableType",
    "VariableType_BinaryTreeType",
    "VariableType_BooleanType",
    "VariableType_CharType",
    "VariableType_DoubleType",
    "VariableType_DoublyLinkedListType",
    "VariableType_IntegerType",
    "VariableType_ListType",
    "VariableType_MapType",
    "VariableType_SinglyLinkedListType",
    "VariableType_StringType",
    "VariableValue",
    "VariableValue_BinaryTreeValue",
    "VariableValue_BooleanValue",
    "VariableValue_CharValue",
    "VariableValue_DoubleValue",
    "VariableValue_DoublyLinkedListValue",
    "VariableValue_IntegerValue",
    "VariableValue_ListValue",
    "VariableValue_MapValue",
    "VariableValue_NullValue",
    "VariableValue_SinglyLinkedListValue",
    "VariableValue_StringValue",
]
