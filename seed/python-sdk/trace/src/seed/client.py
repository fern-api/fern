# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import SeedTraceEnvironment

if typing.TYPE_CHECKING:
    from .admin.client import AdminClient, AsyncAdminClient
    from .homepage.client import AsyncHomepageClient, HomepageClient
    from .migration.client import AsyncMigrationClient, MigrationClient
    from .playlist.client import AsyncPlaylistClient, PlaylistClient
    from .problem.client import AsyncProblemClient, ProblemClient
    from .submission.client import AsyncSubmissionClient, SubmissionClient
    from .sysprop.client import AsyncSyspropClient, SyspropClient
    from .v_2.client import AsyncV2Client, V2Client


class SeedTrace:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SeedTraceEnvironment
        The environment to use for requests from the client. from .environment import SeedTraceEnvironment



        Defaults to SeedTraceEnvironment.PROD



    x_random_header : typing.Optional[str]
    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedTrace

    client = SeedTrace(
        x_random_header="YOUR_X_RANDOM_HEADER",
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeedTraceEnvironment = SeedTraceEnvironment.PROD,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_random_header=x_random_header,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._v_2: typing.Optional[V2Client] = None
        self._admin: typing.Optional[AdminClient] = None
        self._homepage: typing.Optional[HomepageClient] = None
        self._migration: typing.Optional[MigrationClient] = None
        self._playlist: typing.Optional[PlaylistClient] = None
        self._problem: typing.Optional[ProblemClient] = None
        self._submission: typing.Optional[SubmissionClient] = None
        self._sysprop: typing.Optional[SyspropClient] = None

    @property
    def v_2(self):
        if self._v_2 is None:
            from .v_2.client import V2Client  # noqa: E402

            self._v_2 = V2Client(client_wrapper=self._client_wrapper)
        return self._v_2

    @property
    def admin(self):
        if self._admin is None:
            from .admin.client import AdminClient  # noqa: E402

            self._admin = AdminClient(client_wrapper=self._client_wrapper)
        return self._admin

    @property
    def homepage(self):
        if self._homepage is None:
            from .homepage.client import HomepageClient  # noqa: E402

            self._homepage = HomepageClient(client_wrapper=self._client_wrapper)
        return self._homepage

    @property
    def migration(self):
        if self._migration is None:
            from .migration.client import MigrationClient  # noqa: E402

            self._migration = MigrationClient(client_wrapper=self._client_wrapper)
        return self._migration

    @property
    def playlist(self):
        if self._playlist is None:
            from .playlist.client import PlaylistClient  # noqa: E402

            self._playlist = PlaylistClient(client_wrapper=self._client_wrapper)
        return self._playlist

    @property
    def problem(self):
        if self._problem is None:
            from .problem.client import ProblemClient  # noqa: E402

            self._problem = ProblemClient(client_wrapper=self._client_wrapper)
        return self._problem

    @property
    def submission(self):
        if self._submission is None:
            from .submission.client import SubmissionClient  # noqa: E402

            self._submission = SubmissionClient(client_wrapper=self._client_wrapper)
        return self._submission

    @property
    def sysprop(self):
        if self._sysprop is None:
            from .sysprop.client import SyspropClient  # noqa: E402

            self._sysprop = SyspropClient(client_wrapper=self._client_wrapper)
        return self._sysprop


class AsyncSeedTrace:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : SeedTraceEnvironment
        The environment to use for requests from the client. from .environment import SeedTraceEnvironment



        Defaults to SeedTraceEnvironment.PROD



    x_random_header : typing.Optional[str]
    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedTrace

    client = AsyncSeedTrace(
        x_random_header="YOUR_X_RANDOM_HEADER",
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeedTraceEnvironment = SeedTraceEnvironment.PROD,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_random_header=x_random_header,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._v_2: typing.Optional[AsyncV2Client] = None
        self._admin: typing.Optional[AsyncAdminClient] = None
        self._homepage: typing.Optional[AsyncHomepageClient] = None
        self._migration: typing.Optional[AsyncMigrationClient] = None
        self._playlist: typing.Optional[AsyncPlaylistClient] = None
        self._problem: typing.Optional[AsyncProblemClient] = None
        self._submission: typing.Optional[AsyncSubmissionClient] = None
        self._sysprop: typing.Optional[AsyncSyspropClient] = None

    @property
    def v_2(self):
        if self._v_2 is None:
            from .v_2.client import AsyncV2Client  # noqa: E402

            self._v_2 = AsyncV2Client(client_wrapper=self._client_wrapper)
        return self._v_2

    @property
    def admin(self):
        if self._admin is None:
            from .admin.client import AsyncAdminClient  # noqa: E402

            self._admin = AsyncAdminClient(client_wrapper=self._client_wrapper)
        return self._admin

    @property
    def homepage(self):
        if self._homepage is None:
            from .homepage.client import AsyncHomepageClient  # noqa: E402

            self._homepage = AsyncHomepageClient(client_wrapper=self._client_wrapper)
        return self._homepage

    @property
    def migration(self):
        if self._migration is None:
            from .migration.client import AsyncMigrationClient  # noqa: E402

            self._migration = AsyncMigrationClient(client_wrapper=self._client_wrapper)
        return self._migration

    @property
    def playlist(self):
        if self._playlist is None:
            from .playlist.client import AsyncPlaylistClient  # noqa: E402

            self._playlist = AsyncPlaylistClient(client_wrapper=self._client_wrapper)
        return self._playlist

    @property
    def problem(self):
        if self._problem is None:
            from .problem.client import AsyncProblemClient  # noqa: E402

            self._problem = AsyncProblemClient(client_wrapper=self._client_wrapper)
        return self._problem

    @property
    def submission(self):
        if self._submission is None:
            from .submission.client import AsyncSubmissionClient  # noqa: E402

            self._submission = AsyncSubmissionClient(client_wrapper=self._client_wrapper)
        return self._submission

    @property
    def sysprop(self):
        if self._sysprop is None:
            from .sysprop.client import AsyncSyspropClient  # noqa: E402

            self._sysprop = AsyncSyspropClient(client_wrapper=self._client_wrapper)
        return self._sysprop


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SeedTraceEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
