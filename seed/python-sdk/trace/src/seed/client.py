# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import SeedTraceEnvironment
from .resources.admin.client import AdminClient, AsyncAdminClient
from .resources.homepage.client import AsyncHomepageClient, HomepageClient
from .resources.migration.client import AsyncMigrationClient, MigrationClient
from .resources.playlist.client import AsyncPlaylistClient, PlaylistClient
from .resources.problem.client import AsyncProblemClient, ProblemClient
from .resources.submission.client import AsyncSubmissionClient, SubmissionClient
from .resources.sysprop.client import AsyncSyspropClient, SyspropClient
from .resources.v_2.client import AsyncV2Client, V2Client


class SeedTrace:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters:
        - base_url: typing.Optional[str]. The base url to use for requests from the client.

        - environment: SeedTraceEnvironment. The environment to use for requests from the client. from .environment import SeedTraceEnvironment

                                             Defaults to SeedTraceEnvironment.PROD

        - x_random_header: typing.Optional[str].

        - token: typing.Optional[typing.Union[str, typing.Callable[[], str]]].

        - timeout: typing.Optional[float]. The timeout to be used, in seconds, for requests by default the timeout is 60 seconds.

        - httpx_client: typing.Optional[httpx.Client]. The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    ---
    from seed.client import SeedTrace

    client = SeedTrace(
        x_random_header="YOUR_X_RANDOM_HEADER",
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeedTraceEnvironment = SeedTraceEnvironment.PROD,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_random_header=x_random_header,
            token=token,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.v_2 = V2Client(client_wrapper=self._client_wrapper)
        self.admin = AdminClient(client_wrapper=self._client_wrapper)
        self.homepage = HomepageClient(client_wrapper=self._client_wrapper)
        self.migration = MigrationClient(client_wrapper=self._client_wrapper)
        self.playlist = PlaylistClient(client_wrapper=self._client_wrapper)
        self.problem = ProblemClient(client_wrapper=self._client_wrapper)
        self.submission = SubmissionClient(client_wrapper=self._client_wrapper)
        self.sysprop = SyspropClient(client_wrapper=self._client_wrapper)


class AsyncSeedTrace:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters:
        - base_url: typing.Optional[str]. The base url to use for requests from the client.

        - environment: SeedTraceEnvironment. The environment to use for requests from the client. from .environment import SeedTraceEnvironment

                                             Defaults to SeedTraceEnvironment.PROD

        - x_random_header: typing.Optional[str].

        - token: typing.Optional[typing.Union[str, typing.Callable[[], str]]].

        - timeout: typing.Optional[float]. The timeout to be used, in seconds, for requests by default the timeout is 60 seconds.

        - httpx_client: typing.Optional[httpx.AsyncClient]. The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    ---
    from seed.client import AsyncSeedTrace

    client = AsyncSeedTrace(
        x_random_header="YOUR_X_RANDOM_HEADER",
        token="YOUR_TOKEN",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeedTraceEnvironment = SeedTraceEnvironment.PROD,
        x_random_header: typing.Optional[str] = None,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            x_random_header=x_random_header,
            token=token,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.v_2 = AsyncV2Client(client_wrapper=self._client_wrapper)
        self.admin = AsyncAdminClient(client_wrapper=self._client_wrapper)
        self.homepage = AsyncHomepageClient(client_wrapper=self._client_wrapper)
        self.migration = AsyncMigrationClient(client_wrapper=self._client_wrapper)
        self.playlist = AsyncPlaylistClient(client_wrapper=self._client_wrapper)
        self.problem = AsyncProblemClient(client_wrapper=self._client_wrapper)
        self.submission = AsyncSubmissionClient(client_wrapper=self._client_wrapper)
        self.sysprop = AsyncSyspropClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SeedTraceEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
