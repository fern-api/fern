# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..commons.types.problem_id import ProblemId
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from .errors.playlist_id_not_found_error import PlaylistIdNotFoundError
from .errors.unauthorized_error import UnauthorizedError
from .types.playlist import Playlist
from .types.playlist_id import PlaylistId
from .types.playlist_id_not_found_error_body import PlaylistIdNotFoundErrorBody
from .types.update_playlist_request import UpdatePlaylistRequest

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawPlaylistClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        name: str,
        problems: typing.Sequence[ProblemId],
        optional_datetime: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Playlist]:
        """
        Create a new playlist

        Parameters
        ----------
        service_param : int

        datetime : dt.datetime

        name : str

        problems : typing.Sequence[ProblemId]

        optional_datetime : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Playlist]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/create",
            method="POST",
            params={
                "datetime": serialize_datetime(datetime),
                "optionalDatetime": serialize_datetime(optional_datetime) if optional_datetime is not None else None,
            },
            json={
                "name": name,
                "problems": problems,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                Playlist,
                parse_obj_as(
                    type_=Playlist,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_playlists(
        self,
        service_param: int,
        *,
        other_field: str,
        multi_line_docs: str,
        multiple_field: typing.Union[str, typing.Sequence[str]],
        limit: typing.Optional[int] = None,
        optional_multiple_field: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Playlist]]:
        """
        Returns the user's playlists

        Parameters
        ----------
        service_param : int

        other_field : str
            i'm another field

        multi_line_docs : str
            I'm a multiline
            description

        multiple_field : typing.Union[str, typing.Sequence[str]]

        limit : typing.Optional[int]

        optional_multiple_field : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Playlist]]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/all",
            method="GET",
            params={
                "limit": limit,
                "otherField": other_field,
                "multiLineDocs": multi_line_docs,
                "optionalMultipleField": optional_multiple_field,
                "multipleField": multiple_field,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.List[Playlist],
                parse_obj_as(
                    type_=typing.List[Playlist],  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[Playlist]:
        """
        Returns a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Playlist]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                Playlist,
                parse_obj_as(
                    type_=Playlist,  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaylistIdNotFoundErrorBody,
                        parse_obj_as(
                            type_=PlaylistIdNotFoundErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["errorName"] == "UnauthorizedError":
                raise UnauthorizedError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_playlist(
        self,
        service_param: int,
        playlist_id: PlaylistId,
        *,
        request: typing.Optional[UpdatePlaylistRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.Optional[Playlist]]:
        """
        Updates a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request : typing.Optional[UpdatePlaylistRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.Optional[Playlist]]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="PUT",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=UpdatePlaylistRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.Optional[Playlist],
                parse_obj_as(
                    type_=typing.Optional[Playlist],  # type: ignore
                    object_=_response_json,
                ),
            )
            return HttpResponse(response=_response, data=_data)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaylistIdNotFoundErrorBody,
                        parse_obj_as(
                            type_=PlaylistIdNotFoundErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Deletes a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawPlaylistClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        name: str,
        problems: typing.Sequence[ProblemId],
        optional_datetime: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Playlist]:
        """
        Create a new playlist

        Parameters
        ----------
        service_param : int

        datetime : dt.datetime

        name : str

        problems : typing.Sequence[ProblemId]

        optional_datetime : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Playlist]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/create",
            method="POST",
            params={
                "datetime": serialize_datetime(datetime),
                "optionalDatetime": serialize_datetime(optional_datetime) if optional_datetime is not None else None,
            },
            json={
                "name": name,
                "problems": problems,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                Playlist,
                parse_obj_as(
                    type_=Playlist,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_playlists(
        self,
        service_param: int,
        *,
        other_field: str,
        multi_line_docs: str,
        multiple_field: typing.Union[str, typing.Sequence[str]],
        limit: typing.Optional[int] = None,
        optional_multiple_field: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Playlist]]:
        """
        Returns the user's playlists

        Parameters
        ----------
        service_param : int

        other_field : str
            i'm another field

        multi_line_docs : str
            I'm a multiline
            description

        multiple_field : typing.Union[str, typing.Sequence[str]]

        limit : typing.Optional[int]

        optional_multiple_field : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Playlist]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/all",
            method="GET",
            params={
                "limit": limit,
                "otherField": other_field,
                "multiLineDocs": multi_line_docs,
                "optionalMultipleField": optional_multiple_field,
                "multipleField": multiple_field,
            },
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.List[Playlist],
                parse_obj_as(
                    type_=typing.List[Playlist],  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Playlist]:
        """
        Returns a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Playlist]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                Playlist,
                parse_obj_as(
                    type_=Playlist,  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaylistIdNotFoundErrorBody,
                        parse_obj_as(
                            type_=PlaylistIdNotFoundErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
            if _response_json["errorName"] == "UnauthorizedError":
                raise UnauthorizedError(headers=dict(_response.headers))
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_playlist(
        self,
        service_param: int,
        playlist_id: PlaylistId,
        *,
        request: typing.Optional[UpdatePlaylistRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.Optional[Playlist]]:
        """
        Updates a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request : typing.Optional[UpdatePlaylistRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.Optional[Playlist]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="PUT",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=UpdatePlaylistRequest, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        if 200 <= _response.status_code < 300:
            _data = typing.cast(
                typing.Optional[Playlist],
                parse_obj_as(
                    type_=typing.Optional[Playlist],  # type: ignore
                    object_=_response_json,
                ),
            )
            return AsyncHttpResponse(response=_response, data=_data)
        if "errorName" in _response_json:
            if _response_json["errorName"] == "PlaylistIdNotFoundError":
                raise PlaylistIdNotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        PlaylistIdNotFoundErrorBody,
                        parse_obj_as(
                            type_=PlaylistIdNotFoundErrorBody,  # type: ignore
                            object_=_response_json["content"],
                        ),
                    ),
                )
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Deletes a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/playlist/{jsonable_encoder(service_param)}/{jsonable_encoder(playlist_id)}",
            method="DELETE",
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
