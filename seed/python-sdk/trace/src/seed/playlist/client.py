# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawPlaylistClient
import datetime as dt
from ..commons.types.problem_id import ProblemId
from ..core.request_options import RequestOptions
from .types.playlist import Playlist
from .types.playlist_id import PlaylistId
from .types.update_playlist_request import UpdatePlaylistRequest
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawPlaylistClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PlaylistClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPlaylistClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPlaylistClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPlaylistClient
        """
        return self._raw_client

    def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        name: str,
        problems: typing.Sequence[ProblemId],
        optional_datetime: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Playlist:
        """
        Create a new playlist

        Parameters
        ----------
        service_param : int

        datetime : dt.datetime

        name : str

        problems : typing.Sequence[ProblemId]

        optional_datetime : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        import datetime

        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.create_playlist(
            service_param=1,
            datetime=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            optional_datetime=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            name="name",
            problems=["problems", "problems"],
        )
        """
        response = self._raw_client.create_playlist(
            service_param,
            datetime=datetime,
            name=name,
            problems=problems,
            optional_datetime=optional_datetime,
            request_options=request_options,
        )
        return response.data

    def get_playlists(
        self,
        service_param: int,
        *,
        other_field: str,
        multi_line_docs: str,
        multiple_field: typing.Union[str, typing.Sequence[str]],
        limit: typing.Optional[int] = None,
        optional_multiple_field: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Playlist]:
        """
        Returns the user's playlists

        Parameters
        ----------
        service_param : int

        other_field : str
            i'm another field

        multi_line_docs : str
            I'm a multiline
            description

        multiple_field : typing.Union[str, typing.Sequence[str]]

        limit : typing.Optional[int]

        optional_multiple_field : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Playlist]

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.get_playlists(
            service_param=1,
            limit=1,
            other_field="otherField",
            multi_line_docs="multiLineDocs",
            optional_multiple_field="optionalMultipleField",
            multiple_field="multipleField",
        )
        """
        response = self._raw_client.get_playlists(
            service_param,
            other_field=other_field,
            multi_line_docs=multi_line_docs,
            multiple_field=multiple_field,
            limit=limit,
            optional_multiple_field=optional_multiple_field,
            request_options=request_options,
        )
        return response.data

    def get_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Playlist:
        """
        Returns a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.get_playlist(
            service_param=1,
            playlist_id="playlistId",
        )
        """
        response = self._raw_client.get_playlist(
            service_param,
            playlist_id,
            request_options=request_options,
        )
        return response.data

    def update_playlist(
        self,
        service_param: int,
        playlist_id: PlaylistId,
        *,
        request: typing.Optional[UpdatePlaylistRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[Playlist]:
        """
        Updates a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request : typing.Optional[UpdatePlaylistRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Playlist]

        Examples
        --------
        from seed import SeedTrace
        from seed.playlist import UpdatePlaylistRequest

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.update_playlist(
            service_param=1,
            playlist_id="playlistId",
            request=UpdatePlaylistRequest(
                name="name",
                problems=["problems", "problems"],
            ),
        )
        """
        response = self._raw_client.update_playlist(
            service_param,
            playlist_id,
            request=request,
            request_options=request_options,
        )
        return response.data

    def delete_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.playlist.delete_playlist(
            service_param=1,
            playlist_id="playlist_id",
        )
        """
        response = self._raw_client.delete_playlist(
            service_param,
            playlist_id,
            request_options=request_options,
        )
        return response.data


class AsyncPlaylistClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPlaylistClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPlaylistClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPlaylistClient
        """
        return self._raw_client

    async def create_playlist(
        self,
        service_param: int,
        *,
        datetime: dt.datetime,
        name: str,
        problems: typing.Sequence[ProblemId],
        optional_datetime: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Playlist:
        """
        Create a new playlist

        Parameters
        ----------
        service_param : int

        datetime : dt.datetime

        name : str

        problems : typing.Sequence[ProblemId]

        optional_datetime : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        import asyncio
        import datetime

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.create_playlist(
                service_param=1,
                datetime=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                optional_datetime=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                name="name",
                problems=["problems", "problems"],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_playlist(
            service_param,
            datetime=datetime,
            name=name,
            problems=problems,
            optional_datetime=optional_datetime,
            request_options=request_options,
        )
        return response.data

    async def get_playlists(
        self,
        service_param: int,
        *,
        other_field: str,
        multi_line_docs: str,
        multiple_field: typing.Union[str, typing.Sequence[str]],
        limit: typing.Optional[int] = None,
        optional_multiple_field: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Playlist]:
        """
        Returns the user's playlists

        Parameters
        ----------
        service_param : int

        other_field : str
            i'm another field

        multi_line_docs : str
            I'm a multiline
            description

        multiple_field : typing.Union[str, typing.Sequence[str]]

        limit : typing.Optional[int]

        optional_multiple_field : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Playlist]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.get_playlists(
                service_param=1,
                limit=1,
                other_field="otherField",
                multi_line_docs="multiLineDocs",
                optional_multiple_field="optionalMultipleField",
                multiple_field="multipleField",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_playlists(
            service_param,
            other_field=other_field,
            multi_line_docs=multi_line_docs,
            multiple_field=multiple_field,
            limit=limit,
            optional_multiple_field=optional_multiple_field,
            request_options=request_options,
        )
        return response.data

    async def get_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Playlist:
        """
        Returns a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Playlist

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.get_playlist(
                service_param=1,
                playlist_id="playlistId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_playlist(
            service_param,
            playlist_id,
            request_options=request_options,
        )
        return response.data

    async def update_playlist(
        self,
        service_param: int,
        playlist_id: PlaylistId,
        *,
        request: typing.Optional[UpdatePlaylistRequest] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[Playlist]:
        """
        Updates a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request : typing.Optional[UpdatePlaylistRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Playlist]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace
        from seed.playlist import UpdatePlaylistRequest

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.update_playlist(
                service_param=1,
                playlist_id="playlistId",
                request=UpdatePlaylistRequest(
                    name="name",
                    problems=["problems", "problems"],
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update_playlist(
            service_param,
            playlist_id,
            request=request,
            request_options=request_options,
        )
        return response.data

    async def delete_playlist(
        self, service_param: int, playlist_id: PlaylistId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Deletes a playlist

        Parameters
        ----------
        service_param : int

        playlist_id : PlaylistId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.playlist.delete_playlist(
                service_param=1,
                playlist_id="playlist_id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.delete_playlist(
            service_param,
            playlist_id,
            request_options=request_options,
        )
        return response.data
