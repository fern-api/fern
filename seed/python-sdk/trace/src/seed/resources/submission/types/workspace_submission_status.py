# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from .error_info import ErrorInfo
from .running_submission_state import RunningSubmissionState
from .workspace_run_details import WorkspaceRunDetails

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class WorkspaceSubmissionStatus_Stopped(pydantic.BaseModel):
    type: typing.Literal["stopped"]

    class Config:
        frozen = True
        smart_union = True


class WorkspaceSubmissionStatus_Errored(pydantic.BaseModel):
    type: typing.Literal["errored"]
    value: ErrorInfo

    class Config:
        frozen = True
        smart_union = True


class WorkspaceSubmissionStatus_Running(pydantic.BaseModel):
    type: typing.Literal["running"]
    value: RunningSubmissionState

    class Config:
        frozen = True
        smart_union = True


class WorkspaceSubmissionStatus_Ran(WorkspaceRunDetails):
    type: typing.Literal["ran"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class WorkspaceSubmissionStatus_Traced(WorkspaceRunDetails):
    type: typing.Literal["traced"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


WorkspaceSubmissionStatus = typing.Union[
    WorkspaceSubmissionStatus_Stopped,
    WorkspaceSubmissionStatus_Errored,
    WorkspaceSubmissionStatus_Running,
    WorkspaceSubmissionStatus_Ran,
    WorkspaceSubmissionStatus_Traced,
]
