# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from .binary_tree_node_value import BinaryTreeNodeValue
from .binary_tree_value import BinaryTreeValue
from .doubly_linked_list_node_value import DoublyLinkedListNodeValue
from .doubly_linked_list_value import DoublyLinkedListValue
from .node_id import NodeId
from .singly_linked_list_node_value import SinglyLinkedListNodeValue
from .singly_linked_list_value import SinglyLinkedListValue

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class VariableValue_IntegerValue(pydantic.BaseModel):
    type: typing.Literal["integerValue"]
    value: int

    class Config:
        frozen = True
        smart_union = True


class VariableValue_BooleanValue(pydantic.BaseModel):
    type: typing.Literal["booleanValue"]
    value: bool

    class Config:
        frozen = True
        smart_union = True


class VariableValue_DoubleValue(pydantic.BaseModel):
    type: typing.Literal["doubleValue"]
    value: float

    class Config:
        frozen = True
        smart_union = True


class VariableValue_StringValue(pydantic.BaseModel):
    type: typing.Literal["stringValue"]
    value: str

    class Config:
        frozen = True
        smart_union = True


class VariableValue_CharValue(pydantic.BaseModel):
    type: typing.Literal["charValue"]
    value: str

    class Config:
        frozen = True
        smart_union = True


class VariableValue_MapValue(MapValue):
    type: typing.Literal["mapValue"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class VariableValue_ListValue(pydantic.BaseModel):
    type: typing.Literal["listValue"]
    value: typing.List[VariableValue]

    class Config:
        frozen = True
        smart_union = True


class VariableValue_BinaryTreeValue(BinaryTreeValue):
    type: typing.Literal["binaryTreeValue"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class VariableValue_SinglyLinkedListValue(SinglyLinkedListValue):
    type: typing.Literal["singlyLinkedListValue"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class VariableValue_DoublyLinkedListValue(DoublyLinkedListValue):
    type: typing.Literal["doublyLinkedListValue"]

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True


class VariableValue_NullValue(pydantic.BaseModel):
    type: typing.Literal["nullValue"]

    class Config:
        frozen = True
        smart_union = True


VariableValue = typing.Union[
    VariableValue_IntegerValue,
    VariableValue_BooleanValue,
    VariableValue_DoubleValue,
    VariableValue_StringValue,
    VariableValue_CharValue,
    VariableValue_MapValue,
    VariableValue_ListValue,
    VariableValue_BinaryTreeValue,
    VariableValue_SinglyLinkedListValue,
    VariableValue_DoublyLinkedListValue,
    VariableValue_NullValue,
]
from .key_value_pair import KeyValuePair  # noqa: E402
from .map_value import MapValue  # noqa: E402

VariableValue_MapValue.update_forward_refs(KeyValuePair=KeyValuePair, MapValue=MapValue, VariableValue=VariableValue)
VariableValue_ListValue.update_forward_refs(KeyValuePair=KeyValuePair, MapValue=MapValue, VariableValue=VariableValue)
