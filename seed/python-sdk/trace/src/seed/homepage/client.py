# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawHomepageClient
from ..core.request_options import RequestOptions
from ..commons.types.problem_id import ProblemId
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawHomepageClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class HomepageClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawHomepageClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawHomepageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawHomepageClient
        """
        return self._raw_client

    def get_homepage_problems(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ProblemId]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProblemId]

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.homepage.get_homepage_problems()
        """
        response = self._raw_client.get_homepage_problems(request_options=request_options)
        return response.data

    def set_homepage_problems(
        self, *, request: typing.Sequence[ProblemId], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request : typing.Sequence[ProblemId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.homepage.set_homepage_problems(
            request=["string", "string"],
        )
        """
        response = self._raw_client.set_homepage_problems(request=request, request_options=request_options)
        return response.data


class AsyncHomepageClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawHomepageClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawHomepageClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawHomepageClient
        """
        return self._raw_client

    async def get_homepage_problems(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ProblemId]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProblemId]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.homepage.get_homepage_problems()


        asyncio.run(main())
        """
        response = await self._raw_client.get_homepage_problems(request_options=request_options)
        return response.data

    async def set_homepage_problems(
        self, *, request: typing.Sequence[ProblemId], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request : typing.Sequence[ProblemId]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.homepage.set_homepage_problems(
                request=["string", "string"],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.set_homepage_problems(request=request, request_options=request_options)
        return response.data
