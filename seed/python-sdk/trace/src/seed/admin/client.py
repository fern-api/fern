# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawAdminClient
from ..submission.types.submission_id import SubmissionId
from ..submission.types.test_submission_status import TestSubmissionStatus
from ..core.request_options import RequestOptions
import datetime as dt
from ..submission.types.test_submission_update_info import TestSubmissionUpdateInfo
from ..submission.types.workspace_submission_status import WorkspaceSubmissionStatus
from ..submission.types.workspace_submission_update_info import WorkspaceSubmissionUpdateInfo
from ..submission.types.test_case_result_with_stdout import TestCaseResultWithStdout
from ..submission.types.trace_response import TraceResponse
from ..v_2.problem.types.test_case_id import TestCaseId
from ..submission.types.trace_response_v_2 import TraceResponseV2
from ..submission.types.workspace_run_details import WorkspaceRunDetails
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawAdminClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAdminClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAdminClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAdminClient
        """
        return self._raw_client

    def update_test_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : TestSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from seed import SeedTrace
        from seed.submission import TestSubmissionStatus

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.update_test_submission_status(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=TestSubmissionStatus(),
        )
        """
        response = self._raw_client.update_test_submission_status(
            submission_id, request=request, request_options=request_options
        )
        return response.data

    def send_test_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: TestSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : TestSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import datetime
        import uuid

        from seed import SeedTrace
        from seed.submission import TestSubmissionUpdateInfo_Running

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.send_test_submission_update(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            update_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            update_info=TestSubmissionUpdateInfo_Running(value="QUEUEING_SUBMISSION"),
        )
        """
        response = self._raw_client.send_test_submission_update(
            submission_id, update_time=update_time, update_info=update_info, request_options=request_options
        )
        return response.data

    def update_workspace_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : WorkspaceSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from seed import SeedTrace
        from seed.submission import WorkspaceSubmissionStatus

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.update_workspace_submission_status(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=WorkspaceSubmissionStatus(),
        )
        """
        response = self._raw_client.update_workspace_submission_status(
            submission_id, request=request, request_options=request_options
        )
        return response.data

    def send_workspace_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: WorkspaceSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : WorkspaceSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import datetime
        import uuid

        from seed import SeedTrace
        from seed.submission import WorkspaceSubmissionUpdateInfo_Running

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.send_workspace_submission_update(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            update_time=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            update_info=WorkspaceSubmissionUpdateInfo_Running(
                value="QUEUEING_SUBMISSION"
            ),
        )
        """
        response = self._raw_client.send_workspace_submission_update(
            submission_id, update_time=update_time, update_info=update_info, request_options=request_options
        )
        return response.data

    def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : str

        result : TestCaseResultWithStdout

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from seed import SeedTrace
        from seed.commons import (
            DebugVariableValue_IntegerValue,
            VariableValue_IntegerValue,
        )
        from seed.submission import (
            ActualResult_Value,
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TestCaseResult,
            TestCaseResultWithStdout,
            TraceResponse,
        )

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_test_case(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            test_case_id="testCaseId",
            result=TestCaseResultWithStdout(
                result=TestCaseResult(
                    expected_result=VariableValue_IntegerValue(value=1),
                    actual_result=ActualResult_Value(
                        value=VariableValue_IntegerValue(value=1)
                    ),
                    passed=True,
                ),
                stdout="stdout",
            ),
            trace_responses=[
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
            ],
        )
        """
        response = self._raw_client.store_traced_test_case(
            submission_id, test_case_id, result=result, trace_responses=trace_responses, request_options=request_options
        )
        return response.data

    def store_traced_test_case_v_2(
        self,
        submission_id: SubmissionId,
        test_case_id: TestCaseId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : TestCaseId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from seed import SeedTrace
        from seed.commons import DebugVariableValue_IntegerValue
        from seed.submission import (
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_test_case_v_2(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            test_case_id="testCaseId",
            request=[
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(
                        filename="filename",
                        directory="directory",
                    ),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(
                        filename="filename",
                        directory="directory",
                    ),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
            ],
        )
        """
        response = self._raw_client.store_traced_test_case_v_2(
            submission_id, test_case_id, request=request, request_options=request_options
        )
        return response.data

    def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        workspace_run_details : WorkspaceRunDetails

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from seed import SeedTrace
        from seed.commons import DebugVariableValue_IntegerValue
        from seed.submission import (
            ExceptionInfo,
            ExceptionV2_Generic,
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TraceResponse,
            WorkspaceRunDetails,
        )

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_workspace(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            workspace_run_details=WorkspaceRunDetails(
                exception_v_2=ExceptionV2_Generic(
                    exception_type="exceptionType",
                    exception_message="exceptionMessage",
                    exception_stacktrace="exceptionStacktrace",
                ),
                exception=ExceptionInfo(
                    exception_type="exceptionType",
                    exception_message="exceptionMessage",
                    exception_stacktrace="exceptionStacktrace",
                ),
                stdout="stdout",
            ),
            trace_responses=[
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
                TraceResponse(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
            ],
        )
        """
        response = self._raw_client.store_traced_workspace(
            submission_id,
            workspace_run_details=workspace_run_details,
            trace_responses=trace_responses,
            request_options=request_options,
        )
        return response.data

    def store_traced_workspace_v_2(
        self,
        submission_id: SubmissionId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import uuid

        from seed import SeedTrace
        from seed.commons import DebugVariableValue_IntegerValue
        from seed.submission import (
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.admin.store_traced_workspace_v_2(
            submission_id=uuid.UUID(
                "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ),
            request=[
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(
                        filename="filename",
                        directory="directory",
                    ),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
                TraceResponseV2(
                    submission_id=uuid.UUID(
                        "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                    ),
                    line_number=1,
                    file=TracedFile(
                        filename="filename",
                        directory="directory",
                    ),
                    return_value=DebugVariableValue_IntegerValue(value=1),
                    expression_location=ExpressionLocation(
                        start=1,
                        offset=1,
                    ),
                    stack=StackInformation(
                        num_stack_frames=1,
                        top_stack_frame=StackFrame(
                            method_name="methodName",
                            line_number=1,
                            scopes=[
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                                Scope(
                                    variables={
                                        "variables": DebugVariableValue_IntegerValue(
                                            value=1
                                        )
                                    },
                                ),
                            ],
                        ),
                    ),
                    stdout="stdout",
                ),
            ],
        )
        """
        response = self._raw_client.store_traced_workspace_v_2(
            submission_id, request=request, request_options=request_options
        )
        return response.data


class AsyncAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAdminClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAdminClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAdminClient
        """
        return self._raw_client

    async def update_test_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : TestSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from seed import AsyncSeedTrace
        from seed.submission import TestSubmissionStatus

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.update_test_submission_status(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                request=TestSubmissionStatus(),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update_test_submission_status(
            submission_id, request=request, request_options=request_options
        )
        return response.data

    async def send_test_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: TestSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : TestSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import datetime
        import uuid

        from seed import AsyncSeedTrace
        from seed.submission import TestSubmissionUpdateInfo_Running

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.send_test_submission_update(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                update_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                update_info=TestSubmissionUpdateInfo_Running(
                    value="QUEUEING_SUBMISSION"
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.send_test_submission_update(
            submission_id, update_time=update_time, update_info=update_info, request_options=request_options
        )
        return response.data

    async def update_workspace_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : WorkspaceSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from seed import AsyncSeedTrace
        from seed.submission import WorkspaceSubmissionStatus

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.update_workspace_submission_status(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                request=WorkspaceSubmissionStatus(),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update_workspace_submission_status(
            submission_id, request=request, request_options=request_options
        )
        return response.data

    async def send_workspace_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: WorkspaceSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : WorkspaceSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import datetime
        import uuid

        from seed import AsyncSeedTrace
        from seed.submission import WorkspaceSubmissionUpdateInfo_Running

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.send_workspace_submission_update(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                update_time=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                update_info=WorkspaceSubmissionUpdateInfo_Running(
                    value="QUEUEING_SUBMISSION"
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.send_workspace_submission_update(
            submission_id, update_time=update_time, update_info=update_info, request_options=request_options
        )
        return response.data

    async def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : str

        result : TestCaseResultWithStdout

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from seed import AsyncSeedTrace
        from seed.commons import (
            DebugVariableValue_IntegerValue,
            VariableValue_IntegerValue,
        )
        from seed.submission import (
            ActualResult_Value,
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TestCaseResult,
            TestCaseResultWithStdout,
            TraceResponse,
        )

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.store_traced_test_case(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                test_case_id="testCaseId",
                result=TestCaseResultWithStdout(
                    result=TestCaseResult(
                        expected_result=VariableValue_IntegerValue(value=1),
                        actual_result=ActualResult_Value(
                            value=VariableValue_IntegerValue(value=1)
                        ),
                        passed=True,
                    ),
                    stdout="stdout",
                ),
                trace_responses=[
                    TraceResponse(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                    TraceResponse(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.store_traced_test_case(
            submission_id, test_case_id, result=result, trace_responses=trace_responses, request_options=request_options
        )
        return response.data

    async def store_traced_test_case_v_2(
        self,
        submission_id: SubmissionId,
        test_case_id: TestCaseId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : TestCaseId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from seed import AsyncSeedTrace
        from seed.commons import DebugVariableValue_IntegerValue
        from seed.submission import (
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.store_traced_test_case_v_2(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                test_case_id="testCaseId",
                request=[
                    TraceResponseV2(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        file=TracedFile(
                            filename="filename",
                            directory="directory",
                        ),
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                    TraceResponseV2(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        file=TracedFile(
                            filename="filename",
                            directory="directory",
                        ),
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.store_traced_test_case_v_2(
            submission_id, test_case_id, request=request, request_options=request_options
        )
        return response.data

    async def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        workspace_run_details : WorkspaceRunDetails

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from seed import AsyncSeedTrace
        from seed.commons import DebugVariableValue_IntegerValue
        from seed.submission import (
            ExceptionInfo,
            ExceptionV2_Generic,
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TraceResponse,
            WorkspaceRunDetails,
        )

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.store_traced_workspace(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                workspace_run_details=WorkspaceRunDetails(
                    exception_v_2=ExceptionV2_Generic(
                        exception_type="exceptionType",
                        exception_message="exceptionMessage",
                        exception_stacktrace="exceptionStacktrace",
                    ),
                    exception=ExceptionInfo(
                        exception_type="exceptionType",
                        exception_message="exceptionMessage",
                        exception_stacktrace="exceptionStacktrace",
                    ),
                    stdout="stdout",
                ),
                trace_responses=[
                    TraceResponse(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                    TraceResponse(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.store_traced_workspace(
            submission_id,
            workspace_run_details=workspace_run_details,
            trace_responses=trace_responses,
            request_options=request_options,
        )
        return response.data

    async def store_traced_workspace_v_2(
        self,
        submission_id: SubmissionId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio
        import uuid

        from seed import AsyncSeedTrace
        from seed.commons import DebugVariableValue_IntegerValue
        from seed.submission import (
            ExpressionLocation,
            Scope,
            StackFrame,
            StackInformation,
            TracedFile,
            TraceResponseV2,
        )

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.admin.store_traced_workspace_v_2(
                submission_id=uuid.UUID(
                    "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                ),
                request=[
                    TraceResponseV2(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        file=TracedFile(
                            filename="filename",
                            directory="directory",
                        ),
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                    TraceResponseV2(
                        submission_id=uuid.UUID(
                            "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                        ),
                        line_number=1,
                        file=TracedFile(
                            filename="filename",
                            directory="directory",
                        ),
                        return_value=DebugVariableValue_IntegerValue(value=1),
                        expression_location=ExpressionLocation(
                            start=1,
                            offset=1,
                        ),
                        stack=StackInformation(
                            num_stack_frames=1,
                            top_stack_frame=StackFrame(
                                method_name="methodName",
                                line_number=1,
                                scopes=[
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                    Scope(
                                        variables={
                                            "variables": DebugVariableValue_IntegerValue(
                                                value=1
                                            )
                                        },
                                    ),
                                ],
                            ),
                        ),
                        stdout="stdout",
                    ),
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.store_traced_workspace_v_2(
            submission_id, request=request, request_options=request_options
        )
        return response.data
