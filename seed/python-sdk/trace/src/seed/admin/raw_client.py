# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..submission.types.submission_id import SubmissionId
from ..submission.types.test_case_result_with_stdout import TestCaseResultWithStdout
from ..submission.types.test_submission_status import TestSubmissionStatus
from ..submission.types.test_submission_update_info import TestSubmissionUpdateInfo
from ..submission.types.trace_response import TraceResponse
from ..submission.types.trace_response_v_2 import TraceResponseV2
from ..submission.types.workspace_run_details import WorkspaceRunDetails
from ..submission.types.workspace_submission_status import WorkspaceSubmissionStatus
from ..submission.types.workspace_submission_update_info import WorkspaceSubmissionUpdateInfo
from ..v_2.problem.types.test_case_id import TestCaseId

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawAdminClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def update_test_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : TestSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-test-submission-status/{jsonable_encoder(submission_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=TestSubmissionStatus, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def send_test_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: TestSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : TestSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-test-submission-status-v2/{jsonable_encoder(submission_id)}",
            method="POST",
            json={
                "updateTime": update_time,
                "updateInfo": convert_and_respect_annotation_metadata(
                    object_=update_info, annotation=TestSubmissionUpdateInfo, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_workspace_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : WorkspaceSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-submission-status/{jsonable_encoder(submission_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=WorkspaceSubmissionStatus, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def send_workspace_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: WorkspaceSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : WorkspaceSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-submission-status-v2/{jsonable_encoder(submission_id)}",
            method="POST",
            json={
                "updateTime": update_time,
                "updateInfo": convert_and_respect_annotation_metadata(
                    object_=update_info, annotation=WorkspaceSubmissionUpdateInfo, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : str

        result : TestCaseResultWithStdout

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-test-trace/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            method="POST",
            json={
                "result": convert_and_respect_annotation_metadata(
                    object_=result, annotation=TestCaseResultWithStdout, direction="write"
                ),
                "traceResponses": convert_and_respect_annotation_metadata(
                    object_=trace_responses, annotation=typing.Sequence[TraceResponse], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def store_traced_test_case_v_2(
        self,
        submission_id: SubmissionId,
        test_case_id: TestCaseId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : TestCaseId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-test-trace-v2/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[TraceResponseV2], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        workspace_run_details : WorkspaceRunDetails

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-trace/submission/{jsonable_encoder(submission_id)}",
            method="POST",
            json={
                "workspaceRunDetails": convert_and_respect_annotation_metadata(
                    object_=workspace_run_details, annotation=WorkspaceRunDetails, direction="write"
                ),
                "traceResponses": convert_and_respect_annotation_metadata(
                    object_=trace_responses, annotation=typing.Sequence[TraceResponse], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def store_traced_workspace_v_2(
        self,
        submission_id: SubmissionId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-trace-v2/submission/{jsonable_encoder(submission_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[TraceResponseV2], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return HttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawAdminClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def update_test_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: TestSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : TestSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-test-submission-status/{jsonable_encoder(submission_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=TestSubmissionStatus, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def send_test_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: TestSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : TestSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-test-submission-status-v2/{jsonable_encoder(submission_id)}",
            method="POST",
            json={
                "updateTime": update_time,
                "updateInfo": convert_and_respect_annotation_metadata(
                    object_=update_info, annotation=TestSubmissionUpdateInfo, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_workspace_submission_status(
        self,
        submission_id: SubmissionId,
        *,
        request: WorkspaceSubmissionStatus,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : WorkspaceSubmissionStatus

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-submission-status/{jsonable_encoder(submission_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=WorkspaceSubmissionStatus, direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def send_workspace_submission_update(
        self,
        submission_id: SubmissionId,
        *,
        update_time: dt.datetime,
        update_info: WorkspaceSubmissionUpdateInfo,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        update_time : dt.datetime

        update_info : WorkspaceSubmissionUpdateInfo

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-submission-status-v2/{jsonable_encoder(submission_id)}",
            method="POST",
            json={
                "updateTime": update_time,
                "updateInfo": convert_and_respect_annotation_metadata(
                    object_=update_info, annotation=WorkspaceSubmissionUpdateInfo, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def store_traced_test_case(
        self,
        submission_id: SubmissionId,
        test_case_id: str,
        *,
        result: TestCaseResultWithStdout,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : str

        result : TestCaseResultWithStdout

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-test-trace/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            method="POST",
            json={
                "result": convert_and_respect_annotation_metadata(
                    object_=result, annotation=TestCaseResultWithStdout, direction="write"
                ),
                "traceResponses": convert_and_respect_annotation_metadata(
                    object_=trace_responses, annotation=typing.Sequence[TraceResponse], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def store_traced_test_case_v_2(
        self,
        submission_id: SubmissionId,
        test_case_id: TestCaseId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        test_case_id : TestCaseId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-test-trace-v2/submission/{jsonable_encoder(submission_id)}/testCase/{jsonable_encoder(test_case_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[TraceResponseV2], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def store_traced_workspace(
        self,
        submission_id: SubmissionId,
        *,
        workspace_run_details: WorkspaceRunDetails,
        trace_responses: typing.Sequence[TraceResponse],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        workspace_run_details : WorkspaceRunDetails

        trace_responses : typing.Sequence[TraceResponse]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-trace/submission/{jsonable_encoder(submission_id)}",
            method="POST",
            json={
                "workspaceRunDetails": convert_and_respect_annotation_metadata(
                    object_=workspace_run_details, annotation=WorkspaceRunDetails, direction="write"
                ),
                "traceResponses": convert_and_respect_annotation_metadata(
                    object_=trace_responses, annotation=typing.Sequence[TraceResponse], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def store_traced_workspace_v_2(
        self,
        submission_id: SubmissionId,
        *,
        request: typing.Sequence[TraceResponseV2],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        submission_id : SubmissionId

        request : typing.Sequence[TraceResponseV2]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"admin/store-workspace-trace-v2/submission/{jsonable_encoder(submission_id)}",
            method="POST",
            json=convert_and_respect_annotation_metadata(
                object_=request, annotation=typing.Sequence[TraceResponseV2], direction="write"
            ),
            request_options=request_options,
            omit=OMIT,
        )
        if 200 <= _response.status_code < 300:
            return AsyncHttpResponse(response=_response, data=None)
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
