# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawSyspropClient
from ..commons.types.language import Language
import typing
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawSyspropClient


class SyspropClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSyspropClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSyspropClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSyspropClient
        """
        return self._raw_client

    def set_num_warm_instances(
        self, language: Language, num_warm_instances: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        language : Language

        num_warm_instances : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.sysprop.set_num_warm_instances(
            language="JAVA",
            num_warm_instances=1,
        )
        """
        response = self._raw_client.set_num_warm_instances(
            language, num_warm_instances, request_options=request_options
        )
        return response.data

    def get_num_warm_instances(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[Language, int]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[Language, int]

        Examples
        --------
        from seed import SeedTrace

        client = SeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )
        client.sysprop.get_num_warm_instances()
        """
        response = self._raw_client.get_num_warm_instances(request_options=request_options)
        return response.data


class AsyncSyspropClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSyspropClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSyspropClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSyspropClient
        """
        return self._raw_client

    async def set_num_warm_instances(
        self, language: Language, num_warm_instances: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        language : Language

        num_warm_instances : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sysprop.set_num_warm_instances(
                language="JAVA",
                num_warm_instances=1,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.set_num_warm_instances(
            language, num_warm_instances, request_options=request_options
        )
        return response.data

    async def get_num_warm_instances(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[Language, int]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[Language, int]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedTrace

        client = AsyncSeedTrace(
            x_random_header="YOUR_X_RANDOM_HEADER",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.sysprop.get_num_warm_instances()


        asyncio.run(main())
        """
        response = await self._raw_client.get_num_warm_instances(request_options=request_options)
        return response.data
