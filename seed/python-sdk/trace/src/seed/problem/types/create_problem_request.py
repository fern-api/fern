# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ...core.serialization import FieldMetadata
from .problem_description import ProblemDescription
import typing
from ...commons.types.language import Language
from .problem_files import ProblemFiles
from .variable_type_and_name import VariableTypeAndName
from ...commons.types.variable_type import VariableType
from ...commons.types.test_case_with_expected_result import TestCaseWithExpectedResult
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class CreateProblemRequest(UniversalBaseModel):
    problem_name: typing_extensions.Annotated[str, FieldMetadata(alias="problemName")]
    problem_description: typing_extensions.Annotated[ProblemDescription, FieldMetadata(alias="problemDescription")]
    files: typing.Dict[Language, ProblemFiles]
    input_params: typing_extensions.Annotated[typing.List[VariableTypeAndName], FieldMetadata(alias="inputParams")]
    output_type: typing_extensions.Annotated[VariableType, FieldMetadata(alias="outputType")]
    testcases: typing.List[TestCaseWithExpectedResult]
    method_name: typing_extensions.Annotated[str, FieldMetadata(alias="methodName")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
