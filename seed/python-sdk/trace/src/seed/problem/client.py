# This file was auto-generated by Fern from our API Definition.

import typing

from ..commons.types.language import Language
from ..commons.types.problem_id import ProblemId
from ..commons.types.test_case_with_expected_result import TestCaseWithExpectedResult
from ..commons.types.variable_type import VariableType
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawProblemClient, RawProblemClient
from .types.create_problem_response import CreateProblemResponse
from .types.get_default_starter_files_response import GetDefaultStarterFilesResponse
from .types.problem_description import ProblemDescription
from .types.problem_files import ProblemFiles
from .types.update_problem_response import UpdateProblemResponse
from .types.variable_type_and_name import VariableTypeAndName

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProblemClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawProblemClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawProblemClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawProblemClient
        """
        return self._raw_client

    def create_problem(
        self,
        *,
        problem_name: str,
        problem_description: ProblemDescription,
        files: typing.Dict[Language, ProblemFiles],
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        testcases: typing.Sequence[TestCaseWithExpectedResult],
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateProblemResponse:
        """
        Creates a problem

        Parameters
        ----------
        problem_name : str

        problem_description : ProblemDescription

        files : typing.Dict[Language, ProblemFiles]

        input_params : typing.Sequence[VariableTypeAndName]

        output_type : VariableType

        testcases : typing.Sequence[TestCaseWithExpectedResult]

        method_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateProblemResponse

        Examples
        --------
        from seed import SeedTrace
        from seed.problem import ProblemDescription
        from seed.problem import ProblemDescriptionBoard_Html
        from seed.problem import ProblemFiles
        from seed.commons import FileInfo
        from seed.problem import VariableTypeAndName
        from seed.commons import VariableType
        from seed.commons import TestCaseWithExpectedResult
        from seed.commons import TestCase
        from seed.commons import VariableValue_IntegerValue
        client = SeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        client.problem.create_problem(problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={"JAVA": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )
        """
        _response = self._raw_client.create_problem(
            problem_name=problem_name,
            problem_description=problem_description,
            files=files,
            input_params=input_params,
            output_type=output_type,
            testcases=testcases,
            method_name=method_name,
            request_options=request_options,
        )
        return _response.data

    def update_problem(
        self,
        problem_id: ProblemId,
        *,
        problem_name: str,
        problem_description: ProblemDescription,
        files: typing.Dict[Language, ProblemFiles],
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        testcases: typing.Sequence[TestCaseWithExpectedResult],
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateProblemResponse:
        """
        Updates a problem

        Parameters
        ----------
        problem_id : ProblemId

        problem_name : str

        problem_description : ProblemDescription

        files : typing.Dict[Language, ProblemFiles]

        input_params : typing.Sequence[VariableTypeAndName]

        output_type : VariableType

        testcases : typing.Sequence[TestCaseWithExpectedResult]

        method_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateProblemResponse

        Examples
        --------
        from seed import SeedTrace
        from seed.problem import ProblemDescription
        from seed.problem import ProblemDescriptionBoard_Html
        from seed.problem import ProblemFiles
        from seed.commons import FileInfo
        from seed.problem import VariableTypeAndName
        from seed.commons import VariableType
        from seed.commons import TestCaseWithExpectedResult
        from seed.commons import TestCase
        from seed.commons import VariableValue_IntegerValue
        client = SeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        client.problem.update_problem(problem_id='problemId', problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={"JAVA": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )
        """
        _response = self._raw_client.update_problem(
            problem_id,
            problem_name=problem_name,
            problem_description=problem_description,
            files=files,
            input_params=input_params,
            output_type=output_type,
            testcases=testcases,
            method_name=method_name,
            request_options=request_options,
        )
        return _response.data

    def delete_problem(self, problem_id: ProblemId, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Soft deletes a problem

        Parameters
        ----------
        problem_id : ProblemId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedTrace
        client = SeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        client.problem.delete_problem(problem_id='problemId', )
        """
        _response = self._raw_client.delete_problem(problem_id, request_options=request_options)
        return _response.data

    def get_default_starter_files(
        self,
        *,
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDefaultStarterFilesResponse:
        """
        Returns default starter files for problem

        Parameters
        ----------
        input_params : typing.Sequence[VariableTypeAndName]

        output_type : VariableType

        method_name : str
            The name of the `method` that the student has to complete.
            The method name cannot include the following characters:
              - Greater Than `>`
              - Less Than `<``
              - Equals `=`
              - Period `.`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDefaultStarterFilesResponse

        Examples
        --------
        from seed import SeedTrace
        from seed.problem import VariableTypeAndName
        from seed.commons import VariableType
        client = SeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        client.problem.get_default_starter_files(input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), method_name='methodName', )
        """
        _response = self._raw_client.get_default_starter_files(
            input_params=input_params, output_type=output_type, method_name=method_name, request_options=request_options
        )
        return _response.data


class AsyncProblemClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawProblemClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawProblemClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawProblemClient
        """
        return self._raw_client

    async def create_problem(
        self,
        *,
        problem_name: str,
        problem_description: ProblemDescription,
        files: typing.Dict[Language, ProblemFiles],
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        testcases: typing.Sequence[TestCaseWithExpectedResult],
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateProblemResponse:
        """
        Creates a problem

        Parameters
        ----------
        problem_name : str

        problem_description : ProblemDescription

        files : typing.Dict[Language, ProblemFiles]

        input_params : typing.Sequence[VariableTypeAndName]

        output_type : VariableType

        testcases : typing.Sequence[TestCaseWithExpectedResult]

        method_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateProblemResponse

        Examples
        --------
        from seed import AsyncSeedTrace
        from seed.problem import ProblemDescription
        from seed.problem import ProblemDescriptionBoard_Html
        from seed.problem import ProblemFiles
        from seed.commons import FileInfo
        from seed.problem import VariableTypeAndName
        from seed.commons import VariableType
        from seed.commons import TestCaseWithExpectedResult
        from seed.commons import TestCase
        from seed.commons import VariableValue_IntegerValue
        import asyncio
        client = AsyncSeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        async def main() -> None:
            await client.problem.create_problem(problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={"JAVA": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_problem(
            problem_name=problem_name,
            problem_description=problem_description,
            files=files,
            input_params=input_params,
            output_type=output_type,
            testcases=testcases,
            method_name=method_name,
            request_options=request_options,
        )
        return _response.data

    async def update_problem(
        self,
        problem_id: ProblemId,
        *,
        problem_name: str,
        problem_description: ProblemDescription,
        files: typing.Dict[Language, ProblemFiles],
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        testcases: typing.Sequence[TestCaseWithExpectedResult],
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateProblemResponse:
        """
        Updates a problem

        Parameters
        ----------
        problem_id : ProblemId

        problem_name : str

        problem_description : ProblemDescription

        files : typing.Dict[Language, ProblemFiles]

        input_params : typing.Sequence[VariableTypeAndName]

        output_type : VariableType

        testcases : typing.Sequence[TestCaseWithExpectedResult]

        method_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateProblemResponse

        Examples
        --------
        from seed import AsyncSeedTrace
        from seed.problem import ProblemDescription
        from seed.problem import ProblemDescriptionBoard_Html
        from seed.problem import ProblemFiles
        from seed.commons import FileInfo
        from seed.problem import VariableTypeAndName
        from seed.commons import VariableType
        from seed.commons import TestCaseWithExpectedResult
        from seed.commons import TestCase
        from seed.commons import VariableValue_IntegerValue
        import asyncio
        client = AsyncSeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        async def main() -> None:
            await client.problem.update_problem(problem_id='problemId', problem_name='problemName', problem_description=ProblemDescription(boards=[ProblemDescriptionBoard_Html(value='boards'), ProblemDescriptionBoard_Html(value='boards')], ), files={"JAVA": ProblemFiles(solution_file=FileInfo(filename='filename', contents='contents', ), read_only_files=[FileInfo(filename='filename', contents='contents', ), FileInfo(filename='filename', contents='contents', )], )}, input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), testcases=[TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), ), TestCaseWithExpectedResult(test_case=TestCase(id='id', params=[VariableValue_IntegerValue(value=1), VariableValue_IntegerValue(value=1)], ), expected_result=VariableValue_IntegerValue(value=1), )], method_name='methodName', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_problem(
            problem_id,
            problem_name=problem_name,
            problem_description=problem_description,
            files=files,
            input_params=input_params,
            output_type=output_type,
            testcases=testcases,
            method_name=method_name,
            request_options=request_options,
        )
        return _response.data

    async def delete_problem(
        self, problem_id: ProblemId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Soft deletes a problem

        Parameters
        ----------
        problem_id : ProblemId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedTrace
        import asyncio
        client = AsyncSeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        async def main() -> None:
            await client.problem.delete_problem(problem_id='problemId', )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete_problem(problem_id, request_options=request_options)
        return _response.data

    async def get_default_starter_files(
        self,
        *,
        input_params: typing.Sequence[VariableTypeAndName],
        output_type: VariableType,
        method_name: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> GetDefaultStarterFilesResponse:
        """
        Returns default starter files for problem

        Parameters
        ----------
        input_params : typing.Sequence[VariableTypeAndName]

        output_type : VariableType

        method_name : str
            The name of the `method` that the student has to complete.
            The method name cannot include the following characters:
              - Greater Than `>`
              - Less Than `<``
              - Equals `=`
              - Period `.`

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetDefaultStarterFilesResponse

        Examples
        --------
        from seed import AsyncSeedTrace
        from seed.problem import VariableTypeAndName
        from seed.commons import VariableType
        import asyncio
        client = AsyncSeedTrace(x_random_header="YOUR_X_RANDOM_HEADER", token="YOUR_TOKEN", )
        async def main() -> None:
            await client.problem.get_default_starter_files(input_params=[VariableTypeAndName(variable_type=VariableType(), name='name', ), VariableTypeAndName(variable_type=VariableType(), name='name', )], output_type=VariableType(), method_name='methodName', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_default_starter_files(
            input_params=input_params, output_type=output_type, method_name=method_name, request_options=request_options
        )
        return _response.data
