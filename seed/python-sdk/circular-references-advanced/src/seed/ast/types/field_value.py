# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ...core.pydantic_utilities import UniversalBaseModel
from .primitive_value import PrimitiveValue
import typing
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from ...core.pydantic_utilities import update_forward_refs


class FieldValue_PrimitiveValue(UniversalBaseModel):
    value: PrimitiveValue
    type: typing.Literal["primitive_value"] = "primitive_value"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


class FieldValue_ObjectValue(UniversalBaseModel):
    type: typing.Literal["object_value"] = "object_value"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FieldValue_ContainerValue(UniversalBaseModel):
    value: "ContainerValue"
    type: typing.Literal["container_value"] = "container_value"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True


FieldValue = typing.Union[FieldValue_PrimitiveValue, FieldValue_ObjectValue, FieldValue_ContainerValue]
from .container_value import ContainerValue  # noqa: E402, F401

update_forward_refs(FieldValue_ContainerValue)
