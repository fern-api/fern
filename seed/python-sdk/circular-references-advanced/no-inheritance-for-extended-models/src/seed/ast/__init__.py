# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Acai,
        Animal,
        Berry,
        BranchNode,
        Cat,
        ContainerValue,
        ContainerValue_List,
        ContainerValue_Optional,
        Dog,
        FieldName,
        FieldValue,
        FieldValue_ContainerValue,
        FieldValue_ObjectValue,
        FieldValue_PrimitiveValue,
        Fig,
        Fruit,
        LeafNode,
        Node,
        NodesWrapper,
        ObjectFieldValue,
        ObjectValue,
        PrimitiveValue,
    )
_dynamic_imports: typing.Dict[str, str] = {
    "Acai": ".types",
    "Animal": ".types",
    "Berry": ".types",
    "BranchNode": ".types",
    "Cat": ".types",
    "ContainerValue": ".types",
    "ContainerValue_List": ".types",
    "ContainerValue_Optional": ".types",
    "Dog": ".types",
    "FieldName": ".types",
    "FieldValue": ".types",
    "FieldValue_ContainerValue": ".types",
    "FieldValue_ObjectValue": ".types",
    "FieldValue_PrimitiveValue": ".types",
    "Fig": ".types",
    "Fruit": ".types",
    "LeafNode": ".types",
    "Node": ".types",
    "NodesWrapper": ".types",
    "ObjectFieldValue": ".types",
    "ObjectValue": ".types",
    "PrimitiveValue": ".types",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Acai",
    "Animal",
    "Berry",
    "BranchNode",
    "Cat",
    "ContainerValue",
    "ContainerValue_List",
    "ContainerValue_Optional",
    "Dog",
    "FieldName",
    "FieldValue",
    "FieldValue_ContainerValue",
    "FieldValue_ObjectValue",
    "FieldValue_PrimitiveValue",
    "Fig",
    "Fruit",
    "LeafNode",
    "Node",
    "NodesWrapper",
    "ObjectFieldValue",
    "ObjectValue",
    "PrimitiveValue",
]
