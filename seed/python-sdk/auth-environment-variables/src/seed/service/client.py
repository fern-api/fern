# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawServiceClient
import typing
from ..core.request_options import RequestOptions
import os
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawServiceClient


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def get_with_api_key(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedAuthEnvironmentVariables

        client = SeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_with_api_key()
        """
        response = self._raw_client.get_with_api_key(
            request_options=request_options,
        )
        return response.data

    def get_with_header(
        self,
        *,
        x_endpoint_header: typing.Optional[str] = os.getenv("MY_HEADER_ENV"),
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        x_endpoint_header : typing.Optional[str]
            Specifies the endpoint key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedAuthEnvironmentVariables

        client = SeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_with_header(
            x_endpoint_header="X-Endpoint-Header",
        )
        """
        response = self._raw_client.get_with_header(
            x_endpoint_header=x_endpoint_header,
            request_options=request_options,
        )
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def get_with_api_key(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedAuthEnvironmentVariables

        client = AsyncSeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_with_api_key()


        asyncio.run(main())
        """
        response = await self._raw_client.get_with_api_key(
            request_options=request_options,
        )
        return response.data

    async def get_with_header(
        self,
        *,
        x_endpoint_header: typing.Optional[str] = os.getenv("MY_HEADER_ENV"),
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        x_endpoint_header : typing.Optional[str]
            Specifies the endpoint key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedAuthEnvironmentVariables

        client = AsyncSeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_with_header(
                x_endpoint_header="X-Endpoint-Header",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_with_header(
            x_endpoint_header=x_endpoint_header,
            request_options=request_options,
        )
        return response.data
