# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..core.request_options import RequestOptions
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
import os
from ..core.client_wrapper import AsyncClientWrapper


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_with_api_key(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedAuthEnvironmentVariables

        client = SeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_with_api_key()
        """
        _response = self._client_wrapper.httpx_client.request(
            "apiKey",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_with_header(
        self,
        *,
        x_endpoint_header: typing.Optional[str] = os.getenv("MY_HEADER_ENV"),
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        x_endpoint_header : typing.Optional[str]
            Specifies the endpoint key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedAuthEnvironmentVariables

        client = SeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_with_header(
            x_endpoint_header="X-Endpoint-Header",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "apiKeyInHeader",
            method="GET",
            headers={
                "X-Endpoint-Header": str(x_endpoint_header) if x_endpoint_header is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_with_api_key(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedAuthEnvironmentVariables

        client = AsyncSeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_with_api_key()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "apiKey",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_with_header(
        self,
        *,
        x_endpoint_header: typing.Optional[str] = os.getenv("MY_HEADER_ENV"),
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        GET request with custom api key

        Parameters
        ----------
        x_endpoint_header : typing.Optional[str]
            Specifies the endpoint key.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedAuthEnvironmentVariables

        client = AsyncSeedAuthEnvironmentVariables(
            x_another_header="YOUR_X_ANOTHER_HEADER",
            api_key="YOUR_API_KEY",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_with_header(
                x_endpoint_header="X-Endpoint-Header",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "apiKeyInHeader",
            method="GET",
            headers={
                "X-Endpoint-Header": str(x_endpoint_header) if x_endpoint_header is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
