# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawServiceClient
from ..core.request_options import RequestOptions
from .types.movie import Movie
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def get_movie(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> Movie:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie(
            request="string",
        )
        """
        response = self._raw_client.get_movie(
            request=request,
            request_options=request_options,
        )
        return response.data

    def get_movie_docs(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie_docs(
            request="string",
        )
        """
        response = self._raw_client.get_movie_docs(
            request=request,
            request_options=request_options,
        )
        return response.data

    def get_movie_name(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie_name(
            request="string",
        )
        """
        response = self._raw_client.get_movie_name(
            request=request,
            request_options=request_options,
        )
        return response.data

    def get_movie_metadata(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, str]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, str]

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie_metadata(
            request="string",
        )
        """
        response = self._raw_client.get_movie_metadata(
            request=request,
            request_options=request_options,
        )
        return response.data

    def get_optional_movie(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Movie]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Movie]

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_optional_movie(
            request="string",
        )
        """
        response = self._raw_client.get_optional_movie(
            request=request,
            request_options=request_options,
        )
        return response.data

    def get_optional_movie_docs(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_optional_movie_docs(
            request="string",
        )
        """
        response = self._raw_client.get_optional_movie_docs(
            request=request,
            request_options=request_options,
        )
        return response.data

    def get_optional_movie_name(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_optional_movie_name(
            request="string",
        )
        """
        response = self._raw_client.get_optional_movie_name(
            request=request,
            request_options=request_options,
        )
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def get_movie(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> Movie:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie(
                request="string",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_movie(
            request=request,
            request_options=request_options,
        )
        return response.data

    async def get_movie_docs(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie_docs(
                request="string",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_movie_docs(
            request=request,
            request_options=request_options,
        )
        return response.data

    async def get_movie_name(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie_name(
                request="string",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_movie_name(
            request=request,
            request_options=request_options,
        )
        return response.data

    async def get_movie_metadata(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, str]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, str]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie_metadata(
                request="string",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_movie_metadata(
            request=request,
            request_options=request_options,
        )
        return response.data

    async def get_optional_movie(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Movie]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Movie]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_optional_movie(
                request="string",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_optional_movie(
            request=request,
            request_options=request_options,
        )
        return response.data

    async def get_optional_movie_docs(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_optional_movie_docs(
                request="string",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_optional_movie_docs(
            request=request,
            request_options=request_options,
        )
        return response.data

    async def get_optional_movie_name(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_optional_movie_name(
                request="string",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_optional_movie_name(
            request=request,
            request_options=request_options,
        )
        return response.data
