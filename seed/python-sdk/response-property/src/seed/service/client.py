# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.movie import Movie
from .types.response import Response
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.string_response import StringResponse
from .types.optional_with_docs import OptionalWithDocs
from ..types.optional_string_response import OptionalStringResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_movie(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> Movie:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    Response,
                    parse_obj_as(
                        type_=Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.data
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_movie_docs(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie_docs(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    Response,
                    parse_obj_as(
                        type_=Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.docs
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_movie_name(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie_name(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    StringResponse,
                    parse_obj_as(
                        type_=StringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.data
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_movie_metadata(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, str]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, str]

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_movie_metadata(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    Response,
                    parse_obj_as(
                        type_=Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.metadata
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_optional_movie(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Movie]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Movie]

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_optional_movie(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    typing.Optional[Response],
                    parse_obj_as(
                        type_=typing.Optional[Response],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.data if _parsed_response is not None else _parsed_response
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_optional_movie_docs(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_optional_movie_docs(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    OptionalWithDocs,
                    parse_obj_as(
                        type_=OptionalWithDocs,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_optional_movie_name(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedResponseProperty

        client = SeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_optional_movie_name(
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    OptionalStringResponse,
                    parse_obj_as(
                        type_=OptionalStringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_movie(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> Movie:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Movie

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    Response,
                    parse_obj_as(
                        type_=Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.data
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_movie_docs(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie_docs(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    Response,
                    parse_obj_as(
                        type_=Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.docs
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_movie_name(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie_name(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    StringResponse,
                    parse_obj_as(
                        type_=StringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.data
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_movie_metadata(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, str]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, str]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_movie_metadata(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    Response,
                    parse_obj_as(
                        type_=Response,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.metadata
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_optional_movie(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[Movie]:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[Movie]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_optional_movie(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    typing.Optional[Response],
                    parse_obj_as(
                        type_=typing.Optional[Response],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return _parsed_response.data if _parsed_response is not None else _parsed_response
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_optional_movie_docs(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_optional_movie_docs(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    OptionalWithDocs,
                    parse_obj_as(
                        type_=OptionalWithDocs,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_optional_movie_name(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedResponseProperty

        client = AsyncSeedResponseProperty(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_optional_movie_name(
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "movie",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    OptionalStringResponse,
                    parse_obj_as(
                        type_=OptionalStringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
