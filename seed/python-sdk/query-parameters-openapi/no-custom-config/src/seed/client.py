# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .raw_client import AsyncRawSeedApi, RawSeedApi
from .types.nested_user import NestedUser
from .types.search_request_neighbor_required import SearchRequestNeighborRequired
from .types.search_response import SearchResponse
from .types.user import User


class SeedApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedApi

    client = SeedApi(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawSeedApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawSeedApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSeedApi
        """
        return self._raw_client

    def search(
        self,
        *,
        limit: int,
        id: str,
        date: str,
        deadline: dt.datetime,
        bytes: str,
        user: User,
        neighbor_required: SearchRequestNeighborRequired,
        user_list: typing.Optional[typing.Union[User, typing.Sequence[User]]] = None,
        optional_deadline: typing.Optional[dt.datetime] = None,
        key_value: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        optional_string: typing.Optional[str] = None,
        nested_user: typing.Optional[NestedUser] = None,
        optional_user: typing.Optional[User] = None,
        exclude_user: typing.Optional[typing.Union[User, typing.Sequence[User]]] = None,
        filter: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        neighbor: typing.Optional[User] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        Parameters
        ----------
        limit : int

        id : str

        date : str

        deadline : dt.datetime

        bytes : str

        user : User

        neighbor_required : SearchRequestNeighborRequired

        user_list : typing.Optional[typing.Union[User, typing.Sequence[User]]]

        optional_deadline : typing.Optional[dt.datetime]

        key_value : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        optional_string : typing.Optional[str]

        nested_user : typing.Optional[NestedUser]

        optional_user : typing.Optional[User]

        exclude_user : typing.Optional[typing.Union[User, typing.Sequence[User]]]

        filter : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        neighbor : typing.Optional[User]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse
            Successful response

        Examples
        --------
        import datetime

        from seed import NestedUser, SeedApi, User

        client = SeedApi(
            base_url="https://yourhost.com/path/to/api",
        )
        client.search(
            limit=1,
            id="id",
            date="date",
            deadline=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            bytes="bytes",
            user=User(
                name="name",
                tags=["tags", "tags"],
            ),
            user_list=User(
                name="name",
                tags=["tags", "tags"],
            ),
            optional_deadline=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            key_value={"keyValue": "keyValue"},
            optional_string="optionalString",
            nested_user=NestedUser(
                name="name",
                user=User(
                    name="name",
                    tags=["tags", "tags"],
                ),
            ),
            optional_user=User(
                name="name",
                tags=["tags", "tags"],
            ),
            exclude_user=User(
                name="name",
                tags=["tags", "tags"],
            ),
            filter="filter",
            neighbor=User(
                name="name",
                tags=["tags", "tags"],
            ),
            neighbor_required=User(
                name="name",
                tags=["tags", "tags"],
            ),
        )
        """
        _response = self._raw_client.search(
            limit=limit,
            id=id,
            date=date,
            deadline=deadline,
            bytes=bytes,
            user=user,
            neighbor_required=neighbor_required,
            user_list=user_list,
            optional_deadline=optional_deadline,
            key_value=key_value,
            optional_string=optional_string,
            nested_user=nested_user,
            optional_user=optional_user,
            exclude_user=exclude_user,
            filter=filter,
            neighbor=neighbor,
            request_options=request_options,
        )
        return _response.data


class AsyncSeedApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedApi

    client = AsyncSeedApi(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawSeedApi(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSeedApi:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSeedApi
        """
        return self._raw_client

    async def search(
        self,
        *,
        limit: int,
        id: str,
        date: str,
        deadline: dt.datetime,
        bytes: str,
        user: User,
        neighbor_required: SearchRequestNeighborRequired,
        user_list: typing.Optional[typing.Union[User, typing.Sequence[User]]] = None,
        optional_deadline: typing.Optional[dt.datetime] = None,
        key_value: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
        optional_string: typing.Optional[str] = None,
        nested_user: typing.Optional[NestedUser] = None,
        optional_user: typing.Optional[User] = None,
        exclude_user: typing.Optional[typing.Union[User, typing.Sequence[User]]] = None,
        filter: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        neighbor: typing.Optional[User] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        Parameters
        ----------
        limit : int

        id : str

        date : str

        deadline : dt.datetime

        bytes : str

        user : User

        neighbor_required : SearchRequestNeighborRequired

        user_list : typing.Optional[typing.Union[User, typing.Sequence[User]]]

        optional_deadline : typing.Optional[dt.datetime]

        key_value : typing.Optional[typing.Dict[str, typing.Optional[str]]]

        optional_string : typing.Optional[str]

        nested_user : typing.Optional[NestedUser]

        optional_user : typing.Optional[User]

        exclude_user : typing.Optional[typing.Union[User, typing.Sequence[User]]]

        filter : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        neighbor : typing.Optional[User]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse
            Successful response

        Examples
        --------
        import asyncio
        import datetime

        from seed import AsyncSeedApi, NestedUser, User

        client = AsyncSeedApi(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.search(
                limit=1,
                id="id",
                date="date",
                deadline=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                bytes="bytes",
                user=User(
                    name="name",
                    tags=["tags", "tags"],
                ),
                user_list=User(
                    name="name",
                    tags=["tags", "tags"],
                ),
                optional_deadline=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                key_value={"keyValue": "keyValue"},
                optional_string="optionalString",
                nested_user=NestedUser(
                    name="name",
                    user=User(
                        name="name",
                        tags=["tags", "tags"],
                    ),
                ),
                optional_user=User(
                    name="name",
                    tags=["tags", "tags"],
                ),
                exclude_user=User(
                    name="name",
                    tags=["tags", "tags"],
                ),
                filter="filter",
                neighbor=User(
                    name="name",
                    tags=["tags", "tags"],
                ),
                neighbor_required=User(
                    name="name",
                    tags=["tags", "tags"],
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            limit=limit,
            id=id,
            date=date,
            deadline=deadline,
            bytes=bytes,
            user=user,
            neighbor_required=neighbor_required,
            user_list=user_list,
            optional_deadline=optional_deadline,
            key_value=key_value,
            optional_string=optional_string,
            nested_user=nested_user,
            optional_user=optional_user,
            exclude_user=exclude_user,
            filter=filter,
            neighbor=neighbor,
            request_options=request_options,
        )
        return _response.data
