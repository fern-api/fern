# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.types.client import Client
from ..types.types.connection import Connection
from ..types.types.paginated_client_response import PaginatedClientResponse
from ..types.types.paginated_user_response import PaginatedUserResponse
from ..types.types.resource import Resource
from ..types.types.search_response import SearchResponse
from ..types.types.user import User
from .raw_client import AsyncRawServiceClient, RawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Resource]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Resource]

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.list_resources(
            page=1,
            per_page=1,
            sort="created_at",
            order="desc",
            include_totals=True,
            fields="fields",
            search="search",
        )
        """
        _response = self._raw_client.list_resources(
            page=page,
            per_page=per_page,
            sort=sort,
            order=order,
            include_totals=include_totals,
            fields=fields,
            search=search,
            request_options=request_options,
        )
        return _response.data

    def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Resource:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Resource

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_resource(
            resource_id="resourceId",
            include_metadata=True,
            format="json",
        )
        """
        _response = self._raw_client.get_resource(
            resource_id, include_metadata=include_metadata, format=format, request_options=request_options
        )
        return _response.data

    def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: typing.Optional[str] = OMIT,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : typing.Optional[str]
            Search query text

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.search_resources(
            limit=1,
            offset=1,
            query="query",
            filters={"filters": {"key": "value"}},
        )
        """
        _response = self._raw_client.search_resources(
            limit=limit, offset=offset, query=query, filters=filters, request_options=request_options
        )
        return _response.data

    def list_users(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        connection: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        search_engine: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedUserResponse:
        """
        List or search for users

        Parameters
        ----------
        page : typing.Optional[int]
            Page index of the results to return. First page is 0.

        per_page : typing.Optional[int]
            Number of results per page.

        include_totals : typing.Optional[bool]
            Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).

        sort : typing.Optional[str]
            Field to sort by. Use field:order where order is 1 for ascending and -1 for descending.

        connection : typing.Optional[str]
            Connection filter

        q : typing.Optional[str]
            Query string following Lucene query string syntax

        search_engine : typing.Optional[str]
            Search engine version (v1, v2, or v3)

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedUserResponse
            Returns either PaginatedUserResponse (if include_totals=true) or list<User> (if include_totals=false)

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.list_users(
            page=1,
            per_page=1,
            include_totals=True,
            sort="sort",
            connection="connection",
            q="q",
            search_engine="search_engine",
            fields="fields",
        )
        """
        _response = self._raw_client.list_users(
            page=page,
            per_page=per_page,
            include_totals=include_totals,
            sort=sort,
            connection=connection,
            q=q,
            search_engine=search_engine,
            fields=fields,
            request_options=request_options,
        )
        return _response.data

    def get_user_by_id(
        self,
        user_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        include_fields : typing.Optional[bool]
            true to include the fields specified, false to exclude them

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_user_by_id(
            user_id="userId",
            fields="fields",
            include_fields=True,
        )
        """
        _response = self._raw_client.get_user_by_id(
            user_id, fields=fields, include_fields=include_fields, request_options=request_options
        )
        return _response.data

    def create_user(
        self,
        *,
        email: str,
        connection: str,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        password: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Create a new user

        Parameters
        ----------
        email : str

        connection : str

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        password : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.create_user(
            email="email",
            email_verified=True,
            username="username",
            password="password",
            phone_number="phone_number",
            phone_verified=True,
            user_metadata={"user_metadata": {"key": "value"}},
            app_metadata={"app_metadata": {"key": "value"}},
            connection="connection",
        )
        """
        _response = self._raw_client.create_user(
            email=email,
            connection=connection,
            email_verified=email_verified,
            username=username,
            password=password,
            phone_number=phone_number,
            phone_verified=phone_verified,
            user_metadata=user_metadata,
            app_metadata=app_metadata,
            request_options=request_options,
        )
        return _response.data

    def update_user(
        self,
        user_id: str,
        *,
        email: typing.Optional[str] = OMIT,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        password: typing.Optional[str] = OMIT,
        blocked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Update a user

        Parameters
        ----------
        user_id : str

        email : typing.Optional[str]

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        password : typing.Optional[str]

        blocked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.update_user(
            user_id="userId",
            email="email",
            email_verified=True,
            username="username",
            phone_number="phone_number",
            phone_verified=True,
            user_metadata={"user_metadata": {"key": "value"}},
            app_metadata={"app_metadata": {"key": "value"}},
            password="password",
            blocked=True,
        )
        """
        _response = self._raw_client.update_user(
            user_id,
            email=email,
            email_verified=email_verified,
            username=username,
            phone_number=phone_number,
            phone_verified=phone_verified,
            user_metadata=user_metadata,
            app_metadata=app_metadata,
            password=password,
            blocked=blocked,
            request_options=request_options,
        )
        return _response.data

    def delete_user(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a user

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.delete_user(
            user_id="userId",
        )
        """
        _response = self._raw_client.delete_user(user_id, request_options=request_options)
        return _response.data

    def list_connections(
        self,
        *,
        strategy: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Connection]:
        """
        List all connections

        Parameters
        ----------
        strategy : typing.Optional[str]
            Filter by strategy type (e.g., auth0, google-oauth2, samlp)

        name : typing.Optional[str]
            Filter by connection name

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.list_connections(
            strategy="strategy",
            name="name",
            fields="fields",
        )
        """
        _response = self._raw_client.list_connections(
            strategy=strategy, name=name, fields=fields, request_options=request_options
        )
        return _response.data

    def get_connection(
        self,
        connection_id: str,
        *,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Connection:
        """
        Get a connection by ID

        Parameters
        ----------
        connection_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_connection(
            connection_id="connectionId",
            fields="fields",
        )
        """
        _response = self._raw_client.get_connection(connection_id, fields=fields, request_options=request_options)
        return _response.data

    def list_clients(
        self,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        is_global: typing.Optional[bool] = None,
        is_first_party: typing.Optional[bool] = None,
        app_type: typing.Optional[typing.Sequence[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedClientResponse:
        """
        List all clients/applications

        Parameters
        ----------
        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        page : typing.Optional[int]
            Page number (zero-based)

        per_page : typing.Optional[int]
            Number of results per page

        include_totals : typing.Optional[bool]
            Include total count in response

        is_global : typing.Optional[bool]
            Filter by global clients

        is_first_party : typing.Optional[bool]
            Filter by first party clients

        app_type : typing.Optional[typing.Sequence[str]]
            Filter by application type (spa, native, regular_web, non_interactive)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedClientResponse

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.list_clients(
            fields="fields",
            include_fields=True,
            page=1,
            per_page=1,
            include_totals=True,
            is_global=True,
            is_first_party=True,
            app_type=["app_type", "app_type"],
        )
        """
        _response = self._raw_client.list_clients(
            fields=fields,
            include_fields=include_fields,
            page=page,
            per_page=per_page,
            include_totals=include_totals,
            is_global=is_global,
            is_first_party=is_first_party,
            app_type=app_type,
            request_options=request_options,
        )
        return _response.data

    def get_client(
        self,
        client_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Client:
        """
        Get a client by ID

        Parameters
        ----------
        client_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Client

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_client(
            client_id="clientId",
            fields="fields",
            include_fields=True,
        )
        """
        _response = self._raw_client.get_client(
            client_id, fields=fields, include_fields=include_fields, request_options=request_options
        )
        return _response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Resource]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Resource]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.list_resources(
                page=1,
                per_page=1,
                sort="created_at",
                order="desc",
                include_totals=True,
                fields="fields",
                search="search",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_resources(
            page=page,
            per_page=per_page,
            sort=sort,
            order=order,
            include_totals=include_totals,
            fields=fields,
            search=search,
            request_options=request_options,
        )
        return _response.data

    async def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Resource:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Resource

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_resource(
                resource_id="resourceId",
                include_metadata=True,
                format="json",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_resource(
            resource_id, include_metadata=include_metadata, format=format, request_options=request_options
        )
        return _response.data

    async def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: typing.Optional[str] = OMIT,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : typing.Optional[str]
            Search query text

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.search_resources(
                limit=1,
                offset=1,
                query="query",
                filters={"filters": {"key": "value"}},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_resources(
            limit=limit, offset=offset, query=query, filters=filters, request_options=request_options
        )
        return _response.data

    async def list_users(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        connection: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        search_engine: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedUserResponse:
        """
        List or search for users

        Parameters
        ----------
        page : typing.Optional[int]
            Page index of the results to return. First page is 0.

        per_page : typing.Optional[int]
            Number of results per page.

        include_totals : typing.Optional[bool]
            Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).

        sort : typing.Optional[str]
            Field to sort by. Use field:order where order is 1 for ascending and -1 for descending.

        connection : typing.Optional[str]
            Connection filter

        q : typing.Optional[str]
            Query string following Lucene query string syntax

        search_engine : typing.Optional[str]
            Search engine version (v1, v2, or v3)

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedUserResponse
            Returns either PaginatedUserResponse (if include_totals=true) or list<User> (if include_totals=false)

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.list_users(
                page=1,
                per_page=1,
                include_totals=True,
                sort="sort",
                connection="connection",
                q="q",
                search_engine="search_engine",
                fields="fields",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_users(
            page=page,
            per_page=per_page,
            include_totals=include_totals,
            sort=sort,
            connection=connection,
            q=q,
            search_engine=search_engine,
            fields=fields,
            request_options=request_options,
        )
        return _response.data

    async def get_user_by_id(
        self,
        user_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        include_fields : typing.Optional[bool]
            true to include the fields specified, false to exclude them

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_user_by_id(
                user_id="userId",
                fields="fields",
                include_fields=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_user_by_id(
            user_id, fields=fields, include_fields=include_fields, request_options=request_options
        )
        return _response.data

    async def create_user(
        self,
        *,
        email: str,
        connection: str,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        password: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Create a new user

        Parameters
        ----------
        email : str

        connection : str

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        password : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.create_user(
                email="email",
                email_verified=True,
                username="username",
                password="password",
                phone_number="phone_number",
                phone_verified=True,
                user_metadata={"user_metadata": {"key": "value"}},
                app_metadata={"app_metadata": {"key": "value"}},
                connection="connection",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_user(
            email=email,
            connection=connection,
            email_verified=email_verified,
            username=username,
            password=password,
            phone_number=phone_number,
            phone_verified=phone_verified,
            user_metadata=user_metadata,
            app_metadata=app_metadata,
            request_options=request_options,
        )
        return _response.data

    async def update_user(
        self,
        user_id: str,
        *,
        email: typing.Optional[str] = OMIT,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        password: typing.Optional[str] = OMIT,
        blocked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Update a user

        Parameters
        ----------
        user_id : str

        email : typing.Optional[str]

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        password : typing.Optional[str]

        blocked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.update_user(
                user_id="userId",
                email="email",
                email_verified=True,
                username="username",
                phone_number="phone_number",
                phone_verified=True,
                user_metadata={"user_metadata": {"key": "value"}},
                app_metadata={"app_metadata": {"key": "value"}},
                password="password",
                blocked=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_user(
            user_id,
            email=email,
            email_verified=email_verified,
            username=username,
            phone_number=phone_number,
            phone_verified=phone_verified,
            user_metadata=user_metadata,
            app_metadata=app_metadata,
            password=password,
            blocked=blocked,
            request_options=request_options,
        )
        return _response.data

    async def delete_user(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a user

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.delete_user(
                user_id="userId",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_user(user_id, request_options=request_options)
        return _response.data

    async def list_connections(
        self,
        *,
        strategy: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Connection]:
        """
        List all connections

        Parameters
        ----------
        strategy : typing.Optional[str]
            Filter by strategy type (e.g., auth0, google-oauth2, samlp)

        name : typing.Optional[str]
            Filter by connection name

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Connection]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.list_connections(
                strategy="strategy",
                name="name",
                fields="fields",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_connections(
            strategy=strategy, name=name, fields=fields, request_options=request_options
        )
        return _response.data

    async def get_connection(
        self,
        connection_id: str,
        *,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Connection:
        """
        Get a connection by ID

        Parameters
        ----------
        connection_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Connection

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_connection(
                connection_id="connectionId",
                fields="fields",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_connection(connection_id, fields=fields, request_options=request_options)
        return _response.data

    async def list_clients(
        self,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        is_global: typing.Optional[bool] = None,
        is_first_party: typing.Optional[bool] = None,
        app_type: typing.Optional[typing.Sequence[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedClientResponse:
        """
        List all clients/applications

        Parameters
        ----------
        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        page : typing.Optional[int]
            Page number (zero-based)

        per_page : typing.Optional[int]
            Number of results per page

        include_totals : typing.Optional[bool]
            Include total count in response

        is_global : typing.Optional[bool]
            Filter by global clients

        is_first_party : typing.Optional[bool]
            Filter by first party clients

        app_type : typing.Optional[typing.Sequence[str]]
            Filter by application type (spa, native, regular_web, non_interactive)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedClientResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.list_clients(
                fields="fields",
                include_fields=True,
                page=1,
                per_page=1,
                include_totals=True,
                is_global=True,
                is_first_party=True,
                app_type=["app_type", "app_type"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_clients(
            fields=fields,
            include_fields=include_fields,
            page=page,
            per_page=per_page,
            include_totals=include_totals,
            is_global=is_global,
            is_first_party=is_first_party,
            app_type=app_type,
            request_options=request_options,
        )
        return _response.data

    async def get_client(
        self,
        client_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Client:
        """
        Get a client by ID

        Parameters
        ----------
        client_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Client

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_client(
                client_id="clientId",
                fields="fields",
                include_fields=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_client(
            client_id, fields=fields, include_fields=include_fields, request_options=request_options
        )
        return _response.data
