# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.types.resource import Resource
from ..types.types.search_response import SearchResponse
from .raw_client import AsyncRawServiceClient, RawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Resource]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Resource]

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.list_resources(
            page=1,
            per_page=1,
            sort="created_at",
            order="desc",
            include_totals=True,
            fields="fields",
            search="search",
        )
        """
        _response = self._raw_client.list_resources(
            page=page,
            per_page=per_page,
            sort=sort,
            order=order,
            include_totals=include_totals,
            fields=fields,
            search=search,
            request_options=request_options,
        )
        return _response.data

    def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Resource:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Resource

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_resource(
            resource_id="resourceId",
            include_metadata=True,
            format="json",
        )
        """
        _response = self._raw_client.get_resource(
            resource_id, include_metadata=include_metadata, format=format, request_options=request_options
        )
        return _response.data

    def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: str,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse

        Examples
        --------
        from seed import SeedClientSideParams

        client = SeedClientSideParams(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.search_resources(
            limit=1,
            offset=1,
            query="query",
            filters={"filters": {"key": "value"}},
        )
        """
        _response = self._raw_client.search_resources(
            limit=limit, offset=offset, query=query, filters=filters, request_options=request_options
        )
        return _response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Resource]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Resource]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.list_resources(
                page=1,
                per_page=1,
                sort="created_at",
                order="desc",
                include_totals=True,
                fields="fields",
                search="search",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_resources(
            page=page,
            per_page=per_page,
            sort=sort,
            order=order,
            include_totals=include_totals,
            fields=fields,
            search=search,
            request_options=request_options,
        )
        return _response.data

    async def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Resource:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Resource

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_resource(
                resource_id="resourceId",
                include_metadata=True,
                format="json",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_resource(
            resource_id, include_metadata=include_metadata, format=format, request_options=request_options
        )
        return _response.data

    async def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: str,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedClientSideParams

        client = AsyncSeedClientSideParams(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.search_resources(
                limit=1,
                offset=1,
                query="query",
                filters={"filters": {"key": "value"}},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_resources(
            limit=limit, offset=offset, query=query, filters=filters, request_options=request_options
        )
        return _response.data
