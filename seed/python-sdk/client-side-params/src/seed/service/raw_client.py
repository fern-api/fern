# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..types.types.client import Client
from ..types.types.connection import Connection
from ..types.types.paginated_client_response import PaginatedClientResponse
from ..types.types.paginated_user_response import PaginatedUserResponse
from ..types.types.resource import Resource
from ..types.types.search_response import SearchResponse
from ..types.types.user import User

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Resource]]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Resource]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/resources",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "sort": sort,
                "order": order,
                "include_totals": include_totals,
                "fields": fields,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Resource],
                    parse_obj_as(
                        type_=typing.List[Resource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Resource]:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Resource]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/resources/{jsonable_encoder(resource_id)}",
            method="GET",
            params={
                "include_metadata": include_metadata,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Resource,
                    parse_obj_as(
                        type_=Resource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: typing.Optional[str] = OMIT,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SearchResponse]:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : typing.Optional[str]
            Search query text

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SearchResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/resources/search",
            method="POST",
            params={
                "limit": limit,
                "offset": offset,
            },
            json={
                "query": query,
                "filters": filters,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_users(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        connection: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        search_engine: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PaginatedUserResponse]:
        """
        List or search for users

        Parameters
        ----------
        page : typing.Optional[int]
            Page index of the results to return. First page is 0.

        per_page : typing.Optional[int]
            Number of results per page.

        include_totals : typing.Optional[bool]
            Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).

        sort : typing.Optional[str]
            Field to sort by. Use field:order where order is 1 for ascending and -1 for descending.

        connection : typing.Optional[str]
            Connection filter

        q : typing.Optional[str]
            Query string following Lucene query string syntax

        search_engine : typing.Optional[str]
            Search engine version (v1, v2, or v3)

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PaginatedUserResponse]
            Returns either PaginatedUserResponse (if include_totals=true) or list<User> (if include_totals=false)
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "include_totals": include_totals,
                "sort": sort,
                "connection": connection,
                "q": q,
                "search_engine": search_engine,
                "fields": fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedUserResponse,
                    parse_obj_as(
                        type_=PaginatedUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_user_by_id(
        self,
        user_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[User]:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        include_fields : typing.Optional[bool]
            true to include the fields specified, false to exclude them

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[User]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="GET",
            params={
                "fields": fields,
                "include_fields": include_fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_user(
        self,
        *,
        email: str,
        connection: str,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        password: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[User]:
        """
        Create a new user

        Parameters
        ----------
        email : str

        connection : str

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        password : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[User]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/users",
            method="POST",
            json={
                "email": email,
                "email_verified": email_verified,
                "username": username,
                "password": password,
                "phone_number": phone_number,
                "phone_verified": phone_verified,
                "user_metadata": user_metadata,
                "app_metadata": app_metadata,
                "connection": connection,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_user(
        self,
        user_id: str,
        *,
        email: typing.Optional[str] = OMIT,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        password: typing.Optional[str] = OMIT,
        blocked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[User]:
        """
        Update a user

        Parameters
        ----------
        user_id : str

        email : typing.Optional[str]

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        password : typing.Optional[str]

        blocked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[User]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="PATCH",
            json={
                "email": email,
                "email_verified": email_verified,
                "username": username,
                "phone_number": phone_number,
                "phone_verified": phone_verified,
                "user_metadata": user_metadata,
                "app_metadata": app_metadata,
                "password": password,
                "blocked": blocked,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_user(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Delete a user

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_connections(
        self,
        *,
        strategy: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Connection]]:
        """
        List all connections

        Parameters
        ----------
        strategy : typing.Optional[str]
            Filter by strategy type (e.g., auth0, google-oauth2, samlp)

        name : typing.Optional[str]
            Filter by connection name

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Connection]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/connections",
            method="GET",
            params={
                "strategy": strategy,
                "name": name,
                "fields": fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_connection(
        self,
        connection_id: str,
        *,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Connection]:
        """
        Get a connection by ID

        Parameters
        ----------
        connection_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Connection]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/connections/{jsonable_encoder(connection_id)}",
            method="GET",
            params={
                "fields": fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_clients(
        self,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        is_global: typing.Optional[bool] = None,
        is_first_party: typing.Optional[bool] = None,
        app_type: typing.Optional[typing.Sequence[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PaginatedClientResponse]:
        """
        List all clients/applications

        Parameters
        ----------
        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        page : typing.Optional[int]
            Page number (zero-based)

        per_page : typing.Optional[int]
            Number of results per page

        include_totals : typing.Optional[bool]
            Include total count in response

        is_global : typing.Optional[bool]
            Filter by global clients

        is_first_party : typing.Optional[bool]
            Filter by first party clients

        app_type : typing.Optional[typing.Sequence[str]]
            Filter by application type (spa, native, regular_web, non_interactive)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PaginatedClientResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/clients",
            method="GET",
            params={
                "fields": fields,
                "include_fields": include_fields,
                "page": page,
                "per_page": per_page,
                "include_totals": include_totals,
                "is_global": is_global,
                "is_first_party": is_first_party,
                "app_type": app_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedClientResponse,
                    parse_obj_as(
                        type_=PaginatedClientResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_client(
        self,
        client_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Client]:
        """
        Get a client by ID

        Parameters
        ----------
        client_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Client]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/clients/{jsonable_encoder(client_id)}",
            method="GET",
            params={
                "fields": fields,
                "include_fields": include_fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Client,
                    parse_obj_as(
                        type_=Client,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Resource]]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Resource]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/resources",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "sort": sort,
                "order": order,
                "include_totals": include_totals,
                "fields": fields,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Resource],
                    parse_obj_as(
                        type_=typing.List[Resource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Resource]:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Resource]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/resources/{jsonable_encoder(resource_id)}",
            method="GET",
            params={
                "include_metadata": include_metadata,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Resource,
                    parse_obj_as(
                        type_=Resource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: typing.Optional[str] = OMIT,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SearchResponse]:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : typing.Optional[str]
            Search query text

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SearchResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/resources/search",
            method="POST",
            params={
                "limit": limit,
                "offset": offset,
            },
            json={
                "query": query,
                "filters": filters,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_users(
        self,
        *,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        sort: typing.Optional[str] = None,
        connection: typing.Optional[str] = None,
        q: typing.Optional[str] = None,
        search_engine: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PaginatedUserResponse]:
        """
        List or search for users

        Parameters
        ----------
        page : typing.Optional[int]
            Page index of the results to return. First page is 0.

        per_page : typing.Optional[int]
            Number of results per page.

        include_totals : typing.Optional[bool]
            Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).

        sort : typing.Optional[str]
            Field to sort by. Use field:order where order is 1 for ascending and -1 for descending.

        connection : typing.Optional[str]
            Connection filter

        q : typing.Optional[str]
            Query string following Lucene query string syntax

        search_engine : typing.Optional[str]
            Search engine version (v1, v2, or v3)

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PaginatedUserResponse]
            Returns either PaginatedUserResponse (if include_totals=true) or list<User> (if include_totals=false)
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/users",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "include_totals": include_totals,
                "sort": sort,
                "connection": connection,
                "q": q,
                "search_engine": search_engine,
                "fields": fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedUserResponse,
                    parse_obj_as(
                        type_=PaginatedUserResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_user_by_id(
        self,
        user_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[User]:
        """
        Get a user by ID

        Parameters
        ----------
        user_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include or exclude

        include_fields : typing.Optional[bool]
            true to include the fields specified, false to exclude them

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[User]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="GET",
            params={
                "fields": fields,
                "include_fields": include_fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_user(
        self,
        *,
        email: str,
        connection: str,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        password: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[User]:
        """
        Create a new user

        Parameters
        ----------
        email : str

        connection : str

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        password : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[User]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/users",
            method="POST",
            json={
                "email": email,
                "email_verified": email_verified,
                "username": username,
                "password": password,
                "phone_number": phone_number,
                "phone_verified": phone_verified,
                "user_metadata": user_metadata,
                "app_metadata": app_metadata,
                "connection": connection,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_user(
        self,
        user_id: str,
        *,
        email: typing.Optional[str] = OMIT,
        email_verified: typing.Optional[bool] = OMIT,
        username: typing.Optional[str] = OMIT,
        phone_number: typing.Optional[str] = OMIT,
        phone_verified: typing.Optional[bool] = OMIT,
        user_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        app_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        password: typing.Optional[str] = OMIT,
        blocked: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[User]:
        """
        Update a user

        Parameters
        ----------
        user_id : str

        email : typing.Optional[str]

        email_verified : typing.Optional[bool]

        username : typing.Optional[str]

        phone_number : typing.Optional[str]

        phone_verified : typing.Optional[bool]

        user_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        app_metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        password : typing.Optional[str]

        blocked : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[User]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="PATCH",
            json={
                "email": email,
                "email_verified": email_verified,
                "username": username,
                "phone_number": phone_number,
                "phone_verified": phone_verified,
                "user_metadata": user_metadata,
                "app_metadata": app_metadata,
                "password": password,
                "blocked": blocked,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    User,
                    parse_obj_as(
                        type_=User,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_user(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Delete a user

        Parameters
        ----------
        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/users/{jsonable_encoder(user_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_connections(
        self,
        *,
        strategy: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Connection]]:
        """
        List all connections

        Parameters
        ----------
        strategy : typing.Optional[str]
            Filter by strategy type (e.g., auth0, google-oauth2, samlp)

        name : typing.Optional[str]
            Filter by connection name

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Connection]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/connections",
            method="GET",
            params={
                "strategy": strategy,
                "name": name,
                "fields": fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Connection],
                    parse_obj_as(
                        type_=typing.List[Connection],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_connection(
        self,
        connection_id: str,
        *,
        fields: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Connection]:
        """
        Get a connection by ID

        Parameters
        ----------
        connection_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Connection]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/connections/{jsonable_encoder(connection_id)}",
            method="GET",
            params={
                "fields": fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Connection,
                    parse_obj_as(
                        type_=Connection,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_clients(
        self,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        per_page: typing.Optional[int] = None,
        include_totals: typing.Optional[bool] = None,
        is_global: typing.Optional[bool] = None,
        is_first_party: typing.Optional[bool] = None,
        app_type: typing.Optional[typing.Sequence[str]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PaginatedClientResponse]:
        """
        List all clients/applications

        Parameters
        ----------
        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        page : typing.Optional[int]
            Page number (zero-based)

        per_page : typing.Optional[int]
            Number of results per page

        include_totals : typing.Optional[bool]
            Include total count in response

        is_global : typing.Optional[bool]
            Filter by global clients

        is_first_party : typing.Optional[bool]
            Filter by first party clients

        app_type : typing.Optional[typing.Sequence[str]]
            Filter by application type (spa, native, regular_web, non_interactive)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PaginatedClientResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/clients",
            method="GET",
            params={
                "fields": fields,
                "include_fields": include_fields,
                "page": page,
                "per_page": per_page,
                "include_totals": include_totals,
                "is_global": is_global,
                "is_first_party": is_first_party,
                "app_type": app_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PaginatedClientResponse,
                    parse_obj_as(
                        type_=PaginatedClientResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_client(
        self,
        client_id: str,
        *,
        fields: typing.Optional[str] = None,
        include_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Client]:
        """
        Get a client by ID

        Parameters
        ----------
        client_id : str

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        include_fields : typing.Optional[bool]
            Whether specified fields are included or excluded

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Client]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/clients/{jsonable_encoder(client_id)}",
            method="GET",
            params={
                "fields": fields,
                "include_fields": include_fields,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Client,
                    parse_obj_as(
                        type_=Client,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
