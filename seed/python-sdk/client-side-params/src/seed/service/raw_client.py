# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..types.types.resource import Resource
from ..types.types.search_response import SearchResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Resource]]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Resource]]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/resources",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "sort": sort,
                "order": order,
                "include_totals": include_totals,
                "fields": fields,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Resource],
                    parse_obj_as(
                        type_=typing.List[Resource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Resource]:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Resource]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/resources/{jsonable_encoder(resource_id)}",
            method="GET",
            params={
                "include_metadata": include_metadata,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Resource,
                    parse_obj_as(
                        type_=Resource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: str,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SearchResponse]:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SearchResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/resources/search",
            method="POST",
            params={
                "limit": limit,
                "offset": offset,
            },
            json={
                "query": query,
                "filters": filters,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_resources(
        self,
        *,
        page: int,
        per_page: int,
        sort: str,
        order: str,
        include_totals: bool,
        fields: typing.Optional[str] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Resource]]:
        """
        List resources with pagination

        Parameters
        ----------
        page : int
            Zero-indexed page number

        per_page : int
            Number of items per page

        sort : str
            Sort field

        order : str
            Sort order (asc or desc)

        include_totals : bool
            Whether to include total count

        fields : typing.Optional[str]
            Comma-separated list of fields to include

        search : typing.Optional[str]
            Search query

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Resource]]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/resources",
            method="GET",
            params={
                "page": page,
                "per_page": per_page,
                "sort": sort,
                "order": order,
                "include_totals": include_totals,
                "fields": fields,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Resource],
                    parse_obj_as(
                        type_=typing.List[Resource],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_resource(
        self,
        resource_id: str,
        *,
        include_metadata: bool,
        format: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Resource]:
        """
        Get a single resource

        Parameters
        ----------
        resource_id : str

        include_metadata : bool
            Include metadata in response

        format : str
            Response format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Resource]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/resources/{jsonable_encoder(resource_id)}",
            method="GET",
            params={
                "include_metadata": include_metadata,
                "format": format,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Resource,
                    parse_obj_as(
                        type_=Resource,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def search_resources(
        self,
        *,
        limit: int,
        offset: int,
        query: str,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SearchResponse]:
        """
        Search resources with complex parameters

        Parameters
        ----------
        limit : int
            Maximum results to return

        offset : int
            Offset for pagination

        query : str

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SearchResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/resources/search",
            method="POST",
            params={
                "limit": limit,
                "offset": offset,
            },
            json={
                "query": query,
                "filters": filters,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
