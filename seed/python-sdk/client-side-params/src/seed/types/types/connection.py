# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class Connection(UniversalBaseModel):
    """
    Represents an identity provider connection
    """

    id: str = pydantic.Field()
    """
    Connection identifier
    """

    name: str = pydantic.Field()
    """
    Connection name
    """

    display_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Display name for the connection
    """

    strategy: str = pydantic.Field()
    """
    The identity provider identifier (auth0, google-oauth2, facebook, etc.)
    """

    options: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Connection-specific configuration options
    """

    enabled_clients: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of client IDs that can use this connection
    """

    realms: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Applicable realms for enterprise connections
    """

    is_domain_connection: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether this is a domain connection
    """

    metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Additional metadata
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
