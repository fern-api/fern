# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .client import Client
    from .connection import Connection
    from .create_user_request import CreateUserRequest
    from .identity import Identity
    from .paginated_client_response import PaginatedClientResponse
    from .paginated_user_response import PaginatedUserResponse
    from .resource import Resource
    from .search_response import SearchResponse
    from .update_user_request import UpdateUserRequest
    from .user import User
_dynamic_imports: typing.Dict[str, str] = {
    "Client": ".client",
    "Connection": ".connection",
    "CreateUserRequest": ".create_user_request",
    "Identity": ".identity",
    "PaginatedClientResponse": ".paginated_client_response",
    "PaginatedUserResponse": ".paginated_user_response",
    "Resource": ".resource",
    "SearchResponse": ".search_response",
    "UpdateUserRequest": ".update_user_request",
    "User": ".user",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Client",
    "Connection",
    "CreateUserRequest",
    "Identity",
    "PaginatedClientResponse",
    "PaginatedUserResponse",
    "Resource",
    "SearchResponse",
    "UpdateUserRequest",
    "User",
]
