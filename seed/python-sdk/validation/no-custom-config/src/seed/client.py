# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .raw_client import AsyncRawSeedValidation, RawSeedValidation
from .types.shape import Shape
from .types.type import Type

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SeedValidation:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedValidation
    client = SeedValidation(base_url="https://yourhost.com/path/to/api", )
    """

    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawSeedValidation(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawSeedValidation:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSeedValidation
        """
        return self._raw_client

    def create(
        self,
        *,
        decimal: float,
        even: int,
        name: str,
        shape: Shape,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Type:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        shape : Shape

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Type

        Examples
        --------
        from seed import SeedValidation
        client = SeedValidation(base_url="https://yourhost.com/path/to/api", )
        client.create(decimal=2.2, even=100, name='foo', shape="SQUARE", )
        """
        _response = self._raw_client.create(
            decimal=decimal, even=even, name=name, shape=shape, request_options=request_options
        )
        return _response.data

    def get(
        self, *, decimal: float, even: int, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Type:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Type

        Examples
        --------
        from seed import SeedValidation
        client = SeedValidation(base_url="https://yourhost.com/path/to/api", )
        client.get(decimal=2.2, even=100, name='foo', )
        """
        _response = self._raw_client.get(decimal=decimal, even=even, name=name, request_options=request_options)
        return _response.data


class AsyncSeedValidation:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedValidation
    client = AsyncSeedValidation(base_url="https://yourhost.com/path/to/api", )
    """

    def __init__(
        self,
        *,
        base_url: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawSeedValidation(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSeedValidation:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSeedValidation
        """
        return self._raw_client

    async def create(
        self,
        *,
        decimal: float,
        even: int,
        name: str,
        shape: Shape,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Type:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        shape : Shape

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Type

        Examples
        --------
        from seed import AsyncSeedValidation
        import asyncio
        client = AsyncSeedValidation(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.create(decimal=2.2, even=100, name='foo', shape="SQUARE", )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            decimal=decimal, even=even, name=name, shape=shape, request_options=request_options
        )
        return _response.data

    async def get(
        self, *, decimal: float, even: int, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> Type:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Type

        Examples
        --------
        from seed import AsyncSeedValidation
        import asyncio
        client = AsyncSeedValidation(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.get(decimal=2.2, even=100, name='foo', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(decimal=decimal, even=even, name=name, request_options=request_options)
        return _response.data
