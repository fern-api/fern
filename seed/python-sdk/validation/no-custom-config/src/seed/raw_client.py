# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.http_response import AsyncHttpResponse, HttpResponse
from .core.pydantic_utilities import parse_obj_as
from .core.request_options import RequestOptions
from .types.shape import Shape
from .types.type import Type

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawSeedValidation:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        decimal: float,
        even: int,
        name: str,
        shape: Shape,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Type]:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        shape : Shape

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Type]
        """
        _response = self._client_wrapper.httpx_client.request(
            "create",
            method="POST",
            json={
                "decimal": decimal,
                "even": even,
                "name": name,
                "shape": shape,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Type,
                    parse_obj_as(
                        type_=Type,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get(
        self, *, decimal: float, even: int, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[Type]:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Type]
        """
        _response = self._client_wrapper.httpx_client.request(
            method="GET",
            params={
                "decimal": decimal,
                "even": even,
                "name": name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Type,
                    parse_obj_as(
                        type_=Type,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)


class AsyncRawSeedValidation:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        decimal: float,
        even: int,
        name: str,
        shape: Shape,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Type]:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        shape : Shape

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Type]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "create",
            method="POST",
            json={
                "decimal": decimal,
                "even": even,
                "name": name,
                "shape": shape,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Type,
                    parse_obj_as(
                        type_=Type,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get(
        self, *, decimal: float, even: int, name: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Type]:
        """
        Parameters
        ----------
        decimal : float

        even : int

        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Type]
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="GET",
            params={
                "decimal": decimal,
                "even": even,
                "name": name,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Type,
                    parse_obj_as(
                        type_=Type,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)
