# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawUsersClient
import typing
from ..core.request_options import RequestOptions
from ..core.pagination import SyncPager
from ..types.username_cursor import UsernameCursor
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawUsersClient
from ..core.pagination import AsyncPager


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUsersClient
        """
        return self._raw_client

    def list_usernames_custom(
        self, *, starting_after: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> SyncPager[UsernameCursor]:
        """
        Parameters
        ----------
        starting_after : typing.Optional[str]
            The cursor used for pagination in order to fetch
            the next page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[UsernameCursor]

        Examples
        --------
        from seed import SeedPagination

        client = SeedPagination(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        response = client.users.list_usernames_custom(
            starting_after="starting_after",
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        response = self._raw_client.list_usernames_custom(
            starting_after=starting_after, request_options=request_options
        )
        return response.data


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUsersClient
        """
        return self._raw_client

    async def list_usernames_custom(
        self, *, starting_after: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncPager[UsernameCursor]:
        """
        Parameters
        ----------
        starting_after : typing.Optional[str]
            The cursor used for pagination in order to fetch
            the next page of results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[UsernameCursor]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedPagination

        client = AsyncSeedPagination(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            response = await client.users.list_usernames_custom(
                starting_after="starting_after",
            )
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        response = await self._raw_client.list_usernames_custom(
            starting_after=starting_after, request_options=request_options
        )
        return response.data
