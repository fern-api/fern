# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .raw_client import AsyncRawAClient, RawAClient

if typing.TYPE_CHECKING:
    from .b.client import AsyncBClient, BClient
    from .c.client import AsyncCClient, CClient


class AClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._b: typing.Optional[BClient] = None
        self._c: typing.Optional[CClient] = None

    @property
    def with_raw_response(self) -> RawAClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAClient
        """
        return self._raw_client

    @property
    def b(self):
        if self._b is None:
            from .b.client import BClient  # noqa: E402

            self._b = BClient(client_wrapper=self._client_wrapper)
        return self._b

    @property
    def c(self):
        if self._c is None:
            from .c.client import CClient  # noqa: E402

            self._c = CClient(client_wrapper=self._client_wrapper)
        return self._c


class AsyncAClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._b: typing.Optional[AsyncBClient] = None
        self._c: typing.Optional[AsyncCClient] = None

    @property
    def with_raw_response(self) -> AsyncRawAClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAClient
        """
        return self._raw_client

    @property
    def b(self):
        if self._b is None:
            from .b.client import AsyncBClient  # noqa: E402

            self._b = AsyncBClient(client_wrapper=self._client_wrapper)
        return self._b

    @property
    def c(self):
        if self._c is None:
            from .c.client import AsyncCClient  # noqa: E402

            self._c = AsyncCClient(client_wrapper=self._client_wrapper)
        return self._c
