# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from .raw_client import RawServiceClient
from ...core.request_options import RequestOptions
from ...core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def endpoint(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedApi
        client = SeedApi(base_url="https://yourhost.com/path/to/api", )
        client.folder.service.endpoint()
        """
        response = self._raw_client.endpoint(request_options=request_options)
        return response.data

    def unknown_request(
        self, *, request: typing.Optional[typing.Any] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request : typing.Optional[typing.Any]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedApi
        client = SeedApi(base_url="https://yourhost.com/path/to/api", )
        client.folder.service.unknown_request(request={'key': 'value'}
        , )
        """
        response = self._raw_client.unknown_request(request=request, request_options=request_options)
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def endpoint(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedApi
        import asyncio
        client = AsyncSeedApi(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.folder.service.endpoint()
        asyncio.run(main())
        """
        response = await self._raw_client.endpoint(request_options=request_options)
        return response.data

    async def unknown_request(
        self, *, request: typing.Optional[typing.Any] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        request : typing.Optional[typing.Any]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedApi
        import asyncio
        client = AsyncSeedApi(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.folder.service.unknown_request(request={'key': 'value'}
            , )
        asyncio.run(main())
        """
        response = await self._raw_client.unknown_request(request=request, request_options=request_options)
        return response.data
