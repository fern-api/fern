# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawFolderClient
from .service.client import ServiceClient
import typing
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawFolderClient
from .service.client import AsyncServiceClient


class FolderClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFolderClient(client_wrapper=client_wrapper)
        self.service = ServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFolderClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFolderClient
        """
        return self._raw_client

    def foo(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedApi
        client = SeedApi(base_url="https://yourhost.com/path/to/api", )
        client.folder.foo()
        """
        response = self._raw_client.foo(request_options=request_options)
        return response.data


class AsyncFolderClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFolderClient(client_wrapper=client_wrapper)
        self.service = AsyncServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFolderClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFolderClient
        """
        return self._raw_client

    async def foo(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedApi
        import asyncio
        client = AsyncSeedApi(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.folder.foo()
        asyncio.run(main())
        """
        response = await self._raw_client.foo(request_options=request_options)
        return response.data
