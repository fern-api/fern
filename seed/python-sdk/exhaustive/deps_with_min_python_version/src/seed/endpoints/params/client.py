# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawParamsClient, RawParamsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ParamsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawParamsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawParamsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawParamsClient
        """
        return self._raw_client

    def get_with_path(self, param: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET with path param

        Parameters
        ----------
        param : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.get_with_path(param='param', )
        """
        response = self._raw_client.get_with_path(param, request_options=request_options)
        return response.data

    def get_with_inline_path(self, param: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET with path param

        Parameters
        ----------
        param : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.get_with_inline_path(param='param', )
        """
        response = self._raw_client.get_with_inline_path(param, request_options=request_options)
        return response.data

    def get_with_query(
        self, *, query: str, number: int, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        GET with query param

        Parameters
        ----------
        query : str

        number : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.get_with_query(query='query', number=1, )
        """
        response = self._raw_client.get_with_query(query=query, number=number, request_options=request_options)
        return response.data

    def get_with_allow_multiple_query(
        self,
        *,
        query: typing.Union[str, typing.Sequence[str]],
        number: typing.Union[int, typing.Sequence[int]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        GET with multiple of same query param

        Parameters
        ----------
        query : typing.Union[str, typing.Sequence[str]]

        number : typing.Union[int, typing.Sequence[int]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.get_with_allow_multiple_query(query='query', number=1, )
        """
        response = self._raw_client.get_with_allow_multiple_query(
            query=query, number=number, request_options=request_options
        )
        return response.data

    def get_with_path_and_query(
        self, param: str, *, query: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        GET with path and query params

        Parameters
        ----------
        param : str

        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.get_with_path_and_query(param='param', query='query', )
        """
        response = self._raw_client.get_with_path_and_query(param, query=query, request_options=request_options)
        return response.data

    def get_with_inline_path_and_query(
        self, param: str, *, query: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        GET with path and query params

        Parameters
        ----------
        param : str

        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.get_with_inline_path_and_query(param='param', query='query', )
        """
        response = self._raw_client.get_with_inline_path_and_query(param, query=query, request_options=request_options)
        return response.data

    def modify_with_path(
        self, param: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        PUT to update with path param

        Parameters
        ----------
        param : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.modify_with_path(param='param', request='string', )
        """
        response = self._raw_client.modify_with_path(param, request=request, request_options=request_options)
        return response.data

    def modify_with_inline_path(
        self, param: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        PUT to update with path param

        Parameters
        ----------
        param : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.params.modify_with_inline_path(param='param', request='string', )
        """
        response = self._raw_client.modify_with_inline_path(param, request=request, request_options=request_options)
        return response.data


class AsyncParamsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawParamsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawParamsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawParamsClient
        """
        return self._raw_client

    async def get_with_path(self, param: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET with path param

        Parameters
        ----------
        param : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.get_with_path(param='param', )
        asyncio.run(main())
        """
        response = await self._raw_client.get_with_path(param, request_options=request_options)
        return response.data

    async def get_with_inline_path(self, param: str, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET with path param

        Parameters
        ----------
        param : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.get_with_inline_path(param='param', )
        asyncio.run(main())
        """
        response = await self._raw_client.get_with_inline_path(param, request_options=request_options)
        return response.data

    async def get_with_query(
        self, *, query: str, number: int, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        GET with query param

        Parameters
        ----------
        query : str

        number : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.get_with_query(query='query', number=1, )
        asyncio.run(main())
        """
        response = await self._raw_client.get_with_query(query=query, number=number, request_options=request_options)
        return response.data

    async def get_with_allow_multiple_query(
        self,
        *,
        query: typing.Union[str, typing.Sequence[str]],
        number: typing.Union[int, typing.Sequence[int]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        GET with multiple of same query param

        Parameters
        ----------
        query : typing.Union[str, typing.Sequence[str]]

        number : typing.Union[int, typing.Sequence[int]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.get_with_allow_multiple_query(query='query', number=1, )
        asyncio.run(main())
        """
        response = await self._raw_client.get_with_allow_multiple_query(
            query=query, number=number, request_options=request_options
        )
        return response.data

    async def get_with_path_and_query(
        self, param: str, *, query: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        GET with path and query params

        Parameters
        ----------
        param : str

        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.get_with_path_and_query(param='param', query='query', )
        asyncio.run(main())
        """
        response = await self._raw_client.get_with_path_and_query(param, query=query, request_options=request_options)
        return response.data

    async def get_with_inline_path_and_query(
        self, param: str, *, query: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        GET with path and query params

        Parameters
        ----------
        param : str

        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.get_with_inline_path_and_query(param='param', query='query', )
        asyncio.run(main())
        """
        response = await self._raw_client.get_with_inline_path_and_query(
            param, query=query, request_options=request_options
        )
        return response.data

    async def modify_with_path(
        self, param: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        PUT to update with path param

        Parameters
        ----------
        param : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.modify_with_path(param='param', request='string', )
        asyncio.run(main())
        """
        response = await self._raw_client.modify_with_path(param, request=request, request_options=request_options)
        return response.data

    async def modify_with_inline_path(
        self, param: str, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        PUT to update with path param

        Parameters
        ----------
        param : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.params.modify_with_inline_path(param='param', request='string', )
        asyncio.run(main())
        """
        response = await self._raw_client.modify_with_inline_path(
            param, request=request, request_options=request_options
        )
        return response.data
