# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import uuid

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawPrimitiveClient, RawPrimitiveClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PrimitiveClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPrimitiveClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPrimitiveClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPrimitiveClient
        """
        return self._raw_client

    def get_and_return_string(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_string(request='string', )
        """
        _response = self._raw_client.get_and_return_string(request=request, request_options=request_options)
        return _response.data

    def get_and_return_int(self, *, request: int, request_options: typing.Optional[RequestOptions] = None) -> int:
        """
        Parameters
        ----------
        request : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        int

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_int(request=1, )
        """
        _response = self._raw_client.get_and_return_int(request=request, request_options=request_options)
        return _response.data

    def get_and_return_long(self, *, request: int, request_options: typing.Optional[RequestOptions] = None) -> int:
        """
        Parameters
        ----------
        request : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        int

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_long(request=1000000, )
        """
        _response = self._raw_client.get_and_return_long(request=request, request_options=request_options)
        return _response.data

    def get_and_return_double(
        self, *, request: float, request_options: typing.Optional[RequestOptions] = None
    ) -> float:
        """
        Parameters
        ----------
        request : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        float

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_double(request=1.1, )
        """
        _response = self._raw_client.get_and_return_double(request=request, request_options=request_options)
        return _response.data

    def get_and_return_bool(self, *, request: bool, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        Parameters
        ----------
        request : bool

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_bool(request=True, )
        """
        _response = self._raw_client.get_and_return_bool(request=request, request_options=request_options)
        return _response.data

    def get_and_return_datetime(
        self, *, request: dt.datetime, request_options: typing.Optional[RequestOptions] = None
    ) -> dt.datetime:
        """
        Parameters
        ----------
        request : dt.datetime

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        dt.datetime

        Examples
        --------
        from seed import SeedExhaustive
        import datetime
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_datetime(request=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), )
        """
        _response = self._raw_client.get_and_return_datetime(request=request, request_options=request_options)
        return _response.data

    def get_and_return_date(
        self, *, request: dt.date, request_options: typing.Optional[RequestOptions] = None
    ) -> dt.date:
        """
        Parameters
        ----------
        request : dt.date

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        dt.date

        Examples
        --------
        from seed import SeedExhaustive
        import datetime
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_date(request=datetime.date.fromisoformat("2023-01-15", ), )
        """
        _response = self._raw_client.get_and_return_date(request=request, request_options=request_options)
        return _response.data

    def get_and_return_uuid(
        self, *, request: uuid.UUID, request_options: typing.Optional[RequestOptions] = None
    ) -> uuid.UUID:
        """
        Parameters
        ----------
        request : uuid.UUID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        uuid.UUID

        Examples
        --------
        from seed import SeedExhaustive
        import uuid
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_uuid(request=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", ), )
        """
        _response = self._raw_client.get_and_return_uuid(request=request, request_options=request_options)
        return _response.data

    def get_and_return_base_64(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.primitive.get_and_return_base_64(request='SGVsbG8gd29ybGQh', )
        """
        _response = self._raw_client.get_and_return_base_64(request=request, request_options=request_options)
        return _response.data


class AsyncPrimitiveClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPrimitiveClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPrimitiveClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPrimitiveClient
        """
        return self._raw_client

    async def get_and_return_string(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_string(request='string', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_string(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_int(self, *, request: int, request_options: typing.Optional[RequestOptions] = None) -> int:
        """
        Parameters
        ----------
        request : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        int

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_int(request=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_int(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_long(
        self, *, request: int, request_options: typing.Optional[RequestOptions] = None
    ) -> int:
        """
        Parameters
        ----------
        request : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        int

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_long(request=1000000, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_long(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_double(
        self, *, request: float, request_options: typing.Optional[RequestOptions] = None
    ) -> float:
        """
        Parameters
        ----------
        request : float

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        float

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_double(request=1.1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_double(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_bool(
        self, *, request: bool, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        Parameters
        ----------
        request : bool

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_bool(request=True, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_bool(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_datetime(
        self, *, request: dt.datetime, request_options: typing.Optional[RequestOptions] = None
    ) -> dt.datetime:
        """
        Parameters
        ----------
        request : dt.datetime

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        dt.datetime

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import datetime
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_datetime(request=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_datetime(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_date(
        self, *, request: dt.date, request_options: typing.Optional[RequestOptions] = None
    ) -> dt.date:
        """
        Parameters
        ----------
        request : dt.date

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        dt.date

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import datetime
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_date(request=datetime.date.fromisoformat("2023-01-15", ), )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_date(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_uuid(
        self, *, request: uuid.UUID, request_options: typing.Optional[RequestOptions] = None
    ) -> uuid.UUID:
        """
        Parameters
        ----------
        request : uuid.UUID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        uuid.UUID

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import uuid
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_uuid(request=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", ), )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_uuid(request=request, request_options=request_options)
        return _response.data

    async def get_and_return_base_64(
        self, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Parameters
        ----------
        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.primitive.get_and_return_base_64(request='SGVsbG8gd29ybGQh', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_base_64(request=request, request_options=request_options)
        return _response.data
