# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import uuid
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.request_options import RequestOptions

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawContentTypeClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post_json_patch_content_type(
        self,
        *,
        string: typing.Optional[str] = OMIT,
        integer: typing.Optional[int] = OMIT,
        long_: typing.Optional[int] = OMIT,
        double: typing.Optional[float] = OMIT,
        bool_: typing.Optional[bool] = OMIT,
        datetime: typing.Optional[dt.datetime] = OMIT,
        date: typing.Optional[dt.date] = OMIT,
        uuid_: typing.Optional[uuid.UUID] = OMIT,
        base_64: typing.Optional[str] = OMIT,
        list_: typing.Optional[typing.Sequence[str]] = OMIT,
        set_: typing.Optional[typing.Set[str]] = OMIT,
        map_: typing.Optional[typing.Dict[int, str]] = OMIT,
        bigint: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        string : typing.Optional[str]
            This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.

        integer : typing.Optional[int]

        long_ : typing.Optional[int]

        double : typing.Optional[float]

        bool_ : typing.Optional[bool]

        datetime : typing.Optional[dt.datetime]

        date : typing.Optional[dt.date]

        uuid_ : typing.Optional[uuid.UUID]

        base_64 : typing.Optional[str]

        list_ : typing.Optional[typing.Sequence[str]]

        set_ : typing.Optional[typing.Set[str]]

        map_ : typing.Optional[typing.Dict[int, str]]

        bigint : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "foo/bar",
            method="POST",
            json={
                "string": string,
                "integer": integer,
                "long": long_,
                "double": double,
                "bool": bool_,
                "datetime": datetime,
                "date": date,
                "uuid": uuid_,
                "base64": base_64,
                "list": list_,
                "set": set_,
                "map": map_,
                "bigint": bigint,
            },
            headers={
                "content-type": "application/json-patch+json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def post_json_patch_content_with_charset_type(
        self,
        *,
        string: typing.Optional[str] = OMIT,
        integer: typing.Optional[int] = OMIT,
        long_: typing.Optional[int] = OMIT,
        double: typing.Optional[float] = OMIT,
        bool_: typing.Optional[bool] = OMIT,
        datetime: typing.Optional[dt.datetime] = OMIT,
        date: typing.Optional[dt.date] = OMIT,
        uuid_: typing.Optional[uuid.UUID] = OMIT,
        base_64: typing.Optional[str] = OMIT,
        list_: typing.Optional[typing.Sequence[str]] = OMIT,
        set_: typing.Optional[typing.Set[str]] = OMIT,
        map_: typing.Optional[typing.Dict[int, str]] = OMIT,
        bigint: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        string : typing.Optional[str]
            This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.

        integer : typing.Optional[int]

        long_ : typing.Optional[int]

        double : typing.Optional[float]

        bool_ : typing.Optional[bool]

        datetime : typing.Optional[dt.datetime]

        date : typing.Optional[dt.date]

        uuid_ : typing.Optional[uuid.UUID]

        base_64 : typing.Optional[str]

        list_ : typing.Optional[typing.Sequence[str]]

        set_ : typing.Optional[typing.Set[str]]

        map_ : typing.Optional[typing.Dict[int, str]]

        bigint : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "foo/baz",
            method="POST",
            json={
                "string": string,
                "integer": integer,
                "long": long_,
                "double": double,
                "bool": bool_,
                "datetime": datetime,
                "date": date,
                "uuid": uuid_,
                "base64": base_64,
                "list": list_,
                "set": set_,
                "map": map_,
                "bigint": bigint,
            },
            headers={
                "content-type": "application/json-patch+json; charset=utf-8",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawContentTypeClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post_json_patch_content_type(
        self,
        *,
        string: typing.Optional[str] = OMIT,
        integer: typing.Optional[int] = OMIT,
        long_: typing.Optional[int] = OMIT,
        double: typing.Optional[float] = OMIT,
        bool_: typing.Optional[bool] = OMIT,
        datetime: typing.Optional[dt.datetime] = OMIT,
        date: typing.Optional[dt.date] = OMIT,
        uuid_: typing.Optional[uuid.UUID] = OMIT,
        base_64: typing.Optional[str] = OMIT,
        list_: typing.Optional[typing.Sequence[str]] = OMIT,
        set_: typing.Optional[typing.Set[str]] = OMIT,
        map_: typing.Optional[typing.Dict[int, str]] = OMIT,
        bigint: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        string : typing.Optional[str]
            This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.

        integer : typing.Optional[int]

        long_ : typing.Optional[int]

        double : typing.Optional[float]

        bool_ : typing.Optional[bool]

        datetime : typing.Optional[dt.datetime]

        date : typing.Optional[dt.date]

        uuid_ : typing.Optional[uuid.UUID]

        base_64 : typing.Optional[str]

        list_ : typing.Optional[typing.Sequence[str]]

        set_ : typing.Optional[typing.Set[str]]

        map_ : typing.Optional[typing.Dict[int, str]]

        bigint : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "foo/bar",
            method="POST",
            json={
                "string": string,
                "integer": integer,
                "long": long_,
                "double": double,
                "bool": bool_,
                "datetime": datetime,
                "date": date,
                "uuid": uuid_,
                "base64": base_64,
                "list": list_,
                "set": set_,
                "map": map_,
                "bigint": bigint,
            },
            headers={
                "content-type": "application/json-patch+json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def post_json_patch_content_with_charset_type(
        self,
        *,
        string: typing.Optional[str] = OMIT,
        integer: typing.Optional[int] = OMIT,
        long_: typing.Optional[int] = OMIT,
        double: typing.Optional[float] = OMIT,
        bool_: typing.Optional[bool] = OMIT,
        datetime: typing.Optional[dt.datetime] = OMIT,
        date: typing.Optional[dt.date] = OMIT,
        uuid_: typing.Optional[uuid.UUID] = OMIT,
        base_64: typing.Optional[str] = OMIT,
        list_: typing.Optional[typing.Sequence[str]] = OMIT,
        set_: typing.Optional[typing.Set[str]] = OMIT,
        map_: typing.Optional[typing.Dict[int, str]] = OMIT,
        bigint: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        string : typing.Optional[str]
            This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.

        integer : typing.Optional[int]

        long_ : typing.Optional[int]

        double : typing.Optional[float]

        bool_ : typing.Optional[bool]

        datetime : typing.Optional[dt.datetime]

        date : typing.Optional[dt.date]

        uuid_ : typing.Optional[uuid.UUID]

        base_64 : typing.Optional[str]

        list_ : typing.Optional[typing.Sequence[str]]

        set_ : typing.Optional[typing.Set[str]]

        map_ : typing.Optional[typing.Dict[int, str]]

        bigint : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "foo/baz",
            method="POST",
            json={
                "string": string,
                "integer": integer,
                "long": long_,
                "double": double,
                "bool": bool_,
                "datetime": datetime,
                "date": date,
                "uuid": uuid_,
                "base64": base_64,
                "list": list_,
                "set": set_,
                "map": map_,
                "bigint": bigint,
            },
            headers={
                "content-type": "application/json-patch+json; charset=utf-8",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
