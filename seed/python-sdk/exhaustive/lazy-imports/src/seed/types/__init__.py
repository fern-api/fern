# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import docs, enum, object, union
    from .docs import ObjectWithDocs
    from .enum import ErrorWithEnumBody, WeatherReport
    from .object import (
        DoubleOptional,
        NestedObjectWithOptionalField,
        NestedObjectWithOptionalFieldError,
        NestedObjectWithRequiredField,
        NestedObjectWithRequiredFieldError,
        ObjectWithMapOfMap,
        ObjectWithOptionalField,
        ObjectWithOptionalFieldError,
        ObjectWithRequiredField,
        ObjectWithRequiredFieldError,
        OptionalAlias,
    )
    from .union import Animal, Animal_Cat, Animal_Dog, Cat, Dog, ErrorWithUnionBody
_dynamic_imports: typing.Dict[str, str] = {
    "Animal": ".union",
    "Animal_Cat": ".union",
    "Animal_Dog": ".union",
    "Cat": ".union",
    "Dog": ".union",
    "DoubleOptional": ".object",
    "ErrorWithEnumBody": ".enum",
    "ErrorWithUnionBody": ".union",
    "NestedObjectWithOptionalField": ".object",
    "NestedObjectWithOptionalFieldError": ".object",
    "NestedObjectWithRequiredField": ".object",
    "NestedObjectWithRequiredFieldError": ".object",
    "ObjectWithDocs": ".docs",
    "ObjectWithMapOfMap": ".object",
    "ObjectWithOptionalField": ".object",
    "ObjectWithOptionalFieldError": ".object",
    "ObjectWithRequiredField": ".object",
    "ObjectWithRequiredFieldError": ".object",
    "OptionalAlias": ".object",
    "WeatherReport": ".enum",
    "docs": ".",
    "enum": ".",
    "object": ".",
    "union": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Animal",
    "Animal_Cat",
    "Animal_Dog",
    "Cat",
    "Dog",
    "DoubleOptional",
    "ErrorWithEnumBody",
    "ErrorWithUnionBody",
    "NestedObjectWithOptionalField",
    "NestedObjectWithOptionalFieldError",
    "NestedObjectWithRequiredField",
    "NestedObjectWithRequiredFieldError",
    "ObjectWithDocs",
    "ObjectWithMapOfMap",
    "ObjectWithOptionalField",
    "ObjectWithOptionalFieldError",
    "ObjectWithRequiredField",
    "ObjectWithRequiredFieldError",
    "OptionalAlias",
    "WeatherReport",
    "docs",
    "enum",
    "object",
    "union",
]
