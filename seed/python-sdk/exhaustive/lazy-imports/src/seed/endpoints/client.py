# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .container.client import AsyncContainerClient, ContainerClient
from .content_type.client import AsyncContentTypeClient, ContentTypeClient
from .enum.client import AsyncEnumClient, EnumClient
from .http_methods.client import AsyncHttpMethodsClient, HttpMethodsClient
from .object.client import AsyncObjectClient, ObjectClient
from .params.client import AsyncParamsClient, ParamsClient
from .primitive.client import AsyncPrimitiveClient, PrimitiveClient
from .put.client import AsyncPutClient, PutClient
from .raw_client import AsyncRawEndpointsClient, RawEndpointsClient
from .union.client import AsyncUnionClient, UnionClient
from .urls.client import AsyncUrlsClient, UrlsClient


class EndpointsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEndpointsClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._container = None
        self._content_type = None
        self._enum = None
        self._http_methods = None
        self._object = None
        self._params = None
        self._primitive = None
        self._put = None
        self._union = None
        self._urls = None

    @property
    def with_raw_response(self) -> RawEndpointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEndpointsClient
        """
        return self._raw_client

    @property
    def container(self):
        if self._container is None:
            self._container = ContainerClient(client_wrapper=self._client_wrapper)
        return self._container

    @property
    def content_type(self):
        if self._content_type is None:
            self._content_type = ContentTypeClient(client_wrapper=self._client_wrapper)
        return self._content_type

    @property
    def enum(self):
        if self._enum is None:
            self._enum = EnumClient(client_wrapper=self._client_wrapper)
        return self._enum

    @property
    def http_methods(self):
        if self._http_methods is None:
            self._http_methods = HttpMethodsClient(client_wrapper=self._client_wrapper)
        return self._http_methods

    @property
    def object(self):
        if self._object is None:
            self._object = ObjectClient(client_wrapper=self._client_wrapper)
        return self._object

    @property
    def params(self):
        if self._params is None:
            self._params = ParamsClient(client_wrapper=self._client_wrapper)
        return self._params

    @property
    def primitive(self):
        if self._primitive is None:
            self._primitive = PrimitiveClient(client_wrapper=self._client_wrapper)
        return self._primitive

    @property
    def put(self):
        if self._put is None:
            self._put = PutClient(client_wrapper=self._client_wrapper)
        return self._put

    @property
    def union(self):
        if self._union is None:
            self._union = UnionClient(client_wrapper=self._client_wrapper)
        return self._union

    @property
    def urls(self):
        if self._urls is None:
            self._urls = UrlsClient(client_wrapper=self._client_wrapper)
        return self._urls


class AsyncEndpointsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEndpointsClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._container = None
        self._content_type = None
        self._enum = None
        self._http_methods = None
        self._object = None
        self._params = None
        self._primitive = None
        self._put = None
        self._union = None
        self._urls = None

    @property
    def with_raw_response(self) -> AsyncRawEndpointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEndpointsClient
        """
        return self._raw_client

    @property
    def container(self):
        if self._container is None:
            self._container = AsyncContainerClient(client_wrapper=self._client_wrapper)
        return self._container

    @property
    def content_type(self):
        if self._content_type is None:
            self._content_type = AsyncContentTypeClient(client_wrapper=self._client_wrapper)
        return self._content_type

    @property
    def enum(self):
        if self._enum is None:
            self._enum = AsyncEnumClient(client_wrapper=self._client_wrapper)
        return self._enum

    @property
    def http_methods(self):
        if self._http_methods is None:
            self._http_methods = AsyncHttpMethodsClient(client_wrapper=self._client_wrapper)
        return self._http_methods

    @property
    def object(self):
        if self._object is None:
            self._object = AsyncObjectClient(client_wrapper=self._client_wrapper)
        return self._object

    @property
    def params(self):
        if self._params is None:
            self._params = AsyncParamsClient(client_wrapper=self._client_wrapper)
        return self._params

    @property
    def primitive(self):
        if self._primitive is None:
            self._primitive = AsyncPrimitiveClient(client_wrapper=self._client_wrapper)
        return self._primitive

    @property
    def put(self):
        if self._put is None:
            self._put = AsyncPutClient(client_wrapper=self._client_wrapper)
        return self._put

    @property
    def union(self):
        if self._union is None:
            self._union = AsyncUnionClient(client_wrapper=self._client_wrapper)
        return self._union

    @property
    def urls(self):
        if self._urls is None:
            self._urls = AsyncUrlsClient(client_wrapper=self._client_wrapper)
        return self._urls
