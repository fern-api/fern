# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import endpoints, general_errors, inlined_requests, no_auth, no_req_body, req_with_headers, types
    from .client import AsyncSeedExhaustive, SeedExhaustive
    from .general_errors import BadObjectRequestInfo, BadRequestBody
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncSeedExhaustive": ".client",
    "BadObjectRequestInfo": ".general_errors",
    "BadRequestBody": ".general_errors",
    "SeedExhaustive": ".client",
    "__version__": ".version",
    "endpoints": ".",
    "general_errors": ".",
    "inlined_requests": ".",
    "no_auth": ".",
    "no_req_body": ".",
    "req_with_headers": ".",
    "types": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncSeedExhaustive",
    "BadObjectRequestInfo",
    "BadRequestBody",
    "SeedExhaustive",
    "__version__",
    "endpoints",
    "general_errors",
    "inlined_requests",
    "no_auth",
    "no_req_body",
    "req_with_headers",
    "types",
]
