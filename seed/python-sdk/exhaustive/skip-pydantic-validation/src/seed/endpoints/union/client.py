# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.union.types.animal import Animal
from .raw_client import AsyncRawUnionClient, RawUnionClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UnionClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUnionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUnionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUnionClient
        """
        return self._raw_client

    def get_and_return_union(
        self, *, request: Animal, request_options: typing.Optional[RequestOptions] = None
    ) -> Animal:
        """
        Parameters
        ----------
        request : Animal

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Animal

        Examples
        --------
        from seed import SeedExhaustive
        from seed.types.union import Animal_Dog
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.endpoints.union.get_and_return_union(request=Animal_Dog(name='name', likes_to_woof=True, ), )
        """
        _response = self._raw_client.get_and_return_union(request=request, request_options=request_options)
        return _response.data


class AsyncUnionClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUnionClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUnionClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUnionClient
        """
        return self._raw_client

    async def get_and_return_union(
        self, *, request: Animal, request_options: typing.Optional[RequestOptions] = None
    ) -> Animal:
        """
        Parameters
        ----------
        request : Animal

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Animal

        Examples
        --------
        from seed import AsyncSeedExhaustive
        from seed.types.union import Animal_Dog
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.endpoints.union.get_and_return_union(request=Animal_Dog(name='name', likes_to_woof=True, ), )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_and_return_union(request=request, request_options=request_options)
        return _response.data
