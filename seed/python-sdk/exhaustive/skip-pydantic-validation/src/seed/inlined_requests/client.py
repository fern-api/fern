# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.object.types.object_with_optional_field import ObjectWithOptionalField
from .raw_client import AsyncRawInlinedRequestsClient, RawInlinedRequestsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InlinedRequestsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInlinedRequestsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInlinedRequestsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInlinedRequestsClient
        """
        return self._raw_client

    def post_with_object_bodyand_response(
        self,
        *,
        string: str,
        integer: int,
        nested_object: ObjectWithOptionalField,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ObjectWithOptionalField:
        """
        POST with custom object in request body, response is an object

        Parameters
        ----------
        string : str

        integer : int

        nested_object : ObjectWithOptionalField

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ObjectWithOptionalField

        Examples
        --------
        from seed import SeedExhaustive
        from seed.types.object import ObjectWithOptionalField
        import datetime
        import uuid
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.inlined_requests.post_with_object_bodyand_response(string='string', integer=1, nested_object=ObjectWithOptionalField(string='string', integer=1, long_=1000000, double=1.1, bool_=True, datetime=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), date=datetime.date.fromisoformat("2023-01-15", ), uuid_=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", ), base_64='SGVsbG8gd29ybGQh', list_=['list', 'list'], set_={'set'}, map_={1: 'map'}, bigint=1000000, ), )
        """
        _response = self._raw_client.post_with_object_bodyand_response(
            string=string, integer=integer, nested_object=nested_object, request_options=request_options
        )
        return _response.data


class AsyncInlinedRequestsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInlinedRequestsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInlinedRequestsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInlinedRequestsClient
        """
        return self._raw_client

    async def post_with_object_bodyand_response(
        self,
        *,
        string: str,
        integer: int,
        nested_object: ObjectWithOptionalField,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ObjectWithOptionalField:
        """
        POST with custom object in request body, response is an object

        Parameters
        ----------
        string : str

        integer : int

        nested_object : ObjectWithOptionalField

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ObjectWithOptionalField

        Examples
        --------
        from seed import AsyncSeedExhaustive
        from seed.types.object import ObjectWithOptionalField
        import datetime
        import uuid
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.inlined_requests.post_with_object_bodyand_response(string='string', integer=1, nested_object=ObjectWithOptionalField(string='string', integer=1, long_=1000000, double=1.1, bool_=True, datetime=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), date=datetime.date.fromisoformat("2023-01-15", ), uuid_=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", ), base_64='SGVsbG8gd29ybGQh', list_=['list', 'list'], set_={'set'}, map_={1: 'map'}, bigint=1000000, ), )
        asyncio.run(main())
        """
        _response = await self._raw_client.post_with_object_bodyand_response(
            string=string, integer=integer, nested_object=nested_object, request_options=request_options
        )
        return _response.data
