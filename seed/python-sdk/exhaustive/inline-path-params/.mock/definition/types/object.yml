types:
  ObjectWithOptionalField: #generic object that supports any type, makes it easier to use when testing
    properties:
      string: 
        type: optional<string>
        docs: This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered.
      integer: optional<integer>
      long: optional<long>
      double: optional<double>
      bool: optional<boolean>
      datetime: optional<datetime>
      date: optional<date>
      uuid: optional<uuid>
      base64: optional<base64>
      list: optional<list<string>>
      set: optional<set<string>>
      map: optional<map<integer, string>>
      bigint: optional<bigint>

  ObjectWithRequiredField:
    properties:
      string: string

  ObjectWithMapOfMap:
    properties:
      map: map<string, map<string, string>>

  NestedObjectWithOptionalField:
    properties:
      string: optional<string>
      NestedObject: optional<ObjectWithOptionalField>

  NestedObjectWithRequiredField:
    properties:
      string: string
      NestedObject: ObjectWithOptionalField

  DoubleOptional:
    properties:
      optionalAlias: optional<OptionalAlias>

  OptionalAlias: optional<string>

errors:
  ObjectWithOptionalFieldError:
    status-code: 400
    type: ObjectWithOptionalField

  ObjectWithRequiredFieldError:
    status-code: 400
    type: ObjectWithRequiredField

  NestedObjectWithOptionalFieldError:
    status-code: 400
    type: NestedObjectWithOptionalField

  NestedObjectWithRequiredFieldError:
    status-code: 400
    type: NestedObjectWithRequiredField
