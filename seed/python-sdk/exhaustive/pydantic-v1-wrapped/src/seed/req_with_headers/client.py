# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawReqWithHeadersClient, RawReqWithHeadersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReqWithHeadersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawReqWithHeadersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawReqWithHeadersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawReqWithHeadersClient
        """
        return self._raw_client

    def get_with_custom_header(
        self,
        *,
        x_test_service_header: str,
        x_test_endpoint_header: str,
        request: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        x_test_service_header : str

        x_test_endpoint_header : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedExhaustive
        client = SeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        client.req_with_headers.get_with_custom_header(x_test_service_header='X-TEST-SERVICE-HEADER', x_test_endpoint_header='X-TEST-ENDPOINT-HEADER', request='string', )
        """
        _response = self._raw_client.get_with_custom_header(
            x_test_service_header=x_test_service_header,
            x_test_endpoint_header=x_test_endpoint_header,
            request=request,
            request_options=request_options,
        )
        return _response.data


class AsyncReqWithHeadersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawReqWithHeadersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawReqWithHeadersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawReqWithHeadersClient
        """
        return self._raw_client

    async def get_with_custom_header(
        self,
        *,
        x_test_service_header: str,
        x_test_endpoint_header: str,
        request: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        x_test_service_header : str

        x_test_endpoint_header : str

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedExhaustive
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.req_with_headers.get_with_custom_header(x_test_service_header='X-TEST-SERVICE-HEADER', x_test_endpoint_header='X-TEST-ENDPOINT-HEADER', request='string', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_with_custom_header(
            x_test_service_header=x_test_service_header,
            x_test_endpoint_header=x_test_endpoint_header,
            request=request,
            request_options=request_options,
        )
        return _response.data
