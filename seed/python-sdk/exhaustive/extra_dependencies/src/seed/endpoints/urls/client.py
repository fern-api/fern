# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
from .raw_client import RawUrlsClient
import typing
from ...core.request_options import RequestOptions
from ...core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawUrlsClient
class UrlsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUrlsClient(client_wrapper=client_wrapper)
    
    @property
    def with_raw_response(self) -> RawUrlsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.
        
        Returns
        -------
        RawUrlsClient
        """
        return self._raw_client
    
    def with_mixed_case(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        from seed import SeedExhaustive
        
        client = SeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.endpoints.urls.with_mixed_case()
        """
        _response = self._raw_client.with_mixed_case(request_options=request_options)
        return _response.data
    
    def no_ending_slash(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        from seed import SeedExhaustive
        
        client = SeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.endpoints.urls.no_ending_slash()
        """
        _response = self._raw_client.no_ending_slash(request_options=request_options)
        return _response.data
    
    def with_ending_slash(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        from seed import SeedExhaustive
        
        client = SeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.endpoints.urls.with_ending_slash()
        """
        _response = self._raw_client.with_ending_slash(request_options=request_options)
        return _response.data
    
    def with_underscores(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        from seed import SeedExhaustive
        
        client = SeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.endpoints.urls.with_underscores()
        """
        _response = self._raw_client.with_underscores(request_options=request_options)
        return _response.data
class AsyncUrlsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUrlsClient(client_wrapper=client_wrapper)
    
    @property
    def with_raw_response(self) -> AsyncRawUrlsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.
        
        Returns
        -------
        AsyncRawUrlsClient
        """
        return self._raw_client
    
    async def with_mixed_case(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        import asyncio
        
        from seed import AsyncSeedExhaustive
        
        client = AsyncSeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        
        
        async def main() -> None:
            await client.endpoints.urls.with_mixed_case()
        
        
        asyncio.run(main())
        """
        _response = await self._raw_client.with_mixed_case(request_options=request_options)
        return _response.data
    
    async def no_ending_slash(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        import asyncio
        
        from seed import AsyncSeedExhaustive
        
        client = AsyncSeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        
        
        async def main() -> None:
            await client.endpoints.urls.no_ending_slash()
        
        
        asyncio.run(main())
        """
        _response = await self._raw_client.no_ending_slash(request_options=request_options)
        return _response.data
    
    async def with_ending_slash(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        import asyncio
        
        from seed import AsyncSeedExhaustive
        
        client = AsyncSeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        
        
        async def main() -> None:
            await client.endpoints.urls.with_ending_slash()
        
        
        asyncio.run(main())
        """
        _response = await self._raw_client.with_ending_slash(request_options=request_options)
        return _response.data
    
    async def with_underscores(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        str
        
        Examples
        --------
        import asyncio
        
        from seed import AsyncSeedExhaustive
        
        client = AsyncSeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        
        
        async def main() -> None:
            await client.endpoints.urls.with_underscores()
        
        
        asyncio.run(main())
        """
        _response = await self._raw_client.with_underscores(request_options=request_options)
        return _response.data
