# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class ObjectWithDocs(UniversalBaseModel):
    string: str = pydantic.Field()
    """
    Characters that could lead to broken generated SDKs:
    
    JSDoc (JavaScript/TypeScript):
    - @: Used for JSDoc tags
    - {: }: Used for type definitions
    - <: >: HTML tags
    - *: Can interfere with comment blocks
    - /**: JSDoc comment start
    - ** /: JSDoc comment end
    - &: HTML entities
    
    XMLDoc (C#):
    - <: >: XML tags
    - &: ': ": <: >: XML special characters
    - {: }: Used for interpolated strings
    - ///: Comment marker
    - /**: Block comment start
    - ** /: Block comment end
    
    Javadoc (Java):
    - @: Used for Javadoc tags
    - <: >: HTML tags
    - &: HTML entities
    - *: Can interfere with comment blocks
    - /**: Javadoc comment start
    - ** /: Javadoc comment end
    
    Doxygen (C++):
    - \: Used for Doxygen commands
    - @: Alternative command prefix
    - <: >: XML/HTML tags
    - &: HTML entities
    - /**: C-style comment start
    - ** /: C-style comment end
    
    RDoc (Ruby):
    - :: Used in symbol notation
    - =: Section markers
    - #: Comment marker
    - =begin: Block comment start
    - =end: Block comment end
    - @: Instance variable prefix
    - $: Global variable prefix
    - %: String literal delimiter
    - #{: String interpolation start
    - }: String interpolation end
    
    PHPDoc (PHP):
    - @: Used for PHPDoc tags
    - {: }: Used for type definitions
    - $: Variable prefix
    - /**: PHPDoc comment start
    - ** /: PHPDoc comment end
    - *: Can interfere with comment blocks
    - &: HTML entities
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.ignore
