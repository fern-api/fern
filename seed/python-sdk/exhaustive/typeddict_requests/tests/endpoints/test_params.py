# This file was auto-generated by Fern from our API Definition.

import typing

from seed import AsyncSeedExhaustive, SeedExhaustive

from ..utilities import validate_response


async def test_get_with_path(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    expected_response: typing.Any = "string"
    expected_types: typing.Any = None
    response = client.endpoints.params.get_with_path(param="string")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.params.get_with_path(param="string")
    validate_response(async_response, expected_response, expected_types)


async def test_get_with_query(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.endpoints.params.get_with_query(query="string", number=1) is None  # type: ignore[func-returns-value]

    assert await async_client.endpoints.params.get_with_query(query="string", number=1) is None  # type: ignore[func-returns-value]


async def test_get_with_allow_multiple_query(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.endpoints.params.get_with_allow_multiple_query(query="string", number=1) is None  # type: ignore[func-returns-value]

    assert await async_client.endpoints.params.get_with_allow_multiple_query(query="string", number=1) is None  # type: ignore[func-returns-value]


async def test_get_with_path_and_query(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.endpoints.params.get_with_path_and_query(param="string", query="string") is None  # type: ignore[func-returns-value]

    assert await async_client.endpoints.params.get_with_path_and_query(param="string", query="string") is None  # type: ignore[func-returns-value]


async def test_modify_with_path(client: SeedExhaustive, async_client: AsyncSeedExhaustive) -> None:
    expected_response: typing.Any = "string"
    expected_types: typing.Any = None
    response = client.endpoints.params.modify_with_path(param="string", request="string")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.endpoints.params.modify_with_path(param="string", request="string")
    validate_response(async_response, expected_response, expected_types)
