# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .raw_client import AsyncRawEndpointsClient, RawEndpointsClient

if typing.TYPE_CHECKING:
    from .container.client import AsyncContainerClient, ContainerClient
    from .content_type.client import AsyncContentTypeClient, ContentTypeClient
    from .enum.client import AsyncEnumClient, EnumClient
    from .http_methods.client import AsyncHttpMethodsClient, HttpMethodsClient
    from .object.client import AsyncObjectClient, ObjectClient
    from .params.client import AsyncParamsClient, ParamsClient
    from .primitive.client import AsyncPrimitiveClient, PrimitiveClient
    from .put.client import AsyncPutClient, PutClient
    from .union.client import AsyncUnionClient, UnionClient
    from .urls.client import AsyncUrlsClient, UrlsClient


class EndpointsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEndpointsClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._container: typing.Optional[ContainerClient] = None
        self._content_type: typing.Optional[ContentTypeClient] = None
        self._enum: typing.Optional[EnumClient] = None
        self._http_methods: typing.Optional[HttpMethodsClient] = None
        self._object: typing.Optional[ObjectClient] = None
        self._params: typing.Optional[ParamsClient] = None
        self._primitive: typing.Optional[PrimitiveClient] = None
        self._put: typing.Optional[PutClient] = None
        self._union: typing.Optional[UnionClient] = None
        self._urls: typing.Optional[UrlsClient] = None

    @property
    def with_raw_response(self) -> RawEndpointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEndpointsClient
        """
        return self._raw_client

    @property
    def container(self):
        if self._container is None:
            from .container.client import ContainerClient  # noqa: E402

            self._container = ContainerClient(client_wrapper=self._client_wrapper)
        return self._container

    @property
    def content_type(self):
        if self._content_type is None:
            from .content_type.client import ContentTypeClient  # noqa: E402

            self._content_type = ContentTypeClient(client_wrapper=self._client_wrapper)
        return self._content_type

    @property
    def enum(self):
        if self._enum is None:
            from .enum.client import EnumClient  # noqa: E402

            self._enum = EnumClient(client_wrapper=self._client_wrapper)
        return self._enum

    @property
    def http_methods(self):
        if self._http_methods is None:
            from .http_methods.client import HttpMethodsClient  # noqa: E402

            self._http_methods = HttpMethodsClient(client_wrapper=self._client_wrapper)
        return self._http_methods

    @property
    def object(self):
        if self._object is None:
            from .object.client import ObjectClient  # noqa: E402

            self._object = ObjectClient(client_wrapper=self._client_wrapper)
        return self._object

    @property
    def params(self):
        if self._params is None:
            from .params.client import ParamsClient  # noqa: E402

            self._params = ParamsClient(client_wrapper=self._client_wrapper)
        return self._params

    @property
    def primitive(self):
        if self._primitive is None:
            from .primitive.client import PrimitiveClient  # noqa: E402

            self._primitive = PrimitiveClient(client_wrapper=self._client_wrapper)
        return self._primitive

    @property
    def put(self):
        if self._put is None:
            from .put.client import PutClient  # noqa: E402

            self._put = PutClient(client_wrapper=self._client_wrapper)
        return self._put

    @property
    def union(self):
        if self._union is None:
            from .union.client import UnionClient  # noqa: E402

            self._union = UnionClient(client_wrapper=self._client_wrapper)
        return self._union

    @property
    def urls(self):
        if self._urls is None:
            from .urls.client import UrlsClient  # noqa: E402

            self._urls = UrlsClient(client_wrapper=self._client_wrapper)
        return self._urls


class AsyncEndpointsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEndpointsClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._container: typing.Optional[AsyncContainerClient] = None
        self._content_type: typing.Optional[AsyncContentTypeClient] = None
        self._enum: typing.Optional[AsyncEnumClient] = None
        self._http_methods: typing.Optional[AsyncHttpMethodsClient] = None
        self._object: typing.Optional[AsyncObjectClient] = None
        self._params: typing.Optional[AsyncParamsClient] = None
        self._primitive: typing.Optional[AsyncPrimitiveClient] = None
        self._put: typing.Optional[AsyncPutClient] = None
        self._union: typing.Optional[AsyncUnionClient] = None
        self._urls: typing.Optional[AsyncUrlsClient] = None

    @property
    def with_raw_response(self) -> AsyncRawEndpointsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEndpointsClient
        """
        return self._raw_client

    @property
    def container(self):
        if self._container is None:
            from .container.client import AsyncContainerClient  # noqa: E402

            self._container = AsyncContainerClient(client_wrapper=self._client_wrapper)
        return self._container

    @property
    def content_type(self):
        if self._content_type is None:
            from .content_type.client import AsyncContentTypeClient  # noqa: E402

            self._content_type = AsyncContentTypeClient(client_wrapper=self._client_wrapper)
        return self._content_type

    @property
    def enum(self):
        if self._enum is None:
            from .enum.client import AsyncEnumClient  # noqa: E402

            self._enum = AsyncEnumClient(client_wrapper=self._client_wrapper)
        return self._enum

    @property
    def http_methods(self):
        if self._http_methods is None:
            from .http_methods.client import AsyncHttpMethodsClient  # noqa: E402

            self._http_methods = AsyncHttpMethodsClient(client_wrapper=self._client_wrapper)
        return self._http_methods

    @property
    def object(self):
        if self._object is None:
            from .object.client import AsyncObjectClient  # noqa: E402

            self._object = AsyncObjectClient(client_wrapper=self._client_wrapper)
        return self._object

    @property
    def params(self):
        if self._params is None:
            from .params.client import AsyncParamsClient  # noqa: E402

            self._params = AsyncParamsClient(client_wrapper=self._client_wrapper)
        return self._params

    @property
    def primitive(self):
        if self._primitive is None:
            from .primitive.client import AsyncPrimitiveClient  # noqa: E402

            self._primitive = AsyncPrimitiveClient(client_wrapper=self._client_wrapper)
        return self._primitive

    @property
    def put(self):
        if self._put is None:
            from .put.client import AsyncPutClient  # noqa: E402

            self._put = AsyncPutClient(client_wrapper=self._client_wrapper)
        return self._put

    @property
    def union(self):
        if self._union is None:
            from .union.client import AsyncUnionClient  # noqa: E402

            self._union = AsyncUnionClient(client_wrapper=self._client_wrapper)
        return self._union

    @property
    def urls(self):
        if self._urls is None:
            from .urls.client import AsyncUrlsClient  # noqa: E402

            self._urls = AsyncUrlsClient(client_wrapper=self._client_wrapper)
        return self._urls
