# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper

if typing.TYPE_CHECKING:
    from .endpoints.client import AsyncEndpointsClient, EndpointsClient
    from .inlined_requests.client import AsyncInlinedRequestsClient, InlinedRequestsClient
    from .no_auth.client import AsyncNoAuthClient, NoAuthClient
    from .no_req_body.client import AsyncNoReqBodyClient, NoReqBodyClient
    from .req_with_headers.client import AsyncReqWithHeadersClient, ReqWithHeadersClient


class SeedExhaustive:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 5 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedExhaustive

    client = SeedExhaustive(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 5 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._endpoints: typing.Optional[EndpointsClient] = None
        self._inlined_requests: typing.Optional[InlinedRequestsClient] = None
        self._no_auth: typing.Optional[NoAuthClient] = None
        self._no_req_body: typing.Optional[NoReqBodyClient] = None
        self._req_with_headers: typing.Optional[ReqWithHeadersClient] = None

    @property
    def endpoints(self):
        if self._endpoints is None:
            from .endpoints.client import EndpointsClient  # noqa: E402

            self._endpoints = EndpointsClient(client_wrapper=self._client_wrapper)
        return self._endpoints

    @property
    def inlined_requests(self):
        if self._inlined_requests is None:
            from .inlined_requests.client import InlinedRequestsClient  # noqa: E402

            self._inlined_requests = InlinedRequestsClient(client_wrapper=self._client_wrapper)
        return self._inlined_requests

    @property
    def no_auth(self):
        if self._no_auth is None:
            from .no_auth.client import NoAuthClient  # noqa: E402

            self._no_auth = NoAuthClient(client_wrapper=self._client_wrapper)
        return self._no_auth

    @property
    def no_req_body(self):
        if self._no_req_body is None:
            from .no_req_body.client import NoReqBodyClient  # noqa: E402

            self._no_req_body = NoReqBodyClient(client_wrapper=self._client_wrapper)
        return self._no_req_body

    @property
    def req_with_headers(self):
        if self._req_with_headers is None:
            from .req_with_headers.client import ReqWithHeadersClient  # noqa: E402

            self._req_with_headers = ReqWithHeadersClient(client_wrapper=self._client_wrapper)
        return self._req_with_headers


class AsyncSeedExhaustive:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    token : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 5 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedExhaustive

    client = AsyncSeedExhaustive(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 5 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            token=token,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._endpoints: typing.Optional[AsyncEndpointsClient] = None
        self._inlined_requests: typing.Optional[AsyncInlinedRequestsClient] = None
        self._no_auth: typing.Optional[AsyncNoAuthClient] = None
        self._no_req_body: typing.Optional[AsyncNoReqBodyClient] = None
        self._req_with_headers: typing.Optional[AsyncReqWithHeadersClient] = None

    @property
    def endpoints(self):
        if self._endpoints is None:
            from .endpoints.client import AsyncEndpointsClient  # noqa: E402

            self._endpoints = AsyncEndpointsClient(client_wrapper=self._client_wrapper)
        return self._endpoints

    @property
    def inlined_requests(self):
        if self._inlined_requests is None:
            from .inlined_requests.client import AsyncInlinedRequestsClient  # noqa: E402

            self._inlined_requests = AsyncInlinedRequestsClient(client_wrapper=self._client_wrapper)
        return self._inlined_requests

    @property
    def no_auth(self):
        if self._no_auth is None:
            from .no_auth.client import AsyncNoAuthClient  # noqa: E402

            self._no_auth = AsyncNoAuthClient(client_wrapper=self._client_wrapper)
        return self._no_auth

    @property
    def no_req_body(self):
        if self._no_req_body is None:
            from .no_req_body.client import AsyncNoReqBodyClient  # noqa: E402

            self._no_req_body = AsyncNoReqBodyClient(client_wrapper=self._client_wrapper)
        return self._no_req_body

    @property
    def req_with_headers(self):
        if self._req_with_headers is None:
            from .req_with_headers.client import AsyncReqWithHeadersClient  # noqa: E402

            self._req_with_headers = AsyncReqWithHeadersClient(client_wrapper=self._client_wrapper)
        return self._req_with_headers
