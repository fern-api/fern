# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from .raw_client import RawEnumClient
from ...types.enum.types.weather_report import WeatherReport
from ...core.request_options import RequestOptions
from ...core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawEnumClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class EnumClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEnumClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEnumClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEnumClient
        """
        return self._raw_client

    def get_and_return_enum(
        self, *, request: WeatherReport, request_options: typing.Optional[RequestOptions] = None
    ) -> WeatherReport:
        """
        Parameters
        ----------
        request : WeatherReport

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WeatherReport

        Examples
        --------
        from seed import SeedExhaustive

        client = SeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.endpoints.enum.get_and_return_enum(
            request="SUNNY",
        )
        """
        response = self._raw_client.get_and_return_enum(
            request=request,
            request_options=request_options,
        )
        return response.data


class AsyncEnumClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEnumClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEnumClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEnumClient
        """
        return self._raw_client

    async def get_and_return_enum(
        self, *, request: WeatherReport, request_options: typing.Optional[RequestOptions] = None
    ) -> WeatherReport:
        """
        Parameters
        ----------
        request : WeatherReport

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WeatherReport

        Examples
        --------
        import asyncio

        from seed import AsyncSeedExhaustive

        client = AsyncSeedExhaustive(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.endpoints.enum.get_and_return_enum(
                request="SUNNY",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_and_return_enum(
            request=request,
            request_options=request_options,
        )
        return response.data
