# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawUserClient, RawUserClient
from .types.user import User

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def get_user(
        self, tenant_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedPathParameters
        client = SeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        client.user.get_user(tenant_id='tenant_id', user_id='user_id', )
        """
        _response = self._raw_client.get_user(tenant_id, user_id, request_options=request_options)
        return _response.data

    def create_user(
        self,
        tenant_id: str,
        *,
        name: str,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        name : str

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedPathParameters
        client = SeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        client.user.create_user(tenant_id='tenant_id', name='name', tags=['tags', 'tags'], )
        """
        _response = self._raw_client.create_user(tenant_id, name=name, tags=tags, request_options=request_options)
        return _response.data

    def update_user(
        self,
        tenant_id: str,
        user_id: str,
        *,
        name: str,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        user_id : str

        name : str

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedPathParameters
        client = SeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        client.user.update_user(tenant_id='tenant_id', user_id='user_id', name='name', tags=['tags', 'tags'], )
        """
        _response = self._raw_client.update_user(
            tenant_id, user_id, name=name, tags=tags, request_options=request_options
        )
        return _response.data

    def search_users(
        self,
        tenant_id: str,
        user_id: str,
        *,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        tenant_id : str

        user_id : str

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]

        Examples
        --------
        from seed import SeedPathParameters
        client = SeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        client.user.search_users(tenant_id='tenant_id', user_id='user_id', limit=1, )
        """
        _response = self._raw_client.search_users(tenant_id, user_id, limit=limit, request_options=request_options)
        return _response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def get_user(
        self, tenant_id: str, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import AsyncSeedPathParameters
        import asyncio
        client = AsyncSeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.get_user(tenant_id='tenant_id', user_id='user_id', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get_user(tenant_id, user_id, request_options=request_options)
        return _response.data

    async def create_user(
        self,
        tenant_id: str,
        *,
        name: str,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        name : str

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import AsyncSeedPathParameters
        import asyncio
        client = AsyncSeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.create_user(tenant_id='tenant_id', name='name', tags=['tags', 'tags'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.create_user(tenant_id, name=name, tags=tags, request_options=request_options)
        return _response.data

    async def update_user(
        self,
        tenant_id: str,
        user_id: str,
        *,
        name: str,
        tags: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        user_id : str

        name : str

        tags : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import AsyncSeedPathParameters
        import asyncio
        client = AsyncSeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.update_user(tenant_id='tenant_id', user_id='user_id', name='name', tags=['tags', 'tags'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.update_user(
            tenant_id, user_id, name=name, tags=tags, request_options=request_options
        )
        return _response.data

    async def search_users(
        self,
        tenant_id: str,
        user_id: str,
        *,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[User]:
        """
        Parameters
        ----------
        tenant_id : str

        user_id : str

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[User]

        Examples
        --------
        from seed import AsyncSeedPathParameters
        import asyncio
        client = AsyncSeedPathParameters(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.user.search_users(tenant_id='tenant_id', user_id='user_id', limit=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.search_users(
            tenant_id, user_id, limit=limit, request_options=request_options
        )
        return _response.data
