# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawOrganizationsClient
import typing
from ..core.request_options import RequestOptions
from .types.organization import Organization
from ..user.types.user import User
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawOrganizationsClient


class OrganizationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOrganizationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOrganizationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOrganizationsClient
        """
        return self._raw_client

    def get_organization(
        self, tenant_id: str, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Organization:
        """
        Parameters
        ----------
        tenant_id : str

        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization

        Examples
        --------
        from seed import SeedPathParameters

        client = SeedPathParameters(
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.get_organization(
            tenant_id="tenant_id",
            organization_id="organization_id",
        )
        """
        response = self._raw_client.get_organization(
            tenant_id,
            organization_id,
            request_options=request_options,
        )
        return response.data

    def get_organization_user(
        self,
        tenant_id: str,
        organization_id: str,
        user_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        organization_id : str

        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedPathParameters

        client = SeedPathParameters(
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.get_organization_user(
            tenant_id="tenant_id",
            organization_id="organization_id",
            user_id="user_id",
        )
        """
        response = self._raw_client.get_organization_user(
            tenant_id,
            organization_id,
            user_id,
            request_options=request_options,
        )
        return response.data

    def search_organizations(
        self,
        tenant_id: str,
        organization_id: str,
        *,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        tenant_id : str

        organization_id : str

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]

        Examples
        --------
        from seed import SeedPathParameters

        client = SeedPathParameters(
            base_url="https://yourhost.com/path/to/api",
        )
        client.organizations.search_organizations(
            tenant_id="tenant_id",
            organization_id="organization_id",
            limit=1,
        )
        """
        response = self._raw_client.search_organizations(
            tenant_id,
            organization_id,
            limit=limit,
            request_options=request_options,
        )
        return response.data


class AsyncOrganizationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOrganizationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOrganizationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOrganizationsClient
        """
        return self._raw_client

    async def get_organization(
        self, tenant_id: str, organization_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Organization:
        """
        Parameters
        ----------
        tenant_id : str

        organization_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Organization

        Examples
        --------
        import asyncio

        from seed import AsyncSeedPathParameters

        client = AsyncSeedPathParameters(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.get_organization(
                tenant_id="tenant_id",
                organization_id="organization_id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_organization(
            tenant_id,
            organization_id,
            request_options=request_options,
        )
        return response.data

    async def get_organization_user(
        self,
        tenant_id: str,
        organization_id: str,
        user_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        tenant_id : str

        organization_id : str

        user_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        import asyncio

        from seed import AsyncSeedPathParameters

        client = AsyncSeedPathParameters(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.get_organization_user(
                tenant_id="tenant_id",
                organization_id="organization_id",
                user_id="user_id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_organization_user(
            tenant_id,
            organization_id,
            user_id,
            request_options=request_options,
        )
        return response.data

    async def search_organizations(
        self,
        tenant_id: str,
        organization_id: str,
        *,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Organization]:
        """
        Parameters
        ----------
        tenant_id : str

        organization_id : str

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Organization]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedPathParameters

        client = AsyncSeedPathParameters(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.organizations.search_organizations(
                tenant_id="tenant_id",
                organization_id="organization_id",
                limit=1,
            )


        asyncio.run(main())
        """
        response = await self._raw_client.search_organizations(
            tenant_id,
            organization_id,
            limit=limit,
            request_options=request_options,
        )
        return response.data
