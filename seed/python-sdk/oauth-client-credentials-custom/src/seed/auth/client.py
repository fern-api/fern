# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawAuthClient
from ..core.request_options import RequestOptions
from .types.token_response import TokenResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawAuthClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthClient
        """
        return self._raw_client

    def get_token_with_client_credentials(
        self,
        *,
        cid: str,
        csr: str,
        scp: str,
        entity_id: str,
        scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TokenResponse:
        """
        Parameters
        ----------
        cid : str

        csr : str

        scp : str

        entity_id : str

        scope : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TokenResponse

        Examples
        --------
        from seed import SeedOauthClientCredentials

        client = SeedOauthClientCredentials(
            base_url="https://yourhost.com/path/to/api",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.auth.get_token_with_client_credentials(
            cid="cid",
            csr="csr",
            scp="scp",
            entity_id="entity_id",
            scope="scope",
        )
        """
        response = self._raw_client.get_token_with_client_credentials(
            cid=cid, csr=csr, scp=scp, entity_id=entity_id, scope=scope, request_options=request_options
        )
        return response.data

    def refresh_token(
        self,
        *,
        client_id: str,
        client_secret: str,
        refresh_token: str,
        scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TokenResponse:
        """
        Parameters
        ----------
        client_id : str

        client_secret : str

        refresh_token : str

        scope : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TokenResponse

        Examples
        --------
        from seed import SeedOauthClientCredentials

        client = SeedOauthClientCredentials(
            base_url="https://yourhost.com/path/to/api",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )
        client.auth.refresh_token(
            client_id="client_id",
            client_secret="client_secret",
            refresh_token="refresh_token",
            scope="scope",
        )
        """
        response = self._raw_client.refresh_token(
            client_id=client_id,
            client_secret=client_secret,
            refresh_token=refresh_token,
            scope=scope,
            request_options=request_options,
        )
        return response.data


class AsyncAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthClient
        """
        return self._raw_client

    async def get_token_with_client_credentials(
        self,
        *,
        cid: str,
        csr: str,
        scp: str,
        entity_id: str,
        scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TokenResponse:
        """
        Parameters
        ----------
        cid : str

        csr : str

        scp : str

        entity_id : str

        scope : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TokenResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedOauthClientCredentials

        client = AsyncSeedOauthClientCredentials(
            base_url="https://yourhost.com/path/to/api",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.auth.get_token_with_client_credentials(
                cid="cid",
                csr="csr",
                scp="scp",
                entity_id="entity_id",
                scope="scope",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_token_with_client_credentials(
            cid=cid, csr=csr, scp=scp, entity_id=entity_id, scope=scope, request_options=request_options
        )
        return response.data

    async def refresh_token(
        self,
        *,
        client_id: str,
        client_secret: str,
        refresh_token: str,
        scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TokenResponse:
        """
        Parameters
        ----------
        client_id : str

        client_secret : str

        refresh_token : str

        scope : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TokenResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedOauthClientCredentials

        client = AsyncSeedOauthClientCredentials(
            base_url="https://yourhost.com/path/to/api",
            client_id="YOUR_CLIENT_ID",
            client_secret="YOUR_CLIENT_SECRET",
        )


        async def main() -> None:
            await client.auth.refresh_token(
                client_id="client_id",
                client_secret="client_secret",
                refresh_token="refresh_token",
                scope="scope",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.refresh_token(
            client_id=client_id,
            client_secret=client_secret,
            refresh_token=refresh_token,
            scope=scope,
            request_options=request_options,
        )
        return response.data
