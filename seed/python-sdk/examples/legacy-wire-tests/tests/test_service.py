# This file was auto-generated by Fern from our API Definition.

import datetime
import typing
import uuid

from .utilities import validate_response
from seed import AsyncSeedExamples, SeedExamples
from seed.commons.types import Data_String, EventInfo_Metadata, Metadata
from seed.types import (
    Actor,
    Directory,
    Entity,
    Exception_Generic,
    ExtendedMovie,
    File,
    Metadata_Html,
    Migration,
    Moment,
    Node,
    Test_And,
    Tree,
)


async def test_get_movie(client: SeedExamples, async_client: AsyncSeedExamples) -> None:
    expected_response: typing.Any = {
        "id": "movie-c06a4ad7",
        "prequel": "movie-cv9b914f",
        "title": "The Boy and the Heron",
        "from": "Hayao Miyazaki",
        "rating": 8,
        "type": "movie",
        "tag": "tag-wf9as23d",
        "metadata": {
            "actors": ["Christian Bale", "Florence Pugh", "Willem Dafoe"],
            "releaseDate": "2023-12-08",
            "ratings": {"rottenTomatoes": 97, "imdb": 7.6},
        },
        "revenue": 1000000,
    }
    expected_types: typing.Any = {
        "id": None,
        "prequel": None,
        "title": None,
        "from": None,
        "rating": None,
        "type": None,
        "tag": None,
        "metadata": ("dict", {0: (None, None), 1: (None, None), 2: (None, None)}),
        "revenue": None,
    }
    response = client.service.get_movie(movie_id="movie-c06a4ad7")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.service.get_movie(movie_id="movie-c06a4ad7")
    validate_response(async_response, expected_response, expected_types)


async def test_create_movie(client: SeedExamples, async_client: AsyncSeedExamples) -> None:
    expected_response: typing.Any = "movie-c06a4ad7"
    expected_types: typing.Any = None
    response = client.service.create_movie(
        id="movie-c06a4ad7",
        prequel="movie-cv9b914f",
        title="The Boy and the Heron",
        from_="Hayao Miyazaki",
        rating=8.0,
        tag="tag-wf9as23d",
        metadata={
            "actors": ["Christian Bale", "Florence Pugh", "Willem Dafoe"],
            "releaseDate": "2023-12-08",
            "ratings": {"rottenTomatoes": 97, "imdb": 7.6},
        },
        revenue=1000000,
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.service.create_movie(
        id="movie-c06a4ad7",
        prequel="movie-cv9b914f",
        title="The Boy and the Heron",
        from_="Hayao Miyazaki",
        rating=8.0,
        tag="tag-wf9as23d",
        metadata={
            "actors": ["Christian Bale", "Florence Pugh", "Willem Dafoe"],
            "releaseDate": "2023-12-08",
            "ratings": {"rottenTomatoes": 97, "imdb": 7.6},
        },
        revenue=1000000,
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get_metadata(client: SeedExamples, async_client: AsyncSeedExamples) -> None:
    expected_response: typing.Any = {
        "type": "html",
        "extra": {"version": "0.0.1", "tenancy": "test"},
        "tags": ["development", "public"],
        "value": "<head>...</head>",
    }
    expected_types: typing.Any = "no_validate"
    response = client.service.get_metadata(x_api_version="0.0.1", shallow=False, tag="development")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.service.get_metadata(x_api_version="0.0.1", shallow=False, tag="development")
    validate_response(async_response, expected_response, expected_types)


async def test_create_big_entity(client: SeedExamples, async_client: AsyncSeedExamples) -> None:
    expected_response: typing.Any = {
        "response": {"key": "value"},
        "identifiers": [
            {"type": "primitive", "value": "value", "label": "label"},
            {"type": "primitive", "value": "value", "label": "label"},
        ],
    }
    expected_types: typing.Any = {
        "response": None,
        "identifiers": (
            "list",
            {0: {"type": None, "value": None, "label": None}, 1: {"type": None, "value": None, "label": None}},
        ),
    }
    response = client.service.create_big_entity(
        cast_member=Actor(name="name", id="id"),
        extended_movie=ExtendedMovie(
            id="id",
            prequel="prequel",
            title="title",
            from_="from",
            rating=1.1,
            tag="tag",
            book="book",
            metadata={"metadata": {"key": "value"}},
            revenue=1000000,
            cast=["cast", "cast"],
        ),
        entity=Entity(type="primitive", name="name"),
        metadata=Metadata_Html(value="metadata"),
        common_metadata=Metadata(id="id", data={"data": "data"}, json_string="jsonString"),
        event_info=EventInfo_Metadata(id="id", data={"data": "data"}, json_string="jsonString"),
        data=Data_String(value="data"),
        migration=Migration(name="name", status="RUNNING"),
        exception=Exception_Generic(
            exception_type="exceptionType",
            exception_message="exceptionMessage",
            exception_stacktrace="exceptionStacktrace",
        ),
        test=Test_And(value=True),
        node=Node(
            name="name",
            nodes=[
                Node(
                    name="name",
                    nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])],
                    trees=[Tree(nodes=[]), Tree(nodes=[])],
                ),
                Node(
                    name="name",
                    nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])],
                    trees=[Tree(nodes=[]), Tree(nodes=[])],
                ),
            ],
            trees=[
                Tree(nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])]),
                Tree(nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])]),
            ],
        ),
        directory=Directory(
            name="name",
            files=[File(name="name", contents="contents"), File(name="name", contents="contents")],
            directories=[
                Directory(
                    name="name",
                    files=[File(name="name", contents="contents"), File(name="name", contents="contents")],
                    directories=[
                        Directory(name="name", files=[], directories=[]),
                        Directory(name="name", files=[], directories=[]),
                    ],
                ),
                Directory(
                    name="name",
                    files=[File(name="name", contents="contents"), File(name="name", contents="contents")],
                    directories=[
                        Directory(name="name", files=[], directories=[]),
                        Directory(name="name", files=[], directories=[]),
                    ],
                ),
            ],
        ),
        moment=Moment(
            id=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
            date=datetime.date.fromisoformat("2023-01-15"),
            datetime=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00"),
        ),
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.service.create_big_entity(
        cast_member=Actor(name="name", id="id"),
        extended_movie=ExtendedMovie(
            id="id",
            prequel="prequel",
            title="title",
            from_="from",
            rating=1.1,
            tag="tag",
            book="book",
            metadata={"metadata": {"key": "value"}},
            revenue=1000000,
            cast=["cast", "cast"],
        ),
        entity=Entity(type="primitive", name="name"),
        metadata=Metadata_Html(value="metadata"),
        common_metadata=Metadata(id="id", data={"data": "data"}, json_string="jsonString"),
        event_info=EventInfo_Metadata(id="id", data={"data": "data"}, json_string="jsonString"),
        data=Data_String(value="data"),
        migration=Migration(name="name", status="RUNNING"),
        exception=Exception_Generic(
            exception_type="exceptionType",
            exception_message="exceptionMessage",
            exception_stacktrace="exceptionStacktrace",
        ),
        test=Test_And(value=True),
        node=Node(
            name="name",
            nodes=[
                Node(
                    name="name",
                    nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])],
                    trees=[Tree(nodes=[]), Tree(nodes=[])],
                ),
                Node(
                    name="name",
                    nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])],
                    trees=[Tree(nodes=[]), Tree(nodes=[])],
                ),
            ],
            trees=[
                Tree(nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])]),
                Tree(nodes=[Node(name="name", nodes=[], trees=[]), Node(name="name", nodes=[], trees=[])]),
            ],
        ),
        directory=Directory(
            name="name",
            files=[File(name="name", contents="contents"), File(name="name", contents="contents")],
            directories=[
                Directory(
                    name="name",
                    files=[File(name="name", contents="contents"), File(name="name", contents="contents")],
                    directories=[
                        Directory(name="name", files=[], directories=[]),
                        Directory(name="name", files=[], directories=[]),
                    ],
                ),
                Directory(
                    name="name",
                    files=[File(name="name", contents="contents"), File(name="name", contents="contents")],
                    directories=[
                        Directory(name="name", files=[], directories=[]),
                        Directory(name="name", files=[], directories=[]),
                    ],
                ),
            ],
        ),
        moment=Moment(
            id=uuid.UUID("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
            date=datetime.date.fromisoformat("2023-01-15"),
            datetime=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00"),
        ),
    )
    validate_response(async_response, expected_response, expected_types)
