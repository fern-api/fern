# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .types import (
        Actor,
        Actress,
        BigEntity,
        CastMember,
        CronJob,
        Directory,
        Entity,
        Exception,
        ExceptionInfo,
        Exception_Generic,
        Exception_Timeout,
        ExtendedMovie,
        File,
        Metadata,
        Metadata_Html,
        Metadata_Markdown,
        Migration,
        MigrationStatus,
        Moment,
        Movie,
        MovieId,
        Node,
        RefreshTokenRequest,
        Request,
        Response,
        ResponseType,
        StuntDouble,
        Test,
        Test_And,
        Test_Or,
        Tree,
    )
    from .errors import NotFoundError
    from .basic_type import BasicType
    from .complex_type import ComplexType
    from .identifier import Identifier
    from .type import Type
_dynamic_imports: typing.Dict[str, str] = {
    "Actor": ".types",
    "Actress": ".types",
    "BasicType": ".basic_type",
    "BigEntity": ".types",
    "CastMember": ".types",
    "ComplexType": ".complex_type",
    "CronJob": ".types",
    "Directory": ".types",
    "Entity": ".types",
    "Exception": ".types",
    "ExceptionInfo": ".types",
    "Exception_Generic": ".types",
    "Exception_Timeout": ".types",
    "ExtendedMovie": ".types",
    "File": ".types",
    "Identifier": ".identifier",
    "Metadata": ".types",
    "Metadata_Html": ".types",
    "Metadata_Markdown": ".types",
    "Migration": ".types",
    "MigrationStatus": ".types",
    "Moment": ".types",
    "Movie": ".types",
    "MovieId": ".types",
    "Node": ".types",
    "NotFoundError": ".errors",
    "RefreshTokenRequest": ".types",
    "Request": ".types",
    "Response": ".types",
    "ResponseType": ".types",
    "StuntDouble": ".types",
    "Test": ".types",
    "Test_And": ".types",
    "Test_Or": ".types",
    "Tree": ".types",
    "Type": ".type",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Actor",
    "Actress",
    "BasicType",
    "BigEntity",
    "CastMember",
    "ComplexType",
    "CronJob",
    "Directory",
    "Entity",
    "Exception",
    "ExceptionInfo",
    "Exception_Generic",
    "Exception_Timeout",
    "ExtendedMovie",
    "File",
    "Identifier",
    "Metadata",
    "Metadata_Html",
    "Metadata_Markdown",
    "Migration",
    "MigrationStatus",
    "Moment",
    "Movie",
    "MovieId",
    "Node",
    "NotFoundError",
    "RefreshTokenRequest",
    "Request",
    "Response",
    "ResponseType",
    "StuntDouble",
    "Test",
    "Test_And",
    "Test_Or",
    "Tree",
    "Type",
]
