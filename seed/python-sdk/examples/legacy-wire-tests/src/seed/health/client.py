# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .raw_client import AsyncRawHealthClient, RawHealthClient

if typing.TYPE_CHECKING:
    from .service.client import AsyncServiceClient, ServiceClient


class HealthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawHealthClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._service: typing.Optional[ServiceClient] = None

    @property
    def with_raw_response(self) -> RawHealthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawHealthClient
        """
        return self._raw_client

    @property
    def service(self):
        if self._service is None:
            from .service.client import ServiceClient  # noqa: E402

            self._service = ServiceClient(client_wrapper=self._client_wrapper)
        return self._service


class AsyncHealthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawHealthClient(client_wrapper=client_wrapper)
        self._client_wrapper = client_wrapper
        self._service: typing.Optional[AsyncServiceClient] = None

    @property
    def with_raw_response(self) -> AsyncRawHealthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawHealthClient
        """
        return self._raw_client

    @property
    def service(self):
        if self._service is None:
            from .service.client import AsyncServiceClient  # noqa: E402

            self._service = AsyncServiceClient(client_wrapper=self._client_wrapper)
        return self._service
