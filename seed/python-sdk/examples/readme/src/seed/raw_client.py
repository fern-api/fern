# This file was auto-generated by Fern from our API Definition.

import typing
from .core.client_wrapper import SyncClientWrapper
from .core.request_options import RequestOptions
from .core.http_response import HttpResponse
from .core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from .core.api_error import ApiError
from .types.type import Type
from .types.identifier import Identifier
from .core.serialization import convert_and_respect_annotation_metadata
from .core.client_wrapper import AsyncClientWrapper
from .core.http_response import AsyncHttpResponse
# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)
class RawSeedExamples:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
    
    def echo(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[str]:
        """
        Parameters
        ----------
        request : str
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        HttpResponse[str]
        """
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            json=request,
            request_options=request_options,omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    str,
                    parse_obj_as(
                        type_ =str,  # type: ignore
                        object_ =_response.json()
                    )
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
    
    def create_type(self, *, request: Type, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[Identifier]:
        """
        Parameters
        ----------
        request : Type
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        HttpResponse[Identifier]
        """
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            json=convert_and_respect_annotation_metadata(object_=request, annotation=Type, direction="write"),
            request_options=request_options,omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Identifier,
                    parse_obj_as(
                        type_ =Identifier,  # type: ignore
                        object_ =_response.json()
                    )
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
class AsyncRawSeedExamples:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
    
    async def echo(self, *, request: str, request_options: typing.Optional[RequestOptions] = None) -> AsyncHttpResponse[str]:
        """
        Parameters
        ----------
        request : str
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        AsyncHttpResponse[str]
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            json=request,
            request_options=request_options,omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    str,
                    parse_obj_as(
                        type_ =str,  # type: ignore
                        object_ =_response.json()
                    )
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
    
    async def create_type(self, *, request: Type, request_options: typing.Optional[RequestOptions] = None) -> AsyncHttpResponse[Identifier]:
        """
        Parameters
        ----------
        request : Type
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        AsyncHttpResponse[Identifier]
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            json=convert_and_respect_annotation_metadata(object_=request, annotation=Type, direction="write"),
            request_options=request_options,omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Identifier,
                    parse_obj_as(
                        type_ =Identifier,  # type: ignore
                        object_ =_response.json()
                    )
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
