# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawServiceClient, RawServiceClient


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def check(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        This endpoint checks the health of a resource.

        Parameters
        ----------
        id : str
            The id to check

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedExamples
        from seed.environment import SeedExamplesEnvironment
        client = SeedExamples(token="YOUR_TOKEN", environment=SeedExamplesEnvironment.PRODUCTION, )
        client.health.service.check(id='id-2sdx82h', )
        """
        response = self._raw_client.check(id, request_options=request_options)
        return response.data

    def ping(self, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        This endpoint checks the health of the service.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedExamples
        from seed.environment import SeedExamplesEnvironment
        client = SeedExamples(token="YOUR_TOKEN", environment=SeedExamplesEnvironment.PRODUCTION, )
        client.health.service.ping()
        """
        response = self._raw_client.ping(request_options=request_options)
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def check(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        This endpoint checks the health of a resource.

        Parameters
        ----------
        id : str
            The id to check

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedExamples
        from seed.environment import SeedExamplesEnvironment
        import asyncio
        client = AsyncSeedExamples(token="YOUR_TOKEN", environment=SeedExamplesEnvironment.PRODUCTION, )
        async def main() -> None:
            await client.health.service.check(id='id-2sdx82h', )
        asyncio.run(main())
        """
        response = await self._raw_client.check(id, request_options=request_options)
        return response.data

    async def ping(self, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        This endpoint checks the health of the service.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import AsyncSeedExamples
        from seed.environment import SeedExamplesEnvironment
        import asyncio
        client = AsyncSeedExamples(token="YOUR_TOKEN", environment=SeedExamplesEnvironment.PRODUCTION, )
        async def main() -> None:
            await client.health.service.ping()
        asyncio.run(main())
        """
        response = await self._raw_client.ping(request_options=request_options)
        return response.data
