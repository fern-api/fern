{
    "types": {
        "type_commons/types:Tag": "'tag-wf9as23d'",
        "type_commons/types:Metadata": "from seed.commons.types import Metadata\nMetadata(id='metadata-js8dg24b', data={'foo': 'bar', 'baz': 'qux'}, json_string='{\"foo\": \"bar\", \"baz\": \"qux\"}', )",
        "type_commons/types:EventInfo": "from seed.commons.types import EventInfo_Metadata\nEventInfo_Metadata(id='metadata-alskjfg8', data={'one': 'two'}, json_string='{\"one\": \"two\"}', )",
        "type_commons/types:Data": "from seed.commons.types import Data_String\nData_String(value='data')",
        "type_file/service:Filename": "'file.txt'",
        "type_types:MovieId": "'movie-c06a4ad7'",
        "type_types:Movie": "from seed.types import Movie\nMovie(id='movie-c06a4ad7', prequel='movie-cv9b914f', title='The Boy and the Heron', from_='Hayao Miyazaki', rating=8.0, tag='tag-wf9as23d', metadata={'actors': ['Christian Bale', 'Florence Pugh', 'Willem Dafoe']\n, 'releaseDate': '2023-12-08'\n, 'ratings': {'rottenTomatoes': 97, 'imdb': 7.6}\n}, revenue=1000000, )",
        "type_types:CastMember": "from seed.types import Actor\nActor(id='actor_123', name='Brad Pitt', )",
        "type_types:Actress": "from seed.types import Actress\nActress(name='Jennifer Lawrence', id='actor_456', )",
        "type_types:ExtendedMovie": "from seed.types import ExtendedMovie\nExtendedMovie(id='movie-sda231x', title='Pulp Fiction', from_='Quentin Tarantino', rating=8.5, tag='tag-12efs9dv', cast=['John Travolta', 'Samuel L. Jackson', 'Uma Thurman', 'Bruce Willis'], metadata={'academyAward': True\n, 'releaseDate': '2023-12-08'\n, 'ratings': {'rottenTomatoes': 97, 'imdb': 7.6}\n}, revenue=1000000, )",
        "type_types:Moment": "from seed.types import Moment\nimport uuid\nimport datetime\nMoment(id=uuid.UUID(\"656f12d6-f592-444c-a1d3-a3cfd46d5b39\", ), date=datetime.date.fromisoformat(\"1994-01-01\", ), datetime=datetime.datetime.fromisoformat(\"1994-01-01 01:01:01+00:00\", ), )",
        "type_types:File": "from seed.types import File\nFile(name='file.txt', contents='...', )",
        "type_types:Directory": "from seed.types import Directory\nfrom seed.types import File\nDirectory(name='root', files=[File(name='file.txt', contents='...', )], directories=[Directory(name='tmp', files=[File(name='another_file.txt', contents='...', )], )], )",
        "type_types:Node": "from seed.types import Node\nfrom seed.types import Tree\nNode(name='root', nodes=[Node(name='left', ), Node(name='right', )], trees=[Tree(nodes=[Node(name='left', ), Node(name='right', )], )], )",
        "type_types:Tree": "from seed.types import Tree\nfrom seed.types import Node\nTree(nodes=[Node(name='left', ), Node(name='right', )], )",
        "type_types:Metadata": "from seed.types import Metadata_Html\nMetadata_Html(value='<head>...</head>')",
        "type_types:Exception": "from seed.types import Exception_Generic\nException_Generic(exception_type='Unavailable', exception_message='This component is unavailable!', exception_stacktrace='<logs>', )",
        "type_types:ExceptionInfo": "from seed.types import ExceptionInfo\nExceptionInfo(exception_type='Unavailable', exception_message='This component is unavailable!', exception_stacktrace='<logs>', )",
        "type_types:MigrationStatus": "\"RUNNING\"",
        "type_types:Migration": "from seed.types import Migration\nMigration(name='001_init', status=\"RUNNING\", )",
        "type_types:Request": "from seed.types import Request\nRequest(request={}\n, )",
        "type_types:Response": "from seed.types import Response\nfrom seed import Identifier\nResponse(response='Initializing...'\n, identifiers=[Identifier(type=\"primitive\", value='example', label='Primitive', ), Identifier(type=\"unknown\", value='{}', label='Unknown', )], )",
        "type_types:Test": "from seed.types import Test_And\nTest_And(value=True)",
        "type_types:Entity": "from seed.types import Entity\nEntity(type=\"unknown\", name='unknown', )"
    },
    "endpoints": [
        {
            "example_identifier": "default",
            "id": {
                "path": "/",
                "method": "POST",
                "identifier_override": "endpoint_.echo"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.echo(request='Hello world!\\\\n\\\\nwith\\\\n\\\\tnewlines', )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.echo(request='Hello world!\\\\n\\\\nwith\\\\n\\\\tnewlines', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/",
                "method": "POST",
                "identifier_override": "endpoint_.createType"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.create_type(request=\"primitive\", )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.create_type(request=\"primitive\", )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/file/notification/{notificationId}",
                "method": "GET",
                "identifier_override": "endpoint_file/notification/service.getException"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.file.notification.service.get_exception(notification_id='notification-hsy129x', )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.file.notification.service.get_exception(notification_id='notification-hsy129x', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/file/{filename}",
                "method": "GET",
                "identifier_override": "endpoint_file/service.getFile"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.file.service.get_file(filename='file.txt', x_file_api_version='0.0.2', )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.file.service.get_file(filename='file.txt', x_file_api_version='0.0.2', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "Example0",
            "id": {
                "path": "/check/{id}",
                "method": "GET",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.health.service.check(id='id-2sdx82h', )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.health.service.check(id='id-2sdx82h', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "Example2",
            "id": {
                "path": "/check/{id}",
                "method": "GET",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.health.service.check(id='id-3tey93i', )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.health.service.check(id='id-3tey93i', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "Example0",
            "id": {
                "path": "/ping",
                "method": "GET",
                "identifier_override": "endpoint_health/service.ping"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.health.service.ping()\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.health.service.ping()\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/movie/{movieId}",
                "method": "GET",
                "identifier_override": "endpoint_service.getMovie"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.service.get_movie(movie_id='movie-c06a4ad7', )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.service.get_movie(movie_id='movie-c06a4ad7', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/movie",
                "method": "POST",
                "identifier_override": "endpoint_service.createMovie"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.service.create_movie(id='movie-c06a4ad7', prequel='movie-cv9b914f', title='The Boy and the Heron', from_='Hayao Miyazaki', rating=8.0, tag='tag-wf9as23d', metadata={'actors': ['Christian Bale', 'Florence Pugh', 'Willem Dafoe']\n, 'releaseDate': '2023-12-08'\n, 'ratings': {'rottenTomatoes': 97, 'imdb': 7.6}\n}, revenue=1000000, )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.service.create_movie(id='movie-c06a4ad7', prequel='movie-cv9b914f', title='The Boy and the Heron', from_='Hayao Miyazaki', rating=8.0, tag='tag-wf9as23d', metadata={'actors': ['Christian Bale', 'Florence Pugh', 'Willem Dafoe']\n    , 'releaseDate': '2023-12-08'\n    , 'ratings': {'rottenTomatoes': 97, 'imdb': 7.6}\n    }, revenue=1000000, )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/metadata",
                "method": "GET",
                "identifier_override": "endpoint_service.getMetadata"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.service.get_metadata(x_api_version='0.0.1', shallow=False, tag='development', )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.service.get_metadata(x_api_version='0.0.1', shallow=False, tag='development', )\nasyncio.run(main())",
                "type": "python"
            }
        },
        {
            "example_identifier": "default",
            "id": {
                "path": "/big-entity",
                "method": "POST",
                "identifier_override": "endpoint_service.createBigEntity"
            },
            "snippet": {
                "sync_client": "from seed import SeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nfrom seed.types import Actor\nfrom seed.types import ExtendedMovie\nfrom seed.types import Entity\nfrom seed.types import Metadata_Html\nfrom seed.commons.types import Metadata\nfrom seed.commons.types import EventInfo_Metadata\nfrom seed.commons.types import Data_String\nfrom seed.types import Migration\nfrom seed.types import Exception_Generic\nfrom seed.types import Test_And\nfrom seed.types import Node\nfrom seed.types import Tree\nfrom seed.types import Directory\nfrom seed.types import File\nfrom seed.types import Moment\nimport uuid\nimport datetime\nclient = SeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nclient.service.create_big_entity(cast_member=Actor(name='name', id='id', ), extended_movie=ExtendedMovie(id='id', prequel='prequel', title='title', from_='from', rating=1.1, tag='tag', book='book', metadata={'metadata': {'key': 'value'}\n}, revenue=1000000, cast=['cast', 'cast'], ), entity=Entity(type=\"primitive\", name='name', ), metadata=Metadata_Html(value='metadata'), common_metadata=Metadata(id='id', data={'data': 'data'}, json_string='jsonString', ), event_info=EventInfo_Metadata(id='id', data={'data': 'data'}, json_string='jsonString', ), data=Data_String(value='data'), migration=Migration(name='name', status=\"RUNNING\", ), exception=Exception_Generic(exception_type='exceptionType', exception_message='exceptionMessage', exception_stacktrace='exceptionStacktrace', ), test=Test_And(value=True), node=Node(name='name', nodes=[Node(name='name', nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], trees=[Tree(nodes=[], ), Tree(nodes=[], )], ), Node(name='name', nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], trees=[Tree(nodes=[], ), Tree(nodes=[], )], )], trees=[Tree(nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], ), Tree(nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], )], ), directory=Directory(name='name', files=[File(name='name', contents='contents', ), File(name='name', contents='contents', )], directories=[Directory(name='name', files=[File(name='name', contents='contents', ), File(name='name', contents='contents', )], directories=[Directory(name='name', files=[], directories=[], ), Directory(name='name', files=[], directories=[], )], ), Directory(name='name', files=[File(name='name', contents='contents', ), File(name='name', contents='contents', )], directories=[Directory(name='name', files=[], directories=[], ), Directory(name='name', files=[], directories=[], )], )], ), moment=Moment(id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), date=datetime.date.fromisoformat(\"2023-01-15\", ), datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), ), )\n",
                "async_client": "from seed import AsyncSeedExamples\nfrom seed.environment import SeedExamplesEnvironment\nfrom seed.types import Actor\nfrom seed.types import ExtendedMovie\nfrom seed.types import Entity\nfrom seed.types import Metadata_Html\nfrom seed.commons.types import Metadata\nfrom seed.commons.types import EventInfo_Metadata\nfrom seed.commons.types import Data_String\nfrom seed.types import Migration\nfrom seed.types import Exception_Generic\nfrom seed.types import Test_And\nfrom seed.types import Node\nfrom seed.types import Tree\nfrom seed.types import Directory\nfrom seed.types import File\nfrom seed.types import Moment\nimport uuid\nimport datetime\nimport asyncio\nclient = AsyncSeedExamples(token=\"YOUR_TOKEN\", environment=SeedExamplesEnvironment.PRODUCTION, )\nasync def main() -> None:\n    await client.service.create_big_entity(cast_member=Actor(name='name', id='id', ), extended_movie=ExtendedMovie(id='id', prequel='prequel', title='title', from_='from', rating=1.1, tag='tag', book='book', metadata={'metadata': {'key': 'value'}\n    }, revenue=1000000, cast=['cast', 'cast'], ), entity=Entity(type=\"primitive\", name='name', ), metadata=Metadata_Html(value='metadata'), common_metadata=Metadata(id='id', data={'data': 'data'}, json_string='jsonString', ), event_info=EventInfo_Metadata(id='id', data={'data': 'data'}, json_string='jsonString', ), data=Data_String(value='data'), migration=Migration(name='name', status=\"RUNNING\", ), exception=Exception_Generic(exception_type='exceptionType', exception_message='exceptionMessage', exception_stacktrace='exceptionStacktrace', ), test=Test_And(value=True), node=Node(name='name', nodes=[Node(name='name', nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], trees=[Tree(nodes=[], ), Tree(nodes=[], )], ), Node(name='name', nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], trees=[Tree(nodes=[], ), Tree(nodes=[], )], )], trees=[Tree(nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], ), Tree(nodes=[Node(name='name', nodes=[], trees=[], ), Node(name='name', nodes=[], trees=[], )], )], ), directory=Directory(name='name', files=[File(name='name', contents='contents', ), File(name='name', contents='contents', )], directories=[Directory(name='name', files=[File(name='name', contents='contents', ), File(name='name', contents='contents', )], directories=[Directory(name='name', files=[], directories=[], ), Directory(name='name', files=[], directories=[], )], ), Directory(name='name', files=[File(name='name', contents='contents', ), File(name='name', contents='contents', )], directories=[Directory(name='name', files=[], directories=[], ), Directory(name='name', files=[], directories=[], )], )], ), moment=Moment(id=uuid.UUID(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\", ), date=datetime.date.fromisoformat(\"2023-01-15\", ), datetime=datetime.datetime.fromisoformat(\"2024-01-15 09:30:00+00:00\", ), ), )\nasyncio.run(main())",
                "type": "python"
            }
        }
    ]
}