# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .actor import Actor
    from .actress import Actress
    from .big_entity import BigEntity
    from .cast_member import CastMember
    from .cron_job import CronJob
    from .directory import Directory
    from .entity import Entity
    from .exception import Exception, Exception_Generic, Exception_Timeout
    from .exception_info import ExceptionInfo
    from .extended_movie import ExtendedMovie
    from .file import File
    from .metadata import Metadata, Metadata_Html, Metadata_Markdown
    from .migration import Migration
    from .migration_status import MigrationStatus
    from .moment import Moment
    from .movie import Movie
    from .movie_id import MovieId
    from .node import Node
    from .refresh_token_request import RefreshTokenRequest
    from .request import Request
    from .response import Response
    from .response_type import ResponseType
    from .stunt_double import StuntDouble
    from .test import Test, Test_And, Test_Or
    from .tree import Tree
_dynamic_imports: typing.Dict[str, str] = {
    "Actor": ".actor",
    "Actress": ".actress",
    "BigEntity": ".big_entity",
    "CastMember": ".cast_member",
    "CronJob": ".cron_job",
    "Directory": ".directory",
    "Entity": ".entity",
    "Exception": ".exception",
    "ExceptionInfo": ".exception_info",
    "Exception_Generic": ".exception",
    "Exception_Timeout": ".exception",
    "ExtendedMovie": ".extended_movie",
    "File": ".file",
    "Metadata": ".metadata",
    "Metadata_Html": ".metadata",
    "Metadata_Markdown": ".metadata",
    "Migration": ".migration",
    "MigrationStatus": ".migration_status",
    "Moment": ".moment",
    "Movie": ".movie",
    "MovieId": ".movie_id",
    "Node": ".node",
    "RefreshTokenRequest": ".refresh_token_request",
    "Request": ".request",
    "Response": ".response",
    "ResponseType": ".response_type",
    "StuntDouble": ".stunt_double",
    "Test": ".test",
    "Test_And": ".test",
    "Test_Or": ".test",
    "Tree": ".tree",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "Actor",
    "Actress",
    "BigEntity",
    "CastMember",
    "CronJob",
    "Directory",
    "Entity",
    "Exception",
    "ExceptionInfo",
    "Exception_Generic",
    "Exception_Timeout",
    "ExtendedMovie",
    "File",
    "Metadata",
    "Metadata_Html",
    "Metadata_Markdown",
    "Migration",
    "MigrationStatus",
    "Moment",
    "Movie",
    "MovieId",
    "Node",
    "RefreshTokenRequest",
    "Request",
    "Response",
    "ResponseType",
    "StuntDouble",
    "Test",
    "Test_And",
    "Test_Or",
    "Tree",
]
