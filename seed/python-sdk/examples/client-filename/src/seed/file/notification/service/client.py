# This file was auto-generated by Fern from our API Definition.

from ....core.client_wrapper import SyncClientWrapper
from .raw_client import RawServiceClient
import typing
from ....core.request_options import RequestOptions
from ....types.types.exception import Exception
from ....core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawServiceClient


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def get_exception(
        self, notification_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Exception:
        """
        Parameters
        ----------
        notification_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Exception

        Examples
        --------
        from seed import SeedExhaustive
        from seed.environment import SeedExhaustiveEnvironment
        client = SeedExhaustive(token="YOUR_TOKEN", environment=SeedExhaustiveEnvironment.PRODUCTION, )
        client.file.notification.service.get_exception(notification_id='notification-hsy129x', )
        """
        response = self._raw_client.get_exception(notification_id, request_options=request_options)
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def get_exception(
        self, notification_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Exception:
        """
        Parameters
        ----------
        notification_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Exception

        Examples
        --------
        from seed import AsyncSeedExhaustive
        from seed.environment import SeedExhaustiveEnvironment
        import asyncio
        client = AsyncSeedExhaustive(token="YOUR_TOKEN", environment=SeedExhaustiveEnvironment.PRODUCTION, )
        async def main() -> None:
            await client.file.notification.service.get_exception(notification_id='notification-hsy129x', )
        asyncio.run(main())
        """
        response = await self._raw_client.get_exception(notification_id, request_options=request_options)
        return response.data
