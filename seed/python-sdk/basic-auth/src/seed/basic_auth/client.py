# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawBasicAuthClient
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawBasicAuthClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BasicAuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBasicAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBasicAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBasicAuthClient
        """
        return self._raw_client

    def get_with_basic_auth(self, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        GET request with basic auth scheme

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedBasicAuth

        client = SeedBasicAuth(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.basic_auth.get_with_basic_auth()
        """
        response = self._raw_client.get_with_basic_auth(
            request_options=request_options,
        )
        return response.data

    def post_with_basic_auth(
        self, *, request: typing.Optional[typing.Any] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        POST request with basic auth scheme

        Parameters
        ----------
        request : typing.Optional[typing.Any]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedBasicAuth

        client = SeedBasicAuth(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )
        client.basic_auth.post_with_basic_auth(
            request={"key": "value"},
        )
        """
        response = self._raw_client.post_with_basic_auth(
            request=request,
            request_options=request_options,
        )
        return response.data


class AsyncBasicAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBasicAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBasicAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBasicAuthClient
        """
        return self._raw_client

    async def get_with_basic_auth(self, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        GET request with basic auth scheme

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        import asyncio

        from seed import AsyncSeedBasicAuth

        client = AsyncSeedBasicAuth(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.basic_auth.get_with_basic_auth()


        asyncio.run(main())
        """
        response = await self._raw_client.get_with_basic_auth(
            request_options=request_options,
        )
        return response.data

    async def post_with_basic_auth(
        self, *, request: typing.Optional[typing.Any] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        POST request with basic auth scheme

        Parameters
        ----------
        request : typing.Optional[typing.Any]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        import asyncio

        from seed import AsyncSeedBasicAuth

        client = AsyncSeedBasicAuth(
            username="YOUR_USERNAME",
            password="YOUR_PASSWORD",
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.basic_auth.post_with_basic_auth(
                request={"key": "value"},
            )


        asyncio.run(main())
        """
        response = await self._raw_client.post_with_basic_auth(
            request=request,
            request_options=request_options,
        )
        return response.data
