# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawUserClient
from ..core.request_options import RequestOptions
from .types.user import User
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawUserClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUserClient
        """
        return self._raw_client

    def create_user(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedExtraProperties

        client = SeedExtraProperties(
            base_url="https://yourhost.com/path/to/api",
        )
        client.user.create_user(
            name="name",
        )
        """
        response = self._raw_client.create_user(
            name=name,
            request_options=request_options,
        )
        return response.data


class AsyncUserClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUserClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUserClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUserClient
        """
        return self._raw_client

    async def create_user(self, *, name: str, request_options: typing.Optional[RequestOptions] = None) -> User:
        """
        Parameters
        ----------
        name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        import asyncio

        from seed import AsyncSeedExtraProperties

        client = AsyncSeedExtraProperties(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.user.create_user(
                name="name",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_user(
            name=name,
            request_options=request_options,
        )
        return response.data
