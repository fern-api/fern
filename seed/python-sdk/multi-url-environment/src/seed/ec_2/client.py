# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawEc2Client, RawEc2Client

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Ec2Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEc2Client(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEc2Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEc2Client
        """
        return self._raw_client

    def boot_instance(self, *, size: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        size : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import SeedMultiUrlEnvironment
        client = SeedMultiUrlEnvironment(token="YOUR_TOKEN", )
        client.ec_2.boot_instance(size='size', )
        """
        response = self._raw_client.boot_instance(size=size, request_options=request_options)
        return response.data


class AsyncEc2Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEc2Client(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEc2Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEc2Client
        """
        return self._raw_client

    async def boot_instance(self, *, size: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        size : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from seed import AsyncSeedMultiUrlEnvironment
        import asyncio
        client = AsyncSeedMultiUrlEnvironment(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.ec_2.boot_instance(size='size', )
        asyncio.run(main())
        """
        response = await self._raw_client.boot_instance(size=size, request_options=request_options)
        return response.data
