# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawCustomAuthClient
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawCustomAuthClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CustomAuthClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCustomAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCustomAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCustomAuthClient
        """
        return self._raw_client

    def get_with_custom_auth(self, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        GET request with custom auth scheme

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedCustomAuth
        client = SeedCustomAuth(custom_auth_scheme="YOUR_CUSTOM_AUTH_SCHEME", base_url="https://yourhost.com/path/to/api", )
        client.custom_auth.get_with_custom_auth()
        """
        response = self._raw_client.get_with_custom_auth(request_options=request_options)
        return response.data

    def post_with_custom_auth(
        self, *, request: typing.Optional[typing.Any] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        POST request with custom auth scheme

        Parameters
        ----------
        request : typing.Optional[typing.Any]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import SeedCustomAuth
        client = SeedCustomAuth(custom_auth_scheme="YOUR_CUSTOM_AUTH_SCHEME", base_url="https://yourhost.com/path/to/api", )
        client.custom_auth.post_with_custom_auth(request={'key': 'value'}
        , )
        """
        response = self._raw_client.post_with_custom_auth(request=request, request_options=request_options)
        return response.data


class AsyncCustomAuthClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCustomAuthClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCustomAuthClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCustomAuthClient
        """
        return self._raw_client

    async def get_with_custom_auth(self, *, request_options: typing.Optional[RequestOptions] = None) -> bool:
        """
        GET request with custom auth scheme

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import AsyncSeedCustomAuth
        import asyncio
        client = AsyncSeedCustomAuth(custom_auth_scheme="YOUR_CUSTOM_AUTH_SCHEME", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.custom_auth.get_with_custom_auth()
        asyncio.run(main())
        """
        response = await self._raw_client.get_with_custom_auth(request_options=request_options)
        return response.data

    async def post_with_custom_auth(
        self, *, request: typing.Optional[typing.Any] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> bool:
        """
        POST request with custom auth scheme

        Parameters
        ----------
        request : typing.Optional[typing.Any]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        bool

        Examples
        --------
        from seed import AsyncSeedCustomAuth
        import asyncio
        client = AsyncSeedCustomAuth(custom_auth_scheme="YOUR_CUSTOM_AUTH_SCHEME", base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.custom_auth.post_with_custom_auth(request={'key': 'value'}
            , )
        asyncio.run(main())
        """
        response = await self._raw_client.post_with_custom_auth(request=request, request_options=request_options)
        return response.data
