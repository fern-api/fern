# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawDummyClient, RawDummyClient
from .types.stream_response import StreamResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DummyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDummyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDummyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDummyClient
        """
        return self._raw_client

    def generate_stream(
        self, *, num_events: int, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Iterator[StreamResponse]:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[StreamResponse]

        Examples
        --------
        from seed import SeedStreaming
        client = SeedStreaming(base_url="https://yourhost.com/path/to/api", )
        response = client.dummy.generate_stream(num_events=1, )
        for chunk in response:
            yield chunk
        """
        with self._raw_client.generate_stream(num_events=num_events, request_options=request_options) as r:
            yield from r.data

    def generate(self, *, num_events: int, request_options: typing.Optional[RequestOptions] = None) -> StreamResponse:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StreamResponse

        Examples
        --------
        from seed import SeedStreaming
        client = SeedStreaming(base_url="https://yourhost.com/path/to/api", )
        client.dummy.generate(num_events=5, )
        """
        response = self._raw_client.generate(num_events=num_events, request_options=request_options)
        return response.data


class AsyncDummyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDummyClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDummyClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDummyClient
        """
        return self._raw_client

    async def generate_stream(
        self, *, num_events: int, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[StreamResponse]:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[StreamResponse]

        Examples
        --------
        from seed import AsyncSeedStreaming
        import asyncio
        client = AsyncSeedStreaming(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            response = await client.dummy.generate_stream(num_events=1, )
            async for chunk in response:
                yield chunk
        asyncio.run(main())
        """
        async with self._raw_client.generate_stream(num_events=num_events, request_options=request_options) as r:
            async for data in r.data:
                yield data

    async def generate(
        self, *, num_events: int, request_options: typing.Optional[RequestOptions] = None
    ) -> StreamResponse:
        """
        Parameters
        ----------
        num_events : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StreamResponse

        Examples
        --------
        from seed import AsyncSeedStreaming
        import asyncio
        client = AsyncSeedStreaming(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.dummy.generate(num_events=5, )
        asyncio.run(main())
        """
        response = await self._raw_client.generate(num_events=num_events, request_options=request_options)
        return response.data
