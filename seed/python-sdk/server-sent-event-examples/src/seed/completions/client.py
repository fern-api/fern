# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawCompletionsClient
from ..core.request_options import RequestOptions
from .types.streamed_completion import StreamedCompletion
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawCompletionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CompletionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCompletionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCompletionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCompletionsClient
        """
        return self._raw_client

    def stream(
        self, *, query: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Iterator[StreamedCompletion]:
        """
        Parameters
        ----------
        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[StreamedCompletion]

        Examples
        --------
        from seed import SeedServerSentEvents

        client = SeedServerSentEvents(
            base_url="https://yourhost.com/path/to/api",
        )
        response = client.completions.stream(
            query="foo",
        )
        for chunk in response:
            yield chunk
        """
        with self._raw_client.stream(query=query, request_options=request_options) as r:
            yield from r.data


class AsyncCompletionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCompletionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCompletionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCompletionsClient
        """
        return self._raw_client

    async def stream(
        self, *, query: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.AsyncIterator[StreamedCompletion]:
        """
        Parameters
        ----------
        query : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[StreamedCompletion]

        Examples
        --------
        import asyncio

        from seed import AsyncSeedServerSentEvents

        client = AsyncSeedServerSentEvents(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            response = await client.completions.stream(
                query="foo",
            )
            async for chunk in response:
                yield chunk


        asyncio.run(main())
        """
        async with self._raw_client.stream(query=query, request_options=request_options) as r:
            async for data in r.data:
                yield data
