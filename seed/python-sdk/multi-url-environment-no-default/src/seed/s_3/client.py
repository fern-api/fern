# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawS3Client
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawS3Client

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class S3Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawS3Client(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawS3Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawS3Client
        """
        return self._raw_client

    def get_presigned_url(self, *, s_3_key: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        s_3_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedMultiUrlEnvironmentNoDefault
        from seed.environment import SeedMultiUrlEnvironmentNoDefaultEnvironment

        client = SeedMultiUrlEnvironmentNoDefault(
            token="YOUR_TOKEN",
            environment=SeedMultiUrlEnvironmentNoDefaultEnvironment.PRODUCTION,
        )
        client.s_3.get_presigned_url(
            s_3_key="s3Key",
        )
        """
        response = self._raw_client.get_presigned_url(s_3_key=s_3_key, request_options=request_options)
        return response.data


class AsyncS3Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawS3Client(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawS3Client:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawS3Client
        """
        return self._raw_client

    async def get_presigned_url(self, *, s_3_key: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        s_3_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedMultiUrlEnvironmentNoDefault
        from seed.environment import SeedMultiUrlEnvironmentNoDefaultEnvironment

        client = AsyncSeedMultiUrlEnvironmentNoDefault(
            token="YOUR_TOKEN",
            environment=SeedMultiUrlEnvironmentNoDefaultEnvironment.PRODUCTION,
        )


        async def main() -> None:
            await client.s_3.get_presigned_url(
                s_3_key="s3Key",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_presigned_url(s_3_key=s_3_key, request_options=request_options)
        return response.data
