# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..core.pydantic_utilities import parse_obj_as
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class S3Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_presigned_url(self, *, s_3_key: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        s_3_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedMultiUrlEnvironmentNoDefault
        from seed.environment import SeedMultiUrlEnvironmentNoDefaultEnvironment

        client = SeedMultiUrlEnvironmentNoDefault(
            token="YOUR_TOKEN",
            environment=SeedMultiUrlEnvironmentNoDefaultEnvironment.PRODUCTION,
        )
        client.s_3.get_presigned_url(
            s_3_key="s3Key",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "s3/presigned-url",
            base_url=self._client_wrapper.get_environment().s_3,
            method="POST",
            json={
                "s3Key": s_3_key,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncS3Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_presigned_url(self, *, s_3_key: str, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        Parameters
        ----------
        s_3_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        import asyncio

        from seed import AsyncSeedMultiUrlEnvironmentNoDefault
        from seed.environment import SeedMultiUrlEnvironmentNoDefaultEnvironment

        client = AsyncSeedMultiUrlEnvironmentNoDefault(
            token="YOUR_TOKEN",
            environment=SeedMultiUrlEnvironmentNoDefaultEnvironment.PRODUCTION,
        )


        async def main() -> None:
            await client.s_3.get_presigned_url(
                s_3_key="s3Key",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "s3/presigned-url",
            base_url=self._client_wrapper.get_environment().s_3,
            method="POST",
            json={
                "s3Key": s_3_key,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
