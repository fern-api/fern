# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawSimpleClient, RawSimpleClient
from .types.foo_response import FooResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SimpleClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSimpleClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSimpleClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSimpleClient
        """
        return self._raw_client

    def foo_without_endpoint_error(
        self, *, bar: str, request_options: typing.Optional[RequestOptions] = None
    ) -> FooResponse:
        """
        Parameters
        ----------
        bar : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FooResponse

        Examples
        --------
        from seed import SeedErrors

        client = SeedErrors(
            base_url="https://yourhost.com/path/to/api",
        )
        client.simple.foo_without_endpoint_error(
            bar="bar",
        )
        """
        _response = self._raw_client.foo_without_endpoint_error(bar=bar, request_options=request_options)
        return _response.data

    def foo(self, *, bar: str, request_options: typing.Optional[RequestOptions] = None) -> FooResponse:
        """
        Parameters
        ----------
        bar : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FooResponse

        Examples
        --------
        from seed import SeedErrors

        client = SeedErrors(
            base_url="https://yourhost.com/path/to/api",
        )
        client.simple.foo(
            bar="bar",
        )
        """
        _response = self._raw_client.foo(bar=bar, request_options=request_options)
        return _response.data

    def foo_with_examples(self, *, bar: str, request_options: typing.Optional[RequestOptions] = None) -> FooResponse:
        """
        Parameters
        ----------
        bar : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FooResponse

        Examples
        --------
        from seed import SeedErrors

        client = SeedErrors(
            base_url="https://yourhost.com/path/to/api",
        )
        client.simple.foo_with_examples(
            bar="hello",
        )
        """
        _response = self._raw_client.foo_with_examples(bar=bar, request_options=request_options)
        return _response.data


class AsyncSimpleClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSimpleClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSimpleClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSimpleClient
        """
        return self._raw_client

    async def foo_without_endpoint_error(
        self, *, bar: str, request_options: typing.Optional[RequestOptions] = None
    ) -> FooResponse:
        """
        Parameters
        ----------
        bar : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FooResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedErrors

        client = AsyncSeedErrors(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.simple.foo_without_endpoint_error(
                bar="bar",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.foo_without_endpoint_error(bar=bar, request_options=request_options)
        return _response.data

    async def foo(self, *, bar: str, request_options: typing.Optional[RequestOptions] = None) -> FooResponse:
        """
        Parameters
        ----------
        bar : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FooResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedErrors

        client = AsyncSeedErrors(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.simple.foo(
                bar="bar",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.foo(bar=bar, request_options=request_options)
        return _response.data

    async def foo_with_examples(
        self, *, bar: str, request_options: typing.Optional[RequestOptions] = None
    ) -> FooResponse:
        """
        Parameters
        ----------
        bar : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FooResponse

        Examples
        --------
        import asyncio

        from seed import AsyncSeedErrors

        client = AsyncSeedErrors(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.simple.foo_with_examples(
                bar="hello",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.foo_with_examples(bar=bar, request_options=request_options)
        return _response.data
