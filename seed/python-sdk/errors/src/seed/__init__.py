# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import commons, simple
    from .client import AsyncSeedErrors, SeedErrors
    from .commons import BadRequestError, ErrorBody, InternalServerError, NotFoundError
    from .simple import FooRequest, FooResponse, FooTooLittle, FooTooMuch
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncSeedErrors": ".client",
    "BadRequestError": ".commons",
    "ErrorBody": ".commons",
    "FooRequest": ".simple",
    "FooResponse": ".simple",
    "FooTooLittle": ".simple",
    "FooTooMuch": ".simple",
    "InternalServerError": ".commons",
    "NotFoundError": ".commons",
    "SeedErrors": ".client",
    "__version__": ".version",
    "commons": ".",
    "simple": ".",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncSeedErrors",
    "BadRequestError",
    "ErrorBody",
    "FooRequest",
    "FooResponse",
    "FooTooLittle",
    "FooTooMuch",
    "InternalServerError",
    "NotFoundError",
    "SeedErrors",
    "__version__",
    "commons",
    "simple",
]
