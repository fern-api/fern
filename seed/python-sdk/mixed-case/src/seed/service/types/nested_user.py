# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .user import User


class NestedUser(UniversalBaseModel):
    """
    Examples
    --------
    from seed.service import NestedUser
    from seed.service import User
    NestedUser(name='username', nested_user=User(user_name='nestedUsername', metadata_tags=['tag1', 'tag2'], extra_properties={'foo': 'bar', 'baz': 'qux'}, ), )
    """

    name: typing_extensions.Annotated[str, FieldMetadata(alias="Name")]
    nested_user: typing_extensions.Annotated[User, FieldMetadata(alias="NestedUser")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
