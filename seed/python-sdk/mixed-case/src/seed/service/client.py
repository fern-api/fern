# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawServiceClient
import typing
from ..core.request_options import RequestOptions
from .types.resource import Resource
import datetime as dt
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawServiceClient


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def get_resource(self, resource_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Resource:
        """
        Parameters
        ----------
        resource_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Resource

        Examples
        --------
        from seed import SeedMixedCase

        client = SeedMixedCase(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.get_resource(
            resource_id="rsc-xyz",
        )
        """
        response = self._raw_client.get_resource(
            resource_id,
            request_options=request_options,
        )
        return response.data

    def list_resources(
        self, *, page_limit: int, before_date: dt.date, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Resource]:
        """
        Parameters
        ----------
        page_limit : int

        before_date : dt.date

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Resource]

        Examples
        --------
        import datetime

        from seed import SeedMixedCase

        client = SeedMixedCase(
            base_url="https://yourhost.com/path/to/api",
        )
        client.service.list_resources(
            page_limit=10,
            before_date=datetime.date.fromisoformat(
                "2023-01-01",
            ),
        )
        """
        response = self._raw_client.list_resources(
            page_limit=page_limit,
            before_date=before_date,
            request_options=request_options,
        )
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def get_resource(
        self, resource_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Resource:
        """
        Parameters
        ----------
        resource_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Resource

        Examples
        --------
        import asyncio

        from seed import AsyncSeedMixedCase

        client = AsyncSeedMixedCase(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.get_resource(
                resource_id="rsc-xyz",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get_resource(
            resource_id,
            request_options=request_options,
        )
        return response.data

    async def list_resources(
        self, *, page_limit: int, before_date: dt.date, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[Resource]:
        """
        Parameters
        ----------
        page_limit : int

        before_date : dt.date

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Resource]

        Examples
        --------
        import asyncio
        import datetime

        from seed import AsyncSeedMixedCase

        client = AsyncSeedMixedCase(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.service.list_resources(
                page_limit=10,
                before_date=datetime.date.fromisoformat(
                    "2023-01-01",
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.list_resources(
            page_limit=page_limit,
            before_date=before_date,
            request_options=request_options,
        )
        return response.data
