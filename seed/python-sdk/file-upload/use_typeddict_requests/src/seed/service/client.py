# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawServiceClient
from .. import core
from .requests.my_object import MyObjectParams
from .requests.my_alias_object import MyAliasObjectParams
from .requests.my_collection_alias_object import MyCollectionAliasObjectParams
from .types.object_type import ObjectType
from .types.id import Id
from ..core.request_options import RequestOptions
from .requests.my_object_with_optional import MyObjectWithOptionalParams
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawServiceClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawServiceClient
        """
        return self._raw_client

    def post(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.Sequence[MyObjectParams],
        alias_object: MyAliasObjectParams,
        list_of_alias_object: typing.Sequence[MyAliasObjectParams],
        alias_list_of_object: MyCollectionAliasObjectParams,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.Sequence[MyObjectParams]

        alias_object : MyAliasObjectParams

        list_of_alias_object : typing.Sequence[MyAliasObjectParams]

        alias_list_of_object : MyCollectionAliasObjectParams

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Sequence[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = self._raw_client.post(
            integer=integer,
            file=file,
            file_list=file_list,
            list_of_objects=list_of_objects,
            alias_object=alias_object,
            list_of_alias_object=list_of_alias_object,
            alias_list_of_object=alias_list_of_object,
            maybe_string=maybe_string,
            maybe_file=maybe_file,
            maybe_file_list=maybe_file_list,
            maybe_integer=maybe_integer,
            optional_list_of_strings=optional_list_of_strings,
            optional_metadata=optional_metadata,
            optional_object_type=optional_object_type,
            optional_id=optional_id,
            request_options=request_options,
        )
        return response.data

    def just_file(self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = self._raw_client.just_file(file=file, request_options=request_options)
        return response.data

    def just_file_with_query_params(
        self,
        *,
        integer: int,
        list_of_strings: typing.Union[str, typing.Sequence[str]],
        file: core.File,
        maybe_string: typing.Optional[str] = None,
        maybe_integer: typing.Optional[int] = None,
        optional_list_of_strings: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        list_of_strings : typing.Union[str, typing.Sequence[str]]

        file : core.File
            See core.File for more documentation

        maybe_string : typing.Optional[str]

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = self._raw_client.just_file_with_query_params(
            integer=integer,
            list_of_strings=list_of_strings,
            file=file,
            maybe_string=maybe_string,
            maybe_integer=maybe_integer,
            optional_list_of_strings=optional_list_of_strings,
            request_options=request_options,
        )
        return response.data

    def with_content_type(
        self,
        *,
        file: core.File,
        foo: str,
        bar: MyObjectParams,
        foo_bar: typing.Optional[MyObjectParams] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObjectParams

        foo_bar : typing.Optional[MyObjectParams]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = self._raw_client.with_content_type(
            file=file, foo=foo, bar=bar, foo_bar=foo_bar, request_options=request_options
        )
        return response.data

    def with_form_encoding(
        self, *, file: core.File, foo: str, bar: MyObjectParams, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObjectParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = self._raw_client.with_form_encoding(file=file, foo=foo, bar=bar, request_options=request_options)
        return response.data

    def with_form_encoded_containers(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.Sequence[MyObjectParams],
        list_of_objects_with_optionals: typing.Sequence[MyObjectWithOptionalParams],
        alias_object: MyAliasObjectParams,
        list_of_alias_object: typing.Sequence[MyAliasObjectParams],
        alias_list_of_object: MyCollectionAliasObjectParams,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.Sequence[MyObjectParams]

        list_of_objects_with_optionals : typing.Sequence[MyObjectWithOptionalParams]

        alias_object : MyAliasObjectParams

        list_of_alias_object : typing.Sequence[MyAliasObjectParams]

        alias_list_of_object : MyCollectionAliasObjectParams

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Sequence[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = self._raw_client.with_form_encoded_containers(
            integer=integer,
            file=file,
            file_list=file_list,
            list_of_objects=list_of_objects,
            list_of_objects_with_optionals=list_of_objects_with_optionals,
            alias_object=alias_object,
            list_of_alias_object=list_of_alias_object,
            alias_list_of_object=alias_list_of_object,
            maybe_string=maybe_string,
            maybe_file=maybe_file,
            maybe_file_list=maybe_file_list,
            maybe_integer=maybe_integer,
            optional_list_of_strings=optional_list_of_strings,
            optional_metadata=optional_metadata,
            optional_object_type=optional_object_type,
            optional_id=optional_id,
            request_options=request_options,
        )
        return response.data

    def optional_args(
        self,
        *,
        image_file: typing.Optional[core.File] = OMIT,
        request: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        image_file : typing.Optional[core.File]
            See core.File for more documentation

        request : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
        """
        response = self._raw_client.optional_args(
            image_file=image_file, request=request, request_options=request_options
        )
        return response.data


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawServiceClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawServiceClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawServiceClient
        """
        return self._raw_client

    async def post(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.Sequence[MyObjectParams],
        alias_object: MyAliasObjectParams,
        list_of_alias_object: typing.Sequence[MyAliasObjectParams],
        alias_list_of_object: MyCollectionAliasObjectParams,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.Sequence[MyObjectParams]

        alias_object : MyAliasObjectParams

        list_of_alias_object : typing.Sequence[MyAliasObjectParams]

        alias_list_of_object : MyCollectionAliasObjectParams

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Sequence[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = await self._raw_client.post(
            integer=integer,
            file=file,
            file_list=file_list,
            list_of_objects=list_of_objects,
            alias_object=alias_object,
            list_of_alias_object=list_of_alias_object,
            alias_list_of_object=alias_list_of_object,
            maybe_string=maybe_string,
            maybe_file=maybe_file,
            maybe_file_list=maybe_file_list,
            maybe_integer=maybe_integer,
            optional_list_of_strings=optional_list_of_strings,
            optional_metadata=optional_metadata,
            optional_object_type=optional_object_type,
            optional_id=optional_id,
            request_options=request_options,
        )
        return response.data

    async def just_file(self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = await self._raw_client.just_file(file=file, request_options=request_options)
        return response.data

    async def just_file_with_query_params(
        self,
        *,
        integer: int,
        list_of_strings: typing.Union[str, typing.Sequence[str]],
        file: core.File,
        maybe_string: typing.Optional[str] = None,
        maybe_integer: typing.Optional[int] = None,
        optional_list_of_strings: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        list_of_strings : typing.Union[str, typing.Sequence[str]]

        file : core.File
            See core.File for more documentation

        maybe_string : typing.Optional[str]

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = await self._raw_client.just_file_with_query_params(
            integer=integer,
            list_of_strings=list_of_strings,
            file=file,
            maybe_string=maybe_string,
            maybe_integer=maybe_integer,
            optional_list_of_strings=optional_list_of_strings,
            request_options=request_options,
        )
        return response.data

    async def with_content_type(
        self,
        *,
        file: core.File,
        foo: str,
        bar: MyObjectParams,
        foo_bar: typing.Optional[MyObjectParams] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObjectParams

        foo_bar : typing.Optional[MyObjectParams]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = await self._raw_client.with_content_type(
            file=file, foo=foo, bar=bar, foo_bar=foo_bar, request_options=request_options
        )
        return response.data

    async def with_form_encoding(
        self, *, file: core.File, foo: str, bar: MyObjectParams, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObjectParams

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = await self._raw_client.with_form_encoding(
            file=file, foo=foo, bar=bar, request_options=request_options
        )
        return response.data

    async def with_form_encoded_containers(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.Sequence[MyObjectParams],
        list_of_objects_with_optionals: typing.Sequence[MyObjectWithOptionalParams],
        alias_object: MyAliasObjectParams,
        list_of_alias_object: typing.Sequence[MyAliasObjectParams],
        alias_list_of_object: MyCollectionAliasObjectParams,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.Sequence[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.Sequence[MyObjectParams]

        list_of_objects_with_optionals : typing.Sequence[MyObjectWithOptionalParams]

        alias_object : MyAliasObjectParams

        list_of_alias_object : typing.Sequence[MyAliasObjectParams]

        alias_list_of_object : MyCollectionAliasObjectParams

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Sequence[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        response = await self._raw_client.with_form_encoded_containers(
            integer=integer,
            file=file,
            file_list=file_list,
            list_of_objects=list_of_objects,
            list_of_objects_with_optionals=list_of_objects_with_optionals,
            alias_object=alias_object,
            list_of_alias_object=list_of_alias_object,
            alias_list_of_object=alias_list_of_object,
            maybe_string=maybe_string,
            maybe_file=maybe_file,
            maybe_file_list=maybe_file_list,
            maybe_integer=maybe_integer,
            optional_list_of_strings=optional_list_of_strings,
            optional_metadata=optional_metadata,
            optional_object_type=optional_object_type,
            optional_id=optional_id,
            request_options=request_options,
        )
        return response.data

    async def optional_args(
        self,
        *,
        image_file: typing.Optional[core.File] = OMIT,
        request: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        image_file : typing.Optional[core.File]
            See core.File for more documentation

        request : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
        """
        response = await self._raw_client.optional_args(
            image_file=image_file, request=request, request_options=request_options
        )
        return response.data
