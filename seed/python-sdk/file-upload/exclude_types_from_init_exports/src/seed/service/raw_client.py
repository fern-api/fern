# This file was auto-generated by Fern from our API Definition.

import json
import typing
from json.decoder import JSONDecodeError

from .. import core
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from .types.id import Id
from .types.my_alias_object import MyAliasObject
from .types.my_collection_alias_object import MyCollectionAliasObject
from .types.my_object import MyObject
from .types.my_object_with_optional import MyObjectWithOptional
from .types.object_type import ObjectType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.List[MyObject],
        alias_object: MyAliasObject,
        list_of_alias_object: typing.List[MyAliasObject],
        alias_list_of_object: MyCollectionAliasObject,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.List[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.List[MyObject]

        alias_object : MyAliasObject

        list_of_alias_object : typing.List[MyAliasObject]

        alias_list_of_object : MyCollectionAliasObject

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.List[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            data={
                "maybe_string": maybe_string,
                "integer": integer,
                "maybe_integer": maybe_integer,
                "optional_list_of_strings": optional_list_of_strings,
                "list_of_objects": list_of_objects,
                "optional_metadata": optional_metadata,
                "optional_object_type": optional_object_type,
                "optional_id": optional_id,
                "alias_object": alias_object,
                "list_of_alias_object": list_of_alias_object,
                "alias_list_of_object": alias_list_of_object,
            },
            files={
                "file": file,
                "file_list": file_list,
                **({"maybe_file": maybe_file} if maybe_file is not None else {}),
                **({"maybe_file_list": maybe_file_list} if maybe_file_list is not None else {}),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def just_file(
        self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "just-file",
            method="POST",
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def just_file_with_query_params(
        self,
        *,
        integer: int,
        list_of_strings: typing.Union[str, typing.Sequence[str]],
        file: core.File,
        maybe_string: typing.Optional[str] = None,
        maybe_integer: typing.Optional[int] = None,
        optional_list_of_strings: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        integer : int

        list_of_strings : typing.Union[str, typing.Sequence[str]]

        file : core.File
            See core.File for more documentation

        maybe_string : typing.Optional[str]

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "just-file-with-query-params",
            method="POST",
            params={
                "maybeString": maybe_string,
                "integer": integer,
                "maybeInteger": maybe_integer,
                "listOfStrings": list_of_strings,
                "optionalListOfStrings": optional_list_of_strings,
            },
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def with_content_type(
        self,
        *,
        file: core.File,
        foo: str,
        bar: MyObject,
        foo_bar: typing.Optional[MyObject] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObject

        foo_bar : typing.Optional[MyObject]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "with-content-type",
            method="POST",
            data={
                "foo": foo,
            },
            files={
                "file": core.with_content_type(file=file, default_content_type="application/octet-stream"),
                "bar": (None, json.dumps(jsonable_encoder(bar)), "application/json"),
                **(
                    {"foo_bar": (None, json.dumps(jsonable_encoder(foo_bar)), "application/json")}
                    if foo_bar is not OMIT
                    else {}
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def with_form_encoding(
        self, *, file: core.File, foo: str, bar: MyObject, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObject

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            "with-form-encoding",
            method="POST",
            data={
                "foo": foo,
                "bar": bar,
            },
            files={
                "file": core.with_content_type(file=file, default_content_type="application/octet-stream"),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def with_form_encoded_containers(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.List[MyObject],
        list_of_objects_with_optionals: typing.List[MyObjectWithOptional],
        alias_object: MyAliasObject,
        list_of_alias_object: typing.List[MyAliasObject],
        alias_list_of_object: MyCollectionAliasObject,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.List[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.List[MyObject]

        list_of_objects_with_optionals : typing.List[MyObjectWithOptional]

        alias_object : MyAliasObject

        list_of_alias_object : typing.List[MyAliasObject]

        alias_list_of_object : MyCollectionAliasObject

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.List[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            data={
                "maybe_string": maybe_string,
                "integer": integer,
                "maybe_integer": maybe_integer,
                "optional_list_of_strings": optional_list_of_strings,
                "list_of_objects": list_of_objects,
                "optional_metadata": optional_metadata,
                "optional_object_type": optional_object_type,
                "optional_id": optional_id,
                "list_of_objects_with_optionals": list_of_objects_with_optionals,
                "alias_object": alias_object,
                "list_of_alias_object": list_of_alias_object,
                "alias_list_of_object": alias_list_of_object,
            },
            files={
                "file": file,
                "file_list": file_list,
                **({"maybe_file": maybe_file} if maybe_file is not None else {}),
                **({"maybe_file_list": maybe_file_list} if maybe_file_list is not None else {}),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def optional_args(
        self,
        *,
        image_file: typing.Optional[core.File] = OMIT,
        request: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[str]:
        """
        Parameters
        ----------
        image_file : typing.Optional[core.File]
            See core.File for more documentation

        request : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[str]
        """
        _response = self._client_wrapper.httpx_client.request(
            "optional-args",
            method="POST",
            data={},
            files={
                **(
                    {"image_file": core.with_content_type(file=image_file, default_content_type="image/jpeg")}
                    if image_file is not None
                    else {}
                ),
                **(
                    {"request": (None, json.dumps(jsonable_encoder(request)), "application/json; charset=utf-8")}
                    if request is not OMIT
                    else {}
                ),
            },
            headers={
                "content-type": "multipart/form-data",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.List[MyObject],
        alias_object: MyAliasObject,
        list_of_alias_object: typing.List[MyAliasObject],
        alias_list_of_object: MyCollectionAliasObject,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.List[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.List[MyObject]

        alias_object : MyAliasObject

        list_of_alias_object : typing.List[MyAliasObject]

        alias_list_of_object : MyCollectionAliasObject

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.List[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            data={
                "maybe_string": maybe_string,
                "integer": integer,
                "maybe_integer": maybe_integer,
                "optional_list_of_strings": optional_list_of_strings,
                "list_of_objects": list_of_objects,
                "optional_metadata": optional_metadata,
                "optional_object_type": optional_object_type,
                "optional_id": optional_id,
                "alias_object": alias_object,
                "list_of_alias_object": list_of_alias_object,
                "alias_list_of_object": alias_list_of_object,
            },
            files={
                "file": file,
                "file_list": file_list,
                **({"maybe_file": maybe_file} if maybe_file is not None else {}),
                **({"maybe_file_list": maybe_file_list} if maybe_file_list is not None else {}),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def just_file(
        self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "just-file",
            method="POST",
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def just_file_with_query_params(
        self,
        *,
        integer: int,
        list_of_strings: typing.Union[str, typing.Sequence[str]],
        file: core.File,
        maybe_string: typing.Optional[str] = None,
        maybe_integer: typing.Optional[int] = None,
        optional_list_of_strings: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        integer : int

        list_of_strings : typing.Union[str, typing.Sequence[str]]

        file : core.File
            See core.File for more documentation

        maybe_string : typing.Optional[str]

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "just-file-with-query-params",
            method="POST",
            params={
                "maybeString": maybe_string,
                "integer": integer,
                "maybeInteger": maybe_integer,
                "listOfStrings": list_of_strings,
                "optionalListOfStrings": optional_list_of_strings,
            },
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def with_content_type(
        self,
        *,
        file: core.File,
        foo: str,
        bar: MyObject,
        foo_bar: typing.Optional[MyObject] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObject

        foo_bar : typing.Optional[MyObject]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "with-content-type",
            method="POST",
            data={
                "foo": foo,
            },
            files={
                "file": core.with_content_type(file=file, default_content_type="application/octet-stream"),
                "bar": (None, json.dumps(jsonable_encoder(bar)), "application/json"),
                **(
                    {"foo_bar": (None, json.dumps(jsonable_encoder(foo_bar)), "application/json")}
                    if foo_bar is not OMIT
                    else {}
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def with_form_encoding(
        self, *, file: core.File, foo: str, bar: MyObject, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObject

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "with-form-encoding",
            method="POST",
            data={
                "foo": foo,
                "bar": bar,
            },
            files={
                "file": core.with_content_type(file=file, default_content_type="application/octet-stream"),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def with_form_encoded_containers(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.List[MyObject],
        list_of_objects_with_optionals: typing.List[MyObjectWithOptional],
        alias_object: MyAliasObject,
        list_of_alias_object: typing.List[MyAliasObject],
        alias_list_of_object: MyCollectionAliasObject,
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.List[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.List[MyObject]

        list_of_objects_with_optionals : typing.List[MyObjectWithOptional]

        alias_object : MyAliasObject

        list_of_alias_object : typing.List[MyAliasObject]

        alias_list_of_object : MyCollectionAliasObject

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.List[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            data={
                "maybe_string": maybe_string,
                "integer": integer,
                "maybe_integer": maybe_integer,
                "optional_list_of_strings": optional_list_of_strings,
                "list_of_objects": list_of_objects,
                "optional_metadata": optional_metadata,
                "optional_object_type": optional_object_type,
                "optional_id": optional_id,
                "list_of_objects_with_optionals": list_of_objects_with_optionals,
                "alias_object": alias_object,
                "list_of_alias_object": list_of_alias_object,
                "alias_list_of_object": alias_list_of_object,
            },
            files={
                "file": file,
                "file_list": file_list,
                **({"maybe_file": maybe_file} if maybe_file is not None else {}),
                **({"maybe_file_list": maybe_file_list} if maybe_file_list is not None else {}),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def optional_args(
        self,
        *,
        image_file: typing.Optional[core.File] = OMIT,
        request: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[str]:
        """
        Parameters
        ----------
        image_file : typing.Optional[core.File]
            See core.File for more documentation

        request : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[str]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "optional-args",
            method="POST",
            data={},
            files={
                **(
                    {"image_file": core.with_content_type(file=image_file, default_content_type="image/jpeg")}
                    if image_file is not None
                    else {}
                ),
                **(
                    {"request": (None, json.dumps(jsonable_encoder(request)), "application/json; charset=utf-8")}
                    if request is not OMIT
                    else {}
                ),
            },
            headers={
                "content-type": "multipart/form-data",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    str,
                    parse_obj_as(
                        type_=str,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
