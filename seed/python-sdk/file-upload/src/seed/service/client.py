# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .. import core
from .types.my_object import MyObject
from .types.object_type import ObjectType
from .types.id import Id
from ..core.request_options import RequestOptions
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
import json
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ServiceClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.List[MyObject],
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.List[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.List[MyObject]

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.List[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            data={
                "maybe_string": maybe_string,
                "integer": integer,
                "maybe_integer": maybe_integer,
                "optional_list_of_strings": optional_list_of_strings,
                "list_of_objects": list_of_objects,
                "optional_metadata": optional_metadata,
                "optional_object_type": optional_object_type,
                "optional_id": optional_id,
            },
            files={
                "file": file,
                "file_list": file_list,
                "maybe_file": maybe_file,
                "maybe_file_list": maybe_file_list,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def just_file(self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._client_wrapper.httpx_client.request(
            "just-file",
            method="POST",
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def just_file_with_query_params(
        self,
        *,
        integer: int,
        list_of_strings: typing.Union[str, typing.Sequence[str]],
        file: core.File,
        maybe_string: typing.Optional[str] = None,
        maybe_integer: typing.Optional[int] = None,
        optional_list_of_strings: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        list_of_strings : typing.Union[str, typing.Sequence[str]]

        file : core.File
            See core.File for more documentation

        maybe_string : typing.Optional[str]

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._client_wrapper.httpx_client.request(
            "just-file-with-query-params",
            method="POST",
            params={
                "maybeString": maybe_string,
                "integer": integer,
                "maybeInteger": maybe_integer,
                "listOfStrings": list_of_strings,
                "optionalListOfStrings": optional_list_of_strings,
            },
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def with_content_type(
        self,
        *,
        file: core.File,
        foo: str,
        bar: MyObject,
        foo_bar: typing.Optional[MyObject] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObject

        foo_bar : typing.Optional[MyObject]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = self._client_wrapper.httpx_client.request(
            "with-content-type",
            method="POST",
            data={
                "foo": foo,
            },
            files={
                "file": core.with_content_type(file=file, default_content_type="application/octet-stream"),
                "bar": (None, json.dumps(jsonable_encoder(bar)), "application/json"),
                **(
                    {"foo_bar": (None, json.dumps(jsonable_encoder(foo_bar)), "application/json")}
                    if foo_bar is not OMIT
                    else {}
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncServiceClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post(
        self,
        *,
        integer: int,
        file: core.File,
        file_list: typing.List[core.File],
        list_of_objects: typing.List[MyObject],
        maybe_string: typing.Optional[str] = OMIT,
        maybe_file: typing.Optional[core.File] = OMIT,
        maybe_file_list: typing.Optional[typing.List[core.File]] = OMIT,
        maybe_integer: typing.Optional[int] = OMIT,
        optional_list_of_strings: typing.Optional[typing.List[str]] = OMIT,
        optional_metadata: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        optional_object_type: typing.Optional[ObjectType] = OMIT,
        optional_id: typing.Optional[Id] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        file : core.File
            See core.File for more documentation

        file_list : typing.List[core.File]
            See core.File for more documentation

        list_of_objects : typing.List[MyObject]

        maybe_string : typing.Optional[str]

        maybe_file : typing.Optional[core.File]
            See core.File for more documentation

        maybe_file_list : typing.Optional[typing.List[core.File]]
            See core.File for more documentation

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.List[str]]

        optional_metadata : typing.Optional[typing.Optional[typing.Any]]

        optional_object_type : typing.Optional[ObjectType]

        optional_id : typing.Optional[Id]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            data={
                "maybe_string": maybe_string,
                "integer": integer,
                "maybe_integer": maybe_integer,
                "optional_list_of_strings": optional_list_of_strings,
                "list_of_objects": list_of_objects,
                "optional_metadata": optional_metadata,
                "optional_object_type": optional_object_type,
                "optional_id": optional_id,
            },
            files={
                "file": file,
                "file_list": file_list,
                "maybe_file": maybe_file,
                "maybe_file_list": maybe_file_list,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def just_file(self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._client_wrapper.httpx_client.request(
            "just-file",
            method="POST",
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def just_file_with_query_params(
        self,
        *,
        integer: int,
        list_of_strings: typing.Union[str, typing.Sequence[str]],
        file: core.File,
        maybe_string: typing.Optional[str] = None,
        maybe_integer: typing.Optional[int] = None,
        optional_list_of_strings: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        integer : int

        list_of_strings : typing.Union[str, typing.Sequence[str]]

        file : core.File
            See core.File for more documentation

        maybe_string : typing.Optional[str]

        maybe_integer : typing.Optional[int]

        optional_list_of_strings : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._client_wrapper.httpx_client.request(
            "just-file-with-query-params",
            method="POST",
            params={
                "maybeString": maybe_string,
                "integer": integer,
                "maybeInteger": maybe_integer,
                "listOfStrings": list_of_strings,
                "optionalListOfStrings": optional_list_of_strings,
            },
            data={},
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def with_content_type(
        self,
        *,
        file: core.File,
        foo: str,
        bar: MyObject,
        foo_bar: typing.Optional[MyObject] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        foo : str

        bar : MyObject

        foo_bar : typing.Optional[MyObject]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None
        """
        _response = await self._client_wrapper.httpx_client.request(
            "with-content-type",
            method="POST",
            data={
                "foo": foo,
            },
            files={
                "file": core.with_content_type(file=file, default_content_type="application/octet-stream"),
                "bar": (None, json.dumps(jsonable_encoder(bar)), "application/json"),
                **(
                    {"foo_bar": (None, json.dumps(jsonable_encoder(foo_bar)), "application/json")}
                    if foo_bar is not OMIT
                    else {}
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
