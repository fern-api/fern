# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
from .root_type_1_inline_type_1 import RootType1InlineType1
import typing_extensions
import typing
from .root_type_1_foo_map_value import RootType1FooMapValue
from ..core.serialization import FieldMetadata
from .root_type_1_foo_list_item import RootType1FooListItem
from .root_type_1_foo_set_item import RootType1FooSetItem
from .reference_type import ReferenceType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class RootType1(UniversalBaseModel):
    """
    lorem ipsum
    """

    foo: str = pydantic.Field()
    """
    lorem ipsum
    """

    bar: RootType1InlineType1 = pydantic.Field()
    """
    lorem ipsum
    """

    foo_map: typing_extensions.Annotated[typing.Dict[str, RootType1FooMapValue], FieldMetadata(alias="fooMap")] = (
        pydantic.Field()
    )
    """
    lorem ipsum
    """

    foo_list: typing_extensions.Annotated[typing.List[RootType1FooListItem], FieldMetadata(alias="fooList")] = (
        pydantic.Field()
    )
    """
    lorem ipsum
    """

    foo_set: typing_extensions.Annotated[typing.List[RootType1FooSetItem], FieldMetadata(alias="fooSet")] = (
        pydantic.Field()
    )
    """
    lorem ipsum
    """

    ref: ReferenceType = pydantic.Field()
    """
    lorem ipsum
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
