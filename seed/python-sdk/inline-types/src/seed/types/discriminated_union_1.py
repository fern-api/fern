# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .discriminated_union_1_inline_type_1_inline_type_1 import DiscriminatedUnion1InlineType1InlineType1
from .reference_type import ReferenceType
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class DiscriminatedUnion1_Type1(UniversalBaseModel):
    """
    lorem ipsum
    """

    type: typing.Literal["type1"] = "type1"
    foo: str
    bar: DiscriminatedUnion1InlineType1InlineType1
    ref: ReferenceType

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DiscriminatedUnion1_Type2(UniversalBaseModel):
    """
    lorem ipsum
    """

    type: typing.Literal["type2"] = "type2"
    baz: str
    ref: ReferenceType

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DiscriminatedUnion1_Ref(UniversalBaseModel):
    """
    lorem ipsum
    """

    type: typing.Literal["ref"] = "ref"
    foo: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


DiscriminatedUnion1 = typing.Union[DiscriminatedUnion1_Type1, DiscriminatedUnion1_Type2, DiscriminatedUnion1_Ref]
