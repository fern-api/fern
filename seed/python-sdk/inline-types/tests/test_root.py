# This file was auto-generated by Fern from our API Definition.

from seed import SeedObject
from seed import AsyncSeedObject
import typing
from seed import RequestTypeInlineType1
from .utilities import validate_response
from seed import DiscriminatedUnion1_Type1
from seed import DiscriminatedUnion1InlineType1InlineType1
from seed import ReferenceType
from seed import UndiscriminatedUnion1InlineType1
from seed import UndiscriminatedUnion1InlineType1InlineType1


async def test_get_root(client: SeedObject, async_client: AsyncSeedObject) -> None:
    expected_response: typing.Any = {
        "foo": "foo",
        "bar": {
            "foo": "foo",
            "bar": {"foo": "foo", "bar": "bar", "myEnum": "SUNNY", "ref": {"foo": "foo"}},
            "ref": {"foo": "foo"},
        },
        "fooMap": {"fooMap": {"foo": "foo", "ref": {"foo": "foo"}}},
        "fooList": [{"foo": "foo", "ref": {"foo": "foo"}}, {"foo": "foo", "ref": {"foo": "foo"}}],
        "fooSet": [{"foo": "foo", "ref": {"foo": "foo"}}],
        "ref": {"foo": "foo"},
    }
    expected_types: typing.Any = {
        "foo": None,
        "bar": {
            "foo": None,
            "bar": {"foo": None, "bar": None, "myEnum": None, "ref": {"foo": None}},
            "ref": {"foo": None},
        },
        "fooMap": ("dict", {0: (None, {"foo": None, "ref": {"foo": None}})}),
        "fooList": ("list", {0: {"foo": None, "ref": {"foo": None}}, 1: {"foo": None, "ref": {"foo": None}}}),
        "fooSet": ("set", {0: {"foo": None, "ref": {"foo": None}}}),
        "ref": {"foo": None},
    }
    response = client.get_root(bar=RequestTypeInlineType1(foo="foo"), foo="foo")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.get_root(bar=RequestTypeInlineType1(foo="foo"), foo="foo")
    validate_response(async_response, expected_response, expected_types)


async def test_get_discriminated_union(client: SeedObject, async_client: AsyncSeedObject) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.get_discriminated_union(
            bar=DiscriminatedUnion1_Type1(
                foo="foo",
                bar=DiscriminatedUnion1InlineType1InlineType1(foo="foo", ref=ReferenceType(foo="foo")),
                ref=ReferenceType(foo="foo"),
            ),
            foo="foo",
        )  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.get_discriminated_union(
            bar=DiscriminatedUnion1_Type1(
                foo="foo",
                bar=DiscriminatedUnion1InlineType1InlineType1(foo="foo", ref=ReferenceType(foo="foo")),
                ref=ReferenceType(foo="foo"),
            ),
            foo="foo",
        )  # type: ignore[func-returns-value]
        is None
    )


async def test_get_undiscriminated_union(client: SeedObject, async_client: AsyncSeedObject) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.get_undiscriminated_union(
            bar=UndiscriminatedUnion1InlineType1(
                foo="foo",
                bar=UndiscriminatedUnion1InlineType1InlineType1(foo="foo", ref=ReferenceType(foo="foo")),
                ref=ReferenceType(foo="foo"),
            ),
            foo="foo",
        )  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.get_undiscriminated_union(
            bar=UndiscriminatedUnion1InlineType1(
                foo="foo",
                bar=UndiscriminatedUnion1InlineType1InlineType1(foo="foo", ref=ReferenceType(foo="foo")),
                ref=ReferenceType(foo="foo"),
            ),
            foo="foo",
        )  # type: ignore[func-returns-value]
        is None
    )
