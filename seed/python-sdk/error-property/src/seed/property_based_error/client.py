# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawPropertyBasedErrorClient
import typing
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawPropertyBasedErrorClient


class PropertyBasedErrorClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPropertyBasedErrorClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPropertyBasedErrorClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPropertyBasedErrorClient
        """
        return self._raw_client

    def throw_error(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET request that always throws an error

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import SeedErrorProperty
        client = SeedErrorProperty(base_url="https://yourhost.com/path/to/api", )
        client.property_based_error.throw_error()
        """
        response = self._raw_client.throw_error(request_options=request_options)
        return response.data


class AsyncPropertyBasedErrorClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPropertyBasedErrorClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPropertyBasedErrorClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPropertyBasedErrorClient
        """
        return self._raw_client

    async def throw_error(self, *, request_options: typing.Optional[RequestOptions] = None) -> str:
        """
        GET request that always throws an error

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str

        Examples
        --------
        from seed import AsyncSeedErrorProperty
        import asyncio
        client = AsyncSeedErrorProperty(base_url="https://yourhost.com/path/to/api", )
        async def main() -> None:
            await client.property_based_error.throw_error()
        asyncio.run(main())
        """
        response = await self._raw_client.throw_error(request_options=request_options)
        return response.data
