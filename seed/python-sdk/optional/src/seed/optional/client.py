# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawOptionalClient
from ..core.request_options import RequestOptions
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawOptionalClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class OptionalClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawOptionalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawOptionalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawOptionalClient
        """
        return self._raw_client

    def send_optional_body(
        self,
        *,
        request: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        request : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Id of the created resource

        Examples
        --------
        from seed import SeedObjectsWithImports

        client = SeedObjectsWithImports(
            base_url="https://yourhost.com/path/to/api",
        )
        client.optional.send_optional_body(
            request={"string": {"key": "value"}},
        )
        """
        response = self._raw_client.send_optional_body(request=request, request_options=request_options)
        return response.data


class AsyncOptionalClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawOptionalClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawOptionalClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawOptionalClient
        """
        return self._raw_client

    async def send_optional_body(
        self,
        *,
        request: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> str:
        """
        Parameters
        ----------
        request : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        str
            Id of the created resource

        Examples
        --------
        import asyncio

        from seed import AsyncSeedObjectsWithImports

        client = AsyncSeedObjectsWithImports(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.optional.send_optional_body(
                request={"string": {"key": "value"}},
            )


        asyncio.run(main())
        """
        response = await self._raw_client.send_optional_body(request=request, request_options=request_options)
        return response.data
