# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from .metadata import MetadataParams
    from .status import StatusParams, Status_ActiveParams, Status_ArchivedParams, Status_SoftDeletedParams
    from .user import UserParams
    from .weird_number import WeirdNumberParams
_dynamic_imports: typing.Dict[str, str] = {
    "MetadataParams": ".metadata",
    "StatusParams": ".status",
    "Status_ActiveParams": ".status",
    "Status_ArchivedParams": ".status",
    "Status_SoftDeletedParams": ".status",
    "UserParams": ".user",
    "WeirdNumberParams": ".weird_number",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "MetadataParams",
    "StatusParams",
    "Status_ActiveParams",
    "Status_ArchivedParams",
    "Status_SoftDeletedParams",
    "UserParams",
    "WeirdNumberParams",
]
