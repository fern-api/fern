# This file was auto-generated by Fern from our API Definition.

# isort: skip_file

import typing
from importlib import import_module

if typing.TYPE_CHECKING:
    from . import commons, folder_a, folder_b, folder_c, folder_d, foo
    from .client import AsyncSeedCrossPackageTypeNames, SeedCrossPackageTypeNames
    from .commons import Imported
    from .foo import ImportingType, OptionalString
    from .version import __version__
_dynamic_imports: typing.Dict[str, str] = {
    "AsyncSeedCrossPackageTypeNames": ".client",
    "Imported": ".commons",
    "ImportingType": ".foo",
    "OptionalString": ".foo",
    "SeedCrossPackageTypeNames": ".client",
    "__version__": ".version",
    "commons": ".commons",
    "folder_a": ".folder_a",
    "folder_b": ".folder_b",
    "folder_c": ".folder_c",
    "folder_d": ".folder_d",
    "foo": ".foo",
}


def __getattr__(attr_name: str) -> typing.Any:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(f"No {attr_name} found in _dynamic_imports for module name -> {__name__}")
    try:
        module = import_module(module_name, __package__)
        if module_name == f".{attr_name}":
            return module
        else:
            return getattr(module, attr_name)
    except ImportError as e:
        raise ImportError(f"Failed to import {attr_name} from {module_name}: {e}") from e
    except AttributeError as e:
        raise AttributeError(f"Failed to get {attr_name} from {module_name}: {e}") from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)


__all__ = [
    "AsyncSeedCrossPackageTypeNames",
    "Imported",
    "ImportingType",
    "OptionalString",
    "SeedCrossPackageTypeNames",
    "__version__",
    "commons",
    "folder_a",
    "folder_b",
    "folder_c",
    "folder_d",
    "foo",
]
