{
    "types": {},
    "endpoints": [
        {
            "example_identifier": "default",
            "id": {
                "path": "/user/getUsername",
                "method": "GET",
                "identifier_override": "endpoint_.search"
            },
            "snippet": {
                "sync_client": "import datetime\n\nfrom seed import NestedUser, SeedApi, User\n\nclient = SeedApi(\n    base_url=\"https://yourhost.com/path/to/api\",\n)\nclient.search(\n    limit=1,\n    id=\"id\",\n    date=\"date\",\n    deadline=datetime.datetime.fromisoformat(\n        \"2024-01-15 09:30:00+00:00\",\n    ),\n    bytes=\"bytes\",\n    user=User(\n        name=\"name\",\n        tags=[\"tags\", \"tags\"],\n    ),\n    user_list=User(\n        name=\"name\",\n        tags=[\"tags\", \"tags\"],\n    ),\n    optional_deadline=datetime.datetime.fromisoformat(\n        \"2024-01-15 09:30:00+00:00\",\n    ),\n    key_value={\"keyValue\": \"keyValue\"},\n    optional_string=\"optionalString\",\n    nested_user=NestedUser(\n        name=\"name\",\n        user=User(\n            name=\"name\",\n            tags=[\"tags\", \"tags\"],\n        ),\n    ),\n    optional_user=User(\n        name=\"name\",\n        tags=[\"tags\", \"tags\"],\n    ),\n    exclude_user=User(\n        name=\"name\",\n        tags=[\"tags\", \"tags\"],\n    ),\n    filter=\"filter\",\n    neighbor=User(\n        name=\"name\",\n        tags=[\"tags\", \"tags\"],\n    ),\n    neighbor_required=User(\n        name=\"name\",\n        tags=[\"tags\", \"tags\"],\n    ),\n)\n",
                "async_client": "import asyncio\nimport datetime\n\nfrom seed import AsyncSeedApi, NestedUser, User\n\nclient = AsyncSeedApi(\n    base_url=\"https://yourhost.com/path/to/api\",\n)\n\n\nasync def main() -> None:\n    await client.search(\n        limit=1,\n        id=\"id\",\n        date=\"date\",\n        deadline=datetime.datetime.fromisoformat(\n            \"2024-01-15 09:30:00+00:00\",\n        ),\n        bytes=\"bytes\",\n        user=User(\n            name=\"name\",\n            tags=[\"tags\", \"tags\"],\n        ),\n        user_list=User(\n            name=\"name\",\n            tags=[\"tags\", \"tags\"],\n        ),\n        optional_deadline=datetime.datetime.fromisoformat(\n            \"2024-01-15 09:30:00+00:00\",\n        ),\n        key_value={\"keyValue\": \"keyValue\"},\n        optional_string=\"optionalString\",\n        nested_user=NestedUser(\n            name=\"name\",\n            user=User(\n                name=\"name\",\n                tags=[\"tags\", \"tags\"],\n            ),\n        ),\n        optional_user=User(\n            name=\"name\",\n            tags=[\"tags\", \"tags\"],\n        ),\n        exclude_user=User(\n            name=\"name\",\n            tags=[\"tags\", \"tags\"],\n        ),\n        filter=\"filter\",\n        neighbor=User(\n            name=\"name\",\n            tags=[\"tags\", \"tags\"],\n        ),\n        neighbor_required=User(\n            name=\"name\",\n            tags=[\"tags\", \"tags\"],\n        ),\n    )\n\n\nasyncio.run(main())\n",
                "type": "python"
            }
        }
    ]
}