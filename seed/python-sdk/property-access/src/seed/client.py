# This file was auto-generated by Fern from our API Definition.

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .raw_client import AsyncRawSeedPropertyAccess, RawSeedPropertyAccess
from .types.user import User
from .types.user_profile import UserProfile

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SeedPropertyAccess:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import SeedPropertyAccess

    client = SeedPropertyAccess(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawSeedPropertyAccess(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> RawSeedPropertyAccess:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSeedPropertyAccess
        """
        return self._raw_client

    def create_user(
        self,
        *,
        id: str,
        email: str,
        password: str,
        profile: UserProfile,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        id : str
            The unique identifier for the user.

        email : str
            The email address of the user.

        password : str
            The password for the user.

        profile : UserProfile
            User profile object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        from seed import SeedPropertyAccess, UserProfile, UserProfileVerification

        client = SeedPropertyAccess(
            base_url="https://yourhost.com/path/to/api",
        )
        client.create_user(
            id="id",
            email="email",
            password="password",
            profile=UserProfile(
                name="name",
                verification=UserProfileVerification(
                    verified="verified",
                ),
                ssn="ssn",
            ),
        )
        """
        _response = self._raw_client.create_user(
            id=id, email=email, password=password, profile=profile, request_options=request_options
        )
        return _response.data


class AsyncSeedPropertyAccess:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from seed import AsyncSeedPropertyAccess

    client = AsyncSeedPropertyAccess(
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawSeedPropertyAccess(client_wrapper=self._client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSeedPropertyAccess:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSeedPropertyAccess
        """
        return self._raw_client

    async def create_user(
        self,
        *,
        id: str,
        email: str,
        password: str,
        profile: UserProfile,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> User:
        """
        Parameters
        ----------
        id : str
            The unique identifier for the user.

        email : str
            The email address of the user.

        password : str
            The password for the user.

        profile : UserProfile
            User profile object

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        User

        Examples
        --------
        import asyncio

        from seed import AsyncSeedPropertyAccess, UserProfile, UserProfileVerification

        client = AsyncSeedPropertyAccess(
            base_url="https://yourhost.com/path/to/api",
        )


        async def main() -> None:
            await client.create_user(
                id="id",
                email="email",
                password="password",
                profile=UserProfile(
                    name="name",
                    verification=UserProfileVerification(
                        verified="verified",
                    ),
                    ssn="ssn",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_user(
            id=id, email=email, password=password, profile=profile, request_options=request_options
        )
        return _response.data
