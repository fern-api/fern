// Code generated by Fern. DO NOT EDIT.

package propertyaccess

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/property-access/fern/internal"
)

// User object
type User struct {
	// The unique identifier for the user.
	Id string `json:"id" url:"id"`
	// The email address of the user.
	Email string `json:"email" url:"email"`
	// The password for the user.
	Password string `json:"password" url:"password"`
	// User profile object
	Profile *UserProfile `json:"profile" url:"profile"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (u *User) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *User) GetEmail() string {
	if u == nil {
		return ""
	}
	return u.Email
}

func (u *User) GetPassword() string {
	if u == nil {
		return ""
	}
	return u.Password
}

func (u *User) GetProfile() *UserProfile {
	if u == nil {
		return nil
	}
	return u.Profile
}

func (u *User) GetExtraProperties() map[string]any {
	if u == nil {
		return nil
	}
	return u.extraProperties
}

func (u *User) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// User profile object
type UserProfile struct {
	// The name of the user.
	Name string `json:"name" url:"name"`
	// User profile verification object
	Verification *UserProfileVerification `json:"verification" url:"verification"`
	// The social security number of the user.
	Ssn string `json:"ssn" url:"ssn"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (u *UserProfile) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UserProfile) GetVerification() *UserProfileVerification {
	if u == nil {
		return nil
	}
	return u.Verification
}

func (u *UserProfile) GetSsn() string {
	if u == nil {
		return ""
	}
	return u.Ssn
}

func (u *UserProfile) GetExtraProperties() map[string]any {
	if u == nil {
		return nil
	}
	return u.extraProperties
}

func (u *UserProfile) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler UserProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserProfile) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// User profile verification object
type UserProfileVerification struct {
	// User profile verification status
	Verified string `json:"verified" url:"verified"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (u *UserProfileVerification) GetVerified() string {
	if u == nil {
		return ""
	}
	return u.Verified
}

func (u *UserProfileVerification) GetExtraProperties() map[string]any {
	if u == nil {
		return nil
	}
	return u.extraProperties
}

func (u *UserProfileVerification) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler UserProfileVerification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserProfileVerification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserProfileVerification) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Example of an undiscriminated union
type UserOrAdmin struct {
	User  *User
	Admin *Admin
}

// Admin user object
type Admin struct {
	// The unique identifier for the user.
	Id string `json:"id" url:"id"`
	// The email address of the user.
	Email string `json:"email" url:"email"`
	// The password for the user.
	Password string `json:"password" url:"password"`
	// User profile object
	Profile *UserProfile `json:"profile" url:"profile"`
	// The level of admin privileges.
	AdminLevel string `json:"adminLevel" url:"adminLevel"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (a *Admin) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *Admin) GetEmail() string {
	if a == nil {
		return ""
	}
	return a.Email
}

func (a *Admin) GetPassword() string {
	if a == nil {
		return ""
	}
	return a.Password
}

func (a *Admin) GetProfile() *UserProfile {
	if a == nil {
		return nil
	}
	return a.Profile
}

func (a *Admin) GetAdminLevel() string {
	if a == nil {
		return ""
	}
	return a.AdminLevel
}

func (a *Admin) GetExtraProperties() map[string]any {
	if a == nil {
		return nil
	}
	return a.extraProperties
}

func (a *Admin) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler Admin
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Admin(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Admin) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Example of an discriminated union
type UserOrAdminDiscriminated struct {
	// Example of an discriminated union
	Type   string
	Normal string
	Read   string
	Write  string
	Normal string
	Foo    *Foo
	// User object
	User  User
	Admin *Admin
	Empty any
}

type Foo struct {
	Normal string `json:"normal" url:"normal"`
	Read   string `json:"read" url:"read"`
	Write  string `json:"write" url:"write"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (f *Foo) GetNormal() string {
	if f == nil {
		return ""
	}
	return f.Normal
}

func (f *Foo) GetRead() string {
	if f == nil {
		return ""
	}
	return f.Read
}

func (f *Foo) GetWrite() string {
	if f == nil {
		return ""
	}
	return f.Write
}

func (f *Foo) GetExtraProperties() map[string]any {
	if f == nil {
		return nil
	}
	return f.extraProperties
}

func (f *Foo) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler Foo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = Foo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *Foo) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}
