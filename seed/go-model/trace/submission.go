// Code generated by Fern. DO NOT EDIT.

package trace

import (
    uuid "github.com/google/uuid"
    json "encoding/json"
    internal "github.com/trace/fern/internal"
    fmt "fmt"
    v2 "github.com/trace/fern/v2"
    time "time"
)


type SubmissionId = uuid.UUID

type ShareId = string

type SubmissionRequest struct {
    Type string
    InitializeProblemRequest InitializeProblemRequest
    InitializeWorkspaceRequest any
    SubmitV2 SubmitRequestV2
    WorkspaceSubmit WorkspaceSubmitRequest
    Stop StopRequest
}


type InitializeProblemRequest struct {
    ProblemId ProblemId `json:"problemId" url:"problemId"`
    ProblemVersion *int `json:"problemVersion,omitempty" url:"problemVersion,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (i *InitializeProblemRequest) GetProblemId() ProblemId{
    if i == nil {
        return ""
    }
    return i.ProblemId
}

func (i *InitializeProblemRequest) GetProblemVersion() *int{
    if i == nil {
        return nil
    }
    return i.ProblemVersion
}

func (i *InitializeProblemRequest) GetExtraProperties() map[string]any{
    if i == nil {
        return nil
    }
    return i.extraProperties
}

func (i *InitializeProblemRequest) String() string{
    if len(i.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(i); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", i)
}


type SubmitRequestV2 struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    Language *Language `json:"language" url:"language"`
    SubmissionFiles []*SubmissionFileInfo `json:"submissionFiles" url:"submissionFiles"`
    ProblemId ProblemId `json:"problemId" url:"problemId"`
    ProblemVersion *int `json:"problemVersion,omitempty" url:"problemVersion,omitempty"`
    UserId *string `json:"userId,omitempty" url:"userId,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *SubmitRequestV2) GetSubmissionId() SubmissionId{
    if s == nil {
        return uuid.UUID{}
    }
    return s.SubmissionId
}

func (s *SubmitRequestV2) GetLanguage() *Language{
    if s == nil {
        return nil
    }
    return s.Language
}

func (s *SubmitRequestV2) GetSubmissionFiles() []*SubmissionFileInfo{
    if s == nil {
        return nil
    }
    return s.SubmissionFiles
}

func (s *SubmitRequestV2) GetProblemId() ProblemId{
    if s == nil {
        return ""
    }
    return s.ProblemId
}

func (s *SubmitRequestV2) GetProblemVersion() *int{
    if s == nil {
        return nil
    }
    return s.ProblemVersion
}

func (s *SubmitRequestV2) GetUserId() *string{
    if s == nil {
        return nil
    }
    return s.UserId
}

func (s *SubmitRequestV2) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *SubmitRequestV2) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type WorkspaceSubmitRequest struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    Language *Language `json:"language" url:"language"`
    SubmissionFiles []*SubmissionFileInfo `json:"submissionFiles" url:"submissionFiles"`
    UserId *string `json:"userId,omitempty" url:"userId,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceSubmitRequest) GetSubmissionId() SubmissionId{
    if w == nil {
        return uuid.UUID{}
    }
    return w.SubmissionId
}

func (w *WorkspaceSubmitRequest) GetLanguage() *Language{
    if w == nil {
        return nil
    }
    return w.Language
}

func (w *WorkspaceSubmitRequest) GetSubmissionFiles() []*SubmissionFileInfo{
    if w == nil {
        return nil
    }
    return w.SubmissionFiles
}

func (w *WorkspaceSubmitRequest) GetUserId() *string{
    if w == nil {
        return nil
    }
    return w.UserId
}

func (w *WorkspaceSubmitRequest) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceSubmitRequest) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type SubmissionFileInfo struct {
    Directory string `json:"directory" url:"directory"`
    Filename string `json:"filename" url:"filename"`
    Contents string `json:"contents" url:"contents"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *SubmissionFileInfo) GetDirectory() string{
    if s == nil {
        return ""
    }
    return s.Directory
}

func (s *SubmissionFileInfo) GetFilename() string{
    if s == nil {
        return ""
    }
    return s.Filename
}

func (s *SubmissionFileInfo) GetContents() string{
    if s == nil {
        return ""
    }
    return s.Contents
}

func (s *SubmissionFileInfo) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *SubmissionFileInfo) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


// Keep in sync with SubmissionType.
type SubmissionTypeEnum string

const (
    SubmissionTypeEnumTest = "TEST"
)
func NewSubmissionTypeEnumFromString(s string) (SubmissionTypeEnum, error){
    switch s{
        case "TEST":
            return SubmissionTypeEnumTest, nil
    }
    var t SubmissionTypeEnum
    return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SubmissionTypeEnum) Ptr() *SubmissionTypeEnum{
    return &s
}


type StopRequest struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *StopRequest) GetSubmissionId() SubmissionId{
    if s == nil {
        return uuid.UUID{}
    }
    return s.SubmissionId
}

func (s *StopRequest) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *StopRequest) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type SubmissionResponse struct {
    Type string
    ServerInitialized any
    ProblemInitialized ProblemId
    WorkspaceInitialized any
    ServerErrored ExceptionInfo
    CodeExecutionUpdate *CodeExecutionUpdate
    Terminated TerminatedResponse
}


type CodeExecutionUpdate struct {
    Type string
    BuildingExecutor BuildingExecutorResponse
    Running RunningResponse
    Errored ErroredResponse
    Stopped StoppedResponse
    Graded GradedResponse
    GradedV2 GradedResponseV2
    WorkspaceRan WorkspaceRanResponse
    Recording RecordingResponseNotification
    Recorded RecordedResponseNotification
    InvalidRequest InvalidRequestResponse
    Finished FinishedResponse
}


type BuildingExecutorResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    Status *ExecutionSessionStatus `json:"status" url:"status"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (b *BuildingExecutorResponse) GetSubmissionId() SubmissionId{
    if b == nil {
        return uuid.UUID{}
    }
    return b.SubmissionId
}

func (b *BuildingExecutorResponse) GetStatus() *ExecutionSessionStatus{
    if b == nil {
        return nil
    }
    return b.Status
}

func (b *BuildingExecutorResponse) GetExtraProperties() map[string]any{
    if b == nil {
        return nil
    }
    return b.extraProperties
}

func (b *BuildingExecutorResponse) String() string{
    if len(b.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(b); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", b)
}


type RunningResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    State *RunningSubmissionState `json:"state" url:"state"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (r *RunningResponse) GetSubmissionId() SubmissionId{
    if r == nil {
        return uuid.UUID{}
    }
    return r.SubmissionId
}

func (r *RunningResponse) GetState() *RunningSubmissionState{
    if r == nil {
        return nil
    }
    return r.State
}

func (r *RunningResponse) GetExtraProperties() map[string]any{
    if r == nil {
        return nil
    }
    return r.extraProperties
}

func (r *RunningResponse) String() string{
    if len(r.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(r); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", r)
}


type RunningSubmissionState string

const (
    RunningSubmissionStateQueueingSubmission = "QUEUEING_SUBMISSION"
    RunningSubmissionStateKillingHistoricalSubmissions = "KILLING_HISTORICAL_SUBMISSIONS"
    RunningSubmissionStateWritingSubmissionToFile = "WRITING_SUBMISSION_TO_FILE"
    RunningSubmissionStateCompilingSubmission = "COMPILING_SUBMISSION"
    RunningSubmissionStateRunningSubmission = "RUNNING_SUBMISSION"
)
func NewRunningSubmissionStateFromString(s string) (RunningSubmissionState, error){
    switch s{
        case "QUEUEING_SUBMISSION":
            return RunningSubmissionStateQueueingSubmission, nil
        case "KILLING_HISTORICAL_SUBMISSIONS":
            return RunningSubmissionStateKillingHistoricalSubmissions, nil
        case "WRITING_SUBMISSION_TO_FILE":
            return RunningSubmissionStateWritingSubmissionToFile, nil
        case "COMPILING_SUBMISSION":
            return RunningSubmissionStateCompilingSubmission, nil
        case "RUNNING_SUBMISSION":
            return RunningSubmissionStateRunningSubmission, nil
    }
    var t RunningSubmissionState
    return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RunningSubmissionState) Ptr() *RunningSubmissionState{
    return &r
}


type ErroredResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    ErrorInfo *ErrorInfo `json:"errorInfo" url:"errorInfo"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (e *ErroredResponse) GetSubmissionId() SubmissionId{
    if e == nil {
        return uuid.UUID{}
    }
    return e.SubmissionId
}

func (e *ErroredResponse) GetErrorInfo() *ErrorInfo{
    if e == nil {
        return nil
    }
    return e.ErrorInfo
}

func (e *ErroredResponse) GetExtraProperties() map[string]any{
    if e == nil {
        return nil
    }
    return e.extraProperties
}

func (e *ErroredResponse) String() string{
    if len(e.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(e); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", e)
}


type ErrorInfo struct {
    Type string
    CompileError CompileError
    RuntimeError RuntimeError
    InternalError InternalError
}


type CompileError struct {
    Message string `json:"message" url:"message"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (c *CompileError) GetMessage() string{
    if c == nil {
        return ""
    }
    return c.Message
}

func (c *CompileError) GetExtraProperties() map[string]any{
    if c == nil {
        return nil
    }
    return c.extraProperties
}

func (c *CompileError) String() string{
    if len(c.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(c); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", c)
}


type RuntimeError struct {
    Message string `json:"message" url:"message"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (r *RuntimeError) GetMessage() string{
    if r == nil {
        return ""
    }
    return r.Message
}

func (r *RuntimeError) GetExtraProperties() map[string]any{
    if r == nil {
        return nil
    }
    return r.extraProperties
}

func (r *RuntimeError) String() string{
    if len(r.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(r); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", r)
}


type InternalError struct {
    ExceptionInfo *ExceptionInfo `json:"exceptionInfo" url:"exceptionInfo"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (i *InternalError) GetExceptionInfo() *ExceptionInfo{
    if i == nil {
        return nil
    }
    return i.ExceptionInfo
}

func (i *InternalError) GetExtraProperties() map[string]any{
    if i == nil {
        return nil
    }
    return i.extraProperties
}

func (i *InternalError) String() string{
    if len(i.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(i); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", i)
}


type StoppedResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *StoppedResponse) GetSubmissionId() SubmissionId{
    if s == nil {
        return uuid.UUID{}
    }
    return s.SubmissionId
}

func (s *StoppedResponse) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *StoppedResponse) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type WorkspaceRanResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    RunDetails *WorkspaceRunDetails `json:"runDetails" url:"runDetails"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceRanResponse) GetSubmissionId() SubmissionId{
    if w == nil {
        return uuid.UUID{}
    }
    return w.SubmissionId
}

func (w *WorkspaceRanResponse) GetRunDetails() *WorkspaceRunDetails{
    if w == nil {
        return nil
    }
    return w.RunDetails
}

func (w *WorkspaceRanResponse) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceRanResponse) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type WorkspaceRunDetails struct {
    ExceptionV2 *ExceptionV2 `json:"exceptionV2,omitempty" url:"exceptionV2,omitempty"`
    Exception *ExceptionInfo `json:"exception,omitempty" url:"exception,omitempty"`
    Stdout string `json:"stdout" url:"stdout"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceRunDetails) GetExceptionV2() *ExceptionV2{
    if w == nil {
        return nil
    }
    return w.ExceptionV2
}

func (w *WorkspaceRunDetails) GetException() *ExceptionInfo{
    if w == nil {
        return nil
    }
    return w.Exception
}

func (w *WorkspaceRunDetails) GetStdout() string{
    if w == nil {
        return ""
    }
    return w.Stdout
}

func (w *WorkspaceRunDetails) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceRunDetails) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type GradedResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    TestCases map[string]*TestCaseResultWithStdout `json:"testCases" url:"testCases"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (g *GradedResponse) GetSubmissionId() SubmissionId{
    if g == nil {
        return uuid.UUID{}
    }
    return g.SubmissionId
}

func (g *GradedResponse) GetTestCases() map[string]*TestCaseResultWithStdout{
    if g == nil {
        return nil
    }
    return g.TestCases
}

func (g *GradedResponse) GetExtraProperties() map[string]any{
    if g == nil {
        return nil
    }
    return g.extraProperties
}

func (g *GradedResponse) String() string{
    if len(g.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(g); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", g)
}


type GradedResponseV2 struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    TestCases map[v2.TestCaseId]*TestCaseGrade `json:"testCases" url:"testCases"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (g *GradedResponseV2) GetSubmissionId() SubmissionId{
    if g == nil {
        return uuid.UUID{}
    }
    return g.SubmissionId
}

func (g *GradedResponseV2) GetTestCases() map[v2.TestCaseId]*TestCaseGrade{
    if g == nil {
        return nil
    }
    return g.TestCases
}

func (g *GradedResponseV2) GetExtraProperties() map[string]any{
    if g == nil {
        return nil
    }
    return g.extraProperties
}

func (g *GradedResponseV2) String() string{
    if len(g.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(g); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", g)
}


type TestCaseGrade struct {
    Type string
    Hidden TestCaseHiddenGrade
    NonHidden TestCaseNonHiddenGrade
}


type TestCaseHiddenGrade struct {
    Passed bool `json:"passed" url:"passed"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TestCaseHiddenGrade) GetPassed() bool{
    if t == nil {
        return false
    }
    return t.Passed
}

func (t *TestCaseHiddenGrade) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TestCaseHiddenGrade) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TestCaseNonHiddenGrade struct {
    Passed bool `json:"passed" url:"passed"`
    ActualResult *VariableValue `json:"actualResult,omitempty" url:"actualResult,omitempty"`
    Exception *ExceptionV2 `json:"exception,omitempty" url:"exception,omitempty"`
    Stdout string `json:"stdout" url:"stdout"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TestCaseNonHiddenGrade) GetPassed() bool{
    if t == nil {
        return false
    }
    return t.Passed
}

func (t *TestCaseNonHiddenGrade) GetActualResult() *VariableValue{
    if t == nil {
        return nil
    }
    return t.ActualResult
}

func (t *TestCaseNonHiddenGrade) GetException() *ExceptionV2{
    if t == nil {
        return nil
    }
    return t.Exception
}

func (t *TestCaseNonHiddenGrade) GetStdout() string{
    if t == nil {
        return ""
    }
    return t.Stdout
}

func (t *TestCaseNonHiddenGrade) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TestCaseNonHiddenGrade) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type RecordedResponseNotification struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    TraceResponsesSize int `json:"traceResponsesSize" url:"traceResponsesSize"`
    TestCaseId *string `json:"testCaseId,omitempty" url:"testCaseId,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (r *RecordedResponseNotification) GetSubmissionId() SubmissionId{
    if r == nil {
        return uuid.UUID{}
    }
    return r.SubmissionId
}

func (r *RecordedResponseNotification) GetTraceResponsesSize() int{
    if r == nil {
        return 0
    }
    return r.TraceResponsesSize
}

func (r *RecordedResponseNotification) GetTestCaseId() *string{
    if r == nil {
        return nil
    }
    return r.TestCaseId
}

func (r *RecordedResponseNotification) GetExtraProperties() map[string]any{
    if r == nil {
        return nil
    }
    return r.extraProperties
}

func (r *RecordedResponseNotification) String() string{
    if len(r.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(r); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", r)
}


type RecordingResponseNotification struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    TestCaseId *string `json:"testCaseId,omitempty" url:"testCaseId,omitempty"`
    LineNumber int `json:"lineNumber" url:"lineNumber"`
    LightweightStackInfo *LightweightStackframeInformation `json:"lightweightStackInfo" url:"lightweightStackInfo"`
    TracedFile *TracedFile `json:"tracedFile,omitempty" url:"tracedFile,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (r *RecordingResponseNotification) GetSubmissionId() SubmissionId{
    if r == nil {
        return uuid.UUID{}
    }
    return r.SubmissionId
}

func (r *RecordingResponseNotification) GetTestCaseId() *string{
    if r == nil {
        return nil
    }
    return r.TestCaseId
}

func (r *RecordingResponseNotification) GetLineNumber() int{
    if r == nil {
        return 0
    }
    return r.LineNumber
}

func (r *RecordingResponseNotification) GetLightweightStackInfo() *LightweightStackframeInformation{
    if r == nil {
        return nil
    }
    return r.LightweightStackInfo
}

func (r *RecordingResponseNotification) GetTracedFile() *TracedFile{
    if r == nil {
        return nil
    }
    return r.TracedFile
}

func (r *RecordingResponseNotification) GetExtraProperties() map[string]any{
    if r == nil {
        return nil
    }
    return r.extraProperties
}

func (r *RecordingResponseNotification) String() string{
    if len(r.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(r); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", r)
}


type LightweightStackframeInformation struct {
    NumStackFrames int `json:"numStackFrames" url:"numStackFrames"`
    TopStackFrameMethodName string `json:"topStackFrameMethodName" url:"topStackFrameMethodName"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (l *LightweightStackframeInformation) GetNumStackFrames() int{
    if l == nil {
        return 0
    }
    return l.NumStackFrames
}

func (l *LightweightStackframeInformation) GetTopStackFrameMethodName() string{
    if l == nil {
        return ""
    }
    return l.TopStackFrameMethodName
}

func (l *LightweightStackframeInformation) GetExtraProperties() map[string]any{
    if l == nil {
        return nil
    }
    return l.extraProperties
}

func (l *LightweightStackframeInformation) String() string{
    if len(l.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(l); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", l)
}


type TestCaseResultWithStdout struct {
    Result *TestCaseResult `json:"result" url:"result"`
    Stdout string `json:"stdout" url:"stdout"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TestCaseResultWithStdout) GetResult() *TestCaseResult{
    if t == nil {
        return nil
    }
    return t.Result
}

func (t *TestCaseResultWithStdout) GetStdout() string{
    if t == nil {
        return ""
    }
    return t.Stdout
}

func (t *TestCaseResultWithStdout) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TestCaseResultWithStdout) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TestCaseResult struct {
    ExpectedResult *VariableValue `json:"expectedResult" url:"expectedResult"`
    ActualResult *ActualResult `json:"actualResult" url:"actualResult"`
    Passed bool `json:"passed" url:"passed"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TestCaseResult) GetExpectedResult() *VariableValue{
    if t == nil {
        return nil
    }
    return t.ExpectedResult
}

func (t *TestCaseResult) GetActualResult() *ActualResult{
    if t == nil {
        return nil
    }
    return t.ActualResult
}

func (t *TestCaseResult) GetPassed() bool{
    if t == nil {
        return false
    }
    return t.Passed
}

func (t *TestCaseResult) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TestCaseResult) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type ActualResult struct {
    Type string
    Value *VariableValue
    Exception ExceptionInfo
    ExceptionV2 *ExceptionV2
}


type ExceptionV2 struct {
    Type string
    Generic ExceptionInfo
    Timeout any
}


type ExceptionInfo struct {
    ExceptionType string `json:"exceptionType" url:"exceptionType"`
    ExceptionMessage string `json:"exceptionMessage" url:"exceptionMessage"`
    ExceptionStacktrace string `json:"exceptionStacktrace" url:"exceptionStacktrace"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (e *ExceptionInfo) GetExceptionType() string{
    if e == nil {
        return ""
    }
    return e.ExceptionType
}

func (e *ExceptionInfo) GetExceptionMessage() string{
    if e == nil {
        return ""
    }
    return e.ExceptionMessage
}

func (e *ExceptionInfo) GetExceptionStacktrace() string{
    if e == nil {
        return ""
    }
    return e.ExceptionStacktrace
}

func (e *ExceptionInfo) GetExtraProperties() map[string]any{
    if e == nil {
        return nil
    }
    return e.extraProperties
}

func (e *ExceptionInfo) String() string{
    if len(e.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(e); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", e)
}


type InvalidRequestResponse struct {
    Request *SubmissionRequest `json:"request" url:"request"`
    Cause *InvalidRequestCause `json:"cause" url:"cause"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (i *InvalidRequestResponse) GetRequest() *SubmissionRequest{
    if i == nil {
        return nil
    }
    return i.Request
}

func (i *InvalidRequestResponse) GetCause() *InvalidRequestCause{
    if i == nil {
        return nil
    }
    return i.Cause
}

func (i *InvalidRequestResponse) GetExtraProperties() map[string]any{
    if i == nil {
        return nil
    }
    return i.extraProperties
}

func (i *InvalidRequestResponse) String() string{
    if len(i.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(i); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", i)
}


type InvalidRequestCause struct {
    Type string
    SubmissionIdNotFound SubmissionIdNotFound
    CustomTestCasesUnsupported CustomTestCasesUnsupported
    UnexpectedLanguage UnexpectedLanguageError
}


type ExistingSubmissionExecuting struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (e *ExistingSubmissionExecuting) GetSubmissionId() SubmissionId{
    if e == nil {
        return uuid.UUID{}
    }
    return e.SubmissionId
}

func (e *ExistingSubmissionExecuting) GetExtraProperties() map[string]any{
    if e == nil {
        return nil
    }
    return e.extraProperties
}

func (e *ExistingSubmissionExecuting) String() string{
    if len(e.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(e); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", e)
}


type SubmissionIdNotFound struct {
    MissingSubmissionId SubmissionId `json:"missingSubmissionId" url:"missingSubmissionId"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *SubmissionIdNotFound) GetMissingSubmissionId() SubmissionId{
    if s == nil {
        return uuid.UUID{}
    }
    return s.MissingSubmissionId
}

func (s *SubmissionIdNotFound) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *SubmissionIdNotFound) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type CustomTestCasesUnsupported struct {
    ProblemId ProblemId `json:"problemId" url:"problemId"`
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (c *CustomTestCasesUnsupported) GetProblemId() ProblemId{
    if c == nil {
        return ""
    }
    return c.ProblemId
}

func (c *CustomTestCasesUnsupported) GetSubmissionId() SubmissionId{
    if c == nil {
        return uuid.UUID{}
    }
    return c.SubmissionId
}

func (c *CustomTestCasesUnsupported) GetExtraProperties() map[string]any{
    if c == nil {
        return nil
    }
    return c.extraProperties
}

func (c *CustomTestCasesUnsupported) String() string{
    if len(c.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(c); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", c)
}


type UnexpectedLanguageError struct {
    ExpectedLanguage *Language `json:"expectedLanguage" url:"expectedLanguage"`
    ActualLanguage *Language `json:"actualLanguage" url:"actualLanguage"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (u *UnexpectedLanguageError) GetExpectedLanguage() *Language{
    if u == nil {
        return nil
    }
    return u.ExpectedLanguage
}

func (u *UnexpectedLanguageError) GetActualLanguage() *Language{
    if u == nil {
        return nil
    }
    return u.ActualLanguage
}

func (u *UnexpectedLanguageError) GetExtraProperties() map[string]any{
    if u == nil {
        return nil
    }
    return u.extraProperties
}

func (u *UnexpectedLanguageError) String() string{
    if len(u.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(u); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", u)
}


type TerminatedResponse struct {
    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TerminatedResponse) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TerminatedResponse) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type FinishedResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (f *FinishedResponse) GetSubmissionId() SubmissionId{
    if f == nil {
        return uuid.UUID{}
    }
    return f.SubmissionId
}

func (f *FinishedResponse) GetExtraProperties() map[string]any{
    if f == nil {
        return nil
    }
    return f.extraProperties
}

func (f *FinishedResponse) String() string{
    if len(f.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(f); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", f)
}


type StdoutResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    Stdout string `json:"stdout" url:"stdout"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *StdoutResponse) GetSubmissionId() SubmissionId{
    if s == nil {
        return uuid.UUID{}
    }
    return s.SubmissionId
}

func (s *StdoutResponse) GetStdout() string{
    if s == nil {
        return ""
    }
    return s.Stdout
}

func (s *StdoutResponse) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *StdoutResponse) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type StderrResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    Stderr string `json:"stderr" url:"stderr"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *StderrResponse) GetSubmissionId() SubmissionId{
    if s == nil {
        return uuid.UUID{}
    }
    return s.SubmissionId
}

func (s *StderrResponse) GetStderr() string{
    if s == nil {
        return ""
    }
    return s.Stderr
}

func (s *StderrResponse) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *StderrResponse) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type TraceResponse struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    LineNumber int `json:"lineNumber" url:"lineNumber"`
    ReturnValue *DebugVariableValue `json:"returnValue,omitempty" url:"returnValue,omitempty"`
    ExpressionLocation *ExpressionLocation `json:"expressionLocation,omitempty" url:"expressionLocation,omitempty"`
    Stack *StackInformation `json:"stack" url:"stack"`
    Stdout *string `json:"stdout,omitempty" url:"stdout,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TraceResponse) GetSubmissionId() SubmissionId{
    if t == nil {
        return uuid.UUID{}
    }
    return t.SubmissionId
}

func (t *TraceResponse) GetLineNumber() int{
    if t == nil {
        return 0
    }
    return t.LineNumber
}

func (t *TraceResponse) GetReturnValue() *DebugVariableValue{
    if t == nil {
        return nil
    }
    return t.ReturnValue
}

func (t *TraceResponse) GetExpressionLocation() *ExpressionLocation{
    if t == nil {
        return nil
    }
    return t.ExpressionLocation
}

func (t *TraceResponse) GetStack() *StackInformation{
    if t == nil {
        return nil
    }
    return t.Stack
}

func (t *TraceResponse) GetStdout() *string{
    if t == nil {
        return nil
    }
    return t.Stdout
}

func (t *TraceResponse) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TraceResponse) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TraceResponseV2 struct {
    SubmissionId SubmissionId `json:"submissionId" url:"submissionId"`
    LineNumber int `json:"lineNumber" url:"lineNumber"`
    File *TracedFile `json:"file" url:"file"`
    ReturnValue *DebugVariableValue `json:"returnValue,omitempty" url:"returnValue,omitempty"`
    ExpressionLocation *ExpressionLocation `json:"expressionLocation,omitempty" url:"expressionLocation,omitempty"`
    Stack *StackInformation `json:"stack" url:"stack"`
    Stdout *string `json:"stdout,omitempty" url:"stdout,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TraceResponseV2) GetSubmissionId() SubmissionId{
    if t == nil {
        return uuid.UUID{}
    }
    return t.SubmissionId
}

func (t *TraceResponseV2) GetLineNumber() int{
    if t == nil {
        return 0
    }
    return t.LineNumber
}

func (t *TraceResponseV2) GetFile() *TracedFile{
    if t == nil {
        return nil
    }
    return t.File
}

func (t *TraceResponseV2) GetReturnValue() *DebugVariableValue{
    if t == nil {
        return nil
    }
    return t.ReturnValue
}

func (t *TraceResponseV2) GetExpressionLocation() *ExpressionLocation{
    if t == nil {
        return nil
    }
    return t.ExpressionLocation
}

func (t *TraceResponseV2) GetStack() *StackInformation{
    if t == nil {
        return nil
    }
    return t.Stack
}

func (t *TraceResponseV2) GetStdout() *string{
    if t == nil {
        return nil
    }
    return t.Stdout
}

func (t *TraceResponseV2) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TraceResponseV2) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TracedFile struct {
    Filename string `json:"filename" url:"filename"`
    Directory string `json:"directory" url:"directory"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TracedFile) GetFilename() string{
    if t == nil {
        return ""
    }
    return t.Filename
}

func (t *TracedFile) GetDirectory() string{
    if t == nil {
        return ""
    }
    return t.Directory
}

func (t *TracedFile) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TracedFile) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type ExpressionLocation struct {
    Start int `json:"start" url:"start"`
    Offset int `json:"offset" url:"offset"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (e *ExpressionLocation) GetStart() int{
    if e == nil {
        return 0
    }
    return e.Start
}

func (e *ExpressionLocation) GetOffset() int{
    if e == nil {
        return 0
    }
    return e.Offset
}

func (e *ExpressionLocation) GetExtraProperties() map[string]any{
    if e == nil {
        return nil
    }
    return e.extraProperties
}

func (e *ExpressionLocation) String() string{
    if len(e.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(e); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", e)
}


type StackInformation struct {
    NumStackFrames int `json:"numStackFrames" url:"numStackFrames"`
    TopStackFrame *StackFrame `json:"topStackFrame,omitempty" url:"topStackFrame,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *StackInformation) GetNumStackFrames() int{
    if s == nil {
        return 0
    }
    return s.NumStackFrames
}

func (s *StackInformation) GetTopStackFrame() *StackFrame{
    if s == nil {
        return nil
    }
    return s.TopStackFrame
}

func (s *StackInformation) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *StackInformation) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type StackFrame struct {
    MethodName string `json:"methodName" url:"methodName"`
    LineNumber int `json:"lineNumber" url:"lineNumber"`
    Scopes []*Scope `json:"scopes" url:"scopes"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *StackFrame) GetMethodName() string{
    if s == nil {
        return ""
    }
    return s.MethodName
}

func (s *StackFrame) GetLineNumber() int{
    if s == nil {
        return 0
    }
    return s.LineNumber
}

func (s *StackFrame) GetScopes() []*Scope{
    if s == nil {
        return nil
    }
    return s.Scopes
}

func (s *StackFrame) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *StackFrame) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type Scope struct {
    Variables map[string]*DebugVariableValue `json:"variables" url:"variables"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (s *Scope) GetVariables() map[string]*DebugVariableValue{
    if s == nil {
        return nil
    }
    return s.Variables
}

func (s *Scope) GetExtraProperties() map[string]any{
    if s == nil {
        return nil
    }
    return s.extraProperties
}

func (s *Scope) String() string{
    if len(s.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(s); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", s)
}


type ExecutionSessionResponse struct {
    SessionId string `json:"sessionId" url:"sessionId"`
    ExecutionSessionUrl *string `json:"executionSessionUrl,omitempty" url:"executionSessionUrl,omitempty"`
    Language *Language `json:"language" url:"language"`
    Status *ExecutionSessionStatus `json:"status" url:"status"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (e *ExecutionSessionResponse) GetSessionId() string{
    if e == nil {
        return ""
    }
    return e.SessionId
}

func (e *ExecutionSessionResponse) GetExecutionSessionUrl() *string{
    if e == nil {
        return nil
    }
    return e.ExecutionSessionUrl
}

func (e *ExecutionSessionResponse) GetLanguage() *Language{
    if e == nil {
        return nil
    }
    return e.Language
}

func (e *ExecutionSessionResponse) GetStatus() *ExecutionSessionStatus{
    if e == nil {
        return nil
    }
    return e.Status
}

func (e *ExecutionSessionResponse) GetExtraProperties() map[string]any{
    if e == nil {
        return nil
    }
    return e.extraProperties
}

func (e *ExecutionSessionResponse) String() string{
    if len(e.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(e); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", e)
}


type ExecutionSessionStatus string

const (
    ExecutionSessionStatusCreatingContainer = "CREATING_CONTAINER"
    ExecutionSessionStatusProvisioningContainer = "PROVISIONING_CONTAINER"
    ExecutionSessionStatusPendingContainer = "PENDING_CONTAINER"
    ExecutionSessionStatusRunningContainer = "RUNNING_CONTAINER"
    ExecutionSessionStatusLiveContainer = "LIVE_CONTAINER"
    ExecutionSessionStatusFailedToLaunch = "FAILED_TO_LAUNCH"
)
func NewExecutionSessionStatusFromString(s string) (ExecutionSessionStatus, error){
    switch s{
        case "CREATING_CONTAINER":
            return ExecutionSessionStatusCreatingContainer, nil
        case "PROVISIONING_CONTAINER":
            return ExecutionSessionStatusProvisioningContainer, nil
        case "PENDING_CONTAINER":
            return ExecutionSessionStatusPendingContainer, nil
        case "RUNNING_CONTAINER":
            return ExecutionSessionStatusRunningContainer, nil
        case "LIVE_CONTAINER":
            return ExecutionSessionStatusLiveContainer, nil
        case "FAILED_TO_LAUNCH":
            return ExecutionSessionStatusFailedToLaunch, nil
    }
    var t ExecutionSessionStatus
    return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ExecutionSessionStatus) Ptr() *ExecutionSessionStatus{
    return &e
}


type SubmissionStatusV2 struct {
    Type string
    Test TestSubmissionStatusV2
    Workspace WorkspaceSubmissionStatusV2
}


type TestSubmissionStatusV2 struct {
    Updates []*TestSubmissionUpdate `json:"updates" url:"updates"`
    ProblemId ProblemId `json:"problemId" url:"problemId"`
    ProblemVersion int `json:"problemVersion" url:"problemVersion"`
    ProblemInfo *v2.ProblemInfoV2 `json:"problemInfo" url:"problemInfo"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TestSubmissionStatusV2) GetUpdates() []*TestSubmissionUpdate{
    if t == nil {
        return nil
    }
    return t.Updates
}

func (t *TestSubmissionStatusV2) GetProblemId() ProblemId{
    if t == nil {
        return ""
    }
    return t.ProblemId
}

func (t *TestSubmissionStatusV2) GetProblemVersion() int{
    if t == nil {
        return 0
    }
    return t.ProblemVersion
}

func (t *TestSubmissionStatusV2) GetProblemInfo() *v2.ProblemInfoV2{
    if t == nil {
        return nil
    }
    return t.ProblemInfo
}

func (t *TestSubmissionStatusV2) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TestSubmissionStatusV2) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type WorkspaceSubmissionStatusV2 struct {
    Updates []*WorkspaceSubmissionUpdate `json:"updates" url:"updates"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceSubmissionStatusV2) GetUpdates() []*WorkspaceSubmissionUpdate{
    if w == nil {
        return nil
    }
    return w.Updates
}

func (w *WorkspaceSubmissionStatusV2) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceSubmissionStatusV2) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type TestSubmissionUpdate struct {
    UpdateTime time.Time `json:"updateTime" url:"updateTime"`
    UpdateInfo *TestSubmissionUpdateInfo `json:"updateInfo" url:"updateInfo"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TestSubmissionUpdate) GetUpdateTime() time.Time{
    if t == nil {
        return time.Time{}
    }
    return t.UpdateTime
}

func (t *TestSubmissionUpdate) GetUpdateInfo() *TestSubmissionUpdateInfo{
    if t == nil {
        return nil
    }
    return t.UpdateInfo
}

func (t *TestSubmissionUpdate) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TestSubmissionUpdate) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TestSubmissionUpdateInfo struct {
    Type string
    Running *RunningSubmissionState
    Stopped any
    Errored *ErrorInfo
    GradedTestCase GradedTestCaseUpdate
    RecordedTestCase RecordedTestCaseUpdate
    Finished any
}


type WorkspaceSubmissionUpdate struct {
    UpdateTime time.Time `json:"updateTime" url:"updateTime"`
    UpdateInfo *WorkspaceSubmissionUpdateInfo `json:"updateInfo" url:"updateInfo"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceSubmissionUpdate) GetUpdateTime() time.Time{
    if w == nil {
        return time.Time{}
    }
    return w.UpdateTime
}

func (w *WorkspaceSubmissionUpdate) GetUpdateInfo() *WorkspaceSubmissionUpdateInfo{
    if w == nil {
        return nil
    }
    return w.UpdateInfo
}

func (w *WorkspaceSubmissionUpdate) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceSubmissionUpdate) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type WorkspaceSubmissionUpdateInfo struct {
    Type string
    Running *RunningSubmissionState
    Ran WorkspaceRunDetails
    Stopped any
    Traced any
    TracedV2 WorkspaceTracedUpdate
    Errored *ErrorInfo
    Finished any
}


type GradedTestCaseUpdate struct {
    TestCaseId v2.TestCaseId `json:"testCaseId" url:"testCaseId"`
    Grade *TestCaseGrade `json:"grade" url:"grade"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (g *GradedTestCaseUpdate) GetTestCaseId() v2.TestCaseId{
    if g == nil {
        return ""
    }
    return g.TestCaseId
}

func (g *GradedTestCaseUpdate) GetGrade() *TestCaseGrade{
    if g == nil {
        return nil
    }
    return g.Grade
}

func (g *GradedTestCaseUpdate) GetExtraProperties() map[string]any{
    if g == nil {
        return nil
    }
    return g.extraProperties
}

func (g *GradedTestCaseUpdate) String() string{
    if len(g.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(g); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", g)
}


type RecordedTestCaseUpdate struct {
    TestCaseId v2.TestCaseId `json:"testCaseId" url:"testCaseId"`
    TraceResponsesSize int `json:"traceResponsesSize" url:"traceResponsesSize"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (r *RecordedTestCaseUpdate) GetTestCaseId() v2.TestCaseId{
    if r == nil {
        return ""
    }
    return r.TestCaseId
}

func (r *RecordedTestCaseUpdate) GetTraceResponsesSize() int{
    if r == nil {
        return 0
    }
    return r.TraceResponsesSize
}

func (r *RecordedTestCaseUpdate) GetExtraProperties() map[string]any{
    if r == nil {
        return nil
    }
    return r.extraProperties
}

func (r *RecordedTestCaseUpdate) String() string{
    if len(r.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(r); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", r)
}


type WorkspaceTracedUpdate struct {
    TraceResponsesSize int `json:"traceResponsesSize" url:"traceResponsesSize"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceTracedUpdate) GetTraceResponsesSize() int{
    if w == nil {
        return 0
    }
    return w.TraceResponsesSize
}

func (w *WorkspaceTracedUpdate) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceTracedUpdate) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type SubmissionTypeState struct {
    Type string
    Test TestSubmissionState
    Workspace WorkspaceSubmissionState
}


type WorkspaceSubmissionState struct {
    Status *WorkspaceSubmissionStatus `json:"status" url:"status"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceSubmissionState) GetStatus() *WorkspaceSubmissionStatus{
    if w == nil {
        return nil
    }
    return w.Status
}

func (w *WorkspaceSubmissionState) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceSubmissionState) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type WorkspaceSubmissionStatus struct {
    Type string
    Stopped any
    Errored *ErrorInfo
    Running *RunningSubmissionState
    Ran WorkspaceRunDetails
    Traced WorkspaceRunDetails
}


type TestSubmissionState struct {
    ProblemId ProblemId `json:"problemId" url:"problemId"`
    DefaultTestCases []*TestCase `json:"defaultTestCases" url:"defaultTestCases"`
    CustomTestCases []*TestCase `json:"customTestCases" url:"customTestCases"`
    Status *TestSubmissionStatus `json:"status" url:"status"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TestSubmissionState) GetProblemId() ProblemId{
    if t == nil {
        return ""
    }
    return t.ProblemId
}

func (t *TestSubmissionState) GetDefaultTestCases() []*TestCase{
    if t == nil {
        return nil
    }
    return t.DefaultTestCases
}

func (t *TestSubmissionState) GetCustomTestCases() []*TestCase{
    if t == nil {
        return nil
    }
    return t.CustomTestCases
}

func (t *TestSubmissionState) GetStatus() *TestSubmissionStatus{
    if t == nil {
        return nil
    }
    return t.Status
}

func (t *TestSubmissionState) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TestSubmissionState) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TestSubmissionStatus struct {
    Type string
    Stopped any
    Errored *ErrorInfo
    Running *RunningSubmissionState
    TestCaseIdToState map[string]*SubmissionStatusForTestCase
}


type SubmissionStatusForTestCase struct {
    Type string
    Graded TestCaseResultWithStdout
    GradedV2 *TestCaseGrade
    Traced TracedTestCase
}


type TracedTestCase struct {
    Result *TestCaseResultWithStdout `json:"result" url:"result"`
    TraceResponsesSize int `json:"traceResponsesSize" url:"traceResponsesSize"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TracedTestCase) GetResult() *TestCaseResultWithStdout{
    if t == nil {
        return nil
    }
    return t.Result
}

func (t *TracedTestCase) GetTraceResponsesSize() int{
    if t == nil {
        return 0
    }
    return t.TraceResponsesSize
}

func (t *TracedTestCase) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TracedTestCase) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TraceResponsesPage struct {
    // If present, use this to load subsequent pages.
    // The offset is the id of the next trace response to load.
    Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
    TraceResponses []*TraceResponse `json:"traceResponses" url:"traceResponses"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TraceResponsesPage) GetOffset() *int{
    if t == nil {
        return nil
    }
    return t.Offset
}

func (t *TraceResponsesPage) GetTraceResponses() []*TraceResponse{
    if t == nil {
        return nil
    }
    return t.TraceResponses
}

func (t *TraceResponsesPage) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TraceResponsesPage) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type TraceResponsesPageV2 struct {
    // If present, use this to load subsequent pages.
    // The offset is the id of the next trace response to load.
    Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
    TraceResponses []*TraceResponseV2 `json:"traceResponses" url:"traceResponses"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (t *TraceResponsesPageV2) GetOffset() *int{
    if t == nil {
        return nil
    }
    return t.Offset
}

func (t *TraceResponsesPageV2) GetTraceResponses() []*TraceResponseV2{
    if t == nil {
        return nil
    }
    return t.TraceResponses
}

func (t *TraceResponsesPageV2) GetExtraProperties() map[string]any{
    if t == nil {
        return nil
    }
    return t.extraProperties
}

func (t *TraceResponsesPageV2) String() string{
    if len(t.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(t); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", t)
}


type GetTraceResponsesPageRequest struct {
    Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (g *GetTraceResponsesPageRequest) GetOffset() *int{
    if g == nil {
        return nil
    }
    return g.Offset
}

func (g *GetTraceResponsesPageRequest) GetExtraProperties() map[string]any{
    if g == nil {
        return nil
    }
    return g.extraProperties
}

func (g *GetTraceResponsesPageRequest) String() string{
    if len(g.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(g); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", g)
}


type WorkspaceStarterFilesResponse struct {
    Files map[*Language]*WorkspaceFiles `json:"files" url:"files"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceStarterFilesResponse) GetFiles() map[*Language]*WorkspaceFiles{
    if w == nil {
        return nil
    }
    return w.Files
}

func (w *WorkspaceStarterFilesResponse) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceStarterFilesResponse) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type WorkspaceStarterFilesResponseV2 struct {
    FilesByLanguage map[*Language]*v2.Files `json:"filesByLanguage" url:"filesByLanguage"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceStarterFilesResponseV2) GetFilesByLanguage() map[*Language]*v2.Files{
    if w == nil {
        return nil
    }
    return w.FilesByLanguage
}

func (w *WorkspaceStarterFilesResponseV2) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceStarterFilesResponseV2) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type WorkspaceFiles struct {
    MainFile *FileInfo `json:"mainFile" url:"mainFile"`
    ReadOnlyFiles []*FileInfo `json:"readOnlyFiles" url:"readOnlyFiles"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (w *WorkspaceFiles) GetMainFile() *FileInfo{
    if w == nil {
        return nil
    }
    return w.MainFile
}

func (w *WorkspaceFiles) GetReadOnlyFiles() []*FileInfo{
    if w == nil {
        return nil
    }
    return w.ReadOnlyFiles
}

func (w *WorkspaceFiles) GetExtraProperties() map[string]any{
    if w == nil {
        return nil
    }
    return w.extraProperties
}

func (w *WorkspaceFiles) String() string{
    if len(w.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(w); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", w)
}


type ExecutionSessionState struct {
    LastTimeContacted *string `json:"lastTimeContacted,omitempty" url:"lastTimeContacted,omitempty"`
    // The auto-generated session id. Formatted as a uuid.
    SessionId string `json:"sessionId" url:"sessionId"`
    IsWarmInstance bool `json:"isWarmInstance" url:"isWarmInstance"`
    AwsTaskId *string `json:"awsTaskId,omitempty" url:"awsTaskId,omitempty"`
    Language *Language `json:"language" url:"language"`
    Status *ExecutionSessionStatus `json:"status" url:"status"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (e *ExecutionSessionState) GetLastTimeContacted() *string{
    if e == nil {
        return nil
    }
    return e.LastTimeContacted
}

func (e *ExecutionSessionState) GetSessionId() string{
    if e == nil {
        return ""
    }
    return e.SessionId
}

func (e *ExecutionSessionState) GetIsWarmInstance() bool{
    if e == nil {
        return false
    }
    return e.IsWarmInstance
}

func (e *ExecutionSessionState) GetAwsTaskId() *string{
    if e == nil {
        return nil
    }
    return e.AwsTaskId
}

func (e *ExecutionSessionState) GetLanguage() *Language{
    if e == nil {
        return nil
    }
    return e.Language
}

func (e *ExecutionSessionState) GetStatus() *ExecutionSessionStatus{
    if e == nil {
        return nil
    }
    return e.Status
}

func (e *ExecutionSessionState) GetExtraProperties() map[string]any{
    if e == nil {
        return nil
    }
    return e.extraProperties
}

func (e *ExecutionSessionState) String() string{
    if len(e.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(e); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", e)
}


type GetExecutionSessionStateResponse struct {
    States map[string]*ExecutionSessionState `json:"states" url:"states"`
    NumWarmingInstances *int `json:"numWarmingInstances,omitempty" url:"numWarmingInstances,omitempty"`
    WarmingSessionIds []string `json:"warmingSessionIds" url:"warmingSessionIds"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (g *GetExecutionSessionStateResponse) GetStates() map[string]*ExecutionSessionState{
    if g == nil {
        return nil
    }
    return g.States
}

func (g *GetExecutionSessionStateResponse) GetNumWarmingInstances() *int{
    if g == nil {
        return nil
    }
    return g.NumWarmingInstances
}

func (g *GetExecutionSessionStateResponse) GetWarmingSessionIds() []string{
    if g == nil {
        return nil
    }
    return g.WarmingSessionIds
}

func (g *GetExecutionSessionStateResponse) GetExtraProperties() map[string]any{
    if g == nil {
        return nil
    }
    return g.extraProperties
}

func (g *GetExecutionSessionStateResponse) String() string{
    if len(g.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(g); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", g)
}


type GetSubmissionStateResponse struct {
    TimeSubmitted *time.Time `json:"timeSubmitted,omitempty" url:"timeSubmitted,omitempty"`
    Submission string `json:"submission" url:"submission"`
    Language *Language `json:"language" url:"language"`
    SubmissionTypeState *SubmissionTypeState `json:"submissionTypeState" url:"submissionTypeState"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (g *GetSubmissionStateResponse) GetTimeSubmitted() *time.Time{
    if g == nil {
        return nil
    }
    return g.TimeSubmitted
}

func (g *GetSubmissionStateResponse) GetSubmission() string{
    if g == nil {
        return ""
    }
    return g.Submission
}

func (g *GetSubmissionStateResponse) GetLanguage() *Language{
    if g == nil {
        return nil
    }
    return g.Language
}

func (g *GetSubmissionStateResponse) GetSubmissionTypeState() *SubmissionTypeState{
    if g == nil {
        return nil
    }
    return g.SubmissionTypeState
}

func (g *GetSubmissionStateResponse) GetExtraProperties() map[string]any{
    if g == nil {
        return nil
    }
    return g.extraProperties
}

func (g *GetSubmissionStateResponse) String() string{
    if len(g.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(g); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", g)
}

