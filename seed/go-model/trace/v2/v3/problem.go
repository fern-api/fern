// Code generated by Fern. DO NOT EDIT.

package v3

import (
	fern "github.com/trace/fern"
)

type TestCaseTemplateId = string

type TestCaseId = string

type ParameterId = string

type ProblemInfoV2 struct {
	ProblemId               fern.ProblemId           `json:"problemId" url:"problemId"`
	ProblemDescription      *fern.ProblemDescription `json:"problemDescription" url:"problemDescription"`
	ProblemName             string                   `json:"problemName" url:"problemName"`
	ProblemVersion          int                      `json:"problemVersion" url:"problemVersion"`
	SupportedLanguages      []*fern.Language         `json:"supportedLanguages" url:"supportedLanguages"`
	CustomFiles             *CustomFiles             `json:"customFiles" url:"customFiles"`
	GeneratedFiles          *GeneratedFiles          `json:"generatedFiles" url:"generatedFiles"`
	CustomTestCaseTemplates []*TestCaseTemplate      `json:"customTestCaseTemplates" url:"customTestCaseTemplates"`
	Testcases               []*TestCaseV2            `json:"testcases" url:"testcases"`
	IsPublic                bool                     `json:"isPublic" url:"isPublic"`
}

type LightweightProblemInfoV2 struct {
	ProblemId      fern.ProblemId       `json:"problemId" url:"problemId"`
	ProblemName    string               `json:"problemName" url:"problemName"`
	ProblemVersion int                  `json:"problemVersion" url:"problemVersion"`
	VariableTypes  []*fern.VariableType `json:"variableTypes" url:"variableTypes"`
}

type CreateProblemRequestV2 struct {
	ProblemName             string                   `json:"problemName" url:"problemName"`
	ProblemDescription      *fern.ProblemDescription `json:"problemDescription" url:"problemDescription"`
	CustomFiles             *CustomFiles             `json:"customFiles" url:"customFiles"`
	CustomTestCaseTemplates []*TestCaseTemplate      `json:"customTestCaseTemplates" url:"customTestCaseTemplates"`
	Testcases               []*TestCaseV2            `json:"testcases" url:"testcases"`
	SupportedLanguages      []*fern.Language         `json:"supportedLanguages" url:"supportedLanguages"`
	IsPublic                bool                     `json:"isPublic" url:"isPublic"`
}

type TestCaseV2 struct {
	Metadata       *TestCaseMetadata                   `json:"metadata" url:"metadata"`
	Implementation *TestCaseImplementationReference    `json:"implementation" url:"implementation"`
	Arguments      map[ParameterId]*fern.VariableValue `json:"arguments" url:"arguments"`
	Expects        *TestCaseExpects                    `json:"expects,omitempty" url:"expects,omitempty"`
}

type TestCaseExpects struct {
	ExpectedStdout *string `json:"expectedStdout,omitempty" url:"expectedStdout,omitempty"`
}

type TestCaseImplementationReference struct {
	Type           string
	TemplateId     TestCaseTemplateId
	Implementation TestCaseImplementation
}

type BasicTestCaseTemplate struct {
	TemplateId               TestCaseTemplateId                 `json:"templateId" url:"templateId"`
	Name                     string                             `json:"name" url:"name"`
	Description              *TestCaseImplementationDescription `json:"description" url:"description"`
	ExpectedValueParameterId ParameterId                        `json:"expectedValueParameterId" url:"expectedValueParameterId"`
}

type TestCaseTemplate struct {
	TemplateId     TestCaseTemplateId      `json:"templateId" url:"templateId"`
	Name           string                  `json:"name" url:"name"`
	Implementation *TestCaseImplementation `json:"implementation" url:"implementation"`
}

type TestCaseImplementation struct {
	Description *TestCaseImplementationDescription `json:"description" url:"description"`
	Function    *TestCaseFunction                  `json:"function" url:"function"`
}

type TestCaseFunction struct {
	Type             string
	WithActualResult TestCaseWithActualResultImplementation
	Custom           VoidFunctionDefinition
}

type TestCaseWithActualResultImplementation struct {
	GetActualResult        *NonVoidFunctionDefinition `json:"getActualResult" url:"getActualResult"`
	AssertCorrectnessCheck *AssertCorrectnessCheck    `json:"assertCorrectnessCheck" url:"assertCorrectnessCheck"`
}

type VoidFunctionDefinition struct {
	Parameters []*Parameter                                `json:"parameters" url:"parameters"`
	Code       *FunctionImplementationForMultipleLanguages `json:"code" url:"code"`
}

type Parameter struct {
	ParameterId  ParameterId        `json:"parameterId" url:"parameterId"`
	Name         string             `json:"name" url:"name"`
	VariableType *fern.VariableType `json:"variableType" url:"variableType"`
}

type NonVoidFunctionDefinition struct {
	Signature *NonVoidFunctionSignature                   `json:"signature" url:"signature"`
	Code      *FunctionImplementationForMultipleLanguages `json:"code" url:"code"`
}

type VoidFunctionSignature struct {
	Parameters []*Parameter `json:"parameters" url:"parameters"`
}

type NonVoidFunctionSignature struct {
	Parameters []*Parameter       `json:"parameters" url:"parameters"`
	ReturnType *fern.VariableType `json:"returnType" url:"returnType"`
}

type VoidFunctionSignatureThatTakesActualResult struct {
	Parameters       []*Parameter       `json:"parameters" url:"parameters"`
	ActualResultType *fern.VariableType `json:"actualResultType" url:"actualResultType"`
}

type AssertCorrectnessCheck struct {
	Type         string
	DeepEquality DeepEqualityCorrectnessCheck
	// The generated signature will include an additional param, actualResult
	Custom VoidFunctionDefinitionThatTakesActualResult
}

type DeepEqualityCorrectnessCheck struct {
	ExpectedValueParameterId ParameterId `json:"expectedValueParameterId" url:"expectedValueParameterId"`
}

// The generated signature will include an additional param, actualResult
type VoidFunctionDefinitionThatTakesActualResult struct {
	AdditionalParameters []*Parameter                                `json:"additionalParameters" url:"additionalParameters"`
	Code                 *FunctionImplementationForMultipleLanguages `json:"code" url:"code"`
}

type TestCaseImplementationDescription struct {
	Boards []*TestCaseImplementationDescriptionBoard `json:"boards" url:"boards"`
}

type TestCaseImplementationDescriptionBoard struct {
	Type    string
	Html    string
	ParamId ParameterId
}

type TestCaseMetadata struct {
	Id     TestCaseId `json:"id" url:"id"`
	Name   string     `json:"name" url:"name"`
	Hidden bool       `json:"hidden" url:"hidden"`
}

type FunctionImplementationForMultipleLanguages struct {
	CodeByLanguage map[*fern.Language]*FunctionImplementation `json:"codeByLanguage" url:"codeByLanguage"`
}

type FunctionImplementation struct {
	Impl    string  `json:"impl" url:"impl"`
	Imports *string `json:"imports,omitempty" url:"imports,omitempty"`
}

type GeneratedFiles struct {
	GeneratedTestCaseFiles map[*fern.Language]*Files `json:"generatedTestCaseFiles" url:"generatedTestCaseFiles"`
	GeneratedTemplateFiles map[*fern.Language]*Files `json:"generatedTemplateFiles" url:"generatedTemplateFiles"`
	Other                  map[*fern.Language]*Files `json:"other" url:"other"`
}

type CustomFiles struct {
	Type   string
	Basic  BasicCustomFiles
	Custom map[*fern.Language]*Files
}

type BasicCustomFiles struct {
	MethodName            string                    `json:"methodName" url:"methodName"`
	Signature             *NonVoidFunctionSignature `json:"signature" url:"signature"`
	AdditionalFiles       map[*fern.Language]*Files `json:"additionalFiles" url:"additionalFiles"`
	BasicTestCaseTemplate *BasicTestCaseTemplate    `json:"basicTestCaseTemplate" url:"basicTestCaseTemplate"`
}

type Files struct {
	Files []*FileInfoV2 `json:"files" url:"files"`
}

type FileInfoV2 struct {
	Filename  string `json:"filename" url:"filename"`
	Directory string `json:"directory" url:"directory"`
	Contents  string `json:"contents" url:"contents"`
	Editable  bool   `json:"editable" url:"editable"`
}

type DefaultProvidedFile struct {
	File         *FileInfoV2          `json:"file" url:"file"`
	RelatedTypes []*fern.VariableType `json:"relatedTypes" url:"relatedTypes"`
}

type FunctionSignature struct {
	Type                      string
	Void                      VoidFunctionSignature
	NonVoid                   NonVoidFunctionSignature
	VoidThatTakesActualResult VoidFunctionSignatureThatTakesActualResult
}

type GetFunctionSignatureRequest struct {
	FunctionSignature *FunctionSignature `json:"functionSignature" url:"functionSignature"`
}

type GetFunctionSignatureResponse struct {
	FunctionByLanguage map[*fern.Language]string `json:"functionByLanguage" url:"functionByLanguage"`
}

type GetBasicSolutionFileRequest struct {
	MethodName string                    `json:"methodName" url:"methodName"`
	Signature  *NonVoidFunctionSignature `json:"signature" url:"signature"`
}

type GetBasicSolutionFileResponse struct {
	SolutionFileByLanguage map[*fern.Language]*FileInfoV2 `json:"solutionFileByLanguage" url:"solutionFileByLanguage"`
}

type GetGeneratedTestCaseFileRequest struct {
	Template *TestCaseTemplate `json:"template,omitempty" url:"template,omitempty"`
	TestCase *TestCaseV2       `json:"testCase" url:"testCase"`
}

type GetGeneratedTestCaseTemplateFileRequest struct {
	Template *TestCaseTemplate `json:"template" url:"template"`
}
