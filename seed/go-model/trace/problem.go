// Code generated by Fern. DO NOT EDIT.

package trace


type ProblemInfo struct {
    ProblemId ProblemId `json:"problemId" url:"problemId"`
    ProblemDescription *ProblemDescription `json:"problemDescription" url:"problemDescription"`
    ProblemName string `json:"problemName" url:"problemName"`
    ProblemVersion int `json:"problemVersion" url:"problemVersion"`
    Files map[*Language]*ProblemFiles `json:"files" url:"files"`
    InputParams []*VariableTypeAndName `json:"inputParams" url:"inputParams"`
    OutputType *VariableType `json:"outputType" url:"outputType"`
    Testcases []*TestCaseWithExpectedResult `json:"testcases" url:"testcases"`
    MethodName string `json:"methodName" url:"methodName"`
    SupportsCustomTestCases bool `json:"supportsCustomTestCases" url:"supportsCustomTestCases"`
}


type ProblemDescription struct {
    Boards []*ProblemDescriptionBoard `json:"boards" url:"boards"`
}


type ProblemDescriptionBoard struct {
    Type string
    Html string
    Variable *VariableValue
    TestCaseId string
}


type ProblemFiles struct {
    SolutionFile *FileInfo `json:"solutionFile" url:"solutionFile"`
    ReadOnlyFiles []*FileInfo `json:"readOnlyFiles" url:"readOnlyFiles"`
}


type VariableTypeAndName struct {
    VariableType *VariableType `json:"variableType" url:"variableType"`
    Name string `json:"name" url:"name"`
}


type CreateProblemRequest struct {
    ProblemName string `json:"problemName" url:"problemName"`
    ProblemDescription *ProblemDescription `json:"problemDescription" url:"problemDescription"`
    Files map[*Language]*ProblemFiles `json:"files" url:"files"`
    InputParams []*VariableTypeAndName `json:"inputParams" url:"inputParams"`
    OutputType *VariableType `json:"outputType" url:"outputType"`
    Testcases []*TestCaseWithExpectedResult `json:"testcases" url:"testcases"`
    MethodName string `json:"methodName" url:"methodName"`
}


type CreateProblemResponse struct {
    Type string
    Success ProblemId
    Error *CreateProblemError
}


type UpdateProblemResponse struct {
    ProblemVersion int `json:"problemVersion" url:"problemVersion"`
}


type CreateProblemError struct {
    ErrorType string
    Generic GenericCreateProblemError
}


type GenericCreateProblemError struct {
    Message string `json:"message" url:"message"`
    Type string `json:"type" url:"type"`
    Stacktrace string `json:"stacktrace" url:"stacktrace"`
}


type GetDefaultStarterFilesResponse struct {
    Files map[*Language]*ProblemFiles `json:"files" url:"files"`
}

