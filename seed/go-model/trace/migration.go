// Code generated by Fern. DO NOT EDIT.

package trace

import (
    fmt "fmt"
    json "encoding/json"
    internal "github.com/trace/fern/internal"
)


type MigrationStatus string

const (
    // The migration is running
    MigrationStatusRunning = "RUNNING"
    // The migration is failed
    MigrationStatusFailed = "FAILED"
    MigrationStatusFinished = "FINISHED"
)
func NewMigrationStatusFromString(s string) (MigrationStatus, error){
    switch s{
        case "RUNNING":
            return MigrationStatusRunning, nil
        case "FAILED":
            return MigrationStatusFailed, nil
        case "FINISHED":
            return MigrationStatusFinished, nil
    }
    var t MigrationStatus
    return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MigrationStatus) Ptr() *MigrationStatus{
    return &m
}


type Migration struct {
    Name string `json:"name" url:"name"`
    Status *MigrationStatus `json:"status" url:"status"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (m *Migration) GetName() string{
    if m == nil {
        return ""
    }
    return m.Name
}

func (m *Migration) GetStatus() *MigrationStatus{
    if m == nil {
        return nil
    }
    return m.Status
}

func (m *Migration) GetExtraProperties() map[string]any{
    if m == nil {
        return nil
    }
    return m.extraProperties
}

func (m *Migration) String() string{
    if len(m.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(m); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", m)
}

