// Code generated by Fern. DO NOT EDIT.

package undiscriminatedunions

import (
	fmt "fmt"
)

type Request struct {
	Union *MetadataUnion `json:"union,omitempty" url:"union,omitempty"`
}

type TypeWithOptionalUnion struct {
	MyUnion *MyUnion `json:"myUnion,omitempty" url:"myUnion,omitempty"`
}

type NamedMetadata struct {
	Name  string         `json:"name" url:"name"`
	Value map[string]any `json:"value" url:"value"`
}

type OptionalMetadata = map[string]any

// Undiscriminated unions can act as a map key
// as long as all of their values are valid keys
// (i.e. do they have a valid string representation).
type Metadata = map[*Key]string

type KeyType string

const (
	KeyTypeName  = "name"
	KeyTypeValue = "value"
)

func NewKeyTypeFromString(s string) (KeyType, error) {
	switch s {
	case "name":
		return KeyTypeName, nil
	case "value":
		return KeyTypeValue, nil
	}
	var t KeyType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (k KeyType) Ptr() *KeyType {
	return &k
}
