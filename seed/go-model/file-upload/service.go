// Code generated by Fern. DO NOT EDIT.

package fileupload

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/file-upload/fern/internal"
)

type Id = string

type MyObjectWithOptional struct {
	Prop         string  `json:"prop" url:"prop"`
	OptionalProp *string `json:"optionalProp,omitempty" url:"optionalProp,omitempty"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (m *MyObjectWithOptional) GetProp() string {
	if m == nil {
		return ""
	}
	return m.Prop
}

func (m *MyObjectWithOptional) GetOptionalProp() *string {
	if m == nil {
		return nil
	}
	return m.OptionalProp
}

func (m *MyObjectWithOptional) GetExtraProperties() map[string]any {
	if m == nil {
		return nil
	}
	return m.extraProperties
}

func (m *MyObjectWithOptional) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler MyObjectWithOptional
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MyObjectWithOptional(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MyObjectWithOptional) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MyAliasObject = *MyObject

type MyCollectionAliasObject = []*MyObject

type MyObject struct {
	Foo string `json:"foo" url:"foo"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (m *MyObject) GetFoo() string {
	if m == nil {
		return ""
	}
	return m.Foo
}

func (m *MyObject) GetExtraProperties() map[string]any {
	if m == nil {
		return nil
	}
	return m.extraProperties
}

func (m *MyObject) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler MyObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MyObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MyObject) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ObjectType string

const (
	ObjectTypeFoo = "FOO"
	ObjectTypeBar = "BAR"
)

func NewObjectTypeFromString(s string) (ObjectType, error) {
	switch s {
	case "FOO":
		return ObjectTypeFoo, nil
	case "BAR":
		return ObjectTypeBar, nil
	}
	var t ObjectType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o ObjectType) Ptr() *ObjectType {
	return &o
}
