// Code generated by Fern. DO NOT EDIT.

package api

import (
	fmt "fmt"
)

type TorU struct {
	T *T
	U *U
}

type T struct {
	Child *TorU `json:"child" url:"child"`
}

type U struct {
	Child *T `json:"child" url:"child"`
}

type FieldValue struct {
	Type           string
	PrimitiveValue *PrimitiveValue
	ObjectValue    ObjectValue
	ContainerValue *ContainerValue
}

type ContainerValue struct {
	Type     string
	List     []*FieldValue
	Optional *FieldValue
}

type PrimitiveValue string

const (
	PrimitiveValueString = "STRING"
	PrimitiveValueNumber = "NUMBER"
)

func NewPrimitiveValueFromString(s string) (PrimitiveValue, error) {
	switch s {
	case "STRING":
		return PrimitiveValueString, nil
	case "NUMBER":
		return PrimitiveValueNumber, nil
	}
	var t PrimitiveValue
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PrimitiveValue) Ptr() *PrimitiveValue {
	return &p
}

type ObjectValue struct{}

type JsonLike struct {
	JsonLikeList      []*JsonLike
	StringJsonLikeMap map[string]*JsonLike
	String            string
	Integer           int
	Boolean           bool
}
