// Code generated by Fern. DO NOT EDIT.

package pagination

import (
	fmt "fmt"
)

type MultipleFilterSearchRequest struct {
	Operator *MultipleFilterSearchRequestOperator `json:"operator,undefined" url:"operator,undefined"`
	Value    *MultipleFilterSearchRequestValue    `json:"value,undefined" url:"value,undefined"`
}

type MultipleFilterSearchRequestOperator string

const (
	MultipleFilterSearchRequestOperatorAnd = "AND"
	MultipleFilterSearchRequestOperatorOr  = "OR"
)

func NewMultipleFilterSearchRequestOperatorFromString(s string) (MultipleFilterSearchRequestOperator, error) {
	switch s {
	case "AND":
		return MultipleFilterSearchRequestOperatorAnd, nil
	case "OR":
		return MultipleFilterSearchRequestOperatorOr, nil
	}
	var t MultipleFilterSearchRequestOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MultipleFilterSearchRequestOperator) Ptr() *MultipleFilterSearchRequestOperator {
	return &m
}

type SingleFilterSearchRequest struct {
	Field    *string                            `json:"field,undefined" url:"field,undefined"`
	Operator *SingleFilterSearchRequestOperator `json:"operator,undefined" url:"operator,undefined"`
	Value    *string                            `json:"value,undefined" url:"value,undefined"`
}

type SingleFilterSearchRequestOperator string

const (
	SingleFilterSearchRequestOperatorEquals         = "="
	SingleFilterSearchRequestOperatorNotEquals      = "!="
	SingleFilterSearchRequestOperatorIn             = "IN"
	SingleFilterSearchRequestOperatorNotIn          = "NIN"
	SingleFilterSearchRequestOperatorLessThan       = "<"
	SingleFilterSearchRequestOperatorGreaterThan    = ">"
	SingleFilterSearchRequestOperatorContains       = "~"
	SingleFilterSearchRequestOperatorDoesNotContain = "!~"
	SingleFilterSearchRequestOperatorStartsWith     = "^"
	SingleFilterSearchRequestOperatorEndsWith       = "$"
)

func NewSingleFilterSearchRequestOperatorFromString(s string) (SingleFilterSearchRequestOperator, error) {
	switch s {
	case "=":
		return SingleFilterSearchRequestOperatorEquals, nil
	case "!=":
		return SingleFilterSearchRequestOperatorNotEquals, nil
	case "IN":
		return SingleFilterSearchRequestOperatorIn, nil
	case "NIN":
		return SingleFilterSearchRequestOperatorNotIn, nil
	case "<":
		return SingleFilterSearchRequestOperatorLessThan, nil
	case ">":
		return SingleFilterSearchRequestOperatorGreaterThan, nil
	case "~":
		return SingleFilterSearchRequestOperatorContains, nil
	case "!~":
		return SingleFilterSearchRequestOperatorDoesNotContain, nil
	case "^":
		return SingleFilterSearchRequestOperatorStartsWith, nil
	case "$":
		return SingleFilterSearchRequestOperatorEndsWith, nil
	}
	var t SingleFilterSearchRequestOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SingleFilterSearchRequestOperator) Ptr() *SingleFilterSearchRequestOperator {
	return &s
}

type SearchRequest struct {
	Pagination *StartingAfterPaging `json:"pagination,undefined" url:"pagination,undefined"`
	Query      *SearchRequestQuery  `json:"query" url:"query"`
}

type PaginatedConversationResponse struct {
	Conversations []*Conversation `json:"conversations" url:"conversations"`
	Pages         *CursorPages    `json:"pages,undefined" url:"pages,undefined"`
	TotalCount    int             `json:"total_count" url:"total_count"`

	type_ string
}

type CursorPages struct {
	Next       *StartingAfterPaging `json:"next,undefined" url:"next,undefined"`
	Page       *int                 `json:"page,undefined" url:"page,undefined"`
	PerPage    *int                 `json:"per_page,undefined" url:"per_page,undefined"`
	TotalPages *int                 `json:"total_pages,undefined" url:"total_pages,undefined"`

	type_ string
}

type StartingAfterPaging struct {
	PerPage       int     `json:"per_page" url:"per_page"`
	StartingAfter *string `json:"starting_after,undefined" url:"starting_after,undefined"`
}

type Conversation struct {
	Foo string `json:"foo" url:"foo"`
}
