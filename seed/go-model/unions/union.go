// Code generated by Fern. DO NOT EDIT.

package unions

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/unions/fern/internal"
)

type GetShapeRequest struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (g *GetShapeRequest) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetShapeRequest) GetExtraProperties() map[string]any {
	if g == nil {
		return nil
	}
	return g.extraProperties
}

func (g *GetShapeRequest) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Shape struct {
	Type   string
	Id     string
	Circle Circle
	Square Square
}

type Circle struct {
	Radius float64 `json:"radius" url:"radius"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (c *Circle) GetRadius() float64 {
	if c == nil {
		return 0
	}
	return c.Radius
}

func (c *Circle) GetExtraProperties() map[string]any {
	if c == nil {
		return nil
	}
	return c.extraProperties
}

func (c *Circle) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Square struct {
	Length float64 `json:"length" url:"length"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (s *Square) GetLength() float64 {
	if s == nil {
		return 0
	}
	return s.Length
}

func (s *Square) GetExtraProperties() map[string]any {
	if s == nil {
		return nil
	}
	return s.extraProperties
}

func (s *Square) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
