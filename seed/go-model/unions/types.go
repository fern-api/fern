// Code generated by Fern. DO NOT EDIT.

package unions

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/unions/fern/internal"
	time "time"
)

// This is a simple union.
type Union struct {
	// This is a simple union.
	Type string
	Foo  *Foo
	Bar  *Bar
}

type UnionWithDiscriminant struct {
	Type string
	Foo  *Foo
	Bar  *Bar
}

type UnionWithPrimitive struct {
	Type    string
	Integer int
	String  string
}

type UnionWithDuplicatePrimitive struct {
	Type     string
	Integer1 int
	Integer2 int
	String1  string
	String2  string
}

type UnionWithoutKey struct {
	Type string
	Foo  Foo
	Bar  Bar
}

type UnionWithNoProperties struct {
	Type  string
	Foo   Foo
	Empty any
}

type UnionWithMultipleNoProperties struct {
	Type   string
	Foo    Foo
	Empty1 any
	Empty2 any
}

type UnionWithLiteral struct {
	Type string
	Base string
	Fern string
}

type UnionWithBaseProperties struct {
	Type    string
	Id      string
	Integer int
	String  string
	Foo     Foo
}

type UnionWithTime struct {
	Type     string
	Value    int
	Date     time.Time
	Datetime time.Time
}

type UnionWithOptionalTime struct {
	Type     string
	Date     *time.Time
	Datetime *time.Time
}

type UnionWithSingleElement struct {
	Type string
	Foo  Foo
}

type UnionWithDuplicateTypes struct {
	Type string
	Foo1 Foo
	Foo2 Foo
}

type UnionWithSubTypes struct {
	Type        string
	Foo         Foo
	FooExtended FooExtended
}

type Foo struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (f *Foo) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *Foo) GetExtraProperties() map[string]any {
	if f == nil {
		return nil
	}
	return f.extraProperties
}

func (f *Foo) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FooExtended struct {
	Name string `json:"name" url:"name"`
	Age  int    `json:"age" url:"age"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (f *FooExtended) GetName() string {
	if f == nil {
		return ""
	}
	return f.Name
}

func (f *FooExtended) GetAge() int {
	if f == nil {
		return 0
	}
	return f.Age
}

func (f *FooExtended) GetExtraProperties() map[string]any {
	if f == nil {
		return nil
	}
	return f.extraProperties
}

func (f *FooExtended) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type Bar struct {
	Name string `json:"name" url:"name"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (b *Bar) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *Bar) GetExtraProperties() map[string]any {
	if b == nil {
		return nil
	}
	return b.extraProperties
}

func (b *Bar) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}
