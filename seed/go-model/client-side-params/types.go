// Code generated by Fern. DO NOT EDIT.

package clientsideparams

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/client-side-params/fern/internal"
	time "time"
)

type Resource struct {
	Id          string         `json:"id" url:"id"`
	Name        string         `json:"name" url:"name"`
	Description *string        `json:"description,omitempty" url:"description,omitempty"`
	CreatedAt   time.Time      `json:"created_at" url:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at" url:"updated_at"`
	Metadata    map[string]any `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (r *Resource) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *Resource) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *Resource) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *Resource) GetCreatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.CreatedAt
}

func (r *Resource) GetUpdatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.UpdatedAt
}

func (r *Resource) GetMetadata() map[string]any {
	if r == nil {
		return nil
	}
	return r.Metadata
}

func (r *Resource) GetExtraProperties() map[string]any {
	if r == nil {
		return nil
	}
	return r.extraProperties
}

func (r *Resource) UnmarshalJSON(
	data []byte,
) error {
	type embed Resource
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = Resource(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Resource) MarshalJSON() ([]byte, error) {
	type embed Resource
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: internal.NewDateTime(r.CreatedAt),
		UpdatedAt: internal.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *Resource) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SearchResponse struct {
	Results    []*Resource `json:"results" url:"results"`
	Total      *int        `json:"total,omitempty" url:"total,omitempty"`
	NextOffset *int        `json:"next_offset,omitempty" url:"next_offset,omitempty"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (s *SearchResponse) GetResults() []*Resource {
	if s == nil {
		return nil
	}
	return s.Results
}

func (s *SearchResponse) GetTotal() *int {
	if s == nil {
		return nil
	}
	return s.Total
}

func (s *SearchResponse) GetNextOffset() *int {
	if s == nil {
		return nil
	}
	return s.NextOffset
}

func (s *SearchResponse) GetExtraProperties() map[string]any {
	if s == nil {
		return nil
	}
	return s.extraProperties
}

func (s *SearchResponse) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
