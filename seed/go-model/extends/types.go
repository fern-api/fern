// Code generated by Fern. DO NOT EDIT.

package extends

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/extends/fern/internal"
)

type ExampleType struct {
	Docs string `json:"docs" url:"docs"`
	Name string `json:"name" url:"name"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (e *ExampleType) GetDocs() string {
	if e == nil {
		return ""
	}
	return e.Docs
}

func (e *ExampleType) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *ExampleType) GetExtraProperties() map[string]any {
	if e == nil {
		return nil
	}
	return e.extraProperties
}

func (e *ExampleType) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type NestedType struct {
	Raw  string `json:"raw" url:"raw"`
	Docs string `json:"docs" url:"docs"`
	Name string `json:"name" url:"name"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (n *NestedType) GetRaw() string {
	if n == nil {
		return ""
	}
	return n.Raw
}

func (n *NestedType) GetDocs() string {
	if n == nil {
		return ""
	}
	return n.Docs
}

func (n *NestedType) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NestedType) GetExtraProperties() map[string]any {
	if n == nil {
		return nil
	}
	return n.extraProperties
}

func (n *NestedType) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Docs struct {
	Docs string `json:"docs" url:"docs"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (d *Docs) GetDocs() string {
	if d == nil {
		return ""
	}
	return d.Docs
}

func (d *Docs) GetExtraProperties() map[string]any {
	if d == nil {
		return nil
	}
	return d.extraProperties
}

func (d *Docs) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type Json struct {
	Docs string `json:"docs" url:"docs"`
	Raw  string `json:"raw" url:"raw"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (j *Json) GetDocs() string {
	if j == nil {
		return ""
	}
	return j.Docs
}

func (j *Json) GetRaw() string {
	if j == nil {
		return ""
	}
	return j.Raw
}

func (j *Json) GetExtraProperties() map[string]any {
	if j == nil {
		return nil
	}
	return j.extraProperties
}

func (j *Json) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}
