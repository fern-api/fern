// Code generated by Fern. DO NOT EDIT.

package requestparameters

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/request-parameters/fern/internal"
)

type User struct {
	Name string   `json:"name" url:"name"`
	Tags []string `json:"tags" url:"tags"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (u *User) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *User) GetTags() []string {
	if u == nil {
		return nil
	}
	return u.Tags
}

func (u *User) GetExtraProperties() map[string]any {
	if u == nil {
		return nil
	}
	return u.extraProperties
}

func (u *User) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type NestedUser struct {
	Name string `json:"name" url:"name"`
	User *User  `json:"user" url:"user"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (n *NestedUser) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NestedUser) GetUser() *User {
	if n == nil {
		return nil
	}
	return n.User
}

func (n *NestedUser) GetExtraProperties() map[string]any {
	if n == nil {
		return nil
	}
	return n.extraProperties
}

func (n *NestedUser) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler NestedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NestedUser) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type CreateUsernameBody struct {
	Username string `json:"username" url:"username"`
	Password string `json:"password" url:"password"`
	Name     string `json:"name" url:"name"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (c *CreateUsernameBody) GetUsername() string {
	if c == nil {
		return ""
	}
	return c.Username
}

func (c *CreateUsernameBody) GetPassword() string {
	if c == nil {
		return ""
	}
	return c.Password
}

func (c *CreateUsernameBody) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CreateUsernameBody) GetExtraProperties() map[string]any {
	if c == nil {
		return nil
	}
	return c.extraProperties
}

func (c *CreateUsernameBody) UnmarshalJSON(
	data []byte,
) error {
	type unmarshaler CreateUsernameBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUsernameBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUsernameBody) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
