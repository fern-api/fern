// Code generated by Fern. DO NOT EDIT.

package literal

import (
    json "encoding/json"
    internal "github.com/literal/fern/internal"
    fmt "fmt"
)


type SomeAliasedLiteral = string

type ATopLevelLiteral struct {
    NestedLiteral *ANestedLiteral `json:"nestedLiteral" url:"nestedLiteral"`

    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (a *ATopLevelLiteral) GetNestedLiteral() *ANestedLiteral{
    if a == nil {
        return nil
    }
    return a.NestedLiteral
}

func (a *ATopLevelLiteral) GetExtraProperties() map[string]any{
    if a == nil {
        return nil
    }
    return a.extraProperties
}

func (a *ATopLevelLiteral) UnmarshalJSON(
    data []byte,
) error{
    type unmarshaler ATopLevelLiteral
    var value unmarshaler
    if err := json.Unmarshal(data, &value); err != nil {
        return err
    }
    *a = ATopLevelLiteral(value)
    extraProperties, err := internal.ExtractExtraProperties(data, *a)
    if err != nil {
        return err
    }
    a.extraProperties = extraProperties
    a.rawJSON = json.RawMessage(data)
    return nil
}

func (a *ATopLevelLiteral) String() string{
    if len(a.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(a); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", a)
}


type ANestedLiteral struct {
    myLiteral string
    extraProperties map[string]any
    rawJSON json.RawMessage
}

func (a *ANestedLiteral) GetMyLiteral() string{
    if a == nil {
        return ""
    }
    return a.myLiteral
}

func (a *ANestedLiteral) GetExtraProperties() map[string]any{
    if a == nil {
        return nil
    }
    return a.extraProperties
}

func (a *ANestedLiteral) UnmarshalJSON(
    data []byte,
) error{
    type embed ANestedLiteral
    var unmarshaler = struct{
        embed
        MyLiteral string `json:"myLiteral"`
    }{
        embed: embed(*a),
    }
    if err := json.Unmarshal(data, &unmarshaler); err != nil {
        return err
    }
    *a = ANestedLiteral(unmarshaler.embed)
    if unmarshaler.MyLiteral != "How super cool" {
        return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "How super cool", unmarshaler.MyLiteral)
    }
    a.myLiteral = unmarshaler.MyLiteral
    extraProperties, err := internal.ExtractExtraProperties(data, *a, "myLiteral")
    if err != nil {
        return err
    }
    a.extraProperties = extraProperties
    a.rawJSON = json.RawMessage(data)
    return nil
}

func (a *ANestedLiteral) MarshalJSON() ([]byte, error){
    type embed ANestedLiteral
    var marshaler = struct{
        embed
        MyLiteral string `json:"myLiteral"`
    }{
        embed: embed(*a),
        MyLiteral: "How super cool",
    }
    return json.Marshal(marshaler)
}

func (a *ANestedLiteral) String() string{
    if len(a.rawJSON) > 0 {
        if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
            return value
        }
    }
    if value, err := internal.StringifyJSON(a); err == nil {
        return value
    }
    return fmt.Sprintf("%#v", a)
}


type DiscriminatedLiteral struct {
    Type string
    CustomName string
    DefaultName string
    George bool
    LiteralGeorge bool
}

type UndiscriminatedLiteral struct {
    String string
    $endingStringLiteral string
    10 non-alphanumeric string literals you're going to love & why (number 8 will surprise you)StringLiteral string
    TrueLiteral bool
    FalseLiteral bool
    Boolean bool
}
