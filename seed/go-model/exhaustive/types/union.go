// This file was auto-generated by Fern from our API Definition.

package types

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/exhaustive/fern/internal"
)

type Animal struct {
	Animal string
	Dog    *Dog
	Cat    *Cat
}

func NewAnimalFromDog(value *Dog) *Animal {
	return &Animal{Animal: "dog", Dog: value}
}

func NewAnimalFromCat(value *Cat) *Animal {
	return &Animal{Animal: "cat", Cat: value}
}

func (a *Animal) GetAnimal() string {
	if a == nil {
		return ""
	}
	return a.Animal
}

func (a *Animal) GetDog() *Dog {
	if a == nil {
		return nil
	}
	return a.Dog
}

func (a *Animal) GetCat() *Cat {
	if a == nil {
		return nil
	}
	return a.Cat
}

func (a *Animal) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Animal string `json:"animal"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Animal = unmarshaler.Animal
	if unmarshaler.Animal == "" {
		return fmt.Errorf("%T did not include discriminant animal", a)
	}
	switch unmarshaler.Animal {
	case "dog":
		value := new(Dog)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Dog = value
	case "cat":
		value := new(Cat)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Cat = value
	}
	return nil
}

func (a Animal) MarshalJSON() ([]byte, error) {
	if err := a.validate(); err != nil {
		return nil, err
	}
	switch a.Animal {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.Animal, a)
	case "dog":
		return internal.MarshalJSONWithExtraProperty(a.Dog, "animal", "dog")
	case "cat":
		return internal.MarshalJSONWithExtraProperty(a.Cat, "animal", "cat")
	}
}

type AnimalVisitor interface {
	VisitDog(*Dog) error
	VisitCat(*Cat) error
}

func (a *Animal) Accept(visitor AnimalVisitor) error {
	switch a.Animal {
	default:
		return fmt.Errorf("invalid type %s in %T", a.Animal, a)
	case "dog":
		return visitor.VisitDog(a.Dog)
	case "cat":
		return visitor.VisitCat(a.Cat)
	}
}

func (a *Animal) validate() error {
	if a == nil {
		return fmt.Errorf("type %T is nil", a)
	}
	var fields []string
	if a.Dog != nil {
		fields = append(fields, "dog")
	}
	if a.Cat != nil {
		fields = append(fields, "cat")
	}
	if len(fields) == 0 {
		if a.Animal != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", a, a.Animal)
		}
		return fmt.Errorf("type %T is empty", a)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", a, fields)
	}
	if a.Animal != "" {
		field := fields[0]
		if a.Animal != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				a,
				a.Animal,
				a,
			)
		}
	}
	return nil
}

type Cat struct {
	Name        string `json:"name" url:"name"`
	LikesToMeow bool   `json:"likesToMeow" url:"likesToMeow"`

	extraProperties map[string]interface{}
}

func (c *Cat) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *Cat) GetLikesToMeow() bool {
	if c == nil {
		return false
	}
	return c.LikesToMeow
}

func (c *Cat) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Cat) UnmarshalJSON(data []byte) error {
	type unmarshaler Cat
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Cat(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *Cat) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Dog struct {
	Name        string `json:"name" url:"name"`
	LikesToWoof bool   `json:"likesToWoof" url:"likesToWoof"`

	extraProperties map[string]interface{}
}

func (d *Dog) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *Dog) GetLikesToWoof() bool {
	if d == nil {
		return false
	}
	return d.LikesToWoof
}

func (d *Dog) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Dog) UnmarshalJSON(data []byte) error {
	type unmarshaler Dog
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Dog(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	return nil
}

func (d *Dog) String() string {
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
