// Code generated by Fern. DO NOT EDIT.

package types

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/exhaustive/fern/internal"
)

type ObjectWithDocs struct {
	// Characters that could lead to broken generated SDKs:
	//
	// JSDoc (JavaScript/TypeScript):
	// - @: Used for JSDoc tags
	// - {: }: Used for type definitions
	// - <: >: HTML tags
	// - *: Can interfere with comment blocks
	// - /**: JSDoc comment start
	// - ** /: JSDoc comment end
	// - &: HTML entities
	//
	// XMLDoc (C#):
	// - <: >: XML tags
	// - &: ': ": <: >: XML special characters
	// - {: }: Used for interpolated strings
	// - ///: Comment marker
	// - /**: Block comment start
	// - ** /: Block comment end
	//
	// Javadoc (Java):
	// - @: Used for Javadoc tags
	// - <: >: HTML tags
	// - &: HTML entities
	// - *: Can interfere with comment blocks
	// - /**: Javadoc comment start
	// - ** /: Javadoc comment end
	//
	// Doxygen (C++):
	// - \: Used for Doxygen commands
	// - @: Alternative command prefix
	// - <: >: XML/HTML tags
	// - &: HTML entities
	// - /**: C-style comment start
	// - ** /: C-style comment end
	//
	// RDoc (Ruby):
	// - :: Used in symbol notation
	// - =: Section markers
	// - #: Comment marker
	// - =begin: Block comment start
	// - =end: Block comment end
	// - @: Instance variable prefix
	// - $: Global variable prefix
	// - %: String literal delimiter
	// - #{: String interpolation start
	// - }: String interpolation end
	//
	// PHPDoc (PHP):
	// - @: Used for PHPDoc tags
	// - {: }: Used for type definitions
	// - $: Variable prefix
	// - /**: PHPDoc comment start
	// - ** /: PHPDoc comment end
	// - *: Can interfere with comment blocks
	// - &: HTML entities
	String string `json:"string" url:"string"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (o *ObjectWithDocs) GetString() string {
	if o == nil {
		return ""
	}
	return o.String
}

func (o *ObjectWithDocs) GetExtraProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.extraProperties
}

func (o *ObjectWithDocs) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}
