// Code generated by Fern. DO NOT EDIT.

package validation

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/validation/fern/internal"
)

type SmallInteger = int

type LargeInteger = int

type Double = float64

type Word = string

type Sentence = string

type Shape string

const (
	ShapeSquare   = "SQUARE"
	ShapeCircle   = "CIRCLE"
	ShapeTriangle = "TRIANGLE"
)

func NewShapeFromString(s string) (Shape, error) {
	switch s {
	case "SQUARE":
		return ShapeSquare, nil
	case "CIRCLE":
		return ShapeCircle, nil
	case "TRIANGLE":
		return ShapeTriangle, nil
	}
	var t Shape
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Shape) Ptr() *Shape {
	return &s
}

// Defines properties with default values and validation rules.
type Type struct {
	Decimal float64 `json:"decimal" url:"decimal"`
	Even    int     `json:"even" url:"even"`
	Name    string  `json:"name" url:"name"`
	Shape   *Shape  `json:"shape" url:"shape"`

	extraProperties map[string]any
	rawJSON         json.RawMessage
}

func (t *Type) GetDecimal() float64 {
	if t == nil {
		return 0
	}
	return t.Decimal
}

func (t *Type) GetEven() int {
	if t == nil {
		return 0
	}
	return t.Even
}

func (t *Type) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *Type) GetShape() *Shape {
	if t == nil {
		return nil
	}
	return t.Shape
}

func (t *Type) GetExtraProperties() map[string]any {
	if t == nil {
		return nil
	}
	return t.extraProperties
}

func (t *Type) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
