// This file was auto-generated by Fern from our API Definition.

package alias

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/alias/fern/internal"
)

// Object is an alias for a type.
type Object = *Type

// A simple type with just a name.
type Type struct {
	Id   TypeId `json:"id" url:"id"`
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
}

func (t *Type) GetId() TypeId {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *Type) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *Type) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Type) UnmarshalJSON(data []byte) error {
	type unmarshaler Type
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Type(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	return nil
}

func (t *Type) String() string {
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// An alias for type IDs.
type TypeId = string
