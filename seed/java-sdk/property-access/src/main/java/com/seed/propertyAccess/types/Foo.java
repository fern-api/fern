/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.propertyAccess.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.propertyAccess.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Foo.Builder.class)
public final class Foo {
    private final String normal;

    private final String read;

    private final String write;

    private final Map<String, Object> additionalProperties;

    private Foo(String normal, String read, String write, Map<String, Object> additionalProperties) {
        this.normal = normal;
        this.read = read;
        this.write = write;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("normal")
    public String getNormal() {
        return normal;
    }

    @JsonProperty("read")
    public String getRead() {
        return read;
    }

    @JsonProperty("write")
    public String getWrite() {
        return write;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Foo && equalTo((Foo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Foo other) {
        return normal.equals(other.normal) && read.equals(other.read) && write.equals(other.write);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.normal, this.read, this.write);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NormalStage builder() {
        return new Builder();
    }

    public interface NormalStage {
        ReadStage normal(@NotNull String normal);

        Builder from(Foo other);
    }

    public interface ReadStage {
        WriteStage read(@NotNull String read);
    }

    public interface WriteStage {
        _FinalStage write(@NotNull String write);
    }

    public interface _FinalStage {
        Foo build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NormalStage, ReadStage, WriteStage, _FinalStage {
        private String normal;

        private String read;

        private String write;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Foo other) {
            normal(other.getNormal());
            read(other.getRead());
            write(other.getWrite());
            return this;
        }

        @java.lang.Override
        @JsonSetter("normal")
        public ReadStage normal(@NotNull String normal) {
            this.normal = Objects.requireNonNull(normal, "normal must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("read")
        public WriteStage read(@NotNull String read) {
            this.read = Objects.requireNonNull(read, "read must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("write")
        public _FinalStage write(@NotNull String write) {
            this.write = Objects.requireNonNull(write, "write must not be null");
            return this;
        }

        @java.lang.Override
        public Foo build() {
            return new Foo(normal, read, write, additionalProperties);
        }
    }
}
