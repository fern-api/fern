/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.responseProperty.core;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.util.Iterator;
import java.util.Map;
import java.util.Objects;
import okhttp3.HttpUrl;
import okhttp3.MultipartBody;

public class QueryStringMapper {

    private static final ObjectMapper MAPPER = ObjectMappers.JSON_MAPPER;

    public static void addQueryParameter(HttpUrl.Builder httpUrl, String key, Object value) {
        JsonNode nested = MAPPER.valueToTree(value);

        ObjectNode flat;
        if (nested.isObject()) {
            flat = flattenObject((ObjectNode) nested);
        } else if (nested.isArray()) {
            flat = flattenArray((ArrayNode) nested, "");
        } else {
            httpUrl.addQueryParameter(key, value.toString());
            return;
        }

        Iterator<Map.Entry<String, JsonNode>> fields = flat.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> field = fields.next();
            if (field.getValue().isTextual()) {
                httpUrl.addQueryParameter(key + field.getKey(), field.getValue().textValue());
            } else {
                httpUrl.addQueryParameter(key + field.getKey(), field.getValue().toString());
            }
        }
    }

    public static void addFormDataPart(MultipartBody.Builder multipartBody, String key, Object value) {
        HttpUrl.Builder httpUrl = HttpUrl.parse("https://example.org/").newBuilder();
        addQueryParameter(httpUrl, key, value);

        String queryString = Objects.requireNonNull(httpUrl.build().encodedQuery(), "Got null query string.");

        for (String queryStringEntry : queryString.split("&")) {
            if (queryStringEntry.contains("=") && queryStringEntry.split("=").length == 2) {
                String[] keyAndValue = queryStringEntry.split("=");
                multipartBody.addFormDataPart(keyAndValue[0], keyAndValue[1]);
            } else {
                throw new IllegalArgumentException(
                        "Got invalid query parameter " + queryStringEntry + " as part of query string " + queryString);
            }
        }
    }

    public static ObjectNode flattenObject(ObjectNode object) {
        ObjectNode flat = MAPPER.createObjectNode();

        Iterator<Map.Entry<String, JsonNode>> fields = object.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> field = fields.next();

            String key = "[" + field.getKey() + "]";

            if (field.getValue().isObject()) {
                ObjectNode flatField = flattenObject((ObjectNode) field.getValue());
                setAll(flat, flatField, key);
            } else if (field.getValue().isArray()) {
                ObjectNode flatField = flattenArray((ArrayNode) field.getValue(), key);
                setAll(flat, flatField, "");
            } else {
                flat.set(key, field.getValue());
            }
        }

        return flat;
    }

    private static ObjectNode flattenArray(ArrayNode array, String key) {
        ObjectNode flat = MAPPER.createObjectNode();

        Iterator<JsonNode> elements = array.elements();

        int index = 0;
        while (elements.hasNext()) {
            JsonNode element = elements.next();

            String indexKey = key + "[" + index + "]";

            if (element.isObject()) {
                ObjectNode flatField = flattenObject((ObjectNode) element);
                setAll(flat, flatField, indexKey);
            } else if (element.isArray()) {
                ObjectNode flatField = flattenArray((ArrayNode) element, "");
                setAll(flat, flatField, indexKey);
            } else {
                flat.set(indexKey, element);
            }

            index++;
        }

        return flat;
    }

    private static void setAll(ObjectNode target, ObjectNode source, String prefix) {
        Iterator<Map.Entry<String, JsonNode>> fields = source.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> entry = fields.next();
            target.set(prefix + entry.getKey(), entry.getValue());
        }
    }
}
