/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.serverSentEvents.resources.completions.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.serverSentEvents.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StreamedCompletion.Builder.class)
public final class StreamedCompletion {
    private final String delta;

    private final Optional<Integer> tokens;

    private final Map<String, Object> additionalProperties;

    private StreamedCompletion(String delta, Optional<Integer> tokens, Map<String, Object> additionalProperties) {
        this.delta = delta;
        this.tokens = tokens;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("delta")
    public String getDelta() {
        return delta;
    }

    @JsonProperty("tokens")
    public Optional<Integer> getTokens() {
        return tokens;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StreamedCompletion && equalTo((StreamedCompletion) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StreamedCompletion other) {
        return delta.equals(other.delta) && tokens.equals(other.tokens);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.delta, this.tokens);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DeltaStage builder() {
        return new Builder();
    }

    public interface DeltaStage {
        _FinalStage delta(@NotNull String delta);

        Builder from(StreamedCompletion other);
    }

    public interface _FinalStage {
        StreamedCompletion build();

        _FinalStage tokens(Optional<Integer> tokens);

        _FinalStage tokens(Integer tokens);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DeltaStage, _FinalStage {
        private String delta;

        private Optional<Integer> tokens = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StreamedCompletion other) {
            delta(other.getDelta());
            tokens(other.getTokens());
            return this;
        }

        @java.lang.Override
        @JsonSetter("delta")
        public _FinalStage delta(@NotNull String delta) {
            this.delta = Objects.requireNonNull(delta, "delta must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage tokens(Integer tokens) {
            this.tokens = Optional.ofNullable(tokens);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tokens", nulls = Nulls.SKIP)
        public _FinalStage tokens(Optional<Integer> tokens) {
            this.tokens = tokens;
            return this;
        }

        @java.lang.Override
        public StreamedCompletion build() {
            return new StreamedCompletion(delta, tokens, additionalProperties);
        }
    }
}
