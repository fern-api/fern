/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.complex.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class SingleFilterSearchRequestOperator {
    public static final SingleFilterSearchRequestOperator GREATER_THAN =
            new SingleFilterSearchRequestOperator(Value.GREATER_THAN, ">");

    public static final SingleFilterSearchRequestOperator DOES_NOT_CONTAIN =
            new SingleFilterSearchRequestOperator(Value.DOES_NOT_CONTAIN, "!~");

    public static final SingleFilterSearchRequestOperator IN = new SingleFilterSearchRequestOperator(Value.IN, "IN");

    public static final SingleFilterSearchRequestOperator CONTAINS =
            new SingleFilterSearchRequestOperator(Value.CONTAINS, "~");

    public static final SingleFilterSearchRequestOperator LESS_THAN =
            new SingleFilterSearchRequestOperator(Value.LESS_THAN, "<");

    public static final SingleFilterSearchRequestOperator EQUALS =
            new SingleFilterSearchRequestOperator(Value.EQUALS, "=");

    public static final SingleFilterSearchRequestOperator NOT_EQUALS =
            new SingleFilterSearchRequestOperator(Value.NOT_EQUALS, "!=");

    public static final SingleFilterSearchRequestOperator ENDS_WITH =
            new SingleFilterSearchRequestOperator(Value.ENDS_WITH, "$");

    public static final SingleFilterSearchRequestOperator STARTS_WITH =
            new SingleFilterSearchRequestOperator(Value.STARTS_WITH, "^");

    public static final SingleFilterSearchRequestOperator NOT_IN =
            new SingleFilterSearchRequestOperator(Value.NOT_IN, "NIN");

    private final Value value;

    private final String string;

    SingleFilterSearchRequestOperator(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof SingleFilterSearchRequestOperator
                        && this.string.equals(((SingleFilterSearchRequestOperator) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case GREATER_THAN:
                return visitor.visitGreaterThan();
            case DOES_NOT_CONTAIN:
                return visitor.visitDoesNotContain();
            case IN:
                return visitor.visitIn();
            case CONTAINS:
                return visitor.visitContains();
            case LESS_THAN:
                return visitor.visitLessThan();
            case EQUALS:
                return visitor.visitEquals();
            case NOT_EQUALS:
                return visitor.visitNotEquals();
            case ENDS_WITH:
                return visitor.visitEndsWith();
            case STARTS_WITH:
                return visitor.visitStartsWith();
            case NOT_IN:
                return visitor.visitNotIn();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static SingleFilterSearchRequestOperator valueOf(String value) {
        switch (value) {
            case ">":
                return GREATER_THAN;
            case "!~":
                return DOES_NOT_CONTAIN;
            case "IN":
                return IN;
            case "~":
                return CONTAINS;
            case "<":
                return LESS_THAN;
            case "=":
                return EQUALS;
            case "!=":
                return NOT_EQUALS;
            case "$":
                return ENDS_WITH;
            case "^":
                return STARTS_WITH;
            case "NIN":
                return NOT_IN;
            default:
                return new SingleFilterSearchRequestOperator(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        EQUALS,

        NOT_EQUALS,

        IN,

        NOT_IN,

        LESS_THAN,

        GREATER_THAN,

        CONTAINS,

        DOES_NOT_CONTAIN,

        STARTS_WITH,

        ENDS_WITH,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitEquals();

        T visitNotEquals();

        T visitIn();

        T visitNotIn();

        T visitLessThan();

        T visitGreaterThan();

        T visitContains();

        T visitDoesNotContain();

        T visitStartsWith();

        T visitEndsWith();

        T visitUnknown(String unknownType);
    }
}
