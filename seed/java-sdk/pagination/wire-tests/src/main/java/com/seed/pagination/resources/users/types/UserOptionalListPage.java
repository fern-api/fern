/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.users.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.pagination.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserOptionalListPage.Builder.class)
public final class UserOptionalListPage implements IUserOptionalListPage {
    private final UserOptionalListContainer data;

    private final Optional<UUID> next;

    private final Map<String, Object> additionalProperties;

    private UserOptionalListPage(
            UserOptionalListContainer data, Optional<UUID> next, Map<String, Object> additionalProperties) {
        this.data = data;
        this.next = next;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("data")
    @java.lang.Override
    public UserOptionalListContainer getData() {
        return data;
    }

    @JsonProperty("next")
    @java.lang.Override
    public Optional<UUID> getNext() {
        return next;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserOptionalListPage && equalTo((UserOptionalListPage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserOptionalListPage other) {
        return data.equals(other.data) && next.equals(other.next);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.data, this.next);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DataStage builder() {
        return new Builder();
    }

    public interface DataStage {
        _FinalStage data(@NotNull UserOptionalListContainer data);

        Builder from(UserOptionalListPage other);
    }

    public interface _FinalStage {
        UserOptionalListPage build();

        _FinalStage next(Optional<UUID> next);

        _FinalStage next(UUID next);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements DataStage, _FinalStage {
        private UserOptionalListContainer data;

        private Optional<UUID> next = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UserOptionalListPage other) {
            data(other.getData());
            next(other.getNext());
            return this;
        }

        @java.lang.Override
        @JsonSetter("data")
        public _FinalStage data(@NotNull UserOptionalListContainer data) {
            this.data = Objects.requireNonNull(data, "data must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage next(UUID next) {
            this.next = Optional.ofNullable(next);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "next", nulls = Nulls.SKIP)
        public _FinalStage next(Optional<UUID> next) {
            this.next = next;
            return this;
        }

        @java.lang.Override
        public UserOptionalListPage build() {
            return new UserOptionalListPage(data, next, additionalProperties);
        }
    }
}
