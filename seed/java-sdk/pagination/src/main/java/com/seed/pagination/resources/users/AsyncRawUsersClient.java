/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.users;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.seed.pagination.core.ClientOptions;
import com.seed.pagination.core.MediaTypes;
import com.seed.pagination.core.ObjectMappers;
import com.seed.pagination.core.QueryStringMapper;
import com.seed.pagination.core.RequestOptions;
import com.seed.pagination.core.SeedPaginationApiException;
import com.seed.pagination.core.SeedPaginationException;
import com.seed.pagination.core.SeedPaginationHttpResponse;
import com.seed.pagination.core.pagination.SyncPagingIterable;
import com.seed.pagination.resources.users.requests.ListUsernamesRequest;
import com.seed.pagination.resources.users.requests.ListUsernamesRequestCustom;
import com.seed.pagination.resources.users.requests.ListUsersBodyCursorPaginationRequest;
import com.seed.pagination.resources.users.requests.ListUsersBodyOffsetPaginationRequest;
import com.seed.pagination.resources.users.requests.ListUsersCursorPaginationRequest;
import com.seed.pagination.resources.users.requests.ListUsersDoubleOffsetPaginationRequest;
import com.seed.pagination.resources.users.requests.ListUsersExtendedRequest;
import com.seed.pagination.resources.users.requests.ListUsersExtendedRequestForOptionalData;
import com.seed.pagination.resources.users.requests.ListUsersMixedTypeCursorPaginationRequest;
import com.seed.pagination.resources.users.requests.ListUsersOffsetPaginationRequest;
import com.seed.pagination.resources.users.requests.ListUsersOffsetStepPaginationRequest;
import com.seed.pagination.resources.users.requests.ListWithGlobalConfigRequest;
import com.seed.pagination.resources.users.requests.ListWithOffsetPaginationHasNextPageRequest;
import com.seed.pagination.resources.users.types.ListUsersExtendedOptionalListResponse;
import com.seed.pagination.resources.users.types.ListUsersExtendedResponse;
import com.seed.pagination.resources.users.types.ListUsersMixedTypePaginationResponse;
import com.seed.pagination.resources.users.types.ListUsersPaginationResponse;
import com.seed.pagination.resources.users.types.NextPage;
import com.seed.pagination.resources.users.types.Page;
import com.seed.pagination.resources.users.types.User;
import com.seed.pagination.resources.users.types.UsernameContainer;
import com.seed.pagination.resources.users.types.WithCursor;
import com.seed.pagination.resources.users.types.WithPage;
import com.seed.pagination.types.UsernameCursor;
import java.io.IOException;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawUsersClient {
    protected final ClientOptions clientOptions;

    public AsyncRawUsersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithCursorPagination() {
        return listWithCursorPagination(
                ListUsersCursorPaginationRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithCursorPagination(
            ListUsersCursorPaginationRequest request) {
        return listWithCursorPagination(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithCursorPagination(
            ListUsersCursorPaginationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get().toString(), false);
        }
        if (request.getPerPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "per_page", request.getPerPage().get().toString(), false);
        }
        if (request.getOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "order", request.getOrder().get().toString(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "starting_after", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersPaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersPaginationResponse.class);
                        Optional<String> startingAfter =
                                parsedResponse.getPage().flatMap(Page::getNext).map(NextPage::getStartingAfter);
                        ListUsersCursorPaginationRequest nextRequest = ListUsersCursorPaginationRequest.builder()
                                .from(request)
                                .startingAfter(startingAfter)
                                .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return listWithCursorPagination(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithMixedTypeCursorPagination() {
        return listWithMixedTypeCursorPagination(
                ListUsersMixedTypeCursorPaginationRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithMixedTypeCursorPagination(
            ListUsersMixedTypeCursorPaginationRequest request) {
        return listWithMixedTypeCursorPagination(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithMixedTypeCursorPagination(
            ListUsersMixedTypeCursorPaginationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersMixedTypePaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersMixedTypePaginationResponse.class);
                        String startingAfter = parsedResponse.getNext();
                        ListUsersMixedTypeCursorPaginationRequest nextRequest =
                                ListUsersMixedTypeCursorPaginationRequest.builder()
                                        .from(request)
                                        .cursor(startingAfter)
                                        .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(!startingAfter.isEmpty(), result, () -> {
                                    try {
                                        return listWithMixedTypeCursorPagination(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithBodyCursorPagination() {
        return listWithBodyCursorPagination(
                ListUsersBodyCursorPaginationRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithBodyCursorPagination(
            ListUsersBodyCursorPaginationRequest request) {
        return listWithBodyCursorPagination(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithBodyCursorPagination(
            ListUsersBodyCursorPaginationRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedPaginationException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersPaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersPaginationResponse.class);
                        Optional<String> startingAfter =
                                parsedResponse.getPage().flatMap(Page::getNext).map(NextPage::getStartingAfter);
                        Optional<WithCursor> pagination = request.getPagination()
                                .map(pagination_ -> WithCursor.builder()
                                        .from(pagination_)
                                        .cursor(startingAfter)
                                        .build());
                        ListUsersBodyCursorPaginationRequest nextRequest =
                                ListUsersBodyCursorPaginationRequest.builder()
                                        .from(request)
                                        .pagination(pagination)
                                        .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return listWithBodyCursorPagination(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetPagination() {
        return listWithOffsetPagination(
                ListUsersOffsetPaginationRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetPagination(
            ListUsersOffsetPaginationRequest request) {
        return listWithOffsetPagination(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetPagination(
            ListUsersOffsetPaginationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get().toString(), false);
        }
        if (request.getPerPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "per_page", request.getPerPage().get().toString(), false);
        }
        if (request.getOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "order", request.getOrder().get().toString(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "starting_after", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersPaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersPaginationResponse.class);
                        int newPageNumber =
                                request.getPage().map(page -> page + 1).orElse(1);
                        ListUsersOffsetPaginationRequest nextRequest = ListUsersOffsetPaginationRequest.builder()
                                .from(request)
                                .page(newPageNumber)
                                .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(true, result, () -> {
                                    try {
                                        return listWithOffsetPagination(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithDoubleOffsetPagination() {
        return listWithDoubleOffsetPagination(
                ListUsersDoubleOffsetPaginationRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithDoubleOffsetPagination(
            ListUsersDoubleOffsetPaginationRequest request) {
        return listWithDoubleOffsetPagination(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithDoubleOffsetPagination(
            ListUsersDoubleOffsetPaginationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get().toString(), false);
        }
        if (request.getPerPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "per_page", request.getPerPage().get().toString(), false);
        }
        if (request.getOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "order", request.getOrder().get().toString(), false);
        }
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "starting_after", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersPaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersPaginationResponse.class);
                        double newPageNumber =
                                request.getPage().map(page -> page + 1.0).orElse(1.0);
                        ListUsersDoubleOffsetPaginationRequest nextRequest =
                                ListUsersDoubleOffsetPaginationRequest.builder()
                                        .from(request)
                                        .page(newPageNumber)
                                        .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(true, result, () -> {
                                    try {
                                        return listWithDoubleOffsetPagination(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithBodyOffsetPagination() {
        return listWithBodyOffsetPagination(
                ListUsersBodyOffsetPaginationRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithBodyOffsetPagination(
            ListUsersBodyOffsetPaginationRequest request) {
        return listWithBodyOffsetPagination(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithBodyOffsetPagination(
            ListUsersBodyOffsetPaginationRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedPaginationException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersPaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersPaginationResponse.class);
                        int newPageNumber = request.getPagination()
                                .flatMap(WithPage::getPage)
                                .map(page -> page + 1)
                                .orElse(1);
                        Optional<WithPage> pagination = request.getPagination().map(pagination_ -> WithPage.builder()
                                .from(pagination_)
                                .page(newPageNumber)
                                .build());
                        ListUsersBodyOffsetPaginationRequest nextRequest =
                                ListUsersBodyOffsetPaginationRequest.builder()
                                        .from(request)
                                        .pagination(pagination)
                                        .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(true, result, () -> {
                                    try {
                                        return listWithBodyOffsetPagination(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetStepPagination() {
        return listWithOffsetStepPagination(
                ListUsersOffsetStepPaginationRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetStepPagination(
            ListUsersOffsetStepPaginationRequest request) {
        return listWithOffsetStepPagination(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetStepPagination(
            ListUsersOffsetStepPaginationRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get().toString(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get().toString(), false);
        }
        if (request.getOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "order", request.getOrder().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersPaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersPaginationResponse.class);
                        int newPageNumber =
                                request.getPage().map(page -> page + 1).orElse(1);
                        ListUsersOffsetStepPaginationRequest nextRequest =
                                ListUsersOffsetStepPaginationRequest.builder()
                                        .from(request)
                                        .page(newPageNumber)
                                        .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(true, result, () -> {
                                    try {
                                        return listWithOffsetStepPagination(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>>
            listWithOffsetPaginationHasNextPage() {
        return listWithOffsetPaginationHasNextPage(
                ListWithOffsetPaginationHasNextPageRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetPaginationHasNextPage(
            ListWithOffsetPaginationHasNextPageRequest request) {
        return listWithOffsetPaginationHasNextPage(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithOffsetPaginationHasNextPage(
            ListWithOffsetPaginationHasNextPageRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getPage().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "page", request.getPage().get().toString(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get().toString(), false);
        }
        if (request.getOrder().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "order", request.getOrder().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersPaginationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersPaginationResponse.class);
                        int newPageNumber =
                                request.getPage().map(page -> page + 1).orElse(1);
                        ListWithOffsetPaginationHasNextPageRequest nextRequest =
                                ListWithOffsetPaginationHasNextPageRequest.builder()
                                        .from(request)
                                        .page(newPageNumber)
                                        .build();
                        List<User> result = parsedResponse.getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(true, result, () -> {
                                    try {
                                        return listWithOffsetPaginationHasNextPage(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithExtendedResults() {
        return listWithExtendedResults(ListUsersExtendedRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithExtendedResults(
            ListUsersExtendedRequest request) {
        return listWithExtendedResults(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> listWithExtendedResults(
            ListUsersExtendedRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersExtendedResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersExtendedResponse.class);
                        Optional<UUID> startingAfter = parsedResponse.getNext();
                        ListUsersExtendedRequest nextRequest = ListUsersExtendedRequest.builder()
                                .from(request)
                                .cursor(startingAfter)
                                .build();
                        List<User> result = parsedResponse.getData().getUsers();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return listWithExtendedResults(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>>
            listWithExtendedResultsAndOptionalData() {
        return listWithExtendedResultsAndOptionalData(
                ListUsersExtendedRequestForOptionalData.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>>
            listWithExtendedResultsAndOptionalData(ListUsersExtendedRequestForOptionalData request) {
        return listWithExtendedResultsAndOptionalData(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>>
            listWithExtendedResultsAndOptionalData(
                    ListUsersExtendedRequestForOptionalData request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getCursor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "cursor", request.getCursor().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<User>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListUsersExtendedOptionalListResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListUsersExtendedOptionalListResponse.class);
                        Optional<UUID> startingAfter = parsedResponse.getNext();
                        ListUsersExtendedRequestForOptionalData nextRequest =
                                ListUsersExtendedRequestForOptionalData.builder()
                                        .from(request)
                                        .cursor(startingAfter)
                                        .build();
                        List<User> result = parsedResponse.getData().getUsers().orElse(Collections.emptyList());
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<User>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return listWithExtendedResultsAndOptionalData(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> listUsernames() {
        return listUsernames(ListUsernamesRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> listUsernames(
            ListUsernamesRequest request) {
        return listUsernames(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> listUsernames(
            ListUsernamesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "starting_after", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        UsernameCursor parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UsernameCursor.class);
                        Optional<String> startingAfter =
                                parsedResponse.getCursor().getAfter();
                        ListUsernamesRequest nextRequest = ListUsernamesRequest.builder()
                                .from(request)
                                .startingAfter(startingAfter)
                                .build();
                        List<String> result = parsedResponse.getCursor().getData();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<String>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return listUsernames(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> listUsernamesCustom() {
        return listUsernamesCustom(ListUsernamesRequestCustom.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> listUsernamesCustom(
            ListUsernamesRequestCustom request) {
        return listUsernamesCustom(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> listUsernamesCustom(
            ListUsernamesRequestCustom request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "starting_after", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedPaginationHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UsernameCursor.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> listWithGlobalConfig() {
        return listWithGlobalConfig(ListWithGlobalConfigRequest.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> listWithGlobalConfig(
            ListWithGlobalConfigRequest request) {
        return listWithGlobalConfig(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> listWithGlobalConfig(
            ListWithGlobalConfigRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getOffset().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "offset", request.getOffset().get().toString(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<String>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        UsernameContainer parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UsernameContainer.class);
                        int newPageNumber =
                                request.getOffset().map(page -> page + 1).orElse(1);
                        ListWithGlobalConfigRequest nextRequest = ListWithGlobalConfigRequest.builder()
                                .from(request)
                                .offset(newPageNumber)
                                .build();
                        List<String> result = parsedResponse.getResults();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<String>(true, result, () -> {
                                    try {
                                        return listWithGlobalConfig(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
