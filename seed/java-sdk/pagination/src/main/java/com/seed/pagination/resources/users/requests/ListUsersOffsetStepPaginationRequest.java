/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.pagination.core.ObjectMappers;
import com.seed.pagination.resources.users.types.Order;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListUsersOffsetStepPaginationRequest.Builder.class)
public final class ListUsersOffsetStepPaginationRequest {
    private final Optional<Integer> page;

    private final Optional<Integer> limit;

    private final Optional<Order> order;

    private final Map<String, Object> additionalProperties;

    private ListUsersOffsetStepPaginationRequest(
            Optional<Integer> page,
            Optional<Integer> limit,
            Optional<Order> order,
            Map<String, Object> additionalProperties) {
        this.page = page;
        this.limit = limit;
        this.order = order;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Defaults to first page
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return The maxiumum number of elements to return.
     * This is also used as the step size in this
     * paginated endpoint.
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    @JsonProperty("order")
    public Optional<Order> getOrder() {
        return order;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListUsersOffsetStepPaginationRequest
                && equalTo((ListUsersOffsetStepPaginationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListUsersOffsetStepPaginationRequest other) {
        return page.equals(other.page) && limit.equals(other.limit) && order.equals(other.order);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.page, this.limit, this.order);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Order> order = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListUsersOffsetStepPaginationRequest other) {
            page(other.getPage());
            limit(other.getLimit());
            order(other.getOrder());
            return this;
        }

        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Order> order) {
            this.order = order;
            return this;
        }

        public Builder order(Order order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        public ListUsersOffsetStepPaginationRequest build() {
            return new ListUsersOffsetStepPaginationRequest(page, limit, order, additionalProperties);
        }
    }
}
