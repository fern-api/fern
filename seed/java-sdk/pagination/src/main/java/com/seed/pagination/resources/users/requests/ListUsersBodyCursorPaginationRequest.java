/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.users.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.pagination.core.ObjectMappers;
import com.seed.pagination.resources.users.types.WithCursor;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListUsersBodyCursorPaginationRequest.Builder.class)
public final class ListUsersBodyCursorPaginationRequest {
    private final Optional<WithCursor> pagination;

    private final Map<String, Object> additionalProperties;

    private ListUsersBodyCursorPaginationRequest(
            Optional<WithCursor> pagination, Map<String, Object> additionalProperties) {
        this.pagination = pagination;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The object that contains the cursor used for pagination
     * in order to fetch the next page of results.
     */
    @JsonProperty("pagination")
    public Optional<WithCursor> getPagination() {
        return pagination;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListUsersBodyCursorPaginationRequest
                && equalTo((ListUsersBodyCursorPaginationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListUsersBodyCursorPaginationRequest other) {
        return pagination.equals(other.pagination);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.pagination);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<WithCursor> pagination = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListUsersBodyCursorPaginationRequest other) {
            pagination(other.getPagination());
            return this;
        }

        @JsonSetter(value = "pagination", nulls = Nulls.SKIP)
        public Builder pagination(Optional<WithCursor> pagination) {
            this.pagination = pagination;
            return this;
        }

        public Builder pagination(WithCursor pagination) {
            this.pagination = Optional.ofNullable(pagination);
            return this;
        }

        public ListUsersBodyCursorPaginationRequest build() {
            return new ListUsersBodyCursorPaginationRequest(pagination, additionalProperties);
        }
    }
}
