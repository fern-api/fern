/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.complex;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.seed.pagination.core.ClientOptions;
import com.seed.pagination.core.MediaTypes;
import com.seed.pagination.core.ObjectMappers;
import com.seed.pagination.core.RequestOptions;
import com.seed.pagination.core.SeedPaginationApiException;
import com.seed.pagination.core.SeedPaginationException;
import com.seed.pagination.core.SeedPaginationHttpResponse;
import com.seed.pagination.core.pagination.SyncPagingIterable;
import com.seed.pagination.resources.complex.types.Conversation;
import com.seed.pagination.resources.complex.types.CursorPages;
import com.seed.pagination.resources.complex.types.PaginatedConversationResponse;
import com.seed.pagination.resources.complex.types.SearchRequest;
import com.seed.pagination.resources.complex.types.StartingAfterPaging;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawComplexClient {
    protected final ClientOptions clientOptions;

    public AsyncRawComplexClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<Conversation>>> search(
            SearchRequest request) {
        return search(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<Conversation>>> search(
            SearchRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("conversations/search")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedPaginationException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<SyncPagingIterable<Conversation>>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        PaginatedConversationResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaginatedConversationResponse.class);
                        Optional<String> startingAfter = parsedResponse
                                .getPages()
                                .flatMap(CursorPages::getNext)
                                .flatMap(StartingAfterPaging::getStartingAfter);
                        Optional<StartingAfterPaging> pagination = request.getPagination()
                                .map(pagination_ -> StartingAfterPaging.builder()
                                        .from(pagination_)
                                        .startingAfter(startingAfter)
                                        .build());
                        SearchRequest nextRequest = SearchRequest.builder()
                                .from(request)
                                .pagination(pagination)
                                .build();
                        List<Conversation> result = parsedResponse.getConversations();
                        future.complete(new SeedPaginationHttpResponse<>(
                                new SyncPagingIterable<Conversation>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return search(nextRequest, requestOptions)
                                                .get();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class)));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
