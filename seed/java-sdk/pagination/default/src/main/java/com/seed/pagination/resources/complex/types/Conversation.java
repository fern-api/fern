/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.complex.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.pagination.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Conversation.Builder.class)
public final class Conversation {
    private final String foo;

    private final Map<String, Object> additionalProperties;

    private Conversation(String foo, Map<String, Object> additionalProperties) {
        this.foo = foo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("foo")
    public String getFoo() {
        return foo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Conversation && equalTo((Conversation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Conversation other) {
        return foo.equals(other.foo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.foo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FooStage builder() {
        return new Builder();
    }

    public interface FooStage {
        _FinalStage foo(@NotNull String foo);

        Builder from(Conversation other);
    }

    public interface _FinalStage {
        Conversation build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FooStage, _FinalStage {
        private String foo;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Conversation other) {
            foo(other.getFoo());
            return this;
        }

        @java.lang.Override
        @JsonSetter("foo")
        public _FinalStage foo(@NotNull String foo) {
            this.foo = Objects.requireNonNull(foo, "foo must not be null");
            return this;
        }

        @java.lang.Override
        public Conversation build() {
            return new Conversation(foo, additionalProperties);
        }
    }
}
