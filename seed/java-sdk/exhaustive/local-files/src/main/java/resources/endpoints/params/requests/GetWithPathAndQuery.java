/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.fern.sdk.resources.endpoints.params.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.sdk.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = GetWithPathAndQuery.Builder.class
)
public final class GetWithPathAndQuery {
  private final String query;

  private final Map<String, Object> additionalProperties;

  private GetWithPathAndQuery(String query, Map<String, Object> additionalProperties) {
    this.query = query;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("query")
  public String getQuery() {
    return query;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetWithPathAndQuery && equalTo((GetWithPathAndQuery) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(GetWithPathAndQuery other) {
    return query.equals(other.query);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.query);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static QueryStage builder() {
    return new Builder();
  }

  public interface QueryStage {
    _FinalStage query(@NotNull String query);

    Builder from(GetWithPathAndQuery other);
  }

  public interface _FinalStage {
    GetWithPathAndQuery build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements QueryStage, _FinalStage {
    private String query;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(GetWithPathAndQuery other) {
      query(other.getQuery());
      return this;
    }

    @java.lang.Override
    @JsonSetter("query")
    public _FinalStage query(@NotNull String query) {
      this.query = Objects.requireNonNull(query, "query must not be null");
      return this;
    }

    @java.lang.Override
    public GetWithPathAndQuery build() {
      return new GetWithPathAndQuery(query, additionalProperties);
    }
  }
}
