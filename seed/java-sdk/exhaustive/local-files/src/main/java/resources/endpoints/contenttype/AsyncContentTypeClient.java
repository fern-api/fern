/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.fern.sdk.resources.endpoints.contenttype;

import com.fern.sdk.core.ClientOptions;
import com.fern.sdk.core.RequestOptions;
import com.fern.sdk.resources.types.object.types.ObjectWithOptionalField;
import java.lang.Void;
import java.util.concurrent.CompletableFuture;

public class AsyncContentTypeClient {
  protected final ClientOptions clientOptions;

  private final AsyncRawContentTypeClient rawClient;

  public AsyncContentTypeClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.rawClient = new AsyncRawContentTypeClient(clientOptions);
  }

  /**
   * Get responses with HTTP metadata like headers
   */
  public AsyncRawContentTypeClient withRawResponse() {
    return this.rawClient;
  }

  public CompletableFuture<Void> postJsonPatchContentType() {
    return this.rawClient.postJsonPatchContentType().thenApply(response -> response.body());
  }

  public CompletableFuture<Void> postJsonPatchContentType(ObjectWithOptionalField request) {
    return this.rawClient.postJsonPatchContentType(request).thenApply(response -> response.body());
  }

  public CompletableFuture<Void> postJsonPatchContentType(ObjectWithOptionalField request,
      RequestOptions requestOptions) {
    return this.rawClient.postJsonPatchContentType(request, requestOptions).thenApply(response -> response.body());
  }

  public CompletableFuture<Void> postJsonPatchContentWithCharsetType() {
    return this.rawClient.postJsonPatchContentWithCharsetType().thenApply(response -> response.body());
  }

  public CompletableFuture<Void> postJsonPatchContentWithCharsetType(
      ObjectWithOptionalField request) {
    return this.rawClient.postJsonPatchContentWithCharsetType(request).thenApply(response -> response.body());
  }

  public CompletableFuture<Void> postJsonPatchContentWithCharsetType(
      ObjectWithOptionalField request, RequestOptions requestOptions) {
    return this.rawClient.postJsonPatchContentWithCharsetType(request, requestOptions).thenApply(response -> response.body());
  }
}
