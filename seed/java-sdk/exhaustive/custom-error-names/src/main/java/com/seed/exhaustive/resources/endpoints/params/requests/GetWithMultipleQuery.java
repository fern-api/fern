/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive.resources.endpoints.params.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.exhaustive.core.ObjectMappers;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetWithMultipleQuery.Builder.class)
public final class GetWithMultipleQuery {
    private final List<String> query;

    private final List<Integer> number;

    private final Map<String, Object> additionalProperties;

    private GetWithMultipleQuery(List<String> query, List<Integer> number, Map<String, Object> additionalProperties) {
        this.query = query;
        this.number = number;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("query")
    public List<String> getQuery() {
        return query;
    }

    @JsonProperty("number")
    public List<Integer> getNumber() {
        return number;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetWithMultipleQuery && equalTo((GetWithMultipleQuery) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetWithMultipleQuery other) {
        return query.equals(other.query) && number.equals(other.number);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.query, this.number);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<String> query = new ArrayList<>();

        private List<Integer> number = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetWithMultipleQuery other) {
            query(other.getQuery());
            number(other.getNumber());
            return this;
        }

        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public Builder query(List<String> query) {
            this.query.clear();
            this.query.addAll(query);
            return this;
        }

        public Builder addQuery(String query) {
            this.query.add(query);
            return this;
        }

        public Builder addAllQuery(List<String> query) {
            this.query.addAll(query);
            return this;
        }

        public Builder query(String query) {
            this.query = Collections.singletonList(query);
            return this;
        }

        @JsonSetter(value = "number", nulls = Nulls.SKIP)
        public Builder number(List<Integer> number) {
            this.number.clear();
            this.number.addAll(number);
            return this;
        }

        public Builder addNumber(Integer number) {
            this.number.add(number);
            return this;
        }

        public Builder addAllNumber(List<Integer> number) {
            this.number.addAll(number);
            return this;
        }

        public Builder number(Integer number) {
            this.number = Collections.singletonList(number);
            return this;
        }

        public GetWithMultipleQuery build() {
            return new GetWithMultipleQuery(query, number, additionalProperties);
        }
    }
}
