/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive.resources.endpoints.put.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class ErrorCode {
    public static final ErrorCode GONE = new ErrorCode(Value.GONE, "GONE");

    public static final ErrorCode CONFLICT = new ErrorCode(Value.CONFLICT, "CONFLICT");

    public static final ErrorCode UNKNOWN = new ErrorCode(Value.UNKNOWN, "Unknown");

    public static final ErrorCode NOT_IMPLEMENTED = new ErrorCode(Value.NOT_IMPLEMENTED, "NOT_IMPLEMENTED");

    public static final ErrorCode UNAUTHORIZED = new ErrorCode(Value.UNAUTHORIZED, "UNAUTHORIZED");

    public static final ErrorCode BAD_REQUEST = new ErrorCode(Value.BAD_REQUEST, "BAD_REQUEST");

    public static final ErrorCode UNPROCESSABLE_ENTITY =
            new ErrorCode(Value.UNPROCESSABLE_ENTITY, "UNPROCESSABLE_ENTITY");

    public static final ErrorCode INTERNAL_SERVER_ERROR =
            new ErrorCode(Value.INTERNAL_SERVER_ERROR, "INTERNAL_SERVER_ERROR");

    public static final ErrorCode BAD_GATEWAY = new ErrorCode(Value.BAD_GATEWAY, "BAD_GATEWAY");

    public static final ErrorCode SERVICE_UNAVAILABLE = new ErrorCode(Value.SERVICE_UNAVAILABLE, "SERVICE_UNAVAILABLE");

    public static final ErrorCode FORBIDDEN = new ErrorCode(Value.FORBIDDEN, "FORBIDDEN");

    private final Value value;

    private final String string;

    ErrorCode(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other) || (other instanceof ErrorCode && this.string.equals(((ErrorCode) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case GONE:
                return visitor.visitGone();
            case CONFLICT:
                return visitor.visitConflict();
            case UNKNOWN:
                return visitor.visitUnknown();
            case NOT_IMPLEMENTED:
                return visitor.visitNotImplemented();
            case UNAUTHORIZED:
                return visitor.visitUnauthorized();
            case BAD_REQUEST:
                return visitor.visitBadRequest();
            case UNPROCESSABLE_ENTITY:
                return visitor.visitUnprocessableEntity();
            case INTERNAL_SERVER_ERROR:
                return visitor.visitInternalServerError();
            case BAD_GATEWAY:
                return visitor.visitBadGateway();
            case SERVICE_UNAVAILABLE:
                return visitor.visitServiceUnavailable();
            case FORBIDDEN:
                return visitor.visitForbidden();
            case _UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static ErrorCode valueOf(String value) {
        switch (value) {
            case "GONE":
                return GONE;
            case "CONFLICT":
                return CONFLICT;
            case "Unknown":
                return UNKNOWN;
            case "NOT_IMPLEMENTED":
                return NOT_IMPLEMENTED;
            case "UNAUTHORIZED":
                return UNAUTHORIZED;
            case "BAD_REQUEST":
                return BAD_REQUEST;
            case "UNPROCESSABLE_ENTITY":
                return UNPROCESSABLE_ENTITY;
            case "INTERNAL_SERVER_ERROR":
                return INTERNAL_SERVER_ERROR;
            case "BAD_GATEWAY":
                return BAD_GATEWAY;
            case "SERVICE_UNAVAILABLE":
                return SERVICE_UNAVAILABLE;
            case "FORBIDDEN":
                return FORBIDDEN;
            default:
                return new ErrorCode(Value._UNKNOWN, value);
        }
    }

    public enum Value {
        INTERNAL_SERVER_ERROR,

        UNAUTHORIZED,

        FORBIDDEN,

        BAD_REQUEST,

        CONFLICT,

        GONE,

        UNPROCESSABLE_ENTITY,

        NOT_IMPLEMENTED,

        BAD_GATEWAY,

        SERVICE_UNAVAILABLE,

        UNKNOWN,

        _UNKNOWN
    }

    public interface Visitor<T> {
        T visitInternalServerError();

        T visitUnauthorized();

        T visitForbidden();

        T visitBadRequest();

        T visitConflict();

        T visitGone();

        T visitUnprocessableEntity();

        T visitNotImplemented();

        T visitBadGateway();

        T visitServiceUnavailable();

        T visitUnknown();

        T visitUnknown(String unknownType);
    }
}
