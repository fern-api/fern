/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive.resources.types.object.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.exhaustive.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NestedObjectWithRequiredField.Builder.class)
public final class NestedObjectWithRequiredField {
    private final String string;

    private final ObjectWithOptionalField nestedObject;

    private final Map<String, Object> additionalProperties;

    private NestedObjectWithRequiredField(
            String string, ObjectWithOptionalField nestedObject, Map<String, Object> additionalProperties) {
        this.string = string;
        this.nestedObject = nestedObject;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("string")
    public String getString() {
        return string;
    }

    @JsonProperty("NestedObject")
    public ObjectWithOptionalField getNestedObject() {
        return nestedObject;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NestedObjectWithRequiredField && equalTo((NestedObjectWithRequiredField) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NestedObjectWithRequiredField other) {
        return string.equals(other.string) && nestedObject.equals(other.nestedObject);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.string, this.nestedObject);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StringStage builder() {
        return new Builder();
    }

    public interface StringStage {
        NestedObjectStage string(@NotNull String string);

        Builder from(NestedObjectWithRequiredField other);
    }

    public interface NestedObjectStage {
        _FinalStage nestedObject(@NotNull ObjectWithOptionalField nestedObject);
    }

    public interface _FinalStage {
        NestedObjectWithRequiredField build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StringStage, NestedObjectStage, _FinalStage {
        private String string;

        private ObjectWithOptionalField nestedObject;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NestedObjectWithRequiredField other) {
            string(other.getString());
            nestedObject(other.getNestedObject());
            return this;
        }

        @java.lang.Override
        @JsonSetter("string")
        public NestedObjectStage string(@NotNull String string) {
            this.string = Objects.requireNonNull(string, "string must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("NestedObject")
        public _FinalStage nestedObject(@NotNull ObjectWithOptionalField nestedObject) {
            this.nestedObject = Objects.requireNonNull(nestedObject, "nestedObject must not be null");
            return this;
        }

        @java.lang.Override
        public NestedObjectWithRequiredField build() {
            return new NestedObjectWithRequiredField(string, nestedObject, additionalProperties);
        }
    }
}
