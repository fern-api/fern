/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive;

import com.seed.exhaustive.core.ClientOptions;
import com.seed.exhaustive.core.Environment;
import java.util.Optional;
import okhttp3.OkHttpClient;

public class AsyncSeedExhaustiveClientBuilder {
    private Optional<Integer> timeout = Optional.empty();

    private Optional<Integer> maxRetries = Optional.empty();

    private String token = null;

    private Environment environment;

    private OkHttpClient httpClient;

    /**
     * Sets token
     */
    public AsyncSeedExhaustiveClientBuilder token(String token) {
        this.token = token;
        return this;
    }

    public AsyncSeedExhaustiveClientBuilder url(String url) {
        this.environment = Environment.custom(url);
        return this;
    }

    /**
     * Sets the timeout (in seconds) for the client. Defaults to 60 seconds.
     */
    public AsyncSeedExhaustiveClientBuilder timeout(int timeout) {
        this.timeout = Optional.of(timeout);
        return this;
    }

    /**
     * Sets the maximum number of retries for the client. Defaults to 2 retries.
     */
    public AsyncSeedExhaustiveClientBuilder maxRetries(int maxRetries) {
        this.maxRetries = Optional.of(maxRetries);
        return this;
    }

    /**
     * Sets the underlying OkHttp client
     */
    public AsyncSeedExhaustiveClientBuilder httpClient(OkHttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }

    protected ClientOptions buildClientOptions() {
        ClientOptions.Builder builder = ClientOptions.builder();
        ;
        // Call configuration methods in order
        configureEnvironment(builder);
        configureAuthentication(builder);
        configureHttpClient(builder);
        configureTimeouts(builder);
        configureRetries(builder);
        ;
        // Extension point for subclasses
        configureAdditional(builder);
        ;
        return builder.build();
    }

    protected void configureEnvironment(ClientOptions.Builder builder) {
        builder.environment(this.environment);
    }

    /**
     * Override this method to customize authentication
     */
    protected void configureAuthentication(ClientOptions.Builder builder) {
        if (this.token != null) {
            builder.addHeader("Authorization", "Bearer " + this.token);
        }
    }

    protected void configureTimeouts(ClientOptions.Builder builder) {
        if (this.timeout.isPresent()) {
            builder.timeout(this.timeout.get());
        }
    }

    protected void configureRetries(ClientOptions.Builder builder) {
        if (this.maxRetries.isPresent()) {
            builder.maxRetries(this.maxRetries.get());
        }
    }

    protected void configureHttpClient(ClientOptions.Builder builder) {
        if (this.httpClient != null) {
            builder.httpClient(this.httpClient);
        }
    }

    /**
     * Extension point for subclasses to add additional configuration
     */
    protected void configureAdditional(ClientOptions.Builder builder) {}

    /**
     * Override this method to add custom validation logic
     */
    protected void validateConfiguration() {}

    public AsyncSeedExhaustiveClient build() {
        validateConfiguration();
        return new AsyncSeedExhaustiveClient(buildClientOptions());
    }
}
