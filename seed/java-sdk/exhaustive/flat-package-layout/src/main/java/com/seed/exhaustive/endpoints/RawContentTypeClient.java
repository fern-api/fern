/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive.endpoints;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.seed.exhaustive.core.ClientOptions;
import com.seed.exhaustive.core.MediaTypes;
import com.seed.exhaustive.core.ObjectMappers;
import com.seed.exhaustive.core.RequestOptions;
import com.seed.exhaustive.core.SeedExhaustiveApiException;
import com.seed.exhaustive.core.SeedExhaustiveException;
import com.seed.exhaustive.core.SeedExhaustiveHttpResponse;
import com.seed.exhaustive.types.types.ObjectWithOptionalField;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawContentTypeClient {
    protected final ClientOptions clientOptions;

    public RawContentTypeClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public SeedExhaustiveHttpResponse<Void> postJsonPatchContentType() {
        return postJsonPatchContentType(ObjectWithOptionalField.builder().build());
    }

    public SeedExhaustiveHttpResponse<Void> postJsonPatchContentType(ObjectWithOptionalField request) {
        return postJsonPatchContentType(request, null);
    }

    public SeedExhaustiveHttpResponse<Void> postJsonPatchContentType(
            ObjectWithOptionalField request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("foo")
                .addPathSegments("bar")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedExhaustiveException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json-patch+json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedExhaustiveHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedExhaustiveApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedExhaustiveException("Network error executing HTTP request", e);
        }
    }

    public SeedExhaustiveHttpResponse<Void> postJsonPatchContentWithCharsetType() {
        return postJsonPatchContentWithCharsetType(
                ObjectWithOptionalField.builder().build());
    }

    public SeedExhaustiveHttpResponse<Void> postJsonPatchContentWithCharsetType(ObjectWithOptionalField request) {
        return postJsonPatchContentWithCharsetType(request, null);
    }

    public SeedExhaustiveHttpResponse<Void> postJsonPatchContentWithCharsetType(
            ObjectWithOptionalField request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("foo")
                .addPathSegments("baz")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedExhaustiveException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json-patch+json; charset=utf-8")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedExhaustiveHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedExhaustiveApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedExhaustiveException("Network error executing HTTP request", e);
        }
    }
}
