/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive.resources.endpoints.put.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class ErrorCategory {
    public static final ErrorCategory INVALID_REQUEST_ERROR =
            new ErrorCategory(Value.INVALID_REQUEST_ERROR, "INVALID_REQUEST_ERROR");

    public static final ErrorCategory API_ERROR = new ErrorCategory(Value.API_ERROR, "API_ERROR");

    public static final ErrorCategory AUTHENTICATION_ERROR =
            new ErrorCategory(Value.AUTHENTICATION_ERROR, "AUTHENTICATION_ERROR");

    private final Value value;

    private final String string;

    ErrorCategory(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof ErrorCategory && this.string.equals(((ErrorCategory) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case INVALID_REQUEST_ERROR:
                return visitor.visitInvalidRequestError();
            case API_ERROR:
                return visitor.visitApiError();
            case AUTHENTICATION_ERROR:
                return visitor.visitAuthenticationError();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static ErrorCategory valueOf(String value) {
        switch (value) {
            case "INVALID_REQUEST_ERROR":
                return INVALID_REQUEST_ERROR;
            case "API_ERROR":
                return API_ERROR;
            case "AUTHENTICATION_ERROR":
                return AUTHENTICATION_ERROR;
            default:
                return new ErrorCategory(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        API_ERROR,

        AUTHENTICATION_ERROR,

        INVALID_REQUEST_ERROR,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitApiError();

        T visitAuthenticationError();

        T visitInvalidRequestError();

        T visitUnknown(String unknownType);
    }
}
