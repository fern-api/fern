/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.exhaustive.resources.types.object.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.exhaustive.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ObjectWithMapOfMap.Builder.class)
public final class ObjectWithMapOfMap {
    private final Map<String, Map<String, String>> map;

    private final Map<String, Object> additionalProperties;

    private ObjectWithMapOfMap(Map<String, Map<String, String>> map, Map<String, Object> additionalProperties) {
        this.map = map;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("map")
    public Map<String, Map<String, String>> getMap() {
        return map;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ObjectWithMapOfMap && equalTo((ObjectWithMapOfMap) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ObjectWithMapOfMap other) {
        return map.equals(other.map);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.map);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, Map<String, String>> map = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ObjectWithMapOfMap other) {
            map(other.getMap());
            return this;
        }

        @JsonSetter(value = "map", nulls = Nulls.SKIP)
        public Builder map(Map<String, Map<String, String>> map) {
            this.map.clear();
            this.map.putAll(map);
            return this;
        }

        public Builder putAllMap(Map<String, Map<String, String>> map) {
            this.map.putAll(map);
            return this;
        }

        public Builder map(String key, Map<String, String> value) {
            this.map.put(key, value);
            return this;
        }

        public ObjectWithMapOfMap build() {
            return new ObjectWithMapOfMap(map, additionalProperties);
        }
    }
}
