/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.websocket.resources.realtime.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.websocket.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ReceiveSnakeCase.Builder.class)
public final class ReceiveSnakeCase {
    private final String receiveText;

    private final int receiveInt;

    private final Map<String, Object> additionalProperties;

    private ReceiveSnakeCase(String receiveText, int receiveInt, Map<String, Object> additionalProperties) {
        this.receiveText = receiveText;
        this.receiveInt = receiveInt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("receive_text")
    public String getReceiveText() {
        return receiveText;
    }

    @JsonProperty("receive_int")
    public int getReceiveInt() {
        return receiveInt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReceiveSnakeCase && equalTo((ReceiveSnakeCase) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReceiveSnakeCase other) {
        return receiveText.equals(other.receiveText) && receiveInt == other.receiveInt;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.receiveText, this.receiveInt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ReceiveTextStage builder() {
        return new Builder();
    }

    public interface ReceiveTextStage {
        ReceiveIntStage receiveText(@NotNull String receiveText);

        Builder from(ReceiveSnakeCase other);
    }

    public interface ReceiveIntStage {
        _FinalStage receiveInt(int receiveInt);
    }

    public interface _FinalStage {
        ReceiveSnakeCase build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ReceiveTextStage, ReceiveIntStage, _FinalStage {
        private String receiveText;

        private int receiveInt;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ReceiveSnakeCase other) {
            receiveText(other.getReceiveText());
            receiveInt(other.getReceiveInt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("receive_text")
        public ReceiveIntStage receiveText(@NotNull String receiveText) {
            this.receiveText = Objects.requireNonNull(receiveText, "receiveText must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("receive_int")
        public _FinalStage receiveInt(int receiveInt) {
            this.receiveInt = receiveInt;
            return this;
        }

        @java.lang.Override
        public ReceiveSnakeCase build() {
            return new ReceiveSnakeCase(receiveText, receiveInt, additionalProperties);
        }
    }
}
