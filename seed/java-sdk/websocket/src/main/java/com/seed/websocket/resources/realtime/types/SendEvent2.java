/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.websocket.resources.realtime.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.websocket.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SendEvent2.Builder.class)
public final class SendEvent2 {
    private final String sendText2;

    private final boolean sendParam2;

    private final Map<String, Object> additionalProperties;

    private SendEvent2(String sendText2, boolean sendParam2, Map<String, Object> additionalProperties) {
        this.sendText2 = sendText2;
        this.sendParam2 = sendParam2;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("sendText2")
    public String getSendText2() {
        return sendText2;
    }

    @JsonProperty("sendParam2")
    public boolean getSendParam2() {
        return sendParam2;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SendEvent2 && equalTo((SendEvent2) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SendEvent2 other) {
        return sendText2.equals(other.sendText2) && sendParam2 == other.sendParam2;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.sendText2, this.sendParam2);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SendText2Stage builder() {
        return new Builder();
    }

    public interface SendText2Stage {
        SendParam2Stage sendText2(@NotNull String sendText2);

        Builder from(SendEvent2 other);
    }

    public interface SendParam2Stage {
        _FinalStage sendParam2(boolean sendParam2);
    }

    public interface _FinalStage {
        SendEvent2 build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements SendText2Stage, SendParam2Stage, _FinalStage {
        private String sendText2;

        private boolean sendParam2;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SendEvent2 other) {
            sendText2(other.getSendText2());
            sendParam2(other.getSendParam2());
            return this;
        }

        @java.lang.Override
        @JsonSetter("sendText2")
        public SendParam2Stage sendText2(@NotNull String sendText2) {
            this.sendText2 = Objects.requireNonNull(sendText2, "sendText2 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("sendParam2")
        public _FinalStage sendParam2(boolean sendParam2) {
            this.sendParam2 = sendParam2;
            return this;
        }

        @java.lang.Override
        public SendEvent2 build() {
            return new SendEvent2(sendText2, sendParam2, additionalProperties);
        }
    }
}
