/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.websocket.resources.realtime.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.websocket.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ReceiveEvent2.Builder.class)
public final class ReceiveEvent2 {
    private final String gamma;

    private final int delta;

    private final boolean epsilon;

    private final Map<String, Object> additionalProperties;

    private ReceiveEvent2(String gamma, int delta, boolean epsilon, Map<String, Object> additionalProperties) {
        this.gamma = gamma;
        this.delta = delta;
        this.epsilon = epsilon;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("gamma")
    public String getGamma() {
        return gamma;
    }

    @JsonProperty("delta")
    public int getDelta() {
        return delta;
    }

    @JsonProperty("epsilon")
    public boolean getEpsilon() {
        return epsilon;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReceiveEvent2 && equalTo((ReceiveEvent2) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReceiveEvent2 other) {
        return gamma.equals(other.gamma) && delta == other.delta && epsilon == other.epsilon;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.gamma, this.delta, this.epsilon);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static GammaStage builder() {
        return new Builder();
    }

    public interface GammaStage {
        DeltaStage gamma(@NotNull String gamma);

        Builder from(ReceiveEvent2 other);
    }

    public interface DeltaStage {
        EpsilonStage delta(int delta);
    }

    public interface EpsilonStage {
        _FinalStage epsilon(boolean epsilon);
    }

    public interface _FinalStage {
        ReceiveEvent2 build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements GammaStage, DeltaStage, EpsilonStage, _FinalStage {
        private String gamma;

        private int delta;

        private boolean epsilon;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ReceiveEvent2 other) {
            gamma(other.getGamma());
            delta(other.getDelta());
            epsilon(other.getEpsilon());
            return this;
        }

        @java.lang.Override
        @JsonSetter("gamma")
        public DeltaStage gamma(@NotNull String gamma) {
            this.gamma = Objects.requireNonNull(gamma, "gamma must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("delta")
        public EpsilonStage delta(int delta) {
            this.delta = delta;
            return this;
        }

        @java.lang.Override
        @JsonSetter("epsilon")
        public _FinalStage epsilon(boolean epsilon) {
            this.epsilon = epsilon;
            return this;
        }

        @java.lang.Override
        public ReceiveEvent2 build() {
            return new ReceiveEvent2(gamma, delta, epsilon, additionalProperties);
        }
    }
}
