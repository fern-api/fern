/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.audiences.resources.foo;

import com.seed.audiences.core.ClientOptions;
import com.seed.audiences.core.MediaTypes;
import com.seed.audiences.core.ObjectMappers;
import com.seed.audiences.core.QueryStringMapper;
import com.seed.audiences.core.RequestOptions;
import com.seed.audiences.core.SeedAudiencesApiException;
import com.seed.audiences.core.SeedAudiencesException;
import com.seed.audiences.core.SeedAudiencesHttpResponse;
import com.seed.audiences.resources.foo.requests.FindRequest;
import com.seed.audiences.resources.foo.types.ImportingType;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawFooClient {
    protected final ClientOptions clientOptions;

    public AsyncRawFooClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<SeedAudiencesHttpResponse<ImportingType>> find(FindRequest request) {
        return find(request, null);
    }

    public CompletableFuture<SeedAudiencesHttpResponse<ImportingType>> find(
            FindRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl =
                HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder();

        if (request.getOptionalString().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "optionalString", request.getOptionalString().get(), false);
        }
        Map<String, Object> properties = new HashMap<>();
        if (request.getPublicProperty().isPresent()) {
            properties.put("publicProperty", request.getPublicProperty());
        }
        if (request.getPrivateProperty().isPresent()) {
            properties.put("privateProperty", request.getPrivateProperty());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    MediaTypes.APPLICATION_JSON, ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedAudiencesHttpResponse<ImportingType>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedAudiencesHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ImportingType.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedAudiencesApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new SeedAudiencesException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedAudiencesException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
