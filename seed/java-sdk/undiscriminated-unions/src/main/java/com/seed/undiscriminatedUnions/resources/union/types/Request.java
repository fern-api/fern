/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.undiscriminatedUnions.resources.union.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.undiscriminatedUnions.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Request.Builder.class)
public final class Request {
    private final Optional<MetadataUnion> union;

    private final Map<String, Object> additionalProperties;

    private Request(Optional<MetadataUnion> union, Map<String, Object> additionalProperties) {
        this.union = union;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("union")
    public Optional<MetadataUnion> getUnion() {
        return union;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Request && equalTo((Request) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Request other) {
        return union.equals(other.union);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.union);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MetadataUnion> union = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Request other) {
            union(other.getUnion());
            return this;
        }

        @JsonSetter(value = "union", nulls = Nulls.SKIP)
        public Builder union(Optional<MetadataUnion> union) {
            this.union = union;
            return this;
        }

        public Builder union(MetadataUnion union) {
            this.union = Optional.ofNullable(union);
            return this;
        }

        public Request build() {
            return new Request(union, additionalProperties);
        }
    }
}
