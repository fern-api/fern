/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.resources.dataservice.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRequest.Builder.class)
public final class ListRequest {
    private final Optional<String> prefix;

    private final Optional<Long> limit;

    private final Optional<String> paginationToken;

    private final Optional<String> namespace;

    private final Map<String, Object> additionalProperties;

    private ListRequest(
            Optional<String> prefix,
            Optional<Long> limit,
            Optional<String> paginationToken,
            Optional<String> namespace,
            Map<String, Object> additionalProperties) {
        this.prefix = prefix;
        this.limit = limit;
        this.paginationToken = paginationToken;
        this.namespace = namespace;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("prefix")
    public Optional<String> getPrefix() {
        return prefix;
    }

    @JsonProperty("limit")
    public Optional<Long> getLimit() {
        return limit;
    }

    @JsonProperty("paginationToken")
    public Optional<String> getPaginationToken() {
        return paginationToken;
    }

    @JsonProperty("namespace")
    public Optional<String> getNamespace() {
        return namespace;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListRequest && equalTo((ListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListRequest other) {
        return prefix.equals(other.prefix)
                && limit.equals(other.limit)
                && paginationToken.equals(other.paginationToken)
                && namespace.equals(other.namespace);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.prefix, this.limit, this.paginationToken, this.namespace);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> prefix = Optional.empty();

        private Optional<Long> limit = Optional.empty();

        private Optional<String> paginationToken = Optional.empty();

        private Optional<String> namespace = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListRequest other) {
            prefix(other.getPrefix());
            limit(other.getLimit());
            paginationToken(other.getPaginationToken());
            namespace(other.getNamespace());
            return this;
        }

        @JsonSetter(value = "prefix", nulls = Nulls.SKIP)
        public Builder prefix(Optional<String> prefix) {
            this.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            this.prefix = Optional.ofNullable(prefix);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Long> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Long limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "paginationToken", nulls = Nulls.SKIP)
        public Builder paginationToken(Optional<String> paginationToken) {
            this.paginationToken = paginationToken;
            return this;
        }

        public Builder paginationToken(String paginationToken) {
            this.paginationToken = Optional.ofNullable(paginationToken);
            return this;
        }

        @JsonSetter(value = "namespace", nulls = Nulls.SKIP)
        public Builder namespace(Optional<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            this.namespace = Optional.ofNullable(namespace);
            return this;
        }

        public ListRequest build() {
            return new ListRequest(prefix, limit, paginationToken, namespace, additionalProperties);
        }
    }
}
