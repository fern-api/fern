/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IndexedData.Builder.class)
public final class IndexedData {
    private final List<Long> indices;

    private final List<Float> values;

    private final Map<String, Object> additionalProperties;

    private IndexedData(List<Long> indices, List<Float> values, Map<String, Object> additionalProperties) {
        this.indices = indices;
        this.values = values;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("indices")
    public List<Long> getIndices() {
        return indices;
    }

    @JsonProperty("values")
    public List<Float> getValues() {
        return values;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IndexedData && equalTo((IndexedData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IndexedData other) {
        return indices.equals(other.indices) && values.equals(other.values);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.indices, this.values);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Long> indices = new ArrayList<>();

        private List<Float> values = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(IndexedData other) {
            indices(other.getIndices());
            values(other.getValues());
            return this;
        }

        @JsonSetter(value = "indices", nulls = Nulls.SKIP)
        public Builder indices(List<Long> indices) {
            this.indices.clear();
            this.indices.addAll(indices);
            return this;
        }

        public Builder addIndices(Long indices) {
            this.indices.add(indices);
            return this;
        }

        public Builder addAllIndices(List<Long> indices) {
            this.indices.addAll(indices);
            return this;
        }

        @JsonSetter(value = "values", nulls = Nulls.SKIP)
        public Builder values(List<Float> values) {
            this.values.clear();
            this.values.addAll(values);
            return this;
        }

        public Builder addValues(Float values) {
            this.values.add(values);
            return this;
        }

        public Builder addAllValues(List<Float> values) {
            this.values.addAll(values);
            return this;
        }

        public IndexedData build() {
            return new IndexedData(indices, values, additionalProperties);
        }
    }
}
