/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.examples.resources.types.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.examples.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Movie.Builder.class)
public final class Movie implements IMovie {
    private final String foo;

    private final int bar;

    private final Map<String, Object> additionalProperties;

    private Movie(String foo, int bar, Map<String, Object> additionalProperties) {
        this.foo = foo;
        this.bar = bar;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("foo")
    @java.lang.Override
    public String getFoo() {
        return foo;
    }

    @JsonProperty("bar")
    @java.lang.Override
    public int getBar() {
        return bar;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Movie && equalTo((Movie) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Movie other) {
        return foo.equals(other.foo) && bar == other.bar;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.foo, this.bar);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FooStage builder() {
        return new Builder();
    }

    public interface FooStage {
        BarStage foo(@NotNull String foo);

        Builder from(Movie other);
    }

    public interface BarStage {
        _FinalStage bar(int bar);
    }

    public interface _FinalStage {
        Movie build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FooStage, BarStage, _FinalStage {
        private String foo;

        private int bar;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Movie other) {
            foo(other.getFoo());
            bar(other.getBar());
            return this;
        }

        @java.lang.Override
        @JsonSetter("foo")
        public BarStage foo(@NotNull String foo) {
            this.foo = Objects.requireNonNull(foo, "foo must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("bar")
        public _FinalStage bar(int bar) {
            this.bar = bar;
            return this;
        }

        @java.lang.Override
        public Movie build() {
            return new Movie(foo, bar, additionalProperties);
        }
    }
}
