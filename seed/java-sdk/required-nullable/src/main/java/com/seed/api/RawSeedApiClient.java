/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api;

import com.seed.api.core.ClientOptions;
import com.seed.api.core.ObjectMappers;
import com.seed.api.core.QueryStringMapper;
import com.seed.api.core.RequestOptions;
import com.seed.api.core.SeedApiApiException;
import com.seed.api.core.SeedApiException;
import com.seed.api.core.SeedApiHttpResponse;
import com.seed.api.requests.GetFooRequest;
import com.seed.api.types.Foo;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawSeedApiClient {
    protected final ClientOptions clientOptions;

    public RawSeedApiClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public SeedApiHttpResponse<Foo> getFoo(GetFooRequest request) {
        return getFoo(request, null);
    }

    public SeedApiHttpResponse<Foo> getFoo(GetFooRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("foo");
        if (request.getOptionalBaz().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "optional_baz", request.getOptionalBaz().get(), false);
        }
        if (request.getOptionalNullableBaz().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "optional_nullable_baz",
                    request.getOptionalNullableBaz().get(),
                    false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "required_baz", request.getRequiredBaz(), false);
        if (request.getRequiredNullableBaz().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "required_nullable_baz",
                    request.getRequiredNullableBaz().get(),
                    false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Foo.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedApiException("Network error executing HTTP request", e);
        }
    }
}
