/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.Nullable;
import com.seed.api.core.NullableNonemptyFilter;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetFooRequest.Builder.class)
public final class GetFooRequest {
    private final Optional<String> optionalBaz;

    private final Optional<String> optionalNullableBaz;

    private final String requiredBaz;

    private final Optional<String> requiredNullableBaz;

    private final Map<String, Object> additionalProperties;

    private GetFooRequest(
            Optional<String> optionalBaz,
            Optional<String> optionalNullableBaz,
            String requiredBaz,
            Optional<String> requiredNullableBaz,
            Map<String, Object> additionalProperties) {
        this.optionalBaz = optionalBaz;
        this.optionalNullableBaz = optionalNullableBaz;
        this.requiredBaz = requiredBaz;
        this.requiredNullableBaz = requiredNullableBaz;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An optional baz
     */
    @JsonProperty("optional_baz")
    public Optional<String> getOptionalBaz() {
        return optionalBaz;
    }

    /**
     * @return An optional baz
     */
    @JsonIgnore
    public Optional<String> getOptionalNullableBaz() {
        if (optionalNullableBaz == null) {
            return Optional.empty();
        }
        return optionalNullableBaz;
    }

    /**
     * @return A required baz
     */
    @JsonProperty("required_baz")
    public String getRequiredBaz() {
        return requiredBaz;
    }

    /**
     * @return A required baz
     */
    @JsonIgnore
    public Optional<String> getRequiredNullableBaz() {
        if (requiredNullableBaz == null) {
            return Optional.empty();
        }
        return requiredNullableBaz;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("optional_nullable_baz")
    private Optional<String> _getOptionalNullableBaz() {
        return optionalNullableBaz;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("required_nullable_baz")
    private Optional<String> _getRequiredNullableBaz() {
        return requiredNullableBaz;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetFooRequest && equalTo((GetFooRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetFooRequest other) {
        return optionalBaz.equals(other.optionalBaz)
                && optionalNullableBaz.equals(other.optionalNullableBaz)
                && requiredBaz.equals(other.requiredBaz)
                && requiredNullableBaz.equals(other.requiredNullableBaz);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.optionalBaz, this.optionalNullableBaz, this.requiredBaz, this.requiredNullableBaz);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RequiredBazStage builder() {
        return new Builder();
    }

    public interface RequiredBazStage {
        /**
         * <p>A required baz</p>
         */
        _FinalStage requiredBaz(@NotNull String requiredBaz);

        Builder from(GetFooRequest other);
    }

    public interface _FinalStage {
        GetFooRequest build();

        /**
         * <p>An optional baz</p>
         */
        _FinalStage optionalBaz(Optional<String> optionalBaz);

        _FinalStage optionalBaz(String optionalBaz);

        /**
         * <p>An optional baz</p>
         */
        _FinalStage optionalNullableBaz(Optional<String> optionalNullableBaz);

        _FinalStage optionalNullableBaz(String optionalNullableBaz);

        _FinalStage optionalNullableBaz(Nullable<String> optionalNullableBaz);

        /**
         * <p>A required baz</p>
         */
        _FinalStage requiredNullableBaz(Optional<String> requiredNullableBaz);

        _FinalStage requiredNullableBaz(String requiredNullableBaz);

        _FinalStage requiredNullableBaz(Nullable<String> requiredNullableBaz);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RequiredBazStage, _FinalStage {
        private String requiredBaz;

        private Optional<String> requiredNullableBaz = Optional.empty();

        private Optional<String> optionalNullableBaz = Optional.empty();

        private Optional<String> optionalBaz = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GetFooRequest other) {
            optionalBaz(other.getOptionalBaz());
            optionalNullableBaz(other.getOptionalNullableBaz());
            requiredBaz(other.getRequiredBaz());
            requiredNullableBaz(other.getRequiredNullableBaz());
            return this;
        }

        /**
         * <p>A required baz</p>
         * <p>A required baz</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("required_baz")
        public _FinalStage requiredBaz(@NotNull String requiredBaz) {
            this.requiredBaz = Objects.requireNonNull(requiredBaz, "requiredBaz must not be null");
            return this;
        }

        /**
         * <p>A required baz</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requiredNullableBaz(Nullable<String> requiredNullableBaz) {
            if (requiredNullableBaz.isNull()) {
                this.requiredNullableBaz = null;
            } else if (requiredNullableBaz.isEmpty()) {
                this.requiredNullableBaz = Optional.empty();
            } else {
                this.requiredNullableBaz = Optional.of(requiredNullableBaz.get());
            }
            return this;
        }

        /**
         * <p>A required baz</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage requiredNullableBaz(String requiredNullableBaz) {
            this.requiredNullableBaz = Optional.ofNullable(requiredNullableBaz);
            return this;
        }

        /**
         * <p>A required baz</p>
         */
        @java.lang.Override
        @JsonSetter(value = "required_nullable_baz", nulls = Nulls.SKIP)
        public _FinalStage requiredNullableBaz(Optional<String> requiredNullableBaz) {
            this.requiredNullableBaz = requiredNullableBaz;
            return this;
        }

        /**
         * <p>An optional baz</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage optionalNullableBaz(Nullable<String> optionalNullableBaz) {
            if (optionalNullableBaz.isNull()) {
                this.optionalNullableBaz = null;
            } else if (optionalNullableBaz.isEmpty()) {
                this.optionalNullableBaz = Optional.empty();
            } else {
                this.optionalNullableBaz = Optional.of(optionalNullableBaz.get());
            }
            return this;
        }

        /**
         * <p>An optional baz</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage optionalNullableBaz(String optionalNullableBaz) {
            this.optionalNullableBaz = Optional.ofNullable(optionalNullableBaz);
            return this;
        }

        /**
         * <p>An optional baz</p>
         */
        @java.lang.Override
        @JsonSetter(value = "optional_nullable_baz", nulls = Nulls.SKIP)
        public _FinalStage optionalNullableBaz(Optional<String> optionalNullableBaz) {
            this.optionalNullableBaz = optionalNullableBaz;
            return this;
        }

        /**
         * <p>An optional baz</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage optionalBaz(String optionalBaz) {
            this.optionalBaz = Optional.ofNullable(optionalBaz);
            return this;
        }

        /**
         * <p>An optional baz</p>
         */
        @java.lang.Override
        @JsonSetter(value = "optional_baz", nulls = Nulls.SKIP)
        public _FinalStage optionalBaz(Optional<String> optionalBaz) {
            this.optionalBaz = optionalBaz;
            return this;
        }

        @java.lang.Override
        public GetFooRequest build() {
            return new GetFooRequest(
                    optionalBaz, optionalNullableBaz, requiredBaz, requiredNullableBaz, additionalProperties);
        }
    }
}
