/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.queryParameters.resources.user;

import com.seed.queryParameters.core.ClientOptions;
import com.seed.queryParameters.core.ObjectMappers;
import com.seed.queryParameters.core.QueryStringMapper;
import com.seed.queryParameters.core.RequestOptions;
import com.seed.queryParameters.core.SeedQueryParametersApiException;
import com.seed.queryParameters.core.SeedQueryParametersException;
import com.seed.queryParameters.resources.user.requests.GetUsersRequest;
import com.seed.queryParameters.resources.user.types.User;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class UserClient {
    protected final ClientOptions clientOptions;

    public UserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public User getUsername(GetUsersRequest request) {
        return getUsername(request, null);
    }

    public User getUsername(GetUsersRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user");
        QueryStringMapper.addQueryParameter(httpUrl, "limit", Integer.toString(request.getLimit()));
        QueryStringMapper.addQueryParameter(httpUrl, "id", request.getId().toString());
        QueryStringMapper.addQueryParameter(httpUrl, "date", request.getDate());
        QueryStringMapper.addQueryParameter(
                httpUrl, "deadline", request.getDeadline().toString());
        QueryStringMapper.addQueryParameter(httpUrl, "bytes", request.getBytes().toString());
        QueryStringMapper.addQueryParameter(httpUrl, "user", request.getUser().toString());
        QueryStringMapper.addQueryParameter(
                httpUrl, "userList", request.getUserList().toString());
        if (request.getOptionalDeadline().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "optionalDeadline",
                    request.getOptionalDeadline().get().toString());
        }
        QueryStringMapper.addQueryParameter(httpUrl, "keyValue", request.getKeyValue());
        if (request.getOptionalString().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "optionalString", request.getOptionalString().get());
        }
        QueryStringMapper.addQueryParameter(
                httpUrl, "nestedUser", request.getNestedUser().toString());
        if (request.getOptionalUser().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "optionalUser", request.getOptionalUser().get().toString());
        }
        QueryStringMapper.addQueryParameter(
                httpUrl, "excludeUser", request.getExcludeUser().toString());
        QueryStringMapper.addQueryParameter(httpUrl, "filter", request.getFilter());
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), User.class);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedQueryParametersApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedQueryParametersException("Network error executing HTTP request", e);
        }
    }
}
