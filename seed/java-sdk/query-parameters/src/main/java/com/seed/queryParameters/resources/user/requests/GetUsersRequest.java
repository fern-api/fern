/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.queryParameters.resources.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.queryParameters.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = GetUsersRequest.Builder.class)
public final class GetUsersRequest {
    private final int limit;

    private final UUID id;

    private final String date;

    private final OffsetDateTime deadline;

    private final byte[] bytes;

    private final Optional<String> optionalString;

    private final String filter;

    private final Map<String, Object> additionalProperties;

    private GetUsersRequest(
            int limit,
            UUID id,
            String date,
            OffsetDateTime deadline,
            byte[] bytes,
            Optional<String> optionalString,
            String filter,
            Map<String, Object> additionalProperties) {
        this.limit = limit;
        this.id = id;
        this.date = date;
        this.deadline = deadline;
        this.bytes = bytes;
        this.optionalString = optionalString;
        this.filter = filter;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("limit")
    public int getLimit() {
        return limit;
    }

    @JsonProperty("id")
    public UUID getId() {
        return id;
    }

    @JsonProperty("date")
    public String getDate() {
        return date;
    }

    @JsonProperty("deadline")
    public OffsetDateTime getDeadline() {
        return deadline;
    }

    @JsonProperty("bytes")
    public byte[] getBytes() {
        return bytes;
    }

    @JsonProperty("optionalString")
    public Optional<String> getOptionalString() {
        return optionalString;
    }

    @JsonProperty("filter")
    public String getFilter() {
        return filter;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetUsersRequest && equalTo((GetUsersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetUsersRequest other) {
        return limit == other.limit
                && id.equals(other.id)
                && date.equals(other.date)
                && deadline.equals(other.deadline)
                && bytes.equals(other.bytes)
                && optionalString.equals(other.optionalString)
                && filter.equals(other.filter);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.limit, this.id, this.date, this.deadline, this.bytes, this.optionalString, this.filter);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LimitStage builder() {
        return new Builder();
    }

    public interface LimitStage {
        IdStage limit(int limit);

        Builder from(GetUsersRequest other);
    }

    public interface IdStage {
        DateStage id(UUID id);
    }

    public interface DateStage {
        DeadlineStage date(String date);
    }

    public interface DeadlineStage {
        BytesStage deadline(OffsetDateTime deadline);
    }

    public interface BytesStage {
        FilterStage bytes(byte[] bytes);
    }

    public interface FilterStage {
        _FinalStage filter(String filter);
    }

    public interface _FinalStage {
        GetUsersRequest build();

        _FinalStage optionalString(Optional<String> optionalString);

        _FinalStage optionalString(String optionalString);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements LimitStage, IdStage, DateStage, DeadlineStage, BytesStage, FilterStage, _FinalStage {
        private int limit;

        private UUID id;

        private String date;

        private OffsetDateTime deadline;

        private byte[] bytes;

        private String filter;

        private Optional<String> optionalString = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GetUsersRequest other) {
            limit(other.getLimit());
            id(other.getId());
            date(other.getDate());
            deadline(other.getDeadline());
            bytes(other.getBytes());
            optionalString(other.getOptionalString());
            filter(other.getFilter());
            return this;
        }

        @java.lang.Override
        @JsonSetter("limit")
        public IdStage limit(int limit) {
            this.limit = limit;
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public DateStage id(UUID id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("date")
        public DeadlineStage date(String date) {
            this.date = date;
            return this;
        }

        @java.lang.Override
        @JsonSetter("deadline")
        public BytesStage deadline(OffsetDateTime deadline) {
            this.deadline = deadline;
            return this;
        }

        @java.lang.Override
        @JsonSetter("bytes")
        public FilterStage bytes(byte[] bytes) {
            this.bytes = bytes;
            return this;
        }

        @java.lang.Override
        @JsonSetter("filter")
        public _FinalStage filter(String filter) {
            this.filter = filter;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalString(String optionalString) {
            this.optionalString = Optional.of(optionalString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalString", nulls = Nulls.SKIP)
        public _FinalStage optionalString(Optional<String> optionalString) {
            this.optionalString = optionalString;
            return this;
        }

        @java.lang.Override
        public GetUsersRequest build() {
            return new GetUsersRequest(limit, id, date, deadline, bytes, optionalString, filter, additionalProperties);
        }
    }
}
