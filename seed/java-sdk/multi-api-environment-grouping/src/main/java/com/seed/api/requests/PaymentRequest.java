/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentRequest.Builder.class)
public final class PaymentRequest {
    private final double amount;

    private final String currency;

    private final String recipient;

    private final Optional<String> description;

    private final Map<String, Object> additionalProperties;

    private PaymentRequest(
            double amount,
            String currency,
            String recipient,
            Optional<String> description,
            Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.currency = currency;
        this.recipient = recipient;
        this.description = description;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    @JsonProperty("currency")
    public String getCurrency() {
        return currency;
    }

    @JsonProperty("recipient")
    public String getRecipient() {
        return recipient;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentRequest && equalTo((PaymentRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentRequest other) {
        return amount == other.amount
                && currency.equals(other.currency)
                && recipient.equals(other.recipient)
                && description.equals(other.description);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amount, this.currency, this.recipient, this.description);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        CurrencyStage amount(double amount);

        Builder from(PaymentRequest other);
    }

    public interface CurrencyStage {
        RecipientStage currency(@NotNull String currency);
    }

    public interface RecipientStage {
        _FinalStage recipient(@NotNull String recipient);
    }

    public interface _FinalStage {
        PaymentRequest build();

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountStage, CurrencyStage, RecipientStage, _FinalStage {
        private double amount;

        private String currency;

        private String recipient;

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentRequest other) {
            amount(other.getAmount());
            currency(other.getCurrency());
            recipient(other.getRecipient());
            description(other.getDescription());
            return this;
        }

        @java.lang.Override
        @JsonSetter("amount")
        public CurrencyStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("currency")
        public RecipientStage currency(@NotNull String currency) {
            this.currency = Objects.requireNonNull(currency, "currency must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("recipient")
        public _FinalStage recipient(@NotNull String recipient) {
            this.recipient = Objects.requireNonNull(recipient, "recipient must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public PaymentRequest build() {
            return new PaymentRequest(amount, currency, recipient, description, additionalProperties);
        }
    }
}
