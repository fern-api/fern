/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Balance.Builder.class)
public final class Balance {
    private final double available;

    private final double pending;

    private final String currency;

    private final Map<String, Object> additionalProperties;

    private Balance(double available, double pending, String currency, Map<String, Object> additionalProperties) {
        this.available = available;
        this.pending = pending;
        this.currency = currency;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("available")
    public double getAvailable() {
        return available;
    }

    @JsonProperty("pending")
    public double getPending() {
        return pending;
    }

    @JsonProperty("currency")
    public String getCurrency() {
        return currency;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Balance && equalTo((Balance) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Balance other) {
        return available == other.available && pending == other.pending && currency.equals(other.currency);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.available, this.pending, this.currency);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AvailableStage builder() {
        return new Builder();
    }

    public interface AvailableStage {
        PendingStage available(double available);

        Builder from(Balance other);
    }

    public interface PendingStage {
        CurrencyStage pending(double pending);
    }

    public interface CurrencyStage {
        _FinalStage currency(@NotNull String currency);
    }

    public interface _FinalStage {
        Balance build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AvailableStage, PendingStage, CurrencyStage, _FinalStage {
        private double available;

        private double pending;

        private String currency;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Balance other) {
            available(other.getAvailable());
            pending(other.getPending());
            currency(other.getCurrency());
            return this;
        }

        @java.lang.Override
        @JsonSetter("available")
        public PendingStage available(double available) {
            this.available = available;
            return this;
        }

        @java.lang.Override
        @JsonSetter("pending")
        public CurrencyStage pending(double pending) {
            this.pending = pending;
            return this;
        }

        @java.lang.Override
        @JsonSetter("currency")
        public _FinalStage currency(@NotNull String currency) {
            this.currency = Objects.requireNonNull(currency, "currency must not be null");
            return this;
        }

        @java.lang.Override
        public Balance build() {
            return new Balance(available, pending, currency, additionalProperties);
        }
    }
}
