/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.resources.userservice.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import com.seed.api.types.Metadata;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateRequest.Builder.class)
public final class CreateRequest {
    private final Optional<String> username;

    private final Optional<String> email;

    private final Optional<Long> age;

    private final Optional<Float> weight;

    private final Optional<Metadata> metadata;

    private final Map<String, Object> additionalProperties;

    private CreateRequest(
            Optional<String> username,
            Optional<String> email,
            Optional<Long> age,
            Optional<Float> weight,
            Optional<Metadata> metadata,
            Map<String, Object> additionalProperties) {
        this.username = username;
        this.email = email;
        this.age = age;
        this.weight = weight;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("username")
    public Optional<String> getUsername() {
        return username;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("age")
    public Optional<Long> getAge() {
        return age;
    }

    @JsonProperty("weight")
    public Optional<Float> getWeight() {
        return weight;
    }

    @JsonProperty("metadata")
    public Optional<Metadata> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateRequest && equalTo((CreateRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateRequest other) {
        return username.equals(other.username)
                && email.equals(other.email)
                && age.equals(other.age)
                && weight.equals(other.weight)
                && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.username, this.email, this.age, this.weight, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> username = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<Long> age = Optional.empty();

        private Optional<Float> weight = Optional.empty();

        private Optional<Metadata> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateRequest other) {
            username(other.getUsername());
            email(other.getEmail());
            age(other.getAge());
            weight(other.getWeight());
            metadata(other.getMetadata());
            return this;
        }

        @JsonSetter(value = "username", nulls = Nulls.SKIP)
        public Builder username(Optional<String> username) {
            this.username = username;
            return this;
        }

        public Builder username(String username) {
            this.username = Optional.ofNullable(username);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "age", nulls = Nulls.SKIP)
        public Builder age(Optional<Long> age) {
            this.age = age;
            return this;
        }

        public Builder age(Long age) {
            this.age = Optional.ofNullable(age);
            return this;
        }

        @JsonSetter(value = "weight", nulls = Nulls.SKIP)
        public Builder weight(Optional<Float> weight) {
            this.weight = weight;
            return this;
        }

        public Builder weight(Float weight) {
            this.weight = Optional.ofNullable(weight);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Metadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public CreateRequest build() {
            return new CreateRequest(username, email, age, weight, metadata, additionalProperties);
        }
    }
}
