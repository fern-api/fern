/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.serverSentEvents;

import com.seed.serverSentEvents.core.Stream;
import java.io.IOException;
import java.io.StringReader;
import java.util.Iterator;
import java.util.Map;

public final class TestClient {
    public void testJsonStream() {
        String data = "{\"message\":\"hello\"}\\n{\"message\":\"world\"}";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromJson(Map.class, reader);
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("message");
        }
        assert count == 2;
    }

    public void testSseStream() {
        String data =
                "data: {\"event\":\"message\",\"data\":\"hello\"}\\n\\ndata: {\"event\":\"message\",\"data\":\"world\"}\\n\\n";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromSse(Map.class, reader);
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("event");
        }
        assert count == 2;
    }

    public void testSseStreamWithTerminator() {
        String data = "data: {\"message\":\"hello\"}\\n\\ndata: {\"message\":\"world\"}\\n\\ndata: [DONE]\\n\\n";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromSse(Map.class, reader, "[DONE]");
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("message");
        }
        assert count == 2;
    }

    public void testStreamClosing() throws IOException {
        String data = "{\"test\":\"data\"}";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromJson(Map.class, reader);
        stream.close();
        Iterator iterator = stream.iterator();
        assert !iterator.hasNext();
    }

    public void testEmptyStream() {
        String data = "";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromJson(Map.class, reader);
        int count = 0;
        for (Map item : stream) {
            count++;
        }
        assert count == 0;
    }

    public void testJsonStreamWithCustomDelimiter() {
        String data = "{\"id\":1}|{\"id\":2}|{\"id\":3}";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromJson(Map.class, reader, "|");
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("id");
        }
        assert count == 3;
    }

    public void testMalformedJsonStream() {
        String data = "{\"valid\":true}\\n{invalid json}\\n{\"valid\":false}";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromJson(Map.class, reader);
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("valid") || item.containsKey("valid");
        }
        assert count == 2;
    }

    public void testSseStreamWithComments() {
        String data =
                ": comment\\ndata: {\"event\":\"start\"}\\n\\n: another comment\\ndata: {\"event\":\"end\"}\\n\\n";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromSse(Map.class, reader);
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("event");
        }
        assert count == 2;
    }

    public void testSseStreamWithEmptyLines() {
        String data = "\\n\\ndata: {\"value\":1}\\n\\n\\n\\ndata: {\"value\":2}\\n\\n\\n\\n";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromSse(Map.class, reader);
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("value");
        }
        assert count == 2;
    }

    public void testStreamIterator() {
        String data = "{\"a\":1}\\n{\"b\":2}";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromJson(Map.class, reader);
        Iterator iterator = stream.iterator();
        assert iterator.hasNext();
        Map first = (Map) iterator.next();
        assert first.containsKey("a");
        assert iterator.hasNext();
        Map second = (Map) iterator.next();
        assert second.containsKey("b");
        assert !iterator.hasNext();
    }

    public void testStreamMultipleIteration() {
        String data = "{\"test\":\"data\"}";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromJson(Map.class, reader);
        int firstCount = 0;
        for (Map item : stream) {
            firstCount++;
        }
        assert firstCount == 1;
        int secondCount = 0;
        for (Map item : stream) {
            secondCount++;
        }
        assert secondCount == 1;
    }

    public void testSseStreamWithoutPrefix() {
        String data = "{\"direct\":\"json\"}\\n\\ndata: {\"sse\":\"format\"}\\n\\n";
        StringReader reader = new StringReader(data);
        Stream<Map> stream = Stream.fromSse(Map.class, reader);
        int count = 0;
        for (Map item : stream) {
            count++;
            assert item.containsKey("direct") || item.containsKey("sse");
        }
        assert count == 1;
    }
}
