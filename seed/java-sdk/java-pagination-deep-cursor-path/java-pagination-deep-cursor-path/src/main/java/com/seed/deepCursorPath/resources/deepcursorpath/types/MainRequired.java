/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.deepCursorPath.resources.deepcursorpath.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.deepCursorPath.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MainRequired.Builder.class)
public final class MainRequired {
    private final IndirectionRequired indirection;

    private final Map<String, Object> additionalProperties;

    private MainRequired(IndirectionRequired indirection, Map<String, Object> additionalProperties) {
        this.indirection = indirection;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("indirection")
    public IndirectionRequired getIndirection() {
        return indirection;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MainRequired && equalTo((MainRequired) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MainRequired other) {
        return indirection.equals(other.indirection);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.indirection);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IndirectionStage builder() {
        return new Builder();
    }

    public interface IndirectionStage {
        _FinalStage indirection(@NotNull IndirectionRequired indirection);

        Builder from(MainRequired other);
    }

    public interface _FinalStage {
        MainRequired build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IndirectionStage, _FinalStage {
        private IndirectionRequired indirection;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MainRequired other) {
            indirection(other.getIndirection());
            return this;
        }

        @java.lang.Override
        @JsonSetter("indirection")
        public _FinalStage indirection(@NotNull IndirectionRequired indirection) {
            this.indirection = Objects.requireNonNull(indirection, "indirection must not be null");
            return this;
        }

        @java.lang.Override
        public MainRequired build() {
            return new MainRequired(indirection, additionalProperties);
        }
    }
}
