/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.deepCursorPath.resources.deepcursorpath.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.deepCursorPath.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = B.Builder.class)
public final class B {
    private final C c;

    private final Map<String, Object> additionalProperties;

    private B(C c, Map<String, Object> additionalProperties) {
        this.c = c;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("c")
    public C getC() {
        return c;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof B && equalTo((B) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(B other) {
        return c.equals(other.c);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.c);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CStage builder() {
        return new Builder();
    }

    public interface CStage {
        _FinalStage c(@NotNull C c);

        Builder from(B other);
    }

    public interface _FinalStage {
        B build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CStage, _FinalStage {
        private C c;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(B other) {
            c(other.getC());
            return this;
        }

        @java.lang.Override
        @JsonSetter("c")
        public _FinalStage c(@NotNull C c) {
            this.c = Objects.requireNonNull(c, "c must not be null");
            return this;
        }

        @java.lang.Override
        public B build() {
            return new B(c, additionalProperties);
        }
    }
}
