/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Transaction.Builder.class)
public final class Transaction {
    private final String id;

    private final double amount;

    private final String currency;

    private final TransactionStatus status;

    private final OffsetDateTime timestamp;

    private final Map<String, Object> additionalProperties;

    private Transaction(
            String id,
            double amount,
            String currency,
            TransactionStatus status,
            OffsetDateTime timestamp,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.amount = amount;
        this.currency = currency;
        this.status = status;
        this.timestamp = timestamp;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    @JsonProperty("currency")
    public String getCurrency() {
        return currency;
    }

    @JsonProperty("status")
    public TransactionStatus getStatus() {
        return status;
    }

    @JsonProperty("timestamp")
    public OffsetDateTime getTimestamp() {
        return timestamp;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Transaction && equalTo((Transaction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Transaction other) {
        return id.equals(other.id)
                && amount == other.amount
                && currency.equals(other.currency)
                && status.equals(other.status)
                && timestamp.equals(other.timestamp);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.amount, this.currency, this.status, this.timestamp);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        AmountStage id(@NotNull String id);

        Builder from(Transaction other);
    }

    public interface AmountStage {
        CurrencyStage amount(double amount);
    }

    public interface CurrencyStage {
        StatusStage currency(@NotNull String currency);
    }

    public interface StatusStage {
        TimestampStage status(@NotNull TransactionStatus status);
    }

    public interface TimestampStage {
        _FinalStage timestamp(@NotNull OffsetDateTime timestamp);
    }

    public interface _FinalStage {
        Transaction build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, AmountStage, CurrencyStage, StatusStage, TimestampStage, _FinalStage {
        private String id;

        private double amount;

        private String currency;

        private TransactionStatus status;

        private OffsetDateTime timestamp;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Transaction other) {
            id(other.getId());
            amount(other.getAmount());
            currency(other.getCurrency());
            status(other.getStatus());
            timestamp(other.getTimestamp());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public AmountStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("amount")
        public CurrencyStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("currency")
        public StatusStage currency(@NotNull String currency) {
            this.currency = Objects.requireNonNull(currency, "currency must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public TimestampStage status(@NotNull TransactionStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("timestamp")
        public _FinalStage timestamp(@NotNull OffsetDateTime timestamp) {
            this.timestamp = Objects.requireNonNull(timestamp, "timestamp must not be null");
            return this;
        }

        @java.lang.Override
        public Transaction build() {
            return new Transaction(id, amount, currency, status, timestamp, additionalProperties);
        }
    }
}
