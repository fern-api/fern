/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RefundResponse.Builder.class)
public final class RefundResponse {
    private final String id;

    private final RefundResponseStatus status;

    private final double refundedAmount;

    private final Map<String, Object> additionalProperties;

    private RefundResponse(
            String id, RefundResponseStatus status, double refundedAmount, Map<String, Object> additionalProperties) {
        this.id = id;
        this.status = status;
        this.refundedAmount = refundedAmount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("status")
    public RefundResponseStatus getStatus() {
        return status;
    }

    @JsonProperty("refundedAmount")
    public double getRefundedAmount() {
        return refundedAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RefundResponse && equalTo((RefundResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RefundResponse other) {
        return id.equals(other.id) && status.equals(other.status) && refundedAmount == other.refundedAmount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.status, this.refundedAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        StatusStage id(@NotNull String id);

        Builder from(RefundResponse other);
    }

    public interface StatusStage {
        RefundedAmountStage status(@NotNull RefundResponseStatus status);
    }

    public interface RefundedAmountStage {
        _FinalStage refundedAmount(double refundedAmount);
    }

    public interface _FinalStage {
        RefundResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, StatusStage, RefundedAmountStage, _FinalStage {
        private String id;

        private RefundResponseStatus status;

        private double refundedAmount;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RefundResponse other) {
            id(other.getId());
            status(other.getStatus());
            refundedAmount(other.getRefundedAmount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public StatusStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public RefundedAmountStage status(@NotNull RefundResponseStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("refundedAmount")
        public _FinalStage refundedAmount(double refundedAmount) {
            this.refundedAmount = refundedAmount;
            return this;
        }

        @java.lang.Override
        public RefundResponse build() {
            return new RefundResponse(id, status, refundedAmount, additionalProperties);
        }
    }
}
