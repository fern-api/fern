/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Refund.Builder.class)
public final class Refund {
    private final String id;

    private final String paymentId;

    private final double amount;

    private final RefundStatus status;

    private final OffsetDateTime createdAt;

    private final Map<String, Object> additionalProperties;

    private Refund(
            String id,
            String paymentId,
            double amount,
            RefundStatus status,
            OffsetDateTime createdAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.paymentId = paymentId;
        this.amount = amount;
        this.status = status;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("paymentId")
    public String getPaymentId() {
        return paymentId;
    }

    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    @JsonProperty("status")
    public RefundStatus getStatus() {
        return status;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Refund && equalTo((Refund) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Refund other) {
        return id.equals(other.id)
                && paymentId.equals(other.paymentId)
                && amount == other.amount
                && status.equals(other.status)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.paymentId, this.amount, this.status, this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        PaymentIdStage id(@NotNull String id);

        Builder from(Refund other);
    }

    public interface PaymentIdStage {
        AmountStage paymentId(@NotNull String paymentId);
    }

    public interface AmountStage {
        StatusStage amount(double amount);
    }

    public interface StatusStage {
        CreatedAtStage status(@NotNull RefundStatus status);
    }

    public interface CreatedAtStage {
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        Refund build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage, PaymentIdStage, AmountStage, StatusStage, CreatedAtStage, _FinalStage {
        private String id;

        private String paymentId;

        private double amount;

        private RefundStatus status;

        private OffsetDateTime createdAt;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Refund other) {
            id(other.getId());
            paymentId(other.getPaymentId());
            amount(other.getAmount());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public PaymentIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("paymentId")
        public AmountStage paymentId(@NotNull String paymentId) {
            this.paymentId = Objects.requireNonNull(paymentId, "paymentId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("amount")
        public StatusStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public CreatedAtStage status(@NotNull RefundStatus status) {
            this.status = Objects.requireNonNull(status, "status must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        public Refund build() {
            return new Refund(id, paymentId, amount, status, createdAt, additionalProperties);
        }
    }
}
