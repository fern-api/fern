/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RefundRequest.Builder.class)
public final class RefundRequest {
    private final double amount;

    private final Optional<String> reason;

    private final Map<String, Object> additionalProperties;

    private RefundRequest(double amount, Optional<String> reason, Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.reason = reason;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    @JsonProperty("reason")
    public Optional<String> getReason() {
        return reason;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RefundRequest && equalTo((RefundRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RefundRequest other) {
        return amount == other.amount && reason.equals(other.reason);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amount, this.reason);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        _FinalStage amount(double amount);

        Builder from(RefundRequest other);
    }

    public interface _FinalStage {
        RefundRequest build();

        _FinalStage reason(Optional<String> reason);

        _FinalStage reason(String reason);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountStage, _FinalStage {
        private double amount;

        private Optional<String> reason = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RefundRequest other) {
            amount(other.getAmount());
            reason(other.getReason());
            return this;
        }

        @java.lang.Override
        @JsonSetter("amount")
        public _FinalStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        @java.lang.Override
        public _FinalStage reason(String reason) {
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "reason", nulls = Nulls.SKIP)
        public _FinalStage reason(Optional<String> reason) {
            this.reason = reason;
            return this;
        }

        @java.lang.Override
        public RefundRequest build() {
            return new RefundRequest(amount, reason, additionalProperties);
        }
    }
}
