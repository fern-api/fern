/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.mixedFileDirectory.resources.organization.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.mixedFileDirectory.core.ObjectMappers;
import com.seed.mixedFileDirectory.resources.user.types.User;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Organization.Builder.class)
public final class Organization {
    private final String id;

    private final String name;

    private final List<User> users;

    private final Map<String, Object> additionalProperties;

    private Organization(String id, String name, List<User> users, Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.users = users;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("users")
    public List<User> getUsers() {
        return users;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Organization && equalTo((Organization) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Organization other) {
        return id.equals(other.id) && name.equals(other.name) && users.equals(other.users);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.users);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        NameStage id(@NotNull String id);

        Builder from(Organization other);
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        Organization build();

        _FinalStage users(List<User> users);

        _FinalStage addUsers(User users);

        _FinalStage addAllUsers(List<User> users);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, _FinalStage {
        private String id;

        private String name;

        private List<User> users = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Organization other) {
            id(other.getId());
            name(other.getName());
            users(other.getUsers());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllUsers(List<User> users) {
            if (users != null) {
                this.users.addAll(users);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addUsers(User users) {
            this.users.add(users);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "users", nulls = Nulls.SKIP)
        public _FinalStage users(List<User> users) {
            this.users.clear();
            this.users.addAll(users);
            return this;
        }

        @java.lang.Override
        public Organization build() {
            return new Organization(id, name, users, additionalProperties);
        }
    }
}
