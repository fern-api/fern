/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.examples.resources.types.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.examples.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CronJob.Builder.class)
public final class CronJob {
    private final String expression;

    private final Map<String, Object> additionalProperties;

    private CronJob(String expression, Map<String, Object> additionalProperties) {
        this.expression = expression;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("expression")
    public String getExpression() {
        return expression;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CronJob && equalTo((CronJob) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CronJob other) {
        return expression.equals(other.expression);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.expression);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExpressionStage builder() {
        return new Builder();
    }

    public interface ExpressionStage {
        _FinalStage expression(@NotNull String expression);

        Builder from(CronJob other);
    }

    public interface _FinalStage {
        CronJob build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExpressionStage, _FinalStage {
        private String expression;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CronJob other) {
            expression(other.getExpression());
            return this;
        }

        @java.lang.Override
        @JsonSetter("expression")
        public _FinalStage expression(@NotNull String expression) {
            this.expression = Objects.requireNonNull(expression, "expression must not be null");
            return this;
        }

        @java.lang.Override
        public CronJob build() {
            return new CronJob(expression, additionalProperties);
        }
    }
}
