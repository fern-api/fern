/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.examples.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class ComplexType {
    public static final ComplexType UNION = new ComplexType(Value.UNION, "union");

    public static final ComplexType UNKNOWN = new ComplexType(Value.UNKNOWN, "unknown");

    public static final ComplexType OBJECT = new ComplexType(Value.OBJECT, "object");

    private final Value value;

    private final String string;

    ComplexType(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other) || (other instanceof ComplexType && this.string.equals(((ComplexType) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case UNION:
                return visitor.visitUnion();
            case UNKNOWN:
                return visitor.visitUnknown();
            case OBJECT:
                return visitor.visitObject();
            case _UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static ComplexType valueOf(String value) {
        switch (value) {
            case "union":
                return UNION;
            case "unknown":
                return UNKNOWN;
            case "object":
                return OBJECT;
            default:
                return new ComplexType(Value._UNKNOWN, value);
        }
    }

    public enum Value {
        OBJECT,

        UNION,

        UNKNOWN,

        _UNKNOWN
    }

    public interface Visitor<T> {
        T visitObject();

        T visitUnion();

        T visitUnknown();

        T visitUnknown(String unknownType);
    }
}
