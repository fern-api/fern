/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.examples;

import com.seed.examples.core.ClientOptions;
import com.seed.examples.core.RequestOptions;
import com.seed.examples.core.Suppliers;
import com.seed.examples.resources.file.AsyncFileClient;
import com.seed.examples.resources.health.AsyncHealthClient;
import com.seed.examples.resources.service.AsyncServiceClient;
import com.seed.examples.types.Identifier;
import com.seed.examples.types.Type;
import java.util.concurrent.CompletableFuture;
import java.util.function.Supplier;

public class AsyncSeedExamplesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawSeedExamplesClient rawClient;

    protected final Supplier<AsyncFileClient> fileClient;

    protected final Supplier<AsyncHealthClient> healthClient;

    protected final Supplier<AsyncServiceClient> serviceClient;

    public AsyncSeedExamplesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawSeedExamplesClient(clientOptions);
        this.fileClient = Suppliers.memoize(() -> new AsyncFileClient(clientOptions));
        this.healthClient = Suppliers.memoize(() -> new AsyncHealthClient(clientOptions));
        this.serviceClient = Suppliers.memoize(() -> new AsyncServiceClient(clientOptions));
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawSeedExamplesClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<String> echo(String request) {
        return this.rawClient.echo(request).thenApply(response -> response.body());
    }

    public CompletableFuture<String> echo(String request, RequestOptions requestOptions) {
        return this.rawClient.echo(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Identifier> createType(Type request) {
        return this.rawClient.createType(request).thenApply(response -> response.body());
    }

    public CompletableFuture<Identifier> createType(Type request, RequestOptions requestOptions) {
        return this.rawClient.createType(request, requestOptions).thenApply(response -> response.body());
    }

    public AsyncFileClient file() {
        return this.fileClient.get();
    }

    public AsyncHealthClient health() {
        return this.healthClient.get();
    }

    public AsyncServiceClient service() {
        return this.serviceClient.get();
    }

    public static AsyncSeedExamplesClientBuilder builder() {
        return new AsyncSeedExamplesClientBuilder();
    }
}
