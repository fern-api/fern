{
    "endpoints": [
        {
            "example_identifier": "d54376eb",
            "id": {
                "method": "POST",
                "path": "/",
                "identifier_override": "endpoint_.echo"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.echo(\"Hello world!\\\\n\\\\nwith\\\\n\\\\tnewlines\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.echo(\"Hello world!\\\\n\\\\nwith\\\\n\\\\tnewlines\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "d8492cb1",
            "id": {
                "method": "POST",
                "path": "/",
                "identifier_override": "endpoint_.echo"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.echo(\"string\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.echo(\"string\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "168ac0c8",
            "id": {
                "method": "POST",
                "path": "/",
                "identifier_override": "endpoint_.createType"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.echo(\"primitive\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.echo(\"primitive\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "a7021798",
            "id": {
                "method": "GET",
                "path": "/file/notification/{notificationId}",
                "identifier_override": "endpoint_file/notification/service.getException"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().notification().service().getException(\"notification-hsy129x\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().notification().service().getException(\"notification-hsy129x\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "41448453",
            "id": {
                "method": "GET",
                "path": "/file/notification/{notificationId}",
                "identifier_override": "endpoint_file/notification/service.getException"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().notification().service().getException(\"notificationId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().notification().service().getException(\"notificationId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "4683d279",
            "id": {
                "method": "GET",
                "path": "/file/{filename}",
                "identifier_override": "endpoint_file/service.getFile"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.file.service.requests.GetFileRequest;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().service().getFile(\n            \"file.txt\",\n            GetFileRequest\n                .builder()\n                .xFileApiVersion(\"0.0.2\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.file.service.requests.GetFileRequest;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().service().getFile(\n            \"file.txt\",\n            GetFileRequest\n                .builder()\n                .xFileApiVersion(\"0.0.2\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "da9db37a",
            "id": {
                "method": "GET",
                "path": "/file/{filename}",
                "identifier_override": "endpoint_file/service.getFile"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.file.service.requests.GetFileRequest;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().service().getFile(\n            \"filename\",\n            GetFileRequest\n                .builder()\n                .xFileApiVersion(\"X-File-API-Version\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.file.service.requests.GetFileRequest;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.file().service().getFile(\n            \"filename\",\n            GetFileRequest\n                .builder()\n                .xFileApiVersion(\"X-File-API-Version\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "Example0",
            "id": {
                "method": "GET",
                "path": "/check/{id}",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().check(\"id-2sdx82h\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().check(\"id-2sdx82h\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "Example2",
            "id": {
                "method": "GET",
                "path": "/check/{id}",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().check(\"id-3tey93i\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().check(\"id-3tey93i\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "3a3bf48b",
            "id": {
                "method": "GET",
                "path": "/check/{id}",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().check(\"id\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().check(\"id\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "Example0",
            "id": {
                "method": "GET",
                "path": "/ping",
                "identifier_override": "endpoint_health/service.ping"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().ping();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().ping();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "14b143fa",
            "id": {
                "method": "GET",
                "path": "/ping",
                "identifier_override": "endpoint_health/service.ping"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().ping();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.health().service().ping();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "6e744120",
            "id": {
                "method": "GET",
                "path": "/movie/{movieId}",
                "identifier_override": "endpoint_service.getMovie"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMovie(\"movie-c06a4ad7\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMovie(\"movie-c06a4ad7\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "1ba484c8",
            "id": {
                "method": "GET",
                "path": "/movie/{movieId}",
                "identifier_override": "endpoint_service.getMovie"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMovie(\"movieId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMovie(\"movieId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "1d327312",
            "id": {
                "method": "POST",
                "path": "/movie",
                "identifier_override": "endpoint_service.createMovie"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.types.types.Movie;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().createMovie(\n            Movie\n                .builder()\n                .id(\"movie-c06a4ad7\")\n                .title(\"The Boy and the Heron\")\n                .from(\"Hayao Miyazaki\")\n                .rating(8)\n                .type(\"movie\")\n                .tag(\"tag-wf9as23d\")\n                .metadata(\n                    new HashMap<String, Object>() {{\n                        put(\"actors\", new\n                        ArrayList<Object>() {Arrays.asList(\"Christian Bale\", \"Florence Pugh\", \"Willem Dafoe\")\n                        });\n                        put(\"releaseDate\", \"2023-12-08\");\n                        put(\"ratings\", new \n                        HashMap<String, Object>() {{put(\"rottenTomatoes\", 97);\n                            put(\"imdb\", 7.6);\n                        }});\n                    }}\n                )\n                .revenue(1000000L)\n                .prequel(\"movie-cv9b914f\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.types.types.Movie;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().createMovie(\n            Movie\n                .builder()\n                .id(\"movie-c06a4ad7\")\n                .title(\"The Boy and the Heron\")\n                .from(\"Hayao Miyazaki\")\n                .rating(8)\n                .type(\"movie\")\n                .tag(\"tag-wf9as23d\")\n                .metadata(\n                    new HashMap<String, Object>() {{\n                        put(\"actors\", new\n                        ArrayList<Object>() {Arrays.asList(\"Christian Bale\", \"Florence Pugh\", \"Willem Dafoe\")\n                        });\n                        put(\"releaseDate\", \"2023-12-08\");\n                        put(\"ratings\", new \n                        HashMap<String, Object>() {{put(\"rottenTomatoes\", 97);\n                            put(\"imdb\", 7.6);\n                        }});\n                    }}\n                )\n                .revenue(1000000L)\n                .prequel(\"movie-cv9b914f\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "93dfceb5",
            "id": {
                "method": "POST",
                "path": "/movie",
                "identifier_override": "endpoint_service.createMovie"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.types.types.Movie;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().createMovie(\n            Movie\n                .builder()\n                .id(\"id\")\n                .title(\"title\")\n                .from(\"from\")\n                .rating(1.1)\n                .type(\"movie\")\n                .tag(\"tag\")\n                .metadata(\n                    new HashMap<String, Object>() {{\n                        put(\"metadata\", new \n                        HashMap<String, Object>() {{put(\"key\", \"value\");\n                        }});\n                    }}\n                )\n                .revenue(1000000L)\n                .prequel(\"prequel\")\n                .book(\"book\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.types.types.Movie;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().createMovie(\n            Movie\n                .builder()\n                .id(\"id\")\n                .title(\"title\")\n                .from(\"from\")\n                .rating(1.1)\n                .type(\"movie\")\n                .tag(\"tag\")\n                .metadata(\n                    new HashMap<String, Object>() {{\n                        put(\"metadata\", new \n                        HashMap<String, Object>() {{put(\"key\", \"value\");\n                        }});\n                    }}\n                )\n                .revenue(1000000L)\n                .prequel(\"prequel\")\n                .book(\"book\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "fd0a1a7a",
            "id": {
                "method": "GET",
                "path": "/metadata",
                "identifier_override": "endpoint_service.getMetadata"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.service.requests.GetMetadataRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMetadata(\n            GetMetadataRequest\n                .builder()\n                .xApiVersion(\"0.0.1\")\n                .tag(\n                    new ArrayList<Optional<String>>(\n                        Arrays.asList(\"development\")\n                    )\n                )\n                .shallow(false)\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.service.requests.GetMetadataRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMetadata(\n            GetMetadataRequest\n                .builder()\n                .xApiVersion(\"0.0.1\")\n                .tag(\n                    new ArrayList<Optional<String>>(\n                        Arrays.asList(\"development\")\n                    )\n                )\n                .shallow(false)\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "eda5027b",
            "id": {
                "method": "GET",
                "path": "/metadata",
                "identifier_override": "endpoint_service.getMetadata"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.service.requests.GetMetadataRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMetadata(\n            GetMetadataRequest\n                .builder()\n                .xApiVersion(\"X-API-Version\")\n                .tag(\n                    new ArrayList<Optional<String>>(\n                        Arrays.asList(\"tag\")\n                    )\n                )\n                .shallow(true)\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.service.requests.GetMetadataRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().getMetadata(\n            GetMetadataRequest\n                .builder()\n                .xApiVersion(\"X-API-Version\")\n                .tag(\n                    new ArrayList<Optional<String>>(\n                        Arrays.asList(\"tag\")\n                    )\n                )\n                .shallow(true)\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "17737f3c",
            "id": {
                "method": "POST",
                "path": "/big-entity",
                "identifier_override": "endpoint_service.createBigEntity"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.commons.types.types.Data;\nimport com.seed.examples.resources.commons.types.types.EventInfo;\nimport com.seed.examples.resources.commons.types.types.Metadata;\nimport com.seed.examples.resources.types.types.Actor;\nimport com.seed.examples.resources.types.types.BigEntity;\nimport com.seed.examples.resources.types.types.CastMember;\nimport com.seed.examples.resources.types.types.Directory;\nimport com.seed.examples.resources.types.types.Entity;\nimport com.seed.examples.resources.types.types.Exception;\nimport com.seed.examples.resources.types.types.ExceptionInfo;\nimport com.seed.examples.resources.types.types.ExtendedMovie;\nimport com.seed.examples.resources.types.types.File;\nimport com.seed.examples.resources.types.types.Metadata;\nimport com.seed.examples.resources.types.types.Migration;\nimport com.seed.examples.resources.types.types.MigrationStatus;\nimport com.seed.examples.resources.types.types.Moment;\nimport com.seed.examples.resources.types.types.Node;\nimport com.seed.examples.resources.types.types.Test;\nimport com.seed.examples.resources.types.types.Tree;\nimport com.seed.examples.types.BasicType;\nimport com.seed.examples.types.Type;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().createBigEntity(\n            BigEntity\n                .builder()\n                .castMember(\n                    CastMember.ofActor(\n                        Actor\n                            .builder()\n                            .name(\"name\")\n                            .id(\"id\")\n                            .build()\n                    )\n                )\n                .extendedMovie(\n                    ExtendedMovie\n                        .builder()\n                        .id(\"id\")\n                        .title(\"title\")\n                        .from(\"from\")\n                        .rating(1.1)\n                        .type(\"movie\")\n                        .tag(\"tag\")\n                        .metadata(\n                            new HashMap<String, Object>() {{\n                                put(\"metadata\", new \n                                HashMap<String, Object>() {{put(\"key\", \"value\");\n                                }});\n                            }}\n                        )\n                        .revenue(1000000L)\n                        .cast(\n                            new ArrayList<String>(\n                                Arrays.asList(\"cast\", \"cast\")\n                            )\n                        )\n                        .prequel(\"prequel\")\n                        .book(\"book\")\n                        .build()\n                )\n                .entity(\n                    Entity\n                        .builder()\n                        .type(\n                            Type.ofBasicType(BasicType.PRIMITIVE)\n                        )\n                        .name(\"name\")\n                        .build()\n                )\n                .metadata(\n                    Metadata.html()\n                )\n                .commonMetadata(\n                    Metadata\n                        .builder()\n                        .id(\"id\")\n                        .data(\n                            new HashMap<String, String>() {{\n                                put(\"data\", \"data\");\n                            }}\n                        )\n                        .jsonString(\"jsonString\")\n                        .build()\n                )\n                .eventInfo(\n                    EventInfo.metadata(\n                        Metadata\n                            .builder()\n                            .id(\"id\")\n                            .data(\n                                new HashMap<String, String>() {{\n                                    put(\"data\", \"data\");\n                                }}\n                            )\n                            .jsonString(\"jsonString\")\n                            .build()\n                    )\n                )\n                .data(\n                    Data.string()\n                )\n                .migration(\n                    Migration\n                        .builder()\n                        .name(\"name\")\n                        .status(MigrationStatus.RUNNING)\n                        .build()\n                )\n                .exception(\n                    Exception.generic(\n                        ExceptionInfo\n                            .builder()\n                            .exceptionType(\"exceptionType\")\n                            .exceptionMessage(\"exceptionMessage\")\n                            .exceptionStacktrace(\"exceptionStacktrace\")\n                            .build()\n                    )\n                )\n                .test(\n                    Test.and()\n                )\n                .node(\n                    Node\n                        .builder()\n                        .name(\"name\")\n                        .nodes(\n                            new ArrayList<Node>(\n                                Arrays.asList(\n                                    Node\n                                        .builder()\n                                        .name(\"name\")\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .trees(\n                                            new ArrayList<Tree>(\n                                                Arrays.asList(\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build(),\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build(),\n                                    Node\n                                        .builder()\n                                        .name(\"name\")\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .trees(\n                                            new ArrayList<Tree>(\n                                                Arrays.asList(\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build(),\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                            )\n                        )\n                        .trees(\n                            new ArrayList<Tree>(\n                                Arrays.asList(\n                                    Tree\n                                        .builder()\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build(),\n                                    Tree\n                                        .builder()\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .directory(\n                    Directory\n                        .builder()\n                        .name(\"name\")\n                        .files(\n                            new ArrayList<File>(\n                                Arrays.asList(\n                                    File\n                                        .builder()\n                                        .name(\"name\")\n                                        .contents(\"contents\")\n                                        .build(),\n                                    File\n                                        .builder()\n                                        .name(\"name\")\n                                        .contents(\"contents\")\n                                        .build()\n                                )\n                            )\n                        )\n                        .directories(\n                            new ArrayList<Directory>(\n                                Arrays.asList(\n                                    Directory\n                                        .builder()\n                                        .name(\"name\")\n                                        .files(\n                                            new ArrayList<File>(\n                                                Arrays.asList(\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build(),\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .directories(\n                                            new ArrayList<Directory>(\n                                                Arrays.asList(\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build(),\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build(),\n                                    Directory\n                                        .builder()\n                                        .name(\"name\")\n                                        .files(\n                                            new ArrayList<File>(\n                                                Arrays.asList(\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build(),\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .directories(\n                                            new ArrayList<Directory>(\n                                                Arrays.asList(\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build(),\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .moment(\n                    Moment\n                        .builder()\n                        .id(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .date(\"2023-01-15\")\n                        .datetime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                        .build()\n                )\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.examples.SeedExamplesClient;\nimport com.seed.examples.resources.commons.types.types.Data;\nimport com.seed.examples.resources.commons.types.types.EventInfo;\nimport com.seed.examples.resources.commons.types.types.Metadata;\nimport com.seed.examples.resources.types.types.Actor;\nimport com.seed.examples.resources.types.types.BigEntity;\nimport com.seed.examples.resources.types.types.CastMember;\nimport com.seed.examples.resources.types.types.Directory;\nimport com.seed.examples.resources.types.types.Entity;\nimport com.seed.examples.resources.types.types.Exception;\nimport com.seed.examples.resources.types.types.ExceptionInfo;\nimport com.seed.examples.resources.types.types.ExtendedMovie;\nimport com.seed.examples.resources.types.types.File;\nimport com.seed.examples.resources.types.types.Metadata;\nimport com.seed.examples.resources.types.types.Migration;\nimport com.seed.examples.resources.types.types.MigrationStatus;\nimport com.seed.examples.resources.types.types.Moment;\nimport com.seed.examples.resources.types.types.Node;\nimport com.seed.examples.resources.types.types.Test;\nimport com.seed.examples.resources.types.types.Tree;\nimport com.seed.examples.types.BasicType;\nimport com.seed.examples.types.Type;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedExamplesClient client = SeedExamplesClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.service().createBigEntity(\n            BigEntity\n                .builder()\n                .castMember(\n                    CastMember.ofActor(\n                        Actor\n                            .builder()\n                            .name(\"name\")\n                            .id(\"id\")\n                            .build()\n                    )\n                )\n                .extendedMovie(\n                    ExtendedMovie\n                        .builder()\n                        .id(\"id\")\n                        .title(\"title\")\n                        .from(\"from\")\n                        .rating(1.1)\n                        .type(\"movie\")\n                        .tag(\"tag\")\n                        .metadata(\n                            new HashMap<String, Object>() {{\n                                put(\"metadata\", new \n                                HashMap<String, Object>() {{put(\"key\", \"value\");\n                                }});\n                            }}\n                        )\n                        .revenue(1000000L)\n                        .cast(\n                            new ArrayList<String>(\n                                Arrays.asList(\"cast\", \"cast\")\n                            )\n                        )\n                        .prequel(\"prequel\")\n                        .book(\"book\")\n                        .build()\n                )\n                .entity(\n                    Entity\n                        .builder()\n                        .type(\n                            Type.ofBasicType(BasicType.PRIMITIVE)\n                        )\n                        .name(\"name\")\n                        .build()\n                )\n                .metadata(\n                    Metadata.html()\n                )\n                .commonMetadata(\n                    Metadata\n                        .builder()\n                        .id(\"id\")\n                        .data(\n                            new HashMap<String, String>() {{\n                                put(\"data\", \"data\");\n                            }}\n                        )\n                        .jsonString(\"jsonString\")\n                        .build()\n                )\n                .eventInfo(\n                    EventInfo.metadata(\n                        Metadata\n                            .builder()\n                            .id(\"id\")\n                            .data(\n                                new HashMap<String, String>() {{\n                                    put(\"data\", \"data\");\n                                }}\n                            )\n                            .jsonString(\"jsonString\")\n                            .build()\n                    )\n                )\n                .data(\n                    Data.string()\n                )\n                .migration(\n                    Migration\n                        .builder()\n                        .name(\"name\")\n                        .status(MigrationStatus.RUNNING)\n                        .build()\n                )\n                .exception(\n                    Exception.generic(\n                        ExceptionInfo\n                            .builder()\n                            .exceptionType(\"exceptionType\")\n                            .exceptionMessage(\"exceptionMessage\")\n                            .exceptionStacktrace(\"exceptionStacktrace\")\n                            .build()\n                    )\n                )\n                .test(\n                    Test.and()\n                )\n                .node(\n                    Node\n                        .builder()\n                        .name(\"name\")\n                        .nodes(\n                            new ArrayList<Node>(\n                                Arrays.asList(\n                                    Node\n                                        .builder()\n                                        .name(\"name\")\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .trees(\n                                            new ArrayList<Tree>(\n                                                Arrays.asList(\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build(),\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build(),\n                                    Node\n                                        .builder()\n                                        .name(\"name\")\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .trees(\n                                            new ArrayList<Tree>(\n                                                Arrays.asList(\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build(),\n                                                    Tree\n                                                        .builder()\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                            )\n                        )\n                        .trees(\n                            new ArrayList<Tree>(\n                                Arrays.asList(\n                                    Tree\n                                        .builder()\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build(),\n                                    Tree\n                                        .builder()\n                                        .nodes(\n                                            new ArrayList<Node>(\n                                                Arrays.asList(\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build(),\n                                                    Node\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .nodes(\n                                                            new ArrayList<Node>()\n                                                        )\n                                                        .trees(\n                                                            new ArrayList<Tree>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .directory(\n                    Directory\n                        .builder()\n                        .name(\"name\")\n                        .files(\n                            new ArrayList<File>(\n                                Arrays.asList(\n                                    File\n                                        .builder()\n                                        .name(\"name\")\n                                        .contents(\"contents\")\n                                        .build(),\n                                    File\n                                        .builder()\n                                        .name(\"name\")\n                                        .contents(\"contents\")\n                                        .build()\n                                )\n                            )\n                        )\n                        .directories(\n                            new ArrayList<Directory>(\n                                Arrays.asList(\n                                    Directory\n                                        .builder()\n                                        .name(\"name\")\n                                        .files(\n                                            new ArrayList<File>(\n                                                Arrays.asList(\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build(),\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .directories(\n                                            new ArrayList<Directory>(\n                                                Arrays.asList(\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build(),\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build(),\n                                    Directory\n                                        .builder()\n                                        .name(\"name\")\n                                        .files(\n                                            new ArrayList<File>(\n                                                Arrays.asList(\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build(),\n                                                    File\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .contents(\"contents\")\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .directories(\n                                            new ArrayList<Directory>(\n                                                Arrays.asList(\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build(),\n                                                    Directory\n                                                        .builder()\n                                                        .name(\"name\")\n                                                        .files(\n                                                            new ArrayList<File>()\n                                                        )\n                                                        .directories(\n                                                            new ArrayList<Directory>()\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .moment(\n                    Moment\n                        .builder()\n                        .id(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .date(\"2023-01-15\")\n                        .datetime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                        .build()\n                )\n                .build()\n        );\n    }\n}\n"
            }
        }
    ],
    "types": {}
}