/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.examples.resources.types.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.examples.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StuntDouble.Builder.class)
public final class StuntDouble {
    private final String name;

    private final String actorOrActressId;

    private final Map<String, Object> additionalProperties;

    private StuntDouble(String name, String actorOrActressId, Map<String, Object> additionalProperties) {
        this.name = name;
        this.actorOrActressId = actorOrActressId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("actorOrActressId")
    public String getActorOrActressId() {
        return actorOrActressId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StuntDouble && equalTo((StuntDouble) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StuntDouble other) {
        return name.equals(other.name) && actorOrActressId.equals(other.actorOrActressId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.name, this.actorOrActressId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        ActorOrActressIdStage name(@NotNull String name);

        Builder from(StuntDouble other);
    }

    public interface ActorOrActressIdStage {
        _FinalStage actorOrActressId(@NotNull String actorOrActressId);
    }

    public interface _FinalStage {
        StuntDouble build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, ActorOrActressIdStage, _FinalStage {
        private String name;

        private String actorOrActressId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StuntDouble other) {
            name(other.getName());
            actorOrActressId(other.getActorOrActressId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public ActorOrActressIdStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("actorOrActressId")
        public _FinalStage actorOrActressId(@NotNull String actorOrActressId) {
            this.actorOrActressId = Objects.requireNonNull(actorOrActressId, "actorOrActressId must not be null");
            return this;
        }

        @java.lang.Override
        public StuntDouble build() {
            return new StuntDouble(name, actorOrActressId, additionalProperties);
        }
    }
}
