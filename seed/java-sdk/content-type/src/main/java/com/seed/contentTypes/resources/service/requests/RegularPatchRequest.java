/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.contentTypes.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.contentTypes.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RegularPatchRequest.Builder.class)
public final class RegularPatchRequest {
    private final Optional<String> field1;

    private final Optional<Integer> field2;

    private final Map<String, Object> additionalProperties;

    private RegularPatchRequest(
            Optional<String> field1, Optional<Integer> field2, Map<String, Object> additionalProperties) {
        this.field1 = field1;
        this.field2 = field2;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("field1")
    public Optional<String> getField1() {
        return field1;
    }

    @JsonProperty("field2")
    public Optional<Integer> getField2() {
        return field2;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RegularPatchRequest && equalTo((RegularPatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RegularPatchRequest other) {
        return field1.equals(other.field1) && field2.equals(other.field2);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.field1, this.field2);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> field1 = Optional.empty();

        private Optional<Integer> field2 = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RegularPatchRequest other) {
            field1(other.getField1());
            field2(other.getField2());
            return this;
        }

        @JsonSetter(value = "field1", nulls = Nulls.SKIP)
        public Builder field1(Optional<String> field1) {
            this.field1 = field1;
            return this;
        }

        public Builder field1(String field1) {
            this.field1 = Optional.ofNullable(field1);
            return this;
        }

        @JsonSetter(value = "field2", nulls = Nulls.SKIP)
        public Builder field2(Optional<Integer> field2) {
            this.field2 = field2;
            return this;
        }

        public Builder field2(Integer field2) {
            this.field2 = Optional.ofNullable(field2);
            return this;
        }

        public RegularPatchRequest build() {
            return new RegularPatchRequest(field1, field2, additionalProperties);
        }
    }
}
