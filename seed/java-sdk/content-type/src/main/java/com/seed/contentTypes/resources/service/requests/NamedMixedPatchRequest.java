/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.contentTypes.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.contentTypes.core.Nullable;
import com.seed.contentTypes.core.NullableNonemptyFilter;
import com.seed.contentTypes.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NamedMixedPatchRequest.Builder.class)
public final class NamedMixedPatchRequest {
    private final Optional<String> appId;

    private final Optional<String> instructions;

    private final Optional<Boolean> active;

    private final Map<String, Object> additionalProperties;

    private NamedMixedPatchRequest(
            Optional<String> appId,
            Optional<String> instructions,
            Optional<Boolean> active,
            Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.instructions = instructions;
        this.active = active;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("appId")
    public Optional<String> getAppId() {
        return appId;
    }

    @JsonIgnore
    public Optional<String> getInstructions() {
        if (instructions == null) {
            return Optional.empty();
        }
        return instructions;
    }

    @JsonIgnore
    public Optional<Boolean> getActive() {
        if (active == null) {
            return Optional.empty();
        }
        return active;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("instructions")
    private Optional<String> _getInstructions() {
        return instructions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("active")
    private Optional<Boolean> _getActive() {
        return active;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NamedMixedPatchRequest && equalTo((NamedMixedPatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NamedMixedPatchRequest other) {
        return appId.equals(other.appId) && instructions.equals(other.instructions) && active.equals(other.active);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.appId, this.instructions, this.active);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();

        private Optional<String> instructions = Optional.empty();

        private Optional<Boolean> active = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NamedMixedPatchRequest other) {
            appId(other.getAppId());
            instructions(other.getInstructions());
            active(other.getActive());
            return this;
        }

        @JsonSetter(value = "appId", nulls = Nulls.SKIP)
        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        @JsonSetter(value = "instructions", nulls = Nulls.SKIP)
        public Builder instructions(Optional<String> instructions) {
            this.instructions = instructions;
            return this;
        }

        public Builder instructions(String instructions) {
            this.instructions = Optional.ofNullable(instructions);
            return this;
        }

        public Builder instructions(Nullable<String> instructions) {
            if (instructions.isNull()) {
                this.instructions = null;
            } else if (instructions.isEmpty()) {
                this.instructions = Optional.empty();
            } else {
                this.instructions = Optional.of(instructions.get());
            }
            return this;
        }

        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public Builder active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        public Builder active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        public Builder active(Nullable<Boolean> active) {
            if (active.isNull()) {
                this.active = null;
            } else if (active.isEmpty()) {
                this.active = Optional.empty();
            } else {
                this.active = Optional.of(active.get());
            }
            return this;
        }

        public NamedMixedPatchRequest build() {
            return new NamedMixedPatchRequest(appId, instructions, active, additionalProperties);
        }
    }
}
