/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.contentTypes.resources.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.seed.contentTypes.core.ClientOptions;
import com.seed.contentTypes.core.MediaTypes;
import com.seed.contentTypes.core.ObjectMappers;
import com.seed.contentTypes.core.RequestOptions;
import com.seed.contentTypes.core.SeedContentTypesApiException;
import com.seed.contentTypes.core.SeedContentTypesException;
import com.seed.contentTypes.core.SeedContentTypesHttpResponse;
import com.seed.contentTypes.resources.service.requests.PatchComplexRequest;
import com.seed.contentTypes.resources.service.requests.PatchProxyRequest;
import com.seed.contentTypes.resources.service.requests.RegularPatchRequest;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawServiceClient {
    protected final ClientOptions clientOptions;

    public RawServiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public SeedContentTypesHttpResponse<Void> patch(PatchProxyRequest request) {
        return patch(request, null);
    }

    public SeedContentTypesHttpResponse<Void> patch(PatchProxyRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request),
                    MediaType.parse("application/merge-patch+json"));
        } catch (JsonProcessingException e) {
            throw new SeedContentTypesException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/merge-patch+json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedContentTypesHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedContentTypesApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedContentTypesException("Network error executing HTTP request", e);
        }
    }

    /**
     * Update with JSON merge patch - complex types.
     * This endpoint demonstrates the distinction between:
     * <ul>
     * <li>optional&lt;T&gt; fields (can be present or absent, but not null)</li>
     * <li>optional&lt;nullable&lt;T&gt;&gt; fields (can be present, absent, or null)</li>
     * </ul>
     */
    public SeedContentTypesHttpResponse<Void> patchComplex(String id) {
        return patchComplex(id, PatchComplexRequest.builder().build());
    }

    /**
     * Update with JSON merge patch - complex types.
     * This endpoint demonstrates the distinction between:
     * <ul>
     * <li>optional&lt;T&gt; fields (can be present or absent, but not null)</li>
     * <li>optional&lt;nullable&lt;T&gt;&gt; fields (can be present, absent, or null)</li>
     * </ul>
     */
    public SeedContentTypesHttpResponse<Void> patchComplex(String id, PatchComplexRequest request) {
        return patchComplex(id, request, null);
    }

    /**
     * Update with JSON merge patch - complex types.
     * This endpoint demonstrates the distinction between:
     * <ul>
     * <li>optional&lt;T&gt; fields (can be present or absent, but not null)</li>
     * <li>optional&lt;nullable&lt;T&gt;&gt; fields (can be present, absent, or null)</li>
     * </ul>
     */
    public SeedContentTypesHttpResponse<Void> patchComplex(
            String id, PatchComplexRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("complex")
                .addPathSegment(id)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request),
                    MediaType.parse("application/merge-patch+json"));
        } catch (JsonProcessingException e) {
            throw new SeedContentTypesException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/merge-patch+json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedContentTypesHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedContentTypesApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedContentTypesException("Network error executing HTTP request", e);
        }
    }

    /**
     * Regular PATCH endpoint without merge-patch semantics
     */
    public SeedContentTypesHttpResponse<Void> regularPatch(String id) {
        return regularPatch(id, RegularPatchRequest.builder().build());
    }

    /**
     * Regular PATCH endpoint without merge-patch semantics
     */
    public SeedContentTypesHttpResponse<Void> regularPatch(String id, RegularPatchRequest request) {
        return regularPatch(id, request, null);
    }

    /**
     * Regular PATCH endpoint without merge-patch semantics
     */
    public SeedContentTypesHttpResponse<Void> regularPatch(
            String id, RegularPatchRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("regular")
                .addPathSegment(id)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedContentTypesException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedContentTypesHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedContentTypesApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedContentTypesException("Network error executing HTTP request", e);
        }
    }
}
