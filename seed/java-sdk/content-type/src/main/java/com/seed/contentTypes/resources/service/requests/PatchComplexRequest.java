/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.contentTypes.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.contentTypes.core.Nullable;
import com.seed.contentTypes.core.NullableNonemptyFilter;
import com.seed.contentTypes.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PatchComplexRequest.Builder.class)
public final class PatchComplexRequest {
    private final Optional<String> name;

    private final Optional<Integer> age;

    private final Optional<Boolean> active;

    private final Optional<Map<String, Object>> metadata;

    private final Optional<List<String>> tags;

    private final Optional<String> email;

    private final Optional<String> nickname;

    private final Optional<String> bio;

    private final Optional<String> profileImageUrl;

    private final Optional<Map<String, Object>> settings;

    private final Map<String, Object> additionalProperties;

    private PatchComplexRequest(
            Optional<String> name,
            Optional<Integer> age,
            Optional<Boolean> active,
            Optional<Map<String, Object>> metadata,
            Optional<List<String>> tags,
            Optional<String> email,
            Optional<String> nickname,
            Optional<String> bio,
            Optional<String> profileImageUrl,
            Optional<Map<String, Object>> settings,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.age = age;
        this.active = active;
        this.metadata = metadata;
        this.tags = tags;
        this.email = email;
        this.nickname = nickname;
        this.bio = bio;
        this.profileImageUrl = profileImageUrl;
        this.settings = settings;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("age")
    public Optional<Integer> getAge() {
        return age;
    }

    @JsonProperty("active")
    public Optional<Boolean> getActive() {
        return active;
    }

    @JsonProperty("metadata")
    public Optional<Map<String, Object>> getMetadata() {
        return metadata;
    }

    @JsonProperty("tags")
    public Optional<List<String>> getTags() {
        return tags;
    }

    @JsonIgnore
    public Optional<String> getEmail() {
        if (email == null) {
            return Optional.empty();
        }
        return email;
    }

    @JsonIgnore
    public Optional<String> getNickname() {
        if (nickname == null) {
            return Optional.empty();
        }
        return nickname;
    }

    @JsonIgnore
    public Optional<String> getBio() {
        if (bio == null) {
            return Optional.empty();
        }
        return bio;
    }

    @JsonIgnore
    public Optional<String> getProfileImageUrl() {
        if (profileImageUrl == null) {
            return Optional.empty();
        }
        return profileImageUrl;
    }

    @JsonIgnore
    public Optional<Map<String, Object>> getSettings() {
        if (settings == null) {
            return Optional.empty();
        }
        return settings;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("email")
    private Optional<String> _getEmail() {
        return email;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nickname")
    private Optional<String> _getNickname() {
        return nickname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("bio")
    private Optional<String> _getBio() {
        return bio;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("profileImageUrl")
    private Optional<String> _getProfileImageUrl() {
        return profileImageUrl;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("settings")
    private Optional<Map<String, Object>> _getSettings() {
        return settings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PatchComplexRequest && equalTo((PatchComplexRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PatchComplexRequest other) {
        return name.equals(other.name)
                && age.equals(other.age)
                && active.equals(other.active)
                && metadata.equals(other.metadata)
                && tags.equals(other.tags)
                && email.equals(other.email)
                && nickname.equals(other.nickname)
                && bio.equals(other.bio)
                && profileImageUrl.equals(other.profileImageUrl)
                && settings.equals(other.settings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.age,
                this.active,
                this.metadata,
                this.tags,
                this.email,
                this.nickname,
                this.bio,
                this.profileImageUrl,
                this.settings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();

        private Optional<Integer> age = Optional.empty();

        private Optional<Boolean> active = Optional.empty();

        private Optional<Map<String, Object>> metadata = Optional.empty();

        private Optional<List<String>> tags = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> nickname = Optional.empty();

        private Optional<String> bio = Optional.empty();

        private Optional<String> profileImageUrl = Optional.empty();

        private Optional<Map<String, Object>> settings = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PatchComplexRequest other) {
            name(other.getName());
            age(other.getAge());
            active(other.getActive());
            metadata(other.getMetadata());
            tags(other.getTags());
            email(other.getEmail());
            nickname(other.getNickname());
            bio(other.getBio());
            profileImageUrl(other.getProfileImageUrl());
            settings(other.getSettings());
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "age", nulls = Nulls.SKIP)
        public Builder age(Optional<Integer> age) {
            this.age = age;
            return this;
        }

        public Builder age(Integer age) {
            this.age = Optional.ofNullable(age);
            return this;
        }

        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public Builder active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        public Builder active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<Map<String, Object>> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String, Object> metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Nullable<String> email) {
            if (email.isNull()) {
                this.email = null;
            } else if (email.isEmpty()) {
                this.email = Optional.empty();
            } else {
                this.email = Optional.of(email.get());
            }
            return this;
        }

        @JsonSetter(value = "nickname", nulls = Nulls.SKIP)
        public Builder nickname(Optional<String> nickname) {
            this.nickname = nickname;
            return this;
        }

        public Builder nickname(String nickname) {
            this.nickname = Optional.ofNullable(nickname);
            return this;
        }

        public Builder nickname(Nullable<String> nickname) {
            if (nickname.isNull()) {
                this.nickname = null;
            } else if (nickname.isEmpty()) {
                this.nickname = Optional.empty();
            } else {
                this.nickname = Optional.of(nickname.get());
            }
            return this;
        }

        @JsonSetter(value = "bio", nulls = Nulls.SKIP)
        public Builder bio(Optional<String> bio) {
            this.bio = bio;
            return this;
        }

        public Builder bio(String bio) {
            this.bio = Optional.ofNullable(bio);
            return this;
        }

        public Builder bio(Nullable<String> bio) {
            if (bio.isNull()) {
                this.bio = null;
            } else if (bio.isEmpty()) {
                this.bio = Optional.empty();
            } else {
                this.bio = Optional.of(bio.get());
            }
            return this;
        }

        @JsonSetter(value = "profileImageUrl", nulls = Nulls.SKIP)
        public Builder profileImageUrl(Optional<String> profileImageUrl) {
            this.profileImageUrl = profileImageUrl;
            return this;
        }

        public Builder profileImageUrl(String profileImageUrl) {
            this.profileImageUrl = Optional.ofNullable(profileImageUrl);
            return this;
        }

        public Builder profileImageUrl(Nullable<String> profileImageUrl) {
            if (profileImageUrl.isNull()) {
                this.profileImageUrl = null;
            } else if (profileImageUrl.isEmpty()) {
                this.profileImageUrl = Optional.empty();
            } else {
                this.profileImageUrl = Optional.of(profileImageUrl.get());
            }
            return this;
        }

        @JsonSetter(value = "settings", nulls = Nulls.SKIP)
        public Builder settings(Optional<Map<String, Object>> settings) {
            this.settings = settings;
            return this;
        }

        public Builder settings(Map<String, Object> settings) {
            this.settings = Optional.ofNullable(settings);
            return this;
        }

        public Builder settings(Nullable<Map<String, Object>> settings) {
            if (settings.isNull()) {
                this.settings = null;
            } else if (settings.isEmpty()) {
                this.settings = Optional.empty();
            } else {
                this.settings = Optional.of(settings.get());
            }
            return this;
        }

        public PatchComplexRequest build() {
            return new PatchComplexRequest(
                    name,
                    age,
                    active,
                    metadata,
                    tags,
                    email,
                    nickname,
                    bio,
                    profileImageUrl,
                    settings,
                    additionalProperties);
        }
    }
}
