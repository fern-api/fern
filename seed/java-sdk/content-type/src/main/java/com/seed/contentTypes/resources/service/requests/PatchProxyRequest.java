/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.contentTypes.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.contentTypes.core.Nullable;
import com.seed.contentTypes.core.NullableNonemptyFilter;
import com.seed.contentTypes.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PatchProxyRequest.Builder.class)
public final class PatchProxyRequest {
    private final Optional<String> application;

    private final Optional<Boolean> requireAuth;

    private final Map<String, Object> additionalProperties;

    private PatchProxyRequest(
            Optional<String> application, Optional<Boolean> requireAuth, Map<String, Object> additionalProperties) {
        this.application = application;
        this.requireAuth = requireAuth;
        this.additionalProperties = additionalProperties;
    }

    @JsonIgnore
    public Optional<String> getApplication() {
        if (application == null) {
            return Optional.empty();
        }
        return application;
    }

    @JsonIgnore
    public Optional<Boolean> getRequireAuth() {
        if (requireAuth == null) {
            return Optional.empty();
        }
        return requireAuth;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("application")
    private Optional<String> _getApplication() {
        return application;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("require_auth")
    private Optional<Boolean> _getRequireAuth() {
        return requireAuth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PatchProxyRequest && equalTo((PatchProxyRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PatchProxyRequest other) {
        return application.equals(other.application) && requireAuth.equals(other.requireAuth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.application, this.requireAuth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> application = Optional.empty();

        private Optional<Boolean> requireAuth = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PatchProxyRequest other) {
            application(other.getApplication());
            requireAuth(other.getRequireAuth());
            return this;
        }

        @JsonSetter(value = "application", nulls = Nulls.SKIP)
        public Builder application(Optional<String> application) {
            this.application = application;
            return this;
        }

        public Builder application(String application) {
            this.application = Optional.ofNullable(application);
            return this;
        }

        public Builder application(Nullable<String> application) {
            if (application.isNull()) {
                this.application = null;
            } else if (application.isEmpty()) {
                this.application = Optional.empty();
            } else {
                this.application = Optional.of(application.get());
            }
            return this;
        }

        @JsonSetter(value = "require_auth", nulls = Nulls.SKIP)
        public Builder requireAuth(Optional<Boolean> requireAuth) {
            this.requireAuth = requireAuth;
            return this;
        }

        public Builder requireAuth(Boolean requireAuth) {
            this.requireAuth = Optional.ofNullable(requireAuth);
            return this;
        }

        public Builder requireAuth(Nullable<Boolean> requireAuth) {
            if (requireAuth.isNull()) {
                this.requireAuth = null;
            } else if (requireAuth.isEmpty()) {
                this.requireAuth = Optional.empty();
            } else {
                this.requireAuth = Optional.of(requireAuth.get());
            }
            return this;
        }

        public PatchProxyRequest build() {
            return new PatchProxyRequest(application, requireAuth, additionalProperties);
        }
    }
}
