/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.contentTypes.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.contentTypes.core.Nullable;
import com.seed.contentTypes.core.NullableNonemptyFilter;
import com.seed.contentTypes.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OptionalMergePatchRequest.Builder.class)
public final class OptionalMergePatchRequest {
    private final String requiredField;

    private final Optional<String> optionalString;

    private final Optional<Integer> optionalInteger;

    private final Optional<Boolean> optionalBoolean;

    private final Optional<String> nullableString;

    private final Map<String, Object> additionalProperties;

    private OptionalMergePatchRequest(
            String requiredField,
            Optional<String> optionalString,
            Optional<Integer> optionalInteger,
            Optional<Boolean> optionalBoolean,
            Optional<String> nullableString,
            Map<String, Object> additionalProperties) {
        this.requiredField = requiredField;
        this.optionalString = optionalString;
        this.optionalInteger = optionalInteger;
        this.optionalBoolean = optionalBoolean;
        this.nullableString = nullableString;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("requiredField")
    public String getRequiredField() {
        return requiredField;
    }

    @JsonProperty("optionalString")
    public Optional<String> getOptionalString() {
        return optionalString;
    }

    @JsonProperty("optionalInteger")
    public Optional<Integer> getOptionalInteger() {
        return optionalInteger;
    }

    @JsonProperty("optionalBoolean")
    public Optional<Boolean> getOptionalBoolean() {
        return optionalBoolean;
    }

    @JsonIgnore
    public Optional<String> getNullableString() {
        if (nullableString == null) {
            return Optional.empty();
        }
        return nullableString;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableString")
    private Optional<String> _getNullableString() {
        return nullableString;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OptionalMergePatchRequest && equalTo((OptionalMergePatchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OptionalMergePatchRequest other) {
        return requiredField.equals(other.requiredField)
                && optionalString.equals(other.optionalString)
                && optionalInteger.equals(other.optionalInteger)
                && optionalBoolean.equals(other.optionalBoolean)
                && nullableString.equals(other.nullableString);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.requiredField,
                this.optionalString,
                this.optionalInteger,
                this.optionalBoolean,
                this.nullableString);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RequiredFieldStage builder() {
        return new Builder();
    }

    public interface RequiredFieldStage {
        _FinalStage requiredField(@NotNull String requiredField);

        Builder from(OptionalMergePatchRequest other);
    }

    public interface _FinalStage {
        OptionalMergePatchRequest build();

        _FinalStage optionalString(Optional<String> optionalString);

        _FinalStage optionalString(String optionalString);

        _FinalStage optionalInteger(Optional<Integer> optionalInteger);

        _FinalStage optionalInteger(Integer optionalInteger);

        _FinalStage optionalBoolean(Optional<Boolean> optionalBoolean);

        _FinalStage optionalBoolean(Boolean optionalBoolean);

        _FinalStage nullableString(Optional<String> nullableString);

        _FinalStage nullableString(String nullableString);

        _FinalStage nullableString(Nullable<String> nullableString);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RequiredFieldStage, _FinalStage {
        private String requiredField;

        private Optional<String> nullableString = Optional.empty();

        private Optional<Boolean> optionalBoolean = Optional.empty();

        private Optional<Integer> optionalInteger = Optional.empty();

        private Optional<String> optionalString = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OptionalMergePatchRequest other) {
            requiredField(other.getRequiredField());
            optionalString(other.getOptionalString());
            optionalInteger(other.getOptionalInteger());
            optionalBoolean(other.getOptionalBoolean());
            nullableString(other.getNullableString());
            return this;
        }

        @java.lang.Override
        @JsonSetter("requiredField")
        public _FinalStage requiredField(@NotNull String requiredField) {
            this.requiredField = Objects.requireNonNull(requiredField, "requiredField must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableString(Nullable<String> nullableString) {
            if (nullableString.isNull()) {
                this.nullableString = null;
            } else if (nullableString.isEmpty()) {
                this.nullableString = Optional.empty();
            } else {
                this.nullableString = Optional.of(nullableString.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableString(String nullableString) {
            this.nullableString = Optional.ofNullable(nullableString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableString", nulls = Nulls.SKIP)
        public _FinalStage nullableString(Optional<String> nullableString) {
            this.nullableString = nullableString;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalBoolean(Boolean optionalBoolean) {
            this.optionalBoolean = Optional.ofNullable(optionalBoolean);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalBoolean", nulls = Nulls.SKIP)
        public _FinalStage optionalBoolean(Optional<Boolean> optionalBoolean) {
            this.optionalBoolean = optionalBoolean;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalInteger(Integer optionalInteger) {
            this.optionalInteger = Optional.ofNullable(optionalInteger);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalInteger", nulls = Nulls.SKIP)
        public _FinalStage optionalInteger(Optional<Integer> optionalInteger) {
            this.optionalInteger = optionalInteger;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalString(String optionalString) {
            this.optionalString = Optional.ofNullable(optionalString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalString", nulls = Nulls.SKIP)
        public _FinalStage optionalString(Optional<String> optionalString) {
            this.optionalString = optionalString;
            return this;
        }

        @java.lang.Override
        public OptionalMergePatchRequest build() {
            return new OptionalMergePatchRequest(
                    requiredField,
                    optionalString,
                    optionalInteger,
                    optionalBoolean,
                    nullableString,
                    additionalProperties);
        }
    }
}
