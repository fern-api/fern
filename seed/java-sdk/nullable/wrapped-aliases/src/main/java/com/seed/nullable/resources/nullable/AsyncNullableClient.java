/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullable.resources.nullable;

import com.seed.nullable.core.ClientOptions;
import com.seed.nullable.core.RequestOptions;
import com.seed.nullable.resources.nullable.requests.CreateUserRequest;
import com.seed.nullable.resources.nullable.requests.DeleteUserRequest;
import com.seed.nullable.resources.nullable.requests.GetUsersRequest;
import com.seed.nullable.resources.nullable.types.User;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncNullableClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawNullableClient rawClient;

    public AsyncNullableClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawNullableClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawNullableClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<List<User>> getUsers() {
        return this.rawClient.getUsers().thenApply(response -> response.body());
    }

    public CompletableFuture<List<User>> getUsers(GetUsersRequest request) {
        return this.rawClient.getUsers(request).thenApply(response -> response.body());
    }

    public CompletableFuture<List<User>> getUsers(GetUsersRequest request, RequestOptions requestOptions) {
        return this.rawClient.getUsers(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<User> createUser(CreateUserRequest request) {
        return this.rawClient.createUser(request).thenApply(response -> response.body());
    }

    public CompletableFuture<User> createUser(CreateUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.createUser(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Boolean> deleteUser() {
        return this.rawClient.deleteUser().thenApply(response -> response.body());
    }

    public CompletableFuture<Boolean> deleteUser(DeleteUserRequest request) {
        return this.rawClient.deleteUser(request).thenApply(response -> response.body());
    }

    public CompletableFuture<Boolean> deleteUser(DeleteUserRequest request, RequestOptions requestOptions) {
        return this.rawClient.deleteUser(request, requestOptions).thenApply(response -> response.body());
    }
}
