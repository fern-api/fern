/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullable.resources.nullable.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullable.core.Nullable;
import com.seed.nullable.core.NullableNonemptyFilter;
import com.seed.nullable.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = User.Builder.class)
public final class User {
    private final String name;

    private final UserId id;

    private final Optional<List<String>> tags;

    private final Optional<Metadata> metadata;

    private final Email email;

    private final WeirdNumber favoriteNumber;

    private final Optional<List<Integer>> numbers;

    private final Optional<Map<String, Object>> strings;

    private final Map<String, Object> additionalProperties;

    private User(
            String name,
            UserId id,
            Optional<List<String>> tags,
            Optional<Metadata> metadata,
            Email email,
            WeirdNumber favoriteNumber,
            Optional<List<Integer>> numbers,
            Optional<Map<String, Object>> strings,
            Map<String, Object> additionalProperties) {
        this.name = name;
        this.id = id;
        this.tags = tags;
        this.metadata = metadata;
        this.email = email;
        this.favoriteNumber = favoriteNumber;
        this.numbers = numbers;
        this.strings = strings;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("id")
    public UserId getId() {
        return id;
    }

    @JsonIgnore
    public Optional<List<String>> getTags() {
        if (tags == null) {
            return Optional.empty();
        }
        return tags;
    }

    @JsonIgnore
    public Optional<Metadata> getMetadata() {
        if (metadata == null) {
            return Optional.empty();
        }
        return metadata;
    }

    @JsonIgnore
    public Email getEmail() {
        if (email == null) {
            return Email.of(Optional.empty());
        }
        return email;
    }

    @JsonProperty("favorite-number")
    public WeirdNumber getFavoriteNumber() {
        return favoriteNumber;
    }

    @JsonIgnore
    public Optional<List<Integer>> getNumbers() {
        if (numbers == null) {
            return Optional.empty();
        }
        return numbers;
    }

    @JsonIgnore
    public Optional<Map<String, Object>> getStrings() {
        if (strings == null) {
            return Optional.empty();
        }
        return strings;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tags")
    private Optional<List<String>> _getTags() {
        return tags;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("metadata")
    private Optional<Metadata> _getMetadata() {
        return metadata;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("email")
    private Email _getEmail() {
        return email;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("numbers")
    private Optional<List<Integer>> _getNumbers() {
        return numbers;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("strings")
    private Optional<Map<String, Object>> _getStrings() {
        return strings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof User && equalTo((User) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(User other) {
        return name.equals(other.name)
                && id.equals(other.id)
                && tags.equals(other.tags)
                && metadata.equals(other.metadata)
                && email.equals(other.email)
                && favoriteNumber.equals(other.favoriteNumber)
                && numbers.equals(other.numbers)
                && strings.equals(other.strings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.name,
                this.id,
                this.tags,
                this.metadata,
                this.email,
                this.favoriteNumber,
                this.numbers,
                this.strings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NameStage builder() {
        return new Builder();
    }

    public interface NameStage {
        IdStage name(@NotNull String name);

        Builder from(User other);
    }

    public interface IdStage {
        EmailStage id(@NotNull UserId id);
    }

    public interface EmailStage {
        FavoriteNumberStage email(@NotNull Email email);

        FavoriteNumberStage email(Nullable<Email> email);
    }

    public interface FavoriteNumberStage {
        _FinalStage favoriteNumber(@NotNull WeirdNumber favoriteNumber);
    }

    public interface _FinalStage {
        User build();

        _FinalStage tags(Optional<List<String>> tags);

        _FinalStage tags(List<String> tags);

        _FinalStage tags(Nullable<List<String>> tags);

        _FinalStage metadata(Optional<Metadata> metadata);

        _FinalStage metadata(Metadata metadata);

        _FinalStage metadata(Nullable<Metadata> metadata);

        _FinalStage numbers(Optional<List<Integer>> numbers);

        _FinalStage numbers(List<Integer> numbers);

        _FinalStage numbers(Nullable<List<Integer>> numbers);

        _FinalStage strings(Optional<Map<String, Object>> strings);

        _FinalStage strings(Map<String, Object> strings);

        _FinalStage strings(Nullable<Map<String, Object>> strings);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NameStage, IdStage, EmailStage, FavoriteNumberStage, _FinalStage {
        private String name;

        private UserId id;

        private Email email;

        private WeirdNumber favoriteNumber;

        private Optional<Map<String, Object>> strings = Optional.empty();

        private Optional<List<Integer>> numbers = Optional.empty();

        private Optional<Metadata> metadata = Optional.empty();

        private Optional<List<String>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(User other) {
            name(other.getName());
            id(other.getId());
            tags(other.getTags());
            metadata(other.getMetadata());
            email(other.getEmail());
            favoriteNumber(other.getFavoriteNumber());
            numbers(other.getNumbers());
            strings(other.getStrings());
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public IdStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public EmailStage id(@NotNull UserId id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        public FavoriteNumberStage email(Nullable<Email> email) {
            if (email.isNull()) {
                this.email = null;
            } else if (email.isEmpty()) {
                this.email = Email.of(Optional.empty());
            } else {
                this.email = email.get();
            }
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public FavoriteNumberStage email(@NotNull Email email) {
            this.email = Objects.requireNonNull(email, "email must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("favorite-number")
        public _FinalStage favoriteNumber(@NotNull WeirdNumber favoriteNumber) {
            this.favoriteNumber = Objects.requireNonNull(favoriteNumber, "favoriteNumber must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage strings(Nullable<Map<String, Object>> strings) {
            if (strings.isNull()) {
                this.strings = null;
            } else if (strings.isEmpty()) {
                this.strings = Optional.empty();
            } else {
                this.strings = Optional.of(strings.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage strings(Map<String, Object> strings) {
            this.strings = Optional.ofNullable(strings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "strings", nulls = Nulls.SKIP)
        public _FinalStage strings(Optional<Map<String, Object>> strings) {
            this.strings = strings;
            return this;
        }

        @java.lang.Override
        public _FinalStage numbers(Nullable<List<Integer>> numbers) {
            if (numbers.isNull()) {
                this.numbers = null;
            } else if (numbers.isEmpty()) {
                this.numbers = Optional.empty();
            } else {
                this.numbers = Optional.of(numbers.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage numbers(List<Integer> numbers) {
            this.numbers = Optional.ofNullable(numbers);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "numbers", nulls = Nulls.SKIP)
        public _FinalStage numbers(Optional<List<Integer>> numbers) {
            this.numbers = numbers;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(Nullable<Metadata> metadata) {
            if (metadata.isNull()) {
                this.metadata = null;
            } else if (metadata.isEmpty()) {
                this.metadata = Optional.empty();
            } else {
                this.metadata = Optional.of(metadata.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(Metadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage tags(Nullable<List<String>> tags) {
            if (tags.isNull()) {
                this.tags = null;
            } else if (tags.isEmpty()) {
                this.tags = Optional.empty();
            } else {
                this.tags = Optional.of(tags.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        @java.lang.Override
        public User build() {
            return new User(name, id, tags, metadata, email, favoriteNumber, numbers, strings, additionalProperties);
        }
    }
}
