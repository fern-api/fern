/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullable.resources.nullable.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullable.core.Nullable;
import com.seed.nullable.core.NullableNonemptyFilter;
import com.seed.nullable.core.ObjectMappers;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetUsersRequest.Builder.class)
public final class GetUsersRequest {
    private final Optional<List<String>> usernames;

    private final Optional<List<Boolean>> activated;

    private final Optional<List<String>> tags;

    private final Optional<String> avatar;

    private final Optional<Boolean> extra;

    private final Map<String, Object> additionalProperties;

    private GetUsersRequest(
            Optional<List<String>> usernames,
            Optional<List<Boolean>> activated,
            Optional<List<String>> tags,
            Optional<String> avatar,
            Optional<Boolean> extra,
            Map<String, Object> additionalProperties) {
        this.usernames = usernames;
        this.activated = activated;
        this.tags = tags;
        this.avatar = avatar;
        this.extra = extra;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("usernames")
    public Optional<List<String>> getUsernames() {
        return usernames;
    }

    @JsonProperty("activated")
    public Optional<List<Boolean>> getActivated() {
        return activated;
    }

    @JsonIgnore
    public Optional<List<String>> getTags() {
        if (tags == null) {
            return Optional.empty();
        }
        return tags;
    }

    @JsonProperty("avatar")
    public Optional<String> getAvatar() {
        return avatar;
    }

    @JsonIgnore
    public Optional<Boolean> getExtra() {
        if (extra == null) {
            return Optional.empty();
        }
        return extra;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tags")
    private Optional<List<String>> _getTags() {
        return tags;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("extra")
    private Optional<Boolean> _getExtra() {
        return extra;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetUsersRequest && equalTo((GetUsersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetUsersRequest other) {
        return usernames.equals(other.usernames)
                && activated.equals(other.activated)
                && tags.equals(other.tags)
                && avatar.equals(other.avatar)
                && extra.equals(other.extra);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.usernames, this.activated, this.tags, this.avatar, this.extra);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> usernames = Optional.empty();

        private Optional<List<Boolean>> activated = Optional.empty();

        private Optional<List<String>> tags = Optional.empty();

        private Optional<String> avatar = Optional.empty();

        private Optional<Boolean> extra = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetUsersRequest other) {
            usernames(other.getUsernames());
            activated(other.getActivated());
            tags(other.getTags());
            avatar(other.getAvatar());
            extra(other.getExtra());
            return this;
        }

        @JsonSetter(value = "usernames", nulls = Nulls.SKIP)
        public Builder usernames(Optional<List<String>> usernames) {
            this.usernames = usernames;
            return this;
        }

        public Builder usernames(List<String> usernames) {
            this.usernames = Optional.ofNullable(usernames);
            return this;
        }

        public Builder usernames(String usernames) {
            this.usernames = Optional.of(Collections.singletonList(usernames));
            return this;
        }

        @JsonSetter(value = "activated", nulls = Nulls.SKIP)
        public Builder activated(Optional<List<Boolean>> activated) {
            this.activated = activated;
            return this;
        }

        public Builder activated(List<Boolean> activated) {
            this.activated = Optional.ofNullable(activated);
            return this;
        }

        public Builder activated(Boolean activated) {
            this.activated = Optional.of(Collections.singletonList(activated));
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Nullable<List<String>> tags) {
            if (tags.isNull()) {
                this.tags = null;
            } else if (tags.isEmpty()) {
                this.tags = Optional.empty();
            } else {
                this.tags = Optional.of(tags.get());
            }
            return this;
        }

        public Builder tags(String tags) {
            this.tags = Optional.of(Collections.singletonList(tags));
            return this;
        }

        @JsonSetter(value = "avatar", nulls = Nulls.SKIP)
        public Builder avatar(Optional<String> avatar) {
            this.avatar = avatar;
            return this;
        }

        public Builder avatar(String avatar) {
            this.avatar = Optional.ofNullable(avatar);
            return this;
        }

        @JsonSetter(value = "extra", nulls = Nulls.SKIP)
        public Builder extra(Optional<Boolean> extra) {
            this.extra = extra;
            return this;
        }

        public Builder extra(Boolean extra) {
            this.extra = Optional.ofNullable(extra);
            return this;
        }

        public Builder extra(Nullable<Boolean> extra) {
            if (extra.isNull()) {
                this.extra = null;
            } else if (extra.isEmpty()) {
                this.extra = Optional.empty();
            } else {
                this.extra = Optional.of(extra.get());
            }
            return this;
        }

        public GetUsersRequest build() {
            return new GetUsersRequest(usernames, activated, tags, avatar, extra, additionalProperties);
        }
    }
}
