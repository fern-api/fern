/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullable.resources.nullable.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullable.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Metadata.Builder.class)
public final class Metadata {
    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<String> avatar;

    private final Optional<Boolean> activated;

    private final Map<String, Object> additionalProperties;

    private Metadata(
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<String> avatar,
            Optional<Boolean> activated,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.avatar = avatar;
        this.activated = activated;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("avatar")
    public Optional<String> getAvatar() {
        return avatar;
    }

    @JsonProperty("activated")
    public Optional<Boolean> getActivated() {
        return activated;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Metadata && equalTo((Metadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Metadata other) {
        return createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && avatar.equals(other.avatar)
                && activated.equals(other.activated);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.createdAt, this.updatedAt, this.avatar, this.activated);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CreatedAtStage builder() {
        return new Builder();
    }

    public interface CreatedAtStage {
        UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt);

        Builder from(Metadata other);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        Metadata build();

        _FinalStage avatar(Optional<String> avatar);

        _FinalStage avatar(String avatar);

        _FinalStage activated(Optional<Boolean> activated);

        _FinalStage activated(Boolean activated);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CreatedAtStage, UpdatedAtStage, _FinalStage {
        private OffsetDateTime createdAt;

        private OffsetDateTime updatedAt;

        private Optional<Boolean> activated = Optional.empty();

        private Optional<String> avatar = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Metadata other) {
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            avatar(other.getAvatar());
            activated(other.getActivated());
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public UpdatedAtStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@NotNull OffsetDateTime updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt, "updatedAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage activated(Boolean activated) {
            this.activated = Optional.ofNullable(activated);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "activated", nulls = Nulls.SKIP)
        public _FinalStage activated(Optional<Boolean> activated) {
            this.activated = activated;
            return this;
        }

        @java.lang.Override
        public _FinalStage avatar(String avatar) {
            this.avatar = Optional.ofNullable(avatar);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "avatar", nulls = Nulls.SKIP)
        public _FinalStage avatar(Optional<String> avatar) {
            this.avatar = avatar;
            return this;
        }

        @java.lang.Override
        public Metadata build() {
            return new Metadata(createdAt, updatedAt, avatar, activated, additionalProperties);
        }
    }
}
