/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullable.resources.nullable.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullable.core.ObjectMappers;
import com.seed.nullable.resources.nullable.types.Metadata;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateUserRequest.Builder.class)
public final class CreateUserRequest {
    private final String username;

    private final Optional<List<String>> tags;

    private final Optional<Metadata> metadata;

    private final Optional<String> avatar;

    private final Map<String, Object> additionalProperties;

    private CreateUserRequest(
            String username,
            Optional<List<String>> tags,
            Optional<Metadata> metadata,
            Optional<String> avatar,
            Map<String, Object> additionalProperties) {
        this.username = username;
        this.tags = tags;
        this.metadata = metadata;
        this.avatar = avatar;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("username")
    public String getUsername() {
        return username;
    }

    @JsonProperty("tags")
    public Optional<List<String>> getTags() {
        return tags;
    }

    @JsonProperty("metadata")
    public Optional<Metadata> getMetadata() {
        return metadata;
    }

    @JsonProperty("avatar")
    public Optional<String> getAvatar() {
        return avatar;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateUserRequest && equalTo((CreateUserRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateUserRequest other) {
        return username.equals(other.username)
                && tags.equals(other.tags)
                && metadata.equals(other.metadata)
                && avatar.equals(other.avatar);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.username, this.tags, this.metadata, this.avatar);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UsernameStage builder() {
        return new Builder();
    }

    public interface UsernameStage {
        _FinalStage username(@NotNull String username);

        Builder from(CreateUserRequest other);
    }

    public interface _FinalStage {
        CreateUserRequest build();

        _FinalStage tags(Optional<List<String>> tags);

        _FinalStage tags(List<String> tags);

        _FinalStage metadata(Optional<Metadata> metadata);

        _FinalStage metadata(Metadata metadata);

        _FinalStage avatar(Optional<String> avatar);

        _FinalStage avatar(String avatar);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UsernameStage, _FinalStage {
        private String username;

        private Optional<String> avatar = Optional.empty();

        private Optional<Metadata> metadata = Optional.empty();

        private Optional<List<String>> tags = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateUserRequest other) {
            username(other.getUsername());
            tags(other.getTags());
            metadata(other.getMetadata());
            avatar(other.getAvatar());
            return this;
        }

        @java.lang.Override
        @JsonSetter("username")
        public _FinalStage username(@NotNull String username) {
            this.username = Objects.requireNonNull(username, "username must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage avatar(String avatar) {
            this.avatar = Optional.ofNullable(avatar);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "avatar", nulls = Nulls.SKIP)
        public _FinalStage avatar(Optional<String> avatar) {
            this.avatar = avatar;
            return this;
        }

        @java.lang.Override
        public _FinalStage metadata(Metadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public _FinalStage metadata(Optional<Metadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        @java.lang.Override
        public CreateUserRequest build() {
            return new CreateUserRequest(username, tags, metadata, avatar, additionalProperties);
        }
    }
}
