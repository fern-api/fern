/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.errors.resources.simple;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.seed.errors.core.ClientOptions;
import com.seed.errors.core.MediaTypes;
import com.seed.errors.core.ObjectMappers;
import com.seed.errors.core.RequestOptions;
import com.seed.errors.core.SeedErrorsApiException;
import com.seed.errors.core.SeedErrorsException;
import com.seed.errors.core.SeedErrorsHttpResponse;
import com.seed.errors.resources.commons.errors.BadRequestError;
import com.seed.errors.resources.commons.errors.InternalServerError;
import com.seed.errors.resources.commons.errors.NotFoundError;
import com.seed.errors.resources.commons.types.ErrorBody;
import com.seed.errors.resources.simple.errors.FooTooLittle;
import com.seed.errors.resources.simple.errors.FooTooMuch;
import com.seed.errors.resources.simple.types.FooRequest;
import com.seed.errors.resources.simple.types.FooResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawSimpleClient {
    protected final ClientOptions clientOptions;

    public RawSimpleClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public SeedErrorsHttpResponse<FooResponse> fooWithoutEndpointError(FooRequest request) {
        return fooWithoutEndpointError(request, null);
    }

    public SeedErrorsHttpResponse<FooResponse> fooWithoutEndpointError(
            FooRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("foo1")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedErrorsException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedErrorsHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FooResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new SeedErrorsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedErrorsException("Network error executing HTTP request", e);
        }
    }

    public SeedErrorsHttpResponse<FooResponse> foo(FooRequest request) {
        return foo(request, null);
    }

    public SeedErrorsHttpResponse<FooResponse> foo(FooRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("foo2")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedErrorsException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedErrorsHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FooResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 429:
                        throw new FooTooMuch(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 500:
                        throw new FooTooLittle(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new SeedErrorsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedErrorsException("Network error executing HTTP request", e);
        }
    }

    public SeedErrorsHttpResponse<FooResponse> fooWithExamples(FooRequest request) {
        return fooWithExamples(request, null);
    }

    public SeedErrorsHttpResponse<FooResponse> fooWithExamples(FooRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("foo3")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedErrorsException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedErrorsHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), FooResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 404:
                        throw new NotFoundError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 429:
                        throw new FooTooMuch(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 500:
                        throw new FooTooLittle(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, ErrorBody.class), response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new SeedErrorsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedErrorsException("Network error executing HTTP request", e);
        }
    }
}
