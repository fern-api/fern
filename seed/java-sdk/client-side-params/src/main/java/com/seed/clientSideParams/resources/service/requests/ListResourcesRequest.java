/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListResourcesRequest.Builder.class)
public final class ListResourcesRequest {
    private final int page;

    private final Optional<Integer> perPage;

    private final Optional<String> sort;

    private final Optional<String> order;

    private final Optional<Boolean> includeTotals;

    private final Optional<String> fields;

    private final Optional<String> search;

    private final Map<String, Object> additionalProperties;

    private ListResourcesRequest(
            int page,
            Optional<Integer> perPage,
            Optional<String> sort,
            Optional<String> order,
            Optional<Boolean> includeTotals,
            Optional<String> fields,
            Optional<String> search,
            Map<String, Object> additionalProperties) {
        this.page = page;
        this.perPage = perPage;
        this.sort = sort;
        this.order = order;
        this.includeTotals = includeTotals;
        this.fields = fields;
        this.search = search;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Zero-indexed page number
     */
    @JsonProperty("page")
    public int getPage() {
        return page;
    }

    /**
     * @return Number of items per page
     */
    @JsonProperty("per_page")
    public Optional<Integer> getPerPage() {
        return perPage;
    }

    /**
     * @return Sort field
     */
    @JsonProperty("sort")
    public Optional<String> getSort() {
        return sort;
    }

    /**
     * @return Sort order (asc or desc)
     */
    @JsonProperty("order")
    public Optional<String> getOrder() {
        return order;
    }

    /**
     * @return Whether to include total count
     */
    @JsonProperty("include_totals")
    public Optional<Boolean> getIncludeTotals() {
        return includeTotals;
    }

    /**
     * @return Comma-separated list of fields to include
     */
    @JsonProperty("fields")
    public Optional<String> getFields() {
        return fields;
    }

    /**
     * @return Search query
     */
    @JsonProperty("search")
    public Optional<String> getSearch() {
        return search;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListResourcesRequest && equalTo((ListResourcesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListResourcesRequest other) {
        return page == other.page
                && perPage.equals(other.perPage)
                && sort.equals(other.sort)
                && order.equals(other.order)
                && includeTotals.equals(other.includeTotals)
                && fields.equals(other.fields)
                && search.equals(other.search);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.page, this.perPage, this.sort, this.order, this.includeTotals, this.fields, this.search);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PageStage builder() {
        return new Builder();
    }

    public interface PageStage {
        /**
         * <p>Zero-indexed page number</p>
         */
        _FinalStage page(int page);

        Builder from(ListResourcesRequest other);
    }

    public interface _FinalStage {
        ListResourcesRequest build();

        /**
         * <p>Number of items per page</p>
         */
        _FinalStage perPage(Optional<Integer> perPage);

        _FinalStage perPage(Integer perPage);

        /**
         * <p>Sort field</p>
         */
        _FinalStage sort(Optional<String> sort);

        _FinalStage sort(String sort);

        /**
         * <p>Sort order (asc or desc)</p>
         */
        _FinalStage order(Optional<String> order);

        _FinalStage order(String order);

        /**
         * <p>Whether to include total count</p>
         */
        _FinalStage includeTotals(Optional<Boolean> includeTotals);

        _FinalStage includeTotals(Boolean includeTotals);

        /**
         * <p>Comma-separated list of fields to include</p>
         */
        _FinalStage fields(Optional<String> fields);

        _FinalStage fields(String fields);

        /**
         * <p>Search query</p>
         */
        _FinalStage search(Optional<String> search);

        _FinalStage search(String search);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PageStage, _FinalStage {
        private int page;

        private Optional<String> search = Optional.empty();

        private Optional<String> fields = Optional.empty();

        private Optional<Boolean> includeTotals = Optional.empty();

        private Optional<String> order = Optional.empty();

        private Optional<String> sort = Optional.empty();

        private Optional<Integer> perPage = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ListResourcesRequest other) {
            page(other.getPage());
            perPage(other.getPerPage());
            sort(other.getSort());
            order(other.getOrder());
            includeTotals(other.getIncludeTotals());
            fields(other.getFields());
            search(other.getSearch());
            return this;
        }

        /**
         * <p>Zero-indexed page number</p>
         * <p>Zero-indexed page number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("page")
        public _FinalStage page(int page) {
            this.page = page;
            return this;
        }

        /**
         * <p>Search query</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage search(String search) {
            this.search = Optional.ofNullable(search);
            return this;
        }

        /**
         * <p>Search query</p>
         */
        @java.lang.Override
        @JsonSetter(value = "search", nulls = Nulls.SKIP)
        public _FinalStage search(Optional<String> search) {
            this.search = search;
            return this;
        }

        /**
         * <p>Comma-separated list of fields to include</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage fields(String fields) {
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * <p>Comma-separated list of fields to include</p>
         */
        @java.lang.Override
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public _FinalStage fields(Optional<String> fields) {
            this.fields = fields;
            return this;
        }

        /**
         * <p>Whether to include total count</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage includeTotals(Boolean includeTotals) {
            this.includeTotals = Optional.ofNullable(includeTotals);
            return this;
        }

        /**
         * <p>Whether to include total count</p>
         */
        @java.lang.Override
        @JsonSetter(value = "include_totals", nulls = Nulls.SKIP)
        public _FinalStage includeTotals(Optional<Boolean> includeTotals) {
            this.includeTotals = includeTotals;
            return this;
        }

        /**
         * <p>Sort order (asc or desc)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage order(String order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * <p>Sort order (asc or desc)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public _FinalStage order(Optional<String> order) {
            this.order = order;
            return this;
        }

        /**
         * <p>Sort field</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage sort(String sort) {
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * <p>Sort field</p>
         */
        @java.lang.Override
        @JsonSetter(value = "sort", nulls = Nulls.SKIP)
        public _FinalStage sort(Optional<String> sort) {
            this.sort = sort;
            return this;
        }

        /**
         * <p>Number of items per page</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage perPage(Integer perPage) {
            this.perPage = Optional.ofNullable(perPage);
            return this;
        }

        /**
         * <p>Number of items per page</p>
         */
        @java.lang.Override
        @JsonSetter(value = "per_page", nulls = Nulls.SKIP)
        public _FinalStage perPage(Optional<Integer> perPage) {
            this.perPage = perPage;
            return this;
        }

        @java.lang.Override
        public ListResourcesRequest build() {
            return new ListResourcesRequest(
                    page, perPage, sort, order, includeTotals, fields, search, additionalProperties);
        }
    }
}
