/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchResourcesRequest.Builder.class)
public final class SearchResourcesRequest {
    private final Optional<Integer> limit;

    private final Optional<Integer> offset;

    private final String query;

    private final Optional<Map<String, Object>> filters;

    private final Map<String, Object> additionalProperties;

    private SearchResourcesRequest(
            Optional<Integer> limit,
            Optional<Integer> offset,
            String query,
            Optional<Map<String, Object>> filters,
            Map<String, Object> additionalProperties) {
        this.limit = limit;
        this.offset = offset;
        this.query = query;
        this.filters = filters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Maximum results to return
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Offset for pagination
     */
    @JsonProperty("offset")
    public Optional<Integer> getOffset() {
        return offset;
    }

    @JsonProperty("query")
    public String getQuery() {
        return query;
    }

    @JsonProperty("filters")
    public Optional<Map<String, Object>> getFilters() {
        return filters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchResourcesRequest && equalTo((SearchResourcesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchResourcesRequest other) {
        return limit.equals(other.limit)
                && offset.equals(other.offset)
                && query.equals(other.query)
                && filters.equals(other.filters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.limit, this.offset, this.query, this.filters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QueryStage builder() {
        return new Builder();
    }

    public interface QueryStage {
        _FinalStage query(@NotNull String query);

        Builder from(SearchResourcesRequest other);
    }

    public interface _FinalStage {
        SearchResourcesRequest build();

        /**
         * <p>Maximum results to return</p>
         */
        _FinalStage limit(Optional<Integer> limit);

        _FinalStage limit(Integer limit);

        /**
         * <p>Offset for pagination</p>
         */
        _FinalStage offset(Optional<Integer> offset);

        _FinalStage offset(Integer offset);

        _FinalStage filters(Optional<Map<String, Object>> filters);

        _FinalStage filters(Map<String, Object> filters);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QueryStage, _FinalStage {
        private String query;

        private Optional<Map<String, Object>> filters = Optional.empty();

        private Optional<Integer> offset = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchResourcesRequest other) {
            limit(other.getLimit());
            offset(other.getOffset());
            query(other.getQuery());
            filters(other.getFilters());
            return this;
        }

        @java.lang.Override
        @JsonSetter("query")
        public _FinalStage query(@NotNull String query) {
            this.query = Objects.requireNonNull(query, "query must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage filters(Map<String, Object> filters) {
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "filters", nulls = Nulls.SKIP)
        public _FinalStage filters(Optional<Map<String, Object>> filters) {
            this.filters = filters;
            return this;
        }

        /**
         * <p>Offset for pagination</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage offset(Integer offset) {
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * <p>Offset for pagination</p>
         */
        @java.lang.Override
        @JsonSetter(value = "offset", nulls = Nulls.SKIP)
        public _FinalStage offset(Optional<Integer> offset) {
            this.offset = offset;
            return this;
        }

        /**
         * <p>Maximum results to return</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>Maximum results to return</p>
         */
        @java.lang.Override
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public _FinalStage limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        @java.lang.Override
        public SearchResourcesRequest build() {
            return new SearchResourcesRequest(limit, offset, query, filters, additionalProperties);
        }
    }
}
