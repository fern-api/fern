/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service;

import com.seed.clientSideParams.core.ClientOptions;
import com.seed.clientSideParams.core.RequestOptions;
import com.seed.clientSideParams.resources.service.requests.GetResourceRequest;
import com.seed.clientSideParams.resources.service.requests.ListResourcesRequest;
import com.seed.clientSideParams.resources.service.requests.SearchResourcesRequest;
import com.seed.clientSideParams.resources.types.types.Resource;
import com.seed.clientSideParams.resources.types.types.SearchResponse;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncServiceClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawServiceClient rawClient;

    public AsyncServiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawServiceClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawServiceClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * List resources with pagination
     */
    public CompletableFuture<List<Resource>> listResources(ListResourcesRequest request) {
        return this.rawClient.listResources(request).thenApply(response -> response.body());
    }

    /**
     * List resources with pagination
     */
    public CompletableFuture<List<Resource>> listResources(
            ListResourcesRequest request, RequestOptions requestOptions) {
        return this.rawClient.listResources(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a single resource
     */
    public CompletableFuture<Resource> getResource(String resourceId, GetResourceRequest request) {
        return this.rawClient.getResource(resourceId, request).thenApply(response -> response.body());
    }

    /**
     * Get a single resource
     */
    public CompletableFuture<Resource> getResource(
            String resourceId, GetResourceRequest request, RequestOptions requestOptions) {
        return this.rawClient.getResource(resourceId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Search resources with complex parameters
     */
    public CompletableFuture<SearchResponse> searchResources(SearchResourcesRequest request) {
        return this.rawClient.searchResources(request).thenApply(response -> response.body());
    }

    /**
     * Search resources with complex parameters
     */
    public CompletableFuture<SearchResponse> searchResources(
            SearchResourcesRequest request, RequestOptions requestOptions) {
        return this.rawClient.searchResources(request, requestOptions).thenApply(response -> response.body());
    }
}
