/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.seed.clientSideParams.core.ClientOptions;
import com.seed.clientSideParams.core.MediaTypes;
import com.seed.clientSideParams.core.ObjectMappers;
import com.seed.clientSideParams.core.QueryStringMapper;
import com.seed.clientSideParams.core.RequestOptions;
import com.seed.clientSideParams.core.SeedClientSideParamsApiException;
import com.seed.clientSideParams.core.SeedClientSideParamsException;
import com.seed.clientSideParams.core.SeedClientSideParamsHttpResponse;
import com.seed.clientSideParams.resources.service.requests.GetResourceRequest;
import com.seed.clientSideParams.resources.service.requests.ListResourcesRequest;
import com.seed.clientSideParams.resources.service.requests.SearchResourcesRequest;
import com.seed.clientSideParams.resources.types.types.Resource;
import com.seed.clientSideParams.resources.types.types.SearchResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawServiceClient {
    protected final ClientOptions clientOptions;

    public RawServiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * List resources with pagination
     */
    public SeedClientSideParamsHttpResponse<List<Resource>> listResources(ListResourcesRequest request) {
        return listResources(request, null);
    }

    /**
     * List resources with pagination
     */
    public SeedClientSideParamsHttpResponse<List<Resource>> listResources(
            ListResourcesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("resources");
        QueryStringMapper.addQueryParameter(httpUrl, "page", request.getPage(), false);
        QueryStringMapper.addQueryParameter(
                httpUrl, "per_page", request.getPerPage().orElse(50), false);
        QueryStringMapper.addQueryParameter(httpUrl, "sort", request.getSort().orElse("created_at"), false);
        QueryStringMapper.addQueryParameter(httpUrl, "order", request.getOrder().orElse("desc"), false);
        QueryStringMapper.addQueryParameter(
                httpUrl, "include_totals", request.getIncludeTotals().orElse(true), false);
        if (request.getFields().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "fields", request.getFields().get(), false);
        }
        if (request.getSearch().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "search", request.getSearch().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedClientSideParamsHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), new TypeReference<List<Resource>>() {}),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedClientSideParamsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedClientSideParamsException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get a single resource
     */
    public SeedClientSideParamsHttpResponse<Resource> getResource(String resourceId, GetResourceRequest request) {
        return getResource(resourceId, request, null);
    }

    /**
     * Get a single resource
     */
    public SeedClientSideParamsHttpResponse<Resource> getResource(
            String resourceId, GetResourceRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("resources")
                .addPathSegment(resourceId);
        QueryStringMapper.addQueryParameter(
                httpUrl, "include_metadata", request.getIncludeMetadata().orElse(false), false);
        QueryStringMapper.addQueryParameter(
                httpUrl, "format", request.getFormat().orElse("json"), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedClientSideParamsHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), Resource.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedClientSideParamsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedClientSideParamsException("Network error executing HTTP request", e);
        }
    }

    /**
     * Search resources with complex parameters
     */
    public SeedClientSideParamsHttpResponse<SearchResponse> searchResources(SearchResourcesRequest request) {
        return searchResources(request, null);
    }

    /**
     * Search resources with complex parameters
     */
    public SeedClientSideParamsHttpResponse<SearchResponse> searchResources(
            SearchResourcesRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("resources/search");
        QueryStringMapper.addQueryParameter(httpUrl, "limit", request.getLimit().orElse(100), false);
        QueryStringMapper.addQueryParameter(
                httpUrl, "offset", request.getOffset().orElse(0), false);
        Map<String, Object> properties = new HashMap<>();
        properties.put("query", request.getQuery());
        if (request.getFilters().isPresent()) {
            properties.put("filters", request.getFilters());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedClientSideParamsHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedClientSideParamsApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedClientSideParamsException("Network error executing HTTP request", e);
        }
    }
}
