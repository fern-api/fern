/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.test;

import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.seed.clientSideParams.SeedClientSideParamsClient;
import com.seed.clientSideParams.SeedClientSideParamsClientBuilder;
import java.io.IOException;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Wire protocol tests for service
 */
public final class ServiceWireTest {
    private MockWebServer server;

    private SeedClientSideParamsClient client;

    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    public void setup() throws IOException {
        server = new MockWebServer();
        server.start();
        client = SeedClientSideParamsClientBuilder.builder()
                .url(server.url("/").toString())
                .build();
    }

    @AfterEach
    public void teardown() throws IOException {
        server.shutdown();
    }

    /**
     * Test successful response for endpoint endpoint
     */
    @Test
    public void testEndpointc827bbb2_SuccessResponse() throws Exception {
        // Given: Mock server returns successful response
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"success\"}"));
        // When: API call is made
        client.listResources();
        // Then: Verify request was made correctly
        RecordedRequest recorded = server.takeRequest();
        assertNotNull(recorded);
        assertEquals("GET", recorded.getMethod());
        assertTrue(recorded.getPath().startsWith("/resources"));
    }

    /**
     * Test query parameter serialization for endpoint endpoint
     */
    @Test
    public void testEndpointc827bbb2_QueryParameters() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.listResources(ListResourcesRequest.builder()
                .param("test-value")
                .param("test-value")
                .param("test-value")
                .param("test-value")
                .param("test-value")
                .param("test-value")
                .param("test-value")
                .build());
        RecordedRequest recorded = server.takeRequest();
        String path = recorded.getPath();
        assertNotNull(path);
        assertTrue(path.contains("page=") || path.contains("page" + "="));
        assertTrue(path.contains("per_page=") || path.contains("per_page" + "="));
        assertTrue(path.contains("sort=") || path.contains("sort" + "="));
        assertTrue(path.contains("order=") || path.contains("order" + "="));
        assertTrue(path.contains("include_totals=") || path.contains("include_totals" + "="));
        assertTrue(path.contains("fields=") || path.contains("fields" + "="));
        assertTrue(path.contains("search=") || path.contains("search" + "="));
    }

    /**
     * Test successful response for endpoint endpoint
     */
    @Test
    public void testEndpoint86114d5c_SuccessResponse() throws Exception {
        // Given: Mock server returns successful response
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"success\"}"));
        // When: API call is made
        client.getResource("test-resource_id");
        // Then: Verify request was made correctly
        RecordedRequest recorded = server.takeRequest();
        assertNotNull(recorded);
        assertEquals("GET", recorded.getMethod());
        assertTrue(recorded.getPath().startsWith("/resources/"));
    }

    /**
     * Test query parameter serialization for endpoint endpoint
     */
    @Test
    public void testEndpoint86114d5c_QueryParameters() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.getResource(
                "test-resource_id",
                GetResourceRequest.builder()
                        .param("test-value")
                        .param("test-value")
                        .build());
        RecordedRequest recorded = server.takeRequest();
        String path = recorded.getPath();
        assertNotNull(path);
        assertTrue(path.contains("include_metadata=") || path.contains("include_metadata" + "="));
        assertTrue(path.contains("format=") || path.contains("format" + "="));
    }

    /**
     * Test successful response for endpoint endpoint
     */
    @Test
    public void testEndpoint6ece95f5_SuccessResponse() throws Exception {
        // Given: Mock server returns successful response
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"success\"}"));
        // When: API call is made
        client.searchResources();
        // Then: Verify request was made correctly
        RecordedRequest recorded = server.takeRequest();
        assertNotNull(recorded);
        assertEquals("POST", recorded.getMethod());
        assertTrue(recorded.getPath().startsWith("/resources/search"));
    }

    /**
     * Test query parameter serialization for endpoint endpoint
     */
    @Test
    public void testEndpoint6ece95f5_QueryParameters() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.searchResources(SearchResourcesRequest.builder()
                .param("test-value")
                .param("test-value")
                .build());
        RecordedRequest recorded = server.takeRequest();
        String path = recorded.getPath();
        assertNotNull(path);
        assertTrue(path.contains("limit=") || path.contains("limit" + "="));
        assertTrue(path.contains("offset=") || path.contains("offset" + "="));
    }

    /**
     * Test request body serialization for endpoint endpoint
     */
    @Test
    public void testEndpoint6ece95f5_RequestBody() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.searchResources(Map.of("test", "data"));
        RecordedRequest recorded = server.takeRequest();
        String body = recorded.getBody().readUtf8();
        assertNotNull(body);
        JsonNode bodyJson = objectMapper.readTree(body);
        assertNotNull(bodyJson);
    }
}
