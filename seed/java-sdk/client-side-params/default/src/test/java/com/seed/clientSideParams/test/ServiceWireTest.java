/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.test;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.seed.clientSideParams.SeedClientSideParamsClient;
import com.seed.clientSideParams.core.SeedClientSideParamsApiException;
import java.io.IOException;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public final class ServiceWireTest {
    private MockWebServer server;

    private SeedClientSideParamsClient client;

    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    public void setup() throws IOException {
        server = new MockWebServer();
        server.start();
        client = SeedClientSideParamsClient.builder()
                .url(server.url("/").toString())
                .token("test-token")
                .maxRetries(0)
                .build();
    }

    @AfterEach
    public void teardown() throws IOException {
        server.shutdown();
    }

    @Test
    public void testListResources_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        // This endpoint requires manual customization:
        // - Path parameters, request bodies, or query parameters need to be set
        // - Response shape cannot be guaranteed
        // Example client call:
        // client.service().listResources(com.seed.clientSideParams.resources.service.requests.ListResourcesRequest.builder().build())
        // Test skipped - requires manual implementation;
    }

    @Test
    public void testListResources_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listResources(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListResourcesRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListResources_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listResources(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListResourcesRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    @Disabled
    public void testGetResource_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: GET /resources/
        // Path parameters: 1
        // Query parameters: 2
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }

    @Test
    @Disabled
    public void testSearchResources_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: POST /resources/search
        // Has request body
        // Query parameters: 2
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }

    @Test
    public void testListUsers_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        // This endpoint requires manual customization:
        // - Path parameters, request bodies, or query parameters need to be set
        // - Response shape cannot be guaranteed
        // Example client call:
        // client.service().listUsers(com.seed.clientSideParams.resources.service.requests.ListUsersRequest.builder().build())
        // Test skipped - requires manual implementation;
    }

    @Test
    public void testListUsers_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listUsers(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListUsersRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListUsers_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listUsers(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListUsersRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    @Disabled
    public void testGetUserById_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: GET /users/
        // Path parameters: 1
        // Query parameters: 2
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }

    @Test
    @Disabled
    public void testCreateUser_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: POST /users
        // Has request body
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }

    @Test
    @Disabled
    public void testUpdateUser_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: PATCH /users/
        // Path parameters: 1
        // Has request body
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }

    @Test
    @Disabled
    public void testDeleteUser_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: DELETE /users/
        // Path parameters: 1
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }

    @Test
    public void testListConnections_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        // This endpoint requires manual customization:
        // - Path parameters, request bodies, or query parameters need to be set
        // - Response shape cannot be guaranteed
        // Example client call:
        // client.service().listConnections(com.seed.clientSideParams.resources.service.requests.ListConnectionsRequest.builder().build())
        // Test skipped - requires manual implementation;
    }

    @Test
    public void testListConnections_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listConnections(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListConnectionsRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListConnections_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listConnections(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListConnectionsRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    @Disabled
    public void testGetConnection_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: GET /connections/
        // Path parameters: 1
        // Query parameters: 1
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }

    @Test
    public void testListClients_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        // This endpoint requires manual customization:
        // - Path parameters, request bodies, or query parameters need to be set
        // - Response shape cannot be guaranteed
        // Example client call:
        // client.service().listClients(com.seed.clientSideParams.resources.service.requests.ListClientsRequest.builder().build())
        // Test skipped - requires manual implementation;
    }

    @Test
    public void testListClients_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listClients(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListClientsRequest
                            .builder()
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListClients_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listClients(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListClientsRequest
                            .builder()
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    @Disabled
    public void testGetClient_Manual() throws Exception {
        // Manual test implementation required
        // Endpoint: GET /clients/
        // Path parameters: 1
        // Query parameters: 2
        // TODO: Implement test;
        // 1. Setup mock response;
        // 2. Create request with required fields;
        // 3. Execute client call;
        // 4. Verify HTTP interaction;
    }
}
