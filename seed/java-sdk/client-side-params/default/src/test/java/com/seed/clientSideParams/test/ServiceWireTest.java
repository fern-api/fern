/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.test;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.seed.clientSideParams.SeedClientSideParamsClient;
import com.seed.clientSideParams.core.SeedClientSideParamsApiException;
import java.io.IOException;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public final class ServiceWireTest {
    private MockWebServer server;

    private SeedClientSideParamsClient client;

    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    public void setup() throws IOException {
        server = new MockWebServer();
        server.start();
        client = SeedClientSideParamsClient.builder()
                .url(server.url("/").toString())
                .token("test-token")
                .maxRetries(0)
                .build();
    }

    @AfterEach
    public void teardown() throws IOException {
        server.shutdown();
    }

    @Test
    public void testListResources_SuccessResponse() throws Exception {
        server.enqueue(
                new MockResponse().setResponseCode(200).setBody("[{\"id\":\"test-id\",\"value\":\"test-value\"}]"));
        // TODO:
        // client.service().listResources(com.seed.clientSideParams.resources.service.requests.ListResourcesRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testListResources_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listResources(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListResourcesRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListResources_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listResources(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListResourcesRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    public void testGetResource_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("{\"id\":\"test-id\",\"name\":\"test-name\",\"status\":\"success\",\"data\":{}}"));
        // TODO: client.service().getResource("test-resource_id",
        // com.seed.clientSideParams.resources.service.requests.GetResourceRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testSearchResources_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("{\"id\":\"test-id\",\"name\":\"test-name\",\"status\":\"success\",\"data\":{}}"));
        // TODO:
        // client.service().searchResources(com.seed.clientSideParams.resources.service.requests.SearchResourcesRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testListUsers_SuccessResponse() throws Exception {
        server.enqueue(
                new MockResponse().setResponseCode(200).setBody("[{\"id\":\"test-id\",\"value\":\"test-value\"}]"));
        // TODO:
        // client.service().listUsers(com.seed.clientSideParams.resources.service.requests.ListUsersRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testListUsers_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listUsers(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListUsersRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListUsers_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listUsers(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListUsersRequest
                            .builder()
                            .page(0)
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    public void testGetUserById_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("{\"id\":\"test-id\",\"name\":\"test-name\",\"status\":\"success\",\"data\":{}}"));
        // TODO: client.service().getUserById("test-user_id",
        // com.seed.clientSideParams.resources.service.requests.GetUserByIdRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testCreateUser_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("{\"id\":\"test-id\",\"status\":\"success\",\"createdAt\":\"2024-01-01T00:00:00Z\"}"));
        // TODO:
        // client.service().createUser(com.seed.clientSideParams.resources.service.requests.CreateUserRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testUpdateUser_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("{\"id\":\"test-id\",\"status\":\"success\",\"createdAt\":\"2024-01-01T00:00:00Z\"}"));
        // TODO: client.service().updateUser("test-user_id",
        // com.seed.clientSideParams.resources.service.requests.UpdateUserRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testDeleteUser_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        // TODO: client.service().deleteUser("test-user_id")
        server.takeRequest();
    }

    @Test
    public void testListConnections_SuccessResponse() throws Exception {
        server.enqueue(
                new MockResponse().setResponseCode(200).setBody("[{\"id\":\"test-id\",\"value\":\"test-value\"}]"));
        // TODO:
        // client.service().listConnections(com.seed.clientSideParams.resources.service.requests.ListConnectionsRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testListConnections_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listConnections(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListConnectionsRequest
                            .builder()
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListConnections_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listConnections(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListConnectionsRequest
                            .builder()
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    public void testGetConnection_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("{\"id\":\"test-id\",\"name\":\"test-name\",\"status\":\"success\",\"data\":{}}"));
        // TODO: client.service().getConnection("test-connection_id",
        // com.seed.clientSideParams.resources.service.requests.GetConnectionRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testListClients_SuccessResponse() throws Exception {
        server.enqueue(
                new MockResponse().setResponseCode(200).setBody("[{\"id\":\"test-id\",\"value\":\"test-value\"}]"));
        // TODO:
        // client.service().listClients(com.seed.clientSideParams.resources.service.requests.ListClientsRequest.builder().build())
        server.takeRequest();
    }

    @Test
    public void testListClients_404Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listClients(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListClientsRequest
                            .builder()
                            .build());
        });
        assertEquals(404, exception.statusCode());
    }

    @Test
    public void testListClients_500Error() {
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service()
                    .listClients(com.seed
                            .clientSideParams
                            .resources
                            .service
                            .requests
                            .ListClientsRequest
                            .builder()
                            .build());
        });
        assertEquals(500, exception.statusCode());
    }

    @Test
    public void testGetClient_SuccessResponse() throws Exception {
        server.enqueue(new MockResponse()
                .setResponseCode(200)
                .setBody("{\"id\":\"test-id\",\"name\":\"test-name\",\"status\":\"success\",\"data\":{}}"));
        // TODO: client.service().getClient("test-client_id",
        // com.seed.clientSideParams.resources.service.requests.GetClientRequest.builder().build())
        server.takeRequest();
    }
}
