/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.test;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.seed.clientSideParams.SeedClientSideParamsClient;
import com.seed.clientSideParams.SeedClientSideParamsClientBuilder;
import com.seed.clientSideParams.core.SeedClientSideParamsApiException;
import java.io.IOException;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * Wire protocol tests for service
 */
public final class ServiceWireTest {
    private MockWebServer server;

    private SeedClientSideParamsClient client;

    private ObjectMapper objectMapper = new ObjectMapper();

    @BeforeEach
    public void setup() throws IOException {
        server = new MockWebServer();
        server.start();
        client = SeedClientSideParamsClientBuilder.builder()
                .url(server.url("/").toString())
                .build();
    }

    @AfterEach
    public void teardown() throws IOException {
        server.shutdown();
    }

    /**
     * Test successful response for ListResources endpoint
     */
    @Test
    public void testListResources_SuccessResponse() throws Exception {
        // Given: Mock server returns successful response
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"success\"}"));
        // When: API call is made
        client.service().listResources();
        // Then: Verify request was made correctly
        RecordedRequest recorded = server.takeRequest();
        assertNotNull(recorded);
        assertEquals("GET", recorded.getMethod());
        assertTrue(recorded.getPath().startsWith("/resources"));
    }

    /**
     * Test query parameter serialization for ListResources endpoint
     */
    @Test
    public void testListResources_QueryParameters() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.service()
                .listResources(com.seed
                        .clientSideParams
                        .resources
                        .service
                        .requests
                        .ListResourcesRequest
                        .builder()
                        .page(10)
                        .perPage(10)
                        .sort("asc")
                        .order("asc")
                        .includeTotals(true)
                        .fields("id,name")
                        .search("test query")
                        .build());
        RecordedRequest recorded = server.takeRequest();
        String path = recorded.getPath();
        assertNotNull(path);
        assertTrue(path.contains("page=") || path.contains("page" + "="));
        assertTrue(path.contains("per_page=") || path.contains("per_page" + "="));
        assertTrue(path.contains("sort=") || path.contains("sort" + "="));
        assertTrue(path.contains("order=") || path.contains("order" + "="));
        assertTrue(path.contains("include_totals=") || path.contains("include_totals" + "="));
        assertTrue(path.contains("fields=") || path.contains("fields" + "="));
        assertTrue(path.contains("search=") || path.contains("search" + "="));
    }

    /**
     * Test 404 error response for ListResources endpoint
     */
    @Test
    public void testListResources_404Error() {
        // Given: Mock server returns 404 error
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        // When/Then: API call should throw exception with correct status code
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service().listResources();
        });
        assertEquals(404, exception.getStatusCode());
    }

    /**
     * Test 500 error response for ListResources endpoint
     */
    @Test
    public void testListResources_500Error() {
        // Given: Mock server returns 500 error
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        // When/Then: API call should throw exception with correct status code
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service().listResources();
        });
        assertEquals(500, exception.getStatusCode());
    }

    /**
     * Test successful response for GetResource endpoint
     */
    @Test
    public void testGetResource_SuccessResponse() throws Exception {
        // Given: Mock server returns successful response
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"success\"}"));
        // When: API call is made
        client.service().getResource("test-resource_id");
        // Then: Verify request was made correctly
        RecordedRequest recorded = server.takeRequest();
        assertNotNull(recorded);
        assertEquals("GET", recorded.getMethod());
        assertTrue(recorded.getPath().startsWith("/resources/"));
    }

    /**
     * Test query parameter serialization for GetResource endpoint
     */
    @Test
    public void testGetResource_QueryParameters() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.service()
                .getResource(
                        "test-resource_id",
                        com.seed
                                .clientSideParams
                                .resources
                                .service
                                .requests
                                .GetResourceRequest
                                .builder()
                                .includeMetadata(true)
                                .format("json")
                                .build());
        RecordedRequest recorded = server.takeRequest();
        String path = recorded.getPath();
        assertNotNull(path);
        assertTrue(path.contains("include_metadata=") || path.contains("include_metadata" + "="));
        assertTrue(path.contains("format=") || path.contains("format" + "="));
    }

    /**
     * Test 404 error response for GetResource endpoint
     */
    @Test
    public void testGetResource_404Error() {
        // Given: Mock server returns 404 error
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        // When/Then: API call should throw exception with correct status code
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service().getResource("test-resource_id");
        });
        assertEquals(404, exception.getStatusCode());
    }

    /**
     * Test 500 error response for GetResource endpoint
     */
    @Test
    public void testGetResource_500Error() {
        // Given: Mock server returns 500 error
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        // When/Then: API call should throw exception with correct status code
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service().getResource("test-resource_id");
        });
        assertEquals(500, exception.getStatusCode());
    }

    /**
     * Test successful response for SearchResources endpoint
     */
    @Test
    public void testSearchResources_SuccessResponse() throws Exception {
        // Given: Mock server returns successful response
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"success\"}"));
        // When: API call is made
        client.service().searchResources();
        // Then: Verify request was made correctly
        RecordedRequest recorded = server.takeRequest();
        assertNotNull(recorded);
        assertEquals("POST", recorded.getMethod());
        assertTrue(recorded.getPath().startsWith("/resources/search"));
    }

    /**
     * Test query parameter serialization for SearchResources endpoint
     */
    @Test
    public void testSearchResources_QueryParameters() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.service()
                .searchResources(com.seed
                        .clientSideParams
                        .resources
                        .service
                        .requests
                        .SearchResourcesRequest
                        .builder()
                        .limit(10)
                        .offset(10)
                        .build());
        RecordedRequest recorded = server.takeRequest();
        String path = recorded.getPath();
        assertNotNull(path);
        assertTrue(path.contains("limit=") || path.contains("limit" + "="));
        assertTrue(path.contains("offset=") || path.contains("offset" + "="));
    }

    /**
     * Test request body serialization for SearchResources endpoint
     */
    @Test
    public void testSearchResources_RequestBody() throws Exception {
        server.enqueue(new MockResponse().setResponseCode(200).setBody("{}"));
        client.service().searchResources(Map.of("test", "data"));
        RecordedRequest recorded = server.takeRequest();
        String body = recorded.getBody().readUtf8();
        assertNotNull(body);
        JsonNode bodyJson = objectMapper.readTree(body);
        assertNotNull(bodyJson);
    }

    /**
     * Test 404 error response for SearchResources endpoint
     */
    @Test
    public void testSearchResources_404Error() {
        // Given: Mock server returns 404 error
        server.enqueue(new MockResponse()
                .setResponseCode(404)
                .setBody("{\"error\":\"not_found\",\"message\":\"Resource not found\"}"));
        // When/Then: API call should throw exception with correct status code
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service().searchResources();
        });
        assertEquals(404, exception.getStatusCode());
    }

    /**
     * Test 500 error response for SearchResources endpoint
     */
    @Test
    public void testSearchResources_500Error() {
        // Given: Mock server returns 500 error
        server.enqueue(new MockResponse()
                .setResponseCode(500)
                .setBody("{\"error\":\"internal_error\",\"message\":\"Internal server error\"}"));
        // When/Then: API call should throw exception with correct status code
        SeedClientSideParamsApiException exception = assertThrows(SeedClientSideParamsApiException.class, () -> {
            client.service().searchResources();
        });
        assertEquals(500, exception.getStatusCode());
    }
}
