/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListUsersRequest.Builder.class)
public final class ListUsersRequest {
    private final Optional<Integer> page;

    private final Optional<Integer> perPage;

    private final Optional<Boolean> includeTotals;

    private final Optional<String> sort;

    private final Optional<String> connection;

    private final Optional<String> q;

    private final Optional<String> searchEngine;

    private final Optional<String> fields;

    private final Map<String, Object> additionalProperties;

    private ListUsersRequest(
            Optional<Integer> page,
            Optional<Integer> perPage,
            Optional<Boolean> includeTotals,
            Optional<String> sort,
            Optional<String> connection,
            Optional<String> q,
            Optional<String> searchEngine,
            Optional<String> fields,
            Map<String, Object> additionalProperties) {
        this.page = page;
        this.perPage = perPage;
        this.includeTotals = includeTotals;
        this.sort = sort;
        this.connection = connection;
        this.q = q;
        this.searchEngine = searchEngine;
        this.fields = fields;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Page index of the results to return. First page is 0.
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return Number of results per page.
     */
    @JsonProperty("per_page")
    public Optional<Integer> getPerPage() {
        return perPage;
    }

    /**
     * @return Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).
     */
    @JsonProperty("include_totals")
    public Optional<Boolean> getIncludeTotals() {
        return includeTotals;
    }

    /**
     * @return Field to sort by. Use field:order where order is 1 for ascending and -1 for descending.
     */
    @JsonProperty("sort")
    public Optional<String> getSort() {
        return sort;
    }

    /**
     * @return Connection filter
     */
    @JsonProperty("connection")
    public Optional<String> getConnection() {
        return connection;
    }

    /**
     * @return Query string following Lucene query string syntax
     */
    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    /**
     * @return Search engine version (v1, v2, or v3)
     */
    @JsonProperty("search_engine")
    public Optional<String> getSearchEngine() {
        return searchEngine;
    }

    /**
     * @return Comma-separated list of fields to include or exclude
     */
    @JsonProperty("fields")
    public Optional<String> getFields() {
        return fields;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListUsersRequest && equalTo((ListUsersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListUsersRequest other) {
        return page.equals(other.page)
                && perPage.equals(other.perPage)
                && includeTotals.equals(other.includeTotals)
                && sort.equals(other.sort)
                && connection.equals(other.connection)
                && q.equals(other.q)
                && searchEngine.equals(other.searchEngine)
                && fields.equals(other.fields);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.page,
                this.perPage,
                this.includeTotals,
                this.sort,
                this.connection,
                this.q,
                this.searchEngine,
                this.fields);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> perPage = Optional.empty();

        private Optional<Boolean> includeTotals = Optional.empty();

        private Optional<String> sort = Optional.empty();

        private Optional<String> connection = Optional.empty();

        private Optional<String> q = Optional.empty();

        private Optional<String> searchEngine = Optional.empty();

        private Optional<String> fields = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListUsersRequest other) {
            page(other.getPage());
            perPage(other.getPerPage());
            includeTotals(other.getIncludeTotals());
            sort(other.getSort());
            connection(other.getConnection());
            q(other.getQ());
            searchEngine(other.getSearchEngine());
            fields(other.getFields());
            return this;
        }

        /**
         * <p>Page index of the results to return. First page is 0.</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>Number of results per page.</p>
         */
        @JsonSetter(value = "per_page", nulls = Nulls.SKIP)
        public Builder perPage(Optional<Integer> perPage) {
            this.perPage = perPage;
            return this;
        }

        public Builder perPage(Integer perPage) {
            this.perPage = Optional.ofNullable(perPage);
            return this;
        }

        /**
         * <p>Return results inside an object that contains the total result count (true) or as a direct array of results (false, default).</p>
         */
        @JsonSetter(value = "include_totals", nulls = Nulls.SKIP)
        public Builder includeTotals(Optional<Boolean> includeTotals) {
            this.includeTotals = includeTotals;
            return this;
        }

        public Builder includeTotals(Boolean includeTotals) {
            this.includeTotals = Optional.ofNullable(includeTotals);
            return this;
        }

        /**
         * <p>Field to sort by. Use field:order where order is 1 for ascending and -1 for descending.</p>
         */
        @JsonSetter(value = "sort", nulls = Nulls.SKIP)
        public Builder sort(Optional<String> sort) {
            this.sort = sort;
            return this;
        }

        public Builder sort(String sort) {
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * <p>Connection filter</p>
         */
        @JsonSetter(value = "connection", nulls = Nulls.SKIP)
        public Builder connection(Optional<String> connection) {
            this.connection = connection;
            return this;
        }

        public Builder connection(String connection) {
            this.connection = Optional.ofNullable(connection);
            return this;
        }

        /**
         * <p>Query string following Lucene query string syntax</p>
         */
        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public Builder q(Optional<String> q) {
            this.q = q;
            return this;
        }

        public Builder q(String q) {
            this.q = Optional.ofNullable(q);
            return this;
        }

        /**
         * <p>Search engine version (v1, v2, or v3)</p>
         */
        @JsonSetter(value = "search_engine", nulls = Nulls.SKIP)
        public Builder searchEngine(Optional<String> searchEngine) {
            this.searchEngine = searchEngine;
            return this;
        }

        public Builder searchEngine(String searchEngine) {
            this.searchEngine = Optional.ofNullable(searchEngine);
            return this;
        }

        /**
         * <p>Comma-separated list of fields to include or exclude</p>
         */
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<String> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(String fields) {
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public ListUsersRequest build() {
            return new ListUsersRequest(
                    page, perPage, includeTotals, sort, connection, q, searchEngine, fields, additionalProperties);
        }
    }
}
