/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetResourceRequest.Builder.class)
public final class GetResourceRequest {
    private final Optional<Boolean> includeMetadata;

    private final Optional<String> format;

    private final Map<String, Object> additionalProperties;

    private GetResourceRequest(
            Optional<Boolean> includeMetadata, Optional<String> format, Map<String, Object> additionalProperties) {
        this.includeMetadata = includeMetadata;
        this.format = format;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Include metadata in response
     */
    @JsonProperty("include_metadata")
    public Optional<Boolean> getIncludeMetadata() {
        return includeMetadata;
    }

    /**
     * @return Response format
     */
    @JsonProperty("format")
    public Optional<String> getFormat() {
        return format;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetResourceRequest && equalTo((GetResourceRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetResourceRequest other) {
        return includeMetadata.equals(other.includeMetadata) && format.equals(other.format);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.includeMetadata, this.format);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> includeMetadata = Optional.empty();

        private Optional<String> format = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetResourceRequest other) {
            includeMetadata(other.getIncludeMetadata());
            format(other.getFormat());
            return this;
        }

        /**
         * <p>Include metadata in response</p>
         */
        @JsonSetter(value = "include_metadata", nulls = Nulls.SKIP)
        public Builder includeMetadata(Optional<Boolean> includeMetadata) {
            this.includeMetadata = includeMetadata;
            return this;
        }

        public Builder includeMetadata(Boolean includeMetadata) {
            this.includeMetadata = Optional.ofNullable(includeMetadata);
            return this;
        }

        /**
         * <p>Response format</p>
         */
        @JsonSetter(value = "format", nulls = Nulls.SKIP)
        public Builder format(Optional<String> format) {
            this.format = format;
            return this;
        }

        public Builder format(String format) {
            this.format = Optional.ofNullable(format);
            return this;
        }

        public GetResourceRequest build() {
            return new GetResourceRequest(includeMetadata, format, additionalProperties);
        }
    }
}
