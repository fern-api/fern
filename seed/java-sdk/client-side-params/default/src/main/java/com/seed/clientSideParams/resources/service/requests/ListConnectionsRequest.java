/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListConnectionsRequest.Builder.class)
public final class ListConnectionsRequest {
    private final Optional<String> strategy;

    private final Optional<String> name;

    private final Optional<String> fields;

    private final Map<String, Object> additionalProperties;

    private ListConnectionsRequest(
            Optional<String> strategy,
            Optional<String> name,
            Optional<String> fields,
            Map<String, Object> additionalProperties) {
        this.strategy = strategy;
        this.name = name;
        this.fields = fields;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter by strategy type (e.g., auth0, google-oauth2, samlp)
     */
    @JsonProperty("strategy")
    public Optional<String> getStrategy() {
        return strategy;
    }

    /**
     * @return Filter by connection name
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Comma-separated list of fields to include
     */
    @JsonProperty("fields")
    public Optional<String> getFields() {
        return fields;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListConnectionsRequest && equalTo((ListConnectionsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListConnectionsRequest other) {
        return strategy.equals(other.strategy) && name.equals(other.name) && fields.equals(other.fields);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.strategy, this.name, this.fields);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> strategy = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> fields = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListConnectionsRequest other) {
            strategy(other.getStrategy());
            name(other.getName());
            fields(other.getFields());
            return this;
        }

        /**
         * <p>Filter by strategy type (e.g., auth0, google-oauth2, samlp)</p>
         */
        @JsonSetter(value = "strategy", nulls = Nulls.SKIP)
        public Builder strategy(Optional<String> strategy) {
            this.strategy = strategy;
            return this;
        }

        public Builder strategy(String strategy) {
            this.strategy = Optional.ofNullable(strategy);
            return this;
        }

        /**
         * <p>Filter by connection name</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Comma-separated list of fields to include</p>
         */
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<String> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(String fields) {
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public ListConnectionsRequest build() {
            return new ListConnectionsRequest(strategy, name, fields, additionalProperties);
        }
    }
}
