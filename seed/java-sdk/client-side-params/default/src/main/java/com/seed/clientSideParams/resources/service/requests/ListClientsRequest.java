/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListClientsRequest.Builder.class)
public final class ListClientsRequest {
    private final Optional<String> fields;

    private final Optional<Boolean> includeFields;

    private final Optional<Integer> page;

    private final Optional<Integer> perPage;

    private final Optional<Boolean> includeTotals;

    private final Optional<Boolean> isGlobal;

    private final Optional<Boolean> isFirstParty;

    private final Optional<List<String>> appType;

    private final Map<String, Object> additionalProperties;

    private ListClientsRequest(
            Optional<String> fields,
            Optional<Boolean> includeFields,
            Optional<Integer> page,
            Optional<Integer> perPage,
            Optional<Boolean> includeTotals,
            Optional<Boolean> isGlobal,
            Optional<Boolean> isFirstParty,
            Optional<List<String>> appType,
            Map<String, Object> additionalProperties) {
        this.fields = fields;
        this.includeFields = includeFields;
        this.page = page;
        this.perPage = perPage;
        this.includeTotals = includeTotals;
        this.isGlobal = isGlobal;
        this.isFirstParty = isFirstParty;
        this.appType = appType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Comma-separated list of fields to include
     */
    @JsonProperty("fields")
    public Optional<String> getFields() {
        return fields;
    }

    /**
     * @return Whether specified fields are included or excluded
     */
    @JsonProperty("include_fields")
    public Optional<Boolean> getIncludeFields() {
        return includeFields;
    }

    /**
     * @return Page number (zero-based)
     */
    @JsonProperty("page")
    public Optional<Integer> getPage() {
        return page;
    }

    /**
     * @return Number of results per page
     */
    @JsonProperty("per_page")
    public Optional<Integer> getPerPage() {
        return perPage;
    }

    /**
     * @return Include total count in response
     */
    @JsonProperty("include_totals")
    public Optional<Boolean> getIncludeTotals() {
        return includeTotals;
    }

    /**
     * @return Filter by global clients
     */
    @JsonProperty("is_global")
    public Optional<Boolean> getIsGlobal() {
        return isGlobal;
    }

    /**
     * @return Filter by first party clients
     */
    @JsonProperty("is_first_party")
    public Optional<Boolean> getIsFirstParty() {
        return isFirstParty;
    }

    /**
     * @return Filter by application type (spa, native, regular_web, non_interactive)
     */
    @JsonProperty("app_type")
    public Optional<List<String>> getAppType() {
        return appType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListClientsRequest && equalTo((ListClientsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListClientsRequest other) {
        return fields.equals(other.fields)
                && includeFields.equals(other.includeFields)
                && page.equals(other.page)
                && perPage.equals(other.perPage)
                && includeTotals.equals(other.includeTotals)
                && isGlobal.equals(other.isGlobal)
                && isFirstParty.equals(other.isFirstParty)
                && appType.equals(other.appType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.fields,
                this.includeFields,
                this.page,
                this.perPage,
                this.includeTotals,
                this.isGlobal,
                this.isFirstParty,
                this.appType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> fields = Optional.empty();

        private Optional<Boolean> includeFields = Optional.empty();

        private Optional<Integer> page = Optional.empty();

        private Optional<Integer> perPage = Optional.empty();

        private Optional<Boolean> includeTotals = Optional.empty();

        private Optional<Boolean> isGlobal = Optional.empty();

        private Optional<Boolean> isFirstParty = Optional.empty();

        private Optional<List<String>> appType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListClientsRequest other) {
            fields(other.getFields());
            includeFields(other.getIncludeFields());
            page(other.getPage());
            perPage(other.getPerPage());
            includeTotals(other.getIncludeTotals());
            isGlobal(other.getIsGlobal());
            isFirstParty(other.getIsFirstParty());
            appType(other.getAppType());
            return this;
        }

        /**
         * <p>Comma-separated list of fields to include</p>
         */
        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Optional<String> fields) {
            this.fields = fields;
            return this;
        }

        public Builder fields(String fields) {
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * <p>Whether specified fields are included or excluded</p>
         */
        @JsonSetter(value = "include_fields", nulls = Nulls.SKIP)
        public Builder includeFields(Optional<Boolean> includeFields) {
            this.includeFields = includeFields;
            return this;
        }

        public Builder includeFields(Boolean includeFields) {
            this.includeFields = Optional.ofNullable(includeFields);
            return this;
        }

        /**
         * <p>Page number (zero-based)</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>Number of results per page</p>
         */
        @JsonSetter(value = "per_page", nulls = Nulls.SKIP)
        public Builder perPage(Optional<Integer> perPage) {
            this.perPage = perPage;
            return this;
        }

        public Builder perPage(Integer perPage) {
            this.perPage = Optional.ofNullable(perPage);
            return this;
        }

        /**
         * <p>Include total count in response</p>
         */
        @JsonSetter(value = "include_totals", nulls = Nulls.SKIP)
        public Builder includeTotals(Optional<Boolean> includeTotals) {
            this.includeTotals = includeTotals;
            return this;
        }

        public Builder includeTotals(Boolean includeTotals) {
            this.includeTotals = Optional.ofNullable(includeTotals);
            return this;
        }

        /**
         * <p>Filter by global clients</p>
         */
        @JsonSetter(value = "is_global", nulls = Nulls.SKIP)
        public Builder isGlobal(Optional<Boolean> isGlobal) {
            this.isGlobal = isGlobal;
            return this;
        }

        public Builder isGlobal(Boolean isGlobal) {
            this.isGlobal = Optional.ofNullable(isGlobal);
            return this;
        }

        /**
         * <p>Filter by first party clients</p>
         */
        @JsonSetter(value = "is_first_party", nulls = Nulls.SKIP)
        public Builder isFirstParty(Optional<Boolean> isFirstParty) {
            this.isFirstParty = isFirstParty;
            return this;
        }

        public Builder isFirstParty(Boolean isFirstParty) {
            this.isFirstParty = Optional.ofNullable(isFirstParty);
            return this;
        }

        /**
         * <p>Filter by application type (spa, native, regular_web, non_interactive)</p>
         */
        @JsonSetter(value = "app_type", nulls = Nulls.SKIP)
        public Builder appType(Optional<List<String>> appType) {
            this.appType = appType;
            return this;
        }

        public Builder appType(List<String> appType) {
            this.appType = Optional.ofNullable(appType);
            return this;
        }

        public ListClientsRequest build() {
            return new ListClientsRequest(
                    fields,
                    includeFields,
                    page,
                    perPage,
                    includeTotals,
                    isGlobal,
                    isFirstParty,
                    appType,
                    additionalProperties);
        }
    }
}
