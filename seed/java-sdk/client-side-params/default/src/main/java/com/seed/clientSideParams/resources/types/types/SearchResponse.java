/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.types.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchResponse.Builder.class)
public final class SearchResponse {
    private final List<Resource> results;

    private final Optional<Integer> total;

    private final Optional<Integer> nextOffset;

    private final Map<String, Object> additionalProperties;

    private SearchResponse(
            List<Resource> results,
            Optional<Integer> total,
            Optional<Integer> nextOffset,
            Map<String, Object> additionalProperties) {
        this.results = results;
        this.total = total;
        this.nextOffset = nextOffset;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("results")
    public List<Resource> getResults() {
        return results;
    }

    @JsonProperty("total")
    public Optional<Integer> getTotal() {
        return total;
    }

    @JsonProperty("next_offset")
    public Optional<Integer> getNextOffset() {
        return nextOffset;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchResponse && equalTo((SearchResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchResponse other) {
        return results.equals(other.results) && total.equals(other.total) && nextOffset.equals(other.nextOffset);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.results, this.total, this.nextOffset);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Resource> results = new ArrayList<>();

        private Optional<Integer> total = Optional.empty();

        private Optional<Integer> nextOffset = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SearchResponse other) {
            results(other.getResults());
            total(other.getTotal());
            nextOffset(other.getNextOffset());
            return this;
        }

        @JsonSetter(value = "results", nulls = Nulls.SKIP)
        public Builder results(List<Resource> results) {
            this.results.clear();
            this.results.addAll(results);
            return this;
        }

        public Builder addResults(Resource results) {
            this.results.add(results);
            return this;
        }

        public Builder addAllResults(List<Resource> results) {
            if (results != null) {
                this.results.addAll(results);
            }
            return this;
        }

        @JsonSetter(value = "total", nulls = Nulls.SKIP)
        public Builder total(Optional<Integer> total) {
            this.total = total;
            return this;
        }

        public Builder total(Integer total) {
            this.total = Optional.ofNullable(total);
            return this;
        }

        @JsonSetter(value = "next_offset", nulls = Nulls.SKIP)
        public Builder nextOffset(Optional<Integer> nextOffset) {
            this.nextOffset = nextOffset;
            return this;
        }

        public Builder nextOffset(Integer nextOffset) {
            this.nextOffset = Optional.ofNullable(nextOffset);
            return this;
        }

        public SearchResponse build() {
            return new SearchResponse(results, total, nextOffset, additionalProperties);
        }
    }
}
