/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.clientSideParams.resources.types.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.clientSideParams.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaginatedUserResponse.Builder.class)
public final class PaginatedUserResponse {
    private final List<User> users;

    private final int start;

    private final int limit;

    private final int length;

    private final Optional<Integer> total;

    private final Map<String, Object> additionalProperties;

    private PaginatedUserResponse(
            List<User> users,
            int start,
            int limit,
            int length,
            Optional<Integer> total,
            Map<String, Object> additionalProperties) {
        this.users = users;
        this.start = start;
        this.limit = limit;
        this.length = length;
        this.total = total;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("users")
    public List<User> getUsers() {
        return users;
    }

    @JsonProperty("start")
    public int getStart() {
        return start;
    }

    @JsonProperty("limit")
    public int getLimit() {
        return limit;
    }

    @JsonProperty("length")
    public int getLength() {
        return length;
    }

    @JsonProperty("total")
    public Optional<Integer> getTotal() {
        return total;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaginatedUserResponse && equalTo((PaginatedUserResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaginatedUserResponse other) {
        return users.equals(other.users)
                && start == other.start
                && limit == other.limit
                && length == other.length
                && total.equals(other.total);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.users, this.start, this.limit, this.length, this.total);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StartStage builder() {
        return new Builder();
    }

    public interface StartStage {
        LimitStage start(int start);

        Builder from(PaginatedUserResponse other);
    }

    public interface LimitStage {
        LengthStage limit(int limit);
    }

    public interface LengthStage {
        _FinalStage length(int length);
    }

    public interface _FinalStage {
        PaginatedUserResponse build();

        _FinalStage users(List<User> users);

        _FinalStage addUsers(User users);

        _FinalStage addAllUsers(List<User> users);

        _FinalStage total(Optional<Integer> total);

        _FinalStage total(Integer total);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements StartStage, LimitStage, LengthStage, _FinalStage {
        private int start;

        private int limit;

        private int length;

        private Optional<Integer> total = Optional.empty();

        private List<User> users = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaginatedUserResponse other) {
            users(other.getUsers());
            start(other.getStart());
            limit(other.getLimit());
            length(other.getLength());
            total(other.getTotal());
            return this;
        }

        @java.lang.Override
        @JsonSetter("start")
        public LimitStage start(int start) {
            this.start = start;
            return this;
        }

        @java.lang.Override
        @JsonSetter("limit")
        public LengthStage limit(int limit) {
            this.limit = limit;
            return this;
        }

        @java.lang.Override
        @JsonSetter("length")
        public _FinalStage length(int length) {
            this.length = length;
            return this;
        }

        @java.lang.Override
        public _FinalStage total(Integer total) {
            this.total = Optional.ofNullable(total);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "total", nulls = Nulls.SKIP)
        public _FinalStage total(Optional<Integer> total) {
            this.total = total;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllUsers(List<User> users) {
            if (users != null) {
                this.users.addAll(users);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addUsers(User users) {
            this.users.add(users);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "users", nulls = Nulls.SKIP)
        public _FinalStage users(List<User> users) {
            this.users.clear();
            this.users.addAll(users);
            return this;
        }

        @java.lang.Override
        public PaginatedUserResponse build() {
            return new PaginatedUserResponse(users, start, limit, length, total, additionalProperties);
        }
    }
}
