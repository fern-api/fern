/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.basicAuthEnvironmentVariables.resources.basicauth;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.seed.basicAuthEnvironmentVariables.core.ClientOptions;
import com.seed.basicAuthEnvironmentVariables.core.MediaTypes;
import com.seed.basicAuthEnvironmentVariables.core.ObjectMappers;
import com.seed.basicAuthEnvironmentVariables.core.RequestOptions;
import com.seed.basicAuthEnvironmentVariables.core.SeedBasicAuthEnvironmentVariablesApiException;
import com.seed.basicAuthEnvironmentVariables.core.SeedBasicAuthEnvironmentVariablesException;
import com.seed.basicAuthEnvironmentVariables.core.SeedBasicAuthEnvironmentVariablesHttpResponse;
import com.seed.basicAuthEnvironmentVariables.resources.errors.errors.BadRequest;
import com.seed.basicAuthEnvironmentVariables.resources.errors.errors.UnauthorizedRequest;
import com.seed.basicAuthEnvironmentVariables.resources.errors.types.UnauthorizedRequestErrorBody;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawBasicAuthClient {
    protected final ClientOptions clientOptions;

    public AsyncRawBasicAuthClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * GET request with basic auth scheme
     */
    public CompletableFuture<SeedBasicAuthEnvironmentVariablesHttpResponse<Boolean>> getWithBasicAuth() {
        return getWithBasicAuth(null);
    }

    /**
     * GET request with basic auth scheme
     */
    public CompletableFuture<SeedBasicAuthEnvironmentVariablesHttpResponse<Boolean>> getWithBasicAuth(
            RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("basic-auth")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedBasicAuthEnvironmentVariablesHttpResponse<Boolean>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedBasicAuthEnvironmentVariablesHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), boolean.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        if (response.code() == 401) {
                            future.completeExceptionally(new UnauthorizedRequest(
                                    ObjectMappers.JSON_MAPPER.readValue(
                                            responseBodyString, UnauthorizedRequestErrorBody.class),
                                    response));
                            return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new SeedBasicAuthEnvironmentVariablesApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedBasicAuthEnvironmentVariablesException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new SeedBasicAuthEnvironmentVariablesException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * POST request with basic auth scheme
     */
    public CompletableFuture<SeedBasicAuthEnvironmentVariablesHttpResponse<Boolean>> postWithBasicAuth(Object request) {
        return postWithBasicAuth(request, null);
    }

    /**
     * POST request with basic auth scheme
     */
    public CompletableFuture<SeedBasicAuthEnvironmentVariablesHttpResponse<Boolean>> postWithBasicAuth(
            Object request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("basic-auth")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedBasicAuthEnvironmentVariablesException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedBasicAuthEnvironmentVariablesHttpResponse<Boolean>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedBasicAuthEnvironmentVariablesHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), boolean.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequest(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedRequest(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, UnauthorizedRequestErrorBody.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new SeedBasicAuthEnvironmentVariablesApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedBasicAuthEnvironmentVariablesException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new SeedBasicAuthEnvironmentVariablesException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
