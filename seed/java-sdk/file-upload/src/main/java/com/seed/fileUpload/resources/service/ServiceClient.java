/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.fileUpload.resources.service;

import com.seed.fileUpload.core.ClientOptions;
import com.seed.fileUpload.core.ObjectMappers;
import com.seed.fileUpload.core.QueryStringMapper;
import com.seed.fileUpload.core.RequestOptions;
import com.seed.fileUpload.core.SeedFileUploadApiException;
import com.seed.fileUpload.core.SeedFileUploadException;
import com.seed.fileUpload.resources.service.requests.JustFileRequest;
import com.seed.fileUpload.resources.service.requests.JustFileWithQueryParamsRequest;
import com.seed.fileUpload.resources.service.requests.MyRequest;
import com.seed.fileUpload.resources.service.requests.WithContentTypeRequest;
import com.seed.fileUpload.resources.service.requests.WithFormEncodingRequest;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class ServiceClient {
    protected final ClientOptions clientOptions;

    public ServiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public void post(
            File file, File fileList, Optional<File> maybeFile, Optional<File> maybeFileList, MyRequest request) {
        post(file, fileList, maybeFile, maybeFileList, request, null);
    }

    public void post(
            File file,
            File fileList,
            Optional<File> maybeFile,
            Optional<File> maybeFileList,
            MyRequest request,
            RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            if (request.getMaybeString().isPresent()) {
                QueryStringMapper.addFormDataPart(body, "maybe_string", request.getMaybeString());
            }
            QueryStringMapper.addFormDataPart(body, "integer", request.getInteger());
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(fileMimeTypeMediaType, file));
            String fileListMimeType = Files.probeContentType(fileList.toPath());
            MediaType fileListMimeTypeMediaType = fileListMimeType != null ? MediaType.parse(fileListMimeType) : null;
            body.addFormDataPart(
                    "file_list", fileList.getName(), RequestBody.create(fileListMimeTypeMediaType, fileList));
            if (maybeFile.isPresent()) {
                String maybeFileMimeType =
                        Files.probeContentType(maybeFile.get().toPath());
                MediaType maybeFileMimeTypeMediaType =
                        maybeFileMimeType != null ? MediaType.parse(maybeFileMimeType) : null;
                body.addFormDataPart(
                        "maybe_file",
                        maybeFile.get().getName(),
                        RequestBody.create(maybeFileMimeTypeMediaType, maybeFile.get()));
            }
            if (maybeFileList.isPresent()) {
                String maybeFileListMimeType =
                        Files.probeContentType(maybeFileList.get().toPath());
                MediaType maybeFileListMimeTypeMediaType =
                        maybeFileListMimeType != null ? MediaType.parse(maybeFileListMimeType) : null;
                body.addFormDataPart(
                        "maybe_file_list",
                        maybeFileList.get().getName(),
                        RequestBody.create(maybeFileListMimeTypeMediaType, maybeFileList.get()));
            }
            if (request.getMaybeInteger().isPresent()) {
                QueryStringMapper.addFormDataPart(body, "maybe_integer", request.getMaybeInteger());
            }
            if (request.getOptionalListOfStrings().isPresent()) {
                QueryStringMapper.addFormDataPart(body, "optional_list_of_strings", request.getOptionalListOfStrings());
            }
            QueryStringMapper.addFormDataPart(body, "list_of_objects", request.getListOfObjects());
            if (request.getOptionalMetadata().isPresent()) {
                QueryStringMapper.addFormDataPart(body, "optional_metadata", request.getOptionalMetadata());
            }
            if (request.getOptionalObjectType().isPresent()) {
                QueryStringMapper.addFormDataPart(body, "optional_object_type", request.getOptionalObjectType());
            }
            if (request.getOptionalId().isPresent()) {
                QueryStringMapper.addFormDataPart(body, "optional_id", request.getOptionalId());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return;
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedFileUploadApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedFileUploadException("Network error executing HTTP request", e);
        }
    }

    public void justFile(File file, JustFileRequest request) {
        justFile(file, request, null);
    }

    public void justFile(File file, JustFileRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("just-file")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(fileMimeTypeMediaType, file));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return;
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedFileUploadApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedFileUploadException("Network error executing HTTP request", e);
        }
    }

    public void justFileWithQueryParams(File file, JustFileWithQueryParamsRequest request) {
        justFileWithQueryParams(file, request, null);
    }

    public void justFileWithQueryParams(
            File file, JustFileWithQueryParamsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("just-file-with-query-params");
        if (request.getMaybeString().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "maybeString", request.getMaybeString().get());
        }
        QueryStringMapper.addQueryParameter(httpUrl, "integer", Integer.toString(request.getInteger()));
        if (request.getMaybeInteger().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "maybeInteger", request.getMaybeInteger().get().toString());
        }
        QueryStringMapper.addQueryParameter(httpUrl, "listOfStrings", request.getListOfStrings());
        if (request.getOptionalListOfStrings().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "optionalListOfStrings",
                    request.getOptionalListOfStrings().get());
        }
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(fileMimeTypeMediaType, file));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return;
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedFileUploadApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedFileUploadException("Network error executing HTTP request", e);
        }
    }

    public void withContentType(File file, WithContentTypeRequest request) {
        withContentType(file, request, null);
    }

    public void withContentType(File file, WithContentTypeRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("with-content-type")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(fileMimeTypeMediaType, file));
            QueryStringMapper.addFormDataPart(body, "foo", request.getFoo());
            QueryStringMapper.addFormDataPart(body, "bar", request.getBar());
            if (request.getFooBar().isPresent()) {
                QueryStringMapper.addFormDataPart(body, "foo_bar", request.getFooBar());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return;
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedFileUploadApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedFileUploadException("Network error executing HTTP request", e);
        }
    }

    public void withFormEncoding(File file, WithFormEncodingRequest request) {
        withFormEncoding(file, request, null);
    }

    public void withFormEncoding(File file, WithFormEncodingRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("with-form-encoding")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(fileMimeTypeMediaType, file));
            QueryStringMapper.addFormDataPart(body, "foo", request.getFoo());
            QueryStringMapper.addFormDataPart(body, "bar", request.getBar());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return;
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedFileUploadApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        } catch (IOException e) {
            throw new SeedFileUploadException("Network error executing HTTP request", e);
        }
    }
}
