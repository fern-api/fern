/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.fileUpload.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.fileUpload.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OptionalArgsRequest.Builder.class)
public final class OptionalArgsRequest {
    private final String invoiceId;

    private final Optional<Object> request;

    private final Map<String, Object> additionalProperties;

    private OptionalArgsRequest(String invoiceId, Optional<Object> request, Map<String, Object> additionalProperties) {
        this.invoiceId = invoiceId;
        this.request = request;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("invoice_id")
    public String getInvoiceId() {
        return invoiceId;
    }

    @JsonProperty("request")
    public Optional<Object> getRequest() {
        return request;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OptionalArgsRequest && equalTo((OptionalArgsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OptionalArgsRequest other) {
        return invoiceId.equals(other.invoiceId) && request.equals(other.request);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.invoiceId, this.request);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InvoiceIdStage builder() {
        return new Builder();
    }

    public interface InvoiceIdStage {
        _FinalStage invoiceId(@NotNull String invoiceId);

        Builder from(OptionalArgsRequest other);
    }

    public interface _FinalStage {
        OptionalArgsRequest build();

        _FinalStage request(Optional<Object> request);

        _FinalStage request(Object request);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements InvoiceIdStage, _FinalStage {
        private String invoiceId;

        private Optional<Object> request = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(OptionalArgsRequest other) {
            invoiceId(other.getInvoiceId());
            request(other.getRequest());
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoice_id")
        public _FinalStage invoiceId(@NotNull String invoiceId) {
            this.invoiceId = Objects.requireNonNull(invoiceId, "invoiceId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage request(Object request) {
            this.request = Optional.ofNullable(request);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "request", nulls = Nulls.SKIP)
        public _FinalStage request(Optional<Object> request) {
            this.request = request;
            return this;
        }

        @java.lang.Override
        public OptionalArgsRequest build() {
            return new OptionalArgsRequest(invoiceId, request, additionalProperties);
        }
    }
}
