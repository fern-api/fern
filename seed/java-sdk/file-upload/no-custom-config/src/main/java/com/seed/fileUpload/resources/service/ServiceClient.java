/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.fileUpload.resources.service;

import com.seed.fileUpload.core.ClientOptions;
import com.seed.fileUpload.core.RequestOptions;
import com.seed.fileUpload.resources.service.requests.JustFileRequest;
import com.seed.fileUpload.resources.service.requests.JustFileWithQueryParamsRequest;
import com.seed.fileUpload.resources.service.requests.MyOtherRequest;
import com.seed.fileUpload.resources.service.requests.MyRequest;
import com.seed.fileUpload.resources.service.requests.OptionalArgsRequest;
import com.seed.fileUpload.resources.service.requests.WithContentTypeRequest;
import com.seed.fileUpload.resources.service.requests.WithFormEncodingRequest;
import java.io.File;
import java.util.Optional;

public class ServiceClient {
    protected final ClientOptions clientOptions;

    private final RawServiceClient rawClient;

    public ServiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawServiceClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawServiceClient withRawResponse() {
        return this.rawClient;
    }

    public void post(
            File file, File fileList, Optional<File> maybeFile, Optional<File> maybeFileList, MyRequest request) {
        this.rawClient.post(file, fileList, maybeFile, maybeFileList, request).body();
    }

    public void post(
            File file,
            File fileList,
            Optional<File> maybeFile,
            Optional<File> maybeFileList,
            MyRequest request,
            RequestOptions requestOptions) {
        this.rawClient
                .post(file, fileList, maybeFile, maybeFileList, request, requestOptions)
                .body();
    }

    public void justFile(File file, JustFileRequest request) {
        this.rawClient.justFile(file, request).body();
    }

    public void justFile(File file, JustFileRequest request, RequestOptions requestOptions) {
        this.rawClient.justFile(file, request, requestOptions).body();
    }

    public void justFileWithQueryParams(File file, JustFileWithQueryParamsRequest request) {
        this.rawClient.justFileWithQueryParams(file, request).body();
    }

    public void justFileWithQueryParams(
            File file, JustFileWithQueryParamsRequest request, RequestOptions requestOptions) {
        this.rawClient.justFileWithQueryParams(file, request, requestOptions).body();
    }

    public void withContentType(File file, WithContentTypeRequest request) {
        this.rawClient.withContentType(file, request).body();
    }

    public void withContentType(File file, WithContentTypeRequest request, RequestOptions requestOptions) {
        this.rawClient.withContentType(file, request, requestOptions).body();
    }

    public void withFormEncoding(File file, WithFormEncodingRequest request) {
        this.rawClient.withFormEncoding(file, request).body();
    }

    public void withFormEncoding(File file, WithFormEncodingRequest request, RequestOptions requestOptions) {
        this.rawClient.withFormEncoding(file, request, requestOptions).body();
    }

    public void withFormEncodedContainers(
            File file, File fileList, Optional<File> maybeFile, Optional<File> maybeFileList, MyOtherRequest request) {
        this.rawClient
                .withFormEncodedContainers(file, fileList, maybeFile, maybeFileList, request)
                .body();
    }

    public void withFormEncodedContainers(
            File file,
            File fileList,
            Optional<File> maybeFile,
            Optional<File> maybeFileList,
            MyOtherRequest request,
            RequestOptions requestOptions) {
        this.rawClient
                .withFormEncodedContainers(file, fileList, maybeFile, maybeFileList, request, requestOptions)
                .body();
    }

    public String optionalArgs(Optional<File> imageFile) {
        return this.rawClient.optionalArgs(imageFile).body();
    }

    public String optionalArgs(Optional<File> imageFile, OptionalArgsRequest request) {
        return this.rawClient.optionalArgs(imageFile, request).body();
    }

    public String optionalArgs(Optional<File> imageFile, OptionalArgsRequest request, RequestOptions requestOptions) {
        return this.rawClient.optionalArgs(imageFile, request, requestOptions).body();
    }
}
