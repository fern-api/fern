/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.fileUpload.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.fileUpload.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = JustFileWithQueryParamsRequest.Builder.class)
public final class JustFileWithQueryParamsRequest {
    private final Optional<String> maybeString;

    private final int integer;

    private final Optional<Integer> maybeInteger;

    private final String listOfStrings;

    private final Optional<String> optionalListOfStrings;

    private final Map<String, Object> additionalProperties;

    private JustFileWithQueryParamsRequest(
            Optional<String> maybeString,
            int integer,
            Optional<Integer> maybeInteger,
            String listOfStrings,
            Optional<String> optionalListOfStrings,
            Map<String, Object> additionalProperties) {
        this.maybeString = maybeString;
        this.integer = integer;
        this.maybeInteger = maybeInteger;
        this.listOfStrings = listOfStrings;
        this.optionalListOfStrings = optionalListOfStrings;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("maybeString")
    public Optional<String> getMaybeString() {
        return maybeString;
    }

    @JsonProperty("integer")
    public int getInteger() {
        return integer;
    }

    @JsonProperty("maybeInteger")
    public Optional<Integer> getMaybeInteger() {
        return maybeInteger;
    }

    @JsonProperty("listOfStrings")
    public String getListOfStrings() {
        return listOfStrings;
    }

    @JsonProperty("optionalListOfStrings")
    public Optional<String> getOptionalListOfStrings() {
        return optionalListOfStrings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof JustFileWithQueryParamsRequest && equalTo((JustFileWithQueryParamsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(JustFileWithQueryParamsRequest other) {
        return maybeString.equals(other.maybeString)
                && integer == other.integer
                && maybeInteger.equals(other.maybeInteger)
                && listOfStrings.equals(other.listOfStrings)
                && optionalListOfStrings.equals(other.optionalListOfStrings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.maybeString, this.integer, this.maybeInteger, this.listOfStrings, this.optionalListOfStrings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IntegerStage builder() {
        return new Builder();
    }

    public interface IntegerStage {
        ListOfStringsStage integer(int integer);

        Builder from(JustFileWithQueryParamsRequest other);
    }

    public interface ListOfStringsStage {
        _FinalStage listOfStrings(@NotNull String listOfStrings);
    }

    public interface _FinalStage {
        JustFileWithQueryParamsRequest build();

        _FinalStage maybeString(Optional<String> maybeString);

        _FinalStage maybeString(String maybeString);

        _FinalStage maybeInteger(Optional<Integer> maybeInteger);

        _FinalStage maybeInteger(Integer maybeInteger);

        _FinalStage optionalListOfStrings(Optional<String> optionalListOfStrings);

        _FinalStage optionalListOfStrings(String optionalListOfStrings);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IntegerStage, ListOfStringsStage, _FinalStage {
        private int integer;

        private String listOfStrings;

        private Optional<String> optionalListOfStrings = Optional.empty();

        private Optional<Integer> maybeInteger = Optional.empty();

        private Optional<String> maybeString = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(JustFileWithQueryParamsRequest other) {
            maybeString(other.getMaybeString());
            integer(other.getInteger());
            maybeInteger(other.getMaybeInteger());
            listOfStrings(other.getListOfStrings());
            optionalListOfStrings(other.getOptionalListOfStrings());
            return this;
        }

        @java.lang.Override
        @JsonSetter("integer")
        public ListOfStringsStage integer(int integer) {
            this.integer = integer;
            return this;
        }

        @java.lang.Override
        @JsonSetter("listOfStrings")
        public _FinalStage listOfStrings(@NotNull String listOfStrings) {
            this.listOfStrings = Objects.requireNonNull(listOfStrings, "listOfStrings must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalListOfStrings(String optionalListOfStrings) {
            this.optionalListOfStrings = Optional.ofNullable(optionalListOfStrings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalListOfStrings", nulls = Nulls.SKIP)
        public _FinalStage optionalListOfStrings(Optional<String> optionalListOfStrings) {
            this.optionalListOfStrings = optionalListOfStrings;
            return this;
        }

        @java.lang.Override
        public _FinalStage maybeInteger(Integer maybeInteger) {
            this.maybeInteger = Optional.ofNullable(maybeInteger);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maybeInteger", nulls = Nulls.SKIP)
        public _FinalStage maybeInteger(Optional<Integer> maybeInteger) {
            this.maybeInteger = maybeInteger;
            return this;
        }

        @java.lang.Override
        public _FinalStage maybeString(String maybeString) {
            this.maybeString = Optional.ofNullable(maybeString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maybeString", nulls = Nulls.SKIP)
        public _FinalStage maybeString(Optional<String> maybeString) {
            this.maybeString = maybeString;
            return this;
        }

        @java.lang.Override
        public JustFileWithQueryParamsRequest build() {
            return new JustFileWithQueryParamsRequest(
                    maybeString, integer, maybeInteger, listOfStrings, optionalListOfStrings, additionalProperties);
        }
    }
}
