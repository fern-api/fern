/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.fileUpload.resources.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.seed.fileUpload.core.ClientOptions;
import com.seed.fileUpload.core.ObjectMappers;
import com.seed.fileUpload.core.QueryStringMapper;
import com.seed.fileUpload.core.RequestOptions;
import com.seed.fileUpload.core.SeedFileUploadApiException;
import com.seed.fileUpload.core.SeedFileUploadException;
import com.seed.fileUpload.core.SeedFileUploadHttpResponse;
import com.seed.fileUpload.resources.service.requests.JustFileRequest;
import com.seed.fileUpload.resources.service.requests.JustFileWithQueryParamsRequest;
import com.seed.fileUpload.resources.service.requests.MyOtherRequest;
import com.seed.fileUpload.resources.service.requests.MyRequest;
import com.seed.fileUpload.resources.service.requests.OptionalArgsRequest;
import com.seed.fileUpload.resources.service.requests.WithContentTypeRequest;
import com.seed.fileUpload.resources.service.requests.WithFormEncodingRequest;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawServiceClient {
    protected final ClientOptions clientOptions;

    public AsyncRawServiceClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> post(
            File file, File fileList, Optional<File> maybeFile, Optional<File> maybeFileList, MyRequest request) {
        return post(file, fileList, maybeFile, maybeFileList, request, null);
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> post(
            File file,
            File fileList,
            Optional<File> maybeFile,
            Optional<File> maybeFileList,
            MyRequest request,
            RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            if (request.getMaybeString().isPresent()) {
                body.addFormDataPart(
                        "maybe_string",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getMaybeString().get()));
            }
            body.addFormDataPart("integer", ObjectMappers.JSON_MAPPER.writeValueAsString(request.getInteger()));
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
            String fileListMimeType = Files.probeContentType(fileList.toPath());
            MediaType fileListMimeTypeMediaType = fileListMimeType != null ? MediaType.parse(fileListMimeType) : null;
            body.addFormDataPart(
                    "file_list", fileList.getName(), RequestBody.create(fileList, fileListMimeTypeMediaType));
            if (maybeFile.isPresent()) {
                String maybeFileMimeType =
                        Files.probeContentType(maybeFile.get().toPath());
                MediaType maybeFileMimeTypeMediaType =
                        maybeFileMimeType != null ? MediaType.parse(maybeFileMimeType) : null;
                body.addFormDataPart(
                        "maybe_file",
                        maybeFile.get().getName(),
                        RequestBody.create(maybeFile.get(), maybeFileMimeTypeMediaType));
            }
            if (maybeFileList.isPresent()) {
                String maybeFileListMimeType =
                        Files.probeContentType(maybeFileList.get().toPath());
                MediaType maybeFileListMimeTypeMediaType =
                        maybeFileListMimeType != null ? MediaType.parse(maybeFileListMimeType) : null;
                body.addFormDataPart(
                        "maybe_file_list",
                        maybeFileList.get().getName(),
                        RequestBody.create(maybeFileList.get(), maybeFileListMimeTypeMediaType));
            }
            if (request.getMaybeInteger().isPresent()) {
                body.addFormDataPart(
                        "maybe_integer",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getMaybeInteger().get()));
            }
            if (request.getOptionalListOfStrings().isPresent()) {
                request.getOptionalListOfStrings().get().forEach(item -> {
                    try {
                        body.addFormDataPart(
                                "optional_list_of_strings", ObjectMappers.JSON_MAPPER.writeValueAsString(item));
                    } catch (JsonProcessingException e) {
                        throw new RuntimeException("Failed to write value as JSON", e);
                    }
                });
            }
            request.getListOfObjects().forEach(item -> {
                try {
                    body.addFormDataPart("list_of_objects", ObjectMappers.JSON_MAPPER.writeValueAsString(item));
                } catch (JsonProcessingException e) {
                    throw new RuntimeException("Failed to write value as JSON", e);
                }
            });
            if (request.getOptionalMetadata().isPresent()) {
                body.addFormDataPart(
                        "optional_metadata",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getOptionalMetadata().get()));
            }
            if (request.getOptionalObjectType().isPresent()) {
                body.addFormDataPart(
                        "optional_object_type",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getOptionalObjectType().get()));
            }
            if (request.getOptionalId().isPresent()) {
                body.addFormDataPart(
                        "optional_id",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getOptionalId().get()));
            }
            body.addFormDataPart(
                    "alias_object", ObjectMappers.JSON_MAPPER.writeValueAsString(request.getAliasObject()));
            request.getListOfAliasObject().forEach(item -> {
                try {
                    body.addFormDataPart("list_of_alias_object", ObjectMappers.JSON_MAPPER.writeValueAsString(item));
                } catch (JsonProcessingException e) {
                    throw new RuntimeException("Failed to write value as JSON", e);
                }
            });
            request.getAliasListOfObject().forEach(item -> {
                try {
                    body.addFormDataPart("alias_list_of_object", ObjectMappers.JSON_MAPPER.writeValueAsString(item));
                } catch (JsonProcessingException e) {
                    throw new RuntimeException("Failed to write value as JSON", e);
                }
            });
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedFileUploadHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedFileUploadHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedFileUploadApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedFileUploadException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedFileUploadException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> justFile(File file, JustFileRequest request) {
        return justFile(file, request, null);
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> justFile(
            File file, JustFileRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("just-file")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedFileUploadHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedFileUploadHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedFileUploadApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedFileUploadException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedFileUploadException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> justFileWithQueryParams(
            File file, JustFileWithQueryParamsRequest request) {
        return justFileWithQueryParams(file, request, null);
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> justFileWithQueryParams(
            File file, JustFileWithQueryParamsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("just-file-with-query-params");
        if (request.getMaybeString().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "maybeString", request.getMaybeString().get(), false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "integer", Integer.toString(request.getInteger()), false);
        if (request.getMaybeInteger().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "maybeInteger", request.getMaybeInteger().get().toString(), false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "listOfStrings", request.getListOfStrings(), false);
        if (request.getOptionalListOfStrings().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "optionalListOfStrings",
                    request.getOptionalListOfStrings().get().toString(),
                    false);
        }
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedFileUploadHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedFileUploadHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedFileUploadApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedFileUploadException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedFileUploadException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> withContentType(
            File file, WithContentTypeRequest request) {
        return withContentType(file, request, null);
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> withContentType(
            File file, WithContentTypeRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("with-content-type")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
            body.addFormDataPart("foo", ObjectMappers.JSON_MAPPER.writeValueAsString(request.getFoo()));
            body.addFormDataPart("bar", ObjectMappers.JSON_MAPPER.writeValueAsString(request.getBar()));
            if (request.getFooBar().isPresent()) {
                body.addFormDataPart(
                        "foo_bar",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getFooBar().get()));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedFileUploadHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedFileUploadHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedFileUploadApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedFileUploadException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedFileUploadException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> withFormEncoding(
            File file, WithFormEncodingRequest request) {
        return withFormEncoding(file, request, null);
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> withFormEncoding(
            File file, WithFormEncodingRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("with-form-encoding")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
            QueryStringMapper.addFormDataPart(body, "foo", request.getFoo(), false);
            QueryStringMapper.addFormDataPart(body, "bar", request.getBar(), false);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedFileUploadHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedFileUploadHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedFileUploadApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedFileUploadException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedFileUploadException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> withFormEncodedContainers(
            File file, File fileList, Optional<File> maybeFile, Optional<File> maybeFileList, MyOtherRequest request) {
        return withFormEncodedContainers(file, fileList, maybeFile, maybeFileList, request, null);
    }

    public CompletableFuture<SeedFileUploadHttpResponse<Void>> withFormEncodedContainers(
            File file,
            File fileList,
            Optional<File> maybeFile,
            Optional<File> maybeFileList,
            MyOtherRequest request,
            RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            if (request.getMaybeString().isPresent()) {
                QueryStringMapper.addFormDataPart(
                        body, "maybe_string", request.getMaybeString().get(), false);
            }
            QueryStringMapper.addFormDataPart(body, "integer", request.getInteger(), false);
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
            String fileListMimeType = Files.probeContentType(fileList.toPath());
            MediaType fileListMimeTypeMediaType = fileListMimeType != null ? MediaType.parse(fileListMimeType) : null;
            body.addFormDataPart(
                    "file_list", fileList.getName(), RequestBody.create(fileList, fileListMimeTypeMediaType));
            if (maybeFile.isPresent()) {
                String maybeFileMimeType =
                        Files.probeContentType(maybeFile.get().toPath());
                MediaType maybeFileMimeTypeMediaType =
                        maybeFileMimeType != null ? MediaType.parse(maybeFileMimeType) : null;
                body.addFormDataPart(
                        "maybe_file",
                        maybeFile.get().getName(),
                        RequestBody.create(maybeFile.get(), maybeFileMimeTypeMediaType));
            }
            if (maybeFileList.isPresent()) {
                String maybeFileListMimeType =
                        Files.probeContentType(maybeFileList.get().toPath());
                MediaType maybeFileListMimeTypeMediaType =
                        maybeFileListMimeType != null ? MediaType.parse(maybeFileListMimeType) : null;
                body.addFormDataPart(
                        "maybe_file_list",
                        maybeFileList.get().getName(),
                        RequestBody.create(maybeFileList.get(), maybeFileListMimeTypeMediaType));
            }
            if (request.getMaybeInteger().isPresent()) {
                QueryStringMapper.addFormDataPart(
                        body, "maybe_integer", request.getMaybeInteger().get(), false);
            }
            if (request.getOptionalListOfStrings().isPresent()) {
                QueryStringMapper.addFormDataPart(
                        body,
                        "optional_list_of_strings",
                        request.getOptionalListOfStrings().get(),
                        false);
            }
            QueryStringMapper.addFormDataPart(body, "list_of_objects", request.getListOfObjects(), false);
            if (request.getOptionalMetadata().isPresent()) {
                QueryStringMapper.addFormDataPart(
                        body, "optional_metadata", request.getOptionalMetadata().get(), false);
            }
            if (request.getOptionalObjectType().isPresent()) {
                QueryStringMapper.addFormDataPart(
                        body,
                        "optional_object_type",
                        request.getOptionalObjectType().get(),
                        false);
            }
            if (request.getOptionalId().isPresent()) {
                QueryStringMapper.addFormDataPart(
                        body, "optional_id", request.getOptionalId().get(), false);
            }
            QueryStringMapper.addFormDataPart(
                    body, "list_of_objects_with_optionals", request.getListOfObjectsWithOptionals(), false);
            QueryStringMapper.addFormDataPart(body, "alias_object", request.getAliasObject(), false);
            QueryStringMapper.addFormDataPart(body, "list_of_alias_object", request.getListOfAliasObject(), false);
            QueryStringMapper.addFormDataPart(body, "alias_list_of_object", request.getAliasListOfObject(), false);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedFileUploadHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedFileUploadHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedFileUploadApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedFileUploadException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedFileUploadException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<SeedFileUploadHttpResponse<String>> optionalArgs(Optional<File> imageFile) {
        return optionalArgs(imageFile, OptionalArgsRequest.builder().build());
    }

    public CompletableFuture<SeedFileUploadHttpResponse<String>> optionalArgs(
            Optional<File> imageFile, OptionalArgsRequest request) {
        return optionalArgs(imageFile, request, null);
    }

    public CompletableFuture<SeedFileUploadHttpResponse<String>> optionalArgs(
            Optional<File> imageFile, OptionalArgsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("optional-args")
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            if (imageFile.isPresent()) {
                String imageFileMimeType =
                        Files.probeContentType(imageFile.get().toPath());
                MediaType imageFileMimeTypeMediaType =
                        imageFileMimeType != null ? MediaType.parse(imageFileMimeType) : null;
                body.addFormDataPart(
                        "image_file",
                        imageFile.get().getName(),
                        RequestBody.create(imageFile.get(), imageFileMimeTypeMediaType));
            }
            if (request.getRequest().isPresent()) {
                body.addFormDataPart(
                        "request",
                        ObjectMappers.JSON_MAPPER.writeValueAsString(
                                request.getRequest().get()));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedFileUploadHttpResponse<String>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedFileUploadHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), String.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedFileUploadApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedFileUploadException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedFileUploadException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
