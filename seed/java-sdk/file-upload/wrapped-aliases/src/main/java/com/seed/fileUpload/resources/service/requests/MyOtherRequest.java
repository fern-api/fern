/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.fileUpload.resources.service.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.fileUpload.core.ObjectMappers;
import com.seed.fileUpload.resources.service.types.Id;
import com.seed.fileUpload.resources.service.types.MyAliasObject;
import com.seed.fileUpload.resources.service.types.MyCollectionAliasObject;
import com.seed.fileUpload.resources.service.types.MyObject;
import com.seed.fileUpload.resources.service.types.MyObjectWithOptional;
import com.seed.fileUpload.resources.service.types.ObjectType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MyOtherRequest.Builder.class)
public final class MyOtherRequest {
    private final Optional<String> maybeString;

    private final int integer;

    private final Optional<Integer> maybeInteger;

    private final Optional<List<String>> optionalListOfStrings;

    private final List<MyObject> listOfObjects;

    private final Optional<Object> optionalMetadata;

    private final Optional<ObjectType> optionalObjectType;

    private final Optional<Id> optionalId;

    private final List<MyObjectWithOptional> listOfObjectsWithOptionals;

    private final MyAliasObject aliasObject;

    private final List<MyAliasObject> listOfAliasObject;

    private final MyCollectionAliasObject aliasListOfObject;

    private final Map<String, Object> additionalProperties;

    private MyOtherRequest(
            Optional<String> maybeString,
            int integer,
            Optional<Integer> maybeInteger,
            Optional<List<String>> optionalListOfStrings,
            List<MyObject> listOfObjects,
            Optional<Object> optionalMetadata,
            Optional<ObjectType> optionalObjectType,
            Optional<Id> optionalId,
            List<MyObjectWithOptional> listOfObjectsWithOptionals,
            MyAliasObject aliasObject,
            List<MyAliasObject> listOfAliasObject,
            MyCollectionAliasObject aliasListOfObject,
            Map<String, Object> additionalProperties) {
        this.maybeString = maybeString;
        this.integer = integer;
        this.maybeInteger = maybeInteger;
        this.optionalListOfStrings = optionalListOfStrings;
        this.listOfObjects = listOfObjects;
        this.optionalMetadata = optionalMetadata;
        this.optionalObjectType = optionalObjectType;
        this.optionalId = optionalId;
        this.listOfObjectsWithOptionals = listOfObjectsWithOptionals;
        this.aliasObject = aliasObject;
        this.listOfAliasObject = listOfAliasObject;
        this.aliasListOfObject = aliasListOfObject;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("maybe_string")
    public Optional<String> getMaybeString() {
        return maybeString;
    }

    @JsonProperty("integer")
    public int getInteger() {
        return integer;
    }

    @JsonProperty("maybe_integer")
    public Optional<Integer> getMaybeInteger() {
        return maybeInteger;
    }

    @JsonProperty("optional_list_of_strings")
    public Optional<List<String>> getOptionalListOfStrings() {
        return optionalListOfStrings;
    }

    @JsonProperty("list_of_objects")
    public List<MyObject> getListOfObjects() {
        return listOfObjects;
    }

    @JsonProperty("optional_metadata")
    public Optional<Object> getOptionalMetadata() {
        return optionalMetadata;
    }

    @JsonProperty("optional_object_type")
    public Optional<ObjectType> getOptionalObjectType() {
        return optionalObjectType;
    }

    @JsonProperty("optional_id")
    public Optional<Id> getOptionalId() {
        return optionalId;
    }

    @JsonProperty("list_of_objects_with_optionals")
    public List<MyObjectWithOptional> getListOfObjectsWithOptionals() {
        return listOfObjectsWithOptionals;
    }

    @JsonProperty("alias_object")
    public MyAliasObject getAliasObject() {
        return aliasObject;
    }

    @JsonProperty("list_of_alias_object")
    public List<MyAliasObject> getListOfAliasObject() {
        return listOfAliasObject;
    }

    @JsonProperty("alias_list_of_object")
    public MyCollectionAliasObject getAliasListOfObject() {
        return aliasListOfObject;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MyOtherRequest && equalTo((MyOtherRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MyOtherRequest other) {
        return maybeString.equals(other.maybeString)
                && integer == other.integer
                && maybeInteger.equals(other.maybeInteger)
                && optionalListOfStrings.equals(other.optionalListOfStrings)
                && listOfObjects.equals(other.listOfObjects)
                && optionalMetadata.equals(other.optionalMetadata)
                && optionalObjectType.equals(other.optionalObjectType)
                && optionalId.equals(other.optionalId)
                && listOfObjectsWithOptionals.equals(other.listOfObjectsWithOptionals)
                && aliasObject.equals(other.aliasObject)
                && listOfAliasObject.equals(other.listOfAliasObject)
                && aliasListOfObject.equals(other.aliasListOfObject);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.maybeString,
                this.integer,
                this.maybeInteger,
                this.optionalListOfStrings,
                this.listOfObjects,
                this.optionalMetadata,
                this.optionalObjectType,
                this.optionalId,
                this.listOfObjectsWithOptionals,
                this.aliasObject,
                this.listOfAliasObject,
                this.aliasListOfObject);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IntegerStage builder() {
        return new Builder();
    }

    public interface IntegerStage {
        AliasObjectStage integer(int integer);

        Builder from(MyOtherRequest other);
    }

    public interface AliasObjectStage {
        AliasListOfObjectStage aliasObject(@NotNull MyAliasObject aliasObject);
    }

    public interface AliasListOfObjectStage {
        _FinalStage aliasListOfObject(@NotNull MyCollectionAliasObject aliasListOfObject);
    }

    public interface _FinalStage {
        MyOtherRequest build();

        _FinalStage maybeString(Optional<String> maybeString);

        _FinalStage maybeString(String maybeString);

        _FinalStage maybeInteger(Optional<Integer> maybeInteger);

        _FinalStage maybeInteger(Integer maybeInteger);

        _FinalStage optionalListOfStrings(Optional<List<String>> optionalListOfStrings);

        _FinalStage optionalListOfStrings(List<String> optionalListOfStrings);

        _FinalStage listOfObjects(List<MyObject> listOfObjects);

        _FinalStage addListOfObjects(MyObject listOfObjects);

        _FinalStage addAllListOfObjects(List<MyObject> listOfObjects);

        _FinalStage optionalMetadata(Optional<Object> optionalMetadata);

        _FinalStage optionalMetadata(Object optionalMetadata);

        _FinalStage optionalObjectType(Optional<ObjectType> optionalObjectType);

        _FinalStage optionalObjectType(ObjectType optionalObjectType);

        _FinalStage optionalId(Optional<Id> optionalId);

        _FinalStage optionalId(Id optionalId);

        _FinalStage listOfObjectsWithOptionals(List<MyObjectWithOptional> listOfObjectsWithOptionals);

        _FinalStage addListOfObjectsWithOptionals(MyObjectWithOptional listOfObjectsWithOptionals);

        _FinalStage addAllListOfObjectsWithOptionals(List<MyObjectWithOptional> listOfObjectsWithOptionals);

        _FinalStage listOfAliasObject(List<MyAliasObject> listOfAliasObject);

        _FinalStage addListOfAliasObject(MyAliasObject listOfAliasObject);

        _FinalStage addAllListOfAliasObject(List<MyAliasObject> listOfAliasObject);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IntegerStage, AliasObjectStage, AliasListOfObjectStage, _FinalStage {
        private int integer;

        private MyAliasObject aliasObject;

        private MyCollectionAliasObject aliasListOfObject;

        private List<MyAliasObject> listOfAliasObject = new ArrayList<>();

        private List<MyObjectWithOptional> listOfObjectsWithOptionals = new ArrayList<>();

        private Optional<Id> optionalId = Optional.empty();

        private Optional<ObjectType> optionalObjectType = Optional.empty();

        private Optional<Object> optionalMetadata = Optional.empty();

        private List<MyObject> listOfObjects = new ArrayList<>();

        private Optional<List<String>> optionalListOfStrings = Optional.empty();

        private Optional<Integer> maybeInteger = Optional.empty();

        private Optional<String> maybeString = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(MyOtherRequest other) {
            maybeString(other.getMaybeString());
            integer(other.getInteger());
            maybeInteger(other.getMaybeInteger());
            optionalListOfStrings(other.getOptionalListOfStrings());
            listOfObjects(other.getListOfObjects());
            optionalMetadata(other.getOptionalMetadata());
            optionalObjectType(other.getOptionalObjectType());
            optionalId(other.getOptionalId());
            listOfObjectsWithOptionals(other.getListOfObjectsWithOptionals());
            aliasObject(other.getAliasObject());
            listOfAliasObject(other.getListOfAliasObject());
            aliasListOfObject(other.getAliasListOfObject());
            return this;
        }

        @java.lang.Override
        @JsonSetter("integer")
        public AliasObjectStage integer(int integer) {
            this.integer = integer;
            return this;
        }

        @java.lang.Override
        @JsonSetter("alias_object")
        public AliasListOfObjectStage aliasObject(@NotNull MyAliasObject aliasObject) {
            this.aliasObject = Objects.requireNonNull(aliasObject, "aliasObject must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("alias_list_of_object")
        public _FinalStage aliasListOfObject(@NotNull MyCollectionAliasObject aliasListOfObject) {
            this.aliasListOfObject = Objects.requireNonNull(aliasListOfObject, "aliasListOfObject must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllListOfAliasObject(List<MyAliasObject> listOfAliasObject) {
            this.listOfAliasObject.addAll(listOfAliasObject);
            return this;
        }

        @java.lang.Override
        public _FinalStage addListOfAliasObject(MyAliasObject listOfAliasObject) {
            this.listOfAliasObject.add(listOfAliasObject);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "list_of_alias_object", nulls = Nulls.SKIP)
        public _FinalStage listOfAliasObject(List<MyAliasObject> listOfAliasObject) {
            this.listOfAliasObject.clear();
            this.listOfAliasObject.addAll(listOfAliasObject);
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllListOfObjectsWithOptionals(List<MyObjectWithOptional> listOfObjectsWithOptionals) {
            this.listOfObjectsWithOptionals.addAll(listOfObjectsWithOptionals);
            return this;
        }

        @java.lang.Override
        public _FinalStage addListOfObjectsWithOptionals(MyObjectWithOptional listOfObjectsWithOptionals) {
            this.listOfObjectsWithOptionals.add(listOfObjectsWithOptionals);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "list_of_objects_with_optionals", nulls = Nulls.SKIP)
        public _FinalStage listOfObjectsWithOptionals(List<MyObjectWithOptional> listOfObjectsWithOptionals) {
            this.listOfObjectsWithOptionals.clear();
            this.listOfObjectsWithOptionals.addAll(listOfObjectsWithOptionals);
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalId(Id optionalId) {
            this.optionalId = Optional.ofNullable(optionalId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optional_id", nulls = Nulls.SKIP)
        public _FinalStage optionalId(Optional<Id> optionalId) {
            this.optionalId = optionalId;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalObjectType(ObjectType optionalObjectType) {
            this.optionalObjectType = Optional.ofNullable(optionalObjectType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optional_object_type", nulls = Nulls.SKIP)
        public _FinalStage optionalObjectType(Optional<ObjectType> optionalObjectType) {
            this.optionalObjectType = optionalObjectType;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalMetadata(Object optionalMetadata) {
            this.optionalMetadata = Optional.ofNullable(optionalMetadata);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optional_metadata", nulls = Nulls.SKIP)
        public _FinalStage optionalMetadata(Optional<Object> optionalMetadata) {
            this.optionalMetadata = optionalMetadata;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllListOfObjects(List<MyObject> listOfObjects) {
            this.listOfObjects.addAll(listOfObjects);
            return this;
        }

        @java.lang.Override
        public _FinalStage addListOfObjects(MyObject listOfObjects) {
            this.listOfObjects.add(listOfObjects);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "list_of_objects", nulls = Nulls.SKIP)
        public _FinalStage listOfObjects(List<MyObject> listOfObjects) {
            this.listOfObjects.clear();
            this.listOfObjects.addAll(listOfObjects);
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalListOfStrings(List<String> optionalListOfStrings) {
            this.optionalListOfStrings = Optional.ofNullable(optionalListOfStrings);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optional_list_of_strings", nulls = Nulls.SKIP)
        public _FinalStage optionalListOfStrings(Optional<List<String>> optionalListOfStrings) {
            this.optionalListOfStrings = optionalListOfStrings;
            return this;
        }

        @java.lang.Override
        public _FinalStage maybeInteger(Integer maybeInteger) {
            this.maybeInteger = Optional.ofNullable(maybeInteger);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maybe_integer", nulls = Nulls.SKIP)
        public _FinalStage maybeInteger(Optional<Integer> maybeInteger) {
            this.maybeInteger = maybeInteger;
            return this;
        }

        @java.lang.Override
        public _FinalStage maybeString(String maybeString) {
            this.maybeString = Optional.ofNullable(maybeString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maybe_string", nulls = Nulls.SKIP)
        public _FinalStage maybeString(Optional<String> maybeString) {
            this.maybeString = maybeString;
            return this;
        }

        @java.lang.Override
        public MyOtherRequest build() {
            return new MyOtherRequest(
                    maybeString,
                    integer,
                    maybeInteger,
                    optionalListOfStrings,
                    listOfObjects,
                    optionalMetadata,
                    optionalObjectType,
                    optionalId,
                    listOfObjectsWithOptionals,
                    aliasObject,
                    listOfAliasObject,
                    aliasListOfObject,
                    additionalProperties);
        }
    }
}
