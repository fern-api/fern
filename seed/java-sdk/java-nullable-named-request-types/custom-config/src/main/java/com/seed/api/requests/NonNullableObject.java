/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NonNullableObject.Builder.class)
public final class NonNullableObject {
    private final String id;

    private final Optional<String> nonNullableObjectId;

    private final Optional<String> name;

    private final Optional<Integer> age;

    private final Map<String, Object> additionalProperties;

    private NonNullableObject(
            String id,
            Optional<String> nonNullableObjectId,
            Optional<String> name,
            Optional<Integer> age,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.nonNullableObjectId = nonNullableObjectId;
        this.name = name;
        this.age = age;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("id")
    public Optional<String> getNonNullableObjectId() {
        return nonNullableObjectId;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("age")
    public Optional<Integer> getAge() {
        return age;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NonNullableObject && equalTo((NonNullableObject) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NonNullableObject other) {
        return id.equals(other.id)
                && nonNullableObjectId.equals(other.nonNullableObjectId)
                && name.equals(other.name)
                && age.equals(other.age);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.nonNullableObjectId, this.name, this.age);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        _FinalStage id(@NotNull String id);

        Builder from(NonNullableObject other);
    }

    public interface _FinalStage {
        NonNullableObject build();

        _FinalStage nonNullableObjectId(Optional<String> nonNullableObjectId);

        _FinalStage nonNullableObjectId(String nonNullableObjectId);

        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);

        _FinalStage age(Optional<Integer> age);

        _FinalStage age(Integer age);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, _FinalStage {
        private String id;

        private Optional<Integer> age = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> nonNullableObjectId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NonNullableObject other) {
            id(other.getId());
            nonNullableObjectId(other.getNonNullableObjectId());
            name(other.getName());
            age(other.getAge());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage age(Integer age) {
            this.age = Optional.ofNullable(age);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "age", nulls = Nulls.SKIP)
        public _FinalStage age(Optional<Integer> age) {
            this.age = age;
            return this;
        }

        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        public _FinalStage nonNullableObjectId(String nonNullableObjectId) {
            this.nonNullableObjectId = Optional.ofNullable(nonNullableObjectId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage nonNullableObjectId(Optional<String> nonNullableObjectId) {
            this.nonNullableObjectId = nonNullableObjectId;
            return this;
        }

        @java.lang.Override
        public NonNullableObject build() {
            return new NonNullableObject(id, nonNullableObjectId, name, age, additionalProperties);
        }
    }
}
