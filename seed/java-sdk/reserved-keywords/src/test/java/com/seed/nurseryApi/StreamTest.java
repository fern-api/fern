/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nurseryApi;

import static org.junit.jupiter.api.Assertions.*;

import com.seed.nurseryApi.core.ObjectMappers;
import com.seed.nurseryApi.core.Stream;
import java.io.IOException;
import java.io.StringReader;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.junit.jupiter.api.Test;

public final class StreamTest {
    @Test
    public void testJsonStream() {
        List<Map> messages = List.of(Map.of("message", "hello"), Map.of("message", "world"));
        List jsonStrings = messages.stream().map(StreamTest::mapToJson).toList();
        String input = String.join("\n", jsonStrings);
        StringReader jsonInput = new StringReader(input);
        Stream<Map> jsonStream = Stream.fromJson(Map.class, jsonInput);
        int expectedMessages = 2;
        int actualMessages = 0;
        for (Map jsonObject : jsonStream) {
            actualMessages++;
            assertTrue(jsonObject.containsKey("message"));
        }
        assertEquals(expectedMessages, actualMessages);
    }

    @Test
    public void testSseStream() {
        List<Map> events = List.of(Map.of("event", "start"), Map.of("event", "end"));
        List sseStrings = events.stream().map(StreamTest::mapToSse).toList();
        String input = String.join("\n" + "\n", sseStrings);
        StringReader sseInput = new StringReader(input);
        Stream<Map> sseStream = Stream.fromSse(Map.class, sseInput);
        int expectedEvents = 2;
        int actualEvents = 0;
        for (Map eventData : sseStream) {
            actualEvents++;
            assertTrue(eventData.containsKey("event"));
        }
        assertEquals(expectedEvents, actualEvents);
    }

    @Test
    public void testSseStreamWithTerminator() {
        List<Map> events = List.of(Map.of("message", "first"), Map.of("message", "second"));
        List sseStrings = events.stream().map(StreamTest::mapToSse).collect(Collectors.toList());
        sseStrings.add("data: [DONE]");
        String input = String.join("\n" + "\n", sseStrings);
        StringReader sseInput = new StringReader(input);
        Stream<Map> sseStream = Stream.fromSse(Map.class, sseInput, "[DONE]");
        int expectedEvents = 2;
        int actualEvents = 0;
        for (Map eventData : sseStream) {
            actualEvents++;
            assertTrue(eventData.containsKey("message"));
        }
        assertEquals(expectedEvents, actualEvents);
    }

    @Test
    public void testStreamResourceManagement() throws IOException {
        StringReader testInput = new StringReader("{\"test\":\"data\"}");
        Stream<Map> testStream = Stream.fromJson(Map.class, testInput);
        testStream.close();
        assertFalse(testStream.iterator().hasNext());
    }

    private static String mapToJson(Map map) {
        try {
            return ObjectMappers.JSON_MAPPER.writeValueAsString(map);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private static String mapToSse(Map map) {
        return "data: " + mapToJson(map);
    }
}
