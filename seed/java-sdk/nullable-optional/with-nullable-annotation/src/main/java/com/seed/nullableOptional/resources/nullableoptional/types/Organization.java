/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Organization.Builder.class)
public final class Organization {
    private final String id;

    private final String name;

    private final String domain;

    private final Optional<Integer> employeeCount;

    private final Map<String, Object> additionalProperties;

    private Organization(
            String id,
            String name,
            String domain,
            Optional<Integer> employeeCount,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.domain = domain;
        this.employeeCount = employeeCount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @Nullable
    @JsonIgnore
    public String getDomain() {
        return domain;
    }

    @JsonProperty("employeeCount")
    public Optional<Integer> getEmployeeCount() {
        return employeeCount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("domain")
    private String _getDomain() {
        return domain;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Organization && equalTo((Organization) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Organization other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && domain.equals(other.domain)
                && employeeCount.equals(other.employeeCount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.domain, this.employeeCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        NameStage id(@NotNull String id);

        Builder from(Organization other);
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        Organization build();

        _FinalStage domain(@com.seed.nullableOptional.core.Nullable String domain);

        _FinalStage employeeCount(Optional<Integer> employeeCount);

        _FinalStage employeeCount(Integer employeeCount);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, NameStage, _FinalStage {
        private String id;

        private String name;

        private Optional<Integer> employeeCount = Optional.empty();

        private String domain;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Organization other) {
            id(other.getId());
            name(other.getName());
            domain(other.getDomain());
            employeeCount(other.getEmployeeCount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage employeeCount(Integer employeeCount) {
            this.employeeCount = Optional.ofNullable(employeeCount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "employeeCount", nulls = Nulls.SKIP)
        public _FinalStage employeeCount(Optional<Integer> employeeCount) {
            this.employeeCount = employeeCount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("domain")
        public _FinalStage domain(@com.seed.nullableOptional.core.Nullable String domain) {
            this.domain = domain;
            return this;
        }

        @java.lang.Override
        public Organization build() {
            return new Organization(id, name, domain, employeeCount, additionalProperties);
        }
    }
}
