/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.seed.nullableOptional.core.ClientOptions;
import com.seed.nullableOptional.core.MediaTypes;
import com.seed.nullableOptional.core.ObjectMappers;
import com.seed.nullableOptional.core.QueryStringMapper;
import com.seed.nullableOptional.core.RequestOptions;
import com.seed.nullableOptional.core.SeedNullableOptionalApiException;
import com.seed.nullableOptional.core.SeedNullableOptionalException;
import com.seed.nullableOptional.core.SeedNullableOptionalHttpResponse;
import com.seed.nullableOptional.resources.nullableoptional.requests.ListUsersRequest;
import com.seed.nullableOptional.resources.nullableoptional.requests.SearchUsersRequest;
import com.seed.nullableOptional.resources.nullableoptional.types.CreateUserRequest;
import com.seed.nullableOptional.resources.nullableoptional.types.UpdateUserRequest;
import com.seed.nullableOptional.resources.nullableoptional.types.UserResponse;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawNullableOptionalClient {
    protected final ClientOptions clientOptions;

    public AsyncRawNullableOptionalClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Get a user by ID
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> getUser(String userId) {
        return getUser(userId, null);
    }

    /**
     * Get a user by ID
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> getUser(
            String userId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api")
                .addPathSegments("users")
                .addPathSegment(userId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedNullableOptionalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UserResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedNullableOptionalApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedNullableOptionalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new SeedNullableOptionalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Create a new user
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> createUser(CreateUserRequest request) {
        return createUser(request, null);
    }

    /**
     * Create a new user
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> createUser(
            CreateUserRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api")
                .addPathSegments("users")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedNullableOptionalException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedNullableOptionalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UserResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedNullableOptionalApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedNullableOptionalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new SeedNullableOptionalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Update a user (partial update)
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> updateUser(String userId) {
        return updateUser(userId, UpdateUserRequest.builder().build());
    }

    /**
     * Update a user (partial update)
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> updateUser(
            String userId, UpdateUserRequest request) {
        return updateUser(userId, request, null);
    }

    /**
     * Update a user (partial update)
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> updateUser(
            String userId, UpdateUserRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api")
                .addPathSegments("users")
                .addPathSegment(userId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new SeedNullableOptionalException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedNullableOptionalHttpResponse<UserResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedNullableOptionalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UserResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedNullableOptionalApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedNullableOptionalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new SeedNullableOptionalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * List all users
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<List<UserResponse>>> listUsers() {
        return listUsers(ListUsersRequest.builder().build());
    }

    /**
     * List all users
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<List<UserResponse>>> listUsers(ListUsersRequest request) {
        return listUsers(request, null);
    }

    /**
     * List all users
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<List<UserResponse>>> listUsers(
            ListUsersRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api")
                .addPathSegments("users");
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getOffset().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "offset", request.getOffset().get(), false);
        }
        if (request.getIncludeDeleted().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "includeDeleted", request.getIncludeDeleted().get(), false);
        }
        if (request.getSortBy().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sortBy", request.getSortBy().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedNullableOptionalHttpResponse<List<UserResponse>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedNullableOptionalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), new TypeReference<List<UserResponse>>() {}),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedNullableOptionalApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedNullableOptionalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new SeedNullableOptionalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Search users
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<List<UserResponse>>> searchUsers(
            SearchUsersRequest request) {
        return searchUsers(request, null);
    }

    /**
     * Search users
     */
    public CompletableFuture<SeedNullableOptionalHttpResponse<List<UserResponse>>> searchUsers(
            SearchUsersRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("api")
                .addPathSegments("users/search");
        QueryStringMapper.addQueryParameter(httpUrl, "query", request.getQuery(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "department", request.getDepartment(), false);
        if (request.getRole().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "role", request.getRole().get(), false);
        }
        if (request.getIsActive().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "isActive", request.getIsActive().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedNullableOptionalHttpResponse<List<UserResponse>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedNullableOptionalHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), new TypeReference<List<UserResponse>>() {}),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedNullableOptionalApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedNullableOptionalException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new SeedNullableOptionalException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
