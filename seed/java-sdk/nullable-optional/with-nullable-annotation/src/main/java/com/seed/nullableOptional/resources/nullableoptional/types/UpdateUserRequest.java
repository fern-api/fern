/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.Nullable;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateUserRequest.Builder.class)
public final class UpdateUserRequest {
    private final Optional<String> username;

    private final Optional<String> email;

    private final Optional<String> phone;

    private final Optional<Address> address;

    private final Map<String, Object> additionalProperties;

    private UpdateUserRequest(
            Optional<String> username,
            Optional<String> email,
            Optional<String> phone,
            Optional<Address> address,
            Map<String, Object> additionalProperties) {
        this.username = username;
        this.email = email;
        this.phone = phone;
        this.address = address;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("username")
    public Optional<String> getUsername() {
        return username;
    }

    @JsonIgnore
    public Optional<String> getEmail() {
        if (email == null) {
            return Optional.empty();
        }
        return email;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonIgnore
    public Optional<Address> getAddress() {
        if (address == null) {
            return Optional.empty();
        }
        return address;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("email")
    private Optional<String> _getEmail() {
        return email;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("address")
    private Optional<Address> _getAddress() {
        return address;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateUserRequest && equalTo((UpdateUserRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateUserRequest other) {
        return username.equals(other.username)
                && email.equals(other.email)
                && phone.equals(other.phone)
                && address.equals(other.address);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.username, this.email, this.phone, this.address);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> username = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<Address> address = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateUserRequest other) {
            username(other.getUsername());
            email(other.getEmail());
            phone(other.getPhone());
            address(other.getAddress());
            return this;
        }

        @JsonSetter(value = "username", nulls = Nulls.SKIP)
        public Builder username(Optional<String> username) {
            this.username = username;
            return this;
        }

        public Builder username(String username) {
            this.username = Optional.ofNullable(username);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Nullable<String> email) {
            if (email.isNull()) {
                this.email = null;
            } else if (email.isEmpty()) {
                this.email = Optional.empty();
            } else {
                this.email = Optional.of(email.get());
            }
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        public Builder address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Nullable<Address> address) {
            if (address.isNull()) {
                this.address = null;
            } else if (address.isEmpty()) {
                this.address = Optional.empty();
            } else {
                this.address = Optional.of(address.get());
            }
            return this;
        }

        public UpdateUserRequest build() {
            return new UpdateUserRequest(username, email, phone, address, additionalProperties);
        }
    }
}
