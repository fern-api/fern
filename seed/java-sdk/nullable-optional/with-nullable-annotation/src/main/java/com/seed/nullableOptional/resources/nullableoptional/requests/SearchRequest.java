/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchRequest.Builder.class)
public final class SearchRequest {
    private final String query;

    private final Optional<Map<String, String>> filters;

    private final List<String> includeTypes;

    private final Map<String, Object> additionalProperties;

    private SearchRequest(
            String query,
            Optional<Map<String, String>> filters,
            List<String> includeTypes,
            Map<String, Object> additionalProperties) {
        this.query = query;
        this.filters = filters;
        this.includeTypes = includeTypes;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("query")
    public String getQuery() {
        return query;
    }

    @JsonProperty("filters")
    public Optional<Map<String, String>> getFilters() {
        return filters;
    }

    @Nullable
    @JsonIgnore
    public List<String> getIncludeTypes() {
        return includeTypes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("includeTypes")
    private List<String> _getIncludeTypes() {
        return includeTypes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchRequest && equalTo((SearchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchRequest other) {
        return query.equals(other.query) && filters.equals(other.filters) && includeTypes.equals(other.includeTypes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.query, this.filters, this.includeTypes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QueryStage builder() {
        return new Builder();
    }

    public interface QueryStage {
        _FinalStage query(@NotNull String query);

        Builder from(SearchRequest other);
    }

    public interface _FinalStage {
        SearchRequest build();

        _FinalStage filters(Optional<Map<String, String>> filters);

        _FinalStage filters(Map<String, String> filters);

        _FinalStage includeTypes(List<String> includeTypes);

        _FinalStage addIncludeTypes(String includeTypes);

        _FinalStage addAllIncludeTypes(List<String> includeTypes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QueryStage, _FinalStage {
        private String query;

        private List<String> includeTypes = new ArrayList<>();

        private Optional<Map<String, String>> filters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchRequest other) {
            query(other.getQuery());
            filters(other.getFilters());
            includeTypes(other.getIncludeTypes());
            return this;
        }

        @java.lang.Override
        @JsonSetter("query")
        public _FinalStage query(@NotNull String query) {
            this.query = Objects.requireNonNull(query, "query must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllIncludeTypes(List<String> includeTypes) {
            if (includeTypes != null) {
                this.includeTypes.addAll(includeTypes);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addIncludeTypes(String includeTypes) {
            this.includeTypes.add(includeTypes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "includeTypes", nulls = Nulls.SKIP)
        public _FinalStage includeTypes(List<String> includeTypes) {
            this.includeTypes.clear();
            this.includeTypes.addAll(includeTypes);
            return this;
        }

        @java.lang.Override
        public _FinalStage filters(Map<String, String> filters) {
            this.filters = Optional.ofNullable(filters);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "filters", nulls = Nulls.SKIP)
        public _FinalStage filters(Optional<Map<String, String>> filters) {
            this.filters = filters;
            return this;
        }

        @java.lang.Override
        public SearchRequest build() {
            return new SearchRequest(query, filters, includeTypes, additionalProperties);
        }
    }
}
