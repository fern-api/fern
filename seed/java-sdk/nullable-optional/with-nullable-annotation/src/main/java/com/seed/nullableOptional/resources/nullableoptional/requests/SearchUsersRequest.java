/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchUsersRequest.Builder.class)
public final class SearchUsersRequest {
    private final String query;

    private final String department;

    private final Optional<String> role;

    private final Optional<Boolean> isActive;

    private final Map<String, Object> additionalProperties;

    private SearchUsersRequest(
            String query,
            String department,
            Optional<String> role,
            Optional<Boolean> isActive,
            Map<String, Object> additionalProperties) {
        this.query = query;
        this.department = department;
        this.role = role;
        this.isActive = isActive;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("query")
    public String getQuery() {
        return query;
    }

    @Nullable
    @JsonIgnore
    public String getDepartment() {
        return department;
    }

    @JsonProperty("role")
    public Optional<String> getRole() {
        return role;
    }

    @JsonIgnore
    public Optional<Boolean> getIsActive() {
        if (isActive == null) {
            return Optional.empty();
        }
        return isActive;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("department")
    private String _getDepartment() {
        return department;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("isActive")
    private Optional<Boolean> _getIsActive() {
        return isActive;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchUsersRequest && equalTo((SearchUsersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchUsersRequest other) {
        return java.util.Objects.equals(query, other.query)
                && java.util.Objects.equals(department, other.department)
                && java.util.Objects.equals(role, other.role)
                && java.util.Objects.equals(isActive, other.isActive);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.query, this.department, this.role, this.isActive);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QueryStage builder() {
        return new Builder();
    }

    public interface QueryStage {
        DepartmentStage query(@NotNull String query);

        Builder from(SearchUsersRequest other);
    }

    public interface DepartmentStage {
        _FinalStage department(String department);
    }

    public interface _FinalStage {
        SearchUsersRequest build();

        _FinalStage role(Optional<String> role);

        _FinalStage role(String role);

        _FinalStage isActive(Optional<Boolean> isActive);

        _FinalStage isActive(Boolean isActive);

        _FinalStage isActive(com.seed.nullableOptional.core.Nullable<Boolean> isActive);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QueryStage, DepartmentStage, _FinalStage {
        private String query;

        private String department;

        private Optional<Boolean> isActive = Optional.empty();

        private Optional<String> role = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchUsersRequest other) {
            query(other.getQuery());
            department(other.getDepartment());
            role(other.getRole());
            isActive(other.getIsActive());
            return this;
        }

        @java.lang.Override
        @JsonSetter("query")
        public DepartmentStage query(@NotNull String query) {
            this.query = Objects.requireNonNull(query, "query must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("department")
        public _FinalStage department(String department) {
            this.department = department;
            return this;
        }

        @java.lang.Override
        public _FinalStage isActive(com.seed.nullableOptional.core.Nullable<Boolean> isActive) {
            if (isActive.isNull()) {
                this.isActive = null;
            } else if (isActive.isEmpty()) {
                this.isActive = Optional.empty();
            } else {
                this.isActive = Optional.of(isActive.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage isActive(Boolean isActive) {
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "isActive", nulls = Nulls.SKIP)
        public _FinalStage isActive(Optional<Boolean> isActive) {
            this.isActive = isActive;
            return this;
        }

        @java.lang.Override
        public _FinalStage role(String role) {
            this.role = Optional.ofNullable(role);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "role", nulls = Nulls.SKIP)
        public _FinalStage role(Optional<String> role) {
            this.role = role;
            return this;
        }

        @java.lang.Override
        public SearchUsersRequest build() {
            return new SearchUsersRequest(query, department, role, isActive, additionalProperties);
        }
    }
}
