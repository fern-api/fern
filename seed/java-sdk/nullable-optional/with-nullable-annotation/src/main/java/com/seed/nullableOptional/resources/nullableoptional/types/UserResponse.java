/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserResponse.Builder.class)
public final class UserResponse {
    private final String id;

    private final String username;

    private final String email;

    private final Optional<String> phone;

    private final OffsetDateTime createdAt;

    private final OffsetDateTime updatedAt;

    private final Optional<Address> address;

    private final Map<String, Object> additionalProperties;

    private UserResponse(
            String id,
            String username,
            String email,
            Optional<String> phone,
            OffsetDateTime createdAt,
            OffsetDateTime updatedAt,
            Optional<Address> address,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.phone = phone;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.address = address;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("username")
    public String getUsername() {
        return username;
    }

    @Nullable
    @JsonIgnore
    public String getEmail() {
        return email;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @Nullable
    @JsonIgnore
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("address")
    public Optional<Address> getAddress() {
        return address;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("email")
    private String _getEmail() {
        return email;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("updatedAt")
    private OffsetDateTime _getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserResponse && equalTo((UserResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserResponse other) {
        return id.equals(other.id)
                && username.equals(other.username)
                && email.equals(other.email)
                && phone.equals(other.phone)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && address.equals(other.address);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id, this.username, this.email, this.phone, this.createdAt, this.updatedAt, this.address);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UsernameStage id(@NotNull String id);

        Builder from(UserResponse other);
    }

    public interface UsernameStage {
        CreatedAtStage username(@NotNull String username);
    }

    public interface CreatedAtStage {
        _FinalStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface _FinalStage {
        UserResponse build();

        _FinalStage email(@com.seed.nullableOptional.core.Nullable String email);

        _FinalStage phone(Optional<String> phone);

        _FinalStage phone(String phone);

        _FinalStage updatedAt(@com.seed.nullableOptional.core.Nullable OffsetDateTime updatedAt);

        _FinalStage address(Optional<Address> address);

        _FinalStage address(Address address);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, UsernameStage, CreatedAtStage, _FinalStage {
        private String id;

        private String username;

        private OffsetDateTime createdAt;

        private Optional<Address> address = Optional.empty();

        private OffsetDateTime updatedAt;

        private Optional<String> phone = Optional.empty();

        private String email;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UserResponse other) {
            id(other.getId());
            username(other.getUsername());
            email(other.getEmail());
            phone(other.getPhone());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            address(other.getAddress());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UsernameStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("username")
        public CreatedAtStage username(@NotNull String username) {
            this.username = Objects.requireNonNull(username, "username must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public _FinalStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage address(Address address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public _FinalStage address(Optional<Address> address) {
            this.address = address;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updatedAt")
        public _FinalStage updatedAt(@com.seed.nullableOptional.core.Nullable OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public _FinalStage phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public _FinalStage email(@com.seed.nullableOptional.core.Nullable String email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        public UserResponse build() {
            return new UserResponse(id, username, email, phone, createdAt, updatedAt, address, additionalProperties);
        }
    }
}
