/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.Nullable;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListUsersRequest.Builder.class)
public final class ListUsersRequest {
    private final Optional<Integer> limit;

    private final Optional<Integer> offset;

    private final Optional<Boolean> includeDeleted;

    private final Optional<String> sortBy;

    private final Map<String, Object> additionalProperties;

    private ListUsersRequest(
            Optional<Integer> limit,
            Optional<Integer> offset,
            Optional<Boolean> includeDeleted,
            Optional<String> sortBy,
            Map<String, Object> additionalProperties) {
        this.limit = limit;
        this.offset = offset;
        this.includeDeleted = includeDeleted;
        this.sortBy = sortBy;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    @JsonProperty("offset")
    public Optional<Integer> getOffset() {
        return offset;
    }

    @JsonProperty("includeDeleted")
    public Optional<Boolean> getIncludeDeleted() {
        return includeDeleted;
    }

    @JsonIgnore
    public Optional<String> getSortBy() {
        if (sortBy == null) {
            return Optional.empty();
        }
        return sortBy;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("sortBy")
    private Optional<String> _getSortBy() {
        return sortBy;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListUsersRequest && equalTo((ListUsersRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListUsersRequest other) {
        return limit.equals(other.limit)
                && offset.equals(other.offset)
                && includeDeleted.equals(other.includeDeleted)
                && sortBy.equals(other.sortBy);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.limit, this.offset, this.includeDeleted, this.sortBy);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> limit = Optional.empty();

        private Optional<Integer> offset = Optional.empty();

        private Optional<Boolean> includeDeleted = Optional.empty();

        private Optional<String> sortBy = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListUsersRequest other) {
            limit(other.getLimit());
            offset(other.getOffset());
            includeDeleted(other.getIncludeDeleted());
            sortBy(other.getSortBy());
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "offset", nulls = Nulls.SKIP)
        public Builder offset(Optional<Integer> offset) {
            this.offset = offset;
            return this;
        }

        public Builder offset(Integer offset) {
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        @JsonSetter(value = "includeDeleted", nulls = Nulls.SKIP)
        public Builder includeDeleted(Optional<Boolean> includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }

        public Builder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = Optional.ofNullable(includeDeleted);
            return this;
        }

        @JsonSetter(value = "sortBy", nulls = Nulls.SKIP)
        public Builder sortBy(Optional<String> sortBy) {
            this.sortBy = sortBy;
            return this;
        }

        public Builder sortBy(String sortBy) {
            this.sortBy = Optional.ofNullable(sortBy);
            return this;
        }

        public Builder sortBy(Nullable<String> sortBy) {
            if (sortBy.isNull()) {
                this.sortBy = null;
            } else if (sortBy.isEmpty()) {
                this.sortBy = Optional.empty();
            } else {
                this.sortBy = Optional.of(sortBy.get());
            }
            return this;
        }

        public ListUsersRequest build() {
            return new ListUsersRequest(limit, offset, includeDeleted, sortBy, additionalProperties);
        }
    }
}
