/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.Nullable;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import com.seed.nullableOptional.resources.nullableoptional.types.NotificationMethod;
import com.seed.nullableOptional.resources.nullableoptional.types.SearchResult;
import com.seed.nullableOptional.resources.nullableoptional.types.UserRole;
import com.seed.nullableOptional.resources.nullableoptional.types.UserStatus;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateComplexProfileRequest.Builder.class)
public final class UpdateComplexProfileRequest {
    private final Optional<UserRole> nullableRole;

    private final Optional<UserStatus> nullableStatus;

    private final Optional<NotificationMethod> nullableNotification;

    private final Optional<SearchResult> nullableSearchResult;

    private final Optional<List<String>> nullableArray;

    private final Map<String, Object> additionalProperties;

    private UpdateComplexProfileRequest(
            Optional<UserRole> nullableRole,
            Optional<UserStatus> nullableStatus,
            Optional<NotificationMethod> nullableNotification,
            Optional<SearchResult> nullableSearchResult,
            Optional<List<String>> nullableArray,
            Map<String, Object> additionalProperties) {
        this.nullableRole = nullableRole;
        this.nullableStatus = nullableStatus;
        this.nullableNotification = nullableNotification;
        this.nullableSearchResult = nullableSearchResult;
        this.nullableArray = nullableArray;
        this.additionalProperties = additionalProperties;
    }

    @JsonIgnore
    public Optional<UserRole> getNullableRole() {
        if (nullableRole == null) {
            return Optional.empty();
        }
        return nullableRole;
    }

    @JsonIgnore
    public Optional<UserStatus> getNullableStatus() {
        if (nullableStatus == null) {
            return Optional.empty();
        }
        return nullableStatus;
    }

    @JsonIgnore
    public Optional<NotificationMethod> getNullableNotification() {
        if (nullableNotification == null) {
            return Optional.empty();
        }
        return nullableNotification;
    }

    @JsonIgnore
    public Optional<SearchResult> getNullableSearchResult() {
        if (nullableSearchResult == null) {
            return Optional.empty();
        }
        return nullableSearchResult;
    }

    @JsonIgnore
    public Optional<List<String>> getNullableArray() {
        if (nullableArray == null) {
            return Optional.empty();
        }
        return nullableArray;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableRole")
    private Optional<UserRole> _getNullableRole() {
        return nullableRole;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableStatus")
    private Optional<UserStatus> _getNullableStatus() {
        return nullableStatus;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableNotification")
    private Optional<NotificationMethod> _getNullableNotification() {
        return nullableNotification;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableSearchResult")
    private Optional<SearchResult> _getNullableSearchResult() {
        return nullableSearchResult;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableArray")
    private Optional<List<String>> _getNullableArray() {
        return nullableArray;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateComplexProfileRequest && equalTo((UpdateComplexProfileRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateComplexProfileRequest other) {
        return nullableRole.equals(other.nullableRole)
                && nullableStatus.equals(other.nullableStatus)
                && nullableNotification.equals(other.nullableNotification)
                && nullableSearchResult.equals(other.nullableSearchResult)
                && nullableArray.equals(other.nullableArray);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.nullableRole,
                this.nullableStatus,
                this.nullableNotification,
                this.nullableSearchResult,
                this.nullableArray);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<UserRole> nullableRole = Optional.empty();

        private Optional<UserStatus> nullableStatus = Optional.empty();

        private Optional<NotificationMethod> nullableNotification = Optional.empty();

        private Optional<SearchResult> nullableSearchResult = Optional.empty();

        private Optional<List<String>> nullableArray = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateComplexProfileRequest other) {
            nullableRole(other.getNullableRole());
            nullableStatus(other.getNullableStatus());
            nullableNotification(other.getNullableNotification());
            nullableSearchResult(other.getNullableSearchResult());
            nullableArray(other.getNullableArray());
            return this;
        }

        @JsonSetter(value = "nullableRole", nulls = Nulls.SKIP)
        public Builder nullableRole(Optional<UserRole> nullableRole) {
            this.nullableRole = nullableRole;
            return this;
        }

        public Builder nullableRole(UserRole nullableRole) {
            this.nullableRole = Optional.ofNullable(nullableRole);
            return this;
        }

        public Builder nullableRole(Nullable<UserRole> nullableRole) {
            if (nullableRole.isNull()) {
                this.nullableRole = null;
            } else if (nullableRole.isEmpty()) {
                this.nullableRole = Optional.empty();
            } else {
                this.nullableRole = Optional.of(nullableRole.get());
            }
            return this;
        }

        @JsonSetter(value = "nullableStatus", nulls = Nulls.SKIP)
        public Builder nullableStatus(Optional<UserStatus> nullableStatus) {
            this.nullableStatus = nullableStatus;
            return this;
        }

        public Builder nullableStatus(UserStatus nullableStatus) {
            this.nullableStatus = Optional.ofNullable(nullableStatus);
            return this;
        }

        public Builder nullableStatus(Nullable<UserStatus> nullableStatus) {
            if (nullableStatus.isNull()) {
                this.nullableStatus = null;
            } else if (nullableStatus.isEmpty()) {
                this.nullableStatus = Optional.empty();
            } else {
                this.nullableStatus = Optional.of(nullableStatus.get());
            }
            return this;
        }

        @JsonSetter(value = "nullableNotification", nulls = Nulls.SKIP)
        public Builder nullableNotification(Optional<NotificationMethod> nullableNotification) {
            this.nullableNotification = nullableNotification;
            return this;
        }

        public Builder nullableNotification(NotificationMethod nullableNotification) {
            this.nullableNotification = Optional.ofNullable(nullableNotification);
            return this;
        }

        public Builder nullableNotification(Nullable<NotificationMethod> nullableNotification) {
            if (nullableNotification.isNull()) {
                this.nullableNotification = null;
            } else if (nullableNotification.isEmpty()) {
                this.nullableNotification = Optional.empty();
            } else {
                this.nullableNotification = Optional.of(nullableNotification.get());
            }
            return this;
        }

        @JsonSetter(value = "nullableSearchResult", nulls = Nulls.SKIP)
        public Builder nullableSearchResult(Optional<SearchResult> nullableSearchResult) {
            this.nullableSearchResult = nullableSearchResult;
            return this;
        }

        public Builder nullableSearchResult(SearchResult nullableSearchResult) {
            this.nullableSearchResult = Optional.ofNullable(nullableSearchResult);
            return this;
        }

        public Builder nullableSearchResult(Nullable<SearchResult> nullableSearchResult) {
            if (nullableSearchResult.isNull()) {
                this.nullableSearchResult = null;
            } else if (nullableSearchResult.isEmpty()) {
                this.nullableSearchResult = Optional.empty();
            } else {
                this.nullableSearchResult = Optional.of(nullableSearchResult.get());
            }
            return this;
        }

        @JsonSetter(value = "nullableArray", nulls = Nulls.SKIP)
        public Builder nullableArray(Optional<List<String>> nullableArray) {
            this.nullableArray = nullableArray;
            return this;
        }

        public Builder nullableArray(List<String> nullableArray) {
            this.nullableArray = Optional.ofNullable(nullableArray);
            return this;
        }

        public Builder nullableArray(Nullable<List<String>> nullableArray) {
            if (nullableArray.isNull()) {
                this.nullableArray = null;
            } else if (nullableArray.isEmpty()) {
                this.nullableArray = Optional.empty();
            } else {
                this.nullableArray = Optional.of(nullableArray.get());
            }
            return this;
        }

        public UpdateComplexProfileRequest build() {
            return new UpdateComplexProfileRequest(
                    nullableRole,
                    nullableStatus,
                    nullableNotification,
                    nullableSearchResult,
                    nullableArray,
                    additionalProperties);
        }
    }
}
