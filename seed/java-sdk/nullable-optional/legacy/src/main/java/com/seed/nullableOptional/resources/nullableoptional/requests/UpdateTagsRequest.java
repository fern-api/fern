/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.Nullable;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateTagsRequest.Builder.class)
public final class UpdateTagsRequest {
    private final Optional<List<String>> tags;

    private final Optional<List<String>> categories;

    private final Optional<List<String>> labels;

    private final Map<String, Object> additionalProperties;

    private UpdateTagsRequest(
            Optional<List<String>> tags,
            Optional<List<String>> categories,
            Optional<List<String>> labels,
            Map<String, Object> additionalProperties) {
        this.tags = tags;
        this.categories = categories;
        this.labels = labels;
        this.additionalProperties = additionalProperties;
    }

    @JsonIgnore
    public Optional<List<String>> getTags() {
        if (tags == null) {
            return Optional.empty();
        }
        return tags;
    }

    @JsonProperty("categories")
    public Optional<List<String>> getCategories() {
        return categories;
    }

    @JsonIgnore
    public Optional<List<String>> getLabels() {
        if (labels == null) {
            return Optional.empty();
        }
        return labels;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("tags")
    private Optional<List<String>> _getTags() {
        return tags;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("labels")
    private Optional<List<String>> _getLabels() {
        return labels;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateTagsRequest && equalTo((UpdateTagsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateTagsRequest other) {
        return tags.equals(other.tags) && categories.equals(other.categories) && labels.equals(other.labels);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tags, this.categories, this.labels);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> tags = Optional.empty();

        private Optional<List<String>> categories = Optional.empty();

        private Optional<List<String>> labels = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateTagsRequest other) {
            tags(other.getTags());
            categories(other.getCategories());
            labels(other.getLabels());
            return this;
        }

        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public Builder tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        public Builder tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Nullable<List<String>> tags) {
            if (tags.isNull()) {
                this.tags = null;
            } else if (tags.isEmpty()) {
                this.tags = Optional.empty();
            } else {
                this.tags = Optional.of(tags.get());
            }
            return this;
        }

        @JsonSetter(value = "categories", nulls = Nulls.SKIP)
        public Builder categories(Optional<List<String>> categories) {
            this.categories = categories;
            return this;
        }

        public Builder categories(List<String> categories) {
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        @JsonSetter(value = "labels", nulls = Nulls.SKIP)
        public Builder labels(Optional<List<String>> labels) {
            this.labels = labels;
            return this;
        }

        public Builder labels(List<String> labels) {
            this.labels = Optional.ofNullable(labels);
            return this;
        }

        public Builder labels(Nullable<List<String>> labels) {
            if (labels.isNull()) {
                this.labels = null;
            } else if (labels.isEmpty()) {
                this.labels = Optional.empty();
            } else {
                this.labels = Optional.of(labels.get());
            }
            return this;
        }

        public UpdateTagsRequest build() {
            return new UpdateTagsRequest(tags, categories, labels, additionalProperties);
        }
    }
}
