/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeserializationTestResponse.Builder.class)
public final class DeserializationTestResponse {
    private final DeserializationTestRequest echo;

    private final OffsetDateTime processedAt;

    private final int nullCount;

    private final int presentFieldsCount;

    private final Map<String, Object> additionalProperties;

    private DeserializationTestResponse(
            DeserializationTestRequest echo,
            OffsetDateTime processedAt,
            int nullCount,
            int presentFieldsCount,
            Map<String, Object> additionalProperties) {
        this.echo = echo;
        this.processedAt = processedAt;
        this.nullCount = nullCount;
        this.presentFieldsCount = presentFieldsCount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("echo")
    public DeserializationTestRequest getEcho() {
        return echo;
    }

    @JsonProperty("processedAt")
    public OffsetDateTime getProcessedAt() {
        return processedAt;
    }

    @JsonProperty("nullCount")
    public int getNullCount() {
        return nullCount;
    }

    @JsonProperty("presentFieldsCount")
    public int getPresentFieldsCount() {
        return presentFieldsCount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeserializationTestResponse && equalTo((DeserializationTestResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeserializationTestResponse other) {
        return echo.equals(other.echo)
                && processedAt.equals(other.processedAt)
                && nullCount == other.nullCount
                && presentFieldsCount == other.presentFieldsCount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.echo, this.processedAt, this.nullCount, this.presentFieldsCount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EchoStage builder() {
        return new Builder();
    }

    public interface EchoStage {
        ProcessedAtStage echo(@NotNull DeserializationTestRequest echo);

        Builder from(DeserializationTestResponse other);
    }

    public interface ProcessedAtStage {
        NullCountStage processedAt(@NotNull OffsetDateTime processedAt);
    }

    public interface NullCountStage {
        PresentFieldsCountStage nullCount(int nullCount);
    }

    public interface PresentFieldsCountStage {
        _FinalStage presentFieldsCount(int presentFieldsCount);
    }

    public interface _FinalStage {
        DeserializationTestResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements EchoStage, ProcessedAtStage, NullCountStage, PresentFieldsCountStage, _FinalStage {
        private DeserializationTestRequest echo;

        private OffsetDateTime processedAt;

        private int nullCount;

        private int presentFieldsCount;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeserializationTestResponse other) {
            echo(other.getEcho());
            processedAt(other.getProcessedAt());
            nullCount(other.getNullCount());
            presentFieldsCount(other.getPresentFieldsCount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("echo")
        public ProcessedAtStage echo(@NotNull DeserializationTestRequest echo) {
            this.echo = Objects.requireNonNull(echo, "echo must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("processedAt")
        public NullCountStage processedAt(@NotNull OffsetDateTime processedAt) {
            this.processedAt = Objects.requireNonNull(processedAt, "processedAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("nullCount")
        public PresentFieldsCountStage nullCount(int nullCount) {
            this.nullCount = nullCount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("presentFieldsCount")
        public _FinalStage presentFieldsCount(int presentFieldsCount) {
            this.presentFieldsCount = presentFieldsCount;
            return this;
        }

        @java.lang.Override
        public DeserializationTestResponse build() {
            return new DeserializationTestResponse(
                    echo, processedAt, nullCount, presentFieldsCount, additionalProperties);
        }
    }
}
