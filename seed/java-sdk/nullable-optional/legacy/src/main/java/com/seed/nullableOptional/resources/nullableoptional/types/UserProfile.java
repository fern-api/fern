/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.Nullable;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserProfile.Builder.class)
public final class UserProfile {
    private final String id;

    private final String username;

    private final Optional<String> nullableString;

    private final Optional<Integer> nullableInteger;

    private final Optional<Boolean> nullableBoolean;

    private final Optional<OffsetDateTime> nullableDate;

    private final Optional<Address> nullableObject;

    private final Optional<List<String>> nullableList;

    private final Optional<Map<String, String>> nullableMap;

    private final Optional<String> optionalString;

    private final Optional<Integer> optionalInteger;

    private final Optional<Boolean> optionalBoolean;

    private final Optional<OffsetDateTime> optionalDate;

    private final Optional<Address> optionalObject;

    private final Optional<List<String>> optionalList;

    private final Optional<Map<String, String>> optionalMap;

    private final Optional<String> optionalNullableString;

    private final Optional<Address> optionalNullableObject;

    private final Map<String, Object> additionalProperties;

    private UserProfile(
            String id,
            String username,
            Optional<String> nullableString,
            Optional<Integer> nullableInteger,
            Optional<Boolean> nullableBoolean,
            Optional<OffsetDateTime> nullableDate,
            Optional<Address> nullableObject,
            Optional<List<String>> nullableList,
            Optional<Map<String, String>> nullableMap,
            Optional<String> optionalString,
            Optional<Integer> optionalInteger,
            Optional<Boolean> optionalBoolean,
            Optional<OffsetDateTime> optionalDate,
            Optional<Address> optionalObject,
            Optional<List<String>> optionalList,
            Optional<Map<String, String>> optionalMap,
            Optional<String> optionalNullableString,
            Optional<Address> optionalNullableObject,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.username = username;
        this.nullableString = nullableString;
        this.nullableInteger = nullableInteger;
        this.nullableBoolean = nullableBoolean;
        this.nullableDate = nullableDate;
        this.nullableObject = nullableObject;
        this.nullableList = nullableList;
        this.nullableMap = nullableMap;
        this.optionalString = optionalString;
        this.optionalInteger = optionalInteger;
        this.optionalBoolean = optionalBoolean;
        this.optionalDate = optionalDate;
        this.optionalObject = optionalObject;
        this.optionalList = optionalList;
        this.optionalMap = optionalMap;
        this.optionalNullableString = optionalNullableString;
        this.optionalNullableObject = optionalNullableObject;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("username")
    public String getUsername() {
        return username;
    }

    @JsonIgnore
    public Optional<String> getNullableString() {
        if (nullableString == null) {
            return Optional.empty();
        }
        return nullableString;
    }

    @JsonIgnore
    public Optional<Integer> getNullableInteger() {
        if (nullableInteger == null) {
            return Optional.empty();
        }
        return nullableInteger;
    }

    @JsonIgnore
    public Optional<Boolean> getNullableBoolean() {
        if (nullableBoolean == null) {
            return Optional.empty();
        }
        return nullableBoolean;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> getNullableDate() {
        if (nullableDate == null) {
            return Optional.empty();
        }
        return nullableDate;
    }

    @JsonIgnore
    public Optional<Address> getNullableObject() {
        if (nullableObject == null) {
            return Optional.empty();
        }
        return nullableObject;
    }

    @JsonIgnore
    public Optional<List<String>> getNullableList() {
        if (nullableList == null) {
            return Optional.empty();
        }
        return nullableList;
    }

    @JsonIgnore
    public Optional<Map<String, String>> getNullableMap() {
        if (nullableMap == null) {
            return Optional.empty();
        }
        return nullableMap;
    }

    @JsonProperty("optionalString")
    public Optional<String> getOptionalString() {
        return optionalString;
    }

    @JsonProperty("optionalInteger")
    public Optional<Integer> getOptionalInteger() {
        return optionalInteger;
    }

    @JsonProperty("optionalBoolean")
    public Optional<Boolean> getOptionalBoolean() {
        return optionalBoolean;
    }

    @JsonProperty("optionalDate")
    public Optional<OffsetDateTime> getOptionalDate() {
        return optionalDate;
    }

    @JsonProperty("optionalObject")
    public Optional<Address> getOptionalObject() {
        return optionalObject;
    }

    @JsonProperty("optionalList")
    public Optional<List<String>> getOptionalList() {
        return optionalList;
    }

    @JsonProperty("optionalMap")
    public Optional<Map<String, String>> getOptionalMap() {
        return optionalMap;
    }

    @JsonIgnore
    public Optional<String> getOptionalNullableString() {
        if (optionalNullableString == null) {
            return Optional.empty();
        }
        return optionalNullableString;
    }

    @JsonIgnore
    public Optional<Address> getOptionalNullableObject() {
        if (optionalNullableObject == null) {
            return Optional.empty();
        }
        return optionalNullableObject;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableString")
    private Optional<String> _getNullableString() {
        return nullableString;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableInteger")
    private Optional<Integer> _getNullableInteger() {
        return nullableInteger;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableBoolean")
    private Optional<Boolean> _getNullableBoolean() {
        return nullableBoolean;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableDate")
    private Optional<OffsetDateTime> _getNullableDate() {
        return nullableDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableObject")
    private Optional<Address> _getNullableObject() {
        return nullableObject;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableList")
    private Optional<List<String>> _getNullableList() {
        return nullableList;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("nullableMap")
    private Optional<Map<String, String>> _getNullableMap() {
        return nullableMap;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("optionalNullableString")
    private Optional<String> _getOptionalNullableString() {
        return optionalNullableString;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("optionalNullableObject")
    private Optional<Address> _getOptionalNullableObject() {
        return optionalNullableObject;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserProfile && equalTo((UserProfile) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserProfile other) {
        return java.util.Objects.equals(id, other.id)
                && java.util.Objects.equals(username, other.username)
                && java.util.Objects.equals(nullableString, other.nullableString)
                && java.util.Objects.equals(nullableInteger, other.nullableInteger)
                && java.util.Objects.equals(nullableBoolean, other.nullableBoolean)
                && java.util.Objects.equals(nullableDate, other.nullableDate)
                && java.util.Objects.equals(nullableObject, other.nullableObject)
                && java.util.Objects.equals(nullableList, other.nullableList)
                && java.util.Objects.equals(nullableMap, other.nullableMap)
                && java.util.Objects.equals(optionalString, other.optionalString)
                && java.util.Objects.equals(optionalInteger, other.optionalInteger)
                && java.util.Objects.equals(optionalBoolean, other.optionalBoolean)
                && java.util.Objects.equals(optionalDate, other.optionalDate)
                && java.util.Objects.equals(optionalObject, other.optionalObject)
                && java.util.Objects.equals(optionalList, other.optionalList)
                && java.util.Objects.equals(optionalMap, other.optionalMap)
                && java.util.Objects.equals(optionalNullableString, other.optionalNullableString)
                && java.util.Objects.equals(optionalNullableObject, other.optionalNullableObject);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.username,
                this.nullableString,
                this.nullableInteger,
                this.nullableBoolean,
                this.nullableDate,
                this.nullableObject,
                this.nullableList,
                this.nullableMap,
                this.optionalString,
                this.optionalInteger,
                this.optionalBoolean,
                this.optionalDate,
                this.optionalObject,
                this.optionalList,
                this.optionalMap,
                this.optionalNullableString,
                this.optionalNullableObject);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        UsernameStage id(@NotNull String id);

        Builder from(UserProfile other);
    }

    public interface UsernameStage {
        _FinalStage username(@NotNull String username);
    }

    public interface _FinalStage {
        UserProfile build();

        _FinalStage nullableString(Optional<String> nullableString);

        _FinalStage nullableString(String nullableString);

        _FinalStage nullableString(Nullable<String> nullableString);

        _FinalStage nullableInteger(Optional<Integer> nullableInteger);

        _FinalStage nullableInteger(Integer nullableInteger);

        _FinalStage nullableInteger(Nullable<Integer> nullableInteger);

        _FinalStage nullableBoolean(Optional<Boolean> nullableBoolean);

        _FinalStage nullableBoolean(Boolean nullableBoolean);

        _FinalStage nullableBoolean(Nullable<Boolean> nullableBoolean);

        _FinalStage nullableDate(Optional<OffsetDateTime> nullableDate);

        _FinalStage nullableDate(OffsetDateTime nullableDate);

        _FinalStage nullableDate(Nullable<OffsetDateTime> nullableDate);

        _FinalStage nullableObject(Optional<Address> nullableObject);

        _FinalStage nullableObject(Address nullableObject);

        _FinalStage nullableObject(Nullable<Address> nullableObject);

        _FinalStage nullableList(Optional<List<String>> nullableList);

        _FinalStage nullableList(List<String> nullableList);

        _FinalStage nullableList(Nullable<List<String>> nullableList);

        _FinalStage nullableMap(Optional<Map<String, String>> nullableMap);

        _FinalStage nullableMap(Map<String, String> nullableMap);

        _FinalStage nullableMap(Nullable<Map<String, String>> nullableMap);

        _FinalStage optionalString(Optional<String> optionalString);

        _FinalStage optionalString(String optionalString);

        _FinalStage optionalInteger(Optional<Integer> optionalInteger);

        _FinalStage optionalInteger(Integer optionalInteger);

        _FinalStage optionalBoolean(Optional<Boolean> optionalBoolean);

        _FinalStage optionalBoolean(Boolean optionalBoolean);

        _FinalStage optionalDate(Optional<OffsetDateTime> optionalDate);

        _FinalStage optionalDate(OffsetDateTime optionalDate);

        _FinalStage optionalObject(Optional<Address> optionalObject);

        _FinalStage optionalObject(Address optionalObject);

        _FinalStage optionalList(Optional<List<String>> optionalList);

        _FinalStage optionalList(List<String> optionalList);

        _FinalStage optionalMap(Optional<Map<String, String>> optionalMap);

        _FinalStage optionalMap(Map<String, String> optionalMap);

        _FinalStage optionalNullableString(Optional<String> optionalNullableString);

        _FinalStage optionalNullableString(String optionalNullableString);

        _FinalStage optionalNullableString(Nullable<String> optionalNullableString);

        _FinalStage optionalNullableObject(Optional<Address> optionalNullableObject);

        _FinalStage optionalNullableObject(Address optionalNullableObject);

        _FinalStage optionalNullableObject(Nullable<Address> optionalNullableObject);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, UsernameStage, _FinalStage {
        private String id;

        private String username;

        private Optional<Address> optionalNullableObject = Optional.empty();

        private Optional<String> optionalNullableString = Optional.empty();

        private Optional<Map<String, String>> optionalMap = Optional.empty();

        private Optional<List<String>> optionalList = Optional.empty();

        private Optional<Address> optionalObject = Optional.empty();

        private Optional<OffsetDateTime> optionalDate = Optional.empty();

        private Optional<Boolean> optionalBoolean = Optional.empty();

        private Optional<Integer> optionalInteger = Optional.empty();

        private Optional<String> optionalString = Optional.empty();

        private Optional<Map<String, String>> nullableMap = Optional.empty();

        private Optional<List<String>> nullableList = Optional.empty();

        private Optional<Address> nullableObject = Optional.empty();

        private Optional<OffsetDateTime> nullableDate = Optional.empty();

        private Optional<Boolean> nullableBoolean = Optional.empty();

        private Optional<Integer> nullableInteger = Optional.empty();

        private Optional<String> nullableString = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UserProfile other) {
            id(other.getId());
            username(other.getUsername());
            nullableString(other.getNullableString());
            nullableInteger(other.getNullableInteger());
            nullableBoolean(other.getNullableBoolean());
            nullableDate(other.getNullableDate());
            nullableObject(other.getNullableObject());
            nullableList(other.getNullableList());
            nullableMap(other.getNullableMap());
            optionalString(other.getOptionalString());
            optionalInteger(other.getOptionalInteger());
            optionalBoolean(other.getOptionalBoolean());
            optionalDate(other.getOptionalDate());
            optionalObject(other.getOptionalObject());
            optionalList(other.getOptionalList());
            optionalMap(other.getOptionalMap());
            optionalNullableString(other.getOptionalNullableString());
            optionalNullableObject(other.getOptionalNullableObject());
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public UsernameStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("username")
        public _FinalStage username(@NotNull String username) {
            this.username = Objects.requireNonNull(username, "username must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalNullableObject(Nullable<Address> optionalNullableObject) {
            if (optionalNullableObject.isNull()) {
                this.optionalNullableObject = null;
            } else if (optionalNullableObject.isEmpty()) {
                this.optionalNullableObject = Optional.empty();
            } else {
                this.optionalNullableObject = Optional.of(optionalNullableObject.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalNullableObject(Address optionalNullableObject) {
            this.optionalNullableObject = Optional.ofNullable(optionalNullableObject);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalNullableObject", nulls = Nulls.SKIP)
        public _FinalStage optionalNullableObject(Optional<Address> optionalNullableObject) {
            this.optionalNullableObject = optionalNullableObject;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalNullableString(Nullable<String> optionalNullableString) {
            if (optionalNullableString.isNull()) {
                this.optionalNullableString = null;
            } else if (optionalNullableString.isEmpty()) {
                this.optionalNullableString = Optional.empty();
            } else {
                this.optionalNullableString = Optional.of(optionalNullableString.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalNullableString(String optionalNullableString) {
            this.optionalNullableString = Optional.ofNullable(optionalNullableString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalNullableString", nulls = Nulls.SKIP)
        public _FinalStage optionalNullableString(Optional<String> optionalNullableString) {
            this.optionalNullableString = optionalNullableString;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalMap(Map<String, String> optionalMap) {
            this.optionalMap = Optional.ofNullable(optionalMap);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalMap", nulls = Nulls.SKIP)
        public _FinalStage optionalMap(Optional<Map<String, String>> optionalMap) {
            this.optionalMap = optionalMap;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalList(List<String> optionalList) {
            this.optionalList = Optional.ofNullable(optionalList);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalList", nulls = Nulls.SKIP)
        public _FinalStage optionalList(Optional<List<String>> optionalList) {
            this.optionalList = optionalList;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalObject(Address optionalObject) {
            this.optionalObject = Optional.ofNullable(optionalObject);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalObject", nulls = Nulls.SKIP)
        public _FinalStage optionalObject(Optional<Address> optionalObject) {
            this.optionalObject = optionalObject;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalDate(OffsetDateTime optionalDate) {
            this.optionalDate = Optional.ofNullable(optionalDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalDate", nulls = Nulls.SKIP)
        public _FinalStage optionalDate(Optional<OffsetDateTime> optionalDate) {
            this.optionalDate = optionalDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalBoolean(Boolean optionalBoolean) {
            this.optionalBoolean = Optional.ofNullable(optionalBoolean);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalBoolean", nulls = Nulls.SKIP)
        public _FinalStage optionalBoolean(Optional<Boolean> optionalBoolean) {
            this.optionalBoolean = optionalBoolean;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalInteger(Integer optionalInteger) {
            this.optionalInteger = Optional.ofNullable(optionalInteger);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalInteger", nulls = Nulls.SKIP)
        public _FinalStage optionalInteger(Optional<Integer> optionalInteger) {
            this.optionalInteger = optionalInteger;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalString(String optionalString) {
            this.optionalString = Optional.ofNullable(optionalString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalString", nulls = Nulls.SKIP)
        public _FinalStage optionalString(Optional<String> optionalString) {
            this.optionalString = optionalString;
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableMap(Nullable<Map<String, String>> nullableMap) {
            if (nullableMap.isNull()) {
                this.nullableMap = null;
            } else if (nullableMap.isEmpty()) {
                this.nullableMap = Optional.empty();
            } else {
                this.nullableMap = Optional.of(nullableMap.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableMap(Map<String, String> nullableMap) {
            this.nullableMap = Optional.ofNullable(nullableMap);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableMap", nulls = Nulls.SKIP)
        public _FinalStage nullableMap(Optional<Map<String, String>> nullableMap) {
            this.nullableMap = nullableMap;
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableList(Nullable<List<String>> nullableList) {
            if (nullableList.isNull()) {
                this.nullableList = null;
            } else if (nullableList.isEmpty()) {
                this.nullableList = Optional.empty();
            } else {
                this.nullableList = Optional.of(nullableList.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableList(List<String> nullableList) {
            this.nullableList = Optional.ofNullable(nullableList);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableList", nulls = Nulls.SKIP)
        public _FinalStage nullableList(Optional<List<String>> nullableList) {
            this.nullableList = nullableList;
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableObject(Nullable<Address> nullableObject) {
            if (nullableObject.isNull()) {
                this.nullableObject = null;
            } else if (nullableObject.isEmpty()) {
                this.nullableObject = Optional.empty();
            } else {
                this.nullableObject = Optional.of(nullableObject.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableObject(Address nullableObject) {
            this.nullableObject = Optional.ofNullable(nullableObject);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableObject", nulls = Nulls.SKIP)
        public _FinalStage nullableObject(Optional<Address> nullableObject) {
            this.nullableObject = nullableObject;
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableDate(Nullable<OffsetDateTime> nullableDate) {
            if (nullableDate.isNull()) {
                this.nullableDate = null;
            } else if (nullableDate.isEmpty()) {
                this.nullableDate = Optional.empty();
            } else {
                this.nullableDate = Optional.of(nullableDate.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableDate(OffsetDateTime nullableDate) {
            this.nullableDate = Optional.ofNullable(nullableDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableDate", nulls = Nulls.SKIP)
        public _FinalStage nullableDate(Optional<OffsetDateTime> nullableDate) {
            this.nullableDate = nullableDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableBoolean(Nullable<Boolean> nullableBoolean) {
            if (nullableBoolean.isNull()) {
                this.nullableBoolean = null;
            } else if (nullableBoolean.isEmpty()) {
                this.nullableBoolean = Optional.empty();
            } else {
                this.nullableBoolean = Optional.of(nullableBoolean.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableBoolean(Boolean nullableBoolean) {
            this.nullableBoolean = Optional.ofNullable(nullableBoolean);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableBoolean", nulls = Nulls.SKIP)
        public _FinalStage nullableBoolean(Optional<Boolean> nullableBoolean) {
            this.nullableBoolean = nullableBoolean;
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableInteger(Nullable<Integer> nullableInteger) {
            if (nullableInteger.isNull()) {
                this.nullableInteger = null;
            } else if (nullableInteger.isEmpty()) {
                this.nullableInteger = Optional.empty();
            } else {
                this.nullableInteger = Optional.of(nullableInteger.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableInteger(Integer nullableInteger) {
            this.nullableInteger = Optional.ofNullable(nullableInteger);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableInteger", nulls = Nulls.SKIP)
        public _FinalStage nullableInteger(Optional<Integer> nullableInteger) {
            this.nullableInteger = nullableInteger;
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableString(Nullable<String> nullableString) {
            if (nullableString.isNull()) {
                this.nullableString = null;
            } else if (nullableString.isEmpty()) {
                this.nullableString = Optional.empty();
            } else {
                this.nullableString = Optional.of(nullableString.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage nullableString(String nullableString) {
            this.nullableString = Optional.ofNullable(nullableString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nullableString", nulls = Nulls.SKIP)
        public _FinalStage nullableString(Optional<String> nullableString) {
            this.nullableString = nullableString;
            return this;
        }

        @java.lang.Override
        public UserProfile build() {
            return new UserProfile(
                    id,
                    username,
                    nullableString,
                    nullableInteger,
                    nullableBoolean,
                    nullableDate,
                    nullableObject,
                    nullableList,
                    nullableMap,
                    optionalString,
                    optionalInteger,
                    optionalBoolean,
                    optionalDate,
                    optionalObject,
                    optionalList,
                    optionalMap,
                    optionalNullableString,
                    optionalNullableObject,
                    additionalProperties);
        }
    }
}
