/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.nullableOptional.resources.nullableoptional.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.nullableOptional.core.Nullable;
import com.seed.nullableOptional.core.NullableNonemptyFilter;
import com.seed.nullableOptional.core.ObjectMappers;
import com.seed.nullableOptional.resources.nullableoptional.types.UserRole;
import com.seed.nullableOptional.resources.nullableoptional.types.UserStatus;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FilterByRoleRequest.Builder.class)
public final class FilterByRoleRequest {
    private final Optional<UserRole> role;

    private final Optional<UserStatus> status;

    private final Optional<UserRole> secondaryRole;

    private final Map<String, Object> additionalProperties;

    private FilterByRoleRequest(
            Optional<UserRole> role,
            Optional<UserStatus> status,
            Optional<UserRole> secondaryRole,
            Map<String, Object> additionalProperties) {
        this.role = role;
        this.status = status;
        this.secondaryRole = secondaryRole;
        this.additionalProperties = additionalProperties;
    }

    @JsonIgnore
    public Optional<UserRole> getRole() {
        if (role == null) {
            return Optional.empty();
        }
        return role;
    }

    @JsonProperty("status")
    public Optional<UserStatus> getStatus() {
        return status;
    }

    @JsonIgnore
    public Optional<UserRole> getSecondaryRole() {
        if (secondaryRole == null) {
            return Optional.empty();
        }
        return secondaryRole;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("role")
    private Optional<UserRole> _getRole() {
        return role;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("secondaryRole")
    private Optional<UserRole> _getSecondaryRole() {
        return secondaryRole;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FilterByRoleRequest && equalTo((FilterByRoleRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FilterByRoleRequest other) {
        return role.equals(other.role) && status.equals(other.status) && secondaryRole.equals(other.secondaryRole);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.role, this.status, this.secondaryRole);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<UserRole> role = Optional.empty();

        private Optional<UserStatus> status = Optional.empty();

        private Optional<UserRole> secondaryRole = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FilterByRoleRequest other) {
            role(other.getRole());
            status(other.getStatus());
            secondaryRole(other.getSecondaryRole());
            return this;
        }

        @JsonSetter(value = "role", nulls = Nulls.SKIP)
        public Builder role(Optional<UserRole> role) {
            this.role = role;
            return this;
        }

        public Builder role(UserRole role) {
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Nullable<UserRole> role) {
            if (role.isNull()) {
                this.role = null;
            } else if (role.isEmpty()) {
                this.role = Optional.empty();
            } else {
                this.role = Optional.of(role.get());
            }
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<UserStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(UserStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "secondaryRole", nulls = Nulls.SKIP)
        public Builder secondaryRole(Optional<UserRole> secondaryRole) {
            this.secondaryRole = secondaryRole;
            return this;
        }

        public Builder secondaryRole(UserRole secondaryRole) {
            this.secondaryRole = Optional.ofNullable(secondaryRole);
            return this;
        }

        public Builder secondaryRole(Nullable<UserRole> secondaryRole) {
            if (secondaryRole.isNull()) {
                this.secondaryRole = null;
            } else if (secondaryRole.isEmpty()) {
                this.secondaryRole = Optional.empty();
            } else {
                this.secondaryRole = Optional.of(secondaryRole.get());
            }
            return this;
        }

        public FilterByRoleRequest build() {
            return new FilterByRoleRequest(role, status, secondaryRole, additionalProperties);
        }
    }
}
