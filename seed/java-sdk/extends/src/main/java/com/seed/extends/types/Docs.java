/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.seed.extends.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.extends.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = Docs.Builder.class
)
public final class Docs implements IDocs {
  private final String docs;

  private final Map<String, Object> additionalProperties;

  private Docs(String docs, Map<String, Object> additionalProperties) {
    this.docs = docs;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("docs")
  @java.lang.Override
  public String getDocs() {
    return docs;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Docs && equalTo((Docs) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(Docs other) {
    return docs.equals(other.docs);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.docs);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static DocsStage builder() {
    return new Builder();
  }

  public interface DocsStage {
    _FinalStage docs(String docs);

    Builder from(Docs other);
  }

  public interface _FinalStage {
    Docs build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DocsStage, _FinalStage {
    private String docs;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(Docs other) {
      docs(other.getDocs());
      return this;
    }

    @java.lang.Override
    @JsonSetter("docs")
    public _FinalStage docs(String docs) {
      this.docs = docs;
      return this;
    }

    @java.lang.Override
    public Docs build() {
      return new Docs(docs, additionalProperties);
    }
  }
}
