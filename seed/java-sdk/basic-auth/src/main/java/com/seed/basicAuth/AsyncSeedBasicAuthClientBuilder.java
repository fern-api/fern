/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.basicAuth;

import com.seed.basicAuth.core.ClientOptions;
import com.seed.basicAuth.core.Environment;
import java.util.Base64;
import okhttp3.OkHttpClient;

public final class AsyncSeedBasicAuthClientBuilder {
    private ClientOptions.Builder clientOptionsBuilder = ClientOptions.builder();

    private String username = null;

    private String password = null;

    private Environment environment;

    public AsyncSeedBasicAuthClientBuilder credentials(String username, String password) {
        this.username = username;
        this.password = password;
        return this;
    }

    public AsyncSeedBasicAuthClientBuilder url(String url) {
        this.environment = Environment.custom(url);
        return this;
    }

    /**
     * Sets the timeout (in seconds) for the client
     */
    public AsyncSeedBasicAuthClientBuilder timeout(int timeout) {
        this.clientOptionsBuilder.timeout(timeout);
        return this;
    }

    /**
     * Sets the underlying OkHttp client
     */
    public AsyncSeedBasicAuthClientBuilder httpClient(OkHttpClient httpClient) {
        this.clientOptionsBuilder.httpClient(httpClient);
        return this;
    }

    public AsyncSeedBasicAuthClient build() {
        if (this.username == null) {
            throw new RuntimeException("Please provide username");
        }
        if (this.password == null) {
            throw new RuntimeException("Please provide password");
        }
        String unencodedToken = username + ":" + password;
        String encodedToken = Base64.getEncoder().encodeToString(unencodedToken.getBytes());
        this.clientOptionsBuilder.addHeader("Authorization", "Bearer " + encodedToken);
        clientOptionsBuilder.environment(this.environment);
        return new AsyncSeedBasicAuthClient(clientOptionsBuilder.build());
    }
}
