/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.object.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.seed.object.core.ObjectMappers;
import com.seed.object.types.ReferenceType;
import com.seed.object.types.UserId;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetUndiscriminatedUnionRequest.Builder.class)
public final class GetUndiscriminatedUnionRequest {
    private final Bar bar;

    private final String foo;

    private final Map<String, Object> additionalProperties;

    private GetUndiscriminatedUnionRequest(Bar bar, String foo, Map<String, Object> additionalProperties) {
        this.bar = bar;
        this.foo = foo;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("bar")
    public Bar getBar() {
        return bar;
    }

    @JsonProperty("foo")
    public String getFoo() {
        return foo;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetUndiscriminatedUnionRequest && equalTo((GetUndiscriminatedUnionRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetUndiscriminatedUnionRequest other) {
        return bar.equals(other.bar) && foo.equals(other.foo);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.bar, this.foo);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BarStage builder() {
        return new Builder();
    }

    public interface BarStage {
        FooStage bar(@NotNull Bar bar);

        Builder from(GetUndiscriminatedUnionRequest other);
    }

    public interface FooStage {
        _FinalStage foo(@NotNull String foo);
    }

    public interface _FinalStage {
        GetUndiscriminatedUnionRequest build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BarStage, FooStage, _FinalStage {
        private Bar bar;

        private String foo;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GetUndiscriminatedUnionRequest other) {
            bar(other.getBar());
            foo(other.getFoo());
            return this;
        }

        @java.lang.Override
        @JsonSetter("bar")
        public FooStage bar(@NotNull Bar bar) {
            this.bar = Objects.requireNonNull(bar, "bar must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("foo")
        public _FinalStage foo(@NotNull String foo) {
            this.foo = Objects.requireNonNull(foo, "foo must not be null");
            return this;
        }

        @java.lang.Override
        public GetUndiscriminatedUnionRequest build() {
            return new GetUndiscriminatedUnionRequest(bar, foo, additionalProperties);
        }
    }

    @JsonDeserialize(using = Bar.Deserializer.class)
    public static final class Bar {
        private final Object value;

        private final int type;

        private Bar(Object value, int type) {
            this.value = value;
            this.type = type;
        }

        @JsonValue
        public Object get() {
            return this.value;
        }

        public <T> T visit(Visitor<T> visitor) {
            if (this.type == 0) {
                return visitor.visit((InlineType1) this.value);
            } else if (this.type == 1) {
                return visitor.visit((InlineType2) this.value);
            } else if (this.type == 2) {
                return visitor.visit((DiscriminatedUnion1) this.value);
            } else if (this.type == 3) {
                return visitor.visit((InlineEnum1) this.value);
            } else if (this.type == 4) {
                return visitor.visit((UserId) this.value);
            } else if (this.type == 5) {
                return visitor.visit((List<InlineListItem1>) this.value);
            } else if (this.type == 6) {
                return visitor.visit((Set<InlineSetItem1>) this.value);
            } else if (this.type == 7) {
                return visitor.visit((Map<String, InlineMapItem1>) this.value);
            } else if (this.type == 8) {
                return visitor.visit((ReferenceType) this.value);
            }
            throw new IllegalStateException("Failed to visit value. This should never happen.");
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof Bar && equalTo((Bar) other);
        }

        private boolean equalTo(Bar other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return this.value.toString();
        }

        public static Bar of(InlineType1 value) {
            return new Bar(value, 0);
        }

        public static Bar of(InlineType2 value) {
            return new Bar(value, 1);
        }

        public static Bar of(DiscriminatedUnion1 value) {
            return new Bar(value, 2);
        }

        public static Bar of(InlineEnum1 value) {
            return new Bar(value, 3);
        }

        public static Bar of(UserId value) {
            return new Bar(value, 4);
        }

        public static Bar of(List<InlineListItem1> value) {
            return new Bar(value, 5);
        }

        public static Bar of(Set<InlineSetItem1> value) {
            return new Bar(value, 6);
        }

        public static Bar of(Map<String, InlineMapItem1> value) {
            return new Bar(value, 7);
        }

        public static Bar of(ReferenceType value) {
            return new Bar(value, 8);
        }

        public interface Visitor<T> {
            T visit(InlineType1 value);

            T visit(InlineType2 value);

            T visit(DiscriminatedUnion1 value);

            T visit(InlineEnum1 value);

            T visit(UserId value);

            T visit(List<InlineListItem1> value);

            T visit(Set<InlineSetItem1> value);

            T visit(Map<String, InlineMapItem1> value);

            T visit(ReferenceType value);
        }

        static final class Deserializer extends StdDeserializer<Bar> {
            Deserializer() {
                super(Bar.class);
            }

            @java.lang.Override
            public Bar deserialize(JsonParser p, DeserializationContext context) throws IOException {
                Object value = p.readValueAs(Object.class);
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(value, InlineType1.class));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(value, InlineType2.class));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(value, DiscriminatedUnion1.class));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(value, InlineEnum1.class));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(value, UserId.class));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(
                            value, new TypeReference<List<InlineListItem1>>() {}));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(
                            ObjectMappers.JSON_MAPPER.convertValue(value, new TypeReference<Set<InlineSetItem1>>() {}));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(
                            value, new TypeReference<Map<String, InlineMapItem1>>() {}));
                } catch (IllegalArgumentException e) {
                }
                try {
                    return of(ObjectMappers.JSON_MAPPER.convertValue(value, ReferenceType.class));
                } catch (IllegalArgumentException e) {
                }
                throw new JsonParseException(p, "Failed to deserialize");
            }
        }

        @JsonInclude(JsonInclude.Include.NON_ABSENT)
        @JsonDeserialize(builder = InlineType1.Builder.class)
        public static final class InlineType1 {
            private final String foo;

            private final Bar_ bar;

            private final ReferenceType ref;

            private final Map<String, Object> additionalProperties;

            private InlineType1(String foo, Bar_ bar, ReferenceType ref, Map<String, Object> additionalProperties) {
                this.foo = foo;
                this.bar = bar;
                this.ref = ref;
                this.additionalProperties = additionalProperties;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("foo")
            public String getFoo() {
                return foo;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("bar")
            public Bar_ getBar() {
                return bar;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("ref")
            public ReferenceType getRef() {
                return ref;
            }

            @java.lang.Override
            public boolean equals(Object other) {
                if (this == other) return true;
                return other instanceof InlineType1 && equalTo((InlineType1) other);
            }

            @JsonAnyGetter
            public Map<String, Object> getAdditionalProperties() {
                return this.additionalProperties;
            }

            private boolean equalTo(InlineType1 other) {
                return foo.equals(other.foo) && bar.equals(other.bar) && ref.equals(other.ref);
            }

            @java.lang.Override
            public int hashCode() {
                return Objects.hash(this.foo, this.bar, this.ref);
            }

            @java.lang.Override
            public String toString() {
                return ObjectMappers.stringify(this);
            }

            public static FooStage builder() {
                return new Builder();
            }

            public interface FooStage {
                BarStage foo(@NotNull String foo);

                Builder from(InlineType1 other);
            }

            public interface BarStage {
                RefStage bar(@NotNull Bar_ bar);
            }

            public interface RefStage {
                _FinalStage ref(@NotNull ReferenceType ref);
            }

            public interface _FinalStage {
                InlineType1 build();
            }

            @JsonIgnoreProperties(ignoreUnknown = true)
            public static final class Builder implements FooStage, BarStage, RefStage, _FinalStage {
                private String foo;

                private Bar_ bar;

                private ReferenceType ref;

                @JsonAnySetter
                private Map<String, Object> additionalProperties = new HashMap<>();

                private Builder() {}

                @java.lang.Override
                public Builder from(InlineType1 other) {
                    foo(other.getFoo());
                    bar(other.getBar());
                    ref(other.getRef());
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("foo")
                public BarStage foo(@NotNull String foo) {
                    this.foo = Objects.requireNonNull(foo, "foo must not be null");
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("bar")
                public RefStage bar(@NotNull Bar_ bar) {
                    this.bar = Objects.requireNonNull(bar, "bar must not be null");
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("ref")
                public _FinalStage ref(@NotNull ReferenceType ref) {
                    this.ref = Objects.requireNonNull(ref, "ref must not be null");
                    return this;
                }

                @java.lang.Override
                public InlineType1 build() {
                    return new InlineType1(foo, bar, ref, additionalProperties);
                }
            }

            @JsonInclude(JsonInclude.Include.NON_ABSENT)
            @JsonDeserialize(builder = Bar_.Builder.class)
            public static final class Bar_ {
                private final String foo;

                private final ReferenceType ref;

                private final Map<String, Object> additionalProperties;

                private Bar_(String foo, ReferenceType ref, Map<String, Object> additionalProperties) {
                    this.foo = foo;
                    this.ref = ref;
                    this.additionalProperties = additionalProperties;
                }

                /**
                 * @return lorem ipsum
                 */
                @JsonProperty("foo")
                public String getFoo() {
                    return foo;
                }

                /**
                 * @return lorem ipsum
                 */
                @JsonProperty("ref")
                public ReferenceType getRef() {
                    return ref;
                }

                @java.lang.Override
                public boolean equals(Object other) {
                    if (this == other) return true;
                    return other instanceof Bar_ && equalTo((Bar_) other);
                }

                @JsonAnyGetter
                public Map<String, Object> getAdditionalProperties() {
                    return this.additionalProperties;
                }

                private boolean equalTo(Bar_ other) {
                    return foo.equals(other.foo) && ref.equals(other.ref);
                }

                @java.lang.Override
                public int hashCode() {
                    return Objects.hash(this.foo, this.ref);
                }

                @java.lang.Override
                public String toString() {
                    return ObjectMappers.stringify(this);
                }

                public static FooStage builder() {
                    return new Builder();
                }

                public interface FooStage {
                    RefStage foo(@NotNull String foo);

                    Builder from(Bar_ other);
                }

                public interface RefStage {
                    _FinalStage ref(@NotNull ReferenceType ref);
                }

                public interface _FinalStage {
                    Bar_ build();
                }

                @JsonIgnoreProperties(ignoreUnknown = true)
                public static final class Builder implements FooStage, RefStage, _FinalStage {
                    private String foo;

                    private ReferenceType ref;

                    @JsonAnySetter
                    private Map<String, Object> additionalProperties = new HashMap<>();

                    private Builder() {}

                    @java.lang.Override
                    public Builder from(Bar_ other) {
                        foo(other.getFoo());
                        ref(other.getRef());
                        return this;
                    }

                    /**
                     * <p>lorem ipsum</p>
                     * @return Reference to {@code this} so that method calls can be chained together.
                     */
                    @java.lang.Override
                    @JsonSetter("foo")
                    public RefStage foo(@NotNull String foo) {
                        this.foo = Objects.requireNonNull(foo, "foo must not be null");
                        return this;
                    }

                    /**
                     * <p>lorem ipsum</p>
                     * @return Reference to {@code this} so that method calls can be chained together.
                     */
                    @java.lang.Override
                    @JsonSetter("ref")
                    public _FinalStage ref(@NotNull ReferenceType ref) {
                        this.ref = Objects.requireNonNull(ref, "ref must not be null");
                        return this;
                    }

                    @java.lang.Override
                    public Bar_ build() {
                        return new Bar_(foo, ref, additionalProperties);
                    }
                }
            }
        }

        public static final class DiscriminatedUnion1 {
            private final Value value;

            @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
            private DiscriminatedUnion1(Value value) {
                this.value = value;
            }

            public <T> T visit(Visitor<T> visitor) {
                return value.visit(visitor);
            }

            public static DiscriminatedUnion1 type1(Type1 value) {
                return new DiscriminatedUnion1(new Type1Value(value));
            }

            public static DiscriminatedUnion1 type2(Type2 value) {
                return new DiscriminatedUnion1(new Type2Value(value));
            }

            public static DiscriminatedUnion1 ref(ReferenceType value) {
                return new DiscriminatedUnion1(new RefValue(value));
            }

            public boolean isType1() {
                return value instanceof Type1Value;
            }

            public boolean isType2() {
                return value instanceof Type2Value;
            }

            public boolean isRef() {
                return value instanceof RefValue;
            }

            public boolean _isUnknown() {
                return value instanceof _UnknownValue;
            }

            public Optional<Type1> getType1() {
                if (isType1()) {
                    return Optional.of(((Type1Value) value).value);
                }
                return Optional.empty();
            }

            public Optional<Type2> getType2() {
                if (isType2()) {
                    return Optional.of(((Type2Value) value).value);
                }
                return Optional.empty();
            }

            public Optional<ReferenceType> getRef() {
                if (isRef()) {
                    return Optional.of(((RefValue) value).value);
                }
                return Optional.empty();
            }

            public Optional<Object> _getUnknown() {
                if (_isUnknown()) {
                    return Optional.of(((_UnknownValue) value).value);
                }
                return Optional.empty();
            }

            @JsonValue
            private Value getValue() {
                return this.value;
            }

            public interface Visitor<T> {
                T visitType1(Type1 type1);

                T visitType2(Type2 type2);

                T visitRef(ReferenceType ref);

                T _visitUnknown(Object unknownType);
            }

            @JsonTypeInfo(
                    use = JsonTypeInfo.Id.NAME,
                    property = "type",
                    visible = true,
                    defaultImpl = _UnknownValue.class)
            @JsonSubTypes({
                @JsonSubTypes.Type(Type1Value.class),
                @JsonSubTypes.Type(Type2Value.class),
                @JsonSubTypes.Type(RefValue.class)
            })
            @JsonIgnoreProperties(ignoreUnknown = true)
            private interface Value {
                <T> T visit(Visitor<T> visitor);
            }

            @JsonTypeName("type1")
            private static final class Type1Value implements Value {
                @JsonUnwrapped
                private Type1 value;

                @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
                private Type1Value() {}

                private Type1Value(Type1 value) {
                    this.value = value;
                }

                @java.lang.Override
                public <T> T visit(Visitor<T> visitor) {
                    return visitor.visitType1(value);
                }

                @java.lang.Override
                public boolean equals(Object other) {
                    if (this == other) return true;
                    return other instanceof Type1Value && equalTo((Type1Value) other);
                }

                private boolean equalTo(Type1Value other) {
                    return value.equals(other.value);
                }

                @java.lang.Override
                public int hashCode() {
                    return Objects.hash(this.value);
                }

                @java.lang.Override
                public String toString() {
                    return "Bar.DiscriminatedUnion1{" + "value: " + value + "}";
                }
            }

            @JsonTypeName("type2")
            private static final class Type2Value implements Value {
                @JsonUnwrapped
                private Type2 value;

                @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
                private Type2Value() {}

                private Type2Value(Type2 value) {
                    this.value = value;
                }

                @java.lang.Override
                public <T> T visit(Visitor<T> visitor) {
                    return visitor.visitType2(value);
                }

                @java.lang.Override
                public boolean equals(Object other) {
                    if (this == other) return true;
                    return other instanceof Type2Value && equalTo((Type2Value) other);
                }

                private boolean equalTo(Type2Value other) {
                    return value.equals(other.value);
                }

                @java.lang.Override
                public int hashCode() {
                    return Objects.hash(this.value);
                }

                @java.lang.Override
                public String toString() {
                    return "Bar.DiscriminatedUnion1{" + "value: " + value + "}";
                }
            }

            @JsonTypeName("ref")
            private static final class RefValue implements Value {
                @JsonUnwrapped
                private ReferenceType value;

                @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
                private RefValue() {}

                private RefValue(ReferenceType value) {
                    this.value = value;
                }

                @java.lang.Override
                public <T> T visit(Visitor<T> visitor) {
                    return visitor.visitRef(value);
                }

                @java.lang.Override
                public boolean equals(Object other) {
                    if (this == other) return true;
                    return other instanceof RefValue && equalTo((RefValue) other);
                }

                private boolean equalTo(RefValue other) {
                    return value.equals(other.value);
                }

                @java.lang.Override
                public int hashCode() {
                    return Objects.hash(this.value);
                }

                @java.lang.Override
                public String toString() {
                    return "Bar.DiscriminatedUnion1{" + "value: " + value + "}";
                }
            }

            private static final class _UnknownValue implements Value {
                private String type;

                @JsonValue
                private Object value;

                @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
                private _UnknownValue(@JsonProperty("value") Object value) {}

                @java.lang.Override
                public <T> T visit(Visitor<T> visitor) {
                    return visitor._visitUnknown(value);
                }

                @java.lang.Override
                public boolean equals(Object other) {
                    if (this == other) return true;
                    return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
                }

                private boolean equalTo(_UnknownValue other) {
                    return type.equals(other.type) && value.equals(other.value);
                }

                @java.lang.Override
                public int hashCode() {
                    return Objects.hash(this.type, this.value);
                }

                @java.lang.Override
                public String toString() {
                    return "Bar.DiscriminatedUnion1{" + "type: " + type + ", value: " + value + "}";
                }
            }

            @JsonInclude(JsonInclude.Include.NON_ABSENT)
            @JsonDeserialize(builder = Type2.Builder.class)
            public static final class Type2 {
                private final String baz;

                private final ReferenceType ref;

                private final Map<String, Object> additionalProperties;

                private Type2(String baz, ReferenceType ref, Map<String, Object> additionalProperties) {
                    this.baz = baz;
                    this.ref = ref;
                    this.additionalProperties = additionalProperties;
                }

                /**
                 * @return lorem ipsum
                 */
                @JsonProperty("baz")
                public String getBaz() {
                    return baz;
                }

                /**
                 * @return lorem ipsum
                 */
                @JsonProperty("ref")
                public ReferenceType getRef() {
                    return ref;
                }

                @java.lang.Override
                public boolean equals(Object other) {
                    if (this == other) return true;
                    return other instanceof Type2 && equalTo((Type2) other);
                }

                @JsonAnyGetter
                public Map<String, Object> getAdditionalProperties() {
                    return this.additionalProperties;
                }

                private boolean equalTo(Type2 other) {
                    return baz.equals(other.baz) && ref.equals(other.ref);
                }

                @java.lang.Override
                public int hashCode() {
                    return Objects.hash(this.baz, this.ref);
                }

                @java.lang.Override
                public String toString() {
                    return ObjectMappers.stringify(this);
                }

                public static BazStage builder() {
                    return new Builder();
                }

                public interface BazStage {
                    RefStage baz(@NotNull String baz);

                    Builder from(Type2 other);
                }

                public interface RefStage {
                    _FinalStage ref(@NotNull ReferenceType ref);
                }

                public interface _FinalStage {
                    Type2 build();
                }

                @JsonIgnoreProperties(ignoreUnknown = true)
                public static final class Builder implements BazStage, RefStage, _FinalStage {
                    private String baz;

                    private ReferenceType ref;

                    @JsonAnySetter
                    private Map<String, Object> additionalProperties = new HashMap<>();

                    private Builder() {}

                    @java.lang.Override
                    public Builder from(Type2 other) {
                        baz(other.getBaz());
                        ref(other.getRef());
                        return this;
                    }

                    /**
                     * <p>lorem ipsum</p>
                     * @return Reference to {@code this} so that method calls can be chained together.
                     */
                    @java.lang.Override
                    @JsonSetter("baz")
                    public RefStage baz(@NotNull String baz) {
                        this.baz = Objects.requireNonNull(baz, "baz must not be null");
                        return this;
                    }

                    /**
                     * <p>lorem ipsum</p>
                     * @return Reference to {@code this} so that method calls can be chained together.
                     */
                    @java.lang.Override
                    @JsonSetter("ref")
                    public _FinalStage ref(@NotNull ReferenceType ref) {
                        this.ref = Objects.requireNonNull(ref, "ref must not be null");
                        return this;
                    }

                    @java.lang.Override
                    public Type2 build() {
                        return new Type2(baz, ref, additionalProperties);
                    }
                }
            }

            @JsonInclude(JsonInclude.Include.NON_ABSENT)
            @JsonDeserialize(builder = Type1.Builder.class)
            public static final class Type1 {
                private final String foo;

                private final Bar_ bar;

                private final ReferenceType ref;

                private final Map<String, Object> additionalProperties;

                private Type1(String foo, Bar_ bar, ReferenceType ref, Map<String, Object> additionalProperties) {
                    this.foo = foo;
                    this.bar = bar;
                    this.ref = ref;
                    this.additionalProperties = additionalProperties;
                }

                /**
                 * @return lorem ipsum
                 */
                @JsonProperty("foo")
                public String getFoo() {
                    return foo;
                }

                /**
                 * @return lorem ipsum
                 */
                @JsonProperty("bar")
                public Bar_ getBar() {
                    return bar;
                }

                /**
                 * @return lorem ipsum
                 */
                @JsonProperty("ref")
                public ReferenceType getRef() {
                    return ref;
                }

                @java.lang.Override
                public boolean equals(Object other) {
                    if (this == other) return true;
                    return other instanceof Type1 && equalTo((Type1) other);
                }

                @JsonAnyGetter
                public Map<String, Object> getAdditionalProperties() {
                    return this.additionalProperties;
                }

                private boolean equalTo(Type1 other) {
                    return foo.equals(other.foo) && bar.equals(other.bar) && ref.equals(other.ref);
                }

                @java.lang.Override
                public int hashCode() {
                    return Objects.hash(this.foo, this.bar, this.ref);
                }

                @java.lang.Override
                public String toString() {
                    return ObjectMappers.stringify(this);
                }

                public static FooStage builder() {
                    return new Builder();
                }

                public interface FooStage {
                    BarStage foo(@NotNull String foo);

                    Builder from(Type1 other);
                }

                public interface BarStage {
                    RefStage bar(@NotNull Bar_ bar);
                }

                public interface RefStage {
                    _FinalStage ref(@NotNull ReferenceType ref);
                }

                public interface _FinalStage {
                    Type1 build();
                }

                @JsonIgnoreProperties(ignoreUnknown = true)
                public static final class Builder implements FooStage, BarStage, RefStage, _FinalStage {
                    private String foo;

                    private Bar_ bar;

                    private ReferenceType ref;

                    @JsonAnySetter
                    private Map<String, Object> additionalProperties = new HashMap<>();

                    private Builder() {}

                    @java.lang.Override
                    public Builder from(Type1 other) {
                        foo(other.getFoo());
                        bar(other.getBar());
                        ref(other.getRef());
                        return this;
                    }

                    /**
                     * <p>lorem ipsum</p>
                     * @return Reference to {@code this} so that method calls can be chained together.
                     */
                    @java.lang.Override
                    @JsonSetter("foo")
                    public BarStage foo(@NotNull String foo) {
                        this.foo = Objects.requireNonNull(foo, "foo must not be null");
                        return this;
                    }

                    /**
                     * <p>lorem ipsum</p>
                     * @return Reference to {@code this} so that method calls can be chained together.
                     */
                    @java.lang.Override
                    @JsonSetter("bar")
                    public RefStage bar(@NotNull Bar_ bar) {
                        this.bar = Objects.requireNonNull(bar, "bar must not be null");
                        return this;
                    }

                    /**
                     * <p>lorem ipsum</p>
                     * @return Reference to {@code this} so that method calls can be chained together.
                     */
                    @java.lang.Override
                    @JsonSetter("ref")
                    public _FinalStage ref(@NotNull ReferenceType ref) {
                        this.ref = Objects.requireNonNull(ref, "ref must not be null");
                        return this;
                    }

                    @java.lang.Override
                    public Type1 build() {
                        return new Type1(foo, bar, ref, additionalProperties);
                    }
                }

                @JsonInclude(JsonInclude.Include.NON_ABSENT)
                @JsonDeserialize(builder = Bar_.Builder.class)
                public static final class Bar_ {
                    private final String foo;

                    private final ReferenceType ref;

                    private final Map<String, Object> additionalProperties;

                    private Bar_(String foo, ReferenceType ref, Map<String, Object> additionalProperties) {
                        this.foo = foo;
                        this.ref = ref;
                        this.additionalProperties = additionalProperties;
                    }

                    /**
                     * @return lorem ipsum
                     */
                    @JsonProperty("foo")
                    public String getFoo() {
                        return foo;
                    }

                    /**
                     * @return lorem ipsum
                     */
                    @JsonProperty("ref")
                    public ReferenceType getRef() {
                        return ref;
                    }

                    @java.lang.Override
                    public boolean equals(Object other) {
                        if (this == other) return true;
                        return other instanceof Bar_ && equalTo((Bar_) other);
                    }

                    @JsonAnyGetter
                    public Map<String, Object> getAdditionalProperties() {
                        return this.additionalProperties;
                    }

                    private boolean equalTo(Bar_ other) {
                        return foo.equals(other.foo) && ref.equals(other.ref);
                    }

                    @java.lang.Override
                    public int hashCode() {
                        return Objects.hash(this.foo, this.ref);
                    }

                    @java.lang.Override
                    public String toString() {
                        return ObjectMappers.stringify(this);
                    }

                    public static FooStage builder() {
                        return new Builder();
                    }

                    public interface FooStage {
                        RefStage foo(@NotNull String foo);

                        Builder from(Bar_ other);
                    }

                    public interface RefStage {
                        _FinalStage ref(@NotNull ReferenceType ref);
                    }

                    public interface _FinalStage {
                        Bar_ build();
                    }

                    @JsonIgnoreProperties(ignoreUnknown = true)
                    public static final class Builder implements FooStage, RefStage, _FinalStage {
                        private String foo;

                        private ReferenceType ref;

                        @JsonAnySetter
                        private Map<String, Object> additionalProperties = new HashMap<>();

                        private Builder() {}

                        @java.lang.Override
                        public Builder from(Bar_ other) {
                            foo(other.getFoo());
                            ref(other.getRef());
                            return this;
                        }

                        /**
                         * <p>lorem ipsum</p>
                         * @return Reference to {@code this} so that method calls can be chained together.
                         */
                        @java.lang.Override
                        @JsonSetter("foo")
                        public RefStage foo(@NotNull String foo) {
                            this.foo = Objects.requireNonNull(foo, "foo must not be null");
                            return this;
                        }

                        /**
                         * <p>lorem ipsum</p>
                         * @return Reference to {@code this} so that method calls can be chained together.
                         */
                        @java.lang.Override
                        @JsonSetter("ref")
                        public _FinalStage ref(@NotNull ReferenceType ref) {
                            this.ref = Objects.requireNonNull(ref, "ref must not be null");
                            return this;
                        }

                        @java.lang.Override
                        public Bar_ build() {
                            return new Bar_(foo, ref, additionalProperties);
                        }
                    }
                }
            }
        }

        @JsonInclude(JsonInclude.Include.NON_ABSENT)
        @JsonDeserialize(builder = InlineType2.Builder.class)
        public static final class InlineType2 {
            private final String baz;

            private final ReferenceType ref;

            private final Map<String, Object> additionalProperties;

            private InlineType2(String baz, ReferenceType ref, Map<String, Object> additionalProperties) {
                this.baz = baz;
                this.ref = ref;
                this.additionalProperties = additionalProperties;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("baz")
            public String getBaz() {
                return baz;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("ref")
            public ReferenceType getRef() {
                return ref;
            }

            @java.lang.Override
            public boolean equals(Object other) {
                if (this == other) return true;
                return other instanceof InlineType2 && equalTo((InlineType2) other);
            }

            @JsonAnyGetter
            public Map<String, Object> getAdditionalProperties() {
                return this.additionalProperties;
            }

            private boolean equalTo(InlineType2 other) {
                return baz.equals(other.baz) && ref.equals(other.ref);
            }

            @java.lang.Override
            public int hashCode() {
                return Objects.hash(this.baz, this.ref);
            }

            @java.lang.Override
            public String toString() {
                return ObjectMappers.stringify(this);
            }

            public static BazStage builder() {
                return new Builder();
            }

            public interface BazStage {
                RefStage baz(@NotNull String baz);

                Builder from(InlineType2 other);
            }

            public interface RefStage {
                _FinalStage ref(@NotNull ReferenceType ref);
            }

            public interface _FinalStage {
                InlineType2 build();
            }

            @JsonIgnoreProperties(ignoreUnknown = true)
            public static final class Builder implements BazStage, RefStage, _FinalStage {
                private String baz;

                private ReferenceType ref;

                @JsonAnySetter
                private Map<String, Object> additionalProperties = new HashMap<>();

                private Builder() {}

                @java.lang.Override
                public Builder from(InlineType2 other) {
                    baz(other.getBaz());
                    ref(other.getRef());
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("baz")
                public RefStage baz(@NotNull String baz) {
                    this.baz = Objects.requireNonNull(baz, "baz must not be null");
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("ref")
                public _FinalStage ref(@NotNull ReferenceType ref) {
                    this.ref = Objects.requireNonNull(ref, "ref must not be null");
                    return this;
                }

                @java.lang.Override
                public InlineType2 build() {
                    return new InlineType2(baz, ref, additionalProperties);
                }
            }
        }

        public enum InlineEnum1 {
            SUNNY("SUNNY"),

            CLOUDY("CLOUDY"),

            RAINING("RAINING"),

            SNOWING("SNOWING");

            private final String value;

            InlineEnum1(String value) {
                this.value = value;
            }

            @JsonValue
            @java.lang.Override
            public String toString() {
                return this.value;
            }
        }

        @JsonInclude(JsonInclude.Include.NON_ABSENT)
        @JsonDeserialize(builder = InlineSetItem1.Builder.class)
        public static final class InlineSetItem1 {
            private final String foo;

            private final ReferenceType ref;

            private final Map<String, Object> additionalProperties;

            private InlineSetItem1(String foo, ReferenceType ref, Map<String, Object> additionalProperties) {
                this.foo = foo;
                this.ref = ref;
                this.additionalProperties = additionalProperties;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("foo")
            public String getFoo() {
                return foo;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("ref")
            public ReferenceType getRef() {
                return ref;
            }

            @java.lang.Override
            public boolean equals(Object other) {
                if (this == other) return true;
                return other instanceof InlineSetItem1 && equalTo((InlineSetItem1) other);
            }

            @JsonAnyGetter
            public Map<String, Object> getAdditionalProperties() {
                return this.additionalProperties;
            }

            private boolean equalTo(InlineSetItem1 other) {
                return foo.equals(other.foo) && ref.equals(other.ref);
            }

            @java.lang.Override
            public int hashCode() {
                return Objects.hash(this.foo, this.ref);
            }

            @java.lang.Override
            public String toString() {
                return ObjectMappers.stringify(this);
            }

            public static FooStage builder() {
                return new Builder();
            }

            public interface FooStage {
                RefStage foo(@NotNull String foo);

                Builder from(InlineSetItem1 other);
            }

            public interface RefStage {
                _FinalStage ref(@NotNull ReferenceType ref);
            }

            public interface _FinalStage {
                InlineSetItem1 build();
            }

            @JsonIgnoreProperties(ignoreUnknown = true)
            public static final class Builder implements FooStage, RefStage, _FinalStage {
                private String foo;

                private ReferenceType ref;

                @JsonAnySetter
                private Map<String, Object> additionalProperties = new HashMap<>();

                private Builder() {}

                @java.lang.Override
                public Builder from(InlineSetItem1 other) {
                    foo(other.getFoo());
                    ref(other.getRef());
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("foo")
                public RefStage foo(@NotNull String foo) {
                    this.foo = Objects.requireNonNull(foo, "foo must not be null");
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("ref")
                public _FinalStage ref(@NotNull ReferenceType ref) {
                    this.ref = Objects.requireNonNull(ref, "ref must not be null");
                    return this;
                }

                @java.lang.Override
                public InlineSetItem1 build() {
                    return new InlineSetItem1(foo, ref, additionalProperties);
                }
            }
        }

        @JsonInclude(JsonInclude.Include.NON_ABSENT)
        @JsonDeserialize(builder = InlineMapItem1.Builder.class)
        public static final class InlineMapItem1 {
            private final String foo;

            private final ReferenceType ref;

            private final Map<String, Object> additionalProperties;

            private InlineMapItem1(String foo, ReferenceType ref, Map<String, Object> additionalProperties) {
                this.foo = foo;
                this.ref = ref;
                this.additionalProperties = additionalProperties;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("foo")
            public String getFoo() {
                return foo;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("ref")
            public ReferenceType getRef() {
                return ref;
            }

            @java.lang.Override
            public boolean equals(Object other) {
                if (this == other) return true;
                return other instanceof InlineMapItem1 && equalTo((InlineMapItem1) other);
            }

            @JsonAnyGetter
            public Map<String, Object> getAdditionalProperties() {
                return this.additionalProperties;
            }

            private boolean equalTo(InlineMapItem1 other) {
                return foo.equals(other.foo) && ref.equals(other.ref);
            }

            @java.lang.Override
            public int hashCode() {
                return Objects.hash(this.foo, this.ref);
            }

            @java.lang.Override
            public String toString() {
                return ObjectMappers.stringify(this);
            }

            public static FooStage builder() {
                return new Builder();
            }

            public interface FooStage {
                RefStage foo(@NotNull String foo);

                Builder from(InlineMapItem1 other);
            }

            public interface RefStage {
                _FinalStage ref(@NotNull ReferenceType ref);
            }

            public interface _FinalStage {
                InlineMapItem1 build();
            }

            @JsonIgnoreProperties(ignoreUnknown = true)
            public static final class Builder implements FooStage, RefStage, _FinalStage {
                private String foo;

                private ReferenceType ref;

                @JsonAnySetter
                private Map<String, Object> additionalProperties = new HashMap<>();

                private Builder() {}

                @java.lang.Override
                public Builder from(InlineMapItem1 other) {
                    foo(other.getFoo());
                    ref(other.getRef());
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("foo")
                public RefStage foo(@NotNull String foo) {
                    this.foo = Objects.requireNonNull(foo, "foo must not be null");
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("ref")
                public _FinalStage ref(@NotNull ReferenceType ref) {
                    this.ref = Objects.requireNonNull(ref, "ref must not be null");
                    return this;
                }

                @java.lang.Override
                public InlineMapItem1 build() {
                    return new InlineMapItem1(foo, ref, additionalProperties);
                }
            }
        }

        @JsonInclude(JsonInclude.Include.NON_ABSENT)
        @JsonDeserialize(builder = InlineListItem1.Builder.class)
        public static final class InlineListItem1 {
            private final String foo;

            private final ReferenceType ref;

            private final Map<String, Object> additionalProperties;

            private InlineListItem1(String foo, ReferenceType ref, Map<String, Object> additionalProperties) {
                this.foo = foo;
                this.ref = ref;
                this.additionalProperties = additionalProperties;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("foo")
            public String getFoo() {
                return foo;
            }

            /**
             * @return lorem ipsum
             */
            @JsonProperty("ref")
            public ReferenceType getRef() {
                return ref;
            }

            @java.lang.Override
            public boolean equals(Object other) {
                if (this == other) return true;
                return other instanceof InlineListItem1 && equalTo((InlineListItem1) other);
            }

            @JsonAnyGetter
            public Map<String, Object> getAdditionalProperties() {
                return this.additionalProperties;
            }

            private boolean equalTo(InlineListItem1 other) {
                return foo.equals(other.foo) && ref.equals(other.ref);
            }

            @java.lang.Override
            public int hashCode() {
                return Objects.hash(this.foo, this.ref);
            }

            @java.lang.Override
            public String toString() {
                return ObjectMappers.stringify(this);
            }

            public static FooStage builder() {
                return new Builder();
            }

            public interface FooStage {
                RefStage foo(@NotNull String foo);

                Builder from(InlineListItem1 other);
            }

            public interface RefStage {
                _FinalStage ref(@NotNull ReferenceType ref);
            }

            public interface _FinalStage {
                InlineListItem1 build();
            }

            @JsonIgnoreProperties(ignoreUnknown = true)
            public static final class Builder implements FooStage, RefStage, _FinalStage {
                private String foo;

                private ReferenceType ref;

                @JsonAnySetter
                private Map<String, Object> additionalProperties = new HashMap<>();

                private Builder() {}

                @java.lang.Override
                public Builder from(InlineListItem1 other) {
                    foo(other.getFoo());
                    ref(other.getRef());
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("foo")
                public RefStage foo(@NotNull String foo) {
                    this.foo = Objects.requireNonNull(foo, "foo must not be null");
                    return this;
                }

                /**
                 * <p>lorem ipsum</p>
                 * @return Reference to {@code this} so that method calls can be chained together.
                 */
                @java.lang.Override
                @JsonSetter("ref")
                public _FinalStage ref(@NotNull ReferenceType ref) {
                    this.ref = Objects.requireNonNull(ref, "ref must not be null");
                    return this;
                }

                @java.lang.Override
                public InlineListItem1 build() {
                    return new InlineListItem1(foo, ref, additionalProperties);
                }
            }
        }
    }
}
