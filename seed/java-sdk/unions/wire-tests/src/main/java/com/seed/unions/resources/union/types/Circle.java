/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.unions.resources.union.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.unions.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Circle.Builder.class)
public final class Circle {
    private final double radius;

    private final Map<String, Object> additionalProperties;

    private Circle(double radius, Map<String, Object> additionalProperties) {
        this.radius = radius;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("radius")
    public double getRadius() {
        return radius;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Circle && equalTo((Circle) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Circle other) {
        return radius == other.radius;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.radius);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static RadiusStage builder() {
        return new Builder();
    }

    public interface RadiusStage {
        _FinalStage radius(double radius);

        Builder from(Circle other);
    }

    public interface _FinalStage {
        Circle build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements RadiusStage, _FinalStage {
        private double radius;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Circle other) {
            radius(other.getRadius());
            return this;
        }

        @java.lang.Override
        @JsonSetter("radius")
        public _FinalStage radius(double radius) {
            this.radius = radius;
            return this;
        }

        @java.lang.Override
        public Circle build() {
            return new Circle(radius, additionalProperties);
        }
    }
}
