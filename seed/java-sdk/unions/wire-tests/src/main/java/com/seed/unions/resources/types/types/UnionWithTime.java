/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.unions.resources.types.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public final class UnionWithTime {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private UnionWithTime(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static UnionWithTime value(int value) {
        return new UnionWithTime(new ValueValue(value));
    }

    public static UnionWithTime date(String value) {
        return new UnionWithTime(new DateValue(value));
    }

    public static UnionWithTime datetime(OffsetDateTime value) {
        return new UnionWithTime(new DatetimeValue(value));
    }

    public boolean isValue() {
        return value instanceof ValueValue;
    }

    public boolean isDate() {
        return value instanceof DateValue;
    }

    public boolean isDatetime() {
        return value instanceof DatetimeValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<Integer> getValue() {
        if (isValue()) {
            return Optional.of(((ValueValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<String> getDate() {
        if (isDate()) {
            return Optional.of(((DateValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<OffsetDateTime> getDatetime() {
        if (isDatetime()) {
            return Optional.of(((DatetimeValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue_() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitValue(int value);

        T visitDate(String date);

        T visitDatetime(OffsetDateTime datetime);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(ValueValue.class),
        @JsonSubTypes.Type(DateValue.class),
        @JsonSubTypes.Type(DatetimeValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("value")
    @JsonIgnoreProperties("type")
    private static final class ValueValue implements Value {
        @JsonProperty("value")
        private int value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ValueValue(@JsonProperty("value") int value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitValue(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ValueValue && equalTo((ValueValue) other);
        }

        private boolean equalTo(ValueValue other) {
            return value == other.value;
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithTime{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("date")
    @JsonIgnoreProperties("type")
    private static final class DateValue implements Value {
        @JsonProperty("value")
        private String value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DateValue(@JsonProperty("value") String value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDate(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DateValue && equalTo((DateValue) other);
        }

        private boolean equalTo(DateValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithTime{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("datetime")
    @JsonIgnoreProperties("type")
    private static final class DatetimeValue implements Value {
        @JsonProperty("value")
        private OffsetDateTime value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private DatetimeValue(@JsonProperty("value") OffsetDateTime value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitDatetime(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof DatetimeValue && equalTo((DatetimeValue) other);
        }

        private boolean equalTo(DatetimeValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithTime{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithTime{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
