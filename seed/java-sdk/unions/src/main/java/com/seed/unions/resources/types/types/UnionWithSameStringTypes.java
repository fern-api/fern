/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.unions.resources.types.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class UnionWithSameStringTypes {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private UnionWithSameStringTypes(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static UnionWithSameStringTypes customFormat(String value) {
        return new UnionWithSameStringTypes(new CustomFormatValue(value));
    }

    public static UnionWithSameStringTypes regularString(String value) {
        return new UnionWithSameStringTypes(new RegularStringValue(value));
    }

    public static UnionWithSameStringTypes patternString(String value) {
        return new UnionWithSameStringTypes(new PatternStringValue(value));
    }

    public boolean isCustomFormat() {
        return value instanceof CustomFormatValue;
    }

    public boolean isRegularString() {
        return value instanceof RegularStringValue;
    }

    public boolean isPatternString() {
        return value instanceof PatternStringValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<String> getCustomFormat() {
        if (isCustomFormat()) {
            return Optional.of(((CustomFormatValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<String> getRegularString() {
        if (isRegularString()) {
            return Optional.of(((RegularStringValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<String> getPatternString() {
        if (isPatternString()) {
            return Optional.of(((PatternStringValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitCustomFormat(String customFormat);

        T visitRegularString(String regularString);

        T visitPatternString(String patternString);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(CustomFormatValue.class),
        @JsonSubTypes.Type(RegularStringValue.class),
        @JsonSubTypes.Type(PatternStringValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("customFormat")
    @JsonIgnoreProperties("type")
    private static final class CustomFormatValue implements Value {
        @JsonProperty("value")
        private String value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CustomFormatValue(@JsonProperty("value") String value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCustomFormat(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CustomFormatValue && equalTo((CustomFormatValue) other);
        }

        private boolean equalTo(CustomFormatValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithSameStringTypes{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("regularString")
    @JsonIgnoreProperties("type")
    private static final class RegularStringValue implements Value {
        @JsonProperty("value")
        private String value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private RegularStringValue(@JsonProperty("value") String value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitRegularString(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof RegularStringValue && equalTo((RegularStringValue) other);
        }

        private boolean equalTo(RegularStringValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithSameStringTypes{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("patternString")
    @JsonIgnoreProperties("type")
    private static final class PatternStringValue implements Value {
        @JsonProperty("value")
        private String value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private PatternStringValue(@JsonProperty("value") String value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitPatternString(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof PatternStringValue && equalTo((PatternStringValue) other);
        }

        private boolean equalTo(PatternStringValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithSameStringTypes{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("type")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "UnionWithSameStringTypes{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
