package com.seed.trace;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.seed.trace.core.ObjectMappers;
import com.seed.trace.resources.v2.problem.types.LightweightProblemInfoV2;
import com.seed.trace.resources.v2.problem.types.ProblemInfoV2;
import java.util.List;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class V2ProblemWireTest {
    private MockWebServer server;
    private SeedTraceClient client;
    private ObjectMapper objectMapper = ObjectMappers.JSON_MAPPER;

    @BeforeEach
    public void setup() throws Exception {
        server = new MockWebServer();
        server.start();
        client = SeedTraceClient.builder()
                .url(server.url("/").toString())
                .token("test-token")
                .build();
    }

    @AfterEach
    public void teardown() throws Exception {
        server.shutdown();
    }

    @Test
    public void testGetLightweightProblems() throws Exception {
        server.enqueue(
                new MockResponse()
                        .setResponseCode(200)
                        .setBody(
                                "[{\"problemId\":\"problemId\",\"problemName\":\"problemName\",\"problemVersion\":1,\"variableTypes\":[{\"type\":\"integerType\"}]},{\"problemId\":\"problemId\",\"problemName\":\"problemName\",\"problemVersion\":1,\"variableTypes\":[{\"type\":\"integerType\"}]}]"));
        List<LightweightProblemInfoV2> response = client.v2().problem().getLightweightProblems();
        RecordedRequest request = server.takeRequest();
        Assertions.assertNotNull(request);
        Assertions.assertEquals("GET", request.getMethod());

        // Validate response body
        Assertions.assertNotNull(response, "Response should not be null");
        String actualResponseJson = objectMapper.writeValueAsString(response);
        String expectedResponseBody = ""
                + "[\n"
                + "  {\n"
                + "    \"problemId\": \"problemId\",\n"
                + "    \"problemName\": \"problemName\",\n"
                + "    \"problemVersion\": 1,\n"
                + "    \"variableTypes\": [\n"
                + "      {\n"
                + "        \"type\": \"integerType\"\n"
                + "      }\n"
                + "    ]\n"
                + "  },\n"
                + "  {\n"
                + "    \"problemId\": \"problemId\",\n"
                + "    \"problemName\": \"problemName\",\n"
                + "    \"problemVersion\": 1,\n"
                + "    \"variableTypes\": [\n"
                + "      {\n"
                + "        \"type\": \"integerType\"\n"
                + "      }\n"
                + "    ]\n"
                + "  }\n"
                + "]";
        JsonNode actualResponseNode = objectMapper.readTree(actualResponseJson);
        JsonNode expectedResponseNode = objectMapper.readTree(expectedResponseBody);
        Assertions.assertEquals(
                expectedResponseNode, actualResponseNode, "Response body structure does not match expected");
        if (actualResponseNode.has("type") || actualResponseNode.has("_type") || actualResponseNode.has("kind")) {
            String discriminator = null;
            if (actualResponseNode.has("type"))
                discriminator = actualResponseNode.get("type").asText();
            else if (actualResponseNode.has("_type"))
                discriminator = actualResponseNode.get("_type").asText();
            else if (actualResponseNode.has("kind"))
                discriminator = actualResponseNode.get("kind").asText();
            Assertions.assertNotNull(discriminator, "Union type should have a discriminator field");
            Assertions.assertFalse(discriminator.isEmpty(), "Union discriminator should not be empty");
        }

        if (!actualResponseNode.isNull()) {
            Assertions.assertTrue(
                    actualResponseNode.isObject() || actualResponseNode.isArray() || actualResponseNode.isValueNode(),
                    "response should be a valid JSON value");
        }

        if (actualResponseNode.isArray()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Array should have valid size");
        }
        if (actualResponseNode.isObject()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Object should have valid field count");
        }
    }

    @Test
    public void testGetProblems() throws Exception {
        server.enqueue(
                new MockResponse()
                        .setResponseCode(200)
                        .setBody(
                                "[{\"problemId\":\"problemId\",\"problemDescription\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"problemName\":\"problemName\",\"problemVersion\":1,\"supportedLanguages\":[\"JAVA\"],\"customFiles\":{\"type\":\"basic\",\"methodName\":\"methodName\",\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"additionalFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"basicTestCaseTemplate\":{\"templateId\":\"templateId\",\"name\":\"name\",\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"expectedValueParameterId\":\"expectedValueParameterId\"}},\"generatedFiles\":{\"generatedTestCaseFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"generatedTemplateFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"other\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}}},\"customTestCaseTemplates\":[{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}},{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}}],\"testcases\":[{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}},{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}}],\"isPublic\":true},{\"problemId\":\"problemId\",\"problemDescription\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"problemName\":\"problemName\",\"problemVersion\":1,\"supportedLanguages\":[\"JAVA\"],\"customFiles\":{\"type\":\"basic\",\"methodName\":\"methodName\",\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"additionalFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"basicTestCaseTemplate\":{\"templateId\":\"templateId\",\"name\":\"name\",\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"expectedValueParameterId\":\"expectedValueParameterId\"}},\"generatedFiles\":{\"generatedTestCaseFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"generatedTemplateFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"other\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}}},\"customTestCaseTemplates\":[{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}},{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}}],\"testcases\":[{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}},{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}}],\"isPublic\":true}]"));
        List<ProblemInfoV2> response = client.v2().problem().getProblems();
        RecordedRequest request = server.takeRequest();
        Assertions.assertNotNull(request);
        Assertions.assertEquals("GET", request.getMethod());

        // Validate response body
        Assertions.assertNotNull(response, "Response should not be null");
        String actualResponseJson = objectMapper.writeValueAsString(response);
        String expectedResponseBody = ""
                + "[\n"
                + "  {\n"
                + "    \"problemId\": \"problemId\",\n"
                + "    \"problemDescription\": {\n"
                + "      \"boards\": [\n"
                + "        {\n"
                + "          \"type\": \"html\",\n"
                + "          \"value\": \"boards\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"type\": \"html\",\n"
                + "          \"value\": \"boards\"\n"
                + "        }\n"
                + "      ]\n"
                + "    },\n"
                + "    \"problemName\": \"problemName\",\n"
                + "    \"problemVersion\": 1,\n"
                + "    \"supportedLanguages\": [\n"
                + "      \"JAVA\"\n"
                + "    ],\n"
                + "    \"customFiles\": {\n"
                + "      \"type\": \"basic\",\n"
                + "      \"methodName\": \"methodName\",\n"
                + "      \"signature\": {\n"
                + "        \"parameters\": [\n"
                + "          {\n"
                + "            \"parameterId\": \"parameterId\",\n"
                + "            \"name\": \"name\",\n"
                + "            \"variableType\": {\n"
                + "              \"type\": \"integerType\"\n"
                + "            }\n"
                + "          },\n"
                + "          {\n"
                + "            \"parameterId\": \"parameterId\",\n"
                + "            \"name\": \"name\",\n"
                + "            \"variableType\": {\n"
                + "              \"type\": \"integerType\"\n"
                + "            }\n"
                + "          }\n"
                + "        ],\n"
                + "        \"returnType\": {\n"
                + "          \"type\": \"integerType\"\n"
                + "        }\n"
                + "      },\n"
                + "      \"additionalFiles\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      },\n"
                + "      \"basicTestCaseTemplate\": {\n"
                + "        \"templateId\": \"templateId\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"description\": {\n"
                + "          \"boards\": [\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "      }\n"
                + "    },\n"
                + "    \"generatedFiles\": {\n"
                + "      \"generatedTestCaseFiles\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      },\n"
                + "      \"generatedTemplateFiles\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      },\n"
                + "      \"other\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      }\n"
                + "    },\n"
                + "    \"customTestCaseTemplates\": [\n"
                + "      {\n"
                + "        \"templateId\": \"templateId\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"implementation\": {\n"
                + "          \"description\": {\n"
                + "            \"boards\": [\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              }\n"
                + "            ]\n"
                + "          },\n"
                + "          \"function\": {\n"
                + "            \"type\": \"withActualResult\",\n"
                + "            \"getActualResult\": {\n"
                + "              \"signature\": {\n"
                + "                \"parameters\": [\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  },\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  }\n"
                + "                ],\n"
                + "                \"returnType\": {\n"
                + "                  \"type\": \"integerType\"\n"
                + "                }\n"
                + "              },\n"
                + "              \"code\": {\n"
                + "                \"codeByLanguage\": {\n"
                + "                  \"JAVA\": {\n"
                + "                    \"impl\": \"impl\"\n"
                + "                  }\n"
                + "                }\n"
                + "              }\n"
                + "            },\n"
                + "            \"assertCorrectnessCheck\": {\n"
                + "              \"type\": \"deepEquality\",\n"
                + "              \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "            }\n"
                + "          }\n"
                + "        }\n"
                + "      },\n"
                + "      {\n"
                + "        \"templateId\": \"templateId\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"implementation\": {\n"
                + "          \"description\": {\n"
                + "            \"boards\": [\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              }\n"
                + "            ]\n"
                + "          },\n"
                + "          \"function\": {\n"
                + "            \"type\": \"withActualResult\",\n"
                + "            \"getActualResult\": {\n"
                + "              \"signature\": {\n"
                + "                \"parameters\": [\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  },\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  }\n"
                + "                ],\n"
                + "                \"returnType\": {\n"
                + "                  \"type\": \"integerType\"\n"
                + "                }\n"
                + "              },\n"
                + "              \"code\": {\n"
                + "                \"codeByLanguage\": {\n"
                + "                  \"JAVA\": {\n"
                + "                    \"impl\": \"impl\"\n"
                + "                  }\n"
                + "                }\n"
                + "              }\n"
                + "            },\n"
                + "            \"assertCorrectnessCheck\": {\n"
                + "              \"type\": \"deepEquality\",\n"
                + "              \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "            }\n"
                + "          }\n"
                + "        }\n"
                + "      }\n"
                + "    ],\n"
                + "    \"testcases\": [\n"
                + "      {\n"
                + "        \"metadata\": {\n"
                + "          \"id\": \"id\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"hidden\": true\n"
                + "        },\n"
                + "        \"implementation\": {\n"
                + "          \"type\": \"templateId\",\n"
                + "          \"value\": \"implementation\"\n"
                + "        },\n"
                + "        \"arguments\": {\n"
                + "          \"arguments\": {\n"
                + "            \"type\": \"integerValue\",\n"
                + "            \"value\": 1\n"
                + "          }\n"
                + "        },\n"
                + "        \"expects\": {\n"
                + "          \"expectedStdout\": \"expectedStdout\"\n"
                + "        }\n"
                + "      },\n"
                + "      {\n"
                + "        \"metadata\": {\n"
                + "          \"id\": \"id\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"hidden\": true\n"
                + "        },\n"
                + "        \"implementation\": {\n"
                + "          \"type\": \"templateId\",\n"
                + "          \"value\": \"implementation\"\n"
                + "        },\n"
                + "        \"arguments\": {\n"
                + "          \"arguments\": {\n"
                + "            \"type\": \"integerValue\",\n"
                + "            \"value\": 1\n"
                + "          }\n"
                + "        },\n"
                + "        \"expects\": {\n"
                + "          \"expectedStdout\": \"expectedStdout\"\n"
                + "        }\n"
                + "      }\n"
                + "    ],\n"
                + "    \"isPublic\": true\n"
                + "  },\n"
                + "  {\n"
                + "    \"problemId\": \"problemId\",\n"
                + "    \"problemDescription\": {\n"
                + "      \"boards\": [\n"
                + "        {\n"
                + "          \"type\": \"html\",\n"
                + "          \"value\": \"boards\"\n"
                + "        },\n"
                + "        {\n"
                + "          \"type\": \"html\",\n"
                + "          \"value\": \"boards\"\n"
                + "        }\n"
                + "      ]\n"
                + "    },\n"
                + "    \"problemName\": \"problemName\",\n"
                + "    \"problemVersion\": 1,\n"
                + "    \"supportedLanguages\": [\n"
                + "      \"JAVA\"\n"
                + "    ],\n"
                + "    \"customFiles\": {\n"
                + "      \"type\": \"basic\",\n"
                + "      \"methodName\": \"methodName\",\n"
                + "      \"signature\": {\n"
                + "        \"parameters\": [\n"
                + "          {\n"
                + "            \"parameterId\": \"parameterId\",\n"
                + "            \"name\": \"name\",\n"
                + "            \"variableType\": {\n"
                + "              \"type\": \"integerType\"\n"
                + "            }\n"
                + "          },\n"
                + "          {\n"
                + "            \"parameterId\": \"parameterId\",\n"
                + "            \"name\": \"name\",\n"
                + "            \"variableType\": {\n"
                + "              \"type\": \"integerType\"\n"
                + "            }\n"
                + "          }\n"
                + "        ],\n"
                + "        \"returnType\": {\n"
                + "          \"type\": \"integerType\"\n"
                + "        }\n"
                + "      },\n"
                + "      \"additionalFiles\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      },\n"
                + "      \"basicTestCaseTemplate\": {\n"
                + "        \"templateId\": \"templateId\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"description\": {\n"
                + "          \"boards\": [\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "      }\n"
                + "    },\n"
                + "    \"generatedFiles\": {\n"
                + "      \"generatedTestCaseFiles\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      },\n"
                + "      \"generatedTemplateFiles\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      },\n"
                + "      \"other\": {\n"
                + "        \"JAVA\": {\n"
                + "          \"files\": [\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            },\n"
                + "            {\n"
                + "              \"filename\": \"filename\",\n"
                + "              \"directory\": \"directory\",\n"
                + "              \"contents\": \"contents\",\n"
                + "              \"editable\": true\n"
                + "            }\n"
                + "          ]\n"
                + "        }\n"
                + "      }\n"
                + "    },\n"
                + "    \"customTestCaseTemplates\": [\n"
                + "      {\n"
                + "        \"templateId\": \"templateId\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"implementation\": {\n"
                + "          \"description\": {\n"
                + "            \"boards\": [\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              }\n"
                + "            ]\n"
                + "          },\n"
                + "          \"function\": {\n"
                + "            \"type\": \"withActualResult\",\n"
                + "            \"getActualResult\": {\n"
                + "              \"signature\": {\n"
                + "                \"parameters\": [\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  },\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  }\n"
                + "                ],\n"
                + "                \"returnType\": {\n"
                + "                  \"type\": \"integerType\"\n"
                + "                }\n"
                + "              },\n"
                + "              \"code\": {\n"
                + "                \"codeByLanguage\": {\n"
                + "                  \"JAVA\": {\n"
                + "                    \"impl\": \"impl\"\n"
                + "                  }\n"
                + "                }\n"
                + "              }\n"
                + "            },\n"
                + "            \"assertCorrectnessCheck\": {\n"
                + "              \"type\": \"deepEquality\",\n"
                + "              \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "            }\n"
                + "          }\n"
                + "        }\n"
                + "      },\n"
                + "      {\n"
                + "        \"templateId\": \"templateId\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"implementation\": {\n"
                + "          \"description\": {\n"
                + "            \"boards\": [\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              },\n"
                + "              {\n"
                + "                \"type\": \"html\",\n"
                + "                \"value\": \"boards\"\n"
                + "              }\n"
                + "            ]\n"
                + "          },\n"
                + "          \"function\": {\n"
                + "            \"type\": \"withActualResult\",\n"
                + "            \"getActualResult\": {\n"
                + "              \"signature\": {\n"
                + "                \"parameters\": [\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  },\n"
                + "                  {\n"
                + "                    \"parameterId\": \"parameterId\",\n"
                + "                    \"name\": \"name\",\n"
                + "                    \"variableType\": {\n"
                + "                      \"type\": \"integerType\"\n"
                + "                    }\n"
                + "                  }\n"
                + "                ],\n"
                + "                \"returnType\": {\n"
                + "                  \"type\": \"integerType\"\n"
                + "                }\n"
                + "              },\n"
                + "              \"code\": {\n"
                + "                \"codeByLanguage\": {\n"
                + "                  \"JAVA\": {\n"
                + "                    \"impl\": \"impl\"\n"
                + "                  }\n"
                + "                }\n"
                + "              }\n"
                + "            },\n"
                + "            \"assertCorrectnessCheck\": {\n"
                + "              \"type\": \"deepEquality\",\n"
                + "              \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "            }\n"
                + "          }\n"
                + "        }\n"
                + "      }\n"
                + "    ],\n"
                + "    \"testcases\": [\n"
                + "      {\n"
                + "        \"metadata\": {\n"
                + "          \"id\": \"id\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"hidden\": true\n"
                + "        },\n"
                + "        \"implementation\": {\n"
                + "          \"type\": \"templateId\",\n"
                + "          \"value\": \"implementation\"\n"
                + "        },\n"
                + "        \"arguments\": {\n"
                + "          \"arguments\": {\n"
                + "            \"type\": \"integerValue\",\n"
                + "            \"value\": 1\n"
                + "          }\n"
                + "        },\n"
                + "        \"expects\": {\n"
                + "          \"expectedStdout\": \"expectedStdout\"\n"
                + "        }\n"
                + "      },\n"
                + "      {\n"
                + "        \"metadata\": {\n"
                + "          \"id\": \"id\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"hidden\": true\n"
                + "        },\n"
                + "        \"implementation\": {\n"
                + "          \"type\": \"templateId\",\n"
                + "          \"value\": \"implementation\"\n"
                + "        },\n"
                + "        \"arguments\": {\n"
                + "          \"arguments\": {\n"
                + "            \"type\": \"integerValue\",\n"
                + "            \"value\": 1\n"
                + "          }\n"
                + "        },\n"
                + "        \"expects\": {\n"
                + "          \"expectedStdout\": \"expectedStdout\"\n"
                + "        }\n"
                + "      }\n"
                + "    ],\n"
                + "    \"isPublic\": true\n"
                + "  }\n"
                + "]";
        JsonNode actualResponseNode = objectMapper.readTree(actualResponseJson);
        JsonNode expectedResponseNode = objectMapper.readTree(expectedResponseBody);
        Assertions.assertEquals(
                expectedResponseNode, actualResponseNode, "Response body structure does not match expected");
        if (actualResponseNode.has("type") || actualResponseNode.has("_type") || actualResponseNode.has("kind")) {
            String discriminator = null;
            if (actualResponseNode.has("type"))
                discriminator = actualResponseNode.get("type").asText();
            else if (actualResponseNode.has("_type"))
                discriminator = actualResponseNode.get("_type").asText();
            else if (actualResponseNode.has("kind"))
                discriminator = actualResponseNode.get("kind").asText();
            Assertions.assertNotNull(discriminator, "Union type should have a discriminator field");
            Assertions.assertFalse(discriminator.isEmpty(), "Union discriminator should not be empty");
        }

        if (!actualResponseNode.isNull()) {
            Assertions.assertTrue(
                    actualResponseNode.isObject() || actualResponseNode.isArray() || actualResponseNode.isValueNode(),
                    "response should be a valid JSON value");
        }

        if (actualResponseNode.isArray()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Array should have valid size");
        }
        if (actualResponseNode.isObject()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Object should have valid field count");
        }
    }

    @Test
    public void testGetLatestProblem() throws Exception {
        server.enqueue(
                new MockResponse()
                        .setResponseCode(200)
                        .setBody(
                                "{\"problemId\":\"problemId\",\"problemDescription\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"problemName\":\"problemName\",\"problemVersion\":1,\"supportedLanguages\":[\"JAVA\"],\"customFiles\":{\"type\":\"basic\",\"methodName\":\"methodName\",\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"additionalFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"basicTestCaseTemplate\":{\"templateId\":\"templateId\",\"name\":\"name\",\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"expectedValueParameterId\":\"expectedValueParameterId\"}},\"generatedFiles\":{\"generatedTestCaseFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"generatedTemplateFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"other\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}}},\"customTestCaseTemplates\":[{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\",\"imports\":\"imports\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}},{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\",\"imports\":\"imports\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}}],\"testcases\":[{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}},{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}}],\"isPublic\":true}"));
        ProblemInfoV2 response = client.v2().problem().getLatestProblem("problemId");
        RecordedRequest request = server.takeRequest();
        Assertions.assertNotNull(request);
        Assertions.assertEquals("GET", request.getMethod());

        // Validate response body
        Assertions.assertNotNull(response, "Response should not be null");
        String actualResponseJson = objectMapper.writeValueAsString(response);
        String expectedResponseBody = ""
                + "{\n"
                + "  \"problemId\": \"problemId\",\n"
                + "  \"problemDescription\": {\n"
                + "    \"boards\": [\n"
                + "      {\n"
                + "        \"type\": \"html\",\n"
                + "        \"value\": \"boards\"\n"
                + "      },\n"
                + "      {\n"
                + "        \"type\": \"html\",\n"
                + "        \"value\": \"boards\"\n"
                + "      }\n"
                + "    ]\n"
                + "  },\n"
                + "  \"problemName\": \"problemName\",\n"
                + "  \"problemVersion\": 1,\n"
                + "  \"supportedLanguages\": [\n"
                + "    \"JAVA\"\n"
                + "  ],\n"
                + "  \"customFiles\": {\n"
                + "    \"type\": \"basic\",\n"
                + "    \"methodName\": \"methodName\",\n"
                + "    \"signature\": {\n"
                + "      \"parameters\": [\n"
                + "        {\n"
                + "          \"parameterId\": \"parameterId\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"variableType\": {\n"
                + "            \"type\": \"integerType\"\n"
                + "          }\n"
                + "        },\n"
                + "        {\n"
                + "          \"parameterId\": \"parameterId\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"variableType\": {\n"
                + "            \"type\": \"integerType\"\n"
                + "          }\n"
                + "        }\n"
                + "      ],\n"
                + "      \"returnType\": {\n"
                + "        \"type\": \"integerType\"\n"
                + "      }\n"
                + "    },\n"
                + "    \"additionalFiles\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    },\n"
                + "    \"basicTestCaseTemplate\": {\n"
                + "      \"templateId\": \"templateId\",\n"
                + "      \"name\": \"name\",\n"
                + "      \"description\": {\n"
                + "        \"boards\": [\n"
                + "          {\n"
                + "            \"type\": \"html\",\n"
                + "            \"value\": \"boards\"\n"
                + "          },\n"
                + "          {\n"
                + "            \"type\": \"html\",\n"
                + "            \"value\": \"boards\"\n"
                + "          }\n"
                + "        ]\n"
                + "      },\n"
                + "      \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "    }\n"
                + "  },\n"
                + "  \"generatedFiles\": {\n"
                + "    \"generatedTestCaseFiles\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    },\n"
                + "    \"generatedTemplateFiles\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    },\n"
                + "    \"other\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    }\n"
                + "  },\n"
                + "  \"customTestCaseTemplates\": [\n"
                + "    {\n"
                + "      \"templateId\": \"templateId\",\n"
                + "      \"name\": \"name\",\n"
                + "      \"implementation\": {\n"
                + "        \"description\": {\n"
                + "          \"boards\": [\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"function\": {\n"
                + "          \"type\": \"withActualResult\",\n"
                + "          \"getActualResult\": {\n"
                + "            \"signature\": {\n"
                + "              \"parameters\": [\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                },\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                }\n"
                + "              ],\n"
                + "              \"returnType\": {\n"
                + "                \"type\": \"integerType\"\n"
                + "              }\n"
                + "            },\n"
                + "            \"code\": {\n"
                + "              \"codeByLanguage\": {\n"
                + "                \"JAVA\": {\n"
                + "                  \"impl\": \"impl\",\n"
                + "                  \"imports\": \"imports\"\n"
                + "                }\n"
                + "              }\n"
                + "            }\n"
                + "          },\n"
                + "          \"assertCorrectnessCheck\": {\n"
                + "            \"type\": \"deepEquality\",\n"
                + "            \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "          }\n"
                + "        }\n"
                + "      }\n"
                + "    },\n"
                + "    {\n"
                + "      \"templateId\": \"templateId\",\n"
                + "      \"name\": \"name\",\n"
                + "      \"implementation\": {\n"
                + "        \"description\": {\n"
                + "          \"boards\": [\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"function\": {\n"
                + "          \"type\": \"withActualResult\",\n"
                + "          \"getActualResult\": {\n"
                + "            \"signature\": {\n"
                + "              \"parameters\": [\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                },\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                }\n"
                + "              ],\n"
                + "              \"returnType\": {\n"
                + "                \"type\": \"integerType\"\n"
                + "              }\n"
                + "            },\n"
                + "            \"code\": {\n"
                + "              \"codeByLanguage\": {\n"
                + "                \"JAVA\": {\n"
                + "                  \"impl\": \"impl\",\n"
                + "                  \"imports\": \"imports\"\n"
                + "                }\n"
                + "              }\n"
                + "            }\n"
                + "          },\n"
                + "          \"assertCorrectnessCheck\": {\n"
                + "            \"type\": \"deepEquality\",\n"
                + "            \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "          }\n"
                + "        }\n"
                + "      }\n"
                + "    }\n"
                + "  ],\n"
                + "  \"testcases\": [\n"
                + "    {\n"
                + "      \"metadata\": {\n"
                + "        \"id\": \"id\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"hidden\": true\n"
                + "      },\n"
                + "      \"implementation\": {\n"
                + "        \"type\": \"templateId\",\n"
                + "        \"value\": \"implementation\"\n"
                + "      },\n"
                + "      \"arguments\": {\n"
                + "        \"arguments\": {\n"
                + "          \"type\": \"integerValue\",\n"
                + "          \"value\": 1\n"
                + "        }\n"
                + "      },\n"
                + "      \"expects\": {\n"
                + "        \"expectedStdout\": \"expectedStdout\"\n"
                + "      }\n"
                + "    },\n"
                + "    {\n"
                + "      \"metadata\": {\n"
                + "        \"id\": \"id\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"hidden\": true\n"
                + "      },\n"
                + "      \"implementation\": {\n"
                + "        \"type\": \"templateId\",\n"
                + "        \"value\": \"implementation\"\n"
                + "      },\n"
                + "      \"arguments\": {\n"
                + "        \"arguments\": {\n"
                + "          \"type\": \"integerValue\",\n"
                + "          \"value\": 1\n"
                + "        }\n"
                + "      },\n"
                + "      \"expects\": {\n"
                + "        \"expectedStdout\": \"expectedStdout\"\n"
                + "      }\n"
                + "    }\n"
                + "  ],\n"
                + "  \"isPublic\": true\n"
                + "}";
        JsonNode actualResponseNode = objectMapper.readTree(actualResponseJson);
        JsonNode expectedResponseNode = objectMapper.readTree(expectedResponseBody);
        Assertions.assertEquals(
                expectedResponseNode, actualResponseNode, "Response body structure does not match expected");
        if (actualResponseNode.has("type") || actualResponseNode.has("_type") || actualResponseNode.has("kind")) {
            String discriminator = null;
            if (actualResponseNode.has("type"))
                discriminator = actualResponseNode.get("type").asText();
            else if (actualResponseNode.has("_type"))
                discriminator = actualResponseNode.get("_type").asText();
            else if (actualResponseNode.has("kind"))
                discriminator = actualResponseNode.get("kind").asText();
            Assertions.assertNotNull(discriminator, "Union type should have a discriminator field");
            Assertions.assertFalse(discriminator.isEmpty(), "Union discriminator should not be empty");
        }

        if (!actualResponseNode.isNull()) {
            Assertions.assertTrue(
                    actualResponseNode.isObject() || actualResponseNode.isArray() || actualResponseNode.isValueNode(),
                    "response should be a valid JSON value");
        }

        if (actualResponseNode.isArray()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Array should have valid size");
        }
        if (actualResponseNode.isObject()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Object should have valid field count");
        }
    }

    @Test
    public void testGetProblemVersion() throws Exception {
        server.enqueue(
                new MockResponse()
                        .setResponseCode(200)
                        .setBody(
                                "{\"problemId\":\"problemId\",\"problemDescription\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"problemName\":\"problemName\",\"problemVersion\":1,\"supportedLanguages\":[\"JAVA\"],\"customFiles\":{\"type\":\"basic\",\"methodName\":\"methodName\",\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"additionalFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"basicTestCaseTemplate\":{\"templateId\":\"templateId\",\"name\":\"name\",\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"expectedValueParameterId\":\"expectedValueParameterId\"}},\"generatedFiles\":{\"generatedTestCaseFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"generatedTemplateFiles\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}},\"other\":{\"JAVA\":{\"files\":[{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true},{\"filename\":\"filename\",\"directory\":\"directory\",\"contents\":\"contents\",\"editable\":true}]}}},\"customTestCaseTemplates\":[{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\",\"imports\":\"imports\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}},{\"templateId\":\"templateId\",\"name\":\"name\",\"implementation\":{\"description\":{\"boards\":[{\"type\":\"html\",\"value\":\"boards\"},{\"type\":\"html\",\"value\":\"boards\"}]},\"function\":{\"type\":\"withActualResult\",\"getActualResult\":{\"signature\":{\"parameters\":[{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}},{\"parameterId\":\"parameterId\",\"name\":\"name\",\"variableType\":{\"type\":\"integerType\"}}],\"returnType\":{\"type\":\"integerType\"}},\"code\":{\"codeByLanguage\":{\"JAVA\":{\"impl\":\"impl\",\"imports\":\"imports\"}}}},\"assertCorrectnessCheck\":{\"type\":\"deepEquality\",\"expectedValueParameterId\":\"expectedValueParameterId\"}}}}],\"testcases\":[{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}},{\"metadata\":{\"id\":\"id\",\"name\":\"name\",\"hidden\":true},\"implementation\":{\"type\":\"templateId\",\"value\":\"implementation\"},\"arguments\":{\"arguments\":{\"type\":\"integerValue\",\"value\":1}},\"expects\":{\"expectedStdout\":\"expectedStdout\"}}],\"isPublic\":true}"));
        ProblemInfoV2 response = client.v2().problem().getProblemVersion("problemId", 1);
        RecordedRequest request = server.takeRequest();
        Assertions.assertNotNull(request);
        Assertions.assertEquals("GET", request.getMethod());

        // Validate response body
        Assertions.assertNotNull(response, "Response should not be null");
        String actualResponseJson = objectMapper.writeValueAsString(response);
        String expectedResponseBody = ""
                + "{\n"
                + "  \"problemId\": \"problemId\",\n"
                + "  \"problemDescription\": {\n"
                + "    \"boards\": [\n"
                + "      {\n"
                + "        \"type\": \"html\",\n"
                + "        \"value\": \"boards\"\n"
                + "      },\n"
                + "      {\n"
                + "        \"type\": \"html\",\n"
                + "        \"value\": \"boards\"\n"
                + "      }\n"
                + "    ]\n"
                + "  },\n"
                + "  \"problemName\": \"problemName\",\n"
                + "  \"problemVersion\": 1,\n"
                + "  \"supportedLanguages\": [\n"
                + "    \"JAVA\"\n"
                + "  ],\n"
                + "  \"customFiles\": {\n"
                + "    \"type\": \"basic\",\n"
                + "    \"methodName\": \"methodName\",\n"
                + "    \"signature\": {\n"
                + "      \"parameters\": [\n"
                + "        {\n"
                + "          \"parameterId\": \"parameterId\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"variableType\": {\n"
                + "            \"type\": \"integerType\"\n"
                + "          }\n"
                + "        },\n"
                + "        {\n"
                + "          \"parameterId\": \"parameterId\",\n"
                + "          \"name\": \"name\",\n"
                + "          \"variableType\": {\n"
                + "            \"type\": \"integerType\"\n"
                + "          }\n"
                + "        }\n"
                + "      ],\n"
                + "      \"returnType\": {\n"
                + "        \"type\": \"integerType\"\n"
                + "      }\n"
                + "    },\n"
                + "    \"additionalFiles\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    },\n"
                + "    \"basicTestCaseTemplate\": {\n"
                + "      \"templateId\": \"templateId\",\n"
                + "      \"name\": \"name\",\n"
                + "      \"description\": {\n"
                + "        \"boards\": [\n"
                + "          {\n"
                + "            \"type\": \"html\",\n"
                + "            \"value\": \"boards\"\n"
                + "          },\n"
                + "          {\n"
                + "            \"type\": \"html\",\n"
                + "            \"value\": \"boards\"\n"
                + "          }\n"
                + "        ]\n"
                + "      },\n"
                + "      \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "    }\n"
                + "  },\n"
                + "  \"generatedFiles\": {\n"
                + "    \"generatedTestCaseFiles\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    },\n"
                + "    \"generatedTemplateFiles\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    },\n"
                + "    \"other\": {\n"
                + "      \"JAVA\": {\n"
                + "        \"files\": [\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          },\n"
                + "          {\n"
                + "            \"filename\": \"filename\",\n"
                + "            \"directory\": \"directory\",\n"
                + "            \"contents\": \"contents\",\n"
                + "            \"editable\": true\n"
                + "          }\n"
                + "        ]\n"
                + "      }\n"
                + "    }\n"
                + "  },\n"
                + "  \"customTestCaseTemplates\": [\n"
                + "    {\n"
                + "      \"templateId\": \"templateId\",\n"
                + "      \"name\": \"name\",\n"
                + "      \"implementation\": {\n"
                + "        \"description\": {\n"
                + "          \"boards\": [\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"function\": {\n"
                + "          \"type\": \"withActualResult\",\n"
                + "          \"getActualResult\": {\n"
                + "            \"signature\": {\n"
                + "              \"parameters\": [\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                },\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                }\n"
                + "              ],\n"
                + "              \"returnType\": {\n"
                + "                \"type\": \"integerType\"\n"
                + "              }\n"
                + "            },\n"
                + "            \"code\": {\n"
                + "              \"codeByLanguage\": {\n"
                + "                \"JAVA\": {\n"
                + "                  \"impl\": \"impl\",\n"
                + "                  \"imports\": \"imports\"\n"
                + "                }\n"
                + "              }\n"
                + "            }\n"
                + "          },\n"
                + "          \"assertCorrectnessCheck\": {\n"
                + "            \"type\": \"deepEquality\",\n"
                + "            \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "          }\n"
                + "        }\n"
                + "      }\n"
                + "    },\n"
                + "    {\n"
                + "      \"templateId\": \"templateId\",\n"
                + "      \"name\": \"name\",\n"
                + "      \"implementation\": {\n"
                + "        \"description\": {\n"
                + "          \"boards\": [\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            },\n"
                + "            {\n"
                + "              \"type\": \"html\",\n"
                + "              \"value\": \"boards\"\n"
                + "            }\n"
                + "          ]\n"
                + "        },\n"
                + "        \"function\": {\n"
                + "          \"type\": \"withActualResult\",\n"
                + "          \"getActualResult\": {\n"
                + "            \"signature\": {\n"
                + "              \"parameters\": [\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                },\n"
                + "                {\n"
                + "                  \"parameterId\": \"parameterId\",\n"
                + "                  \"name\": \"name\",\n"
                + "                  \"variableType\": {\n"
                + "                    \"type\": \"integerType\"\n"
                + "                  }\n"
                + "                }\n"
                + "              ],\n"
                + "              \"returnType\": {\n"
                + "                \"type\": \"integerType\"\n"
                + "              }\n"
                + "            },\n"
                + "            \"code\": {\n"
                + "              \"codeByLanguage\": {\n"
                + "                \"JAVA\": {\n"
                + "                  \"impl\": \"impl\",\n"
                + "                  \"imports\": \"imports\"\n"
                + "                }\n"
                + "              }\n"
                + "            }\n"
                + "          },\n"
                + "          \"assertCorrectnessCheck\": {\n"
                + "            \"type\": \"deepEquality\",\n"
                + "            \"expectedValueParameterId\": \"expectedValueParameterId\"\n"
                + "          }\n"
                + "        }\n"
                + "      }\n"
                + "    }\n"
                + "  ],\n"
                + "  \"testcases\": [\n"
                + "    {\n"
                + "      \"metadata\": {\n"
                + "        \"id\": \"id\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"hidden\": true\n"
                + "      },\n"
                + "      \"implementation\": {\n"
                + "        \"type\": \"templateId\",\n"
                + "        \"value\": \"implementation\"\n"
                + "      },\n"
                + "      \"arguments\": {\n"
                + "        \"arguments\": {\n"
                + "          \"type\": \"integerValue\",\n"
                + "          \"value\": 1\n"
                + "        }\n"
                + "      },\n"
                + "      \"expects\": {\n"
                + "        \"expectedStdout\": \"expectedStdout\"\n"
                + "      }\n"
                + "    },\n"
                + "    {\n"
                + "      \"metadata\": {\n"
                + "        \"id\": \"id\",\n"
                + "        \"name\": \"name\",\n"
                + "        \"hidden\": true\n"
                + "      },\n"
                + "      \"implementation\": {\n"
                + "        \"type\": \"templateId\",\n"
                + "        \"value\": \"implementation\"\n"
                + "      },\n"
                + "      \"arguments\": {\n"
                + "        \"arguments\": {\n"
                + "          \"type\": \"integerValue\",\n"
                + "          \"value\": 1\n"
                + "        }\n"
                + "      },\n"
                + "      \"expects\": {\n"
                + "        \"expectedStdout\": \"expectedStdout\"\n"
                + "      }\n"
                + "    }\n"
                + "  ],\n"
                + "  \"isPublic\": true\n"
                + "}";
        JsonNode actualResponseNode = objectMapper.readTree(actualResponseJson);
        JsonNode expectedResponseNode = objectMapper.readTree(expectedResponseBody);
        Assertions.assertEquals(
                expectedResponseNode, actualResponseNode, "Response body structure does not match expected");
        if (actualResponseNode.has("type") || actualResponseNode.has("_type") || actualResponseNode.has("kind")) {
            String discriminator = null;
            if (actualResponseNode.has("type"))
                discriminator = actualResponseNode.get("type").asText();
            else if (actualResponseNode.has("_type"))
                discriminator = actualResponseNode.get("_type").asText();
            else if (actualResponseNode.has("kind"))
                discriminator = actualResponseNode.get("kind").asText();
            Assertions.assertNotNull(discriminator, "Union type should have a discriminator field");
            Assertions.assertFalse(discriminator.isEmpty(), "Union discriminator should not be empty");
        }

        if (!actualResponseNode.isNull()) {
            Assertions.assertTrue(
                    actualResponseNode.isObject() || actualResponseNode.isArray() || actualResponseNode.isValueNode(),
                    "response should be a valid JSON value");
        }

        if (actualResponseNode.isArray()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Array should have valid size");
        }
        if (actualResponseNode.isObject()) {
            Assertions.assertTrue(actualResponseNode.size() >= 0, "Object should have valid field count");
        }
    }
}
