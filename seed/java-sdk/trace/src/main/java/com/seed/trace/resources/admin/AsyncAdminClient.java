/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.trace.resources.admin;

import com.seed.trace.core.ClientOptions;
import com.seed.trace.core.RequestOptions;
import com.seed.trace.resources.admin.requests.StoreTracedTestCaseRequest;
import com.seed.trace.resources.admin.requests.StoreTracedWorkspaceRequest;
import com.seed.trace.resources.submission.types.TestSubmissionStatus;
import com.seed.trace.resources.submission.types.TestSubmissionUpdate;
import com.seed.trace.resources.submission.types.TraceResponseV2;
import com.seed.trace.resources.submission.types.WorkspaceSubmissionStatus;
import com.seed.trace.resources.submission.types.WorkspaceSubmissionUpdate;
import java.util.List;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

public class AsyncAdminClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawAdminClient rawClient;

    public AsyncAdminClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawAdminClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawAdminClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<Void> updateTestSubmissionStatus(UUID submissionId, TestSubmissionStatus request) {
        return this.rawClient.updateTestSubmissionStatus(submissionId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> updateTestSubmissionStatus(
            UUID submissionId, TestSubmissionStatus request, RequestOptions requestOptions) {
        return this.rawClient
                .updateTestSubmissionStatus(submissionId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> sendTestSubmissionUpdate(UUID submissionId, TestSubmissionUpdate request) {
        return this.rawClient.sendTestSubmissionUpdate(submissionId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> sendTestSubmissionUpdate(
            UUID submissionId, TestSubmissionUpdate request, RequestOptions requestOptions) {
        return this.rawClient
                .sendTestSubmissionUpdate(submissionId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> updateWorkspaceSubmissionStatus(
            UUID submissionId, WorkspaceSubmissionStatus request) {
        return this.rawClient
                .updateWorkspaceSubmissionStatus(submissionId, request)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> updateWorkspaceSubmissionStatus(
            UUID submissionId, WorkspaceSubmissionStatus request, RequestOptions requestOptions) {
        return this.rawClient
                .updateWorkspaceSubmissionStatus(submissionId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> sendWorkspaceSubmissionUpdate(UUID submissionId, WorkspaceSubmissionUpdate request) {
        return this.rawClient
                .sendWorkspaceSubmissionUpdate(submissionId, request)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> sendWorkspaceSubmissionUpdate(
            UUID submissionId, WorkspaceSubmissionUpdate request, RequestOptions requestOptions) {
        return this.rawClient
                .sendWorkspaceSubmissionUpdate(submissionId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedTestCase(
            UUID submissionId, String testCaseId, StoreTracedTestCaseRequest request) {
        return this.rawClient
                .storeTracedTestCase(submissionId, testCaseId, request)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedTestCase(
            UUID submissionId, String testCaseId, StoreTracedTestCaseRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .storeTracedTestCase(submissionId, testCaseId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedTestCaseV2(
            UUID submissionId, String testCaseId, List<TraceResponseV2> request) {
        return this.rawClient
                .storeTracedTestCaseV2(submissionId, testCaseId, request)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedTestCaseV2(
            UUID submissionId, String testCaseId, List<TraceResponseV2> request, RequestOptions requestOptions) {
        return this.rawClient
                .storeTracedTestCaseV2(submissionId, testCaseId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedWorkspace(UUID submissionId, StoreTracedWorkspaceRequest request) {
        return this.rawClient.storeTracedWorkspace(submissionId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedWorkspace(
            UUID submissionId, StoreTracedWorkspaceRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .storeTracedWorkspace(submissionId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedWorkspaceV2(UUID submissionId, List<TraceResponseV2> request) {
        return this.rawClient.storeTracedWorkspaceV2(submissionId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> storeTracedWorkspaceV2(
            UUID submissionId, List<TraceResponseV2> request, RequestOptions requestOptions) {
        return this.rawClient
                .storeTracedWorkspaceV2(submissionId, request, requestOptions)
                .thenApply(response -> response.body());
    }
}
