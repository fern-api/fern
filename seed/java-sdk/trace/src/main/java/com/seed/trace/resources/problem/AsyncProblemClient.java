/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.trace.resources.problem;

import com.seed.trace.core.ClientOptions;
import com.seed.trace.core.RequestOptions;
import com.seed.trace.resources.problem.requests.GetDefaultStarterFilesRequest;
import com.seed.trace.resources.problem.types.CreateProblemRequest;
import com.seed.trace.resources.problem.types.CreateProblemResponse;
import com.seed.trace.resources.problem.types.GetDefaultStarterFilesResponse;
import com.seed.trace.resources.problem.types.UpdateProblemResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncProblemClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawProblemClient rawClient;

    public AsyncProblemClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawProblemClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawProblemClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a problem
     */
    public CompletableFuture<CreateProblemResponse> createProblem(CreateProblemRequest request) {
        return this.rawClient.createProblem(request).thenApply(response -> response.body());
    }

    /**
     * Creates a problem
     */
    public CompletableFuture<CreateProblemResponse> createProblem(
            CreateProblemRequest request, RequestOptions requestOptions) {
        return this.rawClient.createProblem(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Updates a problem
     */
    public CompletableFuture<UpdateProblemResponse> updateProblem(String problemId, CreateProblemRequest request) {
        return this.rawClient.updateProblem(problemId, request).thenApply(response -> response.body());
    }

    /**
     * Updates a problem
     */
    public CompletableFuture<UpdateProblemResponse> updateProblem(
            String problemId, CreateProblemRequest request, RequestOptions requestOptions) {
        return this.rawClient.updateProblem(problemId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Soft deletes a problem
     */
    public CompletableFuture<Void> deleteProblem(String problemId) {
        return this.rawClient.deleteProblem(problemId).thenApply(response -> response.body());
    }

    /**
     * Soft deletes a problem
     */
    public CompletableFuture<Void> deleteProblem(String problemId, RequestOptions requestOptions) {
        return this.rawClient.deleteProblem(problemId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns default starter files for problem
     */
    public CompletableFuture<GetDefaultStarterFilesResponse> getDefaultStarterFiles(
            GetDefaultStarterFilesRequest request) {
        return this.rawClient.getDefaultStarterFiles(request).thenApply(response -> response.body());
    }

    /**
     * Returns default starter files for problem
     */
    public CompletableFuture<GetDefaultStarterFilesResponse> getDefaultStarterFiles(
            GetDefaultStarterFilesRequest request, RequestOptions requestOptions) {
        return this.rawClient.getDefaultStarterFiles(request, requestOptions).thenApply(response -> response.body());
    }
}
