/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.trace.resources.v2.problem;

import com.seed.trace.core.ClientOptions;
import com.seed.trace.core.RequestOptions;
import com.seed.trace.resources.v2.problem.types.LightweightProblemInfoV2;
import com.seed.trace.resources.v2.problem.types.ProblemInfoV2;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncProblemClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawProblemClient rawClient;

    public AsyncProblemClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawProblemClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawProblemClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Returns lightweight versions of all problems
     */
    public CompletableFuture<List<LightweightProblemInfoV2>> getLightweightProblems() {
        return this.rawClient.getLightweightProblems().thenApply(response -> response.body());
    }

    /**
     * Returns lightweight versions of all problems
     */
    public CompletableFuture<List<LightweightProblemInfoV2>> getLightweightProblems(RequestOptions requestOptions) {
        return this.rawClient.getLightweightProblems(requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns latest versions of all problems
     */
    public CompletableFuture<List<ProblemInfoV2>> getProblems() {
        return this.rawClient.getProblems().thenApply(response -> response.body());
    }

    /**
     * Returns latest versions of all problems
     */
    public CompletableFuture<List<ProblemInfoV2>> getProblems(RequestOptions requestOptions) {
        return this.rawClient.getProblems(requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns latest version of a problem
     */
    public CompletableFuture<ProblemInfoV2> getLatestProblem(String problemId) {
        return this.rawClient.getLatestProblem(problemId).thenApply(response -> response.body());
    }

    /**
     * Returns latest version of a problem
     */
    public CompletableFuture<ProblemInfoV2> getLatestProblem(String problemId, RequestOptions requestOptions) {
        return this.rawClient.getLatestProblem(problemId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns requested version of a problem
     */
    public CompletableFuture<ProblemInfoV2> getProblemVersion(String problemId, int problemVersion) {
        return this.rawClient.getProblemVersion(problemId, problemVersion).thenApply(response -> response.body());
    }

    /**
     * Returns requested version of a problem
     */
    public CompletableFuture<ProblemInfoV2> getProblemVersion(
            String problemId, int problemVersion, RequestOptions requestOptions) {
        return this.rawClient
                .getProblemVersion(problemId, problemVersion, requestOptions)
                .thenApply(response -> response.body());
    }
}
