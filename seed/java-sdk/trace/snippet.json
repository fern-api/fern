{
    "endpoints": [
        {
            "example_identifier": "82444d62",
            "id": {
                "method": "GET",
                "path": "/",
                "identifier_override": "endpoint_v2.test"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().test();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().test();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "59c076fc",
            "id": {
                "method": "POST",
                "path": "/admin/store-test-submission-status/{submissionId}",
                "identifier_override": "endpoint_admin.updateTestSubmissionStatus"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.TestSubmissionStatus;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().updateTestSubmissionStatus(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            TestSubmissionStatus.stopped()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.TestSubmissionStatus;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().updateTestSubmissionStatus(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            TestSubmissionStatus.stopped()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "b4beebb2",
            "id": {
                "method": "POST",
                "path": "/admin/store-test-submission-status-v2/{submissionId}",
                "identifier_override": "endpoint_admin.sendTestSubmissionUpdate"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.TestSubmissionUpdate;\nimport com.seed.trace.resources.submission.types.TestSubmissionUpdateInfo;\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().sendTestSubmissionUpdate(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            TestSubmissionUpdate\n                .builder()\n                .updateTime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .updateInfo(\n                    TestSubmissionUpdateInfo.running()\n                )\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.TestSubmissionUpdate;\nimport com.seed.trace.resources.submission.types.TestSubmissionUpdateInfo;\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().sendTestSubmissionUpdate(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            TestSubmissionUpdate\n                .builder()\n                .updateTime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .updateInfo(\n                    TestSubmissionUpdateInfo.running()\n                )\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "6d4bcfea",
            "id": {
                "method": "POST",
                "path": "/admin/store-workspace-submission-status/{submissionId}",
                "identifier_override": "endpoint_admin.updateWorkspaceSubmissionStatus"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.WorkspaceSubmissionStatus;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().updateWorkspaceSubmissionStatus(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            WorkspaceSubmissionStatus.stopped()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.WorkspaceSubmissionStatus;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().updateWorkspaceSubmissionStatus(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            WorkspaceSubmissionStatus.stopped()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "9f6ce0c6",
            "id": {
                "method": "POST",
                "path": "/admin/store-workspace-submission-status-v2/{submissionId}",
                "identifier_override": "endpoint_admin.sendWorkspaceSubmissionUpdate"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.WorkspaceSubmissionUpdate;\nimport com.seed.trace.resources.submission.types.WorkspaceSubmissionUpdateInfo;\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().sendWorkspaceSubmissionUpdate(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            WorkspaceSubmissionUpdate\n                .builder()\n                .updateTime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .updateInfo(\n                    WorkspaceSubmissionUpdateInfo.running()\n                )\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.submission.types.WorkspaceSubmissionUpdate;\nimport com.seed.trace.resources.submission.types.WorkspaceSubmissionUpdateInfo;\nimport java.time.OffsetDateTime;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().sendWorkspaceSubmissionUpdate(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            WorkspaceSubmissionUpdate\n                .builder()\n                .updateTime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .updateInfo(\n                    WorkspaceSubmissionUpdateInfo.running()\n                )\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "ed8f1c38",
            "id": {
                "method": "POST",
                "path": "/admin/store-test-trace/submission/{submissionId}/testCase/{testCaseId}",
                "identifier_override": "endpoint_admin.storeTracedTestCase"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.admin.requests.StoreTracedTestCaseRequest;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.commons.types.VariableValue;\nimport com.seed.trace.resources.submission.types.ActualResult;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TestCaseResult;\nimport com.seed.trace.resources.submission.types.TestCaseResultWithStdout;\nimport com.seed.trace.resources.submission.types.TraceResponse;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedTestCase(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            \"testCaseId\",\n            StoreTracedTestCaseRequest\n                .builder()\n                .result(\n                    TestCaseResultWithStdout\n                        .builder()\n                        .result(\n                            TestCaseResult\n                                .builder()\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .actualResult(\n                                    ActualResult.value(\n                                        VariableValue.integerValue()\n                                    )\n                                )\n                                .passed(true)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build()\n                )\n                .traceResponses(\n                    new ArrayList<TraceResponse>(\n                        Arrays.asList(\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build(),\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build()\n                        )\n                    )\n                )\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.admin.requests.StoreTracedTestCaseRequest;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.commons.types.VariableValue;\nimport com.seed.trace.resources.submission.types.ActualResult;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TestCaseResult;\nimport com.seed.trace.resources.submission.types.TestCaseResultWithStdout;\nimport com.seed.trace.resources.submission.types.TraceResponse;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedTestCase(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            \"testCaseId\",\n            StoreTracedTestCaseRequest\n                .builder()\n                .result(\n                    TestCaseResultWithStdout\n                        .builder()\n                        .result(\n                            TestCaseResult\n                                .builder()\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .actualResult(\n                                    ActualResult.value(\n                                        VariableValue.integerValue()\n                                    )\n                                )\n                                .passed(true)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build()\n                )\n                .traceResponses(\n                    new ArrayList<TraceResponse>(\n                        Arrays.asList(\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build(),\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build()\n                        )\n                    )\n                )\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "59d0a4aa",
            "id": {
                "method": "POST",
                "path": "/admin/store-test-trace-v2/submission/{submissionId}/testCase/{testCaseId}",
                "identifier_override": "endpoint_admin.storeTracedTestCaseV2"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TraceResponseV2;\nimport com.seed.trace.resources.submission.types.TracedFile;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedTestCaseV2(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            \"testCaseId\",\n            new ArrayList<TraceResponseV2>(\n                Arrays.asList(\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build(),\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build()\n                )\n            )\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TraceResponseV2;\nimport com.seed.trace.resources.submission.types.TracedFile;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedTestCaseV2(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            \"testCaseId\",\n            new ArrayList<TraceResponseV2>(\n                Arrays.asList(\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build(),\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build()\n                )\n            )\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "635a034a",
            "id": {
                "method": "POST",
                "path": "/admin/store-workspace-trace/submission/{submissionId}",
                "identifier_override": "endpoint_admin.storeTracedWorkspace"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.admin.requests.StoreTracedWorkspaceRequest;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.submission.types.ExceptionInfo;\nimport com.seed.trace.resources.submission.types.ExceptionV2;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TraceResponse;\nimport com.seed.trace.resources.submission.types.WorkspaceRunDetails;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedWorkspace(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            StoreTracedWorkspaceRequest\n                .builder()\n                .workspaceRunDetails(\n                    WorkspaceRunDetails\n                        .builder()\n                        .stdout(\"stdout\")\n                        .exceptionV2(\n                            ExceptionV2.generic(\n                                ExceptionInfo\n                                    .builder()\n                                    .exceptionType(\"exceptionType\")\n                                    .exceptionMessage(\"exceptionMessage\")\n                                    .exceptionStacktrace(\"exceptionStacktrace\")\n                                    .build()\n                            )\n                        )\n                        .exception(\n                            ExceptionInfo\n                                .builder()\n                                .exceptionType(\"exceptionType\")\n                                .exceptionMessage(\"exceptionMessage\")\n                                .exceptionStacktrace(\"exceptionStacktrace\")\n                                .build()\n                        )\n                        .build()\n                )\n                .traceResponses(\n                    new ArrayList<TraceResponse>(\n                        Arrays.asList(\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build(),\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build()\n                        )\n                    )\n                )\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.admin.requests.StoreTracedWorkspaceRequest;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.submission.types.ExceptionInfo;\nimport com.seed.trace.resources.submission.types.ExceptionV2;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TraceResponse;\nimport com.seed.trace.resources.submission.types.WorkspaceRunDetails;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedWorkspace(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            StoreTracedWorkspaceRequest\n                .builder()\n                .workspaceRunDetails(\n                    WorkspaceRunDetails\n                        .builder()\n                        .stdout(\"stdout\")\n                        .exceptionV2(\n                            ExceptionV2.generic(\n                                ExceptionInfo\n                                    .builder()\n                                    .exceptionType(\"exceptionType\")\n                                    .exceptionMessage(\"exceptionMessage\")\n                                    .exceptionStacktrace(\"exceptionStacktrace\")\n                                    .build()\n                            )\n                        )\n                        .exception(\n                            ExceptionInfo\n                                .builder()\n                                .exceptionType(\"exceptionType\")\n                                .exceptionMessage(\"exceptionMessage\")\n                                .exceptionStacktrace(\"exceptionStacktrace\")\n                                .build()\n                        )\n                        .build()\n                )\n                .traceResponses(\n                    new ArrayList<TraceResponse>(\n                        Arrays.asList(\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build(),\n                            TraceResponse\n                                .builder()\n                                .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                                .lineNumber(1)\n                                .stack(\n                                    StackInformation\n                                        .builder()\n                                        .numStackFrames(1)\n                                        .topStackFrame(\n                                            StackFrame\n                                                .builder()\n                                                .methodName(\"methodName\")\n                                                .lineNumber(1)\n                                                .scopes(\n                                                    new ArrayList<Scope>(\n                                                        Arrays.asList(\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build(),\n                                                            Scope\n                                                                .builder()\n                                                                .variables(\n                                                                    new HashMap<String, DebugVariableValue>() {{\n                                                                        put(\"variables\", DebugVariableValue.integerValue());\n                                                                    }}\n                                                                )\n                                                                .build()\n                                                        )\n                                                    )\n                                                )\n                                                .build()\n                                        )\n                                        .build()\n                                )\n                                .returnValue(\n                                    DebugVariableValue.integerValue()\n                                )\n                                .expressionLocation(\n                                    ExpressionLocation\n                                        .builder()\n                                        .start(1)\n                                        .offset(1)\n                                        .build()\n                                )\n                                .stdout(\"stdout\")\n                                .build()\n                        )\n                    )\n                )\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "7e3ae0a0",
            "id": {
                "method": "POST",
                "path": "/admin/store-workspace-trace-v2/submission/{submissionId}",
                "identifier_override": "endpoint_admin.storeTracedWorkspaceV2"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TraceResponseV2;\nimport com.seed.trace.resources.submission.types.TracedFile;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedWorkspaceV2(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            new ArrayList<TraceResponseV2>(\n                Arrays.asList(\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build(),\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build()\n                )\n            )\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.DebugVariableValue;\nimport com.seed.trace.resources.submission.types.ExpressionLocation;\nimport com.seed.trace.resources.submission.types.Scope;\nimport com.seed.trace.resources.submission.types.StackFrame;\nimport com.seed.trace.resources.submission.types.StackInformation;\nimport com.seed.trace.resources.submission.types.TraceResponseV2;\nimport com.seed.trace.resources.submission.types.TracedFile;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.UUID;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.admin().storeTracedWorkspaceV2(\n            UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"),\n            new ArrayList<TraceResponseV2>(\n                Arrays.asList(\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build(),\n                    TraceResponseV2\n                        .builder()\n                        .submissionId(UUID.fromString(\"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\"))\n                        .lineNumber(1)\n                        .file(\n                            TracedFile\n                                .builder()\n                                .filename(\"filename\")\n                                .directory(\"directory\")\n                                .build()\n                        )\n                        .stack(\n                            StackInformation\n                                .builder()\n                                .numStackFrames(1)\n                                .topStackFrame(\n                                    StackFrame\n                                        .builder()\n                                        .methodName(\"methodName\")\n                                        .lineNumber(1)\n                                        .scopes(\n                                            new ArrayList<Scope>(\n                                                Arrays.asList(\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build(),\n                                                    Scope\n                                                        .builder()\n                                                        .variables(\n                                                            new HashMap<String, DebugVariableValue>() {{\n                                                                put(\"variables\", DebugVariableValue.integerValue());\n                                                            }}\n                                                        )\n                                                        .build()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .build()\n                        )\n                        .returnValue(\n                            DebugVariableValue.integerValue()\n                        )\n                        .expressionLocation(\n                            ExpressionLocation\n                                .builder()\n                                .start(1)\n                                .offset(1)\n                                .build()\n                        )\n                        .stdout(\"stdout\")\n                        .build()\n                )\n            )\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "e7f6f16a",
            "id": {
                "method": "GET",
                "path": "/homepage-problems",
                "identifier_override": "endpoint_homepage.getHomepageProblems"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.homepage().getHomepageProblems();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.homepage().getHomepageProblems();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "6ad45e63",
            "id": {
                "method": "POST",
                "path": "/homepage-problems",
                "identifier_override": "endpoint_homepage.setHomepageProblems"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.homepage().setHomepageProblems(\n            new ArrayList<String>(\n                Arrays.asList(\"string\", \"string\")\n            )\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.homepage().setHomepageProblems(\n            new ArrayList<String>(\n                Arrays.asList(\"string\", \"string\")\n            )\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "72e8a0c9",
            "id": {
                "method": "GET",
                "path": "/migration-info/all",
                "identifier_override": "endpoint_migration.getAttemptedMigrations"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.migration.requests.GetAttemptedMigrationsRequest;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.migration().getAttemptedMigrations(\n            GetAttemptedMigrationsRequest\n                .builder()\n                .adminKeyHeader(\"admin-key-header\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.migration.requests.GetAttemptedMigrationsRequest;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.migration().getAttemptedMigrations(\n            GetAttemptedMigrationsRequest\n                .builder()\n                .adminKeyHeader(\"admin-key-header\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "69cee1f0",
            "id": {
                "method": "POST",
                "path": "/v2/playlist/{serviceParam}/create",
                "identifier_override": "endpoint_playlist.createPlaylist"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.playlist.requests.CreatePlaylistRequest;\nimport com.seed.trace.resources.playlist.types.PlaylistCreateRequest;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().createPlaylist(\n            1,\n            CreatePlaylistRequest\n                .builder()\n                .datetime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .body(\n                    PlaylistCreateRequest\n                        .builder()\n                        .name(\"name\")\n                        .problems(\n                            new ArrayList<String>(\n                                Arrays.asList(\"problems\", \"problems\")\n                            )\n                        )\n                        .build()\n                )\n                .optionalDatetime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.playlist.requests.CreatePlaylistRequest;\nimport com.seed.trace.resources.playlist.types.PlaylistCreateRequest;\nimport java.time.OffsetDateTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().createPlaylist(\n            1,\n            CreatePlaylistRequest\n                .builder()\n                .datetime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .body(\n                    PlaylistCreateRequest\n                        .builder()\n                        .name(\"name\")\n                        .problems(\n                            new ArrayList<String>(\n                                Arrays.asList(\"problems\", \"problems\")\n                            )\n                        )\n                        .build()\n                )\n                .optionalDatetime(OffsetDateTime.parse(\"2024-01-15T09:30:00Z\"))\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "dc959454",
            "id": {
                "method": "GET",
                "path": "/v2/playlist/{serviceParam}/all",
                "identifier_override": "endpoint_playlist.getPlaylists"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.playlist.requests.GetPlaylistsRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().getPlaylists(\n            1,\n            GetPlaylistsRequest\n                .builder()\n                .otherField(\"otherField\")\n                .multiLineDocs(\"multiLineDocs\")\n                .optionalMultipleField(\n                    new ArrayList<Optional<String>>(\n                        Arrays.asList(\"optionalMultipleField\")\n                    )\n                )\n                .multipleField(\n                    new ArrayList<String>(\n                        Arrays.asList(\"multipleField\")\n                    )\n                )\n                .limit(1)\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.playlist.requests.GetPlaylistsRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().getPlaylists(\n            1,\n            GetPlaylistsRequest\n                .builder()\n                .otherField(\"otherField\")\n                .multiLineDocs(\"multiLineDocs\")\n                .optionalMultipleField(\n                    new ArrayList<Optional<String>>(\n                        Arrays.asList(\"optionalMultipleField\")\n                    )\n                )\n                .multipleField(\n                    new ArrayList<String>(\n                        Arrays.asList(\"multipleField\")\n                    )\n                )\n                .limit(1)\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "935311e4",
            "id": {
                "method": "GET",
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "identifier_override": "endpoint_playlist.getPlaylist"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().getPlaylist(1, \"playlistId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().getPlaylist(1, \"playlistId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "a82494c9",
            "id": {
                "method": "PUT",
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "identifier_override": "endpoint_playlist.updatePlaylist"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.playlist.types.UpdatePlaylistRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().updatePlaylist(\n            1,\n            \"playlistId\",\n            Optional.of(\n                UpdatePlaylistRequest\n                    .builder()\n                    .name(\"name\")\n                    .problems(\n                        new ArrayList<String>(\n                            Arrays.asList(\"problems\", \"problems\")\n                        )\n                    )\n                    .build()\n            )\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.playlist.types.UpdatePlaylistRequest;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Optional;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().updatePlaylist(\n            1,\n            \"playlistId\",\n            Optional.of(\n                UpdatePlaylistRequest\n                    .builder()\n                    .name(\"name\")\n                    .problems(\n                        new ArrayList<String>(\n                            Arrays.asList(\"problems\", \"problems\")\n                        )\n                    )\n                    .build()\n            )\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "5d0772cd",
            "id": {
                "method": "DELETE",
                "path": "/v2/playlist/{serviceParam}/{playlist_id}",
                "identifier_override": "endpoint_playlist.deletePlaylist"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().deletePlaylist(1, \"playlist_id\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.playlist().deletePlaylist(1, \"playlist_id\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "6e127ef1",
            "id": {
                "method": "POST",
                "path": "/problem-crud/create",
                "identifier_override": "endpoint_problem.createProblem"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.FileInfo;\nimport com.seed.trace.resources.commons.types.Language;\nimport com.seed.trace.resources.commons.types.TestCase;\nimport com.seed.trace.resources.commons.types.TestCaseWithExpectedResult;\nimport com.seed.trace.resources.commons.types.VariableType;\nimport com.seed.trace.resources.commons.types.VariableValue;\nimport com.seed.trace.resources.problem.types.CreateProblemRequest;\nimport com.seed.trace.resources.problem.types.ProblemDescription;\nimport com.seed.trace.resources.problem.types.ProblemDescriptionBoard;\nimport com.seed.trace.resources.problem.types.ProblemFiles;\nimport com.seed.trace.resources.problem.types.VariableTypeAndName;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().createProblem(\n            CreateProblemRequest\n                .builder()\n                .problemName(\"problemName\")\n                .problemDescription(\n                    ProblemDescription\n                        .builder()\n                        .boards(\n                            new ArrayList<ProblemDescriptionBoard>(\n                                Arrays.asList(\n                                    ProblemDescriptionBoard.html(),\n                                    ProblemDescriptionBoard.html()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .files(\n                    new HashMap<Language, ProblemFiles>() {{\n                        put(Language.JAVA, ProblemFiles\n                            .builder()\n                            .solutionFile(\n                                FileInfo\n                                    .builder()\n                                    .filename(\"filename\")\n                                    .contents(\"contents\")\n                                    .build()\n                            )\n                            .readOnlyFiles(\n                                new ArrayList<FileInfo>(\n                                    Arrays.asList(\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build(),\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build()\n                                    )\n                                )\n                            )\n                            .build());\n                    }}\n                )\n                .inputParams(\n                    new ArrayList<VariableTypeAndName>(\n                        Arrays.asList(\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build(),\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build()\n                        )\n                    )\n                )\n                .outputType(\n                    VariableType.integerType()\n                )\n                .testcases(\n                    new ArrayList<TestCaseWithExpectedResult>(\n                        Arrays.asList(\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build(),\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build()\n                        )\n                    )\n                )\n                .methodName(\"methodName\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.FileInfo;\nimport com.seed.trace.resources.commons.types.Language;\nimport com.seed.trace.resources.commons.types.TestCase;\nimport com.seed.trace.resources.commons.types.TestCaseWithExpectedResult;\nimport com.seed.trace.resources.commons.types.VariableType;\nimport com.seed.trace.resources.commons.types.VariableValue;\nimport com.seed.trace.resources.problem.types.CreateProblemRequest;\nimport com.seed.trace.resources.problem.types.ProblemDescription;\nimport com.seed.trace.resources.problem.types.ProblemDescriptionBoard;\nimport com.seed.trace.resources.problem.types.ProblemFiles;\nimport com.seed.trace.resources.problem.types.VariableTypeAndName;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().createProblem(\n            CreateProblemRequest\n                .builder()\n                .problemName(\"problemName\")\n                .problemDescription(\n                    ProblemDescription\n                        .builder()\n                        .boards(\n                            new ArrayList<ProblemDescriptionBoard>(\n                                Arrays.asList(\n                                    ProblemDescriptionBoard.html(),\n                                    ProblemDescriptionBoard.html()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .files(\n                    new HashMap<Language, ProblemFiles>() {{\n                        put(Language.JAVA, ProblemFiles\n                            .builder()\n                            .solutionFile(\n                                FileInfo\n                                    .builder()\n                                    .filename(\"filename\")\n                                    .contents(\"contents\")\n                                    .build()\n                            )\n                            .readOnlyFiles(\n                                new ArrayList<FileInfo>(\n                                    Arrays.asList(\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build(),\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build()\n                                    )\n                                )\n                            )\n                            .build());\n                    }}\n                )\n                .inputParams(\n                    new ArrayList<VariableTypeAndName>(\n                        Arrays.asList(\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build(),\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build()\n                        )\n                    )\n                )\n                .outputType(\n                    VariableType.integerType()\n                )\n                .testcases(\n                    new ArrayList<TestCaseWithExpectedResult>(\n                        Arrays.asList(\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build(),\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build()\n                        )\n                    )\n                )\n                .methodName(\"methodName\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "74552961",
            "id": {
                "method": "POST",
                "path": "/problem-crud/update/{problemId}",
                "identifier_override": "endpoint_problem.updateProblem"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.FileInfo;\nimport com.seed.trace.resources.commons.types.Language;\nimport com.seed.trace.resources.commons.types.TestCase;\nimport com.seed.trace.resources.commons.types.TestCaseWithExpectedResult;\nimport com.seed.trace.resources.commons.types.VariableType;\nimport com.seed.trace.resources.commons.types.VariableValue;\nimport com.seed.trace.resources.problem.types.CreateProblemRequest;\nimport com.seed.trace.resources.problem.types.ProblemDescription;\nimport com.seed.trace.resources.problem.types.ProblemDescriptionBoard;\nimport com.seed.trace.resources.problem.types.ProblemFiles;\nimport com.seed.trace.resources.problem.types.VariableTypeAndName;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().updateProblem(\n            \"problemId\",\n            CreateProblemRequest\n                .builder()\n                .problemName(\"problemName\")\n                .problemDescription(\n                    ProblemDescription\n                        .builder()\n                        .boards(\n                            new ArrayList<ProblemDescriptionBoard>(\n                                Arrays.asList(\n                                    ProblemDescriptionBoard.html(),\n                                    ProblemDescriptionBoard.html()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .files(\n                    new HashMap<Language, ProblemFiles>() {{\n                        put(Language.JAVA, ProblemFiles\n                            .builder()\n                            .solutionFile(\n                                FileInfo\n                                    .builder()\n                                    .filename(\"filename\")\n                                    .contents(\"contents\")\n                                    .build()\n                            )\n                            .readOnlyFiles(\n                                new ArrayList<FileInfo>(\n                                    Arrays.asList(\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build(),\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build()\n                                    )\n                                )\n                            )\n                            .build());\n                    }}\n                )\n                .inputParams(\n                    new ArrayList<VariableTypeAndName>(\n                        Arrays.asList(\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build(),\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build()\n                        )\n                    )\n                )\n                .outputType(\n                    VariableType.integerType()\n                )\n                .testcases(\n                    new ArrayList<TestCaseWithExpectedResult>(\n                        Arrays.asList(\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build(),\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build()\n                        )\n                    )\n                )\n                .methodName(\"methodName\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.FileInfo;\nimport com.seed.trace.resources.commons.types.Language;\nimport com.seed.trace.resources.commons.types.TestCase;\nimport com.seed.trace.resources.commons.types.TestCaseWithExpectedResult;\nimport com.seed.trace.resources.commons.types.VariableType;\nimport com.seed.trace.resources.commons.types.VariableValue;\nimport com.seed.trace.resources.problem.types.CreateProblemRequest;\nimport com.seed.trace.resources.problem.types.ProblemDescription;\nimport com.seed.trace.resources.problem.types.ProblemDescriptionBoard;\nimport com.seed.trace.resources.problem.types.ProblemFiles;\nimport com.seed.trace.resources.problem.types.VariableTypeAndName;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().updateProblem(\n            \"problemId\",\n            CreateProblemRequest\n                .builder()\n                .problemName(\"problemName\")\n                .problemDescription(\n                    ProblemDescription\n                        .builder()\n                        .boards(\n                            new ArrayList<ProblemDescriptionBoard>(\n                                Arrays.asList(\n                                    ProblemDescriptionBoard.html(),\n                                    ProblemDescriptionBoard.html()\n                                )\n                            )\n                        )\n                        .build()\n                )\n                .files(\n                    new HashMap<Language, ProblemFiles>() {{\n                        put(Language.JAVA, ProblemFiles\n                            .builder()\n                            .solutionFile(\n                                FileInfo\n                                    .builder()\n                                    .filename(\"filename\")\n                                    .contents(\"contents\")\n                                    .build()\n                            )\n                            .readOnlyFiles(\n                                new ArrayList<FileInfo>(\n                                    Arrays.asList(\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build(),\n                                        FileInfo\n                                            .builder()\n                                            .filename(\"filename\")\n                                            .contents(\"contents\")\n                                            .build()\n                                    )\n                                )\n                            )\n                            .build());\n                    }}\n                )\n                .inputParams(\n                    new ArrayList<VariableTypeAndName>(\n                        Arrays.asList(\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build(),\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build()\n                        )\n                    )\n                )\n                .outputType(\n                    VariableType.integerType()\n                )\n                .testcases(\n                    new ArrayList<TestCaseWithExpectedResult>(\n                        Arrays.asList(\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build(),\n                            TestCaseWithExpectedResult\n                                .builder()\n                                .testCase(\n                                    TestCase\n                                        .builder()\n                                        .id(\"id\")\n                                        .params(\n                                            new ArrayList<VariableValue>(\n                                                Arrays.asList(\n                                                    VariableValue.integerValue(),\n                                                    VariableValue.integerValue()\n                                                )\n                                            )\n                                        )\n                                        .build()\n                                )\n                                .expectedResult(\n                                    VariableValue.integerValue()\n                                )\n                                .build()\n                        )\n                    )\n                )\n                .methodName(\"methodName\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "ea10c2ee",
            "id": {
                "method": "DELETE",
                "path": "/problem-crud/delete/{problemId}",
                "identifier_override": "endpoint_problem.deleteProblem"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().deleteProblem(\"problemId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().deleteProblem(\"problemId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "9d10cf6",
            "id": {
                "method": "POST",
                "path": "/problem-crud/default-starter-files",
                "identifier_override": "endpoint_problem.getDefaultStarterFiles"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.VariableType;\nimport com.seed.trace.resources.problem.requests.GetDefaultStarterFilesRequest;\nimport com.seed.trace.resources.problem.types.VariableTypeAndName;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().getDefaultStarterFiles(\n            GetDefaultStarterFilesRequest\n                .builder()\n                .inputParams(\n                    new ArrayList<VariableTypeAndName>(\n                        Arrays.asList(\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build(),\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build()\n                        )\n                    )\n                )\n                .outputType(\n                    VariableType.integerType()\n                )\n                .methodName(\"methodName\")\n                .build()\n        );\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.VariableType;\nimport com.seed.trace.resources.problem.requests.GetDefaultStarterFilesRequest;\nimport com.seed.trace.resources.problem.types.VariableTypeAndName;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.problem().getDefaultStarterFiles(\n            GetDefaultStarterFilesRequest\n                .builder()\n                .inputParams(\n                    new ArrayList<VariableTypeAndName>(\n                        Arrays.asList(\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build(),\n                            VariableTypeAndName\n                                .builder()\n                                .variableType(\n                                    VariableType.integerType()\n                                )\n                                .name(\"name\")\n                                .build()\n                        )\n                    )\n                )\n                .outputType(\n                    VariableType.integerType()\n                )\n                .methodName(\"methodName\")\n                .build()\n        );\n    }\n}\n"
            }
        },
        {
            "example_identifier": "ee02f82",
            "id": {
                "method": "POST",
                "path": "/sessions/create-session/{language}",
                "identifier_override": "endpoint_submission.createExecutionSession"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.Language;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().createExecutionSession(Language.JAVA);\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.Language;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().createExecutionSession(Language.JAVA);\n    }\n}\n"
            }
        },
        {
            "example_identifier": "411d56a2",
            "id": {
                "method": "GET",
                "path": "/sessions/{sessionId}",
                "identifier_override": "endpoint_submission.getExecutionSession"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().getExecutionSession(\"sessionId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().getExecutionSession(\"sessionId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "5faa83d7",
            "id": {
                "method": "DELETE",
                "path": "/sessions/stop/{sessionId}",
                "identifier_override": "endpoint_submission.stopExecutionSession"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().stopExecutionSession(\"sessionId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().stopExecutionSession(\"sessionId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "280ace4c",
            "id": {
                "method": "GET",
                "path": "/sessions/execution-sessions-state",
                "identifier_override": "endpoint_submission.getExecutionSessionsState"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().getExecutionSessionsState();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.submission().getExecutionSessionsState();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "b8adb092",
            "id": {
                "method": "PUT",
                "path": "/sysprop/num-warm-instances/{language}/{numWarmInstances}",
                "identifier_override": "endpoint_sysprop.setNumWarmInstances"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.Language;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.sysprop().setNumWarmInstances(Language.JAVA, 1);\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\nimport com.seed.trace.resources.commons.types.Language;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.sysprop().setNumWarmInstances(Language.JAVA, 1);\n    }\n}\n"
            }
        },
        {
            "example_identifier": "12b79b4",
            "id": {
                "method": "GET",
                "path": "/sysprop/num-warm-instances",
                "identifier_override": "endpoint_sysprop.getNumWarmInstances"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.sysprop().getNumWarmInstances();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.sysprop().getNumWarmInstances();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "d6066c36",
            "id": {
                "method": "GET",
                "path": "/problems-v2/lightweight-problem-info",
                "identifier_override": "endpoint_v2/problem.getLightweightProblems"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLightweightProblems();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLightweightProblems();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "834575ec",
            "id": {
                "method": "GET",
                "path": "/problems-v2/problem-info",
                "identifier_override": "endpoint_v2/problem.getProblems"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblems();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblems();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "4a856480",
            "id": {
                "method": "GET",
                "path": "/problems-v2/problem-info/{problemId}",
                "identifier_override": "endpoint_v2/problem.getLatestProblem"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLatestProblem(\"problemId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLatestProblem(\"problemId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "92f62f5e",
            "id": {
                "method": "GET",
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "identifier_override": "endpoint_v2/problem.getProblemVersion"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblemVersion(\"problemId\", 1);\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblemVersion(\"problemId\", 1);\n    }\n}\n"
            }
        },
        {
            "example_identifier": "f987aa6c",
            "id": {
                "method": "GET",
                "path": "/problems-v2/lightweight-problem-info",
                "identifier_override": "endpoint_v2/v3/problem.getLightweightProblems"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLightweightProblems();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLightweightProblems();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "ff6ae88",
            "id": {
                "method": "GET",
                "path": "/problems-v2/problem-info",
                "identifier_override": "endpoint_v2/v3/problem.getProblems"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblems();\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblems();\n    }\n}\n"
            }
        },
        {
            "example_identifier": "6f8035b8",
            "id": {
                "method": "GET",
                "path": "/problems-v2/problem-info/{problemId}",
                "identifier_override": "endpoint_v2/v3/problem.getLatestProblem"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLatestProblem(\"problemId\");\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getLatestProblem(\"problemId\");\n    }\n}\n"
            }
        },
        {
            "example_identifier": "986a11ce",
            "id": {
                "method": "GET",
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "identifier_override": "endpoint_v2/v3/problem.getProblemVersion"
            },
            "snippet": {
                "type": "java",
                "sync_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblemVersion(\"problemId\", 1);\n    }\n}\n",
                "async_client": "package com.example.usage;\n\nimport com.seed.trace.SeedTraceClient;\n\npublic class Example {\n    public static void main(String[] args) {\n        SeedTraceClient client = SeedTraceClient\n            .builder()\n            .token(\"<token>\")\n            .build();\n\n        client.v2().problem().getProblemVersion(\"problemId\", 1);\n    }\n}\n"
            }
        }
    ],
    "types": {}
}