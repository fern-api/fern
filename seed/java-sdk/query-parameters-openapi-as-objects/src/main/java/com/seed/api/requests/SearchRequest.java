/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import com.seed.api.types.NestedUser;
import com.seed.api.types.SearchRequestNeighbor;
import com.seed.api.types.SearchRequestNeighborRequired;
import com.seed.api.types.User;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SearchRequest.Builder.class)
public final class SearchRequest {
    private final Optional<List<User>> userList;

    private final Optional<List<User>> excludeUser;

    private final Optional<List<String>> filter;

    private final int limit;

    private final String id;

    private final String date;

    private final OffsetDateTime deadline;

    private final String bytes;

    private final User user;

    private final Optional<OffsetDateTime> optionalDeadline;

    private final Optional<Map<String, Optional<String>>> keyValue;

    private final Optional<String> optionalString;

    private final Optional<NestedUser> nestedUser;

    private final Optional<User> optionalUser;

    private final Optional<SearchRequestNeighbor> neighbor;

    private final SearchRequestNeighborRequired neighborRequired;

    private final Map<String, Object> additionalProperties;

    private SearchRequest(
            Optional<List<User>> userList,
            Optional<List<User>> excludeUser,
            Optional<List<String>> filter,
            int limit,
            String id,
            String date,
            OffsetDateTime deadline,
            String bytes,
            User user,
            Optional<OffsetDateTime> optionalDeadline,
            Optional<Map<String, Optional<String>>> keyValue,
            Optional<String> optionalString,
            Optional<NestedUser> nestedUser,
            Optional<User> optionalUser,
            Optional<SearchRequestNeighbor> neighbor,
            SearchRequestNeighborRequired neighborRequired,
            Map<String, Object> additionalProperties) {
        this.userList = userList;
        this.excludeUser = excludeUser;
        this.filter = filter;
        this.limit = limit;
        this.id = id;
        this.date = date;
        this.deadline = deadline;
        this.bytes = bytes;
        this.user = user;
        this.optionalDeadline = optionalDeadline;
        this.keyValue = keyValue;
        this.optionalString = optionalString;
        this.nestedUser = nestedUser;
        this.optionalUser = optionalUser;
        this.neighbor = neighbor;
        this.neighborRequired = neighborRequired;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("userList")
    public Optional<List<User>> getUserList() {
        return userList;
    }

    @JsonProperty("excludeUser")
    public Optional<List<User>> getExcludeUser() {
        return excludeUser;
    }

    @JsonProperty("filter")
    public Optional<List<String>> getFilter() {
        return filter;
    }

    @JsonProperty("limit")
    public int getLimit() {
        return limit;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("date")
    public String getDate() {
        return date;
    }

    @JsonProperty("deadline")
    public OffsetDateTime getDeadline() {
        return deadline;
    }

    @JsonProperty("bytes")
    public String getBytes() {
        return bytes;
    }

    @JsonProperty("user")
    public User getUser() {
        return user;
    }

    @JsonProperty("optionalDeadline")
    public Optional<OffsetDateTime> getOptionalDeadline() {
        return optionalDeadline;
    }

    @JsonProperty("keyValue")
    public Optional<Map<String, Optional<String>>> getKeyValue() {
        return keyValue;
    }

    @JsonProperty("optionalString")
    public Optional<String> getOptionalString() {
        return optionalString;
    }

    @JsonProperty("nestedUser")
    public Optional<NestedUser> getNestedUser() {
        return nestedUser;
    }

    @JsonProperty("optionalUser")
    public Optional<User> getOptionalUser() {
        return optionalUser;
    }

    @JsonProperty("neighbor")
    public Optional<SearchRequestNeighbor> getNeighbor() {
        return neighbor;
    }

    @JsonProperty("neighborRequired")
    public SearchRequestNeighborRequired getNeighborRequired() {
        return neighborRequired;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SearchRequest && equalTo((SearchRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SearchRequest other) {
        return userList.equals(other.userList)
                && excludeUser.equals(other.excludeUser)
                && filter.equals(other.filter)
                && limit == other.limit
                && id.equals(other.id)
                && date.equals(other.date)
                && deadline.equals(other.deadline)
                && bytes.equals(other.bytes)
                && user.equals(other.user)
                && optionalDeadline.equals(other.optionalDeadline)
                && keyValue.equals(other.keyValue)
                && optionalString.equals(other.optionalString)
                && nestedUser.equals(other.nestedUser)
                && optionalUser.equals(other.optionalUser)
                && neighbor.equals(other.neighbor)
                && neighborRequired.equals(other.neighborRequired);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.userList,
                this.excludeUser,
                this.filter,
                this.limit,
                this.id,
                this.date,
                this.deadline,
                this.bytes,
                this.user,
                this.optionalDeadline,
                this.keyValue,
                this.optionalString,
                this.nestedUser,
                this.optionalUser,
                this.neighbor,
                this.neighborRequired);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LimitStage builder() {
        return new Builder();
    }

    public interface LimitStage {
        IdStage limit(int limit);

        Builder from(SearchRequest other);
    }

    public interface IdStage {
        DateStage id(@NotNull String id);
    }

    public interface DateStage {
        DeadlineStage date(@NotNull String date);
    }

    public interface DeadlineStage {
        BytesStage deadline(@NotNull OffsetDateTime deadline);
    }

    public interface BytesStage {
        UserStage bytes(@NotNull String bytes);
    }

    public interface UserStage {
        NeighborRequiredStage user(@NotNull User user);
    }

    public interface NeighborRequiredStage {
        _FinalStage neighborRequired(@NotNull SearchRequestNeighborRequired neighborRequired);
    }

    public interface _FinalStage {
        SearchRequest build();

        _FinalStage userList(Optional<List<User>> userList);

        _FinalStage userList(List<User> userList);

        _FinalStage userList(User userList);

        _FinalStage excludeUser(Optional<List<User>> excludeUser);

        _FinalStage excludeUser(List<User> excludeUser);

        _FinalStage excludeUser(User excludeUser);

        _FinalStage filter(Optional<List<String>> filter);

        _FinalStage filter(List<String> filter);

        _FinalStage filter(String filter);

        _FinalStage optionalDeadline(Optional<OffsetDateTime> optionalDeadline);

        _FinalStage optionalDeadline(OffsetDateTime optionalDeadline);

        _FinalStage keyValue(Optional<Map<String, Optional<String>>> keyValue);

        _FinalStage keyValue(Map<String, Optional<String>> keyValue);

        _FinalStage optionalString(Optional<String> optionalString);

        _FinalStage optionalString(String optionalString);

        _FinalStage nestedUser(Optional<NestedUser> nestedUser);

        _FinalStage nestedUser(NestedUser nestedUser);

        _FinalStage optionalUser(Optional<User> optionalUser);

        _FinalStage optionalUser(User optionalUser);

        _FinalStage neighbor(Optional<SearchRequestNeighbor> neighbor);

        _FinalStage neighbor(SearchRequestNeighbor neighbor);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements LimitStage,
                    IdStage,
                    DateStage,
                    DeadlineStage,
                    BytesStage,
                    UserStage,
                    NeighborRequiredStage,
                    _FinalStage {
        private int limit;

        private String id;

        private String date;

        private OffsetDateTime deadline;

        private String bytes;

        private User user;

        private SearchRequestNeighborRequired neighborRequired;

        private Optional<SearchRequestNeighbor> neighbor = Optional.empty();

        private Optional<User> optionalUser = Optional.empty();

        private Optional<NestedUser> nestedUser = Optional.empty();

        private Optional<String> optionalString = Optional.empty();

        private Optional<Map<String, Optional<String>>> keyValue = Optional.empty();

        private Optional<OffsetDateTime> optionalDeadline = Optional.empty();

        private Optional<List<String>> filter = Optional.empty();

        private Optional<List<User>> excludeUser = Optional.empty();

        private Optional<List<User>> userList = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SearchRequest other) {
            userList(other.getUserList());
            excludeUser(other.getExcludeUser());
            filter(other.getFilter());
            limit(other.getLimit());
            id(other.getId());
            date(other.getDate());
            deadline(other.getDeadline());
            bytes(other.getBytes());
            user(other.getUser());
            optionalDeadline(other.getOptionalDeadline());
            keyValue(other.getKeyValue());
            optionalString(other.getOptionalString());
            nestedUser(other.getNestedUser());
            optionalUser(other.getOptionalUser());
            neighbor(other.getNeighbor());
            neighborRequired(other.getNeighborRequired());
            return this;
        }

        @java.lang.Override
        @JsonSetter("limit")
        public IdStage limit(int limit) {
            this.limit = limit;
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public DateStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("date")
        public DeadlineStage date(@NotNull String date) {
            this.date = Objects.requireNonNull(date, "date must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("deadline")
        public BytesStage deadline(@NotNull OffsetDateTime deadline) {
            this.deadline = Objects.requireNonNull(deadline, "deadline must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("bytes")
        public UserStage bytes(@NotNull String bytes) {
            this.bytes = Objects.requireNonNull(bytes, "bytes must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("user")
        public NeighborRequiredStage user(@NotNull User user) {
            this.user = Objects.requireNonNull(user, "user must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("neighborRequired")
        public _FinalStage neighborRequired(@NotNull SearchRequestNeighborRequired neighborRequired) {
            this.neighborRequired = Objects.requireNonNull(neighborRequired, "neighborRequired must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage neighbor(SearchRequestNeighbor neighbor) {
            this.neighbor = Optional.ofNullable(neighbor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "neighbor", nulls = Nulls.SKIP)
        public _FinalStage neighbor(Optional<SearchRequestNeighbor> neighbor) {
            this.neighbor = neighbor;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalUser(User optionalUser) {
            this.optionalUser = Optional.ofNullable(optionalUser);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalUser", nulls = Nulls.SKIP)
        public _FinalStage optionalUser(Optional<User> optionalUser) {
            this.optionalUser = optionalUser;
            return this;
        }

        @java.lang.Override
        public _FinalStage nestedUser(NestedUser nestedUser) {
            this.nestedUser = Optional.ofNullable(nestedUser);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "nestedUser", nulls = Nulls.SKIP)
        public _FinalStage nestedUser(Optional<NestedUser> nestedUser) {
            this.nestedUser = nestedUser;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalString(String optionalString) {
            this.optionalString = Optional.ofNullable(optionalString);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalString", nulls = Nulls.SKIP)
        public _FinalStage optionalString(Optional<String> optionalString) {
            this.optionalString = optionalString;
            return this;
        }

        @java.lang.Override
        public _FinalStage keyValue(Map<String, Optional<String>> keyValue) {
            this.keyValue = Optional.ofNullable(keyValue);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "keyValue", nulls = Nulls.SKIP)
        public _FinalStage keyValue(Optional<Map<String, Optional<String>>> keyValue) {
            this.keyValue = keyValue;
            return this;
        }

        @java.lang.Override
        public _FinalStage optionalDeadline(OffsetDateTime optionalDeadline) {
            this.optionalDeadline = Optional.ofNullable(optionalDeadline);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "optionalDeadline", nulls = Nulls.SKIP)
        public _FinalStage optionalDeadline(Optional<OffsetDateTime> optionalDeadline) {
            this.optionalDeadline = optionalDeadline;
            return this;
        }

        @java.lang.Override
        public _FinalStage filter(String filter) {
            this.filter = Optional.of(Collections.singletonList(filter));
            return this;
        }

        @java.lang.Override
        public _FinalStage filter(List<String> filter) {
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "filter", nulls = Nulls.SKIP)
        public _FinalStage filter(Optional<List<String>> filter) {
            this.filter = filter;
            return this;
        }

        @java.lang.Override
        public _FinalStage excludeUser(User excludeUser) {
            this.excludeUser = Optional.of(Collections.singletonList(excludeUser));
            return this;
        }

        @java.lang.Override
        public _FinalStage excludeUser(List<User> excludeUser) {
            this.excludeUser = Optional.ofNullable(excludeUser);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "excludeUser", nulls = Nulls.SKIP)
        public _FinalStage excludeUser(Optional<List<User>> excludeUser) {
            this.excludeUser = excludeUser;
            return this;
        }

        @java.lang.Override
        public _FinalStage userList(User userList) {
            this.userList = Optional.of(Collections.singletonList(userList));
            return this;
        }

        @java.lang.Override
        public _FinalStage userList(List<User> userList) {
            this.userList = Optional.ofNullable(userList);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "userList", nulls = Nulls.SKIP)
        public _FinalStage userList(Optional<List<User>> userList) {
            this.userList = userList;
            return this;
        }

        @java.lang.Override
        public SearchRequest build() {
            return new SearchRequest(
                    userList,
                    excludeUser,
                    filter,
                    limit,
                    id,
                    date,
                    deadline,
                    bytes,
                    user,
                    optionalDeadline,
                    keyValue,
                    optionalString,
                    nestedUser,
                    optionalUser,
                    neighbor,
                    neighborRequired,
                    additionalProperties);
        }
    }
}
