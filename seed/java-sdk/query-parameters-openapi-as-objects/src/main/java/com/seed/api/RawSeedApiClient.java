/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api;

import com.seed.api.core.ClientOptions;
import com.seed.api.core.ObjectMappers;
import com.seed.api.core.QueryStringMapper;
import com.seed.api.core.RequestOptions;
import com.seed.api.core.SeedApiApiException;
import com.seed.api.core.SeedApiException;
import com.seed.api.core.SeedApiHttpResponse;
import com.seed.api.requests.SearchRequest;
import com.seed.api.types.SearchResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawSeedApiClient {
    protected final ClientOptions clientOptions;

    public RawSeedApiClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public SeedApiHttpResponse<SearchResponse> search(SearchRequest request) {
        return search(request, null);
    }

    public SeedApiHttpResponse<SearchResponse> search(SearchRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("user/getUsername");
        QueryStringMapper.addQueryParameter(httpUrl, "limit", request.getLimit(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "id", request.getId(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "date", request.getDate(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "deadline", request.getDeadline(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "bytes", request.getBytes(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "user", request.getUser(), false);
        if (request.getOptionalDeadline().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "optionalDeadline", request.getOptionalDeadline().get(), false);
        }
        if (request.getKeyValue().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "keyValue", request.getKeyValue().get(), false);
        }
        if (request.getOptionalString().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "optionalString", request.getOptionalString().get(), false);
        }
        if (request.getNestedUser().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "nestedUser", request.getNestedUser().get(), false);
        }
        if (request.getOptionalUser().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "optionalUser", request.getOptionalUser().get(), false);
        }
        if (request.getNeighbor().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "neighbor", request.getNeighbor().get(), false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "neighborRequired", request.getNeighborRequired(), false);
        if (request.getUserList().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "userList", request.getUserList().get(), true);
        }
        if (request.getExcludeUser().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "excludeUser", request.getExcludeUser().get(), true);
        }
        if (request.getFilter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "filter", request.getFilter().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SearchResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedApiException("Network error executing HTTP request", e);
        }
    }
}
