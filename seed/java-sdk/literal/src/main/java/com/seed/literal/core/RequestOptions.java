/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.literal.core;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

public final class RequestOptions {
    private final String version;

    private final String auditLogging;

    private final Optional<Integer> timeout;

    private final TimeUnit timeoutTimeUnit;

    private RequestOptions(String version, String auditLogging, Optional<Integer> timeout, TimeUnit timeoutTimeUnit) {
        this.version = version;
        this.auditLogging = auditLogging;
        this.timeout = timeout;
        this.timeoutTimeUnit = timeoutTimeUnit;
    }

    public Optional<Integer> getTimeout() {
        return timeout;
    }

    public TimeUnit getTimeoutTimeUnit() {
        return timeoutTimeUnit;
    }

    public Map<String, String> getHeaders() {
        Map<String, String> headers = new HashMap<>();
        if (this.version != null) {
            headers.put("X-API-Version", this.version);
        }
        if (this.auditLogging != null) {
            headers.put("X-API-Enable-Audit-Logging", this.auditLogging);
        }
        return headers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private String version = null;

        private String auditLogging = null;

        private Optional<Integer> timeout = null;

        private TimeUnit timeoutTimeUnit = TimeUnit.SECONDS;

        public Builder version(String version) {
            this.version = version;
            return this;
        }

        public Builder auditLogging(String auditLogging) {
            this.auditLogging = auditLogging;
            return this;
        }

        public Builder timeout(Integer timeout) {
            this.timeout = Optional.of(timeout);
            return this;
        }

        public Builder timeout(Integer timeout, TimeUnit timeoutTimeUnit) {
            this.timeout = Optional.of(timeout);
            this.timeoutTimeUnit = timeoutTimeUnit;
            return this;
        }

        public RequestOptions build() {
            return new RequestOptions(version, auditLogging, timeout, timeoutTimeUnit);
        }
    }
}
