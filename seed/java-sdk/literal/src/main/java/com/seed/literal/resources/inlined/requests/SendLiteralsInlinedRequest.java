/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.literal.resources.inlined.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.literal.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = SendLiteralsInlinedRequest.Builder.class)
public final class SendLiteralsInlinedRequest {
    private final String query;

    private final Optional<Double> temperature;

    private final Map<String, Object> additionalProperties;

    private SendLiteralsInlinedRequest(
            String query, Optional<Double> temperature, Map<String, Object> additionalProperties) {
        this.query = query;
        this.temperature = temperature;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("prompt")
    public String getPrompt() {
        return "You are a helpful assistant";
    }

    @JsonProperty("query")
    public String getQuery() {
        return query;
    }

    @JsonProperty("temperature")
    public Optional<Double> getTemperature() {
        return temperature;
    }

    @JsonProperty("stream")
    public Boolean getStream() {
        return false;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SendLiteralsInlinedRequest && equalTo((SendLiteralsInlinedRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SendLiteralsInlinedRequest other) {
        return query.equals(other.query) && temperature.equals(other.temperature);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.query, this.temperature);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static QueryStage builder() {
        return new Builder();
    }

    public interface QueryStage {
        _FinalStage query(String query);

        Builder from(SendLiteralsInlinedRequest other);
    }

    public interface _FinalStage {
        SendLiteralsInlinedRequest build();

        _FinalStage temperature(Optional<Double> temperature);

        _FinalStage temperature(Double temperature);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements QueryStage, _FinalStage {
        private String query;

        private Optional<Double> temperature = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SendLiteralsInlinedRequest other) {
            query(other.getQuery());
            temperature(other.getTemperature());
            return this;
        }

        @java.lang.Override
        @JsonSetter("query")
        public _FinalStage query(String query) {
            this.query = query;
            return this;
        }

        @java.lang.Override
        public _FinalStage temperature(Double temperature) {
            this.temperature = Optional.of(temperature);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "temperature", nulls = Nulls.SKIP)
        public _FinalStage temperature(Optional<Double> temperature) {
            this.temperature = temperature;
            return this;
        }

        @java.lang.Override
        public SendLiteralsInlinedRequest build() {
            return new SendLiteralsInlinedRequest(query, temperature, additionalProperties);
        }
    }
}
