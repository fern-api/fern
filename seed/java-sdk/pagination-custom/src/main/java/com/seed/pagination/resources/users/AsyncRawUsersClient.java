/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.pagination.resources.users;

import com.seed.pagination.core.ClientOptions;
import com.seed.pagination.core.ObjectMappers;
import com.seed.pagination.core.QueryStringMapper;
import com.seed.pagination.core.RequestOptions;
import com.seed.pagination.core.SeedPaginationApiException;
import com.seed.pagination.core.SeedPaginationException;
import com.seed.pagination.core.SeedPaginationHttpResponse;
import com.seed.pagination.resources.users.requests.ListUsernamesRequestCustom;
import com.seed.pagination.types.UsernameCursor;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawUsersClient {
    protected final ClientOptions clientOptions;

    public AsyncRawUsersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> listUsernamesCustom() {
        return listUsernamesCustom(ListUsernamesRequestCustom.builder().build());
    }

    public CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> listUsernamesCustom(
            ListUsernamesRequestCustom request) {
        return listUsernamesCustom(request, null);
    }

    public CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> listUsernamesCustom(
            ListUsernamesRequestCustom request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        if (request.getStartingAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "starting_after", request.getStartingAfter().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<SeedPaginationHttpResponse<UsernameCursor>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new SeedPaginationHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), UsernameCursor.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new SeedPaginationApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new SeedPaginationException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new SeedPaginationException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
