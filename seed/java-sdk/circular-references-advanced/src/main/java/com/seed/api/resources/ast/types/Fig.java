/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.api.resources.ast.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Fig.Builder.class)
public final class Fig {
    private final Animal animal;

    private final Map<String, Object> additionalProperties;

    private Fig(Animal animal, Map<String, Object> additionalProperties) {
        this.animal = animal;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("animal")
    public Animal getAnimal() {
        return animal;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Fig && equalTo((Fig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Fig other) {
        return animal.equals(other.animal);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.animal);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AnimalStage builder() {
        return new Builder();
    }

    public interface AnimalStage {
        _FinalStage animal(@NotNull Animal animal);

        Builder from(Fig other);
    }

    public interface _FinalStage {
        Fig build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AnimalStage, _FinalStage {
        private Animal animal;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Fig other) {
            animal(other.getAnimal());
            return this;
        }

        @java.lang.Override
        @JsonSetter("animal")
        public _FinalStage animal(@NotNull Animal animal) {
            this.animal = Objects.requireNonNull(animal, "animal must not be null");
            return this;
        }

        @java.lang.Override
        public Fig build() {
            return new Fig(animal, additionalProperties);
        }
    }
}
