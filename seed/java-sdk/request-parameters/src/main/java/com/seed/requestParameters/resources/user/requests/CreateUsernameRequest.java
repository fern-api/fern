/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.requestParameters.resources.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.requestParameters.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateUsernameRequest.Builder.class)
public final class CreateUsernameRequest {
    private final List<String> tags;

    private final String username;

    private final String password;

    private final String name;

    private final Map<String, Object> additionalProperties;

    private CreateUsernameRequest(
            List<String> tags,
            String username,
            String password,
            String name,
            Map<String, Object> additionalProperties) {
        this.tags = tags;
        this.username = username;
        this.password = password;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("tags")
    public List<String> getTags() {
        return tags;
    }

    @JsonProperty("username")
    public String getUsername() {
        return username;
    }

    @JsonProperty("password")
    public String getPassword() {
        return password;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateUsernameRequest && equalTo((CreateUsernameRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateUsernameRequest other) {
        return tags.equals(other.tags)
                && username.equals(other.username)
                && password.equals(other.password)
                && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tags, this.username, this.password, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static UsernameStage builder() {
        return new Builder();
    }

    public interface UsernameStage {
        PasswordStage username(@NotNull String username);

        Builder from(CreateUsernameRequest other);
    }

    public interface PasswordStage {
        NameStage password(@NotNull String password);
    }

    public interface NameStage {
        _FinalStage name(@NotNull String name);
    }

    public interface _FinalStage {
        CreateUsernameRequest build();

        _FinalStage tags(List<String> tags);

        _FinalStage addTags(String tags);

        _FinalStage addAllTags(List<String> tags);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements UsernameStage, PasswordStage, NameStage, _FinalStage {
        private String username;

        private String password;

        private String name;

        private List<String> tags = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateUsernameRequest other) {
            tags(other.getTags());
            username(other.getUsername());
            password(other.getPassword());
            name(other.getName());
            return this;
        }

        @java.lang.Override
        @JsonSetter("username")
        public PasswordStage username(@NotNull String username) {
            this.username = Objects.requireNonNull(username, "username must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("password")
        public NameStage password(@NotNull String password) {
            this.password = Objects.requireNonNull(password, "password must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public _FinalStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllTags(List<String> tags) {
            if (tags != null) {
                this.tags.addAll(tags);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addTags(String tags) {
            this.tags.add(tags);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tags", nulls = Nulls.SKIP)
        public _FinalStage tags(List<String> tags) {
            this.tags.clear();
            this.tags.addAll(tags);
            return this;
        }

        @java.lang.Override
        public CreateUsernameRequest build() {
            return new CreateUsernameRequest(tags, username, password, name, additionalProperties);
        }
    }
}
