/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.httpHead.resources.user;

import com.fasterxml.jackson.core.type.TypeReference;
import com.seed.httpHead.core.ClientOptions;
import com.seed.httpHead.core.ObjectMappers;
import com.seed.httpHead.core.QueryStringMapper;
import com.seed.httpHead.core.RequestOptions;
import com.seed.httpHead.core.SeedHttpHeadApiException;
import com.seed.httpHead.core.SeedHttpHeadException;
import com.seed.httpHead.core.SeedHttpHeadHttpResponse;
import com.seed.httpHead.resources.user.requests.ListUsersRequest;
import com.seed.httpHead.resources.user.types.User;
import java.io.IOException;
import java.util.List;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawUserClient {
    protected final ClientOptions clientOptions;

    public RawUserClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public SeedHttpHeadHttpResponse<Void> head() {
        return head(null);
    }

    public SeedHttpHeadHttpResponse<Void> head(RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("HEAD", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedHttpHeadHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedHttpHeadApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedHttpHeadException("Network error executing HTTP request", e);
        }
    }

    public SeedHttpHeadHttpResponse<List<User>> list(ListUsersRequest request) {
        return list(request, null);
    }

    public SeedHttpHeadHttpResponse<List<User>> list(ListUsersRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("users");
        QueryStringMapper.addQueryParameter(httpUrl, "limit", request.getLimit(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new SeedHttpHeadHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), new TypeReference<List<User>>() {}),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new SeedHttpHeadApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new SeedHttpHeadException("Network error executing HTTP request", e);
        }
    }
}
