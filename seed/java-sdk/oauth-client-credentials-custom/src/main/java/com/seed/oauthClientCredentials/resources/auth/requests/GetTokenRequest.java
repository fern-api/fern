/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed.oauthClientCredentials.resources.auth.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed.oauthClientCredentials.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetTokenRequest.Builder.class)
public final class GetTokenRequest {
    private final String cid;

    private final String csr;

    private final String scp;

    private final String entityId;

    private final Optional<String> scope;

    private final Map<String, Object> additionalProperties;

    private GetTokenRequest(
            String cid,
            String csr,
            String scp,
            String entityId,
            Optional<String> scope,
            Map<String, Object> additionalProperties) {
        this.cid = cid;
        this.csr = csr;
        this.scp = scp;
        this.entityId = entityId;
        this.scope = scope;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("cid")
    public String getCid() {
        return cid;
    }

    @JsonProperty("csr")
    public String getCsr() {
        return csr;
    }

    @JsonProperty("scp")
    public String getScp() {
        return scp;
    }

    @JsonProperty("entity_id")
    public String getEntityId() {
        return entityId;
    }

    @JsonProperty("audience")
    public String getAudience() {
        return "https://api.example.com";
    }

    @JsonProperty("grant_type")
    public String getGrantType() {
        return "client_credentials";
    }

    @JsonProperty("scope")
    public Optional<String> getScope() {
        return scope;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetTokenRequest && equalTo((GetTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetTokenRequest other) {
        return cid.equals(other.cid)
                && csr.equals(other.csr)
                && scp.equals(other.scp)
                && entityId.equals(other.entityId)
                && scope.equals(other.scope);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cid, this.csr, this.scp, this.entityId, this.scope);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CidStage builder() {
        return new Builder();
    }

    public interface CidStage {
        CsrStage cid(@NotNull String cid);

        Builder from(GetTokenRequest other);
    }

    public interface CsrStage {
        ScpStage csr(@NotNull String csr);
    }

    public interface ScpStage {
        EntityIdStage scp(@NotNull String scp);
    }

    public interface EntityIdStage {
        _FinalStage entityId(@NotNull String entityId);
    }

    public interface _FinalStage {
        GetTokenRequest build();

        _FinalStage scope(Optional<String> scope);

        _FinalStage scope(String scope);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CidStage, CsrStage, ScpStage, EntityIdStage, _FinalStage {
        private String cid;

        private String csr;

        private String scp;

        private String entityId;

        private Optional<String> scope = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GetTokenRequest other) {
            cid(other.getCid());
            csr(other.getCsr());
            scp(other.getScp());
            entityId(other.getEntityId());
            scope(other.getScope());
            return this;
        }

        @java.lang.Override
        @JsonSetter("cid")
        public CsrStage cid(@NotNull String cid) {
            this.cid = Objects.requireNonNull(cid, "cid must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("csr")
        public ScpStage csr(@NotNull String csr) {
            this.csr = Objects.requireNonNull(csr, "csr must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("scp")
        public EntityIdStage scp(@NotNull String scp) {
            this.scp = Objects.requireNonNull(scp, "scp must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("entity_id")
        public _FinalStage entityId(@NotNull String entityId) {
            this.entityId = Objects.requireNonNull(entityId, "entityId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage scope(String scope) {
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "scope", nulls = Nulls.SKIP)
        public _FinalStage scope(Optional<String> scope) {
            this.scope = scope;
            return this;
        }

        @java.lang.Override
        public GetTokenRequest build() {
            return new GetTokenRequest(cid, csr, scp, entityId, scope, additionalProperties);
        }
    }
}
