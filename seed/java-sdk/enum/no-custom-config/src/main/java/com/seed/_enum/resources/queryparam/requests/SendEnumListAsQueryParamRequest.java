/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed._enum.resources.queryparam.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed._enum.core.ObjectMappers;
import com.seed._enum.types.ColorOrOperand;
import com.seed._enum.types.Operand;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SendEnumListAsQueryParamRequest.Builder.class)
public final class SendEnumListAsQueryParamRequest {
    private final List<Operand> operand;

    private final Optional<List<Operand>> maybeOperand;

    private final List<ColorOrOperand> operandOrColor;

    private final Optional<List<ColorOrOperand>> maybeOperandOrColor;

    private final Map<String, Object> additionalProperties;

    private SendEnumListAsQueryParamRequest(
            List<Operand> operand,
            Optional<List<Operand>> maybeOperand,
            List<ColorOrOperand> operandOrColor,
            Optional<List<ColorOrOperand>> maybeOperandOrColor,
            Map<String, Object> additionalProperties) {
        this.operand = operand;
        this.maybeOperand = maybeOperand;
        this.operandOrColor = operandOrColor;
        this.maybeOperandOrColor = maybeOperandOrColor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("operand")
    public List<Operand> getOperand() {
        return operand;
    }

    @JsonProperty("maybeOperand")
    public Optional<List<Operand>> getMaybeOperand() {
        return maybeOperand;
    }

    @JsonProperty("operandOrColor")
    public List<ColorOrOperand> getOperandOrColor() {
        return operandOrColor;
    }

    @JsonProperty("maybeOperandOrColor")
    public Optional<List<ColorOrOperand>> getMaybeOperandOrColor() {
        return maybeOperandOrColor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SendEnumListAsQueryParamRequest && equalTo((SendEnumListAsQueryParamRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SendEnumListAsQueryParamRequest other) {
        return operand.equals(other.operand)
                && maybeOperand.equals(other.maybeOperand)
                && operandOrColor.equals(other.operandOrColor)
                && maybeOperandOrColor.equals(other.maybeOperandOrColor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operand, this.maybeOperand, this.operandOrColor, this.maybeOperandOrColor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<Operand> operand = new ArrayList<>();

        private Optional<List<Operand>> maybeOperand = Optional.empty();

        private List<ColorOrOperand> operandOrColor = new ArrayList<>();

        private Optional<List<ColorOrOperand>> maybeOperandOrColor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SendEnumListAsQueryParamRequest other) {
            operand(other.getOperand());
            maybeOperand(other.getMaybeOperand());
            operandOrColor(other.getOperandOrColor());
            maybeOperandOrColor(other.getMaybeOperandOrColor());
            return this;
        }

        @JsonSetter(value = "operand", nulls = Nulls.SKIP)
        public Builder operand(List<Operand> operand) {
            this.operand.clear();
            this.operand.addAll(operand);
            return this;
        }

        public Builder addOperand(Operand operand) {
            this.operand.add(operand);
            return this;
        }

        public Builder addAllOperand(List<Operand> operand) {
            this.operand.addAll(operand);
            return this;
        }

        public Builder operand(Operand operand) {
            this.operand = Collections.singletonList(operand);
            return this;
        }

        @JsonSetter(value = "maybeOperand", nulls = Nulls.SKIP)
        public Builder maybeOperand(Optional<List<Operand>> maybeOperand) {
            this.maybeOperand = maybeOperand;
            return this;
        }

        public Builder maybeOperand(List<Operand> maybeOperand) {
            this.maybeOperand = Optional.ofNullable(maybeOperand);
            return this;
        }

        public Builder maybeOperand(Operand maybeOperand) {
            this.maybeOperand = Optional.of(Collections.singletonList(maybeOperand));
            return this;
        }

        @JsonSetter(value = "operandOrColor", nulls = Nulls.SKIP)
        public Builder operandOrColor(List<ColorOrOperand> operandOrColor) {
            this.operandOrColor.clear();
            this.operandOrColor.addAll(operandOrColor);
            return this;
        }

        public Builder addOperandOrColor(ColorOrOperand operandOrColor) {
            this.operandOrColor.add(operandOrColor);
            return this;
        }

        public Builder addAllOperandOrColor(List<ColorOrOperand> operandOrColor) {
            this.operandOrColor.addAll(operandOrColor);
            return this;
        }

        public Builder operandOrColor(ColorOrOperand operandOrColor) {
            this.operandOrColor = Collections.singletonList(operandOrColor);
            return this;
        }

        @JsonSetter(value = "maybeOperandOrColor", nulls = Nulls.SKIP)
        public Builder maybeOperandOrColor(Optional<List<ColorOrOperand>> maybeOperandOrColor) {
            this.maybeOperandOrColor = maybeOperandOrColor;
            return this;
        }

        public Builder maybeOperandOrColor(List<ColorOrOperand> maybeOperandOrColor) {
            this.maybeOperandOrColor = Optional.ofNullable(maybeOperandOrColor);
            return this;
        }

        public Builder maybeOperandOrColor(ColorOrOperand maybeOperandOrColor) {
            this.maybeOperandOrColor = Optional.of(Collections.singletonList(maybeOperandOrColor));
            return this;
        }

        public SendEnumListAsQueryParamRequest build() {
            return new SendEnumListAsQueryParamRequest(
                    operand, maybeOperand, operandOrColor, maybeOperandOrColor, additionalProperties);
        }
    }
}
