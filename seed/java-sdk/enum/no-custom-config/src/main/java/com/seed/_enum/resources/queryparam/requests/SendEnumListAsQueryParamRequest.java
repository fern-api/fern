/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.seed._enum.resources.queryparam.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.seed._enum.core.ObjectMappers;
import com.seed._enum.types.ColorOrOperand;
import com.seed._enum.types.Operand;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SendEnumListAsQueryParamRequest.Builder.class)
public final class SendEnumListAsQueryParamRequest {
    private final Operand operand;

    private final Optional<Operand> maybeOperand;

    private final ColorOrOperand operandOrColor;

    private final Optional<ColorOrOperand> maybeOperandOrColor;

    private final Map<String, Object> additionalProperties;

    private SendEnumListAsQueryParamRequest(
            Operand operand,
            Optional<Operand> maybeOperand,
            ColorOrOperand operandOrColor,
            Optional<ColorOrOperand> maybeOperandOrColor,
            Map<String, Object> additionalProperties) {
        this.operand = operand;
        this.maybeOperand = maybeOperand;
        this.operandOrColor = operandOrColor;
        this.maybeOperandOrColor = maybeOperandOrColor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("operand")
    public Operand getOperand() {
        return operand;
    }

    @JsonProperty("maybeOperand")
    public Optional<Operand> getMaybeOperand() {
        return maybeOperand;
    }

    @JsonProperty("operandOrColor")
    public ColorOrOperand getOperandOrColor() {
        return operandOrColor;
    }

    @JsonProperty("maybeOperandOrColor")
    public Optional<ColorOrOperand> getMaybeOperandOrColor() {
        return maybeOperandOrColor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SendEnumListAsQueryParamRequest && equalTo((SendEnumListAsQueryParamRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SendEnumListAsQueryParamRequest other) {
        return operand.equals(other.operand)
                && maybeOperand.equals(other.maybeOperand)
                && operandOrColor.equals(other.operandOrColor)
                && maybeOperandOrColor.equals(other.maybeOperandOrColor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.operand, this.maybeOperand, this.operandOrColor, this.maybeOperandOrColor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static OperandStage builder() {
        return new Builder();
    }

    public interface OperandStage {
        OperandOrColorStage operand(@NotNull Operand operand);

        Builder from(SendEnumListAsQueryParamRequest other);
    }

    public interface OperandOrColorStage {
        _FinalStage operandOrColor(@NotNull ColorOrOperand operandOrColor);
    }

    public interface _FinalStage {
        SendEnumListAsQueryParamRequest build();

        _FinalStage maybeOperand(Optional<Operand> maybeOperand);

        _FinalStage maybeOperand(Operand maybeOperand);

        _FinalStage maybeOperandOrColor(Optional<ColorOrOperand> maybeOperandOrColor);

        _FinalStage maybeOperandOrColor(ColorOrOperand maybeOperandOrColor);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements OperandStage, OperandOrColorStage, _FinalStage {
        private Operand operand;

        private ColorOrOperand operandOrColor;

        private Optional<ColorOrOperand> maybeOperandOrColor = Optional.empty();

        private Optional<Operand> maybeOperand = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SendEnumListAsQueryParamRequest other) {
            operand(other.getOperand());
            maybeOperand(other.getMaybeOperand());
            operandOrColor(other.getOperandOrColor());
            maybeOperandOrColor(other.getMaybeOperandOrColor());
            return this;
        }

        @java.lang.Override
        @JsonSetter("operand")
        public OperandOrColorStage operand(@NotNull Operand operand) {
            this.operand = Objects.requireNonNull(operand, "operand must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("operandOrColor")
        public _FinalStage operandOrColor(@NotNull ColorOrOperand operandOrColor) {
            this.operandOrColor = Objects.requireNonNull(operandOrColor, "operandOrColor must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage maybeOperandOrColor(ColorOrOperand maybeOperandOrColor) {
            this.maybeOperandOrColor = Optional.ofNullable(maybeOperandOrColor);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maybeOperandOrColor", nulls = Nulls.SKIP)
        public _FinalStage maybeOperandOrColor(Optional<ColorOrOperand> maybeOperandOrColor) {
            this.maybeOperandOrColor = maybeOperandOrColor;
            return this;
        }

        @java.lang.Override
        public _FinalStage maybeOperand(Operand maybeOperand) {
            this.maybeOperand = Optional.ofNullable(maybeOperand);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "maybeOperand", nulls = Nulls.SKIP)
        public _FinalStage maybeOperand(Optional<Operand> maybeOperand) {
            this.maybeOperand = maybeOperand;
            return this;
        }

        @java.lang.Override
        public SendEnumListAsQueryParamRequest build() {
            return new SendEnumListAsQueryParamRequest(
                    operand, maybeOperand, operandOrColor, maybeOperandOrColor, additionalProperties);
        }
    }
}
