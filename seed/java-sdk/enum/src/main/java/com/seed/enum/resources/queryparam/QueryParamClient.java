/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.seed.enum.resources.queryparam;

import com.seed.enum.core.ApiError;
import com.seed.enum.core.ClientOptions;
import com.seed.enum.core.ObjectMappers;
import com.seed.enum.core.RequestOptions;
import com.seed.enum.resources.queryparam.requests.SendEnumAsQueryParamRequest;
import com.seed.enum.resources.queryparam.requests.SendEnumListAsQueryParamRequest;
import java.io.IOException;
import java.lang.Object;
import java.lang.RuntimeException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class QueryParamClient {
  protected final ClientOptions clientOptions;

  public QueryParamClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  public void send() {
    send(SendEnumAsQueryParamRequest.builder().build());
  }

  public void send(SendEnumAsQueryParamRequest request) {
    send(request,null);
  }

  public void send(SendEnumAsQueryParamRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

      .addPathSegments("query");if (request.getValue().isPresent()) {
        httpUrl.addQueryParameter("value", request.getValue().get().toString());
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("POST", RequestBody.create("", null))
        .headers(Headers.of(clientOptions.headers(requestOptions)));
      Request okhttpRequest = _requestBuilder.build();
      try {
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions.getTimeout().isPresent()) {
          client = client.newBuilder().readTimeout(requestOptions.getTimeout().get(), requestOptions.getTimeoutTimeUnit()).build();
        }
        Response response = client.newCall(okhttpRequest).execute();
        if (response.isSuccessful()) {
          return;
        }
        throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
      }
      catch (IOException e) {
        throw new RuntimeException(e);
      }
    }

    public void sendList() {
      sendList(SendEnumListAsQueryParamRequest.builder().build());
    }

    public void sendList(SendEnumListAsQueryParamRequest request) {
      sendList(request,null);
    }

    public void sendList(SendEnumListAsQueryParamRequest request, RequestOptions requestOptions) {
      HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()

        .addPathSegments("query-list");if (request.getValue().isPresent()) {
          httpUrl.addQueryParameter("value", request.getValue().get().toString());
        }
        Request.Builder _requestBuilder = new Request.Builder()
          .url(httpUrl.build())
          .method("POST", RequestBody.create("", null))
          .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        try {
          OkHttpClient client = clientOptions.httpClient();
          if (requestOptions.getTimeout().isPresent()) {
            client = client.newBuilder().readTimeout(requestOptions.getTimeout().get(), requestOptions.getTimeoutTimeUnit()).build();
          }
          Response response = client.newCall(okhttpRequest).execute();
          if (response.isSuccessful()) {
            return;
          }
          throw new ApiError(response.code(), ObjectMappers.JSON_MAPPER.readValue(response.body().string(), Object.class));
        }
        catch (IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
