/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import * as SeedApi from "../../src/api/index";
import { SeedApiClient } from "../../src/Client";

describe("Imdb", () => {
    test("createMovie", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedApiClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { title: "title", rating: 1.1 };
        const rawResponseBody = "string";
        server
            .mockEndpoint()
            .post("/movies/create-movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.imdb.createMovie({
            title: "title",
            rating: 1.1,
        });
        expect(response).toEqual(SeedApi.MovieId("string"));
    });

    test("getMovie", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedApiClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { id: "id", title: "title", rating: 1.1 };
        server.mockEndpoint().get("/movies/movieId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.imdb.getMovie(SeedApi.MovieId("movieId"));
        expect(response).toEqual({
            id: SeedApi.MovieId("id"),
            title: "title",
            rating: 1.1,
        });
    });
});
