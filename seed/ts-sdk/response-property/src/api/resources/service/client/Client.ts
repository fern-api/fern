/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as SeedResponseProperty from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Service {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Service {
    protected readonly _options: Service.Options;

    constructor(_options: Service.Options) {
        this._options = _options;
    }

    /**
     * @param {string} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getMovie("string")
     */
    public getMovie(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedResponseProperty.Response> {
        return core.HttpResponsePromise.fromPromise(this.__getMovie(request, requestOptions));
    }

    private async __getMovie(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedResponseProperty.Response>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "movie",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedResponseProperty.Response, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedResponsePropertyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedResponsePropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedResponsePropertyTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedResponsePropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getMovieDocs("string")
     */
    public getMovieDocs(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedResponseProperty.Response> {
        return core.HttpResponsePromise.fromPromise(this.__getMovieDocs(request, requestOptions));
    }

    private async __getMovieDocs(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedResponseProperty.Response>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "movie",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedResponseProperty.Response, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedResponsePropertyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedResponsePropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedResponsePropertyTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedResponsePropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getMovieName("string")
     */
    public getMovieName(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedResponseProperty.StringResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getMovieName(request, requestOptions));
    }

    private async __getMovieName(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedResponseProperty.StringResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "movie",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedResponseProperty.StringResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedResponsePropertyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedResponsePropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedResponsePropertyTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedResponsePropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getMovieMetadata("string")
     */
    public getMovieMetadata(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedResponseProperty.Response> {
        return core.HttpResponsePromise.fromPromise(this.__getMovieMetadata(request, requestOptions));
    }

    private async __getMovieMetadata(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedResponseProperty.Response>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "movie",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedResponseProperty.Response, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedResponsePropertyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedResponsePropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedResponsePropertyTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedResponsePropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getOptionalMovie("string")
     */
    public getOptionalMovie(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedResponseProperty.Response | undefined> {
        return core.HttpResponsePromise.fromPromise(this.__getOptionalMovie(request, requestOptions));
    }

    private async __getOptionalMovie(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedResponseProperty.Response | undefined>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "movie",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SeedResponseProperty.Response | undefined,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedResponsePropertyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedResponsePropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedResponsePropertyTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedResponsePropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getOptionalMovieDocs("string")
     */
    public getOptionalMovieDocs(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedResponseProperty.OptionalWithDocs | undefined> {
        return core.HttpResponsePromise.fromPromise(this.__getOptionalMovieDocs(request, requestOptions));
    }

    private async __getOptionalMovieDocs(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedResponseProperty.OptionalWithDocs | undefined>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "movie",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SeedResponseProperty.OptionalWithDocs | undefined,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedResponsePropertyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedResponsePropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedResponsePropertyTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedResponsePropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getOptionalMovieName("string")
     */
    public getOptionalMovieName(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedResponseProperty.OptionalStringResponse | undefined> {
        return core.HttpResponsePromise.fromPromise(this.__getOptionalMovieName(request, requestOptions));
    }

    private async __getOptionalMovieName(
        request: string,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedResponseProperty.OptionalStringResponse | undefined>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "movie",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SeedResponseProperty.OptionalStringResponse | undefined,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedResponsePropertyError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedResponsePropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedResponsePropertyTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedResponsePropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
