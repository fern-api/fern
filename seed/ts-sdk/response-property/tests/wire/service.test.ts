/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedResponsePropertyClient } from "../../src/Client";

describe("Service", () => {
    test("getMovie", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedResponsePropertyClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { data: { id: "id", name: "name" }, metadata: { metadata: "metadata" }, docs: "docs" };
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getMovie("string");
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
            },
            metadata: {
                metadata: "metadata",
            },
            docs: "docs",
        });
    });

    test("getMovieDocs", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedResponsePropertyClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { data: { id: "id", name: "name" }, metadata: { metadata: "metadata" }, docs: "docs" };
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getMovieDocs("string");
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
            },
            metadata: {
                metadata: "metadata",
            },
            docs: "docs",
        });
    });

    test("getMovieName", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedResponsePropertyClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { data: "data" };
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getMovieName("string");
        expect(response).toEqual({
            data: "data",
        });
    });

    test("getMovieMetadata", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedResponsePropertyClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { data: { id: "id", name: "name" }, metadata: { metadata: "metadata" }, docs: "docs" };
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getMovieMetadata("string");
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
            },
            metadata: {
                metadata: "metadata",
            },
            docs: "docs",
        });
    });

    test("getOptionalMovie", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedResponsePropertyClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { data: { id: "id", name: "name" }, metadata: { metadata: "metadata" }, docs: "docs" };
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getOptionalMovie("string");
        expect(response).toEqual({
            data: {
                id: "id",
                name: "name",
            },
            metadata: {
                metadata: "metadata",
            },
            docs: "docs",
        });
    });

    test("getOptionalMovieDocs", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedResponsePropertyClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { docs: "docs" };
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getOptionalMovieDocs("string");
        expect(response).toEqual({
            docs: "docs",
        });
    });

    test("getOptionalMovieName", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedResponsePropertyClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { data: "data" };
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getOptionalMovieName("string");
        expect(response).toEqual({
            data: "data",
        });
    });
});
