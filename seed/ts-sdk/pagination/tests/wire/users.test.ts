/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedPaginationClient } from "../../src/Client";

describe("Users", () => {
    test("listWithCursorPagination", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            hasNextPage: true,
            page: { page: 1, next: { page: 1, starting_after: "starting_after" }, per_page: 1, total_page: 1 },
            total_count: 1,
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            hasNextPage: true,
            page: {
                page: 1,
                next: {
                    page: 1,
                    starting_after: "starting_after",
                },
                per_page: 1,
                total_page: 1,
            },
            total_count: 1,
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithCursorPagination({
            page: 1,
            per_page: 1,
            order: "asc",
            starting_after: "starting_after",
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithMixedTypeCursorPagination", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "next",
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server.mockEndpoint().post("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            next: "next",
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithMixedTypeCursorPagination({
            cursor: "cursor",
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithBodyCursorPagination", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { pagination: { cursor: "cursor" } };
        const rawResponseBody = {
            hasNextPage: true,
            page: { page: 1, next: { page: 1, starting_after: "starting_after" }, per_page: 1, total_page: 1 },
            total_count: 1,
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server
            .mockEndpoint()
            .post("/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            hasNextPage: true,
            page: {
                page: 1,
                next: {
                    page: 1,
                    starting_after: "starting_after",
                },
                per_page: 1,
                total_page: 1,
            },
            total_count: 1,
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithBodyCursorPagination({
            pagination: {
                cursor: "cursor",
            },
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithOffsetPagination", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            hasNextPage: true,
            page: { page: 1, next: { page: 1, starting_after: "starting_after" }, per_page: 1, total_page: 1 },
            total_count: 1,
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            hasNextPage: true,
            page: {
                page: 1,
                next: {
                    page: 1,
                    starting_after: "starting_after",
                },
                per_page: 1,
                total_page: 1,
            },
            total_count: 1,
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithOffsetPagination({
            page: 1,
            per_page: 1,
            order: "asc",
            starting_after: "starting_after",
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithDoubleOffsetPagination", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            hasNextPage: true,
            page: { page: 1, next: { page: 1, starting_after: "starting_after" }, per_page: 1, total_page: 1 },
            total_count: 1,
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            hasNextPage: true,
            page: {
                page: 1,
                next: {
                    page: 1,
                    starting_after: "starting_after",
                },
                per_page: 1,
                total_page: 1,
            },
            total_count: 1,
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithDoubleOffsetPagination({
            page: 1.1,
            per_page: 1.1,
            order: "asc",
            starting_after: "starting_after",
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithBodyOffsetPagination", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { pagination: { page: 1 } };
        const rawResponseBody = {
            hasNextPage: true,
            page: { page: 1, next: { page: 1, starting_after: "starting_after" }, per_page: 1, total_page: 1 },
            total_count: 1,
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server
            .mockEndpoint()
            .post("/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            hasNextPage: true,
            page: {
                page: 1,
                next: {
                    page: 1,
                    starting_after: "starting_after",
                },
                per_page: 1,
                total_page: 1,
            },
            total_count: 1,
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithBodyOffsetPagination({
            pagination: {
                page: 1,
            },
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithOffsetStepPagination", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            hasNextPage: true,
            page: { page: 1, next: { page: 1, starting_after: "starting_after" }, per_page: 1, total_page: 1 },
            total_count: 1,
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            hasNextPage: true,
            page: {
                page: 1,
                next: {
                    page: 1,
                    starting_after: "starting_after",
                },
                per_page: 1,
                total_page: 1,
            },
            total_count: 1,
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithOffsetStepPagination({
            page: 1,
            limit: 1,
            order: "asc",
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithOffsetPaginationHasNextPage", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            hasNextPage: true,
            page: { page: 1, next: { page: 1, starting_after: "starting_after" }, per_page: 1, total_page: 1 },
            total_count: 1,
            data: [
                { name: "name", id: 1 },
                { name: "name", id: 1 },
            ],
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            hasNextPage: true,
            page: {
                page: 1,
                next: {
                    page: 1,
                    starting_after: "starting_after",
                },
                per_page: 1,
                total_page: 1,
            },
            total_count: 1,
            data: [
                {
                    name: "name",
                    id: 1,
                },
                {
                    name: "name",
                    id: 1,
                },
            ],
        };
        const page = await client.users.listWithOffsetPaginationHasNextPage({
            page: 1,
            limit: 1,
            order: "asc",
        });
        expect(expected.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data).toEqual(nextPage.data);
    });

    test("listWithExtendedResults", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total_count: 1,
            data: {
                users: [
                    { name: "name", id: 1 },
                    { name: "name", id: 1 },
                ],
            },
            next: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            total_count: 1,
            data: {
                users: [
                    {
                        name: "name",
                        id: 1,
                    },
                    {
                        name: "name",
                        id: 1,
                    },
                ],
            },
            next: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        };
        const page = await client.users.listWithExtendedResults({
            cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        });
        expect(expected.data.users).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data.users).toEqual(nextPage.data);
    });

    test("listWithExtendedResultsAndOptionalData", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total_count: 1,
            data: {
                users: [
                    { name: "name", id: 1 },
                    { name: "name", id: 1 },
                ],
            },
            next: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            total_count: 1,
            data: {
                users: [
                    {
                        name: "name",
                        id: 1,
                    },
                    {
                        name: "name",
                        id: 1,
                    },
                ],
            },
            next: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        };
        const page = await client.users.listWithExtendedResultsAndOptionalData({
            cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
        });
        expect(expected.data.users).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.data.users).toEqual(nextPage.data);
    });

    test("listUsernames", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { cursor: { after: "after", data: ["data", "data"] } };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            cursor: {
                after: "after",
                data: ["data", "data"],
            },
        };
        const page = await client.users.listUsernames({
            starting_after: "starting_after",
        });
        expect(expected.cursor.data).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.cursor.data).toEqual(nextPage.data);
    });

    test("listWithGlobalConfig", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { results: ["results", "results"] };
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            results: ["results", "results"],
        };
        const page = await client.users.listWithGlobalConfig({
            offset: 1,
        });
        expect(expected.results).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.results).toEqual(nextPage.data);
    });
});
