/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedPaginationClient } from "../../src/Client";

describe("Complex", () => {
    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPaginationClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            pagination: { per_page: 1, starting_after: "starting_after" },
            query: { field: "field", operator: "=", value: "value" },
        };
        const rawResponseBody = {
            conversations: [{ foo: "foo" }, { foo: "foo" }],
            pages: {
                next: { per_page: 1, starting_after: "starting_after" },
                page: 1,
                per_page: 1,
                total_pages: 1,
                type: "pages",
            },
            total_count: 1,
            type: "conversation.list",
        };
        server
            .mockEndpoint()
            .post("/index/conversations/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            conversations: [
                {
                    foo: "foo",
                },
                {
                    foo: "foo",
                },
            ],
            pages: {
                next: {
                    per_page: 1,
                    starting_after: "starting_after",
                },
                page: 1,
                per_page: 1,
                total_pages: 1,
                type: "pages",
            },
            total_count: 1,
            type: "conversation.list",
        };
        const page = await client.complex.search("index", {
            pagination: {
                per_page: 1,
                starting_after: "starting_after",
            },
            query: {
                field: "field",
                operator: "=",
                value: "value",
            },
        });
        expect(expected.conversations).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.conversations).toEqual(nextPage.data);
    });
});
