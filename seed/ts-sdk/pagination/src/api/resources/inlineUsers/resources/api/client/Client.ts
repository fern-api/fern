/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../core/index.js";
import * as SeedPagination from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Api {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Api {
    protected readonly _options: Api.Options;

    constructor(_options: Api.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersCursorPaginationRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithCursorPagination({
     *         page: 1,
     *         per_page: 1,
     *         order: "asc",
     *         starting_after: "starting_after"
     *     })
     */
    public async listWithCursorPagination(
        request: SeedPagination.inlineUsers.ListUsersCursorPaginationRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersCursorPaginationRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersPaginationResponse>> => {
                const { page, per_page: perPage, order, starting_after: startingAfter } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (perPage != null) {
                    _queryParams["per_page"] = perPage.toString();
                }
                if (order != null) {
                    _queryParams["order"] = order;
                }
                if (startingAfter != null) {
                    _queryParams["starting_after"] = startingAfter;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersPaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersPaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.page?.next?.starting_after != null &&
                !(
                    typeof response?.page?.next?.starting_after === "string" &&
                    response?.page?.next?.starting_after === ""
                ),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "starting_after", response?.page?.next?.starting_after));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersMixedTypeCursorPaginationRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithMixedTypeCursorPagination({
     *         cursor: "cursor"
     *     })
     */
    public async listWithMixedTypeCursorPagination(
        request: SeedPagination.inlineUsers.ListUsersMixedTypeCursorPaginationRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersMixedTypeCursorPaginationRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersMixedTypePaginationResponse>> => {
                const { cursor } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (cursor != null) {
                    _queryParams["cursor"] = cursor;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersMixedTypePaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError(
                            "Timeout exceeded when calling POST /inline/users.",
                        );
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersMixedTypePaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.next != null && !(typeof response?.next === "string" && response?.next === ""),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.next));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersBodyCursorPaginationRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithBodyCursorPagination({
     *         pagination: {
     *             cursor: "cursor"
     *         }
     *     })
     */
    public async listWithBodyCursorPagination(
        request: SeedPagination.inlineUsers.ListUsersBodyCursorPaginationRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersBodyCursorPaginationRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersPaginationResponse>> => {
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    contentType: "application/json",
                    queryParameters: requestOptions?.queryParams,
                    requestType: "json",
                    body: request,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersPaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError(
                            "Timeout exceeded when calling POST /inline/users.",
                        );
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersPaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.page?.next?.starting_after != null &&
                !(
                    typeof response?.page?.next?.starting_after === "string" &&
                    response?.page?.next?.starting_after === ""
                ),
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "pagination.cursor", response?.page?.next?.starting_after));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersOffsetPaginationRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithOffsetPagination({
     *         page: 1,
     *         per_page: 1,
     *         order: "asc",
     *         starting_after: "starting_after"
     *     })
     */
    public async listWithOffsetPagination(
        request: SeedPagination.inlineUsers.ListUsersOffsetPaginationRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersOffsetPaginationRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersPaginationResponse>> => {
                const { page, per_page: perPage, order, starting_after: startingAfter } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (perPage != null) {
                    _queryParams["per_page"] = perPage.toString();
                }
                if (order != null) {
                    _queryParams["order"] = order;
                }
                if (startingAfter != null) {
                    _queryParams["starting_after"] = startingAfter;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersPaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersPaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersDoubleOffsetPaginationRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithDoubleOffsetPagination({
     *         page: 1.1,
     *         per_page: 1.1,
     *         order: "asc",
     *         starting_after: "starting_after"
     *     })
     */
    public async listWithDoubleOffsetPagination(
        request: SeedPagination.inlineUsers.ListUsersDoubleOffsetPaginationRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersDoubleOffsetPaginationRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersPaginationResponse>> => {
                const { page, per_page: perPage, order, starting_after: startingAfter } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (perPage != null) {
                    _queryParams["per_page"] = perPage.toString();
                }
                if (order != null) {
                    _queryParams["order"] = order;
                }
                if (startingAfter != null) {
                    _queryParams["starting_after"] = startingAfter;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersPaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersPaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersBodyOffsetPaginationRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithBodyOffsetPagination({
     *         pagination: {
     *             page: 1
     *         }
     *     })
     */
    public async listWithBodyOffsetPagination(
        request: SeedPagination.inlineUsers.ListUsersBodyOffsetPaginationRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersBodyOffsetPaginationRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersPaginationResponse>> => {
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    contentType: "application/json",
                    queryParameters: requestOptions?.queryParams,
                    requestType: "json",
                    body: request,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersPaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError(
                            "Timeout exceeded when calling POST /inline/users.",
                        );
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.pagination?.page != null ? request?.pagination?.page : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersPaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "pagination.page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersOffsetStepPaginationRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithOffsetStepPagination({
     *         page: 1,
     *         limit: 1,
     *         order: "asc"
     *     })
     */
    public async listWithOffsetStepPagination(
        request: SeedPagination.inlineUsers.ListUsersOffsetStepPaginationRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersOffsetStepPaginationRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersPaginationResponse>> => {
                const { page, limit, order } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (order != null) {
                    _queryParams["order"] = order;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersPaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersPaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListWithOffsetPaginationHasNextPageRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithOffsetPaginationHasNextPage({
     *         page: 1,
     *         limit: 1,
     *         order: "asc"
     *     })
     */
    public async listWithOffsetPaginationHasNextPage(
        request: SeedPagination.inlineUsers.ListWithOffsetPaginationHasNextPageRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListWithOffsetPaginationHasNextPageRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersPaginationResponse>> => {
                const { page, limit, order } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (order != null) {
                    _queryParams["order"] = order;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersPaginationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersPaginationResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.hasNextPage ?? (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersExtendedRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithExtendedResults({
     *         cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"
     *     })
     */
    public async listWithExtendedResults(
        request: SeedPagination.inlineUsers.ListUsersExtendedRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersExtendedRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersExtendedResponse>> => {
                const { cursor } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (cursor != null) {
                    _queryParams["cursor"] = cursor;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersExtendedResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<SeedPagination.inlineUsers.ListUsersExtendedResponse, SeedPagination.inlineUsers.User>(
            {
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) =>
                    response?.next != null && !(typeof response?.next === "string" && response?.next === ""),
                getItems: (response) => response?.data?.users ?? [],
                loadPage: (response) => {
                    return list(core.setObjectProperty(request, "cursor", response?.next));
                },
            },
        );
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsersExtendedRequestForOptionalData} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithExtendedResultsAndOptionalData({
     *         cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"
     *     })
     */
    public async listWithExtendedResultsAndOptionalData(
        request: SeedPagination.inlineUsers.ListUsersExtendedRequestForOptionalData = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<SeedPagination.inlineUsers.User>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsersExtendedRequestForOptionalData,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.ListUsersExtendedOptionalListResponse>> => {
                const { cursor } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (cursor != null) {
                    _queryParams["cursor"] = cursor;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.ListUsersExtendedOptionalListResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            SeedPagination.inlineUsers.ListUsersExtendedOptionalListResponse,
            SeedPagination.inlineUsers.User
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.next != null && !(typeof response?.next === "string" && response?.next === ""),
            getItems: (response) => response?.data?.users ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.next));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListUsernamesRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listUsernames({
     *         starting_after: "starting_after"
     *     })
     */
    public async listUsernames(
        request: SeedPagination.inlineUsers.ListUsernamesRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<string>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListUsernamesRequest,
            ): Promise<core.WithRawResponse<SeedPagination.UsernameCursor>> => {
                const { starting_after: startingAfter } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (startingAfter != null) {
                    _queryParams["starting_after"] = startingAfter;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.UsernameCursor,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<SeedPagination.UsernameCursor, string>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.cursor?.after != null &&
                !(typeof response?.cursor?.after === "string" && response?.cursor?.after === ""),
            getItems: (response) => response?.cursor?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "starting_after", response?.cursor?.after));
            },
        });
    }

    /**
     * @param {SeedPagination.inlineUsers.ListWithGlobalConfigRequest} request
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlineUsers.api.listWithGlobalConfig({
     *         offset: 1
     *     })
     */
    public async listWithGlobalConfig(
        request: SeedPagination.inlineUsers.ListWithGlobalConfigRequest = {},
        requestOptions?: Api.RequestOptions,
    ): Promise<core.Page<string>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.inlineUsers.ListWithGlobalConfigRequest,
            ): Promise<core.WithRawResponse<SeedPagination.inlineUsers.UsernameContainer>> => {
                const { offset } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (offset != null) {
                    _queryParams["offset"] = offset.toString();
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        "/inline/users",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.inlineUsers.UsernameContainer,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /inline/users.");
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.offset != null ? request?.offset : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<SeedPagination.inlineUsers.UsernameContainer, string>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.results ?? []).length > 0,
            getItems: (response) => response?.results ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
