/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as SeedPagination from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Users {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Users {
    constructor(protected readonly _options: Users.Options) {}

    /**
     * @param {SeedPagination.ListUsersCursorPaginationRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithCursorPagination({
     *         page: 1,
     *         perPage: 1,
     *         order: "asc",
     *         startingAfter: "starting_after"
     *     })
     */
    public async listWithCursorPagination(
        request: SeedPagination.ListUsersCursorPaginationRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListUsersCursorPaginationRequest,
        ): Promise<SeedPagination.ListUsersPaginationResponse> => {
            const { page, perPage, order, startingAfter } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (perPage != null) {
                _queryParams["per_page"] = perPage.toString();
            }
            if (order != null) {
                _queryParams["order"] = serializers.Order.jsonOrThrow(order, { unrecognizedObjectKeys: "strip" });
            }
            if (startingAfter != null) {
                _queryParams["starting_after"] = startingAfter;
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersPaginationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        return new core.Pageable<SeedPagination.ListUsersPaginationResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => response?.page?.next?.startingAfter != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "startingAfter", response?.page?.next?.startingAfter));
            },
        });
    }

    /**
     * @param {SeedPagination.ListUsersBodyCursorPaginationRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithBodyCursorPagination({
     *         pagination: {
     *             cursor: "cursor"
     *         }
     *     })
     */
    public async listWithBodyCursorPagination(
        request: SeedPagination.ListUsersBodyCursorPaginationRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListUsersBodyCursorPaginationRequest,
        ): Promise<SeedPagination.ListUsersPaginationResponse> => {
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "POST",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                requestType: "json",
                body: serializers.ListUsersBodyCursorPaginationRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersPaginationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling POST /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        return new core.Pageable<SeedPagination.ListUsersPaginationResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => response?.page?.next?.startingAfter != null,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "pagination.cursor", response?.page?.next?.startingAfter));
            },
        });
    }

    /**
     * @param {SeedPagination.ListUsersOffsetPaginationRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithOffsetPagination({
     *         page: 1,
     *         perPage: 1,
     *         order: "asc",
     *         startingAfter: "starting_after"
     *     })
     */
    public async listWithOffsetPagination(
        request: SeedPagination.ListUsersOffsetPaginationRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListUsersOffsetPaginationRequest,
        ): Promise<SeedPagination.ListUsersPaginationResponse> => {
            const { page, perPage, order, startingAfter } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (perPage != null) {
                _queryParams["per_page"] = perPage.toString();
            }
            if (order != null) {
                _queryParams["order"] = serializers.Order.jsonOrThrow(order, { unrecognizedObjectKeys: "strip" });
            }
            if (startingAfter != null) {
                _queryParams["starting_after"] = startingAfter;
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersPaginationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.page != null ? request?.page : 0;
        return new core.Pageable<SeedPagination.ListUsersPaginationResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.ListUsersBodyOffsetPaginationRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithBodyOffsetPagination({
     *         pagination: {
     *             page: 1
     *         }
     *     })
     */
    public async listWithBodyOffsetPagination(
        request: SeedPagination.ListUsersBodyOffsetPaginationRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListUsersBodyOffsetPaginationRequest,
        ): Promise<SeedPagination.ListUsersPaginationResponse> => {
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "POST",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                requestType: "json",
                body: serializers.ListUsersBodyOffsetPaginationRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersPaginationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling POST /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.pagination?.page != null ? request?.pagination?.page : 1;
        return new core.Pageable<SeedPagination.ListUsersPaginationResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "pagination.page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.ListUsersOffsetStepPaginationRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithOffsetStepPagination({
     *         page: 1,
     *         limit: 1,
     *         order: "asc"
     *     })
     */
    public async listWithOffsetStepPagination(
        request: SeedPagination.ListUsersOffsetStepPaginationRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListUsersOffsetStepPaginationRequest,
        ): Promise<SeedPagination.ListUsersPaginationResponse> => {
            const { page, limit, order } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (order != null) {
                _queryParams["order"] = serializers.Order.jsonOrThrow(order, { unrecognizedObjectKeys: "strip" });
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersPaginationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.page != null ? request?.page : 1;
        return new core.Pageable<SeedPagination.ListUsersPaginationResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.ListWithOffsetPaginationHasNextPageRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithOffsetPaginationHasNextPage({
     *         page: 1,
     *         limit: 1,
     *         order: "asc"
     *     })
     */
    public async listWithOffsetPaginationHasNextPage(
        request: SeedPagination.ListWithOffsetPaginationHasNextPageRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListWithOffsetPaginationHasNextPageRequest,
        ): Promise<SeedPagination.ListUsersPaginationResponse> => {
            const { page, limit, order } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (page != null) {
                _queryParams["page"] = page.toString();
            }
            if (limit != null) {
                _queryParams["limit"] = limit.toString();
            }
            if (order != null) {
                _queryParams["order"] = serializers.Order.jsonOrThrow(order, { unrecognizedObjectKeys: "strip" });
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersPaginationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.page != null ? request?.page : 1;
        return new core.Pageable<SeedPagination.ListUsersPaginationResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => response?.hasNextPage ?? (response?.data ?? []).length > 0,
            getItems: (response) => response?.data ?? [],
            loadPage: (response) => {
                _offset += response?.data != null ? response.data.length : 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {SeedPagination.ListUsersExtendedRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithExtendedResults({
     *         cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"
     *     })
     */
    public async listWithExtendedResults(
        request: SeedPagination.ListUsersExtendedRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListUsersExtendedRequest,
        ): Promise<SeedPagination.ListUsersExtendedResponse> => {
            const { cursor } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (cursor != null) {
                _queryParams["cursor"] = cursor;
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersExtendedResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        return new core.Pageable<SeedPagination.ListUsersExtendedResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => response?.next != null,
            getItems: (response) => response?.data?.users ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.next));
            },
        });
    }

    /**
     * @param {SeedPagination.ListUsersExtendedRequestForOptionalData} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithExtendedResultsAndOptionalData({
     *         cursor: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"
     *     })
     */
    public async listWithExtendedResultsAndOptionalData(
        request: SeedPagination.ListUsersExtendedRequestForOptionalData = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<SeedPagination.User>> {
        const list = async (
            request: SeedPagination.ListUsersExtendedRequestForOptionalData,
        ): Promise<SeedPagination.ListUsersExtendedOptionalListResponse> => {
            const { cursor } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (cursor != null) {
                _queryParams["cursor"] = cursor;
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.ListUsersExtendedOptionalListResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        return new core.Pageable<SeedPagination.ListUsersExtendedOptionalListResponse, SeedPagination.User>({
            response: await list(request),
            hasNextPage: (response) => response?.next != null,
            getItems: (response) => response?.data?.users ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "cursor", response?.next));
            },
        });
    }

    /**
     * @param {SeedPagination.ListUsernamesRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listUsernames({
     *         startingAfter: "starting_after"
     *     })
     */
    public async listUsernames(
        request: SeedPagination.ListUsernamesRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<string>> {
        const list = async (request: SeedPagination.ListUsernamesRequest): Promise<SeedPagination.UsernameCursor> => {
            const { startingAfter } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (startingAfter != null) {
                _queryParams["starting_after"] = startingAfter;
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.UsernameCursor.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        return new core.Pageable<SeedPagination.UsernameCursor, string>({
            response: await list(request),
            hasNextPage: (response) => response?.cursor?.after != null,
            getItems: (response) => response?.cursor?.data ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "startingAfter", response?.cursor?.after));
            },
        });
    }

    /**
     * @param {SeedPagination.ListWithGlobalConfigRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.listWithGlobalConfig({
     *         offset: 1
     *     })
     */
    public async listWithGlobalConfig(
        request: SeedPagination.ListWithGlobalConfigRequest = {},
        requestOptions?: Users.RequestOptions,
    ): Promise<core.Page<string>> {
        const list = async (
            request: SeedPagination.ListWithGlobalConfigRequest,
        ): Promise<SeedPagination.UsernameContainer> => {
            const { offset } = request;
            const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
            if (offset != null) {
                _queryParams["offset"] = offset.toString();
            }
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "/users",
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.UsernameContainer.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError("Timeout exceeded when calling GET /users.");
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        let _offset = request?.offset != null ? request?.offset : 1;
        return new core.Pageable<SeedPagination.UsernameContainer, string>({
            response: await list(request),
            hasNextPage: (response) => (response?.results ?? []).length > 0,
            getItems: (response) => response?.results ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "offset", _offset));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
