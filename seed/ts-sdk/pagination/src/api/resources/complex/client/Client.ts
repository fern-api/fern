/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as SeedPagination from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Complex {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Complex {
    constructor(protected readonly _options: Complex.Options) {}

    /**
     * @param {SeedPagination.SearchRequest} request
     * @param {Complex.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.complex.search({
     *         pagination: {
     *             perPage: 1,
     *             startingAfter: "starting_after"
     *         },
     *         query: {
     *             field: "field",
     *             operator: "=",
     *             value: "value"
     *         }
     *     })
     */
    public async search(
        request: SeedPagination.SearchRequest,
        requestOptions?: Complex.RequestOptions,
    ): Promise<core.Page<SeedPagination.Conversation>> {
        const list = async (
            request: SeedPagination.SearchRequest,
        ): Promise<SeedPagination.PaginatedConversationResponse> => {
            const _response = await core.fetcher({
                url: urlJoin(
                    (await core.Supplier.get(this._options.baseUrl)) ??
                        (await core.Supplier.get(this._options.environment)),
                    "conversations/search",
                ),
                method: "POST",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/pagination",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/pagination/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                    ...requestOptions?.headers,
                },
                contentType: "application/json",
                requestType: "json",
                body: serializers.SearchRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions?.maxRetries,
                abortSignal: requestOptions?.abortSignal,
            });
            if (_response.ok) {
                return serializers.PaginatedConversationResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SeedPaginationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SeedPaginationTimeoutError(
                        "Timeout exceeded when calling POST /conversations/search.",
                    );
                case "unknown":
                    throw new errors.SeedPaginationError({
                        message: _response.error.errorMessage,
                    });
            }
        };
        return new core.Pageable<SeedPagination.PaginatedConversationResponse, SeedPagination.Conversation>({
            response: await list(request),
            hasNextPage: (response) => response?.pages?.next?.startingAfter != null,
            getItems: (response) => response?.conversations ?? [],
            loadPage: (response) => {
                return list(
                    core.setObjectProperty(request, "pagination.startingAfter", response?.pages?.next?.startingAfter),
                );
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
