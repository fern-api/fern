/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as SeedPagination from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Complex {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Complex {
    protected readonly _options: Complex.Options;

    constructor(_options: Complex.Options) {
        this._options = _options;
    }

    /**
     * @param {string} index
     * @param {SeedPagination.SearchRequest} request
     * @param {Complex.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.complex.search("index", {
     *         pagination: {
     *             per_page: 1,
     *             starting_after: "starting_after"
     *         },
     *         query: {
     *             field: "field",
     *             operator: "=",
     *             value: "value"
     *         }
     *     })
     */
    public async search(
        index: string,
        request: SeedPagination.SearchRequest,
        requestOptions?: Complex.RequestOptions,
    ): Promise<core.Page<SeedPagination.Conversation>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: SeedPagination.SearchRequest,
            ): Promise<core.WithRawResponse<SeedPagination.PaginatedConversationResponse>> => {
                const _response = await core.fetcher({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)),
                        `${encodeURIComponent(index)}/conversations/search`,
                    ),
                    method: "POST",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                        requestOptions?.headers,
                    ),
                    contentType: "application/json",
                    requestType: "json",
                    body: request,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as SeedPagination.PaginatedConversationResponse,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SeedPaginationError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SeedPaginationError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SeedPaginationTimeoutError(
                            "Timeout exceeded when calling POST /{index}/conversations/search.",
                        );
                    case "unknown":
                        throw new errors.SeedPaginationError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<SeedPagination.PaginatedConversationResponse, SeedPagination.Conversation>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => response?.pages?.next?.starting_after != null,
            getItems: (response) => response?.conversations ?? [],
            loadPage: (response) => {
                return list(
                    core.setObjectProperty(request, "pagination.starting_after", response?.pages?.next?.starting_after),
                );
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
