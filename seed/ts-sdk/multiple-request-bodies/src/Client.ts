/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "./core/headers.js";
import * as SeedApi from "./api/index.js";
import * as errors from "./errors/index.js";

export declare namespace SeedApiClient {
    export interface Options {
        environment?: core.Supplier<environments.SeedApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class SeedApiClient {
    protected readonly _options: SeedApiClient.Options;

    constructor(_options: SeedApiClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/multiple-request-bodies",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/multiple-request-bodies/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    /**
     * @param {SeedApi.UploadDocumentRequest} request
     * @param {SeedApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.uploadJsonDocument()
     */
    public uploadJsonDocument(
        request: SeedApi.UploadDocumentRequest = {},
        requestOptions?: SeedApiClient.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.UploadDocumentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__uploadJsonDocument(request, requestOptions));
    }

    private async __uploadJsonDocument(
        request: SeedApi.UploadDocumentRequest = {},
        requestOptions?: SeedApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.UploadDocumentResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedApiEnvironment.Default,
                "documents/upload",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedApi.UploadDocumentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling POST /documents/upload.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {core.file.Uploadable} uploadable
     * @param {SeedApiClient.RequestOptions} requestOptions - Request-specific configuration.
     */
    public uploadPdfDocument(
        uploadable: core.file.Uploadable,
        requestOptions?: SeedApiClient.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.UploadDocumentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__uploadPdfDocument(uploadable, requestOptions));
    }

    private async __uploadPdfDocument(
        uploadable: core.file.Uploadable,
        requestOptions?: SeedApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.UploadDocumentResponse>> {
        const _binaryUploadRequest = await core.file.toBinaryUploadRequest(uploadable);
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            _binaryUploadRequest.headers,
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedApiEnvironment.Default,
                "documents/upload",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/pdf",
            queryParameters: requestOptions?.queryParams,
            requestType: "bytes",
            duplex: "half",
            body: _binaryUploadRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedApi.UploadDocumentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling POST /documents/upload.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
