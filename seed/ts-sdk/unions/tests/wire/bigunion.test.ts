/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedUnionsClient } from "../../src/Client";

describe("Bigunion", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedUnionsClient({ environment: server.baseUrl });

        const rawResponseBody = {
            type: "normalSweet",
            id: "id",
            "created-at": "2024-01-15T09:30:00Z",
            "archived-at": "2024-01-15T09:30:00Z",
            value: "value",
        };
        server.mockEndpoint().get("/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.bigunion.get("id");
        expect(response).toEqual({
            type: "normalSweet",
            value: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedUnionsClient({ environment: server.baseUrl });
        const rawRequestBody = {
            type: "normalSweet",
            id: "id",
            "created-at": "2024-01-15T09:30:00Z",
            "archived-at": "2024-01-15T09:30:00Z",
            value: "value",
        };
        const rawResponseBody = true;
        server
            .mockEndpoint()
            .patch("")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bigunion.update({
            type: "normalSweet",
            value: "value",
        });
        expect(response).toEqual(true);
    });

    test("update-many", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedUnionsClient({ environment: server.baseUrl });
        const rawRequestBody = [
            {
                type: "normalSweet",
                id: "id",
                "created-at": "2024-01-15T09:30:00Z",
                "archived-at": "2024-01-15T09:30:00Z",
                value: "value",
            },
            {
                type: "normalSweet",
                id: "id",
                "created-at": "2024-01-15T09:30:00Z",
                "archived-at": "2024-01-15T09:30:00Z",
                value: "value",
            },
        ];
        const rawResponseBody = { string: true };
        server
            .mockEndpoint()
            .patch("/many")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.bigunion.updateMany([
            {
                type: "normalSweet",
                value: "value",
            },
            {
                type: "normalSweet",
                value: "value",
            },
        ]);
        expect(response).toEqual({
            string: true,
        });
    });
});
