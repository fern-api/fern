// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
=======
import * as core from "../../../../../../core/index.js";
import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as core from "../../../../../../core/index.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Api {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Api {
    protected readonly _options: Api.Options;

    constructor(_options: Api.Options) {
        this._options = _options;
    }

    /**
     * @param {Api.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nested.api.getSomething()
     */
    public getSomething(requestOptions?: Api.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__getSomething(requestOptions));
    }

    private async __getSomething(requestOptions?: Api.RequestOptions): Promise<core.WithRawResponse<void>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/nested/get-something",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedOauthClientCredentialsError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedOauthClientCredentialsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedOauthClientCredentialsTimeoutError(
                    "Timeout exceeded when calling GET /nested/get-something.",
                );
            case "unknown":
                throw new errors.SeedOauthClientCredentialsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
