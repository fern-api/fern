/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedExamplesClient } from "../../src/Client";

describe("Service", () => {
    test("getMovie", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExamplesClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "movie-c06a4ad7",
            prequel: "movie-cv9b914f",
            title: "The Boy and the Heron",
            from: "Hayao Miyazaki",
            rating: 8,
            type: "movie",
            tag: "tag-wf9as23d",
            metadata: {
                actors: ["Christian Bale", "Florence Pugh", "Willem Dafoe"],
                releaseDate: "2023-12-08",
                ratings: { rottenTomatoes: 97, imdb: 7.6 },
            },
            revenue: 1000000,
        };
        server
            .mockEndpoint()
            .get("/movie/movie-c06a4ad7")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getMovie("movie-c06a4ad7");
        expect(response).toEqual({
            id: "movie-c06a4ad7",
            prequel: "movie-cv9b914f",
            title: "The Boy and the Heron",
            from: "Hayao Miyazaki",
            rating: 8,
            type: "movie",
            tag: "tag-wf9as23d",
            metadata: {
                actors: ["Christian Bale", "Florence Pugh", "Willem Dafoe"],
                releaseDate: "2023-12-08",
                ratings: {
                    rottenTomatoes: 97,
                    imdb: 7.6,
                },
            },
            revenue: 1000000,
        });
    });

    test("createMovie", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExamplesClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            id: "movie-c06a4ad7",
            prequel: "movie-cv9b914f",
            title: "The Boy and the Heron",
            from: "Hayao Miyazaki",
            rating: 8,
            type: "movie",
            tag: "tag-wf9as23d",
            metadata: {
                actors: ["Christian Bale", "Florence Pugh", "Willem Dafoe"],
                releaseDate: "2023-12-08",
                ratings: { rottenTomatoes: 97, imdb: 7.6 },
            },
            revenue: 1000000,
        };
        const rawResponseBody = "movie-c06a4ad7";
        server
            .mockEndpoint()
            .post("/movie")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.createMovie({
            id: "movie-c06a4ad7",
            prequel: "movie-cv9b914f",
            title: "The Boy and the Heron",
            from: "Hayao Miyazaki",
            rating: 8,
            type: "movie",
            tag: "tag-wf9as23d",
            metadata: {
                actors: ["Christian Bale", "Florence Pugh", "Willem Dafoe"],
                releaseDate: "2023-12-08",
                ratings: {
                    rottenTomatoes: 97,
                    imdb: 7.6,
                },
            },
            revenue: 1000000,
        });
        expect(response).toEqual("movie-c06a4ad7");
    });

    test("getMetadata", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExamplesClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            type: "html",
            extra: { version: "0.0.1", tenancy: "test" },
            tags: ["development", "public"],
            value: "<head>...</head>",
        };
        server
            .mockEndpoint()
            .get("/metadata")
            .header("X-API-Version", "0.0.1")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getMetadata({
            "X-API-Version": "0.0.1",
            shallow: false,
            tag: "development",
        });
        expect(response).toEqual({
            type: "html",
            value: "<head>...</head>",
        });
    });

    test("createBigEntity", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExamplesClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            castMember: { name: "name", id: "id" },
            extendedMovie: {
                cast: ["cast", "cast"],
                id: "id",
                prequel: "prequel",
                title: "title",
                from: "from",
                rating: 1.1,
                type: "movie",
                tag: "tag",
                book: "book",
                metadata: { metadata: { key: "value" } },
                revenue: 1000000,
            },
            entity: { type: "primitive", name: "name" },
            metadata: { type: "html", value: "metadata", extra: { extra: "extra" }, tags: ["tags"] },
            commonMetadata: { id: "id", data: { data: "data" }, jsonString: "jsonString" },
            eventInfo: { type: "metadata", id: "id", data: { data: "data" }, jsonString: "jsonString" },
            data: { type: "string", value: "data" },
            migration: { name: "name", status: "RUNNING" },
            exception: {
                type: "generic",
                exceptionType: "exceptionType",
                exceptionMessage: "exceptionMessage",
                exceptionStacktrace: "exceptionStacktrace",
            },
            test: { type: "and", value: true },
            node: {
                name: "name",
                nodes: [
                    {
                        name: "name",
                        nodes: [
                            { name: "name", nodes: [], trees: [] },
                            { name: "name", nodes: [], trees: [] },
                        ],
                        trees: [{ nodes: [] }, { nodes: [] }],
                    },
                    {
                        name: "name",
                        nodes: [
                            { name: "name", nodes: [], trees: [] },
                            { name: "name", nodes: [], trees: [] },
                        ],
                        trees: [{ nodes: [] }, { nodes: [] }],
                    },
                ],
                trees: [
                    {
                        nodes: [
                            { name: "name", nodes: [], trees: [] },
                            { name: "name", nodes: [], trees: [] },
                        ],
                    },
                    {
                        nodes: [
                            { name: "name", nodes: [], trees: [] },
                            { name: "name", nodes: [], trees: [] },
                        ],
                    },
                ],
            },
            directory: {
                name: "name",
                files: [
                    { name: "name", contents: "contents" },
                    { name: "name", contents: "contents" },
                ],
                directories: [
                    {
                        name: "name",
                        files: [
                            { name: "name", contents: "contents" },
                            { name: "name", contents: "contents" },
                        ],
                        directories: [
                            { name: "name", files: [], directories: [] },
                            { name: "name", files: [], directories: [] },
                        ],
                    },
                    {
                        name: "name",
                        files: [
                            { name: "name", contents: "contents" },
                            { name: "name", contents: "contents" },
                        ],
                        directories: [
                            { name: "name", files: [], directories: [] },
                            { name: "name", files: [], directories: [] },
                        ],
                    },
                ],
            },
            moment: {
                id: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                date: "2023-01-15",
                datetime: "2024-01-15T09:30:00Z",
            },
        };
        const rawResponseBody = {
            response: { key: "value" },
            identifiers: [
                { type: "primitive", value: "value", label: "label" },
                { type: "primitive", value: "value", label: "label" },
            ],
        };
        server
            .mockEndpoint()
            .post("/big-entity")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.createBigEntity({
            castMember: {
                name: "name",
                id: "id",
            },
            extendedMovie: {
                cast: ["cast", "cast"],
                id: "id",
                prequel: "prequel",
                title: "title",
                from: "from",
                rating: 1.1,
                type: "movie",
                tag: "tag",
                book: "book",
                metadata: {
                    metadata: {
                        key: "value",
                    },
                },
                revenue: 1000000,
            },
            entity: {
                type: "primitive",
                name: "name",
            },
            metadata: {
                type: "html",
                value: "metadata",
            },
            commonMetadata: {
                id: "id",
                data: {
                    data: "data",
                },
                jsonString: "jsonString",
            },
            eventInfo: {
                type: "metadata",
                id: "id",
                data: {
                    data: "data",
                },
                jsonString: "jsonString",
            },
            data: {
                type: "string",
                value: "data",
            },
            migration: {
                name: "name",
                status: "RUNNING",
            },
            exception: {
                type: "generic",
                exceptionType: "exceptionType",
                exceptionMessage: "exceptionMessage",
                exceptionStacktrace: "exceptionStacktrace",
            },
            test: {
                type: "and",
                value: true,
            },
            node: {
                name: "name",
                nodes: [
                    {
                        name: "name",
                        nodes: [
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                        ],
                        trees: [
                            {
                                nodes: [],
                            },
                            {
                                nodes: [],
                            },
                        ],
                    },
                    {
                        name: "name",
                        nodes: [
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                        ],
                        trees: [
                            {
                                nodes: [],
                            },
                            {
                                nodes: [],
                            },
                        ],
                    },
                ],
                trees: [
                    {
                        nodes: [
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                        ],
                    },
                    {
                        nodes: [
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                            {
                                name: "name",
                                nodes: [],
                                trees: [],
                            },
                        ],
                    },
                ],
            },
            directory: {
                name: "name",
                files: [
                    {
                        name: "name",
                        contents: "contents",
                    },
                    {
                        name: "name",
                        contents: "contents",
                    },
                ],
                directories: [
                    {
                        name: "name",
                        files: [
                            {
                                name: "name",
                                contents: "contents",
                            },
                            {
                                name: "name",
                                contents: "contents",
                            },
                        ],
                        directories: [
                            {
                                name: "name",
                                files: [],
                                directories: [],
                            },
                            {
                                name: "name",
                                files: [],
                                directories: [],
                            },
                        ],
                    },
                    {
                        name: "name",
                        files: [
                            {
                                name: "name",
                                contents: "contents",
                            },
                            {
                                name: "name",
                                contents: "contents",
                            },
                        ],
                        directories: [
                            {
                                name: "name",
                                files: [],
                                directories: [],
                            },
                            {
                                name: "name",
                                files: [],
                                directories: [],
                            },
                        ],
                    },
                ],
            },
            moment: {
                id: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                date: "2023-01-15",
                datetime: "2024-01-15T09:30:00Z",
            },
        });
        expect(response).toEqual({
            response: {
                key: "value",
            },
            identifiers: [
                {
                    type: "primitive",
                    value: "value",
                    label: "label",
                },
                {
                    type: "primitive",
                    value: "value",
                    label: "label",
                },
            ],
        });
    });
});
