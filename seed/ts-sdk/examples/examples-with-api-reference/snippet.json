{
    "endpoints": [
        {
            "id": {
                "path": "/",
                "method": "POST",
                "identifier_override": "endpoint_.echo"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.echo(\"Hello world!\\\\n\\\\nwith\\\\n\\\\tnewlines\");\n"
            }
        },
        {
            "id": {
                "path": "/",
                "method": "POST",
                "identifier_override": "endpoint_.createType"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.createType(\"primitive\");\n"
            }
        },
        {
            "id": {
                "path": "/file/notification/{notificationId}",
                "method": "GET",
                "identifier_override": "endpoint_file/notification/service.getException"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.file.notification.service.getException(\"notification-hsy129x\");\n"
            }
        },
        {
            "id": {
                "path": "/file/{filename}",
                "method": "GET",
                "identifier_override": "endpoint_file/service.getFile"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.file.service.getFile(\"file.txt\", {\n    xFileApiVersion: \"0.0.2\"\n});\n"
            }
        },
        {
            "id": {
                "path": "/check/{id}",
                "method": "GET",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.health.service.check(\"id-2sdx82h\");\n"
            },
            "example_identifier": "Example0"
        },
        {
            "id": {
                "path": "/check/{id}",
                "method": "GET",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.health.service.check(\"id-3tey93i\");\n"
            },
            "example_identifier": "Example2"
        },
        {
            "id": {
                "path": "/ping",
                "method": "GET",
                "identifier_override": "endpoint_health/service.ping"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.health.service.ping();\n"
            },
            "example_identifier": "Example0"
        },
        {
            "id": {
                "path": "/movie/{movieId}",
                "method": "GET",
                "identifier_override": "endpoint_service.getMovie"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.service.getMovie(\"movie-c06a4ad7\");\n"
            }
        },
        {
            "id": {
                "path": "/movie",
                "method": "POST",
                "identifier_override": "endpoint_service.createMovie"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.service.createMovie({\n    id: \"movie-c06a4ad7\",\n    prequel: \"movie-cv9b914f\",\n    title: \"The Boy and the Heron\",\n    from: \"Hayao Miyazaki\",\n    rating: 8,\n    type: \"movie\",\n    tag: \"tag-wf9as23d\",\n    metadata: {\n        \"actors\": [\n            \"Christian Bale\",\n            \"Florence Pugh\",\n            \"Willem Dafoe\"\n        ],\n        \"releaseDate\": \"2023-12-08\",\n        \"ratings\": {\n            \"rottenTomatoes\": 97,\n            \"imdb\": 7.6\n        }\n    },\n    revenue: 1000000\n});\n"
            }
        },
        {
            "id": {
                "path": "/metadata",
                "method": "GET",
                "identifier_override": "endpoint_service.getMetadata"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.service.getMetadata({\n    xApiVersion: \"0.0.1\",\n    shallow: false,\n    tag: \"development\"\n});\n"
            }
        },
        {
            "id": {
                "path": "/big-entity",
                "method": "POST",
                "identifier_override": "endpoint_service.createBigEntity"
            },
            "snippet": {
                "type": "typescript",
                "client": "import { SeedExamplesEnvironment, SeedExamplesClient } from \"@fern/examples\";\n\nconst client = new SeedExamplesClient({ environment: SeedExamplesEnvironment.Production, token: \"YOUR_TOKEN\" });\nawait client.service.createBigEntity({\n    castMember: {\n        name: \"name\",\n        id: \"id\"\n    },\n    extendedMovie: {\n        id: \"id\",\n        prequel: \"prequel\",\n        title: \"title\",\n        from: \"from\",\n        rating: 1.1,\n        type: \"movie\",\n        tag: \"tag\",\n        book: \"book\",\n        metadata: {\n            \"metadata\": {\n                \"key\": \"value\"\n            }\n        },\n        revenue: 1000000,\n        cast: [\"cast\", \"cast\"]\n    },\n    entity: {\n        type: \"primitive\",\n        name: \"name\"\n    },\n    metadata: {\n        type: \"html\",\n        value: \"metadata\"\n    },\n    commonMetadata: {\n        id: \"id\",\n        data: {\n            \"data\": \"data\"\n        },\n        jsonString: \"jsonString\"\n    },\n    eventInfo: {\n        type: \"metadata\",\n        id: \"id\",\n        data: {\n            \"data\": \"data\"\n        },\n        jsonString: \"jsonString\"\n    },\n    data: {\n        type: \"string\",\n        value: \"data\"\n    },\n    migration: {\n        name: \"name\",\n        status: \"RUNNING\"\n    },\n    exception: {\n        type: \"generic\",\n        exceptionType: \"exceptionType\",\n        exceptionMessage: \"exceptionMessage\",\n        exceptionStacktrace: \"exceptionStacktrace\"\n    },\n    test: {\n        type: \"and\",\n        value: true\n    },\n    node: {\n        name: \"name\",\n        nodes: [{\n                name: \"name\",\n                nodes: [{\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }, {\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }],\n                trees: [{\n                        nodes: []\n                    }, {\n                        nodes: []\n                    }]\n            }, {\n                name: \"name\",\n                nodes: [{\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }, {\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }],\n                trees: [{\n                        nodes: []\n                    }, {\n                        nodes: []\n                    }]\n            }],\n        trees: [{\n                nodes: [{\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }, {\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }]\n            }, {\n                nodes: [{\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }, {\n                        name: \"name\",\n                        nodes: [],\n                        trees: []\n                    }]\n            }]\n    },\n    directory: {\n        name: \"name\",\n        files: [{\n                name: \"name\",\n                contents: \"contents\"\n            }, {\n                name: \"name\",\n                contents: \"contents\"\n            }],\n        directories: [{\n                name: \"name\",\n                files: [{\n                        name: \"name\",\n                        contents: \"contents\"\n                    }, {\n                        name: \"name\",\n                        contents: \"contents\"\n                    }],\n                directories: [{\n                        name: \"name\",\n                        files: [],\n                        directories: []\n                    }, {\n                        name: \"name\",\n                        files: [],\n                        directories: []\n                    }]\n            }, {\n                name: \"name\",\n                files: [{\n                        name: \"name\",\n                        contents: \"contents\"\n                    }, {\n                        name: \"name\",\n                        contents: \"contents\"\n                    }],\n                directories: [{\n                        name: \"name\",\n                        files: [],\n                        directories: []\n                    }, {\n                        name: \"name\",\n                        files: [],\n                        directories: []\n                    }]\n            }]\n    },\n    moment: {\n        id: \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n        date: \"2023-01-15\",\n        datetime: \"2024-01-15T09:30:00Z\"\n    }\n});\n"
            }
        }
    ],
    "types": {}
}