/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SeedExamples from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Service {
    export interface Options {
        environment: core.Supplier<environments.SeedExamplesEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Service {
    constructor(protected readonly _options: Service.Options) {}

    /**
     * @param {SeedExamples.MovieId} movieId
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getMovie("movie-c06a4ad7")
     */
    public async getMovie(
        movieId: SeedExamples.MovieId,
        requestOptions?: Service.RequestOptions,
    ): Promise<SeedExamples.Movie> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/movie/${encodeURIComponent(serializers.MovieId.jsonOrThrow(movieId))}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/examples",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/examples/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Movie.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedExamplesError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedExamplesError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedExamplesTimeoutError("Timeout exceeded when calling GET /movie/{movieId}.");
            case "unknown":
                throw new errors.SeedExamplesError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {SeedExamples.Movie} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.createMovie({
     *         id: "movie-c06a4ad7",
     *         prequel: "movie-cv9b914f",
     *         title: "The Boy and the Heron",
     *         from: "Hayao Miyazaki",
     *         rating: 8,
     *         type: "movie",
     *         tag: "tag-wf9as23d",
     *         metadata: {
     *             "actors": [
     *                 "Christian Bale",
     *                 "Florence Pugh",
     *                 "Willem Dafoe"
     *             ],
     *             "releaseDate": "2023-12-08",
     *             "ratings": {
     *                 "rottenTomatoes": 97,
     *                 "imdb": 7.6
     *             }
     *         },
     *         revenue: 1000000
     *     })
     */
    public async createMovie(
        request: SeedExamples.Movie,
        requestOptions?: Service.RequestOptions,
    ): Promise<SeedExamples.MovieId> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/movie",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/examples",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/examples/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.Movie.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.MovieId.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedExamplesError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedExamplesError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedExamplesTimeoutError("Timeout exceeded when calling POST /movie.");
            case "unknown":
                throw new errors.SeedExamplesError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {SeedExamples.GetMetadataRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getMetadata({
     *         xApiVersion: "0.0.1",
     *         shallow: false,
     *         tag: "development"
     *     })
     */
    public async getMetadata(
        request: SeedExamples.GetMetadataRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<SeedExamples.Metadata> {
        const { shallow, tag, xApiVersion } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (shallow != null) {
            _queryParams["shallow"] = shallow.toString();
        }

        if (tag != null) {
            if (Array.isArray(tag)) {
                _queryParams["tag"] = tag.map((item) => item);
            } else {
                _queryParams["tag"] = tag;
            }
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/metadata",
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/examples",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/examples/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "X-API-Version": xApiVersion,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Metadata.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedExamplesError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedExamplesError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedExamplesTimeoutError("Timeout exceeded when calling GET /metadata.");
            case "unknown":
                throw new errors.SeedExamplesError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {SeedExamples.BigEntity} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.createBigEntity({
     *         castMember: {
     *             name: "name",
     *             id: "id"
     *         },
     *         extendedMovie: {
     *             cast: ["cast", "cast"]
     *         },
     *         entity: {
     *             type: "primitive",
     *             name: "name"
     *         },
     *         metadata: {
     *             type: "html",
     *             value: "metadata"
     *         },
     *         commonMetadata: {
     *             id: "id",
     *             data: {
     *                 "data": "data"
     *             },
     *             jsonString: "jsonString"
     *         },
     *         eventInfo: {
     *             type: "metadata",
     *             id: "id",
     *             data: {
     *                 "data": "data"
     *             },
     *             jsonString: "jsonString"
     *         },
     *         data: {
     *             type: "string",
     *             value: "data"
     *         },
     *         migration: {
     *             name: "name",
     *             status: "RUNNING"
     *         },
     *         exception: {
     *             type: "generic",
     *             exceptionType: "exceptionType",
     *             exceptionMessage: "exceptionMessage",
     *             exceptionStacktrace: "exceptionStacktrace"
     *         },
     *         test: {
     *             type: "and",
     *             value: true
     *         },
     *         node: {
     *             name: "name",
     *             nodes: [{
     *                     name: "name",
     *                     nodes: [{
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }, {
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }],
     *                     trees: [{
     *                             nodes: []
     *                         }, {
     *                             nodes: []
     *                         }]
     *                 }, {
     *                     name: "name",
     *                     nodes: [{
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }, {
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }],
     *                     trees: [{
     *                             nodes: []
     *                         }, {
     *                             nodes: []
     *                         }]
     *                 }],
     *             trees: [{
     *                     nodes: [{
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }, {
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }]
     *                 }, {
     *                     nodes: [{
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }, {
     *                             name: "name",
     *                             nodes: [],
     *                             trees: []
     *                         }]
     *                 }]
     *         },
     *         directory: {
     *             name: "name",
     *             files: [{
     *                     name: "name",
     *                     contents: "contents"
     *                 }, {
     *                     name: "name",
     *                     contents: "contents"
     *                 }],
     *             directories: [{
     *                     name: "name",
     *                     files: [{
     *                             name: "name",
     *                             contents: "contents"
     *                         }, {
     *                             name: "name",
     *                             contents: "contents"
     *                         }],
     *                     directories: [{
     *                             name: "name",
     *                             files: [],
     *                             directories: []
     *                         }, {
     *                             name: "name",
     *                             files: [],
     *                             directories: []
     *                         }]
     *                 }, {
     *                     name: "name",
     *                     files: [{
     *                             name: "name",
     *                             contents: "contents"
     *                         }, {
     *                             name: "name",
     *                             contents: "contents"
     *                         }],
     *                     directories: [{
     *                             name: "name",
     *                             files: [],
     *                             directories: []
     *                         }, {
     *                             name: "name",
     *                             files: [],
     *                             directories: []
     *                         }]
     *                 }]
     *         },
     *         moment: {
     *             id: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             date: "2023-01-15",
     *             datetime: "2024-01-15T09:30:00Z"
     *         }
     *     })
     */
    public async createBigEntity(
        request: SeedExamples.BigEntity,
        requestOptions?: Service.RequestOptions,
    ): Promise<SeedExamples.Response> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/big-entity",
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/examples",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/examples/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.BigEntity.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedExamplesError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedExamplesError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedExamplesTimeoutError("Timeout exceeded when calling POST /big-entity.");
            case "unknown":
                throw new errors.SeedExamplesError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
