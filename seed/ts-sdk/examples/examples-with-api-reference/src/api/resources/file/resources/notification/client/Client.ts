// This file was auto-generated by Fern from our API Definition.

import type * as core from "../../../../../../core/index.js";
import type * as environments from "../../../../../../environments.js";
import { Service } from "../resources/service/client/Client.js";

export declare namespace Notification {
    export interface Options {
        environment: core.Supplier<
            environments.SeedExamplesEnvironment | string
        >;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<
            string,
            string | core.Supplier<string | null | undefined> | null | undefined
        >;
        /** The default maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The default number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
    }
}

export class Notification {
    protected readonly _options: Notification.Options;
    protected _service: Service | undefined;

    constructor(_options: Notification.Options) {
        this._options = _options;
    }

    public get service(): Service {
        return (this._service ??= new Service(this._options));
    }
}
