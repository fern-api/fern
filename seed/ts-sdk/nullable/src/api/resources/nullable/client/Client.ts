/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as SeedNullable from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index.js";

export declare namespace Nullable {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Nullable {
    protected readonly _options: Nullable.Options;

    constructor(_options: Nullable.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedNullable.GetUsersRequest} request
     * @param {Nullable.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullable.getUsers({
     *         usernames: "usernames",
     *         avatar: "avatar",
     *         activated: true,
     *         tags: "tags",
     *         extra: true
     *     })
     */
    public getUsers(
        request: SeedNullable.GetUsersRequest = {},
        requestOptions?: Nullable.RequestOptions,
    ): core.HttpResponsePromise<SeedNullable.User[]> {
        return core.HttpResponsePromise.fromPromise(this.__getUsers(request, requestOptions));
    }

    private async __getUsers(
        request: SeedNullable.GetUsersRequest = {},
        requestOptions?: Nullable.RequestOptions,
    ): Promise<core.WithRawResponse<SeedNullable.User[]>> {
        const { usernames, avatar, activated, tags, extra } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (usernames != null) {
            if (Array.isArray(usernames)) {
                _queryParams["usernames"] = usernames.map((item) => item);
            } else {
                _queryParams["usernames"] = usernames;
            }
        }

        if (avatar != null) {
            _queryParams["avatar"] = avatar;
        }

        if (activated != null) {
            if (Array.isArray(activated)) {
                _queryParams["activated"] = activated.map((item) => item.toString());
            } else {
                _queryParams["activated"] = activated.toString();
            }
        }

        if (tags !== undefined) {
            if (Array.isArray(tags)) {
                _queryParams["tags"] = tags.map((item) => item);
            } else {
                _queryParams["tags"] = tags;
            }
        }

        if (extra !== undefined) {
            _queryParams["extra"] = extra?.toString() ?? null;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/users",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedNullable.User[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableTimeoutError("Timeout exceeded when calling GET /users.");
            case "unknown":
                throw new errors.SeedNullableError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedNullable.CreateUserRequest} request
     * @param {Nullable.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullable.createUser({
     *         username: "username",
     *         tags: ["tags", "tags"],
     *         metadata: {
     *             createdAt: "2024-01-15T09:30:00Z",
     *             updatedAt: "2024-01-15T09:30:00Z",
     *             avatar: "avatar",
     *             activated: true,
     *             status: {
     *                 type: "active"
     *             },
     *             values: {
     *                 "values": "values"
     *             }
     *         },
     *         avatar: "avatar"
     *     })
     */
    public createUser(
        request: SeedNullable.CreateUserRequest,
        requestOptions?: Nullable.RequestOptions,
    ): core.HttpResponsePromise<SeedNullable.User> {
        return core.HttpResponsePromise.fromPromise(this.__createUser(request, requestOptions));
    }

    private async __createUser(
        request: SeedNullable.CreateUserRequest,
        requestOptions?: Nullable.RequestOptions,
    ): Promise<core.WithRawResponse<SeedNullable.User>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/users",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedNullable.User, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableTimeoutError("Timeout exceeded when calling POST /users.");
            case "unknown":
                throw new errors.SeedNullableError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedNullable.DeleteUserRequest} request
     * @param {Nullable.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullable.deleteUser({
     *         username: "xy"
     *     })
     */
    public deleteUser(
        request: SeedNullable.DeleteUserRequest = {},
        requestOptions?: Nullable.RequestOptions,
    ): core.HttpResponsePromise<boolean> {
        return core.HttpResponsePromise.fromPromise(this.__deleteUser(request, requestOptions));
    }

    private async __deleteUser(
        request: SeedNullable.DeleteUserRequest = {},
        requestOptions?: Nullable.RequestOptions,
    ): Promise<core.WithRawResponse<boolean>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/users",
            ),
            method: "DELETE",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as boolean, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableTimeoutError("Timeout exceeded when calling DELETE /users.");
            case "unknown":
                throw new errors.SeedNullableError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
