/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedNullableClient } from "../../src/Client";

describe("Nullable", () => {
    test("getUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "name",
                id: "id",
                tags: ["tags", "tags"],
                metadata: {
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    avatar: "avatar",
                    activated: true,
                    status: { type: "active" },
                    values: { values: "values" },
                },
                email: "email",
                "favorite-number": 1,
                numbers: [1, 1],
                strings: { strings: { key: "value" } },
            },
            {
                name: "name",
                id: "id",
                tags: ["tags", "tags"],
                metadata: {
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    avatar: "avatar",
                    activated: true,
                    status: { type: "active" },
                    values: { values: "values" },
                },
                email: "email",
                "favorite-number": 1,
                numbers: [1, 1],
                strings: { strings: { key: "value" } },
            },
        ];
        server.mockEndpoint().get("/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullable.getUsers({
            usernames: "usernames",
            avatar: "avatar",
            activated: true,
            tags: "tags",
            extra: true,
        });
        expect(response).toEqual([
            {
                name: "name",
                id: "id",
                tags: ["tags", "tags"],
                metadata: {
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    avatar: "avatar",
                    activated: true,
                    status: {
                        type: "active",
                    },
                    values: {
                        values: "values",
                    },
                },
                email: "email",
                "favorite-number": 1,
                numbers: [1, 1],
                strings: {
                    strings: {
                        key: "value",
                    },
                },
            },
            {
                name: "name",
                id: "id",
                tags: ["tags", "tags"],
                metadata: {
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    avatar: "avatar",
                    activated: true,
                    status: {
                        type: "active",
                    },
                    values: {
                        values: "values",
                    },
                },
                email: "email",
                "favorite-number": 1,
                numbers: [1, 1],
                strings: {
                    strings: {
                        key: "value",
                    },
                },
            },
        ]);
    });

    test("createUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableClient({ environment: server.baseUrl });
        const rawRequestBody = {
            username: "username",
            tags: ["tags", "tags"],
            metadata: {
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                avatar: "avatar",
                activated: true,
                status: { type: "active" },
                values: { values: "values" },
            },
            avatar: "avatar",
        };
        const rawResponseBody = {
            name: "name",
            id: "id",
            tags: ["tags", "tags"],
            metadata: {
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                avatar: "avatar",
                activated: true,
                status: { type: "active" },
                values: { values: "values" },
            },
            email: "email",
            "favorite-number": 1,
            numbers: [1, 1],
            strings: { strings: { key: "value" } },
        };
        server
            .mockEndpoint()
            .post("/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullable.createUser({
            username: "username",
            tags: ["tags", "tags"],
            metadata: {
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                avatar: "avatar",
                activated: true,
                status: {
                    type: "active",
                },
                values: {
                    values: "values",
                },
            },
            avatar: "avatar",
        });
        expect(response).toEqual({
            name: "name",
            id: "id",
            tags: ["tags", "tags"],
            metadata: {
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                avatar: "avatar",
                activated: true,
                status: {
                    type: "active",
                },
                values: {
                    values: "values",
                },
            },
            email: "email",
            "favorite-number": 1,
            numbers: [1, 1],
            strings: {
                strings: {
                    key: "value",
                },
            },
        });
    });

    test("deleteUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableClient({ environment: server.baseUrl });
        const rawRequestBody = { username: "xy" };
        const rawResponseBody = true;
        server
            .mockEndpoint()
            .delete("/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullable.deleteUser({
            username: "xy",
        });
        expect(response).toEqual(true);
    });
});
