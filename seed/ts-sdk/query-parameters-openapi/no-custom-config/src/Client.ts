/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import * as SeedApi from "./api/index.js";
import { toJson } from "./core/json.js";
import * as errors from "./errors/index.js";

export declare namespace SeedApiClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class SeedApiClient {
    protected readonly _options: SeedApiClient.Options;

    constructor(_options: SeedApiClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/query-parameters-openapi",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/query-parameters-openapi/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    /**
     * @param {SeedApi.SearchRequest} request
     * @param {SeedApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.search({
     *         limit: 1,
     *         id: "id",
     *         date: "date",
     *         deadline: "2024-01-15T09:30:00Z",
     *         bytes: "bytes",
     *         user: {
     *             name: "name",
     *             tags: ["tags", "tags"]
     *         },
     *         userList: {
     *             name: "name",
     *             tags: ["tags", "tags"]
     *         },
     *         optionalDeadline: "2024-01-15T09:30:00Z",
     *         keyValue: {
     *             "keyValue": "keyValue"
     *         },
     *         optionalString: "optionalString",
     *         nestedUser: {
     *             name: "name",
     *             user: {
     *                 name: "name",
     *                 tags: ["tags", "tags"]
     *             }
     *         },
     *         optionalUser: {
     *             name: "name",
     *             tags: ["tags", "tags"]
     *         },
     *         excludeUser: {
     *             name: "name",
     *             tags: ["tags", "tags"]
     *         },
     *         filter: "filter",
     *         neighbor: {
     *             name: "name",
     *             tags: ["tags", "tags"]
     *         },
     *         neighborRequired: {
     *             name: "name",
     *             tags: ["tags", "tags"]
     *         }
     *     })
     */
    public search(
        request: SeedApi.SearchRequest,
        requestOptions?: SeedApiClient.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: SeedApi.SearchRequest,
        requestOptions?: SeedApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.SearchResponse>> {
        const {
            limit,
            id,
            date,
            deadline,
            bytes,
            user,
            userList,
            optionalDeadline,
            keyValue,
            optionalString,
            nestedUser,
            optionalUser,
            excludeUser,
            filter,
            neighbor,
            neighborRequired,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["limit"] = limit.toString();
        _queryParams["id"] = id;
        _queryParams["date"] = date;
        _queryParams["deadline"] = deadline;
        _queryParams["bytes"] = bytes;
        _queryParams["user"] = user;
        if (userList != null) {
            if (Array.isArray(userList)) {
                _queryParams["userList"] = userList.map((item) => item);
            } else {
                _queryParams["userList"] = userList;
            }
        }

        if (optionalDeadline != null) {
            _queryParams["optionalDeadline"] = optionalDeadline;
        }

        if (keyValue != null) {
            _queryParams["keyValue"] = toJson(keyValue);
        }

        if (optionalString != null) {
            _queryParams["optionalString"] = optionalString;
        }

        if (nestedUser != null) {
            _queryParams["nestedUser"] = nestedUser;
        }

        if (optionalUser != null) {
            _queryParams["optionalUser"] = optionalUser;
        }

        if (excludeUser != null) {
            if (Array.isArray(excludeUser)) {
                _queryParams["excludeUser"] = excludeUser.map((item) => item);
            } else {
                _queryParams["excludeUser"] = excludeUser;
            }
        }

        if (filter != null) {
            if (Array.isArray(filter)) {
                _queryParams["filter"] = filter.map((item) => item);
            } else {
                _queryParams["filter"] = filter;
            }
        }

        if (neighbor != null) {
            _queryParams["neighbor"] = neighbor;
        }

        _queryParams["neighborRequired"] =
            typeof neighborRequired === "string" ? neighborRequired : toJson(neighborRequired);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "user/getUsername",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedApi.SearchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling GET /user/getUsername.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
