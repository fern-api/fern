/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import * as SeedApi from "./api/index.js";
import * as serializers from "./serialization/index.js";
import { toJson } from "./core/json.js";
import * as errors from "./errors/index.js";

export declare namespace SeedApiClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class SeedApiClient {
    protected readonly _options: SeedApiClient.Options;

    constructor(_options: SeedApiClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/query-parameters-openapi",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/query-parameters-openapi/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    /**
     * @param {SeedApi.SearchRequest} request
     * @param {SeedApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.search()
     */
    public search(
        request: SeedApi.SearchRequest = {},
        requestOptions?: SeedApiClient.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: SeedApi.SearchRequest = {},
        requestOptions?: SeedApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.SearchResponse>> {
        const { filter, sort, limit, after, tags } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (filter != null) {
            _queryParams["filter"] = serializers.SearchRequestFilter.jsonOrThrow(filter, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                omitUndefined: true,
                breadcrumbsPrefix: ["request", "filter"],
            });
        }

        if (sort != null) {
            _queryParams["sort"] = serializers.SearchRequestSort.jsonOrThrow(sort, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (after != null) {
            _queryParams["after"] = (() => {
                const mapped = serializers.SearchRequestAfter.jsonOrThrow(after, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
                return typeof mapped === "string" ? mapped : toJson(mapped);
            })();
        }

        if (tags != null) {
            if (Array.isArray(tags)) {
                _queryParams["tags"] = tags.map((item) => item);
            } else {
                _queryParams["tags"] = tags;
            }
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "search",
            ),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.SearchResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling GET /search.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
