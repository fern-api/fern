/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedMixedCaseClient } from "../../src/Client";

describe("Service", () => {
    test("getResource", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedMixedCaseClient({ environment: server.baseUrl });

        const rawResponseBody = {
            status: "ACTIVE",
            resource_type: "user",
            userName: "username",
            metadata_tags: ["tag1", "tag2"],
            EXTRA_PROPERTIES: { foo: "bar", baz: "qux" },
        };
        server.mockEndpoint().get("/resource/rsc-xyz").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.getResource("rsc-xyz");
        expect(response).toEqual({
            resource_type: "user",
            userName: "username",
            metadata_tags: ["tag1", "tag2"],
            EXTRA_PROPERTIES: {
                foo: "bar",
                baz: "qux",
            },
        });
    });

    test("listResources", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedMixedCaseClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                resource_type: "user",
                status: "ACTIVE",
                userName: "username",
                metadata_tags: ["tag1", "tag2"],
                EXTRA_PROPERTIES: { foo: "bar", baz: "qux" },
            },
        ];
        server.mockEndpoint().get("/resource").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.listResources({
            page_limit: 10,
            beforeDate: "2023-01-01",
        });
        expect(response).toEqual([
            {
                resource_type: "user",
                userName: "username",
                metadata_tags: ["tag1", "tag2"],
                EXTRA_PROPERTIES: {
                    foo: "bar",
                    baz: "qux",
                },
            },
        ]);
    });
});
