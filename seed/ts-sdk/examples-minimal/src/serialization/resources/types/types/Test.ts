/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as serializers from "../../../index";
import * as SeedExamples from "../../../../api/index";

const _Base = core.serialization.object({
    u: core.serialization.record(core.serialization.string(), core.serialization.string()),
    v: core.serialization.set(core.serialization.string()),
});
export const Test: core.serialization.Schema<serializers.Test.Raw, SeedExamples.Test> = core.serialization
    .union("type", {
        and: core.serialization
            .object({
                value: core.serialization.boolean(),
            })
            .extend(_Base),
        or: core.serialization
            .object({
                value: core.serialization.boolean(),
            })
            .extend(_Base),
    })
    .transform<SeedExamples.Test>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Test {
    export type Raw = Test.And | Test.Or;

    export interface And extends _Base {
        type: "and";
        value: boolean;
    }

    export interface Or extends _Base {
        type: "or";
        value: boolean;
    }

    export interface _Base {
        u: Record<string, string>;
        v: string[];
    }
}
