/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedErrorsClient } from "../../src/Client";
import * as SeedErrors from "../../src/api/index";

describe("Simple", () => {
    test("fooWithoutEndpointError", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedErrorsClient({ environment: server.baseUrl });
        const rawRequestBody = { bar: "bar" };
        const rawResponseBody = { bar: "bar" };
        server
            .mockEndpoint()
            .post("/foo1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.simple.fooWithoutEndpointError({
            bar: "bar",
        });
        expect(response).toEqual({
            bar: "bar",
        });
    });

    test("foo", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedErrorsClient({ environment: server.baseUrl });
        const rawRequestBody = { bar: "bar" };
        const rawResponseBody = { bar: "bar" };
        server
            .mockEndpoint()
            .post("/foo2")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.simple.foo({
            bar: "bar",
        });
        expect(response).toEqual({
            bar: "bar",
        });
    });

    test("fooWithExamples (200aeafb)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedErrorsClient({ environment: server.baseUrl });
        const rawRequestBody = { bar: "hello" };
        const rawResponseBody = { bar: "hello" };
        server
            .mockEndpoint()
            .post("/foo3")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.simple.fooWithExamples({
            bar: "hello",
        });
        expect(response).toEqual({
            bar: "hello",
        });
    });

    test("fooWithExamples (2a092bdd)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedErrorsClient({ environment: server.baseUrl });
        const rawRequestBody = { bar: "hello" };
        const rawResponseBody = { message: "Too much foo", code: 1 };
        server
            .mockEndpoint()
            .post("/foo3")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.simple.fooWithExamples({
                bar: "hello",
            });
        }).rejects.toThrow(
            new SeedErrors.FooTooMuch({
                message: "Too much foo",
                code: 1,
            }),
        );
    });

    test("fooWithExamples (65d7c262)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedErrorsClient({ environment: server.baseUrl });
        const rawRequestBody = { bar: "hello" };
        const rawResponseBody = { message: "Too little foo", code: 2 };
        server
            .mockEndpoint()
            .post("/foo3")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.simple.fooWithExamples({
                bar: "hello",
            });
        }).rejects.toThrow(
            new SeedErrors.FooTooLittle({
                message: "Too little foo",
                code: 2,
            }),
        );
    });
});
