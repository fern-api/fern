/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedRequestParametersClient } from "../../src/Client";

describe("User", () => {
    test("createUsername", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedRequestParametersClient({ environment: server.baseUrl });
        const rawRequestBody = { username: "username", password: "password", name: "test" };

        server.mockEndpoint().post("/user/username").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.user.createUsername({
            tags: ["tags", "tags"],
            username: "username",
            password: "password",
            name: "test",
        });
        expect(response).toEqual(undefined);
    });

    test("createUsernameWithReferencedType", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedRequestParametersClient({ environment: server.baseUrl });
        const rawRequestBody = { username: "username", password: "password", name: "test" };

        server
            .mockEndpoint()
            .post("/user/username-referenced")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.user.createUsernameWithReferencedType({
            tags: ["tags", "tags"],
            body: {
                username: "username",
                password: "password",
                name: "test",
            },
        });
        expect(response).toEqual(undefined);
    });

    test("createAgent", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedRequestParametersClient({ environment: server.baseUrl });
        const rawRequestBody = {
            audio_speed: 1,
            boosted_keywords: ["Load ID", "dispatch"],
            configuration_endpoint: {
                headers: { Authorization: "Bearer token123" },
                timeout_ms: 7000,
                url: "https://api.example.com/config",
            },
            name: "support-agent",
            no_input_poke_sec: 30,
            no_input_poke_text: "Are you still there?",
            phone_number: "assign-automatically",
            system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
            template_variables: { customer_name: {}, subject: { default_value: "Chess" } },
            timezone: "America/Los_Angeles",
            tools: ["keypad_input"],
            voice_id: "sarah",
            welcome_message: "Hi {{customer_name}}. How can I help you today?",
        };
        const rawResponseBody = { id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783", name: "support-agent" };
        server
            .mockEndpoint()
            .post("/user/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.createAgent({
            project: "main",
            body: {
                audio_speed: 1,
                boosted_keywords: ["Load ID", "dispatch"],
                configuration_endpoint: {
                    headers: {
                        Authorization: "Bearer token123",
                    },
                    timeout_ms: 7000,
                    url: "https://api.example.com/config",
                },
                name: "support-agent",
                no_input_poke_sec: 30,
                no_input_poke_text: "Are you still there?",
                phone_number: "assign-automatically",
                system_prompt: "You are an expert in {{subject}}. Be friendly, helpful and concise.",
                template_variables: {
                    customer_name: {},
                    subject: {
                        default_value: "Chess",
                    },
                },
                timezone: "America/Los_Angeles",
                tools: ["keypad_input"],
                voice_id: "sarah",
                welcome_message: "Hi {{customer_name}}. How can I help you today?",
            },
        });
        expect(response).toEqual({
            id: "agent_12cf6e88-c254-4d3e-a149-a7f1bdd22783",
            name: "support-agent",
        });
    });

    test("getUsername", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedRequestParametersClient({ environment: server.baseUrl });

        const rawResponseBody = { name: "name", tags: ["tags", "tags"] };
        server.mockEndpoint().get("/user").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.getUsername({
            limit: 1,
            id: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            date: "2023-01-15",
            deadline: "2024-01-15T09:30:00Z",
            bytes: "SGVsbG8gd29ybGQh",
            user: {
                name: "name",
                tags: ["tags", "tags"],
            },
            userList: [
                {
                    name: "name",
                    tags: ["tags", "tags"],
                },
                {
                    name: "name",
                    tags: ["tags", "tags"],
                },
            ],
            optionalDeadline: "2024-01-15T09:30:00Z",
            keyValue: {
                keyValue: "keyValue",
            },
            optionalString: "optionalString",
            nestedUser: {
                name: "name",
                user: {
                    name: "name",
                    tags: ["tags", "tags"],
                },
            },
            optionalUser: {
                name: "name",
                tags: ["tags", "tags"],
            },
            excludeUser: {
                name: "name",
                tags: ["tags", "tags"],
            },
            filter: "filter",
            longParam: BigInt("1000000"),
            bigIntParam: BigInt("1000000"),
        });
        expect(response).toEqual({
            name: "name",
            tags: ["tags", "tags"],
        });
    });
});
