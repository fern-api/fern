/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Auth } from "./api/resources/auth/client/Client.js";

export declare namespace SeedOauthClientCredentialsClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        clientId: core.Supplier<string>;
        clientSecret: core.Supplier<string>;
        scope?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class SeedOauthClientCredentialsClient {
    protected readonly _options: SeedOauthClientCredentialsClient.Options;
    protected readonly _authProvider: core.AuthProvider;
    protected _auth: Auth | undefined;

    constructor(_options: SeedOauthClientCredentialsClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/oauth-client-credentials",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/oauth-client-credentials/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
        this._authProvider = new core.AuthProvider(this, { ...this._options });
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth({
            ...this._options,
            authProvider: this._authProvider,
        }));
    }
}
