/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedApiClient } from "../../src/Client";

describe("SeedApiClient", () => {
    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedApiClient({ environment: server.baseUrl });

        const rawResponseBody = { results: ["results", "results"] };
        server.mockEndpoint().get("/user/getUsername").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.search({
            limit: 1,
            id: "id",
            date: "date",
            deadline: "2024-01-15T09:30:00Z",
            bytes: "bytes",
            user: {
                name: "name",
                tags: ["tags", "tags"],
            },
            userList: {
                name: "name",
                tags: ["tags", "tags"],
            },
            optionalDeadline: "2024-01-15T09:30:00Z",
            keyValue: {
                keyValue: "keyValue",
            },
            optionalString: "optionalString",
            nestedUser: {
                name: "name",
                user: {
                    name: "name",
                    tags: ["tags", "tags"],
                },
            },
            optionalUser: {
                name: "name",
                tags: ["tags", "tags"],
            },
            excludeUser: {
                name: "name",
                tags: ["tags", "tags"],
            },
            filter: "filter",
            neighbor: {
                name: "name",
                tags: ["tags", "tags"],
            },
            neighborRequired: {
                name: "name",
                tags: ["tags", "tags"],
            },
        });
        expect(response).toEqual({
            results: ["results", "results"],
        });
    });
});
