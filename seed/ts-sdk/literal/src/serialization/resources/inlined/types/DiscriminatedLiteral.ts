/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as SeedLiteral from "../../../../api/index";
import * as core from "../../../../core";

export const DiscriminatedLiteral: core.serialization.Schema<
    serializers.DiscriminatedLiteral.Raw,
    SeedLiteral.DiscriminatedLiteral
> = core.serialization
    .union("type", {
        customName: core.serialization.object({
            value: core.serialization.string(),
        }),
        defaultName: core.serialization.object({
            value: core.serialization.stringLiteral("Bob"),
        }),
        george: core.serialization.object({
            value: core.serialization.boolean(),
        }),
        literalGeorge: core.serialization.object({
            value: core.serialization.booleanLiteral(true),
        }),
    })
    .transform<SeedLiteral.DiscriminatedLiteral>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace DiscriminatedLiteral {
    export type Raw =
        | DiscriminatedLiteral.CustomName
        | DiscriminatedLiteral.DefaultName
        | DiscriminatedLiteral.George
        | DiscriminatedLiteral.LiteralGeorge;

    export interface CustomName {
        type: "customName";
        value: string;
    }

    export interface DefaultName {
        type: "defaultName";
        value: "Bob";
    }

    export interface George {
        type: "george";
        value: boolean;
    }

    export interface LiteralGeorge {
        type: "literalGeorge";
        value: true;
    }
}
