// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as errors from "../../../../errors/index.js";
import type * as SeedLiteral from "../../../index.js";

export declare namespace Inlined {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Inlined {
    protected readonly _options: Inlined.Options;

    constructor(_options: Inlined.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedLiteral.SendLiteralsInlinedRequest} request
     * @param {Inlined.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.inlined.send({
     *         temperature: 10.1,
     *         context: "You're super wise",
     *         maybeContext: "You're super wise",
     *         objectWithLiteral: {
     *             nestedLiteral: {
     *                 myLiteral: "How super cool"
     *             }
     *         },
     *         query: "What is the weather today"
     *     })
     */
    public send(
        request: SeedLiteral.SendLiteralsInlinedRequest,
        requestOptions?: Inlined.RequestOptions,
    ): core.HttpResponsePromise<SeedLiteral.SendResponse> {
        return core.HttpResponsePromise.fromPromise(this.__send(request, requestOptions));
    }

    private async __send(
        request: SeedLiteral.SendLiteralsInlinedRequest,
        requestOptions?: Inlined.RequestOptions,
    ): Promise<core.WithRawResponse<SeedLiteral.SendResponse>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                "X-API-Version": requestOptions?.version ?? "02-02-2024",
                "X-API-Enable-Audit-Logging": (requestOptions?.auditLogging ?? true).toString(),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "inlined",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: {
                ...request,
                prompt: "You are a helpful assistant",
                stream: false,
                aliasedContext: "You're super wise",
            },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedLiteral.SendResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedLiteralError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedLiteralError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedLiteralTimeoutError("Timeout exceeded when calling POST /inlined.");
            case "unknown":
                throw new errors.SeedLiteralError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
