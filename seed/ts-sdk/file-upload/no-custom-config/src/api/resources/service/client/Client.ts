/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as SeedFileUpload from "../../../index.js";
import { toJson } from "../../../../core/json.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import urlJoin from "url-join";

export declare namespace Service {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Service {
    protected readonly _options: Service.Options;

    constructor(_options: Service.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedFileUpload.MyRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public post(
        request: SeedFileUpload.MyRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__post(request, requestOptions));
    }

    private async __post(
        request: SeedFileUpload.MyRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _request = await core.newFormData();
        if (request.maybe_string != null) {
            _request.append("maybe_string", request.maybe_string);
        }

        _request.append("integer", request.integer.toString());
        await _request.appendFile("file", request.file);
        for (const _file of request.file_list) {
            await _request.appendFile("file_list", _file);
        }

        if (request.maybe_file != null) {
            await _request.appendFile("maybe_file", request.maybe_file);
        }

        if (request.maybe_file_list != null) {
            for (const _file of request.maybe_file_list) {
                await _request.appendFile("maybe_file_list", _file);
            }
        }

        if (request.maybe_integer != null) {
            _request.append("maybe_integer", request.maybe_integer.toString());
        }

        if (request.optional_list_of_strings != null) {
            for (const _item of request.optional_list_of_strings) {
                _request.append("optional_list_of_strings", _item);
            }
        }

        for (const _item of request.list_of_objects) {
            _request.append("list_of_objects", toJson(_item));
        }

        if (request.optional_metadata != null) {
            if (Array.isArray(request.optional_metadata) || request.optional_metadata instanceof Set)
                for (const _item of request.optional_metadata) {
                    _request.append("optional_metadata", typeof _item === "string" ? _item : toJson(_item));
                }
        }

        if (request.optional_object_type != null) {
            _request.append("optional_object_type", request.optional_object_type);
        }

        if (request.optional_id != null) {
            _request.append("optional_id", request.optional_id);
        }

        _request.append("alias_object", toJson(request.alias_object));
        for (const _item of request.list_of_alias_object) {
            _request.append("list_of_alias_object", toJson(_item));
        }

        for (const _item of request.alias_list_of_object) {
            _request.append("alias_list_of_object", toJson(_item));
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url:
                (await core.Supplier.get(this._options.baseUrl)) ??
                (await core.Supplier.get(this._options.environment)),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedFileUpload.JustFileRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public justFile(
        request: SeedFileUpload.JustFileRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__justFile(request, requestOptions));
    }

    private async __justFile(
        request: SeedFileUpload.JustFileRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/just-file",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /just-file.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedFileUpload.JustFileWithQueryParamsRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public justFileWithQueryParams(
        request: SeedFileUpload.JustFileWithQueryParamsRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__justFileWithQueryParams(request, requestOptions));
    }

    private async __justFileWithQueryParams(
        request: SeedFileUpload.JustFileWithQueryParamsRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (request.maybeString != null) {
            _queryParams["maybeString"] = request.maybeString;
        }

        _queryParams["integer"] = request.integer.toString();
        if (request.maybeInteger != null) {
            _queryParams["maybeInteger"] = request.maybeInteger.toString();
        }

        if (Array.isArray(request.listOfStrings)) {
            _queryParams["listOfStrings"] = request.listOfStrings.map((item) => item);
        } else {
            _queryParams["listOfStrings"] = request.listOfStrings;
        }

        if (request.optionalListOfStrings != null) {
            if (Array.isArray(request.optionalListOfStrings)) {
                _queryParams["optionalListOfStrings"] = request.optionalListOfStrings.map((item) => item);
            } else {
                _queryParams["optionalListOfStrings"] = request.optionalListOfStrings;
            }
        }

        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/just-file-with-query-params",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError(
                    "Timeout exceeded when calling POST /just-file-with-query-params.",
                );
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedFileUpload.WithContentTypeRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public withContentType(
        request: SeedFileUpload.WithContentTypeRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__withContentType(request, requestOptions));
    }

    private async __withContentType(
        request: SeedFileUpload.WithContentTypeRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        _request.append("foo", request.foo);
        _request.append("bar", toJson(request.bar));
        if (request.foo_bar != null) {
            _request.append("foo_bar", toJson(request.foo_bar));
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/with-content-type",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /with-content-type.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedFileUpload.WithFormEncodingRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public withFormEncoding(
        request: SeedFileUpload.WithFormEncodingRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__withFormEncoding(request, requestOptions));
    }

    private async __withFormEncoding(
        request: SeedFileUpload.WithFormEncodingRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ foo: request.foo }))) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ bar: request.bar }))) {
            _request.append(key, value);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/with-form-encoding",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /with-form-encoding.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedFileUpload.MyOtherRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public withFormEncodedContainers(
        request: SeedFileUpload.MyOtherRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__withFormEncodedContainers(request, requestOptions));
    }

    private async __withFormEncodedContainers(
        request: SeedFileUpload.MyOtherRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _request = await core.newFormData();
        if (request.maybe_string != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ maybe_string: request.maybe_string }),
            )) {
                _request.append(key, value);
            }
        }

        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ integer: request.integer }))) {
            _request.append(key, value);
        }

        await _request.appendFile("file", request.file);
        for (const _file of request.file_list) {
            await _request.appendFile("file_list", _file);
        }

        if (request.maybe_file != null) {
            await _request.appendFile("maybe_file", request.maybe_file);
        }

        if (request.maybe_file_list != null) {
            for (const _file of request.maybe_file_list) {
                await _request.appendFile("maybe_file_list", _file);
            }
        }

        if (request.maybe_integer != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ maybe_integer: request.maybe_integer }),
            )) {
                _request.append(key, value);
            }
        }

        if (request.optional_list_of_strings != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_list_of_strings: request.optional_list_of_strings }),
            )) {
                _request.append(key, value);
            }
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ list_of_objects: request.list_of_objects }),
        )) {
            _request.append(key, value);
        }

        if (request.optional_metadata != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_metadata: request.optional_metadata }),
            )) {
                _request.append(key, value);
            }
        }

        if (request.optional_object_type != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_object_type: request.optional_object_type }),
            )) {
                _request.append(key, value);
            }
        }

        if (request.optional_id != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_id: request.optional_id }),
            )) {
                _request.append(key, value);
            }
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ list_of_objects_with_optionals: request.list_of_objects_with_optionals }),
        )) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ alias_object: request.alias_object }))) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ list_of_alias_object: request.list_of_alias_object }),
        )) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ alias_list_of_object: request.alias_list_of_object }),
        )) {
            _request.append(key, value);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url:
                (await core.Supplier.get(this._options.baseUrl)) ??
                (await core.Supplier.get(this._options.environment)),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedFileUpload.OptionalArgsRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public optionalArgs(
        request: SeedFileUpload.OptionalArgsRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(this.__optionalArgs(request, requestOptions));
    }

    private async __optionalArgs(
        request: SeedFileUpload.OptionalArgsRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        const _request = await core.newFormData();
        if (request.image_file != null) {
            await _request.appendFile("image_file", request.image_file);
        }

        if (request.request != null) {
            if (Array.isArray(request.request) || request.request instanceof Set)
                for (const _item of request.request) {
                    _request.append("request", typeof _item === "string" ? _item : toJson(_item));
                }
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/optional-args",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /optional-args.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
