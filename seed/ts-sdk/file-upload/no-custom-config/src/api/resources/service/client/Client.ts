/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as fs from "fs";
import { Blob } from "buffer";
import * as SeedFileUpload from "../../../index";
import * as serializers from "../../../../serialization/index";
import { toJson } from "../../../../core/json";
import * as errors from "../../../../errors/index";
import urlJoin from "url-join";

export declare namespace Service {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Service {
    constructor(protected readonly _options: Service.Options) {}

    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {File[] | fs.ReadStream[] | Blob[]} fileList
     * @param {File | fs.ReadStream | Blob | undefined} maybeFile
     * @param {File[] | fs.ReadStream[] | Blob[] | undefined} maybeFileList
     * @param {SeedFileUpload.MyRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async post(
        file: File | fs.ReadStream | Blob,
        fileList: File[] | fs.ReadStream[] | Blob[],
        maybeFile: File | fs.ReadStream | Blob | undefined,
        maybeFileList: File[] | fs.ReadStream[] | Blob[] | undefined,
        request: SeedFileUpload.MyRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<void> {
        const _request = await core.newFormData();
        if (request.maybeString != null) {
            _request.append("maybe_string", request.maybeString);
        }

        _request.append("integer", request.integer.toString());
        await _request.appendFile("file", file);
        for (const _file of fileList) {
            await _request.appendFile("file_list", _file);
        }

        if (maybeFile != null) {
            await _request.appendFile("maybe_file", maybeFile);
        }

        if (maybeFileList != null) {
            for (const _file of maybeFileList) {
                await _request.appendFile("maybe_file_list", _file);
            }
        }

        if (request.maybeInteger != null) {
            _request.append("maybe_integer", request.maybeInteger.toString());
        }

        if (request.optionalListOfStrings != null) {
            for (const _item of request.optionalListOfStrings) {
                _request.append("optional_list_of_strings", _item);
            }
        }

        for (const _item of request.listOfObjects) {
            _request.append(
                "list_of_objects",
                toJson(serializers.MyObject.jsonOrThrow(_item, { unrecognizedObjectKeys: "strip" })),
            );
        }

        if (request.optionalMetadata != null) {
            if (Array.isArray(request.optionalMetadata) || request.optionalMetadata instanceof Set)
                for (const _item of request.optionalMetadata) {
                    _request.append("optional_metadata", typeof _item === "string" ? _item : toJson(_item));
                }
        }

        if (request.optionalObjectType != null) {
            _request.append(
                "optional_object_type",
                serializers.ObjectType.jsonOrThrow(request.optionalObjectType, { unrecognizedObjectKeys: "strip" }),
            );
        }

        if (request.optionalId != null) {
            _request.append(
                "optional_id",
                serializers.Id.jsonOrThrow(request.optionalId, { unrecognizedObjectKeys: "strip" }),
            );
        }

        _request.append(
            "alias_object",
            toJson(serializers.MyAliasObject.jsonOrThrow(request.aliasObject, { unrecognizedObjectKeys: "strip" })),
        );
        for (const _item of request.listOfAliasObject) {
            _request.append(
                "list_of_alias_object",
                toJson(serializers.MyAliasObject.jsonOrThrow(_item, { unrecognizedObjectKeys: "strip" })),
            );
        }

        for (const _item of request.aliasListOfObject) {
            _request.append(
                "alias_list_of_object",
                toJson(serializers.MyObject.jsonOrThrow(_item, { unrecognizedObjectKeys: "strip" })),
            );
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url:
                (await core.Supplier.get(this._options.baseUrl)) ??
                (await core.Supplier.get(this._options.environment)),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/file-upload",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/file-upload/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async justFile(file: File | fs.ReadStream | Blob, requestOptions?: Service.RequestOptions): Promise<void> {
        const _request = await core.newFormData();
        await _request.appendFile("file", file);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/just-file",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/file-upload",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/file-upload/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /just-file.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {SeedFileUpload.JustFileWithQueryParamsRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async justFileWithQueryParams(
        file: File | fs.ReadStream | Blob,
        request: SeedFileUpload.JustFileWithQueryParamsRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<void> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (request.maybeString != null) {
            _queryParams["maybeString"] = request.maybeString;
        }

        _queryParams["integer"] = request.integer.toString();
        if (request.maybeInteger != null) {
            _queryParams["maybeInteger"] = request.maybeInteger.toString();
        }

        if (Array.isArray(request.listOfStrings)) {
            _queryParams["listOfStrings"] = request.listOfStrings.map((item) => item);
        } else {
            _queryParams["listOfStrings"] = request.listOfStrings;
        }

        if (request.optionalListOfStrings != null) {
            if (Array.isArray(request.optionalListOfStrings)) {
                _queryParams["optionalListOfStrings"] = request.optionalListOfStrings.map((item) => item);
            } else {
                _queryParams["optionalListOfStrings"] = request.optionalListOfStrings;
            }
        }

        const _request = await core.newFormData();
        await _request.appendFile("file", file);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/just-file-with-query-params",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/file-upload",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/file-upload/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError(
                    "Timeout exceeded when calling POST /just-file-with-query-params.",
                );
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {SeedFileUpload.WithContentTypeRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async withContentType(
        file: File | fs.ReadStream | Blob,
        request: SeedFileUpload.WithContentTypeRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<void> {
        const _request = await core.newFormData();
        await _request.appendFile("file", file);
        _request.append("foo", request.foo);
        _request.append(
            "bar",
            toJson(serializers.MyObject.jsonOrThrow(request.bar, { unrecognizedObjectKeys: "strip" })),
        );
        if (request.fooBar != null) {
            _request.append(
                "foo_bar",
                toJson(serializers.MyObject.jsonOrThrow(request.fooBar, { unrecognizedObjectKeys: "strip" })),
            );
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/with-content-type",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/file-upload",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/file-upload/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /with-content-type.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {SeedFileUpload.WithFormEncodingRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async withFormEncoding(
        file: File | fs.ReadStream | Blob,
        request: SeedFileUpload.WithFormEncodingRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<void> {
        const _request = await core.newFormData();
        await _request.appendFile("file", file);
        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ foo: request.foo }))) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ bar: request.bar }))) {
            _request.append(key, value);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/with-form-encoding",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/file-upload",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/file-upload/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /with-form-encoding.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob} file
     * @param {File[] | fs.ReadStream[] | Blob[]} fileList
     * @param {File | fs.ReadStream | Blob | undefined} maybeFile
     * @param {File[] | fs.ReadStream[] | Blob[] | undefined} maybeFileList
     * @param {SeedFileUpload.MyOtherRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async withFormEncodedContainers(
        file: File | fs.ReadStream | Blob,
        fileList: File[] | fs.ReadStream[] | Blob[],
        maybeFile: File | fs.ReadStream | Blob | undefined,
        maybeFileList: File[] | fs.ReadStream[] | Blob[] | undefined,
        request: SeedFileUpload.MyOtherRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<void> {
        const _request = await core.newFormData();
        if (request.maybeString != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ maybe_string: request.maybeString }),
            )) {
                _request.append(key, value);
            }
        }

        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ integer: request.integer }))) {
            _request.append(key, value);
        }

        await _request.appendFile("file", file);
        for (const _file of fileList) {
            await _request.appendFile("file_list", _file);
        }

        if (maybeFile != null) {
            await _request.appendFile("maybe_file", maybeFile);
        }

        if (maybeFileList != null) {
            for (const _file of maybeFileList) {
                await _request.appendFile("maybe_file_list", _file);
            }
        }

        if (request.maybeInteger != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ maybe_integer: request.maybeInteger }),
            )) {
                _request.append(key, value);
            }
        }

        if (request.optionalListOfStrings != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_list_of_strings: request.optionalListOfStrings }),
            )) {
                _request.append(key, value);
            }
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ list_of_objects: request.listOfObjects }),
        )) {
            _request.append(key, value);
        }

        if (request.optionalMetadata != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_metadata: request.optionalMetadata }),
            )) {
                _request.append(key, value);
            }
        }

        if (request.optionalObjectType != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_object_type: request.optionalObjectType }),
            )) {
                _request.append(key, value);
            }
        }

        if (request.optionalId != null) {
            for (const [key, value] of Object.entries(
                core.encodeAsFormParameter({ optional_id: request.optionalId }),
            )) {
                _request.append(key, value);
            }
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ list_of_objects_with_optionals: request.listOfObjectsWithOptionals }),
        )) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(core.encodeAsFormParameter({ alias_object: request.aliasObject }))) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ list_of_alias_object: request.listOfAliasObject }),
        )) {
            _request.append(key, value);
        }

        for (const [key, value] of Object.entries(
            core.encodeAsFormParameter({ alias_list_of_object: request.aliasListOfObject }),
        )) {
            _request.append(key, value);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url:
                (await core.Supplier.get(this._options.baseUrl)) ??
                (await core.Supplier.get(this._options.environment)),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/file-upload",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/file-upload/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @param {File | fs.ReadStream | Blob | undefined} imageFile
     * @param {SeedFileUpload.OptionalArgsRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     */
    public async optionalArgs(
        imageFile: File | fs.ReadStream | Blob | undefined,
        request: SeedFileUpload.OptionalArgsRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<string> {
        const _request = await core.newFormData();
        if (imageFile != null) {
            await _request.appendFile("image_file", imageFile);
        }

        if (request.request != null) {
            if (Array.isArray(request.request) || request.request instanceof Set)
                for (const _item of request.request) {
                    _request.append("request", typeof _item === "string" ? _item : toJson(_item));
                }
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/optional-args",
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/file-upload",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/file-upload/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.service.optionalArgs.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedFileUploadError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedFileUploadError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SeedFileUploadTimeoutError("Timeout exceeded when calling POST /optional-args.");
            case "unknown":
                throw new errors.SeedFileUploadError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
