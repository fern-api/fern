// This file was auto-generated by Fern from our API Definition.

import { BaseClientOptions, BaseRequestOptions } from "./BaseClient.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import * as SeedApi from "./api/index.js";
import * as errors from "./errors/index.js";

export declare namespace SeedApiClient {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class SeedApiClient {
    protected readonly _options: SeedApiClient.Options;

    constructor(_options: SeedApiClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/required-nullable",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/required-nullable/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    /**
     * @param {SeedApi.GetFooRequest} request
     * @param {SeedApiClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.getFoo({
     *         required_baz: "required_baz",
     *         required_nullable_baz: "required_nullable_baz"
     *     })
     */
    public getFoo(
        request: SeedApi.GetFooRequest,
        requestOptions?: SeedApiClient.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.Foo> {
        return core.HttpResponsePromise.fromPromise(this.__getFoo(request, requestOptions));
    }

    private async __getFoo(
        request: SeedApi.GetFooRequest,
        requestOptions?: SeedApiClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.Foo>> {
        const {
            optional_baz: optionalBaz,
            optional_nullable_baz: optionalNullableBaz,
            required_baz: requiredBaz,
            required_nullable_baz: requiredNullableBaz,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (optionalBaz != null) {
            _queryParams["optional_baz"] = optionalBaz;
        }

        if (optionalNullableBaz !== undefined) {
            _queryParams["optional_nullable_baz"] = optionalNullableBaz;
        }

        _queryParams["required_baz"] = requiredBaz;
        if (requiredNullableBaz !== undefined) {
            _queryParams["required_nullable_baz"] = requiredNullableBaz;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "foo",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedApi.Foo, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling GET /foo.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
