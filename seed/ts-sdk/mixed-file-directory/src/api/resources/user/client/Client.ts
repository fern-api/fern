// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as errors from "../../../../errors/index.js";
import type * as SeedMixedFileDirectory from "../../../index.js";
import { Events } from "../resources/events/client/Client.js";

export declare namespace User {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class User {
    protected readonly _options: User.Options;
    protected _events: Events | undefined;

    constructor(_options: User.Options) {
        this._options = _options;
    }

    public get events(): Events {
        return (this._events ??= new Events(this._options));
    }

    /**
     * List all users.
     *
     * @param {SeedMixedFileDirectory.ListUsersRequest} request
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.user.list({
     *         limit: 1
     *     })
     */
    public list(
        request: SeedMixedFileDirectory.ListUsersRequest = {},
        requestOptions?: User.RequestOptions,
    ): core.HttpResponsePromise<SeedMixedFileDirectory.User[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: SeedMixedFileDirectory.ListUsersRequest = {},
        requestOptions?: User.RequestOptions,
    ): Promise<core.WithRawResponse<SeedMixedFileDirectory.User[]>> {
        const { limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams.limit = limit.toString();
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/users/",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedMixedFileDirectory.User[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedMixedFileDirectoryError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedMixedFileDirectoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedMixedFileDirectoryTimeoutError("Timeout exceeded when calling GET /users/.");
            case "unknown":
                throw new errors.SeedMixedFileDirectoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
