// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient.js";
import * as core from "../../../../../../core/index.js";
import * as SeedMixedFileDirectory from "../../../../../index.js";
import { mergeHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";
import { Metadata } from "../resources/metadata/client/Client.js";

export declare namespace Events {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Events {
    protected readonly _options: Events.Options;
    protected _metadata: Metadata | undefined;

    constructor(_options: Events.Options) {
        this._options = _options;
    }

    public get metadata(): Metadata {
        return (this._metadata ??= new Metadata(this._options));
    }

    /**
     * List all user events.
     *
     * @param {SeedMixedFileDirectory.user.ListUserEventsRequest} request
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.user.events.listEvents({
     *         limit: 1
     *     })
     */
    public listEvents(
        request: SeedMixedFileDirectory.user.ListUserEventsRequest = {},
        requestOptions?: Events.RequestOptions,
    ): core.HttpResponsePromise<SeedMixedFileDirectory.user.Event[]> {
        return core.HttpResponsePromise.fromPromise(this.__listEvents(request, requestOptions));
    }

    private async __listEvents(
        request: SeedMixedFileDirectory.user.ListUserEventsRequest = {},
        requestOptions?: Events.RequestOptions,
    ): Promise<core.WithRawResponse<SeedMixedFileDirectory.user.Event[]>> {
        const { limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/users/events/",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedMixedFileDirectory.user.Event[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedMixedFileDirectoryError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedMixedFileDirectoryError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedMixedFileDirectoryTimeoutError(
                    "Timeout exceeded when calling GET /users/events/.",
                );
            case "unknown":
                throw new errors.SeedMixedFileDirectoryError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
