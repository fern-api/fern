// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as core from "../../../../core/index.js";
import * as SeedCustomAuth from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace CustomAuth {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class CustomAuth {
    protected readonly _options: CustomAuth.Options;

    constructor(_options: CustomAuth.Options) {
        this._options = _options;
    }

    /**
     * GET request with custom auth scheme
     *
     * @param {CustomAuth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SeedCustomAuth.UnauthorizedRequest}
     *
     * @example
     *     await client.customAuth.getWithCustomAuth()
     */
    public getWithCustomAuth(requestOptions?: CustomAuth.RequestOptions): core.HttpResponsePromise<boolean> {
        return core.HttpResponsePromise.fromPromise(this.__getWithCustomAuth(requestOptions));
    }

    private async __getWithCustomAuth(
        requestOptions?: CustomAuth.RequestOptions,
    ): Promise<core.WithRawResponse<boolean>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "custom-auth",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as boolean, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SeedCustomAuth.UnauthorizedRequest(
                        _response.error.body as SeedCustomAuth.UnauthorizedRequestErrorBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SeedCustomAuthError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedCustomAuthError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedCustomAuthTimeoutError("Timeout exceeded when calling GET /custom-auth.");
            case "unknown":
                throw new errors.SeedCustomAuthError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * POST request with custom auth scheme
     *
     * @param {unknown} request
     * @param {CustomAuth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SeedCustomAuth.UnauthorizedRequest}
     * @throws {@link SeedCustomAuth.BadRequest}
     *
     * @example
     *     await client.customAuth.postWithCustomAuth({
     *         "key": "value"
     *     })
     */
    public postWithCustomAuth(
        request?: unknown,
        requestOptions?: CustomAuth.RequestOptions,
    ): core.HttpResponsePromise<boolean> {
        return core.HttpResponsePromise.fromPromise(this.__postWithCustomAuth(request, requestOptions));
    }

    private async __postWithCustomAuth(
        request?: unknown,
        requestOptions?: CustomAuth.RequestOptions,
    ): Promise<core.WithRawResponse<boolean>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "custom-auth",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as boolean, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SeedCustomAuth.UnauthorizedRequest(
                        _response.error.body as SeedCustomAuth.UnauthorizedRequestErrorBody,
                        _response.rawResponse,
                    );
                case 400:
                    throw new SeedCustomAuth.BadRequest(_response.rawResponse);
                default:
                    throw new errors.SeedCustomAuthError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedCustomAuthError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedCustomAuthTimeoutError("Timeout exceeded when calling POST /custom-auth.");
            case "unknown":
                throw new errors.SeedCustomAuthError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders(): Promise<Record<string, string | undefined>> {
        const customAuthSchemeValue = await core.Supplier.get(this._options.customAuthScheme);
        return { "X-API-KEY": customAuthSchemeValue };
    }
}
