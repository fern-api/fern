/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedPathParametersClient } from "../../src/Client";

describe("User", () => {
    test("getUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPathParametersClient({ tenantId: "tenant_id", environment: server.baseUrl });

        const rawResponseBody = { name: "name", tags: ["tags", "tags"] };
        server
            .mockEndpoint()
            .get("/tenant_id/user/user_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.getUser({
            userId: "user_id",
        });
        expect(response).toEqual({
            name: "name",
            tags: ["tags", "tags"],
        });
    });

    test("createUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPathParametersClient({ tenantId: "tenant_id", environment: server.baseUrl });
        const rawRequestBody = { name: "name", tags: ["tags", "tags"] };
        const rawResponseBody = { name: "name", tags: ["tags", "tags"] };
        server
            .mockEndpoint()
            .post("/tenant_id/user/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.createUser({
            name: "name",
            tags: ["tags", "tags"],
        });
        expect(response).toEqual({
            name: "name",
            tags: ["tags", "tags"],
        });
    });

    test("updateUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPathParametersClient({ tenantId: "tenant_id", environment: server.baseUrl });
        const rawRequestBody = { name: "name", tags: ["tags", "tags"] };
        const rawResponseBody = { name: "name", tags: ["tags", "tags"] };
        server
            .mockEndpoint()
            .patch("/tenant_id/user/user_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.updateUser({
            userId: "user_id",
            body: {
                name: "name",
                tags: ["tags", "tags"],
            },
        });
        expect(response).toEqual({
            name: "name",
            tags: ["tags", "tags"],
        });
    });

    test("searchUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedPathParametersClient({ tenantId: "tenant_id", environment: server.baseUrl });

        const rawResponseBody = [
            { name: "name", tags: ["tags", "tags"] },
            { name: "name", tags: ["tags", "tags"] },
        ];
        server
            .mockEndpoint()
            .get("/tenant_id/user/user_id/search")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.searchUsers({
            userId: "user_id",
            limit: 1,
        });
        expect(response).toEqual([
            {
                name: "name",
                tags: ["tags", "tags"],
            },
            {
                name: "name",
                tags: ["tags", "tags"],
            },
        ]);
    });
});
