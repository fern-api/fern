/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as SeedPathParameters from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Organizations {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        tenant_id: string;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Organizations {
    constructor(protected readonly _options: Organizations.Options) {}

    /**
     * @param {string} organization_id
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizations.getOrganization("organization_id")
     */
    public getOrganization(
        organization_id: string,
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<SeedPathParameters.Organization> {
        return core.HttpResponsePromise.fromPromise(this.__getOrganization(organization_id, requestOptions));
    }

    private async __getOrganization(
        organization_id: string,
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<SeedPathParameters.Organization>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/${encodeURIComponent(this._options.tenant_id)}/organizations/${encodeURIComponent(organization_id)}/`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/path-parameters",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/path-parameters/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.Organization.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedPathParametersError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedPathParametersError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedPathParametersTimeoutError(
                    "Timeout exceeded when calling GET /{tenant_id}/organizations/{organization_id}/.",
                );
            case "unknown":
                throw new errors.SeedPathParametersError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} organization_id
     * @param {string} user_id
     * @param {SeedPathParameters.GetOrganizationUserRequest} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizations.getOrganizationUser("organization_id", "user_id")
     */
    public getOrganizationUser(
        organization_id: string,
        user_id: string,
        request: SeedPathParameters.GetOrganizationUserRequest = {},
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<SeedPathParameters.User> {
        return core.HttpResponsePromise.fromPromise(
            this.__getOrganizationUser(organization_id, user_id, request, requestOptions),
        );
    }

    private async __getOrganizationUser(
        organization_id: string,
        user_id: string,
        request: SeedPathParameters.GetOrganizationUserRequest = {},
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<SeedPathParameters.User>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/${encodeURIComponent(this._options.tenant_id)}/organizations/${encodeURIComponent(organization_id)}/users/${encodeURIComponent(user_id)}`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/path-parameters",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/path-parameters/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.User.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedPathParametersError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedPathParametersError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedPathParametersTimeoutError(
                    "Timeout exceeded when calling GET /{tenant_id}/organizations/{organization_id}/users/{user_id}.",
                );
            case "unknown":
                throw new errors.SeedPathParametersError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} organization_id
     * @param {SeedPathParameters.SearchOrganizationsRequest} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.organizations.searchOrganizations("organization_id", {
     *         limit: 1
     *     })
     */
    public searchOrganizations(
        organization_id: string,
        request: SeedPathParameters.SearchOrganizationsRequest = {},
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<SeedPathParameters.Organization[]> {
        return core.HttpResponsePromise.fromPromise(
            this.__searchOrganizations(organization_id, request, requestOptions),
        );
    }

    private async __searchOrganizations(
        organization_id: string,
        request: SeedPathParameters.SearchOrganizationsRequest = {},
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<SeedPathParameters.Organization[]>> {
        const { limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/${encodeURIComponent(this._options.tenant_id)}/organizations/${encodeURIComponent(organization_id)}/search`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/path-parameters",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/path-parameters/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.organizations.searchOrganizations.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedPathParametersError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedPathParametersError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedPathParametersTimeoutError(
                    "Timeout exceeded when calling GET /{tenant_id}/organizations/{organization_id}/search.",
                );
            case "unknown":
                throw new errors.SeedPathParametersError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
