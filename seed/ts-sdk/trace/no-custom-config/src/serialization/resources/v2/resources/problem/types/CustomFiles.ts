/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as SeedTrace from "../../../../../../api";
import * as core from "../../../../../../core";

export const CustomFiles: core.serialization.Schema<serializers.v2.CustomFiles.Raw, SeedTrace.v2.CustomFiles> =
    core.serialization
        .union("type", {
            basic: core.serialization.lazyObject(async () => (await import("../../../../..")).v2.BasicCustomFiles),
            custom: core.serialization.object({
                value: core.serialization.record(
                    core.serialization.lazy(async () => (await import("../../../../..")).Language),
                    core.serialization.lazyObject(async () => (await import("../../../../..")).v2.Files).optional()
                ),
            }),
        })
        .transform<SeedTrace.v2.CustomFiles>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace CustomFiles {
    type Raw = CustomFiles.Basic | CustomFiles.Custom;

    interface Basic extends serializers.v2.BasicCustomFiles.Raw {
        type: "basic";
    }

    interface Custom {
        type: "custom";
        value: Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
    }
}
