/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as SeedTrace from "../../../../../../api";
import * as core from "../../../../../../core";

export const ProblemInfoV2: core.serialization.ObjectSchema<
    serializers.v2.ProblemInfoV2.Raw,
    SeedTrace.v2.ProblemInfoV2
> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import("../../../../..")).ProblemId),
    problemDescription: core.serialization.lazyObject(async () => (await import("../../../../..")).ProblemDescription),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    supportedLanguages: core.serialization.set(
        core.serialization.lazy(async () => (await import("../../../../..")).Language)
    ),
    customFiles: core.serialization.lazy(async () => (await import("../../../../..")).v2.CustomFiles),
    generatedFiles: core.serialization.lazyObject(async () => (await import("../../../../..")).v2.GeneratedFiles),
    customTestCaseTemplates: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).v2.TestCaseTemplate)
    ),
    testcases: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../..")).v2.TestCaseV2)
    ),
    isPublic: core.serialization.boolean(),
});

export declare namespace ProblemInfoV2 {
    interface Raw {
        problemId: serializers.ProblemId.Raw;
        problemDescription: serializers.ProblemDescription.Raw;
        problemName: string;
        problemVersion: number;
        supportedLanguages: serializers.Language.Raw[];
        customFiles: serializers.v2.CustomFiles.Raw;
        generatedFiles: serializers.v2.GeneratedFiles.Raw;
        customTestCaseTemplates: serializers.v2.TestCaseTemplate.Raw[];
        testcases: serializers.v2.TestCaseV2.Raw[];
        isPublic: boolean;
    }
}
