/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SeedTrace from "../../../../api";
import * as core from "../../../../core";

export const WorkspaceSubmissionStatus: core.serialization.Schema<
    serializers.WorkspaceSubmissionStatus.Raw,
    SeedTrace.WorkspaceSubmissionStatus
> = core.serialization
    .union("type", {
        stopped: core.serialization.object({}),
        errored: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).ErrorInfo),
        }),
        running: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).RunningSubmissionState),
        }),
        ran: core.serialization.lazyObject(async () => (await import("../../..")).WorkspaceRunDetails),
        traced: core.serialization.lazyObject(async () => (await import("../../..")).WorkspaceRunDetails),
    })
    .transform<SeedTrace.WorkspaceSubmissionStatus>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkspaceSubmissionStatus {
    type Raw =
        | WorkspaceSubmissionStatus.Stopped
        | WorkspaceSubmissionStatus.Errored
        | WorkspaceSubmissionStatus.Running
        | WorkspaceSubmissionStatus.Ran
        | WorkspaceSubmissionStatus.Traced;

    interface Stopped {
        type: "stopped";
    }

    interface Errored {
        type: "errored";
        value: serializers.ErrorInfo.Raw;
    }

    interface Running {
        type: "running";
        value: serializers.RunningSubmissionState.Raw;
    }

    interface Ran extends serializers.WorkspaceRunDetails.Raw {
        type: "ran";
    }

    interface Traced extends serializers.WorkspaceRunDetails.Raw {
        type: "traced";
    }
}
