/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SeedTrace from "../../../../api";
import * as core from "../../../../core";

export const ActualResult: core.serialization.Schema<serializers.ActualResult.Raw, SeedTrace.ActualResult> =
    core.serialization
        .union("type", {
            value: core.serialization.object({
                value: core.serialization.lazy(async () => (await import("../../..")).VariableValue),
            }),
            exception: core.serialization.lazyObject(async () => (await import("../../..")).ExceptionInfo),
            exceptionV2: core.serialization.object({
                value: core.serialization.lazy(async () => (await import("../../..")).ExceptionV2),
            }),
        })
        .transform<SeedTrace.ActualResult>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace ActualResult {
    type Raw = ActualResult.Value | ActualResult.Exception | ActualResult.ExceptionV2;

    interface Value {
        type: "value";
        value: serializers.VariableValue.Raw;
    }

    interface Exception extends serializers.ExceptionInfo.Raw {
        type: "exception";
    }

    interface ExceptionV2 {
        type: "exceptionV2";
        value: serializers.ExceptionV2.Raw;
    }
}
