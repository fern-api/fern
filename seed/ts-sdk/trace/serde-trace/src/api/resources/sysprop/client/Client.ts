// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as SeedTrace from "../../../index.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as errors from "../../../../errors/index.js";
import * as serializers from "../../../../serialization/index.js";
import type * as SeedTrace from "../../../index.js";

export declare namespace Sysprop {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Sysprop {
    protected readonly _options: Sysprop.Options;

    constructor(_options: Sysprop.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {SeedTrace.Language} language
     * @param {number} numWarmInstances
     * @param {Sysprop.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sysprop.setNumWarmInstances("JAVA", 1)
     */
    public setNumWarmInstances(
        language: SeedTrace.Language,
        numWarmInstances: number,
        requestOptions?: Sysprop.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(
            this.__setNumWarmInstances(language, numWarmInstances, requestOptions),
        );
    }

    private async __setNumWarmInstances(
        language: SeedTrace.Language,
        numWarmInstances: number,
        requestOptions?: Sysprop.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header": requestOptions?.xRandomHeader ?? this._options?.xRandomHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/sysprop/num-warm-instances/${encodeURIComponent(serializers.Language.jsonOrThrow(language, { omitUndefined: true }))}/${encodeURIComponent(numWarmInstances)}`,
            ),
            method: "PUT",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedTraceError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedTraceError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedTraceTimeoutError(
                    "Timeout exceeded when calling PUT /sysprop/num-warm-instances/{language}/{numWarmInstances}.",
                );
            case "unknown":
                throw new errors.SeedTraceError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {Sysprop.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.sysprop.getNumWarmInstances()
     */
    public getNumWarmInstances(
        requestOptions?: Sysprop.RequestOptions,
    ): core.HttpResponsePromise<Record<SeedTrace.Language, number | undefined>> {
        return core.HttpResponsePromise.fromPromise(this.__getNumWarmInstances(requestOptions));
    }

    private async __getNumWarmInstances(
        requestOptions?: Sysprop.RequestOptions,
    ): Promise<core.WithRawResponse<Record<SeedTrace.Language, number | undefined>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header": requestOptions?.xRandomHeader ?? this._options?.xRandomHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                "/sysprop/num-warm-instances",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.sysprop.getNumWarmInstances.Response.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedTraceError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedTraceError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedTraceTimeoutError(
                    "Timeout exceeded when calling GET /sysprop/num-warm-instances.",
                );
            case "unknown":
                throw new errors.SeedTraceError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
