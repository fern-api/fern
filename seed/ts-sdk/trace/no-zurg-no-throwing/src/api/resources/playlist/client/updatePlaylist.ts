/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedTrace from "../../..";
import * as core from "../../../../core";

export type Error =
    | SeedTrace.playlist.updatePlaylist.Error.PlaylistIdNotFoundError
    | SeedTrace.playlist.updatePlaylist.Error._Unknown;

export declare namespace Error {
    interface PlaylistIdNotFoundError {
        errorName: "PlaylistIdNotFoundError";
        content: SeedTrace.PlaylistIdNotFoundErrorBody;
    }

    interface _Unknown {
        errorName: void;
        content: core.Fetcher.Error;
    }

    interface _Visitor<_Result> {
        playlistIdNotFoundError: (value: SeedTrace.PlaylistIdNotFoundErrorBody) => _Result;
        _other: (value: core.Fetcher.Error) => _Result;
    }
}

export const Error = {
    playlistIdNotFoundError: (
        value: SeedTrace.PlaylistIdNotFoundErrorBody
    ): SeedTrace.playlist.updatePlaylist.Error.PlaylistIdNotFoundError => {
        return {
            content: value,
            errorName: "PlaylistIdNotFoundError",
        };
    },

    _unknown: (fetcherError: core.Fetcher.Error): SeedTrace.playlist.updatePlaylist.Error._Unknown => {
        return {
            errorName: undefined,
            content: fetcherError,
        };
    },

    _visit: <_Result>(
        value: SeedTrace.playlist.updatePlaylist.Error,
        visitor: SeedTrace.playlist.updatePlaylist.Error._Visitor<_Result>
    ): _Result => {
        switch (value.errorName) {
            case "PlaylistIdNotFoundError":
                return visitor.playlistIdNotFoundError(value.content);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
