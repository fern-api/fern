/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SeedTrace from "../../../index";
import urlJoin from "url-join";

export declare namespace Admin {
    export interface Options {
        environment?: core.Supplier<environments.SeedTraceEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the X-Random-Header header */
        xRandomHeader?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Random-Header header */
        xRandomHeader?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Admin {
    constructor(protected readonly _options: Admin.Options = {}) {}

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {SeedTrace.TestSubmissionStatus} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.updateTestSubmissionStatus("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         type: "stopped"
     *     })
     */
    public updateTestSubmissionStatus(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.TestSubmissionStatus,
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.updateTestSubmissionStatus.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__updateTestSubmissionStatus(submissionId, request, requestOptions),
        );
    }

    private async __updateTestSubmissionStatus(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.TestSubmissionStatus,
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.updateTestSubmissionStatus.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-test-submission-status/${encodeURIComponent(submissionId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.updateTestSubmissionStatus.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {SeedTrace.TestSubmissionUpdate} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.sendTestSubmissionUpdate("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         updateTime: "2024-01-15T09:30:00Z",
     *         updateInfo: {
     *             type: "running",
     *             value: "QUEUEING_SUBMISSION"
     *         }
     *     })
     */
    public sendTestSubmissionUpdate(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.TestSubmissionUpdate,
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.sendTestSubmissionUpdate.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__sendTestSubmissionUpdate(submissionId, request, requestOptions),
        );
    }

    private async __sendTestSubmissionUpdate(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.TestSubmissionUpdate,
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.sendTestSubmissionUpdate.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-test-submission-status-v2/${encodeURIComponent(submissionId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.sendTestSubmissionUpdate.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {SeedTrace.WorkspaceSubmissionStatus} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.updateWorkspaceSubmissionStatus("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         type: "stopped"
     *     })
     */
    public updateWorkspaceSubmissionStatus(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.WorkspaceSubmissionStatus,
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.updateWorkspaceSubmissionStatus.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__updateWorkspaceSubmissionStatus(submissionId, request, requestOptions),
        );
    }

    private async __updateWorkspaceSubmissionStatus(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.WorkspaceSubmissionStatus,
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.updateWorkspaceSubmissionStatus.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-workspace-submission-status/${encodeURIComponent(submissionId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.updateWorkspaceSubmissionStatus.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {SeedTrace.WorkspaceSubmissionUpdate} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.sendWorkspaceSubmissionUpdate("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         updateTime: "2024-01-15T09:30:00Z",
     *         updateInfo: {
     *             type: "running",
     *             value: "QUEUEING_SUBMISSION"
     *         }
     *     })
     */
    public sendWorkspaceSubmissionUpdate(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.WorkspaceSubmissionUpdate,
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.sendWorkspaceSubmissionUpdate.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__sendWorkspaceSubmissionUpdate(submissionId, request, requestOptions),
        );
    }

    private async __sendWorkspaceSubmissionUpdate(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.WorkspaceSubmissionUpdate,
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.sendWorkspaceSubmissionUpdate.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-workspace-submission-status-v2/${encodeURIComponent(submissionId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.sendWorkspaceSubmissionUpdate.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {string} testCaseId
     * @param {SeedTrace.StoreTracedTestCaseRequest} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.storeTracedTestCase("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "testCaseId", {
     *         result: {
     *             result: {
     *                 expectedResult: {
     *                     type: "integerValue",
     *                     value: 1
     *                 },
     *                 actualResult: {
     *                     type: "value",
     *                     value: {
     *                         type: "integerValue",
     *                         value: 1
     *                     }
     *                 },
     *                 passed: true
     *             },
     *             stdout: "stdout"
     *         },
     *         traceResponses: [{
     *                 submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *                 lineNumber: 1,
     *                 returnValue: {
     *                     type: "integerValue",
     *                     value: 1
     *                 },
     *                 expressionLocation: {
     *                     start: 1,
     *                     offset: 1
     *                 },
     *                 stack: {
     *                     numStackFrames: 1,
     *                     topStackFrame: {
     *                         methodName: "methodName",
     *                         lineNumber: 1,
     *                         scopes: [{
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }, {
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }]
     *                     }
     *                 },
     *                 stdout: "stdout"
     *             }, {
     *                 submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *                 lineNumber: 1,
     *                 returnValue: {
     *                     type: "integerValue",
     *                     value: 1
     *                 },
     *                 expressionLocation: {
     *                     start: 1,
     *                     offset: 1
     *                 },
     *                 stack: {
     *                     numStackFrames: 1,
     *                     topStackFrame: {
     *                         methodName: "methodName",
     *                         lineNumber: 1,
     *                         scopes: [{
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }, {
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }]
     *                     }
     *                 },
     *                 stdout: "stdout"
     *             }]
     *     })
     */
    public storeTracedTestCase(
        submissionId: SeedTrace.SubmissionId,
        testCaseId: string,
        request: SeedTrace.StoreTracedTestCaseRequest,
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.storeTracedTestCase.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__storeTracedTestCase(submissionId, testCaseId, request, requestOptions),
        );
    }

    private async __storeTracedTestCase(
        submissionId: SeedTrace.SubmissionId,
        testCaseId: string,
        request: SeedTrace.StoreTracedTestCaseRequest,
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.storeTracedTestCase.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-test-trace/submission/${encodeURIComponent(submissionId)}/testCase/${encodeURIComponent(testCaseId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.storeTracedTestCase.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {SeedTrace.v2.TestCaseId} testCaseId
     * @param {SeedTrace.TraceResponseV2[]} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.storeTracedTestCaseV2("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "testCaseId", [{
     *             submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             lineNumber: 1,
     *             file: {
     *                 filename: "filename",
     *                 directory: "directory"
     *             },
     *             returnValue: {
     *                 type: "integerValue",
     *                 value: 1
     *             },
     *             expressionLocation: {
     *                 start: 1,
     *                 offset: 1
     *             },
     *             stack: {
     *                 numStackFrames: 1,
     *                 topStackFrame: {
     *                     methodName: "methodName",
     *                     lineNumber: 1,
     *                     scopes: [{
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }, {
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }]
     *                 }
     *             },
     *             stdout: "stdout"
     *         }, {
     *             submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             lineNumber: 1,
     *             file: {
     *                 filename: "filename",
     *                 directory: "directory"
     *             },
     *             returnValue: {
     *                 type: "integerValue",
     *                 value: 1
     *             },
     *             expressionLocation: {
     *                 start: 1,
     *                 offset: 1
     *             },
     *             stack: {
     *                 numStackFrames: 1,
     *                 topStackFrame: {
     *                     methodName: "methodName",
     *                     lineNumber: 1,
     *                     scopes: [{
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }, {
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }]
     *                 }
     *             },
     *             stdout: "stdout"
     *         }])
     */
    public storeTracedTestCaseV2(
        submissionId: SeedTrace.SubmissionId,
        testCaseId: SeedTrace.v2.TestCaseId,
        request: SeedTrace.TraceResponseV2[],
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.storeTracedTestCaseV2.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__storeTracedTestCaseV2(submissionId, testCaseId, request, requestOptions),
        );
    }

    private async __storeTracedTestCaseV2(
        submissionId: SeedTrace.SubmissionId,
        testCaseId: SeedTrace.v2.TestCaseId,
        request: SeedTrace.TraceResponseV2[],
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.storeTracedTestCaseV2.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-test-trace-v2/submission/${encodeURIComponent(submissionId)}/testCase/${encodeURIComponent(testCaseId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.storeTracedTestCaseV2.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {SeedTrace.StoreTracedWorkspaceRequest} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.storeTracedWorkspace("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", {
     *         workspaceRunDetails: {
     *             exceptionV2: {
     *                 type: "generic",
     *                 exceptionType: "exceptionType",
     *                 exceptionMessage: "exceptionMessage",
     *                 exceptionStacktrace: "exceptionStacktrace"
     *             },
     *             exception: {
     *                 exceptionType: "exceptionType",
     *                 exceptionMessage: "exceptionMessage",
     *                 exceptionStacktrace: "exceptionStacktrace"
     *             },
     *             stdout: "stdout"
     *         },
     *         traceResponses: [{
     *                 submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *                 lineNumber: 1,
     *                 returnValue: {
     *                     type: "integerValue",
     *                     value: 1
     *                 },
     *                 expressionLocation: {
     *                     start: 1,
     *                     offset: 1
     *                 },
     *                 stack: {
     *                     numStackFrames: 1,
     *                     topStackFrame: {
     *                         methodName: "methodName",
     *                         lineNumber: 1,
     *                         scopes: [{
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }, {
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }]
     *                     }
     *                 },
     *                 stdout: "stdout"
     *             }, {
     *                 submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *                 lineNumber: 1,
     *                 returnValue: {
     *                     type: "integerValue",
     *                     value: 1
     *                 },
     *                 expressionLocation: {
     *                     start: 1,
     *                     offset: 1
     *                 },
     *                 stack: {
     *                     numStackFrames: 1,
     *                     topStackFrame: {
     *                         methodName: "methodName",
     *                         lineNumber: 1,
     *                         scopes: [{
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }, {
     *                                 variables: {
     *                                     "variables": {
     *                                         type: "integerValue",
     *                                         value: 1
     *                                     }
     *                                 }
     *                             }]
     *                     }
     *                 },
     *                 stdout: "stdout"
     *             }]
     *     })
     */
    public storeTracedWorkspace(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.StoreTracedWorkspaceRequest,
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.storeTracedWorkspace.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__storeTracedWorkspace(submissionId, request, requestOptions));
    }

    private async __storeTracedWorkspace(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.StoreTracedWorkspaceRequest,
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.storeTracedWorkspace.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-workspace-trace/submission/${encodeURIComponent(submissionId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.storeTracedWorkspace.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedTrace.SubmissionId} submissionId
     * @param {SeedTrace.TraceResponseV2[]} request
     * @param {Admin.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.admin.storeTracedWorkspaceV2("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", [{
     *             submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             lineNumber: 1,
     *             file: {
     *                 filename: "filename",
     *                 directory: "directory"
     *             },
     *             returnValue: {
     *                 type: "integerValue",
     *                 value: 1
     *             },
     *             expressionLocation: {
     *                 start: 1,
     *                 offset: 1
     *             },
     *             stack: {
     *                 numStackFrames: 1,
     *                 topStackFrame: {
     *                     methodName: "methodName",
     *                     lineNumber: 1,
     *                     scopes: [{
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }, {
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }]
     *                 }
     *             },
     *             stdout: "stdout"
     *         }, {
     *             submissionId: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             lineNumber: 1,
     *             file: {
     *                 filename: "filename",
     *                 directory: "directory"
     *             },
     *             returnValue: {
     *                 type: "integerValue",
     *                 value: 1
     *             },
     *             expressionLocation: {
     *                 start: 1,
     *                 offset: 1
     *             },
     *             stack: {
     *                 numStackFrames: 1,
     *                 topStackFrame: {
     *                     methodName: "methodName",
     *                     lineNumber: 1,
     *                     scopes: [{
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }, {
     *                             variables: {
     *                                 "variables": {
     *                                     type: "integerValue",
     *                                     value: 1
     *                                 }
     *                             }
     *                         }]
     *                 }
     *             },
     *             stdout: "stdout"
     *         }])
     */
    public storeTracedWorkspaceV2(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.TraceResponseV2[],
        requestOptions?: Admin.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.admin.storeTracedWorkspaceV2.Error>> {
        return core.HttpResponsePromise.fromPromise(
            this.__storeTracedWorkspaceV2(submissionId, request, requestOptions),
        );
    }

    private async __storeTracedWorkspaceV2(
        submissionId: SeedTrace.SubmissionId,
        request: SeedTrace.TraceResponseV2[],
        requestOptions?: Admin.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.admin.storeTracedWorkspaceV2.Error>>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/admin/store-workspace-trace-v2/submission/${encodeURIComponent(submissionId)}`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header":
                    (await core.Supplier.get(this._options.xRandomHeader)) != null
                        ? await core.Supplier.get(this._options.xRandomHeader)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@fern/trace",
                "X-Fern-SDK-Version": "0.0.1",
                "User-Agent": "@fern/trace/0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.admin.storeTracedWorkspaceV2.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
