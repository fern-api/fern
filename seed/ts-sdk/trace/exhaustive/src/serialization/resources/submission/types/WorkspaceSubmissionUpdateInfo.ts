/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SeedTrace from "../../../../api";
import * as core from "../../../../core";

export const WorkspaceSubmissionUpdateInfo: core.serialization.Schema<
    serializers.WorkspaceSubmissionUpdateInfo.Raw,
    SeedTrace.WorkspaceSubmissionUpdateInfo
> = core.serialization
    .union("type", {
        running: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).RunningSubmissionState),
        }),
        ran: core.serialization.lazyObject(async () => (await import("../../..")).WorkspaceRunDetails),
        stopped: core.serialization.object({}),
        traced: core.serialization.object({}),
        tracedV2: core.serialization.lazyObject(async () => (await import("../../..")).WorkspaceTracedUpdate),
        errored: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).ErrorInfo),
        }),
        finished: core.serialization.object({}),
    })
    .transform<SeedTrace.WorkspaceSubmissionUpdateInfo>({
        transform: (value) => {
            switch (value.type) {
                case "running":
                    return SeedTrace.WorkspaceSubmissionUpdateInfo.running(value.value);
                case "ran":
                    return SeedTrace.WorkspaceSubmissionUpdateInfo.ran(value);
                case "stopped":
                    return SeedTrace.WorkspaceSubmissionUpdateInfo.stopped();
                case "traced":
                    return SeedTrace.WorkspaceSubmissionUpdateInfo.traced();
                case "tracedV2":
                    return SeedTrace.WorkspaceSubmissionUpdateInfo.tracedV2(value);
                case "errored":
                    return SeedTrace.WorkspaceSubmissionUpdateInfo.errored(value.value);
                case "finished":
                    return SeedTrace.WorkspaceSubmissionUpdateInfo.finished();
                default:
                    return SeedTrace.WorkspaceSubmissionUpdateInfo._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace WorkspaceSubmissionUpdateInfo {
    type Raw =
        | WorkspaceSubmissionUpdateInfo.Running
        | WorkspaceSubmissionUpdateInfo.Ran
        | WorkspaceSubmissionUpdateInfo.Stopped
        | WorkspaceSubmissionUpdateInfo.Traced
        | WorkspaceSubmissionUpdateInfo.TracedV2
        | WorkspaceSubmissionUpdateInfo.Errored
        | WorkspaceSubmissionUpdateInfo.Finished;

    interface Running {
        type: "running";
        value: serializers.RunningSubmissionState.Raw;
    }

    interface Ran extends serializers.WorkspaceRunDetails.Raw {
        type: "ran";
    }

    interface Stopped {
        type: "stopped";
    }

    interface Traced {
        type: "traced";
    }

    interface TracedV2 extends serializers.WorkspaceTracedUpdate.Raw {
        type: "tracedV2";
    }

    interface Errored {
        type: "errored";
        value: serializers.ErrorInfo.Raw;
    }

    interface Finished {
        type: "finished";
    }
}
