/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SeedTrace from "../../../../api";
import * as core from "../../../../core";

export const SubmissionStatusForTestCase: core.serialization.Schema<
    serializers.SubmissionStatusForTestCase.Raw,
    SeedTrace.SubmissionStatusForTestCase
> = core.serialization
    .union("type", {
        graded: core.serialization.lazyObject(async () => (await import("../../..")).TestCaseResultWithStdout),
        gradedV2: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).TestCaseGrade),
        }),
        traced: core.serialization.lazyObject(async () => (await import("../../..")).TracedTestCase),
    })
    .transform<SeedTrace.SubmissionStatusForTestCase>({
        transform: (value) => {
            switch (value.type) {
                case "graded":
                    return SeedTrace.SubmissionStatusForTestCase.graded(value);
                case "gradedV2":
                    return SeedTrace.SubmissionStatusForTestCase.gradedV2(value.value);
                case "traced":
                    return SeedTrace.SubmissionStatusForTestCase.traced(value);
                default:
                    return SeedTrace.SubmissionStatusForTestCase._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace SubmissionStatusForTestCase {
    type Raw =
        | SubmissionStatusForTestCase.Graded
        | SubmissionStatusForTestCase.GradedV2
        | SubmissionStatusForTestCase.Traced;

    interface Graded extends serializers.TestCaseResultWithStdout.Raw {
        type: "graded";
    }

    interface GradedV2 {
        type: "gradedV2";
        value: serializers.TestCaseGrade.Raw;
    }

    interface Traced extends serializers.TracedTestCase.Raw {
        type: "traced";
    }
}
