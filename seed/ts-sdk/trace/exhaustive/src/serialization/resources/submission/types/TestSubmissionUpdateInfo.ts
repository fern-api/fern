/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SeedTrace from "../../../../api";
import * as core from "../../../../core";

export const TestSubmissionUpdateInfo: core.serialization.Schema<
    serializers.TestSubmissionUpdateInfo.Raw,
    SeedTrace.TestSubmissionUpdateInfo
> = core.serialization
    .union("type", {
        running: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).RunningSubmissionState),
        }),
        stopped: core.serialization.object({}),
        errored: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).ErrorInfo),
        }),
        gradedTestCase: core.serialization.lazyObject(async () => (await import("../../..")).GradedTestCaseUpdate),
        recordedTestCase: core.serialization.lazyObject(async () => (await import("../../..")).RecordedTestCaseUpdate),
        finished: core.serialization.object({}),
    })
    .transform<SeedTrace.TestSubmissionUpdateInfo>({
        transform: (value) => {
            switch (value.type) {
                case "running":
                    return SeedTrace.TestSubmissionUpdateInfo.running(value.value);
                case "stopped":
                    return SeedTrace.TestSubmissionUpdateInfo.stopped();
                case "errored":
                    return SeedTrace.TestSubmissionUpdateInfo.errored(value.value);
                case "gradedTestCase":
                    return SeedTrace.TestSubmissionUpdateInfo.gradedTestCase(value);
                case "recordedTestCase":
                    return SeedTrace.TestSubmissionUpdateInfo.recordedTestCase(value);
                case "finished":
                    return SeedTrace.TestSubmissionUpdateInfo.finished();
                default:
                    return SeedTrace.TestSubmissionUpdateInfo._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace TestSubmissionUpdateInfo {
    type Raw =
        | TestSubmissionUpdateInfo.Running
        | TestSubmissionUpdateInfo.Stopped
        | TestSubmissionUpdateInfo.Errored
        | TestSubmissionUpdateInfo.GradedTestCase
        | TestSubmissionUpdateInfo.RecordedTestCase
        | TestSubmissionUpdateInfo.Finished;

    interface Running {
        type: "running";
        value: serializers.RunningSubmissionState.Raw;
    }

    interface Stopped {
        type: "stopped";
    }

    interface Errored {
        type: "errored";
        value: serializers.ErrorInfo.Raw;
    }

    interface GradedTestCase extends serializers.GradedTestCaseUpdate.Raw {
        type: "gradedTestCase";
    }

    interface RecordedTestCase extends serializers.RecordedTestCaseUpdate.Raw {
        type: "recordedTestCase";
    }

    interface Finished {
        type: "finished";
    }
}
