/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SeedTrace from "../../../../api";
import * as core from "../../../../core";

export const GetExecutionSessionStateResponse: core.serialization.ObjectSchema<
    serializers.GetExecutionSessionStateResponse.Raw,
    SeedTrace.GetExecutionSessionStateResponse
> = core.serialization.object({
    states: core.serialization.record(
        core.serialization.string(),
        core.serialization.lazyObject(async () => (await import("../../..")).ExecutionSessionState)
    ),
    numWarmingInstances: core.serialization.number().optional(),
    warmingSessionIds: core.serialization.list(core.serialization.string()),
});

export declare namespace GetExecutionSessionStateResponse {
    interface Raw {
        states: Record<string, serializers.ExecutionSessionState.Raw>;
        numWarmingInstances?: number | null;
        warmingSessionIds: string[];
    }
}
