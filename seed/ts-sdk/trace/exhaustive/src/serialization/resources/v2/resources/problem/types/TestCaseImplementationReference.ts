/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as SeedTrace from "../../../../../../api";
import * as core from "../../../../../../core";

export const TestCaseImplementationReference: core.serialization.Schema<
    serializers.v2.TestCaseImplementationReference.Raw,
    SeedTrace.v2.TestCaseImplementationReference
> = core.serialization
    .union("type", {
        templateId: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../../../..")).v2.TestCaseTemplateId),
        }),
        implementation: core.serialization.lazyObject(
            async () => (await import("../../../../..")).v2.TestCaseImplementation
        ),
    })
    .transform<SeedTrace.v2.TestCaseImplementationReference>({
        transform: (value) => {
            switch (value.type) {
                case "templateId":
                    return SeedTrace.v2.TestCaseImplementationReference.templateId(value.value);
                case "implementation":
                    return SeedTrace.v2.TestCaseImplementationReference.implementation(value);
                default:
                    return SeedTrace.v2.TestCaseImplementationReference._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace TestCaseImplementationReference {
    type Raw = TestCaseImplementationReference.TemplateId | TestCaseImplementationReference.Implementation;

    interface TemplateId {
        type: "templateId";
        value: serializers.v2.TestCaseTemplateId.Raw;
    }

    interface Implementation extends serializers.v2.TestCaseImplementation.Raw {
        type: "implementation";
    }
}
