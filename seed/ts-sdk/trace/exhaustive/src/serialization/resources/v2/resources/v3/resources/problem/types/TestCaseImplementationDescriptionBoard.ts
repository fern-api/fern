/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../index";
import * as SeedTrace from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import { ParameterId } from "./ParameterId";

export const TestCaseImplementationDescriptionBoard: core.serialization.Schema<
    serializers.v2.v3.TestCaseImplementationDescriptionBoard.Raw,
    SeedTrace.v2.v3.TestCaseImplementationDescriptionBoard
> = core.serialization
    .union("type", {
        html: core.serialization.object({
            value: core.serialization.string(),
        }),
        paramId: core.serialization.object({
            value: ParameterId,
        }),
    })
    .transform<SeedTrace.v2.v3.TestCaseImplementationDescriptionBoard>({
        transform: (value) => {
            switch (value.type) {
                case "html":
                    return SeedTrace.v2.v3.TestCaseImplementationDescriptionBoard.html(value.value);
                case "paramId":
                    return SeedTrace.v2.v3.TestCaseImplementationDescriptionBoard.paramId(value.value);
                default:
                    return SeedTrace.v2.v3.TestCaseImplementationDescriptionBoard._unknown(value);
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace TestCaseImplementationDescriptionBoard {
    export type Raw = TestCaseImplementationDescriptionBoard.Html | TestCaseImplementationDescriptionBoard.ParamId;

    export interface Html {
        type: "html";
        value: string;
    }

    export interface ParamId {
        type: "paramId";
        value: ParameterId.Raw;
    }
}
