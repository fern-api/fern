/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../..";
import * as SeedTrace from "../../../../../../../../api";
import * as core from "../../../../../../../../core";

export const BasicCustomFiles: core.serialization.ObjectSchema<
    serializers.v2.v3.BasicCustomFiles.Raw,
    SeedTrace.v2.v3.BasicCustomFiles
> = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(
        async () => (await import("../../../../../../..")).v2.v3.NonVoidFunctionSignature
    ),
    additionalFiles: core.serialization.record(
        core.serialization.lazy(async () => (await import("../../../../../../..")).Language),
        core.serialization.lazyObject(async () => (await import("../../../../../../..")).v2.v3.Files).optional()
    ),
    basicTestCaseTemplate: core.serialization.lazyObject(
        async () => (await import("../../../../../../..")).v2.v3.BasicTestCaseTemplate
    ),
});

export declare namespace BasicCustomFiles {
    interface Raw {
        methodName: string;
        signature: serializers.v2.v3.NonVoidFunctionSignature.Raw;
        additionalFiles: Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
        basicTestCaseTemplate: serializers.v2.v3.BasicTestCaseTemplate.Raw;
    }
}
