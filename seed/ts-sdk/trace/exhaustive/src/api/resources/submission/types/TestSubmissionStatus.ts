/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedTrace from "../../../index";

export type TestSubmissionStatus =
    | SeedTrace.TestSubmissionStatus.Stopped
    | SeedTrace.TestSubmissionStatus.Errored
    | SeedTrace.TestSubmissionStatus.Running
    | SeedTrace.TestSubmissionStatus.TestCaseIdToState
    | SeedTrace.TestSubmissionStatus._Unknown;

export namespace TestSubmissionStatus {
    export interface Stopped extends _Utils {
        type: "stopped";
    }

    export interface Errored extends _Utils {
        type: "errored";
        value: SeedTrace.ErrorInfo;
    }

    export interface Running extends _Utils {
        type: "running";
        value: SeedTrace.RunningSubmissionState;
    }

    export interface TestCaseIdToState extends _Utils {
        type: "testCaseIdToState";
        value: Record<string, SeedTrace.SubmissionStatusForTestCase>;
    }

    export interface _Unknown extends _Utils {
        type: void;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: SeedTrace.TestSubmissionStatus._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        stopped: () => _Result;
        errored: (value: SeedTrace.ErrorInfo) => _Result;
        running: (value: SeedTrace.RunningSubmissionState) => _Result;
        testCaseIdToState: (value: Record<string, SeedTrace.SubmissionStatusForTestCase>) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const TestSubmissionStatus = {
    stopped: (): SeedTrace.TestSubmissionStatus.Stopped => {
        return {
            type: "stopped",
            _visit: function <_Result>(
                this: SeedTrace.TestSubmissionStatus.Stopped,
                visitor: SeedTrace.TestSubmissionStatus._Visitor<_Result>,
            ) {
                return SeedTrace.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },

    errored: (value: SeedTrace.ErrorInfo): SeedTrace.TestSubmissionStatus.Errored => {
        return {
            value: value,
            type: "errored",
            _visit: function <_Result>(
                this: SeedTrace.TestSubmissionStatus.Errored,
                visitor: SeedTrace.TestSubmissionStatus._Visitor<_Result>,
            ) {
                return SeedTrace.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },

    running: (value: SeedTrace.RunningSubmissionState): SeedTrace.TestSubmissionStatus.Running => {
        return {
            value: value,
            type: "running",
            _visit: function <_Result>(
                this: SeedTrace.TestSubmissionStatus.Running,
                visitor: SeedTrace.TestSubmissionStatus._Visitor<_Result>,
            ) {
                return SeedTrace.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },

    testCaseIdToState: (
        value: Record<string, SeedTrace.SubmissionStatusForTestCase>,
    ): SeedTrace.TestSubmissionStatus.TestCaseIdToState => {
        return {
            value: value,
            type: "testCaseIdToState",
            _visit: function <_Result>(
                this: SeedTrace.TestSubmissionStatus.TestCaseIdToState,
                visitor: SeedTrace.TestSubmissionStatus._Visitor<_Result>,
            ) {
                return SeedTrace.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): SeedTrace.TestSubmissionStatus._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(
                this: SeedTrace.TestSubmissionStatus._Unknown,
                visitor: SeedTrace.TestSubmissionStatus._Visitor<_Result>,
            ) {
                return SeedTrace.TestSubmissionStatus._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: SeedTrace.TestSubmissionStatus,
        visitor: SeedTrace.TestSubmissionStatus._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "stopped":
                return visitor.stopped();
            case "errored":
                return visitor.errored(value.value);
            case "running":
                return visitor.running(value.value);
            case "testCaseIdToState":
                return visitor.testCaseIdToState(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
