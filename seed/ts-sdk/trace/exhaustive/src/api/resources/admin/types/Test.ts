/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedTrace from "../../..";

export type Test = SeedTrace.Test.And | SeedTrace.Test.Or | SeedTrace.Test._Unknown;

export declare namespace Test {
    interface And extends _Utils {
        type: "and";
        value: boolean;
    }

    interface Or extends _Utils {
        type: "or";
        value: boolean;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: SeedTrace.Test._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        and: (value: boolean) => _Result;
        or: (value: boolean) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Test = {
    and: (value: boolean): SeedTrace.Test.And => {
        return {
            value: value,
            type: "and",
            _visit: function <_Result>(this: SeedTrace.Test.And, visitor: SeedTrace.Test._Visitor<_Result>) {
                return SeedTrace.Test._visit(this, visitor);
            },
        };
    },

    or: (value: boolean): SeedTrace.Test.Or => {
        return {
            value: value,
            type: "or",
            _visit: function <_Result>(this: SeedTrace.Test.Or, visitor: SeedTrace.Test._Visitor<_Result>) {
                return SeedTrace.Test._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): SeedTrace.Test._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(this: SeedTrace.Test._Unknown, visitor: SeedTrace.Test._Visitor<_Result>) {
                return SeedTrace.Test._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: SeedTrace.Test, visitor: SeedTrace.Test._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "and":
                return visitor.and(value.value);
            case "or":
                return visitor.or(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
