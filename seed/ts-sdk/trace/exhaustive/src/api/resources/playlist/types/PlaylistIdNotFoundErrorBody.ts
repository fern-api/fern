/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedTrace from "../../..";

export type PlaylistIdNotFoundErrorBody =
    | SeedTrace.PlaylistIdNotFoundErrorBody.PlaylistId
    | SeedTrace.PlaylistIdNotFoundErrorBody._Unknown;

export declare namespace PlaylistIdNotFoundErrorBody {
    interface PlaylistId extends _Utils {
        type: "playlistId";
        value: SeedTrace.PlaylistId;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: SeedTrace.PlaylistIdNotFoundErrorBody._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        playlistId: (value: SeedTrace.PlaylistId) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PlaylistIdNotFoundErrorBody = {
    playlistId: (value: SeedTrace.PlaylistId): SeedTrace.PlaylistIdNotFoundErrorBody.PlaylistId => {
        return {
            value: value,
            type: "playlistId",
            _visit: function <_Result>(
                this: SeedTrace.PlaylistIdNotFoundErrorBody.PlaylistId,
                visitor: SeedTrace.PlaylistIdNotFoundErrorBody._Visitor<_Result>
            ) {
                return SeedTrace.PlaylistIdNotFoundErrorBody._visit(this, visitor);
            },
        };
    },

    _unknown: (value: { type: string }): SeedTrace.PlaylistIdNotFoundErrorBody._Unknown => {
        return {
            ...(value as any),
            _visit: function <_Result>(
                this: SeedTrace.PlaylistIdNotFoundErrorBody._Unknown,
                visitor: SeedTrace.PlaylistIdNotFoundErrorBody._Visitor<_Result>
            ) {
                return SeedTrace.PlaylistIdNotFoundErrorBody._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: SeedTrace.PlaylistIdNotFoundErrorBody,
        visitor: SeedTrace.PlaylistIdNotFoundErrorBody._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "playlistId":
                return visitor.playlistId(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
