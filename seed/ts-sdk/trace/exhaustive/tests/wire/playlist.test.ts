/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import * as SeedTrace from "../../src/api/index";
import { SeedTraceClient } from "../../src/Client";

describe("Playlist", () => {
    test("createPlaylist", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", problems: ["problems", "problems"] };
        const rawResponseBody = {
            playlist_id: "playlist_id",
            "owner-id": "owner-id",
            name: "name",
            problems: ["problems", "problems"],
        };
        server
            .mockEndpoint()
            .post("/v2/playlist/1/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.createPlaylist(1, {
            datetime: "2024-01-15T09:30:00Z",
            optionalDatetime: "2024-01-15T09:30:00Z",
            body: {
                name: "name",
                problems: [SeedTrace.ProblemId("problems"), SeedTrace.ProblemId("problems")],
            },
        });
        expect(response).toEqual({
            playlist_id: SeedTrace.PlaylistId("playlist_id"),
            "owner-id": SeedTrace.UserId("owner-id"),
            name: "name",
            problems: [SeedTrace.ProblemId("problems"), SeedTrace.ProblemId("problems")],
        });
    });

    test("getPlaylists", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        const rawResponseBody = [
            { playlist_id: "playlist_id", "owner-id": "owner-id", name: "name", problems: ["problems", "problems"] },
            { playlist_id: "playlist_id", "owner-id": "owner-id", name: "name", problems: ["problems", "problems"] },
        ];
        server.mockEndpoint().get("/v2/playlist/1/all").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.playlist.getPlaylists(1, {
            limit: 1,
            otherField: "otherField",
            multiLineDocs: "multiLineDocs",
            optionalMultipleField: "optionalMultipleField",
            multipleField: "multipleField",
        });
        expect(response).toEqual([
            {
                playlist_id: SeedTrace.PlaylistId("playlist_id"),
                "owner-id": SeedTrace.UserId("owner-id"),
                name: "name",
                problems: [SeedTrace.ProblemId("problems"), SeedTrace.ProblemId("problems")],
            },
            {
                playlist_id: SeedTrace.PlaylistId("playlist_id"),
                "owner-id": SeedTrace.UserId("owner-id"),
                name: "name",
                problems: [SeedTrace.ProblemId("problems"), SeedTrace.ProblemId("problems")],
            },
        ]);
    });

    test("getPlaylist", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        const rawResponseBody = {
            playlist_id: "playlist_id",
            "owner-id": "owner-id",
            name: "name",
            problems: ["problems", "problems"],
        };
        server
            .mockEndpoint()
            .get("/v2/playlist/1/playlistId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.getPlaylist(1, SeedTrace.PlaylistId("playlistId"));
        expect(response).toEqual({
            playlist_id: SeedTrace.PlaylistId("playlist_id"),
            "owner-id": SeedTrace.UserId("owner-id"),
            name: "name",
            problems: [SeedTrace.ProblemId("problems"), SeedTrace.ProblemId("problems")],
        });
    });

    test("updatePlaylist", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", problems: ["problems", "problems"] };
        const rawResponseBody = {
            playlist_id: "playlist_id",
            "owner-id": "owner-id",
            name: "name",
            problems: ["problems", "problems"],
        };
        server
            .mockEndpoint()
            .put("/v2/playlist/1/playlistId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.updatePlaylist(1, SeedTrace.PlaylistId("playlistId"), {
            name: "name",
            problems: [SeedTrace.ProblemId("problems"), SeedTrace.ProblemId("problems")],
        });
        expect(response).toEqual({
            playlist_id: SeedTrace.PlaylistId("playlist_id"),
            "owner-id": SeedTrace.UserId("owner-id"),
            name: "name",
            problems: [SeedTrace.ProblemId("problems"), SeedTrace.ProblemId("problems")],
        });
    });

    test("deletePlaylist", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v2/playlist/1/playlist_id").respondWith().statusCode(200).build();

        const response = await client.playlist.deletePlaylist(1, SeedTrace.PlaylistId("playlist_id"));
        expect(response).toEqual(undefined);
    });
});
