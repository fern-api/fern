/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import * as SeedTrace from "../../src/api/index";
import { SeedTraceClient } from "../../src/Client";

describe("Problem", () => {
    test("createProblem", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = {
            problemName: "problemName",
            problemDescription: {
                boards: [
                    { type: "html", value: "boards" },
                    { type: "html", value: "boards" },
                ],
            },
            files: {
                JAVA: {
                    solutionFile: { filename: "filename", contents: "contents" },
                    readOnlyFiles: [
                        { filename: "filename", contents: "contents" },
                        { filename: "filename", contents: "contents" },
                    ],
                },
            },
            inputParams: [
                { variableType: { type: "integerType" }, name: "name" },
                { variableType: { type: "integerType" }, name: "name" },
            ],
            outputType: { type: "integerType" },
            testcases: [
                {
                    testCase: {
                        id: "id",
                        params: [
                            { type: "integerValue", value: 1 },
                            { type: "integerValue", value: 1 },
                        ],
                    },
                    expectedResult: { type: "integerValue", value: 1 },
                },
                {
                    testCase: {
                        id: "id",
                        params: [
                            { type: "integerValue", value: 1 },
                            { type: "integerValue", value: 1 },
                        ],
                    },
                    expectedResult: { type: "integerValue", value: 1 },
                },
            ],
            methodName: "methodName",
        };
        const rawResponseBody = { type: "success", value: "string" };
        server
            .mockEndpoint()
            .post("/problem-crud/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.problem.createProblem({
            problemName: "problemName",
            problemDescription: {
                boards: [
                    {
                        type: "html",
                        value: "boards",
                    },
                    {
                        type: "html",
                        value: "boards",
                    },
                ],
            },
            files: {
                ["JAVA"]: {
                    solutionFile: {
                        filename: "filename",
                        contents: "contents",
                    },
                    readOnlyFiles: [
                        {
                            filename: "filename",
                            contents: "contents",
                        },
                        {
                            filename: "filename",
                            contents: "contents",
                        },
                    ],
                },
            },
            inputParams: [
                {
                    variableType: {
                        type: "integerType",
                    },
                    name: "name",
                },
                {
                    variableType: {
                        type: "integerType",
                    },
                    name: "name",
                },
            ],
            outputType: {
                type: "integerType",
            },
            testcases: [
                {
                    testCase: {
                        id: "id",
                        params: [
                            {
                                type: "integerValue",
                                value: 1,
                            },
                            {
                                type: "integerValue",
                                value: 1,
                            },
                        ],
                    },
                    expectedResult: {
                        type: "integerValue",
                        value: 1,
                    },
                },
                {
                    testCase: {
                        id: "id",
                        params: [
                            {
                                type: "integerValue",
                                value: 1,
                            },
                            {
                                type: "integerValue",
                                value: 1,
                            },
                        ],
                    },
                    expectedResult: {
                        type: "integerValue",
                        value: 1,
                    },
                },
            ],
            methodName: "methodName",
        });
        expect(response).toEqual({
            type: "success",
            value: SeedTrace.ProblemId("string"),
        });
    });

    test("updateProblem", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = {
            problemName: "problemName",
            problemDescription: {
                boards: [
                    { type: "html", value: "boards" },
                    { type: "html", value: "boards" },
                ],
            },
            files: {
                JAVA: {
                    solutionFile: { filename: "filename", contents: "contents" },
                    readOnlyFiles: [
                        { filename: "filename", contents: "contents" },
                        { filename: "filename", contents: "contents" },
                    ],
                },
            },
            inputParams: [
                { variableType: { type: "integerType" }, name: "name" },
                { variableType: { type: "integerType" }, name: "name" },
            ],
            outputType: { type: "integerType" },
            testcases: [
                {
                    testCase: {
                        id: "id",
                        params: [
                            { type: "integerValue", value: 1 },
                            { type: "integerValue", value: 1 },
                        ],
                    },
                    expectedResult: { type: "integerValue", value: 1 },
                },
                {
                    testCase: {
                        id: "id",
                        params: [
                            { type: "integerValue", value: 1 },
                            { type: "integerValue", value: 1 },
                        ],
                    },
                    expectedResult: { type: "integerValue", value: 1 },
                },
            ],
            methodName: "methodName",
        };
        const rawResponseBody = { problemVersion: 1 };
        server
            .mockEndpoint()
            .post("/problem-crud/update/problemId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.problem.updateProblem(SeedTrace.ProblemId("problemId"), {
            problemName: "problemName",
            problemDescription: {
                boards: [
                    {
                        type: "html",
                        value: "boards",
                    },
                    {
                        type: "html",
                        value: "boards",
                    },
                ],
            },
            files: {
                ["JAVA"]: {
                    solutionFile: {
                        filename: "filename",
                        contents: "contents",
                    },
                    readOnlyFiles: [
                        {
                            filename: "filename",
                            contents: "contents",
                        },
                        {
                            filename: "filename",
                            contents: "contents",
                        },
                    ],
                },
            },
            inputParams: [
                {
                    variableType: {
                        type: "integerType",
                    },
                    name: "name",
                },
                {
                    variableType: {
                        type: "integerType",
                    },
                    name: "name",
                },
            ],
            outputType: {
                type: "integerType",
            },
            testcases: [
                {
                    testCase: {
                        id: "id",
                        params: [
                            {
                                type: "integerValue",
                                value: 1,
                            },
                            {
                                type: "integerValue",
                                value: 1,
                            },
                        ],
                    },
                    expectedResult: {
                        type: "integerValue",
                        value: 1,
                    },
                },
                {
                    testCase: {
                        id: "id",
                        params: [
                            {
                                type: "integerValue",
                                value: 1,
                            },
                            {
                                type: "integerValue",
                                value: 1,
                            },
                        ],
                    },
                    expectedResult: {
                        type: "integerValue",
                        value: 1,
                    },
                },
            ],
            methodName: "methodName",
        });
        expect(response).toEqual({
            problemVersion: 1,
        });
    });

    test("deleteProblem", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/problem-crud/delete/problemId").respondWith().statusCode(200).build();

        const response = await client.problem.deleteProblem(SeedTrace.ProblemId("problemId"));
        expect(response).toEqual(undefined);
    });

    test("getDefaultStarterFiles", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = {
            inputParams: [
                { variableType: { type: "integerType" }, name: "name" },
                { variableType: { type: "integerType" }, name: "name" },
            ],
            outputType: { type: "integerType" },
            methodName: "methodName",
        };
        const rawResponseBody = {
            files: {
                JAVA: {
                    solutionFile: { filename: "filename", contents: "contents" },
                    readOnlyFiles: [
                        { filename: "filename", contents: "contents" },
                        { filename: "filename", contents: "contents" },
                    ],
                },
            },
        };
        server
            .mockEndpoint()
            .post("/problem-crud/default-starter-files")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.problem.getDefaultStarterFiles({
            inputParams: [
                {
                    variableType: {
                        type: "integerType",
                    },
                    name: "name",
                },
                {
                    variableType: {
                        type: "integerType",
                    },
                    name: "name",
                },
            ],
            outputType: {
                type: "integerType",
            },
            methodName: "methodName",
        });
        expect(response).toEqual({
            files: {
                ["JAVA"]: {
                    solutionFile: {
                        filename: "filename",
                        contents: "contents",
                    },
                    readOnlyFiles: [
                        {
                            filename: "filename",
                            contents: "contents",
                        },
                        {
                            filename: "filename",
                            contents: "contents",
                        },
                    ],
                },
            },
        });
    });
});
