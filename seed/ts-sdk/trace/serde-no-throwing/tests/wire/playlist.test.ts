/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedTraceClient } from "../../src/Client";
import * as SeedTrace from "../../src/api/index";

describe("Playlist", () => {
    test("createPlaylist", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", problems: ["problems", "problems"] };
        const rawResponseBody = {
            playlist_id: "playlist_id",
            "owner-id": "owner-id",
            name: "name",
            problems: ["problems", "problems"],
        };
        server
            .mockEndpoint()
            .post("/v2/playlist/1/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.createPlaylist(1, {
            datetime: new Date("2024-01-15T09:30:00.000Z"),
            optionalDatetime: new Date("2024-01-15T09:30:00.000Z"),
            body: {
                name: "name",
                problems: ["problems", "problems"],
            },
        });
        expect(response).toEqual({
            body: {
                playlistId: "playlist_id",
                ownerId: "owner-id",
                name: "name",
                problems: ["problems", "problems"],
            },
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getPlaylists", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        const rawResponseBody = [
            { playlist_id: "playlist_id", "owner-id": "owner-id", name: "name", problems: ["problems", "problems"] },
            { playlist_id: "playlist_id", "owner-id": "owner-id", name: "name", problems: ["problems", "problems"] },
        ];
        server.mockEndpoint().get("/v2/playlist/1/all").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.playlist.getPlaylists(1, {
            limit: 1,
            otherField: "otherField",
            multiLineDocs: "multiLineDocs",
            optionalMultipleField: "optionalMultipleField",
            multipleField: "multipleField",
        });
        expect(response).toEqual({
            body: [
                {
                    playlistId: "playlist_id",
                    ownerId: "owner-id",
                    name: "name",
                    problems: ["problems", "problems"],
                },
                {
                    playlistId: "playlist_id",
                    ownerId: "owner-id",
                    name: "name",
                    problems: ["problems", "problems"],
                },
            ],
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getPlaylist (c5db3399)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        const rawResponseBody = {
            playlist_id: "playlist_id",
            "owner-id": "owner-id",
            name: "name",
            problems: ["problems", "problems"],
        };
        server
            .mockEndpoint()
            .get("/v2/playlist/1/playlistId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.getPlaylist(1, "playlistId");
        expect(response).toEqual({
            body: {
                playlistId: "playlist_id",
                ownerId: "owner-id",
                name: "name",
                problems: ["problems", "problems"],
            },
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getPlaylist (df2e9f4b)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        const rawResponseBody = { type: "playlistId", value: "string" };
        server
            .mockEndpoint()
            .get("/v2/playlist/1/playlistId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.getPlaylist(1, "playlistId");
        expect(response).toEqual({
            body: {
                type: "playlistId",
                value: "string",
            },
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getPlaylist (560124c6)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        server.mockEndpoint().get("/v2/playlist/1/playlistId").respondWith().statusCode(401).build();

        const response = await client.playlist.getPlaylist(1, "playlistId");
        expect(response).toEqual({
            body: undefined,
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("updatePlaylist (56f82548)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", problems: ["problems", "problems"] };
        const rawResponseBody = {
            playlist_id: "playlist_id",
            "owner-id": "owner-id",
            name: "name",
            problems: ["problems", "problems"],
        };
        server
            .mockEndpoint()
            .put("/v2/playlist/1/playlistId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.updatePlaylist(1, "playlistId", {
            name: "name",
            problems: ["problems", "problems"],
        });
        expect(response).toEqual({
            body: {
                playlistId: "playlist_id",
                ownerId: "owner-id",
                name: "name",
                problems: ["problems", "problems"],
            },
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("updatePlaylist (368df093)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", problems: ["problems", "problems"] };
        const rawResponseBody = { type: "playlistId", value: "string" };
        server
            .mockEndpoint()
            .put("/v2/playlist/1/playlistId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.playlist.updatePlaylist(1, "playlistId", {
            name: "name",
            problems: ["problems", "problems"],
        });
        expect(response).toEqual({
            body: {
                type: "playlistId",
                value: "string",
            },
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("deletePlaylist", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedTraceClient({ token: "test", xRandomHeader: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v2/playlist/1/playlist_id").respondWith().statusCode(200).build();

        const response = await client.playlist.deletePlaylist(1, "playlist_id");
        expect(response).toEqual({
            body: undefined,
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });
});
