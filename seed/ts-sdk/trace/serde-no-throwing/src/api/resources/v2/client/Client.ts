// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as SeedTrace from "../../../index.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as SeedTrace from "../../../index.js";
import { Problem } from "../resources/problem/client/Client.js";
import { V3 } from "../resources/v3/client/Client.js";

export declare namespace V2 {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class V2 {
    protected readonly _options: V2.Options;
    protected _problem: Problem | undefined;
    protected _v3: V3 | undefined;

    constructor(_options: V2.Options = {}) {
        this._options = _options;
    }

    public get problem(): Problem {
        return (this._problem ??= new Problem(this._options));
    }

    public get v3(): V3 {
        return (this._v3 ??= new V3(this._options));
    }

    /**
     * @param {V2.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v2.test()
     */
    public test(
        requestOptions?: V2.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.v2.test.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__test(requestOptions));
    }

    private async __test(
        requestOptions?: V2.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.v2.test.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header": requestOptions?.xRandomHeader ?? this._options?.xRandomHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url:
                (await core.Supplier.get(this._options.baseUrl)) ??
                (await core.Supplier.get(this._options.environment)) ??
                environments.SeedTraceEnvironment.Prod,
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.v2.test.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
