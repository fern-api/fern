// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as SeedTrace from "../../../index.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as environments from "../../../../environments.js";
import * as serializers from "../../../../serialization/index.js";
import * as SeedTrace from "../../../index.js";

export declare namespace Submission {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

/**
 * Responsible for spinning up and spinning down execution.
 */
export class Submission {
    protected readonly _options: Submission.Options;

    constructor(_options: Submission.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns sessionId and execution server URL for session. Spins up server.
     *
     * @param {SeedTrace.Language} language
     * @param {Submission.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.submission.createExecutionSession("JAVA")
     */
    public createExecutionSession(
        language: SeedTrace.Language,
        requestOptions?: Submission.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<SeedTrace.ExecutionSessionResponse, SeedTrace.submission.createExecutionSession.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__createExecutionSession(language, requestOptions));
    }

    private async __createExecutionSession(
        language: SeedTrace.Language,
        requestOptions?: Submission.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<SeedTrace.ExecutionSessionResponse, SeedTrace.submission.createExecutionSession.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header": requestOptions?.xRandomHeader ?? this._options?.xRandomHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/sessions/create-session/${encodeURIComponent(serializers.Language.jsonOrThrow(language, { omitUndefined: true }))}`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.ExecutionSessionResponse.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        skipValidation: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.submission.createExecutionSession.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Returns execution server URL for session. Returns empty if session isn't registered.
     *
     * @param {string} sessionId
     * @param {Submission.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.submission.getExecutionSession("sessionId")
     */
    public getExecutionSession(
        sessionId: string,
        requestOptions?: Submission.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<SeedTrace.ExecutionSessionResponse | undefined, SeedTrace.submission.getExecutionSession.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getExecutionSession(sessionId, requestOptions));
    }

    private async __getExecutionSession(
        sessionId: string,
        requestOptions?: Submission.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedTrace.ExecutionSessionResponse | undefined,
                SeedTrace.submission.getExecutionSession.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header": requestOptions?.xRandomHeader ?? this._options?.xRandomHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/sessions/${encodeURIComponent(sessionId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.submission.getExecutionSession.Response.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        skipValidation: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.submission.getExecutionSession.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * Stops execution session.
     *
     * @param {string} sessionId
     * @param {Submission.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.submission.stopExecutionSession("sessionId")
     */
    public stopExecutionSession(
        sessionId: string,
        requestOptions?: Submission.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<void, SeedTrace.submission.stopExecutionSession.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__stopExecutionSession(sessionId, requestOptions));
    }

    private async __stopExecutionSession(
        sessionId: string,
        requestOptions?: Submission.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<void, SeedTrace.submission.stopExecutionSession.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header": requestOptions?.xRandomHeader ?? this._options?.xRandomHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                `/sessions/stop/${encodeURIComponent(sessionId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: undefined,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.submission.stopExecutionSession.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {Submission.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.submission.getExecutionSessionsState()
     */
    public getExecutionSessionsState(
        requestOptions?: Submission.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedTrace.GetExecutionSessionStateResponse,
            SeedTrace.submission.getExecutionSessionsState.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getExecutionSessionsState(requestOptions));
    }

    private async __getExecutionSessionsState(
        requestOptions?: Submission.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedTrace.GetExecutionSessionStateResponse,
                SeedTrace.submission.getExecutionSessionsState.Error
            >
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-Random-Header": requestOptions?.xRandomHeader ?? this._options?.xRandomHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SeedTraceEnvironment.Prod,
                "/sessions/execution-sessions-state",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: serializers.GetExecutionSessionStateResponse.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        skipValidation: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedTrace.submission.getExecutionSessionsState.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
