// This file was auto-generated by Fern from our API Definition.

import type * as SeedTrace from "../../../../api/index.js";
import * as core from "../../../../core/index.js";
import type * as serializers from "../../../index.js";
import { ProblemId } from "../../commons/types/ProblemId.js";
import { CodeExecutionUpdate } from "./CodeExecutionUpdate.js";
import { ExceptionInfo } from "./ExceptionInfo.js";
import { TerminatedResponse } from "./TerminatedResponse.js";

export const SubmissionResponse: core.serialization.Schema<
  serializers.SubmissionResponse.Raw,
  SeedTrace.SubmissionResponse
> = core.serialization
  .union("type", {
    serverInitialized: core.serialization.object({}),
    problemInitialized: core.serialization.object({
      value: ProblemId,
    }),
    workspaceInitialized: core.serialization.object({}),
    serverErrored: ExceptionInfo,
    codeExecutionUpdate: core.serialization.object({
      value: CodeExecutionUpdate,
    }),
    terminated: TerminatedResponse,
  })
  .transform<SeedTrace.SubmissionResponse>({
    transform: (value) => value,
    untransform: (value) => value,
  });

export declare namespace SubmissionResponse {
  export type Raw =
    | SubmissionResponse.ServerInitialized
    | SubmissionResponse.ProblemInitialized
    | SubmissionResponse.WorkspaceInitialized
    | SubmissionResponse.ServerErrored
    | SubmissionResponse.CodeExecutionUpdate
    | SubmissionResponse.Terminated;

  export interface ServerInitialized {
    type: "serverInitialized";
  }

  export interface ProblemInitialized {
    type: "problemInitialized";
    value: ProblemId.Raw;
  }

  export interface WorkspaceInitialized {
    type: "workspaceInitialized";
  }

  export interface ServerErrored extends ExceptionInfo.Raw {
    type: "serverErrored";
  }

  export interface CodeExecutionUpdate {
    type: "codeExecutionUpdate";
    value: CodeExecutionUpdate.Raw;
  }

  export interface Terminated extends TerminatedResponse.Raw {
    type: "terminated";
  }
}
