/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as qs from "qs";
import { RealtimeSocket } from "./Socket";

export declare namespace Realtime {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
    }

    export interface ConnectArgs {
        model?: string | undefined;
        temperature?: number | undefined;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, unknown>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Realtime {
    constructor(protected readonly _options: Realtime.Options) {}

    public async connect(args: Realtime.ConnectArgs = {}): Promise<RealtimeSocket> {
        const queryParams: Record<string, unknown> = {};
        if (args.model != null) {
            queryParams["model"] = args.model;
        }

        if (args.temperature != null) {
            queryParams["temperature"] = args.temperature;
        }

        let websocketHeaders: Record<string, unknown> = {};
        websocketHeaders = {
            ...websocketHeaders,
            ...args.headers,
        };
        const socket = new core.ReconnectingWebSocket(
            `${(await core.Supplier.get(this._options.baseUrl)) ?? (await core.Supplier.get(this._options.environment))}/realtime/?${qs.stringify(queryParams, { arrayFormat: "repeat" })}`,
            [],
            { debug: args.debug ?? false, maxRetries: args.reconnectAttempts ?? 30 },
            websocketHeaders,
        );
        return new RealtimeSocket({ socket });
    }
}
