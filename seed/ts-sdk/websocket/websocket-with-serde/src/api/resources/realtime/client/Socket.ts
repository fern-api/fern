/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as SeedWebsocket from "../../../index";
import { SendEvent } from "../../../../serialization/resources/realtime/types/SendEvent";
import { SendEvent2 } from "../../../../serialization/resources/realtime/types/SendEvent2";
import { fromJson } from "../../../../core/json";
import * as serializers from "../../../../serialization/index";

export declare namespace RealtimeSocket {
    export interface Args {
        socket: core.ReconnectingWebSocket;
    }

    export type Response = SeedWebsocket.ReceiveEvent | SeedWebsocket.ReceiveEvent2 | SeedWebsocket.ReceiveEvent3;
    type EventHandlers = {
        open?: () => void;
        message?: (message: Response) => void;
        close?: (event: core.CloseEvent) => void;
        error?: (error: Error) => void;
    };
}

export class RealtimeSocket {
    public readonly socket: core.ReconnectingWebSocket;
    protected readonly eventHandlers: RealtimeSocket.EventHandlers = {};
    private handleOpen: () => void = () => {
        this.eventHandlers.open?.();
    };
    private handleMessage: (event: { data: string }) => void = (event) => {
        const data = fromJson(event.data);

        const parsedResponse = serializers.RealtimeSocketResponse.parse(data, { unrecognizedObjectKeys: "strip" });
        if (parsedResponse.ok) {
            this.eventHandlers.message?.(parsedResponse.value);
        } else {
            this.eventHandlers.error?.(new Error("Received unknown message type"));
        }
    };
    private handleClose: (event: core.CloseEvent) => void = (event) => {
        this.eventHandlers.close?.(event);
    };
    private handleError: (event: core.ErrorEvent) => void = (event) => {
        const message = event.message;
        this.eventHandlers.error?.(new Error(message));
    };

    constructor(args: RealtimeSocket.Args) {
        this.socket = args.socket;
        this.socket.addEventListener("open", this.handleOpen);
        this.socket.addEventListener("message", this.handleMessage);
        this.socket.addEventListener("close", this.handleClose);
        this.socket.addEventListener("error", this.handleError);
    }

    /** The current state of the connection; this is one of the readyState constants. */
    get readyState(): number {
        return this.socket.readyState;
    }

    /**
     * @param event - The event to attach to.
     * @param callback - The callback to run when the event is triggered.
     */
    public on<T extends keyof RealtimeSocket.EventHandlers>(event: T, callback: RealtimeSocket.EventHandlers[T]) {
        this.eventHandlers[event] = callback;
    }

    public sendSend(message: SeedWebsocket.SendEvent): void {
        this.assertSocketIsOpen();
        const jsonPayload = SendEvent.jsonOrThrow(message, {
            unrecognizedObjectKeys: "strip",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            skipValidation: true,
        });
        this.socket.send(JSON.stringify(jsonPayload));
    }

    public sendSend2(message: SeedWebsocket.SendEvent2): void {
        this.assertSocketIsOpen();
        const jsonPayload = SendEvent2.jsonOrThrow(message, {
            unrecognizedObjectKeys: "strip",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            skipValidation: true,
        });
        this.socket.send(JSON.stringify(jsonPayload));
    }

    public connect(): RealtimeSocket {
        this.socket.reconnect();

        this.socket.addEventListener("open", this.handleOpen);
        this.socket.addEventListener("message", this.handleMessage);
        this.socket.addEventListener("close", this.handleClose);
        this.socket.addEventListener("error", this.handleError);

        return this;
    }

    public close(): void {
        this.socket.close();

        this.handleClose({ code: 1000 } as CloseEvent);

        this.socket.removeEventListener("open", this.handleOpen);
        this.socket.removeEventListener("message", this.handleMessage);
        this.socket.removeEventListener("close", this.handleClose);
        this.socket.removeEventListener("error", this.handleError);
    }

    public async waitForOpen(): Promise<core.ReconnectingWebSocket> {
        if (this.socket.readyState === core.ReconnectingWebSocket.OPEN) {
            return this.socket;
        }

        return new Promise((resolve, reject) => {
            this.socket.addEventListener("open", () => {
                resolve(this.socket);
            });

            this.socket.addEventListener("error", (event: unknown) => {
                reject(event);
            });
        });
    }

    private assertSocketIsOpen(): void {
        if (!this.socket) {
            throw new Error("Socket is not connected.");
        }

        if (this.socket.readyState !== core.ReconnectingWebSocket.OPEN) {
            throw new Error("Socket is not open.");
        }
    }

    private sendBinary(payload: ArrayBufferLike | Blob | ArrayBufferView): void {
        this.socket.send(payload);
    }
}
