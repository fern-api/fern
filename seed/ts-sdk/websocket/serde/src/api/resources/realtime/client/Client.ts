// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions } from "../../../../BaseClient.js";
import * as core from "../../../../core/index.js";
import { RealtimeSocket } from "./Socket.js";

export declare namespace Realtime {
    export interface Options extends BaseClientOptions {}

    export interface ConnectArgs {
        id: string;
        model?: string | undefined;
        temperature?: number | undefined;
        /** Arbitrary headers to send with the websocket connect request. */
        headers?: Record<string, string>;
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
    }
}

export class Realtime {
    protected readonly _options: Realtime.Options;

    constructor(_options: Realtime.Options) {
        this._options = _options;
    }

    public async connect(args: Realtime.ConnectArgs): Promise<RealtimeSocket> {
        const { id, model, temperature, headers, debug, reconnectAttempts } = args;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (model != null) {
            _queryParams.model = model;
        }

        if (temperature != null) {
            _queryParams.temperature = temperature.toString();
        }

        const _headers: Record<string, unknown> = { ...headers };
        const socket = new core.ReconnectingWebSocket({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/realtime/${core.url.encodePathParam(id)}`,
            ),
            protocols: [],
            queryParameters: _queryParams,
            headers: _headers,
            options: { debug: debug ?? false, maxRetries: reconnectAttempts ?? 30 },
        });
        return new RealtimeSocket({ socket });
    }
}
