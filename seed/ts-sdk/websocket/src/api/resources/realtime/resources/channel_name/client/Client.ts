/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import qs from "qs";
import { ChatSocket } from "./Socket";
import { SDK_VERSION } from "../../../../../../version";
import * as core from "../../../../../../core";

export declare namespace Chat {
    export interface Options {
        environment: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        accessToken?: core.Supplier<string | undefined>;
    }

    export interface ConnectArgs {
        /** Enable debug mode on the websocket. Defaults to false. */
        debug?: boolean;
        /** Number of reconnect attempts. Defaults to 30. */
        reconnectAttempts?: number;
        /** The ID of the configuration. */
        configId?: string;
        /** The version of the configuration. */
        configVersion?: string;
        /** The ID of a chat group, used to resume a previous chat. */
        resumedChatGroupId?: string;
        /** A flag to enable verbose transcription. Set this query parameter to `true` to have unfinalized user transcripts be sent to the client as interim UserMessage messages. The [interim](/reference/empathic-voice-interface-evi/chat/chat#receive.User%20Message.interim) field on a [UserMessage](/reference/empathic-voice-interface-evi/chat/chat#receive.User%20Message.type) denotes whether the message is "interim" or "final." */
        verboseTranscription?: boolean;
        /** Extra query parameters sent at WebSocket connection */
        queryParams?: Record<string, string | string[] | object | object[]>;
    }
}

export class Client {
    async connect(url: string): Promise<void> {
        await this._ws?.connect(url);
    }

    async disconnect(): Promise<void> {
        await this._ws?.disconnect();
    }

    async send(data: unknown): Promise<void> {
        await this._ws?.send(JSON.stringify(data));
    }
}
