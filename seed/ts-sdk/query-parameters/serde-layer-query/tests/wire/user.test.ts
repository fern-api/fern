/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedQueryParametersClient } from "../../src/Client";

describe("User", () => {
    test("getUsername", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedQueryParametersClient({ environment: server.baseUrl });

        const rawResponseBody = { name: "name", tags: ["tags", "tags"] };
        server.mockEndpoint().get("/user").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.getUsername({
            limit: 1,
            id: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            date: "2023-01-15",
            deadline: new Date("2024-01-15T09:30:00.000Z"),
            bytes: "SGVsbG8gd29ybGQh",
            user: {
                name: "name",
                tags: ["tags", "tags"],
            },
            userList: [
                {
                    name: "name",
                    tags: ["tags", "tags"],
                },
                {
                    name: "name",
                    tags: ["tags", "tags"],
                },
            ],
            optionalDeadline: new Date("2024-01-15T09:30:00.000Z"),
            keyValue: {
                keyValue: "keyValue",
            },
            optionalString: "optionalString",
            nestedUser: {
                name: "name",
                user: {
                    name: "name",
                    tags: ["tags", "tags"],
                },
            },
            optionalUser: {
                name: "name",
                tags: ["tags", "tags"],
            },
            excludeUser: {
                name: "name",
                tags: ["tags", "tags"],
            },
            filter: "filter",
        });
        expect(response).toEqual({
            name: "name",
            tags: ["tags", "tags"],
        });
    });
});
