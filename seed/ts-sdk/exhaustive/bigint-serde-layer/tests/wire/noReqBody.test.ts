/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedExhaustiveClient } from "../../src/Client";

describe("NoReqBody", () => {
    test("getWithNoRequestBody", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            string: "string",
            integer: 1,
            long: BigInt(1000000),
            double: 1.1,
            bool: true,
            datetime: "2024-01-15T09:30:00Z",
            date: "2023-01-15",
            uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            base64: "SGVsbG8gd29ybGQh",
            list: ["list", "list"],
            set: ["set"],
            map: { "1": "map" },
            bigint: BigInt("1000000"),
        };
        server.mockEndpoint().get("/no-req-body").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.noReqBody.getWithNoRequestBody();
        expect(response).toEqual({
            string: "string",
            integer: 1,
            long: BigInt("1000000"),
            double: 1.1,
            bool: true,
            datetime: new Date("2024-01-15T09:30:00.000Z"),
            date: "2023-01-15",
            uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            base64: "SGVsbG8gd29ybGQh",
            list: ["list", "list"],
            set: new Set(["set"]),
            map: {
                1: "map",
            },
            bigint: BigInt("1000000"),
        });
    });

    test("postWithNoRequestBody", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = "string";
        server.mockEndpoint().post("/no-req-body").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.noReqBody.postWithNoRequestBody();
        expect(response).toEqual("string");
    });
});
