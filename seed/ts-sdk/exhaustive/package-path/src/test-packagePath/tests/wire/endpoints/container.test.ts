/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { SeedExhaustiveClient } from "../../../Client.js";

describe("Container", () => {
    test("getAndReturnListOfPrimitives", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = ["string", "string"];
        const rawResponseBody = ["string", "string"];
        server
            .mockEndpoint()
            .post("/container/list-of-primitives")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.container.getAndReturnListOfPrimitives(["string", "string"]);
        expect(response).toEqual(["string", "string"]);
    });

    test("getAndReturnListOfObjects", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ string: "string" }, { string: "string" }];
        const rawResponseBody = [{ string: "string" }, { string: "string" }];
        server
            .mockEndpoint()
            .post("/container/list-of-objects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.container.getAndReturnListOfObjects([
            {
                string: "string",
            },
            {
                string: "string",
            },
        ]);
        expect(response).toEqual([
            {
                string: "string",
            },
            {
                string: "string",
            },
        ]);
    });

    test("getAndReturnSetOfPrimitives", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = ["string"];
        const rawResponseBody = ["string"];
        server
            .mockEndpoint()
            .post("/container/set-of-primitives")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.container.getAndReturnSetOfPrimitives(["string"]);
        expect(response).toEqual(["string"]);
    });

    test("getAndReturnSetOfObjects", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ string: "string" }];
        const rawResponseBody = [{ string: "string" }];
        server
            .mockEndpoint()
            .post("/container/set-of-objects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.container.getAndReturnSetOfObjects([
            {
                string: "string",
            },
        ]);
        expect(response).toEqual([
            {
                string: "string",
            },
        ]);
    });

    test("getAndReturnMapPrimToPrim", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { string: "string" };
        const rawResponseBody = { string: "string" };
        server
            .mockEndpoint()
            .post("/container/map-prim-to-prim")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.container.getAndReturnMapPrimToPrim({
            string: "string",
        });
        expect(response).toEqual({
            string: "string",
        });
    });

    test("getAndReturnMapOfPrimToObject", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { string: { string: "string" } };
        const rawResponseBody = { string: { string: "string" } };
        server
            .mockEndpoint()
            .post("/container/map-prim-to-object")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.container.getAndReturnMapOfPrimToObject({
            string: {
                string: "string",
            },
        });
        expect(response).toEqual({
            string: {
                string: "string",
            },
        });
    });

    test("getAndReturnOptional", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { string: "string" };
        const rawResponseBody = { string: "string" };
        server
            .mockEndpoint()
            .post("/container/opt-objects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.container.getAndReturnOptional({
            string: "string",
        });
        expect(response).toEqual({
            string: "string",
        });
    });
});
