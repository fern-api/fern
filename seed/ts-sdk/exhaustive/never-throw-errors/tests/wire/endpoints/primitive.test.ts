/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SeedExhaustiveClient } from "../../../src/Client";

describe("Primitive", () => {
    test("getAndReturnString", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = "string";
        server
            .mockEndpoint()
            .post("/primitive/string")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnString("string");
        expect(response).toEqual({
            body: "string",
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnInt", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = 1;
        const rawResponseBody = 1;
        server
            .mockEndpoint()
            .post("/primitive/integer")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnInt(1);
        expect(response).toEqual({
            body: 1,
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnLong", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = 1000000;
        const rawResponseBody = 1000000;
        server
            .mockEndpoint()
            .post("/primitive/long")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnLong(1000000);
        expect(response).toEqual({
            body: 1000000,
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnDouble", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = 1.1;
        const rawResponseBody = 1.1;
        server
            .mockEndpoint()
            .post("/primitive/double")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnDouble(1.1);
        expect(response).toEqual({
            body: 1.1,
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnBool", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = true;
        const rawResponseBody = true;
        server
            .mockEndpoint()
            .post("/primitive/boolean")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnBool(true);
        expect(response).toEqual({
            body: true,
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnDatetime", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "2024-01-15T09:30:00Z";
        const rawResponseBody = "2024-01-15T09:30:00Z";
        server
            .mockEndpoint()
            .post("/primitive/datetime")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnDatetime("2024-01-15T09:30:00Z");
        expect(response).toEqual({
            body: "2024-01-15T09:30:00Z",
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnDate", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "2023-01-15";
        const rawResponseBody = "2023-01-15";
        server
            .mockEndpoint()
            .post("/primitive/date")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnDate("2023-01-15");
        expect(response).toEqual({
            body: "2023-01-15",
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnUUID", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32";
        const rawResponseBody = "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32";
        server
            .mockEndpoint()
            .post("/primitive/uuid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnUuid("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        expect(response).toEqual({
            body: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });

    test("getAndReturnBase64", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "SGVsbG8gd29ybGQh";
        const rawResponseBody = "SGVsbG8gd29ybGQh";
        server
            .mockEndpoint()
            .post("/primitive/base64")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.primitive.getAndReturnBase64("SGVsbG8gd29ybGQh");
        expect(response).toEqual({
            body: "SGVsbG8gd29ybGQh",
            ok: true,
            headers: expect.any(Object),
            rawResponse: expect.any(Object),
        });
    });
});
