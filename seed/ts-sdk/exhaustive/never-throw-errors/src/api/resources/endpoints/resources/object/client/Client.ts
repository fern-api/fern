/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../../../core/index.js";
import * as SeedExhaustive from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";

export declare namespace Object_ {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Object_ {
    protected readonly _options: Object_.Options;

    constructor(_options: Object_.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedExhaustive.types.ObjectWithOptionalField} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.object.getAndReturnWithOptionalField({
     *         string: "string",
     *         integer: 1,
     *         long: 1000000,
     *         double: 1.1,
     *         bool: true,
     *         datetime: "2024-01-15T09:30:00Z",
     *         date: "2023-01-15",
     *         uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *         base64: "SGVsbG8gd29ybGQh",
     *         list: ["list", "list"],
     *         set: ["set"],
     *         map: {
     *             1: "map"
     *         },
     *         bigint: "1000000"
     *     })
     */
    public getAndReturnWithOptionalField(
        request: SeedExhaustive.types.ObjectWithOptionalField,
        requestOptions?: Object_.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedExhaustive.types.ObjectWithOptionalField,
            SeedExhaustive.endpoints.object.getAndReturnWithOptionalField.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getAndReturnWithOptionalField(request, requestOptions));
    }

    private async __getAndReturnWithOptionalField(
        request: SeedExhaustive.types.ObjectWithOptionalField,
        requestOptions?: Object_.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedExhaustive.types.ObjectWithOptionalField,
                SeedExhaustive.endpoints.object.getAndReturnWithOptionalField.Error
            >
        >
    > {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/object/get-and-return-with-optional-field",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as SeedExhaustive.types.ObjectWithOptionalField,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.object.getAndReturnWithOptionalField.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedExhaustive.types.ObjectWithRequiredField} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.object.getAndReturnWithRequiredField({
     *         string: "string"
     *     })
     */
    public getAndReturnWithRequiredField(
        request: SeedExhaustive.types.ObjectWithRequiredField,
        requestOptions?: Object_.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedExhaustive.types.ObjectWithRequiredField,
            SeedExhaustive.endpoints.object.getAndReturnWithRequiredField.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getAndReturnWithRequiredField(request, requestOptions));
    }

    private async __getAndReturnWithRequiredField(
        request: SeedExhaustive.types.ObjectWithRequiredField,
        requestOptions?: Object_.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedExhaustive.types.ObjectWithRequiredField,
                SeedExhaustive.endpoints.object.getAndReturnWithRequiredField.Error
            >
        >
    > {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/object/get-and-return-with-required-field",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as SeedExhaustive.types.ObjectWithRequiredField,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.object.getAndReturnWithRequiredField.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedExhaustive.types.ObjectWithMapOfMap} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.object.getAndReturnWithMapOfMap({
     *         map: {
     *             "map": {
     *                 "map": "map"
     *             }
     *         }
     *     })
     */
    public getAndReturnWithMapOfMap(
        request: SeedExhaustive.types.ObjectWithMapOfMap,
        requestOptions?: Object_.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedExhaustive.types.ObjectWithMapOfMap,
            SeedExhaustive.endpoints.object.getAndReturnWithMapOfMap.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__getAndReturnWithMapOfMap(request, requestOptions));
    }

    private async __getAndReturnWithMapOfMap(
        request: SeedExhaustive.types.ObjectWithMapOfMap,
        requestOptions?: Object_.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedExhaustive.types.ObjectWithMapOfMap,
                SeedExhaustive.endpoints.object.getAndReturnWithMapOfMap.Error
            >
        >
    > {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/object/get-and-return-with-map-of-map",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as SeedExhaustive.types.ObjectWithMapOfMap,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.object.getAndReturnWithMapOfMap.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedExhaustive.types.NestedObjectWithOptionalField} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.object.getAndReturnNestedWithOptionalField({
     *         string: "string",
     *         NestedObject: {
     *             string: "string",
     *             integer: 1,
     *             long: 1000000,
     *             double: 1.1,
     *             bool: true,
     *             datetime: "2024-01-15T09:30:00Z",
     *             date: "2023-01-15",
     *             uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             base64: "SGVsbG8gd29ybGQh",
     *             list: ["list", "list"],
     *             set: ["set"],
     *             map: {
     *                 1: "map"
     *             },
     *             bigint: "1000000"
     *         }
     *     })
     */
    public getAndReturnNestedWithOptionalField(
        request: SeedExhaustive.types.NestedObjectWithOptionalField,
        requestOptions?: Object_.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedExhaustive.types.NestedObjectWithOptionalField,
            SeedExhaustive.endpoints.object.getAndReturnNestedWithOptionalField.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__getAndReturnNestedWithOptionalField(request, requestOptions),
        );
    }

    private async __getAndReturnNestedWithOptionalField(
        request: SeedExhaustive.types.NestedObjectWithOptionalField,
        requestOptions?: Object_.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedExhaustive.types.NestedObjectWithOptionalField,
                SeedExhaustive.endpoints.object.getAndReturnNestedWithOptionalField.Error
            >
        >
    > {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/object/get-and-return-nested-with-optional-field",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as SeedExhaustive.types.NestedObjectWithOptionalField,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.object.getAndReturnNestedWithOptionalField.Error._unknown(
                    _response.error,
                ),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {string} string_
     * @param {SeedExhaustive.types.NestedObjectWithRequiredField} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.object.getAndReturnNestedWithRequiredField("string", {
     *         string: "string",
     *         NestedObject: {
     *             string: "string",
     *             integer: 1,
     *             long: 1000000,
     *             double: 1.1,
     *             bool: true,
     *             datetime: "2024-01-15T09:30:00Z",
     *             date: "2023-01-15",
     *             uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *             base64: "SGVsbG8gd29ybGQh",
     *             list: ["list", "list"],
     *             set: ["set"],
     *             map: {
     *                 1: "map"
     *             },
     *             bigint: "1000000"
     *         }
     *     })
     */
    public getAndReturnNestedWithRequiredField(
        string_: string,
        request: SeedExhaustive.types.NestedObjectWithRequiredField,
        requestOptions?: Object_.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedExhaustive.types.NestedObjectWithRequiredField,
            SeedExhaustive.endpoints.object.getAndReturnNestedWithRequiredField.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__getAndReturnNestedWithRequiredField(string_, request, requestOptions),
        );
    }

    private async __getAndReturnNestedWithRequiredField(
        string_: string,
        request: SeedExhaustive.types.NestedObjectWithRequiredField,
        requestOptions?: Object_.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedExhaustive.types.NestedObjectWithRequiredField,
                SeedExhaustive.endpoints.object.getAndReturnNestedWithRequiredField.Error
            >
        >
    > {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/object/get-and-return-nested-with-required-field/${encodeURIComponent(string_)}`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as SeedExhaustive.types.NestedObjectWithRequiredField,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.object.getAndReturnNestedWithRequiredField.Error._unknown(
                    _response.error,
                ),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedExhaustive.types.NestedObjectWithRequiredField[]} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.object.getAndReturnNestedWithRequiredFieldAsList([{
     *             string: "string",
     *             NestedObject: {
     *                 string: "string",
     *                 integer: 1,
     *                 long: 1000000,
     *                 double: 1.1,
     *                 bool: true,
     *                 datetime: "2024-01-15T09:30:00Z",
     *                 date: "2023-01-15",
     *                 uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *                 base64: "SGVsbG8gd29ybGQh",
     *                 list: ["list", "list"],
     *                 set: ["set"],
     *                 map: {
     *                     1: "map"
     *                 },
     *                 bigint: "1000000"
     *             }
     *         }, {
     *             string: "string",
     *             NestedObject: {
     *                 string: "string",
     *                 integer: 1,
     *                 long: 1000000,
     *                 double: 1.1,
     *                 bool: true,
     *                 datetime: "2024-01-15T09:30:00Z",
     *                 date: "2023-01-15",
     *                 uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
     *                 base64: "SGVsbG8gd29ybGQh",
     *                 list: ["list", "list"],
     *                 set: ["set"],
     *                 map: {
     *                     1: "map"
     *                 },
     *                 bigint: "1000000"
     *             }
     *         }])
     */
    public getAndReturnNestedWithRequiredFieldAsList(
        request: SeedExhaustive.types.NestedObjectWithRequiredField[],
        requestOptions?: Object_.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedExhaustive.types.NestedObjectWithRequiredField,
            SeedExhaustive.endpoints.object.getAndReturnNestedWithRequiredFieldAsList.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(
            this.__getAndReturnNestedWithRequiredFieldAsList(request, requestOptions),
        );
    }

    private async __getAndReturnNestedWithRequiredFieldAsList(
        request: SeedExhaustive.types.NestedObjectWithRequiredField[],
        requestOptions?: Object_.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedExhaustive.types.NestedObjectWithRequiredField,
                SeedExhaustive.endpoints.object.getAndReturnNestedWithRequiredFieldAsList.Error
            >
        >
    > {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/object/get-and-return-nested-with-required-field-list",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as SeedExhaustive.types.NestedObjectWithRequiredField,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.object.getAndReturnNestedWithRequiredFieldAsList.Error._unknown(
                    _response.error,
                ),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {SeedExhaustive.types.ObjectWithOptionalField} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.object.testIntegerOverflowEdgeCases({
     *         string: "boundary-test",
     *         integer: 2147483647,
     *         double: 1.7976931348623157e+308,
     *         bool: true
     *     })
     *
     * @example
     *     await client.endpoints.object.testIntegerOverflowEdgeCases({
     *         string: "just-over-boundary",
     *         integer: 2147483648,
     *         double: 2,
     *         bool: false
     *     })
     *
     * @example
     *     await client.endpoints.object.testIntegerOverflowEdgeCases({
     *         string: "just-under-boundary",
     *         integer: -2147483649,
     *         double: -2,
     *         bool: true
     *     })
     *
     * @example
     *     await client.endpoints.object.testIntegerOverflowEdgeCases({
     *         string: "large-positive",
     *         integer: 1000000000000,
     *         double: 1000000000000,
     *         bool: false
     *     })
     *
     * @example
     *     await client.endpoints.object.testIntegerOverflowEdgeCases({
     *         string: "large-negative",
     *         integer: -1000000000000,
     *         double: -1000000000000,
     *         bool: true
     *     })
     */
    public testIntegerOverflowEdgeCases(
        request: SeedExhaustive.types.ObjectWithOptionalField,
        requestOptions?: Object_.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<
            SeedExhaustive.types.ObjectWithOptionalField,
            SeedExhaustive.endpoints.object.testIntegerOverflowEdgeCases.Error
        >
    > {
        return core.HttpResponsePromise.fromPromise(this.__testIntegerOverflowEdgeCases(request, requestOptions));
    }

    private async __testIntegerOverflowEdgeCases(
        request: SeedExhaustive.types.ObjectWithOptionalField,
        requestOptions?: Object_.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<
                SeedExhaustive.types.ObjectWithOptionalField,
                SeedExhaustive.endpoints.object.testIntegerOverflowEdgeCases.Error
            >
        >
    > {
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/object/test-integer-overflow-edge-cases",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as SeedExhaustive.types.ObjectWithOptionalField,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.object.testIntegerOverflowEdgeCases.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
