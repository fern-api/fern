// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import * as core from "../../../../../../core/index.js";
import * as SeedExhaustive from "../../../../../index.js";

export declare namespace Urls {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Urls {
    protected readonly _options: Urls.Options;

    constructor(_options: Urls.Options) {
        this._options = _options;
    }

    /**
     * @param {Urls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.urls.withMixedCase()
     */
    public withMixedCase(
        requestOptions?: Urls.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<string, SeedExhaustive.endpoints.urls.withMixedCase.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__withMixedCase(requestOptions));
    }

    private async __withMixedCase(
        requestOptions?: Urls.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<string, SeedExhaustive.endpoints.urls.withMixedCase.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/urls/MixedCase",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as string,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.urls.withMixedCase.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {Urls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.urls.noEndingSlash()
     */
    public noEndingSlash(
        requestOptions?: Urls.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<string, SeedExhaustive.endpoints.urls.noEndingSlash.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__noEndingSlash(requestOptions));
    }

    private async __noEndingSlash(
        requestOptions?: Urls.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<string, SeedExhaustive.endpoints.urls.noEndingSlash.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/urls/no-ending-slash",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as string,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.urls.noEndingSlash.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {Urls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.urls.withEndingSlash()
     */
    public withEndingSlash(
        requestOptions?: Urls.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<string, SeedExhaustive.endpoints.urls.withEndingSlash.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__withEndingSlash(requestOptions));
    }

    private async __withEndingSlash(
        requestOptions?: Urls.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<string, SeedExhaustive.endpoints.urls.withEndingSlash.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/urls/with-ending-slash/",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as string,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.urls.withEndingSlash.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    /**
     * @param {Urls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.urls.withUnderscores()
     */
    public withUnderscores(
        requestOptions?: Urls.RequestOptions,
    ): core.HttpResponsePromise<core.APIResponse<string, SeedExhaustive.endpoints.urls.withUnderscores.Error>> {
        return core.HttpResponsePromise.fromPromise(this.__withUnderscores(requestOptions));
    }

    private async __withUnderscores(
        requestOptions?: Urls.RequestOptions,
    ): Promise<core.WithRawResponse<core.APIResponse<string, SeedExhaustive.endpoints.urls.withUnderscores.Error>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/urls/with_underscores",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as string,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: SeedExhaustive.endpoints.urls.withUnderscores.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
