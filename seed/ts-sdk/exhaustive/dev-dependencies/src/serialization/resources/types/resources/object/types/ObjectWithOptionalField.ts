/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Fiddle from "../../../../../../api/index";
import * as core from "../../../../../../core";

export const ObjectWithOptionalField: core.serialization.ObjectSchema<
    serializers.types.ObjectWithOptionalField.Raw,
    Fiddle.types.ObjectWithOptionalField
> = core.serialization.object({
    string: core.serialization.string().optional(),
    integer: core.serialization.number().optional(),
    long: core.serialization.number().optional(),
    double: core.serialization.number().optional(),
    bool: core.serialization.boolean().optional(),
    datetime: core.serialization.date().optional(),
    date: core.serialization.string().optional(),
    uuid: core.serialization.string().optional(),
    base64: core.serialization.string().optional(),
    list: core.serialization.list(core.serialization.string()).optional(),
    set: core.serialization.set(core.serialization.string()).optional(),
    map: core.serialization.record(core.serialization.number(), core.serialization.string()).optional(),
    bigint: core.serialization.string().optional(),
});

export declare namespace ObjectWithOptionalField {
    export interface Raw {
        string?: string | null;
        integer?: number | null;
        long?: number | null;
        double?: number | null;
        bool?: boolean | null;
        datetime?: string | null;
        date?: string | null;
        uuid?: string | null;
        base64?: string | null;
        list?: string[] | null;
        set?: string[] | null;
        map?: Record<number, string> | null;
        bigint?: string | null;
    }
}
