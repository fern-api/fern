/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { FiddleClient } from "../../../src/Client";

describe("Primitive", () => {
    test("getAndReturnString", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/primitive/string")
            .requestJsonBody("string")
            .respondWithJsonBody("string")
            .build();

        const response = await client.endpoints.primitive.getAndReturnString("string");
        expect(response).toEqual("string");
    });

    test("getAndReturnInt", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server.buildHttpHandler().post("/primitive/integer").requestJsonBody(1).respondWithJsonBody(1).build();

        const response = await client.endpoints.primitive.getAndReturnInt(1);
        expect(response).toEqual(1);
    });

    test("getAndReturnLong", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server.buildHttpHandler().post("/primitive/long").requestJsonBody(1000000).respondWithJsonBody(1000000).build();

        const response = await client.endpoints.primitive.getAndReturnLong(1000000);
        expect(response).toEqual(1000000);
    });

    test("getAndReturnDouble", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server.buildHttpHandler().post("/primitive/double").requestJsonBody(1.1).respondWithJsonBody(1.1).build();

        const response = await client.endpoints.primitive.getAndReturnDouble(1.1);
        expect(response).toEqual(1.1);
    });

    test("getAndReturnBool", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server.buildHttpHandler().post("/primitive/boolean").requestJsonBody(true).respondWithJsonBody(true).build();

        const response = await client.endpoints.primitive.getAndReturnBool(true);
        expect(response).toEqual(true);
    });

    test("getAndReturnDatetime", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/primitive/datetime")
            .requestJsonBody("2024-01-15T09:30:00Z")
            .respondWithJsonBody("2024-01-15T09:30:00Z")
            .build();

        const response = await client.endpoints.primitive.getAndReturnDatetime("2024-01-15T09:30:00Z");
        expect(response).toEqual("2024-01-15T09:30:00Z");
    });

    test("getAndReturnDate", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/primitive/date")
            .requestJsonBody("2023-01-15")
            .respondWithJsonBody("2023-01-15")
            .build();

        const response = await client.endpoints.primitive.getAndReturnDate("2023-01-15");
        expect(response).toEqual("2023-01-15");
    });

    test("getAndReturnUuid", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/primitive/uuid")
            .requestJsonBody("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
            .respondWithJsonBody("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
            .build();

        const response = await client.endpoints.primitive.getAndReturnUuid("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
        expect(response).toEqual("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32");
    });

    test("getAndReturnBase64", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/primitive/base64")
            .requestJsonBody("SGVsbG8gd29ybGQh")
            .respondWithJsonBody("SGVsbG8gd29ybGQh")
            .build();

        const response = await client.endpoints.primitive.getAndReturnBase64("SGVsbG8gd29ybGQh");
        expect(response).toEqual("SGVsbG8gd29ybGQh");
    });
});
