/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { FiddleClient } from "../../../src/Client";

describe("Container", () => {
    test("getAndReturnListOfPrimitives", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/container/list-of-primitives")
            .requestJsonBody(["string", "string"])
            .respondWithJsonBody(["string", "string"])
            .build();

        const response = await client.endpoints.container.getAndReturnListOfPrimitives(["string", "string"]);
        expect(response).toEqual(["string", "string"]);
    });

    test("getAndReturnListOfObjects", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/container/list-of-objects")
            .requestJsonBody([{ string: "string" }, { string: "string" }])
            .respondWithJsonBody([{ string: "string" }, { string: "string" }])
            .build();

        const response = await client.endpoints.container.getAndReturnListOfObjects([
            {
                string: "string",
            },
            {
                string: "string",
            },
        ]);
        expect(response).toEqual([{ string: "string" }, { string: "string" }]);
    });

    test("getAndReturnSetOfPrimitives", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/container/set-of-primitives")
            .requestJsonBody(["string"])
            .respondWithJsonBody(["string"])
            .build();

        const response = await client.endpoints.container.getAndReturnSetOfPrimitives(["string"]);
        expect(response).toEqual(["string"]);
    });

    test("getAndReturnSetOfObjects", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/container/set-of-objects")
            .requestJsonBody([{ string: "string" }])
            .respondWithJsonBody([{ string: "string" }])
            .build();

        const response = await client.endpoints.container.getAndReturnSetOfObjects([
            {
                string: "string",
            },
        ]);
        expect(response).toEqual([{ string: "string" }]);
    });

    test("getAndReturnMapPrimToPrim", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/container/map-prim-to-prim")
            .requestJsonBody({ string: "string" })
            .respondWithJsonBody({ string: "string" })
            .build();

        const response = await client.endpoints.container.getAndReturnMapPrimToPrim({
            string: "string",
        });
        expect(response).toEqual({ string: "string" });
    });

    test("getAndReturnMapOfPrimToObject", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/container/map-prim-to-object")
            .requestJsonBody({ string: { string: "string" } })
            .respondWithJsonBody({ string: { string: "string" } })
            .build();

        const response = await client.endpoints.container.getAndReturnMapOfPrimToObject({
            string: {
                string: "string",
            },
        });
        expect(response).toEqual({ string: { string: "string" } });
    });

    test("getAndReturnOptional", async () => {
        const server = mockServerPool.createServer();
        const client = new FiddleClient({ token: process.env.TESTS_AUTH || "test", environment: server.baseUrl });

        server
            .buildHttpHandler()
            .post("/container/opt-objects")
            .requestJsonBody({ string: "string" })
            .respondWithJsonBody({ string: "string" })
            .build();

        const response = await client.endpoints.container.getAndReturnOptional({
            string: "string",
        });
        expect(response).toEqual({ string: "string" });
    });
});
