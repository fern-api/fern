/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import * as Fiddle from "../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";

export declare namespace ReqWithHeaders {
    interface Options {
        environment: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}

export class ReqWithHeaders {
    constructor(protected readonly _options: ReqWithHeaders.Options) {}

    public async getWithCustomHeader(
        request: Fiddle.ReqWithHeaders,
        requestOptions?: ReqWithHeaders.RequestOptions
    ): Promise<core.APIResponse<void, Fiddle.reqWithHeaders.getWithCustomHeader.Error>> {
        const { xTestServiceHeader, xTestEndpointHeader, body: _body } = request;
        const _response = await core.fetcher({
            url: urlJoin(await core.Supplier.get(this._options.environment), "/test-headers/custom-header"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "",
                "X-Fern-SDK-Version": "0.0.1",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                "X-TEST-SERVICE-HEADER": xTestServiceHeader,
                "X-TEST-ENDPOINT-HEADER": xTestEndpointHeader,
            },
            contentType: "application/json",
            body: await serializers.reqWithHeaders.getWithCustomHeader.Request.jsonOrThrow(_body, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
        });
        if (_response.ok) {
            return {
                ok: true,
                body: undefined,
            };
        }

        return {
            ok: false,
            error: Fiddle.reqWithHeaders.getWithCustomHeader.Error._unknown(_response.error),
        };
    }

    protected async _getAuthorizationHeader() {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
