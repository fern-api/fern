/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { SeedExhaustiveClient } from "../../../src/Client";
import { pool } from "../../mock-server/MockServerPool";

describe("Container", () => {
    test("getAndReturnListOfPrimitives", async () => {
        const server = pool.createServer();
        const client = new SeedExhaustiveClient({
            environment: server.baseUrl,
            token: "test",
        });

        server
            .buildHttpHandler()
            .post("/container/list-of-primitives")
            .header("Content-Type", "application/json")
            .requestJsonBody(["string", "string"])
            .respondWithJsonBody(["string", "string"])
            .build();

        const response = await client.endpoints.container.getAndReturnListOfPrimitives(["string", "string"]);
        expect(response).toEqual(["string", "string"]);
    });

    test("getAndReturnListOfObjects", async () => {
        const server = pool.createServer();
        const client = new SeedExhaustiveClient({
            environment: server.baseUrl,
            token: "test",
        });

        server
            .buildHttpHandler()
            .post("/container/list-of-objects")
            .header("Content-Type", "application/json")
            .requestJsonBody([
                {
                    string: "string",
                },
                {
                    string: "string",
                },
            ])
            .respondWithJsonBody([
                {
                    string: "string",
                },
                {
                    string: "string",
                },
            ])
            .build();

        const response = await client.endpoints.container.getAndReturnListOfObjects([
            {
                string: "string",
            },
            {
                string: "string",
            },
        ]);
        expect(response).toEqual([{ string: "string" }, { string: "string" }]);
    });

    test("getAndReturnSetOfPrimitives", async () => {
        const server = pool.createServer();
        const client = new SeedExhaustiveClient({
            environment: server.baseUrl,
            token: "test",
        });

        server
            .buildHttpHandler()
            .post("/container/set-of-primitives")
            .header("Content-Type", "application/json")
            .requestJsonBody(["string"])
            .respondWithJsonBody(["string"])
            .build();

        const response = await client.endpoints.container.getAndReturnSetOfPrimitives(["string"]);
        expect(response).toEqual(["string"]);
    });

    test("getAndReturnSetOfObjects", async () => {
        const server = pool.createServer();
        const client = new SeedExhaustiveClient({
            environment: server.baseUrl,
            token: "test",
        });

        server
            .buildHttpHandler()
            .post("/container/set-of-objects")
            .header("Content-Type", "application/json")
            .requestJsonBody([
                {
                    string: "string",
                },
            ])
            .respondWithJsonBody([
                {
                    string: "string",
                },
            ])
            .build();

        const response = await client.endpoints.container.getAndReturnSetOfObjects([
            {
                string: "string",
            },
        ]);
        expect(response).toEqual([{ string: "string" }]);
    });

    test("getAndReturnMapPrimToPrim", async () => {
        const server = pool.createServer();
        const client = new SeedExhaustiveClient({
            environment: server.baseUrl,
            token: "test",
        });

        server
            .buildHttpHandler()
            .post("/container/map-prim-to-prim")
            .header("Content-Type", "application/json")
            .requestJsonBody({
                string: "string",
            })
            .respondWithJsonBody({
                string: "string",
            })
            .build();

        const response = await client.endpoints.container.getAndReturnMapPrimToPrim({
            string: "string",
        });
        expect(response).toEqual({ string: "string" });
    });

    test("getAndReturnMapOfPrimToObject", async () => {
        const server = pool.createServer();
        const client = new SeedExhaustiveClient({
            environment: server.baseUrl,
            token: "test",
        });

        server
            .buildHttpHandler()
            .post("/container/map-prim-to-object")
            .header("Content-Type", "application/json")
            .requestJsonBody({
                string: {
                    string: "string",
                },
            })
            .respondWithJsonBody({
                string: {
                    string: "string",
                },
            })
            .build();

        const response = await client.endpoints.container.getAndReturnMapOfPrimToObject({
            string: {
                string: "string",
            },
        });
        expect(response).toEqual({ string: { string: "string" } });
    });

    test("getAndReturnOptional", async () => {
        const server = pool.createServer();
        const client = new SeedExhaustiveClient({
            environment: server.baseUrl,
            token: "test",
        });

        server
            .buildHttpHandler()
            .post("/container/opt-objects")
            .header("Content-Type", "application/json")
            .requestJsonBody({
                string: "string",
            })
            .respondWithJsonBody({
                string: "string",
            })
            .build();

        const response = await client.endpoints.container.getAndReturnOptional({
            string: "string",
        });
        expect(response).toEqual({ string: "string" });
    });
});
