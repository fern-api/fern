/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { SeedExhaustiveClient } from "../../../src/Client";

describe("Urls", () => {
    test("withMixedCase", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = "string";
        server.mockEndpoint().get("/urls/MixedCase").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.endpoints.urls.withMixedCase();
        expect(response).toEqual("string");
    });

    test("noEndingSlash", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = "string";
        server
            .mockEndpoint()
            .get("/urls/no-ending-slash")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.urls.noEndingSlash();
        expect(response).toEqual("string");
    });

    test("withEndingSlash", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = "string";
        server
            .mockEndpoint()
            .get("/urls/with-ending-slash/")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.urls.withEndingSlash();
        expect(response).toEqual("string");
    });

    test("withUnderscores", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = "string";
        server
            .mockEndpoint()
            .get("/urls/with_underscores")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.endpoints.urls.withUnderscores();
        expect(response).toEqual("string");
    });
});
