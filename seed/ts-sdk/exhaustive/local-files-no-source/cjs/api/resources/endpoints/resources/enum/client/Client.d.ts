/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../../../core/index.js";
import * as SeedExhaustive from "../../../../../index.js";
export declare namespace Enum {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class Enum {
    protected readonly _options: Enum.Options;
    constructor(_options: Enum.Options);
    /**
     * @param {SeedExhaustive.types.WeatherReport} request
     * @param {Enum.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.enum.getAndReturnEnum("SUNNY")
     */
    getAndReturnEnum(request: SeedExhaustive.types.WeatherReport, requestOptions?: Enum.RequestOptions): core.HttpResponsePromise<SeedExhaustive.types.WeatherReport>;
    private __getAndReturnEnum;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
