/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { SeedExhaustiveClient } from "../../../src/Client";

describe("HttpMethods", () => {
    test("testGet", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({
            token: process.env.TESTS_AUTH || "test",
            environment: server.baseUrl,
        });

        server.buildHttpHandler().get("/http-methods/id").respondWithJsonBody("string").build();

        const response = await client.endpoints.httpMethods.testGet("id");
        expect(response).toEqual("string");
    });

    test("testPost", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({
            token: process.env.TESTS_AUTH || "test",
            environment: server.baseUrl,
        });

        server
            .buildHttpHandler()
            .post("/http-methods")
            .requestJsonBody({ string: "string" })
            .respondWithJsonBody({
                string: "string",
                integer: 1,
                long: 1000000,
                double: 1.1,
                bool: true,
                datetime: "2024-01-15T09:30:00Z",
                date: "2023-01-15",
                uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                base64: "SGVsbG8gd29ybGQh",
                list: ["list", "list"],
                set: ["set"],
                map: { "1": "map" },
                bigint: "1000000",
            })
            .build();

        const response = await client.endpoints.httpMethods.testPost({
            string: "string",
        });
        expect(response).toEqual({
            string: "string",
            integer: 1,
            long: 1000000,
            double: 1.1,
            bool: true,
            datetime: "2024-01-15T09:30:00Z",
            date: "2023-01-15",
            uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            base64: "SGVsbG8gd29ybGQh",
            list: ["list", "list"],
            set: ["set"],
            map: { "1": "map" },
            bigint: "1000000",
        });
    });

    test("testPut", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({
            token: process.env.TESTS_AUTH || "test",
            environment: server.baseUrl,
        });

        server
            .buildHttpHandler()
            .put("/http-methods/id")
            .requestJsonBody({ string: "string" })
            .respondWithJsonBody({
                string: "string",
                integer: 1,
                long: 1000000,
                double: 1.1,
                bool: true,
                datetime: "2024-01-15T09:30:00Z",
                date: "2023-01-15",
                uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                base64: "SGVsbG8gd29ybGQh",
                list: ["list", "list"],
                set: ["set"],
                map: { "1": "map" },
                bigint: "1000000",
            })
            .build();

        const response = await client.endpoints.httpMethods.testPut("id", {
            string: "string",
        });
        expect(response).toEqual({
            string: "string",
            integer: 1,
            long: 1000000,
            double: 1.1,
            bool: true,
            datetime: "2024-01-15T09:30:00Z",
            date: "2023-01-15",
            uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            base64: "SGVsbG8gd29ybGQh",
            list: ["list", "list"],
            set: ["set"],
            map: { "1": "map" },
            bigint: "1000000",
        });
    });

    test("testPatch", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({
            token: process.env.TESTS_AUTH || "test",
            environment: server.baseUrl,
        });

        server
            .buildHttpHandler()
            .patch("/http-methods/id")
            .requestJsonBody({
                string: "string",
                integer: 1,
                long: 1000000,
                double: 1.1,
                bool: true,
                datetime: "2024-01-15T09:30:00Z",
                date: "2023-01-15",
                uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                base64: "SGVsbG8gd29ybGQh",
                list: ["list", "list"],
                set: ["set"],
                map: { "1": "map" },
                bigint: "1000000",
            })
            .respondWithJsonBody({
                string: "string",
                integer: 1,
                long: 1000000,
                double: 1.1,
                bool: true,
                datetime: "2024-01-15T09:30:00Z",
                date: "2023-01-15",
                uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
                base64: "SGVsbG8gd29ybGQh",
                list: ["list", "list"],
                set: ["set"],
                map: { "1": "map" },
                bigint: "1000000",
            })
            .build();

        const response = await client.endpoints.httpMethods.testPatch("id", {
            string: "string",
            integer: 1,
            long: BigInt("1000000"),
            double: 1.1,
            bool: true,
            datetime: "2024-01-15T09:30:00Z",
            date: "2023-01-15",
            uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            base64: "SGVsbG8gd29ybGQh",
            list: ["list", "list"],
            set: ["set"],
            map: {
                1: "map",
            },
            bigint: BigInt("1000000"),
        });
        expect(response).toEqual({
            string: "string",
            integer: 1,
            long: 1000000,
            double: 1.1,
            bool: true,
            datetime: "2024-01-15T09:30:00Z",
            date: "2023-01-15",
            uuid: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
            base64: "SGVsbG8gd29ybGQh",
            list: ["list", "list"],
            set: ["set"],
            map: { "1": "map" },
            bigint: "1000000",
        });
    });

    test("testDelete", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedExhaustiveClient({
            token: process.env.TESTS_AUTH || "test",
            environment: server.baseUrl,
        });

        server.buildHttpHandler().delete("/http-methods/id").respondWithJsonBody(true).build();

        const response = await client.endpoints.httpMethods.testDelete("id");
        expect(response).toEqual(true);
    });
});
