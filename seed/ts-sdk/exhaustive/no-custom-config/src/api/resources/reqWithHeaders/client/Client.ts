/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as SeedExhaustive from "../../../index.js";
import * as core from "../../../../core/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace ReqWithHeaders {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class ReqWithHeaders {
    protected readonly _options: ReqWithHeaders.Options;

    constructor(_options: ReqWithHeaders.Options = {}) {
        this._options = _options;
    }

    /**
     * @param {SeedExhaustive.ReqWithHeaders} request
     * @param {ReqWithHeaders.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.reqWithHeaders.getWithCustomHeader({
     *         "X-TEST-SERVICE-HEADER": "X-TEST-SERVICE-HEADER",
     *         "X-TEST-ENDPOINT-HEADER": "X-TEST-ENDPOINT-HEADER",
     *         body: "string"
     *     })
     */
    public getWithCustomHeader(
        request: SeedExhaustive.ReqWithHeaders,
        requestOptions?: ReqWithHeaders.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__getWithCustomHeader(request, requestOptions));
    }

    private async __getWithCustomHeader(
        request: SeedExhaustive.ReqWithHeaders,
        requestOptions?: ReqWithHeaders.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const {
            "X-TEST-SERVICE-HEADER": xTestServiceHeader,
            "X-TEST-ENDPOINT-HEADER": xTestEndpointHeader,
            body: _body,
        } = request;
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(),
                "X-TEST-SERVICE-HEADER": xTestServiceHeader,
                "X-TEST-ENDPOINT-HEADER": xTestEndpointHeader,
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/test-headers/custom-header",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedExhaustiveError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedExhaustiveError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedExhaustiveTimeoutError(
                    "Timeout exceeded when calling POST /test-headers/custom-header.",
                );
            case "unknown":
                throw new errors.SeedExhaustiveError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
