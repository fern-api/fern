/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as SeedExhaustive from "../index.js";

export interface Error_ {
    category: SeedExhaustive.ErrorCategory;
    code: SeedExhaustive.ErrorCode;
    detail?: string;
    field?: string;
}
export type ErrorCategory = "API_ERROR" | "AUTHENTICATION_ERROR" | "INVALID_REQUEST_ERROR";
export const ErrorCategory = {
    ApiError: "API_ERROR",
    AuthenticationError: "AUTHENTICATION_ERROR",
    InvalidRequestError: "INVALID_REQUEST_ERROR",
} as const;
export type ErrorCode =
    | "INTERNAL_SERVER_ERROR"
    | "UNAUTHORIZED"
    | "FORBIDDEN"
    | "BAD_REQUEST"
    | "CONFLICT"
    | "GONE"
    | "UNPROCESSABLE_ENTITY"
    | "NOT_IMPLEMENTED"
    | "BAD_GATEWAY"
    | "SERVICE_UNAVAILABLE"
    | "Unknown";
export const ErrorCode = {
    InternalServerError: "INTERNAL_SERVER_ERROR",
    Unauthorized: "UNAUTHORIZED",
    Forbidden: "FORBIDDEN",
    BadRequest: "BAD_REQUEST",
    Conflict: "CONFLICT",
    Gone: "GONE",
    UnprocessableEntity: "UNPROCESSABLE_ENTITY",
    NotImplemented: "NOT_IMPLEMENTED",
    BadGateway: "BAD_GATEWAY",
    ServiceUnavailable: "SERVICE_UNAVAILABLE",
    Unknown: "Unknown",
} as const;
export interface PutResponse {
    errors?: SeedExhaustive.Error_[];
}
export interface BadObjectRequestInfo {
    message: string;
}
export interface ObjectWithDocs {
    /**
     * Characters that could lead to broken generated SDKs:
     *
     * JSDoc (JavaScript/TypeScript):
     * - @: Used for JSDoc tags
     * - {: }: Used for type definitions
     * - <: >: HTML tags
     * - *: Can interfere with comment blocks
     * - /**: JSDoc comment start
     * - ** /: JSDoc comment end
     * - &: HTML entities
     *
     * XMLDoc (C#):
     * - <: >: XML tags
     * - &: ': ": <: >: XML special characters
     * - {: }: Used for interpolated strings
     * - ///: Comment marker
     * - /**: Block comment start
     * - ** /: Block comment end
     *
     * Javadoc (Java):
     * - @: Used for Javadoc tags
     * - <: >: HTML tags
     * - &: HTML entities
     * - *: Can interfere with comment blocks
     * - /**: Javadoc comment start
     * - ** /: Javadoc comment end
     *
     * Doxygen (C++):
     * - \: Used for Doxygen commands
     * - @: Alternative command prefix
     * - <: >: XML/HTML tags
     * - &: HTML entities
     * - /**: C-style comment start
     * - ** /: C-style comment end
     *
     * RDoc (Ruby):
     * - :: Used in symbol notation
     * - =: Section markers
     * - #: Comment marker
     * - =begin: Block comment start
     * - =end: Block comment end
     * - @: Instance variable prefix
     * - $: Global variable prefix
     * - %: String literal delimiter
     * - #{: String interpolation start
     * - }: String interpolation end
     *
     * PHPDoc (PHP):
     * - @: Used for PHPDoc tags
     * - {: }: Used for type definitions
     * - $: Variable prefix
     * - /**: PHPDoc comment start
     * - ** /: PHPDoc comment end
     * - *: Can interfere with comment blocks
     * - &: HTML entities
     */
    string: string;
}
export type WeatherReport = "SUNNY" | "CLOUDY" | "RAINING" | "SNOWING";
export const WeatherReport = {
    Sunny: "SUNNY",
    Cloudy: "CLOUDY",
    Raining: "RAINING",
    Snowing: "SNOWING",
} as const;
export interface ObjectWithOptionalField {
    /** This is a rather long descriptor of this single field in a more complex type. If you ask me I think this is a pretty good description for this field all things considered. */
    string?: string;
    integer?: number;
    long?: number;
    double?: number;
    bool?: boolean;
    datetime?: string;
    date?: string;
    uuid?: string;
    base64?: string;
    list?: string[];
    set?: string[];
    map?: Record<number, string>;
    bigint?: string;
}
export interface ObjectWithRequiredField {
    string: string;
}
export interface ObjectWithMapOfMap {
    map: Record<string, Record<string, string>>;
}
export interface NestedObjectWithOptionalField {
    string?: string;
    NestedObject?: SeedExhaustive.ObjectWithOptionalField;
}
export interface NestedObjectWithRequiredField {
    string: string;
    NestedObject: SeedExhaustive.ObjectWithOptionalField;
}
export interface DoubleOptional {
    optionalAlias?: SeedExhaustive.OptionalAlias | undefined;
}
export type OptionalAlias = string | undefined;
export type Animal = SeedExhaustive.Animal.Dog | SeedExhaustive.Animal.Cat;

export namespace Animal {
    export interface Dog extends SeedExhaustive.Dog {
        animal: "dog";
    }

    export interface Cat extends SeedExhaustive.Cat {
        animal: "cat";
    }
}
export interface Dog {
    name: string;
    likesToWoof: boolean;
}
export interface Cat {
    name: string;
    likesToMeow: boolean;
}
