// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import * as core from "../../../../../../core/index.js";
import * as Fiddle from "../../../../../index.js";

export declare namespace Enum {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Enum {
    protected readonly _options: Enum.Options;

    constructor(_options: Enum.Options) {
        this._options = _options;
    }

    /**
     * @param {Fiddle.types.WeatherReport} request
     * @param {Enum.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.endpoints.enum.getAndReturnEnum("SUNNY")
     */
    public getAndReturnEnum(
        request: Fiddle.types.WeatherReport,
        requestOptions?: Enum.RequestOptions,
    ): core.HttpResponsePromise<
        core.APIResponse<Fiddle.types.WeatherReport, Fiddle.endpoints.enum_.getAndReturnEnum.Error>
    > {
        return core.HttpResponsePromise.fromPromise(this.__getAndReturnEnum(request, requestOptions));
    }

    private async __getAndReturnEnum(
        request: Fiddle.types.WeatherReport,
        requestOptions?: Enum.RequestOptions,
    ): Promise<
        core.WithRawResponse<
            core.APIResponse<Fiddle.types.WeatherReport, Fiddle.endpoints.enum_.getAndReturnEnum.Error>
        >
    > {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/enum",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: {
                    ok: true,
                    body: _response.body as Fiddle.types.WeatherReport,
                    headers: _response.headers,
                    rawResponse: _response.rawResponse,
                },
                rawResponse: _response.rawResponse,
            };
        }

        return {
            data: {
                ok: false,
                error: Fiddle.endpoints.enum_.getAndReturnEnum.Error._unknown(_response.error),
                rawResponse: _response.rawResponse,
            },
            rawResponse: _response.rawResponse,
        };
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
