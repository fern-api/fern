/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ErrorCode =
    | "INTERNAL_SERVER_ERROR"
    | "UNAUTHORIZED"
    | "FORBIDDEN"
    | "BAD_REQUEST"
    | "CONFLICT"
    | "GONE"
    | "UNPROCESSABLE_ENTITY"
    | "NOT_IMPLEMENTED"
    | "BAD_GATEWAY"
    | "SERVICE_UNAVAILABLE"
    | "Unknown";
export const ErrorCode = {
    InternalServerError: "INTERNAL_SERVER_ERROR",
    Unauthorized: "UNAUTHORIZED",
    Forbidden: "FORBIDDEN",
    BadRequest: "BAD_REQUEST",
    Conflict: "CONFLICT",
    Gone: "GONE",
    UnprocessableEntity: "UNPROCESSABLE_ENTITY",
    NotImplemented: "NOT_IMPLEMENTED",
    BadGateway: "BAD_GATEWAY",
    ServiceUnavailable: "SERVICE_UNAVAILABLE",
    Unknown: "Unknown",
    _visit: <R>(value: ErrorCode, visitor: ErrorCode.Visitor<R>) => {
        switch (value) {
            case ErrorCode.InternalServerError:
                return visitor.internalServerError();
            case ErrorCode.Unauthorized:
                return visitor.unauthorized();
            case ErrorCode.Forbidden:
                return visitor.forbidden();
            case ErrorCode.BadRequest:
                return visitor.badRequest();
            case ErrorCode.Conflict:
                return visitor.conflict();
            case ErrorCode.Gone:
                return visitor.gone();
            case ErrorCode.UnprocessableEntity:
                return visitor.unprocessableEntity();
            case ErrorCode.NotImplemented:
                return visitor.notImplemented();
            case ErrorCode.BadGateway:
                return visitor.badGateway();
            case ErrorCode.ServiceUnavailable:
                return visitor.serviceUnavailable();
            case ErrorCode.Unknown:
                return visitor.unknown();
            default:
                return visitor._other();
        }
    },
} as const;

export namespace ErrorCode {
    export interface Visitor<R> {
        internalServerError: () => R;
        unauthorized: () => R;
        forbidden: () => R;
        badRequest: () => R;
        conflict: () => R;
        gone: () => R;
        unprocessableEntity: () => R;
        notImplemented: () => R;
        badGateway: () => R;
        serviceUnavailable: () => R;
        unknown: () => R;
        _other: () => R;
    }
}
