// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as core from "../../../../core/index.js";
import * as SeedErrorProperty from "../../../index.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import { mergeHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as errors from "../../../../errors/index.js";
import * as SeedErrorProperty from "../../../index.js";

export declare namespace PropertyBasedError {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class PropertyBasedError {
    protected readonly _options: PropertyBasedError.Options;

    constructor(_options: PropertyBasedError.Options) {
        this._options = _options;
    }

    /**
     * GET request that always throws an error
     *
     * @param {PropertyBasedError.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SeedErrorProperty.PropertyBasedErrorTest}
     *
     * @example
     *     await client.propertyBasedError.throwError()
     */
    public throwError(requestOptions?: PropertyBasedError.RequestOptions): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(this.__throwError(requestOptions));
    }

    private async __throwError(
        requestOptions?: PropertyBasedError.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "property-based-error",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch ((_response.error.body as any)?.errorName) {
                case "PropertyBasedErrorTest":
                    throw new SeedErrorProperty.PropertyBasedErrorTest(
                        _response.error.body as SeedErrorProperty.PropertyBasedErrorTestBody,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SeedErrorPropertyError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedErrorPropertyError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedErrorPropertyTimeoutError(
                    "Timeout exceeded when calling GET /property-based-error.",
                );
            case "unknown":
                throw new errors.SeedErrorPropertyError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
