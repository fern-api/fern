// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as core from "../../../../core/index.js";
import * as SeedNurseryApi from "../../../index.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import { mergeHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as errors from "../../../../errors/index.js";
import type * as SeedNurseryApi from "../../../index.js";

export declare namespace Package {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Package {
    protected readonly _options: Package.Options;

    constructor(_options: Package.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedNurseryApi.TestRequest} request
     * @param {Package.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.package.test({
     *         "for": "for"
     *     })
     */
    public test(
        request: SeedNurseryApi.TestRequest,
        requestOptions?: Package.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__test(request, requestOptions));
    }

    private async __test(
        request: SeedNurseryApi.TestRequest,
        requestOptions?: Package.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { for: for_ } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams.for = for_;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url:
                (await core.Supplier.get(this._options.baseUrl)) ??
                (await core.Supplier.get(this._options.environment)),
            method: "POST",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNurseryApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNurseryApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNurseryApiTimeoutError("Timeout exceeded when calling POST /.");
            case "unknown":
                throw new errors.SeedNurseryApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
