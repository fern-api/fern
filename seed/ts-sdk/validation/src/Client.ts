/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import * as SeedValidation from "./api/index.js";
import urlJoin from "url-join";
import * as errors from "./errors/index.js";

export declare namespace SeedValidationClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class SeedValidationClient {
    protected readonly _options: SeedValidationClient.Options;

    constructor(_options: SeedValidationClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/validation",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/validation/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    /**
     * @param {SeedValidation.CreateRequest} request
     * @param {SeedValidationClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.create({
     *         decimal: 2.2,
     *         even: 100,
     *         name: "fern",
     *         shape: "SQUARE"
     *     })
     */
    public create(
        request: SeedValidation.CreateRequest,
        requestOptions?: SeedValidationClient.RequestOptions,
    ): core.HttpResponsePromise<SeedValidation.Type> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: SeedValidation.CreateRequest,
        requestOptions?: SeedValidationClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedValidation.Type>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/create",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedValidation.Type, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedValidationError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedValidationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedValidationTimeoutError("Timeout exceeded when calling POST /create.");
            case "unknown":
                throw new errors.SeedValidationError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedValidation.GetRequest} request
     * @param {SeedValidationClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.get({
     *         decimal: 2.2,
     *         even: 100,
     *         name: "fern"
     *     })
     */
    public get(
        request: SeedValidation.GetRequest,
        requestOptions?: SeedValidationClient.RequestOptions,
    ): core.HttpResponsePromise<SeedValidation.Type> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: SeedValidation.GetRequest,
        requestOptions?: SeedValidationClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedValidation.Type>> {
        const { decimal, even, name } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["decimal"] = decimal.toString();
        _queryParams["even"] = even.toString();
        _queryParams["name"] = name;
        const _response = await core.fetcher({
            url:
                (await core.Supplier.get(this._options.baseUrl)) ??
                (await core.Supplier.get(this._options.environment)),
            method: "GET",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedValidation.Type, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedValidationError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedValidationError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedValidationTimeoutError("Timeout exceeded when calling GET /.");
            case "unknown":
                throw new errors.SeedValidationError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
