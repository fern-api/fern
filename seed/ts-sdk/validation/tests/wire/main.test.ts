/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedValidationClient } from "../../src/Client";

describe("SeedValidationClient", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedValidationClient({ environment: server.baseUrl });
        const rawRequestBody = { decimal: 2.2, even: 100, name: "fern", shape: "SQUARE" };
        const rawResponseBody = { decimal: 2.2, even: 100, name: "fern", shape: "SQUARE" };
        server
            .mockEndpoint()
            .post("/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.create({
            decimal: 2.2,
            even: 100,
            name: "fern",
            shape: "SQUARE",
        });
        expect(response).toEqual({
            decimal: 2.2,
            even: 100,
            name: "fern",
            shape: "SQUARE",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedValidationClient({ environment: server.baseUrl });

        const rawResponseBody = { decimal: 2.2, even: 100, name: "fern", shape: "SQUARE" };
        server.mockEndpoint().get("").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.get({
            decimal: 2.2,
            even: 100,
            name: "fern",
        });
        expect(response).toEqual({
            decimal: 2.2,
            even: 100,
            name: "fern",
            shape: "SQUARE",
        });
    });
});
