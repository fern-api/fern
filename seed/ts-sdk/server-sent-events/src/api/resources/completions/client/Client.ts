// This file was auto-generated by Fern from our API Definition.

<<<<<<< HEAD
=======
import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as core from "../../../../core/index.js";
import * as SeedServerSentEvents from "../../../index.js";
>>>>>>> 048c276e1390a22745b2ec94e44b36b115bd89f9
import { mergeHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as errors from "../../../../errors/index.js";
import type * as SeedServerSentEvents from "../../../index.js";

export declare namespace Completions {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Completions {
    protected readonly _options: Completions.Options;

    constructor(_options: Completions.Options) {
        this._options = _options;
    }

    public stream(
        request: SeedServerSentEvents.StreamCompletionRequest,
        requestOptions?: Completions.RequestOptions,
    ): core.HttpResponsePromise<core.Stream<SeedServerSentEvents.StreamedCompletion>> {
        return core.HttpResponsePromise.fromPromise(this.__stream(request, requestOptions));
    }

    private async __stream(
        request: SeedServerSentEvents.StreamCompletionRequest,
        requestOptions?: Completions.RequestOptions,
    ): Promise<core.WithRawResponse<core.Stream<SeedServerSentEvents.StreamedCompletion>>> {
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher<ReadableStream>({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "stream",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            responseType: "sse",
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: new core.Stream({
                    stream: _response.body,
                    parse: (data) => data as any,
                    signal: requestOptions?.abortSignal,
                    eventShape: {
                        type: "sse",
                        streamTerminator: "[[DONE]]",
                    },
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedServerSentEventsError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedServerSentEventsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedServerSentEventsTimeoutError("Timeout exceeded when calling POST /stream.");
            case "unknown":
                throw new errors.SeedServerSentEventsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
