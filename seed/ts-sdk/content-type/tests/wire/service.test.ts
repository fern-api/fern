/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedContentTypesClient } from "../../src/Client";

describe("Service", () => {
    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedContentTypesClient({ environment: server.baseUrl });
        const rawRequestBody = { application: "application", require_auth: true };

        server.mockEndpoint().patch("").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.service.patch({
            application: "application",
            require_auth: true,
        });
        expect(response).toEqual(undefined);
    });

    test("patchComplex", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedContentTypesClient({ environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            age: 1,
            active: true,
            metadata: { metadata: { key: "value" } },
            tags: ["tags", "tags"],
            email: "email",
            nickname: "nickname",
            bio: "bio",
            profileImageUrl: "profileImageUrl",
            settings: { settings: { key: "value" } },
        };

        server.mockEndpoint().patch("/complex/id").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.service.patchComplex("id", {
            name: "name",
            age: 1,
            active: true,
            metadata: {
                metadata: {
                    key: "value",
                },
            },
            tags: ["tags", "tags"],
            email: "email",
            nickname: "nickname",
            bio: "bio",
            profileImageUrl: "profileImageUrl",
            settings: {
                settings: {
                    key: "value",
                },
            },
        });
        expect(response).toEqual(undefined);
    });

    test("regularPatch", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedContentTypesClient({ environment: server.baseUrl });
        const rawRequestBody = { field1: "field1", field2: 1 };

        server.mockEndpoint().patch("/regular/id").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.service.regularPatch("id", {
            field1: "field1",
            field2: 1,
        });
        expect(response).toEqual(undefined);
    });
});
