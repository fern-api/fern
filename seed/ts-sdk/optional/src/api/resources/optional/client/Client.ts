// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as core from "../../../../core/index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Optional {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Optional {
    protected readonly _options: Optional.Options;

    constructor(_options: Optional.Options) {
        this._options = _options;
    }

    /**
     * @param {Record<string, unknown>} request
     * @param {Optional.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.optional.sendOptionalBody({
     *         "string": {
     *             "key": "value"
     *         }
     *     })
     */
    public sendOptionalBody(
        request?: Record<string, unknown>,
        requestOptions?: Optional.RequestOptions,
    ): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(this.__sendOptionalBody(request, requestOptions));
    }

    private async __sendOptionalBody(
        request?: Record<string, unknown>,
        requestOptions?: Optional.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "send-optional-body",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request != null ? request : undefined,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedObjectsWithImportsError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedObjectsWithImportsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedObjectsWithImportsTimeoutError(
                    "Timeout exceeded when calling POST /send-optional-body.",
                );
            case "unknown":
                throw new errors.SeedObjectsWithImportsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
