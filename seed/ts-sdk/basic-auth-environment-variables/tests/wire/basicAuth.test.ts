/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedBasicAuthEnvironmentVariablesClient } from "../../src/Client";
import * as SeedBasicAuthEnvironmentVariables from "../../src/api/index";

describe("BasicAuth", () => {
    test("getWithBasicAuth (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedBasicAuthEnvironmentVariablesClient({
            username: "test",
            accessToken: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = true;
        server.mockEndpoint().get("/basic-auth").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.basicAuth.getWithBasicAuth();
        expect(response).toEqual(true);
    });

    test("getWithBasicAuth (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedBasicAuthEnvironmentVariablesClient({
            username: "test",
            accessToken: "test",
            environment: server.baseUrl,
        });

        const rawResponseBody = { message: "message" };
        server.mockEndpoint().get("/basic-auth").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.basicAuth.getWithBasicAuth();
        }).rejects.toThrow(
            new SeedBasicAuthEnvironmentVariables.UnauthorizedRequest({
                message: "message",
            }),
        );
    });

    test("postWithBasicAuth (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedBasicAuthEnvironmentVariablesClient({
            username: "test",
            accessToken: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = true;
        server
            .mockEndpoint()
            .post("/basic-auth")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.basicAuth.postWithBasicAuth({
            key: "value",
        });
        expect(response).toEqual(true);
    });

    test("postWithBasicAuth (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedBasicAuthEnvironmentVariablesClient({
            username: "test",
            accessToken: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .post("/basic-auth")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.basicAuth.postWithBasicAuth({
                key: "value",
            });
        }).rejects.toThrow(
            new SeedBasicAuthEnvironmentVariables.UnauthorizedRequest({
                message: "message",
            }),
        );
    });

    test("postWithBasicAuth (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedBasicAuthEnvironmentVariablesClient({
            username: "test",
            accessToken: "test",
            environment: server.baseUrl,
        });
        const rawRequestBody = { key: "value" };

        server.mockEndpoint().post("/basic-auth").jsonBody(rawRequestBody).respondWith().statusCode(400).build();

        await expect(async () => {
            return await client.basicAuth.postWithBasicAuth({
                key: "value",
            });
        }).rejects.toThrow(new SeedBasicAuthEnvironmentVariables.BadRequest());
    });
});
