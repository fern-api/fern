/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import * as SeedPropertyAccess from "./api/index.js";
import * as errors from "./errors/index.js";

export declare namespace SeedPropertyAccessClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class SeedPropertyAccessClient {
    protected readonly _options: SeedPropertyAccessClient.Options;

    constructor(_options: SeedPropertyAccessClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/property-access",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/property-access/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    /**
     * @param {SeedPropertyAccess.User.Request} request
     * @param {SeedPropertyAccessClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.createUser({
     *         password: "password",
     *         profile: {
     *             name: "name",
     *             verification: {},
     *             ssn: "ssn"
     *         }
     *     })
     */
    public createUser(
        request: SeedPropertyAccess.User.Request,
        requestOptions?: SeedPropertyAccessClient.RequestOptions,
    ): core.HttpResponsePromise<SeedPropertyAccess.User.Response> {
        return core.HttpResponsePromise.fromPromise(this.__createUser(request, requestOptions));
    }

    private async __createUser(
        request: SeedPropertyAccess.User.Request,
        requestOptions?: SeedPropertyAccessClient.RequestOptions,
    ): Promise<core.WithRawResponse<SeedPropertyAccess.User.Response>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/users",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedPropertyAccess.User, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedPropertyAccessError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedPropertyAccessError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedPropertyAccessTimeoutError("Timeout exceeded when calling POST /users.");
            case "unknown":
                throw new errors.SeedPropertyAccessError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
