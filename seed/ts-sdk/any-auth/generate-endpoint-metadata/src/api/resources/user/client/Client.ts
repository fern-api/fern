// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as core from "../../../../core/index.js";
import * as SeedAnyAuth from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace User {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class User {
    protected readonly _options: User.Options;

    constructor(_options: User.Options) {
        this._options = _options;
    }

    /**
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.user.get()
     */
    public get(requestOptions?: User.RequestOptions): core.HttpResponsePromise<SeedAnyAuth.User[]> {
        return core.HttpResponsePromise.fromPromise(this.__get(requestOptions));
    }

    private async __get(requestOptions?: User.RequestOptions): Promise<core.WithRawResponse<SeedAnyAuth.User[]>> {
        const _metadata: core.EndpointMetadata = { security: [{ Bearer: [] }, { ApiKey: [] }, { OAuth: [] }] };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(_metadata),
                ...(await this._getCustomAuthorizationHeaders(_metadata)),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "users",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: _response.body as SeedAnyAuth.User[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedAnyAuthError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedAnyAuthError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedAnyAuthTimeoutError("Timeout exceeded when calling POST /users.");
            case "unknown":
                throw new errors.SeedAnyAuthError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {User.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.user.getAdmins()
     */
    public getAdmins(requestOptions?: User.RequestOptions): core.HttpResponsePromise<SeedAnyAuth.User[]> {
        return core.HttpResponsePromise.fromPromise(this.__getAdmins(requestOptions));
    }

    private async __getAdmins(requestOptions?: User.RequestOptions): Promise<core.WithRawResponse<SeedAnyAuth.User[]>> {
        const _metadata: core.EndpointMetadata = { security: [{ OAuth: ["admin"] }] };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({
                Authorization: await this._getAuthorizationHeader(_metadata),
                ...(await this._getCustomAuthorizationHeaders(_metadata)),
            }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "admins",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: _response.body as SeedAnyAuth.User[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedAnyAuthError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedAnyAuthError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedAnyAuthTimeoutError("Timeout exceeded when calling GET /admins.");
            case "unknown":
                throw new errors.SeedAnyAuthError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string | undefined> {
        const bearer = await core.EndpointSupplier.get(this._options.token, { endpointMetadata });
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }

    protected async _getCustomAuthorizationHeaders(
        endpointMetadata: core.EndpointMetadata,
    ): Promise<Record<string, string | undefined>> {
        const apiKeyValue =
            (await core.EndpointSupplier.get(this._options.apiKey, { endpointMetadata })) ?? process?.env["MY_API_KEY"];
        return { "X-API-Key": apiKeyValue };
    }
}
