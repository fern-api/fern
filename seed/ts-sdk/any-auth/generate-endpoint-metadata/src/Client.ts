// This file was auto-generated by Fern from our API Definition.

import * as core from "./core/index.js";
import { BaseClientOptions, BaseRequestOptions } from "./BaseClient.js";
import { Auth } from "./api/resources/auth/client/Client.js";
import { mergeHeaders } from "./core/headers.js";
import { User } from "./api/resources/user/client/Client.js";

export declare namespace SeedAnyAuthClient {
    export interface Options extends BaseClientOptions {
        clientId?: core.Supplier<string>;
        clientSecret?: core.Supplier<string>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class SeedAnyAuthClient {
    protected readonly _options: SeedAnyAuthClient.Options;
    private readonly _oauthTokenProvider: core.OAuthTokenProvider;
    protected _auth: Auth | undefined;
    protected _user: User | undefined;

    constructor(_options: SeedAnyAuthClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/any-auth",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/any-auth/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };

        const clientId = this._options.clientId ?? process.env["MY_CLIENT_ID"];
        if (clientId == null) {
            throw new Error(
                "clientId is required; either pass it as an argument or set the MY_CLIENT_ID environment variable",
            );
        }

        const clientSecret = this._options.clientSecret ?? process.env["MY_CLIENT_SECRET"];
        if (clientSecret == null) {
            throw new Error(
                "clientSecret is required; either pass it as an argument or set the MY_CLIENT_SECRET environment variable",
            );
        }

        this._oauthTokenProvider = new core.OAuthTokenProvider({
            clientId,
            clientSecret,
            authClient: new Auth({
                ...this._options,
                environment: this._options.environment,
            }),
        });
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }

    public get user(): User {
        return (this._user ??= new User({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }
}
