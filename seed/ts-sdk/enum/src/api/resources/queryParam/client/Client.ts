// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import { toJson } from "../../../../core/json.js";
import * as errors from "../../../../errors/index.js";
import type * as SeedEnum from "../../../index.js";

export declare namespace QueryParam {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class QueryParam {
    protected readonly _options: QueryParam.Options;

    constructor(_options: QueryParam.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedEnum.SendEnumAsQueryParamRequest} request
     * @param {QueryParam.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.queryParam.send({
     *         operand: ">",
     *         operandOrColor: "red"
     *     })
     */
    public send(
        request: SeedEnum.SendEnumAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__send(request, requestOptions));
    }

    private async __send(
        request: SeedEnum.SendEnumAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { operand, maybeOperand, operandOrColor, maybeOperandOrColor } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams.operand = operand;
        if (maybeOperand != null) {
            _queryParams.maybeOperand = maybeOperand;
        }

        _queryParams.operandOrColor = typeof operandOrColor === "string" ? operandOrColor : toJson(operandOrColor);
        if (maybeOperandOrColor != null) {
            _queryParams.maybeOperandOrColor =
                typeof maybeOperandOrColor === "string" ? maybeOperandOrColor : toJson(maybeOperandOrColor);
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "query",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedEnumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedEnumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedEnumTimeoutError("Timeout exceeded when calling POST /query.");
            case "unknown":
                throw new errors.SeedEnumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedEnum.SendEnumListAsQueryParamRequest} request
     * @param {QueryParam.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.queryParam.sendList({
     *         operand: ">",
     *         maybeOperand: ">",
     *         operandOrColor: "red",
     *         maybeOperandOrColor: "red"
     *     })
     */
    public sendList(
        request: SeedEnum.SendEnumListAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__sendList(request, requestOptions));
    }

    private async __sendList(
        request: SeedEnum.SendEnumListAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { operand, maybeOperand, operandOrColor, maybeOperandOrColor } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (Array.isArray(operand)) {
            _queryParams.operand = operand.map((item) => item);
        } else {
            _queryParams.operand = operand;
        }

        if (maybeOperand != null) {
            if (Array.isArray(maybeOperand)) {
                _queryParams.maybeOperand = maybeOperand.map((item) => item);
            } else {
                _queryParams.maybeOperand = maybeOperand;
            }
        }

        if (Array.isArray(operandOrColor)) {
            _queryParams.operandOrColor = operandOrColor.map((item) =>
                typeof item === "string" ? item : toJson(item),
            );
        } else {
            _queryParams.operandOrColor = typeof operandOrColor === "string" ? operandOrColor : toJson(operandOrColor);
        }

        if (maybeOperandOrColor != null) {
            if (Array.isArray(maybeOperandOrColor)) {
                _queryParams.maybeOperandOrColor = maybeOperandOrColor.map((item) =>
                    typeof item === "string" ? item : toJson(item),
                );
            } else {
                _queryParams.maybeOperandOrColor =
                    typeof maybeOperandOrColor === "string" ? maybeOperandOrColor : toJson(maybeOperandOrColor);
            }
        }

        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "query-list",
            ),
            method: "POST",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedEnumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedEnumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedEnumTimeoutError("Timeout exceeded when calling POST /query-list.");
            case "unknown":
                throw new errors.SeedEnumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
