/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as SeedEnum from "../../../index.js";
import * as serializers from "../../../../serialization/index.js";
import { toJson } from "../../../../core/json.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace QueryParam {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class QueryParam {
    protected readonly _options: QueryParam.Options;

    constructor(_options: QueryParam.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedEnum.SendEnumAsQueryParamRequest} request
     * @param {QueryParam.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.queryParam.send({
     *         operand: ">",
     *         operandOrColor: "red"
     *     })
     */
    public send(
        request: SeedEnum.SendEnumAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__send(request, requestOptions));
    }

    private async __send(
        request: SeedEnum.SendEnumAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { operand, maybeOperand, operandOrColor, maybeOperandOrColor } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["operand"] = serializers.Operand.jsonOrThrow(operand, {
            unrecognizedObjectKeys: "strip",
            omitUndefined: true,
        });
        if (maybeOperand != null) {
            _queryParams["maybeOperand"] = serializers.Operand.jsonOrThrow(maybeOperand, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        _queryParams["operandOrColor"] = (() => {
            const mapped = serializers.ColorOrOperand.jsonOrThrow(operandOrColor, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
            return typeof mapped === "string" ? mapped : toJson(mapped);
        })();
        if (maybeOperandOrColor != null) {
            _queryParams["maybeOperandOrColor"] = (() => {
                const mapped = serializers.ColorOrOperand.jsonOrThrow(maybeOperandOrColor, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
                return typeof mapped === "string" ? mapped : toJson(mapped);
            })();
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "query",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedEnumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedEnumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedEnumTimeoutError("Timeout exceeded when calling POST /query.");
            case "unknown":
                throw new errors.SeedEnumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedEnum.SendEnumListAsQueryParamRequest} request
     * @param {QueryParam.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.queryParam.sendList({
     *         operand: ">",
     *         maybeOperand: ">",
     *         operandOrColor: "red",
     *         maybeOperandOrColor: "red"
     *     })
     */
    public sendList(
        request: SeedEnum.SendEnumListAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__sendList(request, requestOptions));
    }

    private async __sendList(
        request: SeedEnum.SendEnumListAsQueryParamRequest,
        requestOptions?: QueryParam.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { operand, maybeOperand, operandOrColor, maybeOperandOrColor } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (Array.isArray(operand)) {
            _queryParams["operand"] = operand.map((item) =>
                serializers.Operand.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
            );
        } else {
            _queryParams["operand"] = serializers.Operand.jsonOrThrow(operand, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            });
        }

        if (maybeOperand != null) {
            if (Array.isArray(maybeOperand)) {
                _queryParams["maybeOperand"] = maybeOperand.map((item) =>
                    serializers.Operand.jsonOrThrow(item, { unrecognizedObjectKeys: "strip", omitUndefined: true }),
                );
            } else {
                _queryParams["maybeOperand"] = serializers.Operand.jsonOrThrow(maybeOperand, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
            }
        }

        if (Array.isArray(operandOrColor)) {
            _queryParams["operandOrColor"] = operandOrColor.map((item) =>
                (() => {
                    const mapped = serializers.ColorOrOperand.jsonOrThrow(item, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                    return typeof mapped === "string" ? mapped : toJson(mapped);
                })(),
            );
        } else {
            _queryParams["operandOrColor"] = (() => {
                const mapped = serializers.ColorOrOperand.jsonOrThrow(operandOrColor, {
                    unrecognizedObjectKeys: "strip",
                    omitUndefined: true,
                });
                return typeof mapped === "string" ? mapped : toJson(mapped);
            })();
        }

        if (maybeOperandOrColor != null) {
            if (Array.isArray(maybeOperandOrColor)) {
                _queryParams["maybeOperandOrColor"] = maybeOperandOrColor.map((item) =>
                    (() => {
                        const mapped = serializers.ColorOrOperand.jsonOrThrow(item, {
                            unrecognizedObjectKeys: "strip",
                            omitUndefined: true,
                        });
                        return typeof mapped === "string" ? mapped : toJson(mapped);
                    })(),
                );
            } else {
                _queryParams["maybeOperandOrColor"] = (() => {
                    const mapped = serializers.ColorOrOperand.jsonOrThrow(maybeOperandOrColor, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                    return typeof mapped === "string" ? mapped : toJson(mapped);
                })();
            }
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "query-list",
            ),
            method: "POST",
            headers: mergeHeaders(this._options?.headers, requestOptions?.headers),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedEnumError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedEnumError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedEnumTimeoutError("Timeout exceeded when calling POST /query-list.");
            case "unknown":
                throw new errors.SeedEnumError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
