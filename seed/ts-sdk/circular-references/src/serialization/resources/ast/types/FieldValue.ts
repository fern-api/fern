/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as SeedApi from "../../../../api";
import * as core from "../../../../core";

export const FieldValue: core.serialization.Schema<serializers.FieldValue.Raw, SeedApi.FieldValue> = core.serialization
    .union("type", {
        primitive_value: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).PrimitiveValue),
        }),
        object_value: core.serialization.lazyObject(async () => (await import("../../..")).ObjectValue),
        container_value: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).ContainerValue),
        }),
    })
    .transform<SeedApi.FieldValue>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace FieldValue {
    type Raw = FieldValue.PrimitiveValue | FieldValue.ObjectValue | FieldValue.ContainerValue;

    interface PrimitiveValue {
        type: "primitive_value";
        value: serializers.PrimitiveValue.Raw;
    }

    interface ObjectValue extends serializers.ObjectValue.Raw {
        type: "object_value";
    }

    interface ContainerValue {
        type: "container_value";
        value: serializers.ContainerValue.Raw;
    }
}
