/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedClientSideParamsClient } from "../../src/Client";

describe("Service", () => {
    test("listResources", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: { metadata: { key: "value" } },
            },
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: { metadata: { key: "value" } },
            },
        ];
        server.mockEndpoint().get("/api/resources").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.listResources({
            page: 1,
            per_page: 1,
            sort: "created_at",
            order: "desc",
            include_totals: true,
            fields: "fields",
            search: "search",
        });
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: {
                    metadata: {
                        key: "value",
                    },
                },
            },
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: {
                    metadata: {
                        key: "value",
                    },
                },
            },
        ]);
    });

    test("getResource", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            metadata: { metadata: { key: "value" } },
        };
        server
            .mockEndpoint()
            .get("/api/resources/resourceId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getResource("resourceId", {
            include_metadata: true,
            format: "json",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            metadata: {
                metadata: {
                    key: "value",
                },
            },
        });
    });

    test("searchResources", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { query: "query", filters: { filters: { key: "value" } } };
        const rawResponseBody = {
            results: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: { metadata: { key: "value" } },
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: { metadata: { key: "value" } },
                },
            ],
            total: 1,
            next_offset: 1,
        };
        server
            .mockEndpoint()
            .post("/api/resources/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.searchResources({
            limit: 1,
            offset: 1,
            query: "query",
            filters: {
                filters: {
                    key: "value",
                },
            },
        });
        expect(response).toEqual({
            results: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                },
            ],
            total: 1,
            next_offset: 1,
        });
    });

    test("listUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            users: [
                {
                    user_id: "user_id",
                    email: "email",
                    email_verified: true,
                    username: "username",
                    phone_number: "phone_number",
                    phone_verified: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    identities: [
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                    ],
                    app_metadata: { app_metadata: { key: "value" } },
                    user_metadata: { user_metadata: { key: "value" } },
                    picture: "picture",
                    name: "name",
                    nickname: "nickname",
                    multifactor: ["multifactor", "multifactor"],
                    last_ip: "last_ip",
                    last_login: "2024-01-15T09:30:00Z",
                    logins_count: 1,
                    blocked: true,
                    given_name: "given_name",
                    family_name: "family_name",
                },
                {
                    user_id: "user_id",
                    email: "email",
                    email_verified: true,
                    username: "username",
                    phone_number: "phone_number",
                    phone_verified: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    identities: [
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                    ],
                    app_metadata: { app_metadata: { key: "value" } },
                    user_metadata: { user_metadata: { key: "value" } },
                    picture: "picture",
                    name: "name",
                    nickname: "nickname",
                    multifactor: ["multifactor", "multifactor"],
                    last_ip: "last_ip",
                    last_login: "2024-01-15T09:30:00Z",
                    logins_count: 1,
                    blocked: true,
                    given_name: "given_name",
                    family_name: "family_name",
                },
            ],
            start: 1,
            limit: 1,
            length: 1,
            total: 1,
        };
        server.mockEndpoint().get("/api/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.listUsers({
            page: 1,
            per_page: 1,
            include_totals: true,
            sort: "sort",
            connection: "connection",
            q: "q",
            search_engine: "search_engine",
            fields: "fields",
        });
        expect(response).toEqual({
            users: [
                {
                    user_id: "user_id",
                    email: "email",
                    email_verified: true,
                    username: "username",
                    phone_number: "phone_number",
                    phone_verified: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    identities: [
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                    ],
                    app_metadata: {
                        app_metadata: {
                            key: "value",
                        },
                    },
                    user_metadata: {
                        user_metadata: {
                            key: "value",
                        },
                    },
                    picture: "picture",
                    name: "name",
                    nickname: "nickname",
                    multifactor: ["multifactor", "multifactor"],
                    last_ip: "last_ip",
                    last_login: "2024-01-15T09:30:00Z",
                    logins_count: 1,
                    blocked: true,
                    given_name: "given_name",
                    family_name: "family_name",
                },
                {
                    user_id: "user_id",
                    email: "email",
                    email_verified: true,
                    username: "username",
                    phone_number: "phone_number",
                    phone_verified: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    identities: [
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                        {
                            connection: "connection",
                            user_id: "user_id",
                            provider: "provider",
                            is_social: true,
                            access_token: "access_token",
                            expires_in: 1,
                        },
                    ],
                    app_metadata: {
                        app_metadata: {
                            key: "value",
                        },
                    },
                    user_metadata: {
                        user_metadata: {
                            key: "value",
                        },
                    },
                    picture: "picture",
                    name: "name",
                    nickname: "nickname",
                    multifactor: ["multifactor", "multifactor"],
                    last_ip: "last_ip",
                    last_login: "2024-01-15T09:30:00Z",
                    logins_count: 1,
                    blocked: true,
                    given_name: "given_name",
                    family_name: "family_name",
                },
            ],
            start: 1,
            limit: 1,
            length: 1,
            total: 1,
        });
    });

    test("getUserById", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            user_id: "user_id",
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            identities: [
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
            ],
            app_metadata: { app_metadata: { key: "value" } },
            user_metadata: { user_metadata: { key: "value" } },
            picture: "picture",
            name: "name",
            nickname: "nickname",
            multifactor: ["multifactor", "multifactor"],
            last_ip: "last_ip",
            last_login: "2024-01-15T09:30:00Z",
            logins_count: 1,
            blocked: true,
            given_name: "given_name",
            family_name: "family_name",
        };
        server.mockEndpoint().get("/api/users/userId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.getUserById("userId", {
            fields: "fields",
            include_fields: true,
        });
        expect(response).toEqual({
            user_id: "user_id",
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            identities: [
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
            ],
            app_metadata: {
                app_metadata: {
                    key: "value",
                },
            },
            user_metadata: {
                user_metadata: {
                    key: "value",
                },
            },
            picture: "picture",
            name: "name",
            nickname: "nickname",
            multifactor: ["multifactor", "multifactor"],
            last_ip: "last_ip",
            last_login: "2024-01-15T09:30:00Z",
            logins_count: 1,
            blocked: true,
            given_name: "given_name",
            family_name: "family_name",
        });
    });

    test("createUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: "email",
            email_verified: true,
            username: "username",
            password: "password",
            phone_number: "phone_number",
            phone_verified: true,
            user_metadata: { user_metadata: { key: "value" } },
            app_metadata: { app_metadata: { key: "value" } },
            connection: "connection",
        };
        const rawResponseBody = {
            user_id: "user_id",
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            identities: [
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
            ],
            app_metadata: { app_metadata: { key: "value" } },
            user_metadata: { user_metadata: { key: "value" } },
            picture: "picture",
            name: "name",
            nickname: "nickname",
            multifactor: ["multifactor", "multifactor"],
            last_ip: "last_ip",
            last_login: "2024-01-15T09:30:00Z",
            logins_count: 1,
            blocked: true,
            given_name: "given_name",
            family_name: "family_name",
        };
        server
            .mockEndpoint()
            .post("/api/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.createUser({
            email: "email",
            email_verified: true,
            username: "username",
            password: "password",
            phone_number: "phone_number",
            phone_verified: true,
            user_metadata: {
                user_metadata: {
                    key: "value",
                },
            },
            app_metadata: {
                app_metadata: {
                    key: "value",
                },
            },
            connection: "connection",
        });
        expect(response).toEqual({
            user_id: "user_id",
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            identities: [
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
            ],
            app_metadata: {
                app_metadata: {
                    key: "value",
                },
            },
            user_metadata: {
                user_metadata: {
                    key: "value",
                },
            },
            picture: "picture",
            name: "name",
            nickname: "nickname",
            multifactor: ["multifactor", "multifactor"],
            last_ip: "last_ip",
            last_login: "2024-01-15T09:30:00Z",
            logins_count: 1,
            blocked: true,
            given_name: "given_name",
            family_name: "family_name",
        });
    });

    test("updateUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            user_metadata: { user_metadata: { key: "value" } },
            app_metadata: { app_metadata: { key: "value" } },
            password: "password",
            blocked: true,
        };
        const rawResponseBody = {
            user_id: "user_id",
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            identities: [
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
            ],
            app_metadata: { app_metadata: { key: "value" } },
            user_metadata: { user_metadata: { key: "value" } },
            picture: "picture",
            name: "name",
            nickname: "nickname",
            multifactor: ["multifactor", "multifactor"],
            last_ip: "last_ip",
            last_login: "2024-01-15T09:30:00Z",
            logins_count: 1,
            blocked: true,
            given_name: "given_name",
            family_name: "family_name",
        };
        server
            .mockEndpoint()
            .patch("/api/users/userId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.updateUser("userId", {
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            user_metadata: {
                user_metadata: {
                    key: "value",
                },
            },
            app_metadata: {
                app_metadata: {
                    key: "value",
                },
            },
            password: "password",
            blocked: true,
        });
        expect(response).toEqual({
            user_id: "user_id",
            email: "email",
            email_verified: true,
            username: "username",
            phone_number: "phone_number",
            phone_verified: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            identities: [
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
                {
                    connection: "connection",
                    user_id: "user_id",
                    provider: "provider",
                    is_social: true,
                    access_token: "access_token",
                    expires_in: 1,
                },
            ],
            app_metadata: {
                app_metadata: {
                    key: "value",
                },
            },
            user_metadata: {
                user_metadata: {
                    key: "value",
                },
            },
            picture: "picture",
            name: "name",
            nickname: "nickname",
            multifactor: ["multifactor", "multifactor"],
            last_ip: "last_ip",
            last_login: "2024-01-15T09:30:00Z",
            logins_count: 1,
            blocked: true,
            given_name: "given_name",
            family_name: "family_name",
        });
    });

    test("deleteUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/api/users/userId").respondWith().statusCode(200).build();

        const response = await client.service.deleteUser("userId");
        expect(response).toEqual(undefined);
    });

    test("listConnections", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                display_name: "display_name",
                strategy: "strategy",
                options: { options: { key: "value" } },
                enabled_clients: ["enabled_clients", "enabled_clients"],
                realms: ["realms", "realms"],
                is_domain_connection: true,
                metadata: { metadata: { key: "value" } },
            },
            {
                id: "id",
                name: "name",
                display_name: "display_name",
                strategy: "strategy",
                options: { options: { key: "value" } },
                enabled_clients: ["enabled_clients", "enabled_clients"],
                realms: ["realms", "realms"],
                is_domain_connection: true,
                metadata: { metadata: { key: "value" } },
            },
        ];
        server.mockEndpoint().get("/api/connections").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.listConnections({
            strategy: "strategy",
            name: "name",
            fields: "fields",
        });
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                display_name: "display_name",
                strategy: "strategy",
                options: {
                    options: {
                        key: "value",
                    },
                },
                enabled_clients: ["enabled_clients", "enabled_clients"],
                realms: ["realms", "realms"],
                is_domain_connection: true,
                metadata: {
                    metadata: {
                        key: "value",
                    },
                },
            },
            {
                id: "id",
                name: "name",
                display_name: "display_name",
                strategy: "strategy",
                options: {
                    options: {
                        key: "value",
                    },
                },
                enabled_clients: ["enabled_clients", "enabled_clients"],
                realms: ["realms", "realms"],
                is_domain_connection: true,
                metadata: {
                    metadata: {
                        key: "value",
                    },
                },
            },
        ]);
    });

    test("getConnection", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            display_name: "display_name",
            strategy: "strategy",
            options: { options: { key: "value" } },
            enabled_clients: ["enabled_clients", "enabled_clients"],
            realms: ["realms", "realms"],
            is_domain_connection: true,
            metadata: { metadata: { key: "value" } },
        };
        server
            .mockEndpoint()
            .get("/api/connections/connectionId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getConnection("connectionId", {
            fields: "fields",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            display_name: "display_name",
            strategy: "strategy",
            options: {
                options: {
                    key: "value",
                },
            },
            enabled_clients: ["enabled_clients", "enabled_clients"],
            realms: ["realms", "realms"],
            is_domain_connection: true,
            metadata: {
                metadata: {
                    key: "value",
                },
            },
        });
    });

    test("listClients", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1,
            limit: 1,
            length: 1,
            total: 1,
            clients: [
                {
                    client_id: "client_id",
                    tenant: "tenant",
                    name: "name",
                    description: "description",
                    global: true,
                    client_secret: "client_secret",
                    app_type: "app_type",
                    logo_uri: "logo_uri",
                    is_first_party: true,
                    oidc_conformant: true,
                    callbacks: ["callbacks", "callbacks"],
                    allowed_origins: ["allowed_origins", "allowed_origins"],
                    web_origins: ["web_origins", "web_origins"],
                    grant_types: ["grant_types", "grant_types"],
                    jwt_configuration: { jwt_configuration: { key: "value" } },
                    signing_keys: [{ signing_keys: { key: "value" } }, { signing_keys: { key: "value" } }],
                    encryption_key: { encryption_key: { key: "value" } },
                    sso: true,
                    sso_disabled: true,
                    cross_origin_auth: true,
                    cross_origin_loc: "cross_origin_loc",
                    custom_login_page_on: true,
                    custom_login_page: "custom_login_page",
                    custom_login_page_preview: "custom_login_page_preview",
                    form_template: "form_template",
                    is_heroku_app: true,
                    addons: { addons: { key: "value" } },
                    token_endpoint_auth_method: "token_endpoint_auth_method",
                    client_metadata: { client_metadata: { key: "value" } },
                    mobile: { mobile: { key: "value" } },
                },
                {
                    client_id: "client_id",
                    tenant: "tenant",
                    name: "name",
                    description: "description",
                    global: true,
                    client_secret: "client_secret",
                    app_type: "app_type",
                    logo_uri: "logo_uri",
                    is_first_party: true,
                    oidc_conformant: true,
                    callbacks: ["callbacks", "callbacks"],
                    allowed_origins: ["allowed_origins", "allowed_origins"],
                    web_origins: ["web_origins", "web_origins"],
                    grant_types: ["grant_types", "grant_types"],
                    jwt_configuration: { jwt_configuration: { key: "value" } },
                    signing_keys: [{ signing_keys: { key: "value" } }, { signing_keys: { key: "value" } }],
                    encryption_key: { encryption_key: { key: "value" } },
                    sso: true,
                    sso_disabled: true,
                    cross_origin_auth: true,
                    cross_origin_loc: "cross_origin_loc",
                    custom_login_page_on: true,
                    custom_login_page: "custom_login_page",
                    custom_login_page_preview: "custom_login_page_preview",
                    form_template: "form_template",
                    is_heroku_app: true,
                    addons: { addons: { key: "value" } },
                    token_endpoint_auth_method: "token_endpoint_auth_method",
                    client_metadata: { client_metadata: { key: "value" } },
                    mobile: { mobile: { key: "value" } },
                },
            ],
        };
        server.mockEndpoint().get("/api/clients").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.listClients({
            fields: "fields",
            include_fields: true,
            page: 1,
            per_page: 1,
            include_totals: true,
            is_global: true,
            is_first_party: true,
            app_type: ["app_type", "app_type"],
        });
        expect(response).toEqual({
            start: 1,
            limit: 1,
            length: 1,
            total: 1,
            clients: [
                {
                    client_id: "client_id",
                    tenant: "tenant",
                    name: "name",
                    description: "description",
                    global: true,
                    client_secret: "client_secret",
                    app_type: "app_type",
                    logo_uri: "logo_uri",
                    is_first_party: true,
                    oidc_conformant: true,
                    callbacks: ["callbacks", "callbacks"],
                    allowed_origins: ["allowed_origins", "allowed_origins"],
                    web_origins: ["web_origins", "web_origins"],
                    grant_types: ["grant_types", "grant_types"],
                    jwt_configuration: {
                        jwt_configuration: {
                            key: "value",
                        },
                    },
                    signing_keys: [
                        {
                            signing_keys: {
                                key: "value",
                            },
                        },
                        {
                            signing_keys: {
                                key: "value",
                            },
                        },
                    ],
                    encryption_key: {
                        encryption_key: {
                            key: "value",
                        },
                    },
                    sso: true,
                    sso_disabled: true,
                    cross_origin_auth: true,
                    cross_origin_loc: "cross_origin_loc",
                    custom_login_page_on: true,
                    custom_login_page: "custom_login_page",
                    custom_login_page_preview: "custom_login_page_preview",
                    form_template: "form_template",
                    is_heroku_app: true,
                    addons: {
                        addons: {
                            key: "value",
                        },
                    },
                    token_endpoint_auth_method: "token_endpoint_auth_method",
                    client_metadata: {
                        client_metadata: {
                            key: "value",
                        },
                    },
                    mobile: {
                        mobile: {
                            key: "value",
                        },
                    },
                },
                {
                    client_id: "client_id",
                    tenant: "tenant",
                    name: "name",
                    description: "description",
                    global: true,
                    client_secret: "client_secret",
                    app_type: "app_type",
                    logo_uri: "logo_uri",
                    is_first_party: true,
                    oidc_conformant: true,
                    callbacks: ["callbacks", "callbacks"],
                    allowed_origins: ["allowed_origins", "allowed_origins"],
                    web_origins: ["web_origins", "web_origins"],
                    grant_types: ["grant_types", "grant_types"],
                    jwt_configuration: {
                        jwt_configuration: {
                            key: "value",
                        },
                    },
                    signing_keys: [
                        {
                            signing_keys: {
                                key: "value",
                            },
                        },
                        {
                            signing_keys: {
                                key: "value",
                            },
                        },
                    ],
                    encryption_key: {
                        encryption_key: {
                            key: "value",
                        },
                    },
                    sso: true,
                    sso_disabled: true,
                    cross_origin_auth: true,
                    cross_origin_loc: "cross_origin_loc",
                    custom_login_page_on: true,
                    custom_login_page: "custom_login_page",
                    custom_login_page_preview: "custom_login_page_preview",
                    form_template: "form_template",
                    is_heroku_app: true,
                    addons: {
                        addons: {
                            key: "value",
                        },
                    },
                    token_endpoint_auth_method: "token_endpoint_auth_method",
                    client_metadata: {
                        client_metadata: {
                            key: "value",
                        },
                    },
                    mobile: {
                        mobile: {
                            key: "value",
                        },
                    },
                },
            ],
        });
    });

    test("getClient", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "app_type",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks", "callbacks"],
            allowed_origins: ["allowed_origins", "allowed_origins"],
            web_origins: ["web_origins", "web_origins"],
            grant_types: ["grant_types", "grant_types"],
            jwt_configuration: { jwt_configuration: { key: "value" } },
            signing_keys: [{ signing_keys: { key: "value" } }, { signing_keys: { key: "value" } }],
            encryption_key: { encryption_key: { key: "value" } },
            sso: true,
            sso_disabled: true,
            cross_origin_auth: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            is_heroku_app: true,
            addons: { addons: { key: "value" } },
            token_endpoint_auth_method: "token_endpoint_auth_method",
            client_metadata: { client_metadata: { key: "value" } },
            mobile: { mobile: { key: "value" } },
        };
        server
            .mockEndpoint()
            .get("/api/clients/clientId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getClient("clientId", {
            fields: "fields",
            include_fields: true,
        });
        expect(response).toEqual({
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "app_type",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks", "callbacks"],
            allowed_origins: ["allowed_origins", "allowed_origins"],
            web_origins: ["web_origins", "web_origins"],
            grant_types: ["grant_types", "grant_types"],
            jwt_configuration: {
                jwt_configuration: {
                    key: "value",
                },
            },
            signing_keys: [
                {
                    signing_keys: {
                        key: "value",
                    },
                },
                {
                    signing_keys: {
                        key: "value",
                    },
                },
            ],
            encryption_key: {
                encryption_key: {
                    key: "value",
                },
            },
            sso: true,
            sso_disabled: true,
            cross_origin_auth: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            is_heroku_app: true,
            addons: {
                addons: {
                    key: "value",
                },
            },
            token_endpoint_auth_method: "token_endpoint_auth_method",
            client_metadata: {
                client_metadata: {
                    key: "value",
                },
            },
            mobile: {
                mobile: {
                    key: "value",
                },
            },
        });
    });
});
