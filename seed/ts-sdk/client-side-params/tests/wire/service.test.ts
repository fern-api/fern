/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedClientSideParamsClient } from "../../src/Client";

describe("Service", () => {
    test("listResources", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: { metadata: { key: "value" } },
            },
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: { metadata: { key: "value" } },
            },
        ];
        server.mockEndpoint().get("/api/resources").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.service.listResources({
            page: 1,
            per_page: 1,
            sort: "created_at",
            order: "desc",
            include_totals: true,
            fields: "fields",
            search: "search",
        });
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: {
                    metadata: {
                        key: "value",
                    },
                },
            },
            {
                id: "id",
                name: "name",
                description: "description",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                metadata: {
                    metadata: {
                        key: "value",
                    },
                },
            },
        ]);
    });

    test("getResource", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            metadata: { metadata: { key: "value" } },
        };
        server
            .mockEndpoint()
            .get("/api/resources/resourceId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.getResource("resourceId", {
            include_metadata: true,
            format: "json",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            metadata: {
                metadata: {
                    key: "value",
                },
            },
        });
    });

    test("searchResources", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedClientSideParamsClient({ environment: server.baseUrl });
        const rawRequestBody = { query: "query", filters: { filters: { key: "value" } } };
        const rawResponseBody = {
            results: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: { metadata: { key: "value" } },
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: { metadata: { key: "value" } },
                },
            ],
            total: 1,
            next_offset: 1,
        };
        server
            .mockEndpoint()
            .post("/api/resources/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.service.searchResources({
            limit: 1,
            offset: 1,
            query: "query",
            filters: {
                filters: {
                    key: "value",
                },
            },
        });
        expect(response).toEqual({
            results: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                },
                {
                    id: "id",
                    name: "name",
                    description: "description",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    metadata: {
                        metadata: {
                            key: "value",
                        },
                    },
                },
            ],
            total: 1,
            next_offset: 1,
        });
    });
});
