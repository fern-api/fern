/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as SeedClientSideParams from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Service {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Service {
    protected readonly _options: Service.Options;

    constructor(_options: Service.Options) {
        this._options = _options;
    }

    /**
     * List resources with pagination
     *
     * @param {SeedClientSideParams.ListResourcesRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.listResources({
     *         page: 1,
     *         per_page: 1,
     *         sort: "created_at",
     *         order: "desc",
     *         include_totals: true,
     *         fields: "fields",
     *         search: "search"
     *     })
     */
    public listResources(
        request: SeedClientSideParams.ListResourcesRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedClientSideParams.Resource[]> {
        return core.HttpResponsePromise.fromPromise(this.__listResources(request, requestOptions));
    }

    private async __listResources(
        request: SeedClientSideParams.ListResourcesRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedClientSideParams.Resource[]>> {
        const { page, per_page: perPage, sort, order, include_totals: includeTotals, fields, search } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["page"] = page.toString();
        _queryParams["per_page"] = perPage.toString();
        _queryParams["sort"] = sort;
        _queryParams["order"] = order;
        _queryParams["include_totals"] = includeTotals.toString();
        if (fields != null) {
            _queryParams["fields"] = fields;
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/api/resources",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedClientSideParams.Resource[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedClientSideParamsError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedClientSideParamsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedClientSideParamsTimeoutError("Timeout exceeded when calling GET /api/resources.");
            case "unknown":
                throw new errors.SeedClientSideParamsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get a single resource
     *
     * @param {string} resourceId
     * @param {SeedClientSideParams.GetResourceRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.getResource("resourceId", {
     *         include_metadata: true,
     *         format: "json"
     *     })
     */
    public getResource(
        resourceId: string,
        request: SeedClientSideParams.GetResourceRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedClientSideParams.Resource> {
        return core.HttpResponsePromise.fromPromise(this.__getResource(resourceId, request, requestOptions));
    }

    private async __getResource(
        resourceId: string,
        request: SeedClientSideParams.GetResourceRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedClientSideParams.Resource>> {
        const { include_metadata: includeMetadata, format } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["include_metadata"] = includeMetadata.toString();
        _queryParams["format"] = format;
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/api/resources/${encodeURIComponent(resourceId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedClientSideParams.Resource, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedClientSideParamsError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedClientSideParamsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedClientSideParamsTimeoutError(
                    "Timeout exceeded when calling GET /api/resources/{resourceId}.",
                );
            case "unknown":
                throw new errors.SeedClientSideParamsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Search resources with complex parameters
     *
     * @param {SeedClientSideParams.SearchResourcesRequest} request
     * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.service.searchResources({
     *         limit: 1,
     *         offset: 1,
     *         query: "query",
     *         filters: {
     *             "filters": {
     *                 "key": "value"
     *             }
     *         }
     *     })
     */
    public searchResources(
        request: SeedClientSideParams.SearchResourcesRequest,
        requestOptions?: Service.RequestOptions,
    ): core.HttpResponsePromise<SeedClientSideParams.SearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__searchResources(request, requestOptions));
    }

    private async __searchResources(
        request: SeedClientSideParams.SearchResourcesRequest,
        requestOptions?: Service.RequestOptions,
    ): Promise<core.WithRawResponse<SeedClientSideParams.SearchResponse>> {
        const { limit, offset, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["limit"] = limit.toString();
        _queryParams["offset"] = offset.toString();
        var _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/api/resources/search",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedClientSideParams.SearchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedClientSideParamsError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedClientSideParamsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedClientSideParamsTimeoutError(
                    "Timeout exceeded when calling POST /api/resources/search.",
                );
            case "unknown":
                throw new errors.SeedClientSideParamsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
