/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { SeedUndiscriminatedUnionsClient } from "../../src/Client";

describe("Union", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedUndiscriminatedUnionsClient({ environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = "string";
        server
            .mockEndpoint()
            .post("")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.union.get("string");
        expect(response).toEqual("string");
    });

    test("getMetadata", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedUndiscriminatedUnionsClient({ environment: server.baseUrl });

        const rawResponseBody = { name: "exampleName", value: "exampleValue", default: "exampleDefault" };
        server.mockEndpoint().get("/metadata").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.union.getMetadata();
        expect(response).toEqual({
            ["name"]: "exampleName",
            ["value"]: "exampleValue",
            default: "exampleDefault",
        });
    });

    test("updateMetadata", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedUndiscriminatedUnionsClient({ environment: server.baseUrl });
        const rawRequestBody = { string: { key: "value" } };
        const rawResponseBody = true;
        server
            .mockEndpoint()
            .put("/metadata")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.union.updateMetadata({
            string: {
                key: "value",
            },
        });
        expect(response).toEqual(true);
    });

    test("call", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedUndiscriminatedUnionsClient({ environment: server.baseUrl });
        const rawRequestBody = { union: { union: { key: "value" } } };
        const rawResponseBody = true;
        server
            .mockEndpoint()
            .post("/call")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.union.call({
            union: {
                union: {
                    key: "value",
                },
            },
        });
        expect(response).toEqual(true);
    });
});
