/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core/index.js";
import * as SeedNullableOptional from "../../../index.js";
import { mergeHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace NullableOptional {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class NullableOptional {
    protected readonly _options: NullableOptional.Options;

    constructor(_options: NullableOptional.Options) {
        this._options = _options;
    }

    /**
     * Get a user by ID
     *
     * @param {string} userId
     * @param {NullableOptional.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullableOptional.getUser("userId")
     */
    public getUser(
        userId: string,
        requestOptions?: NullableOptional.RequestOptions,
    ): core.HttpResponsePromise<SeedNullableOptional.UserResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getUser(userId, requestOptions));
    }

    private async __getUser(
        userId: string,
        requestOptions?: NullableOptional.RequestOptions,
    ): Promise<core.WithRawResponse<SeedNullableOptional.UserResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/api/users/${encodeURIComponent(userId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedNullableOptional.UserResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableOptionalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableOptionalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableOptionalTimeoutError(
                    "Timeout exceeded when calling GET /api/users/{userId}.",
                );
            case "unknown":
                throw new errors.SeedNullableOptionalError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new user
     *
     * @param {SeedNullableOptional.CreateUserRequest} request
     * @param {NullableOptional.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullableOptional.createUser({
     *         username: "username",
     *         email: "email",
     *         phone: "phone",
     *         address: {
     *             street: "street",
     *             city: "city",
     *             state: "state",
     *             zipCode: "zipCode",
     *             country: "country"
     *         }
     *     })
     */
    public createUser(
        request: SeedNullableOptional.CreateUserRequest,
        requestOptions?: NullableOptional.RequestOptions,
    ): core.HttpResponsePromise<SeedNullableOptional.UserResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createUser(request, requestOptions));
    }

    private async __createUser(
        request: SeedNullableOptional.CreateUserRequest,
        requestOptions?: NullableOptional.RequestOptions,
    ): Promise<core.WithRawResponse<SeedNullableOptional.UserResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/api/users",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedNullableOptional.UserResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableOptionalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableOptionalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableOptionalTimeoutError("Timeout exceeded when calling POST /api/users.");
            case "unknown":
                throw new errors.SeedNullableOptionalError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a user (partial update)
     *
     * @param {string} userId
     * @param {SeedNullableOptional.UpdateUserRequest} request
     * @param {NullableOptional.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullableOptional.updateUser("userId", {
     *         username: "username",
     *         email: "email",
     *         phone: "phone",
     *         address: {
     *             street: "street",
     *             city: "city",
     *             state: "state",
     *             zipCode: "zipCode",
     *             country: "country"
     *         }
     *     })
     */
    public updateUser(
        userId: string,
        request: SeedNullableOptional.UpdateUserRequest,
        requestOptions?: NullableOptional.RequestOptions,
    ): core.HttpResponsePromise<SeedNullableOptional.UserResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateUser(userId, request, requestOptions));
    }

    private async __updateUser(
        userId: string,
        request: SeedNullableOptional.UpdateUserRequest,
        requestOptions?: NullableOptional.RequestOptions,
    ): Promise<core.WithRawResponse<SeedNullableOptional.UserResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/api/users/${encodeURIComponent(userId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedNullableOptional.UserResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableOptionalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableOptionalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableOptionalTimeoutError(
                    "Timeout exceeded when calling PATCH /api/users/{userId}.",
                );
            case "unknown":
                throw new errors.SeedNullableOptionalError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * List all users
     *
     * @param {SeedNullableOptional.ListUsersRequest} request
     * @param {NullableOptional.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullableOptional.listUsers({
     *         limit: 1,
     *         offset: 1,
     *         includeDeleted: true,
     *         sortBy: "sortBy"
     *     })
     */
    public listUsers(
        request: SeedNullableOptional.ListUsersRequest = {},
        requestOptions?: NullableOptional.RequestOptions,
    ): core.HttpResponsePromise<SeedNullableOptional.UserResponse[]> {
        return core.HttpResponsePromise.fromPromise(this.__listUsers(request, requestOptions));
    }

    private async __listUsers(
        request: SeedNullableOptional.ListUsersRequest = {},
        requestOptions?: NullableOptional.RequestOptions,
    ): Promise<core.WithRawResponse<SeedNullableOptional.UserResponse[]>> {
        const { limit, offset, includeDeleted, sortBy } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (includeDeleted != null) {
            _queryParams["includeDeleted"] = includeDeleted.toString();
        }

        if (sortBy !== undefined) {
            _queryParams["sortBy"] = sortBy;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/api/users",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedNullableOptional.UserResponse[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableOptionalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableOptionalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableOptionalTimeoutError("Timeout exceeded when calling GET /api/users.");
            case "unknown":
                throw new errors.SeedNullableOptionalError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Search users
     *
     * @param {SeedNullableOptional.SearchUsersRequest} request
     * @param {NullableOptional.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.nullableOptional.searchUsers({
     *         query: "query",
     *         department: "department",
     *         role: "role",
     *         isActive: true
     *     })
     */
    public searchUsers(
        request: SeedNullableOptional.SearchUsersRequest,
        requestOptions?: NullableOptional.RequestOptions,
    ): core.HttpResponsePromise<SeedNullableOptional.UserResponse[]> {
        return core.HttpResponsePromise.fromPromise(this.__searchUsers(request, requestOptions));
    }

    private async __searchUsers(
        request: SeedNullableOptional.SearchUsersRequest,
        requestOptions?: NullableOptional.RequestOptions,
    ): Promise<core.WithRawResponse<SeedNullableOptional.UserResponse[]>> {
        const { query, department, role, isActive } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["query"] = query;
        if (department !== undefined) {
            _queryParams["department"] = department;
        }

        if (role != null) {
            _queryParams["role"] = role;
        }

        if (isActive !== undefined) {
            _queryParams["isActive"] = isActive?.toString() ?? null;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(this._options?.headers, requestOptions?.headers);
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/api/users/search",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedNullableOptional.UserResponse[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedNullableOptionalError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedNullableOptionalError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedNullableOptionalTimeoutError(
                    "Timeout exceeded when calling GET /api/users/search.",
                );
            case "unknown":
                throw new errors.SeedNullableOptionalError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
