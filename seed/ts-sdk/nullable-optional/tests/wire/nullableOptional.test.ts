/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedNullableOptionalClient } from "../../src/Client";

describe("NullableOptional", () => {
    test("getUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
        };
        server.mockEndpoint().get("/api/users/userId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullableOptional.getUser("userId");
        expect(response).toEqual({
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
    });

    test("createUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            username: "username",
            email: "email",
            phone: "phone",
            address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
        };
        const rawResponseBody = {
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
        };
        server
            .mockEndpoint()
            .post("/api/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.createUser({
            username: "username",
            email: "email",
            phone: "phone",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
        expect(response).toEqual({
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
    });

    test("updateUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            username: "username",
            email: "email",
            phone: "phone",
            address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
        };
        const rawResponseBody = {
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
        };
        server
            .mockEndpoint()
            .patch("/api/users/userId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.updateUser("userId", {
            username: "username",
            email: "email",
            phone: "phone",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
        expect(response).toEqual({
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
            },
        });
    });

    test("listUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
            },
        ];
        server.mockEndpoint().get("/api/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullableOptional.listUsers({
            limit: 1,
            offset: 1,
            includeDeleted: true,
            sortBy: "sortBy",
        });
        expect(response).toEqual([
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
        ]);
    });

    test("searchUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: { street: "street", city: "city", state: "state", zipCode: "zipCode", country: "country" },
            },
        ];
        server.mockEndpoint().get("/api/users/search").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullableOptional.searchUsers({
            query: "query",
            department: "department",
            role: "role",
            isActive: true,
        });
        expect(response).toEqual([
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                },
            },
        ]);
    });
});
