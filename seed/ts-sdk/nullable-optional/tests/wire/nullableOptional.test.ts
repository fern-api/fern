/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedNullableOptionalClient } from "../../src/Client";

describe("NullableOptional", () => {
    test("getUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        };
        server.mockEndpoint().get("/api/users/userId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullableOptional.getUser("userId");
        expect(response).toEqual({
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        });
    });

    test("createUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            username: "username",
            email: "email",
            phone: "phone",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        };
        const rawResponseBody = {
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        };
        server
            .mockEndpoint()
            .post("/api/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.createUser({
            username: "username",
            email: "email",
            phone: "phone",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        });
        expect(response).toEqual({
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        });
    });

    test("updateUser", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            username: "username",
            email: "email",
            phone: "phone",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        };
        const rawResponseBody = {
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        };
        server
            .mockEndpoint()
            .patch("/api/users/userId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.updateUser("userId", {
            username: "username",
            email: "email",
            phone: "phone",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        });
        expect(response).toEqual({
            id: "id",
            username: "username",
            email: "email",
            phone: "phone",
            createdAt: "2024-01-15T09:30:00Z",
            updatedAt: "2024-01-15T09:30:00Z",
            address: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
        });
    });

    test("listUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ];
        server.mockEndpoint().get("/api/users").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullableOptional.listUsers({
            limit: 1,
            offset: 1,
            includeDeleted: true,
            sortBy: "sortBy",
        });
        expect(response).toEqual([
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ]);
    });

    test("searchUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ];
        server.mockEndpoint().get("/api/users/search").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullableOptional.searchUsers({
            query: "query",
            department: "department",
            role: "role",
            isActive: true,
        });
        expect(response).toEqual([
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ]);
    });

    test("createComplexProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
            ],
            optionalMapOfEnums: { optionalMapOfEnums: "ADMIN" },
        };
        const rawResponseBody = {
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
            ],
            optionalMapOfEnums: { optionalMapOfEnums: "ADMIN" },
        };
        server
            .mockEndpoint()
            .post("/api/profiles/complex")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.createComplexProfile({
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
            ],
            optionalMapOfEnums: {
                optionalMapOfEnums: "ADMIN",
            },
        });
        expect(response).toEqual({
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
            ],
            optionalMapOfEnums: {
                optionalMapOfEnums: "ADMIN",
            },
        });
    });

    test("getComplexProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
            ],
            optionalMapOfEnums: { optionalMapOfEnums: "ADMIN" },
        };
        server
            .mockEndpoint()
            .get("/api/profiles/complex/profileId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.getComplexProfile("profileId");
        expect(response).toEqual({
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
            ],
            optionalMapOfEnums: {
                optionalMapOfEnums: "ADMIN",
            },
        });
    });

    test("updateComplexProfile", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            nullableRole: "ADMIN",
            nullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
        };
        const rawResponseBody = {
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
                { type: "email", emailAddress: "emailAddress", subject: "subject", htmlContent: "htmlContent" },
            ],
            optionalMapOfEnums: { optionalMapOfEnums: "ADMIN" },
        };
        server
            .mockEndpoint()
            .patch("/api/profiles/complex/profileId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.updateComplexProfile("profileId", {
            nullableRole: "ADMIN",
            nullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
        });
        expect(response).toEqual({
            id: "id",
            nullableRole: "ADMIN",
            optionalRole: "ADMIN",
            optionalNullableRole: "ADMIN",
            nullableStatus: "active",
            optionalStatus: "active",
            optionalNullableStatus: "active",
            nullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalNullableNotification: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            nullableSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            optionalSearchResult: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableArray: ["nullableArray", "nullableArray"],
            optionalArray: ["optionalArray", "optionalArray"],
            optionalNullableArray: ["optionalNullableArray", "optionalNullableArray"],
            nullableListOfNullables: ["nullableListOfNullables", "nullableListOfNullables"],
            nullableMapOfNullables: {
                nullableMapOfNullables: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableListOfUnions: [
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
                {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
            ],
            optionalMapOfEnums: {
                optionalMapOfEnums: "ADMIN",
            },
        });
    });

    test("testDeserialization", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            requiredString: "requiredString",
            nullableString: "nullableString",
            optionalString: "optionalString",
            optionalNullableString: "optionalNullableString",
            nullableEnum: "ADMIN",
            optionalEnum: "active",
            nullableUnion: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalUnion: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableList: ["nullableList", "nullableList"],
            nullableMap: { nullableMap: 1 },
            nullableObject: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
            optionalObject: { id: "id", name: "name", domain: "domain", employeeCount: 1 },
        };
        const rawResponseBody = {
            echo: {
                requiredString: "requiredString",
                nullableString: "nullableString",
                optionalString: "optionalString",
                optionalNullableString: "optionalNullableString",
                nullableEnum: "ADMIN",
                optionalEnum: "active",
                nullableUnion: {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
                optionalUnion: {
                    type: "user",
                    id: "id",
                    username: "username",
                    email: "email",
                    phone: "phone",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    address: {
                        street: "street",
                        city: "city",
                        state: "state",
                        zipCode: "zipCode",
                        country: "country",
                        buildingId: "buildingId",
                        tenantId: "tenantId",
                    },
                },
                nullableList: ["nullableList", "nullableList"],
                nullableMap: { nullableMap: 1 },
                nullableObject: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
                optionalObject: { id: "id", name: "name", domain: "domain", employeeCount: 1 },
            },
            processedAt: "2024-01-15T09:30:00Z",
            nullCount: 1,
            presentFieldsCount: 1,
        };
        server
            .mockEndpoint()
            .post("/api/test/deserialization")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.testDeserialization({
            requiredString: "requiredString",
            nullableString: "nullableString",
            optionalString: "optionalString",
            optionalNullableString: "optionalNullableString",
            nullableEnum: "ADMIN",
            optionalEnum: "active",
            nullableUnion: {
                type: "email",
                emailAddress: "emailAddress",
                subject: "subject",
                htmlContent: "htmlContent",
            },
            optionalUnion: {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            nullableList: ["nullableList", "nullableList"],
            nullableMap: {
                nullableMap: 1,
            },
            nullableObject: {
                street: "street",
                city: "city",
                state: "state",
                zipCode: "zipCode",
                country: "country",
                buildingId: "buildingId",
                tenantId: "tenantId",
            },
            optionalObject: {
                id: "id",
                name: "name",
                domain: "domain",
                employeeCount: 1,
            },
        });
        expect(response).toEqual({
            echo: {
                requiredString: "requiredString",
                nullableString: "nullableString",
                optionalString: "optionalString",
                optionalNullableString: "optionalNullableString",
                nullableEnum: "ADMIN",
                optionalEnum: "active",
                nullableUnion: {
                    type: "email",
                    emailAddress: "emailAddress",
                    subject: "subject",
                    htmlContent: "htmlContent",
                },
                optionalUnion: {
                    type: "user",
                    id: "id",
                    username: "username",
                    email: "email",
                    phone: "phone",
                    createdAt: "2024-01-15T09:30:00Z",
                    updatedAt: "2024-01-15T09:30:00Z",
                    address: {
                        street: "street",
                        city: "city",
                        state: "state",
                        zipCode: "zipCode",
                        country: "country",
                        buildingId: "buildingId",
                        tenantId: "tenantId",
                    },
                },
                nullableList: ["nullableList", "nullableList"],
                nullableMap: {
                    nullableMap: 1,
                },
                nullableObject: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
                optionalObject: {
                    id: "id",
                    name: "name",
                    domain: "domain",
                    employeeCount: 1,
                },
            },
            processedAt: "2024-01-15T09:30:00Z",
            nullCount: 1,
            presentFieldsCount: 1,
        });
    });

    test("filterByRole", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ];
        server.mockEndpoint().get("/api/users/filter").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.nullableOptional.filterByRole({
            role: "ADMIN",
            status: "active",
            secondaryRole: "ADMIN",
        });
        expect(response).toEqual([
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ]);
    });

    test("getNotificationSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });

        const rawResponseBody = {
            type: "email",
            emailAddress: "emailAddress",
            subject: "subject",
            htmlContent: "htmlContent",
        };
        server
            .mockEndpoint()
            .get("/api/users/userId/notifications")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.getNotificationSettings("userId");
        expect(response).toEqual({
            type: "email",
            emailAddress: "emailAddress",
            subject: "subject",
            htmlContent: "htmlContent",
        });
    });

    test("updateTags", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            tags: ["tags", "tags"],
            categories: ["categories", "categories"],
            labels: ["labels", "labels"],
        };
        const rawResponseBody = ["string", "string"];
        server
            .mockEndpoint()
            .put("/api/users/userId/tags")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.updateTags("userId", {
            tags: ["tags", "tags"],
            categories: ["categories", "categories"],
            labels: ["labels", "labels"],
        });
        expect(response).toEqual(["string", "string"]);
    });

    test("getSearchResults", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedNullableOptionalClient({ environment: server.baseUrl });
        const rawRequestBody = {
            query: "query",
            filters: { filters: "filters" },
            includeTypes: ["includeTypes", "includeTypes"],
        };
        const rawResponseBody = [
            {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ];
        server
            .mockEndpoint()
            .post("/api/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.nullableOptional.getSearchResults({
            query: "query",
            filters: {
                filters: "filters",
            },
            includeTypes: ["includeTypes", "includeTypes"],
        });
        expect(response).toEqual([
            {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
            {
                type: "user",
                id: "id",
                username: "username",
                email: "email",
                phone: "phone",
                createdAt: "2024-01-15T09:30:00Z",
                updatedAt: "2024-01-15T09:30:00Z",
                address: {
                    street: "street",
                    city: "city",
                    state: "state",
                    zipCode: "zipCode",
                    country: "country",
                    buildingId: "buildingId",
                    tenantId: "tenantId",
                },
            },
        ]);
    });
});
