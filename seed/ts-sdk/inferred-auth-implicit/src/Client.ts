// This file was auto-generated by Fern from our API Definition.

import { Auth } from "./api/resources/auth/client/Client.js";
import { Nested } from "./api/resources/nested/client/Client.js";
import { NestedNoAuth } from "./api/resources/nestedNoAuth/client/Client.js";
import { Simple } from "./api/resources/simple/client/Client.js";
import { InferredAuthProvider } from "./auth/InferredAuthProvider.js";
import type { BaseClientOptions, BaseRequestOptions } from "./BaseClient.js";
import { mergeHeaders } from "./core/headers.js";
import * as core from "./core/index.js";

export declare namespace SeedInferredAuthImplicitClient {
    export interface Options extends BaseClientOptions {
        xApiKey: string;
        clientId: string;
        clientSecret: string;
        scope?: string;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class SeedInferredAuthImplicitClient {
    protected readonly _options: SeedInferredAuthImplicitClient.Options;
    protected readonly _authProvider: core.AuthProvider;
    protected _auth: Auth | undefined;
    protected _nestedNoAuth: NestedNoAuth | undefined;
    protected _nested: Nested | undefined;
    protected _simple: Simple | undefined;

    constructor(_options: SeedInferredAuthImplicitClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/inferred-auth-implicit",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/inferred-auth-implicit/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
        this._authProvider = new InferredAuthProvider({
            client: this,
            authTokenParameters: { ...this._options },
        });
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth(this._options));
    }

    public get nestedNoAuth(): NestedNoAuth {
        return (this._nestedNoAuth ??= new NestedNoAuth(this._options));
    }

    public get nested(): Nested {
        return (this._nested ??= new Nested({ ...this._options, authProvider: this._authProvider }));
    }

    public get simple(): Simple {
        return (this._simple ??= new Simple({ ...this._options, authProvider: this._authProvider }));
    }
}
