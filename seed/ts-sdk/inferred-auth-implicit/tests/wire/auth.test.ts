/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SeedInferredAuthImplicitClient } from "../../src/Client";

describe("Auth", () => {
    test("getTokenWithClientCredentials", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedInferredAuthImplicitClient({ environment: server.baseUrl });
        const rawRequestBody = {
            client_id: "client_id",
            client_secret: "client_secret",
            audience: "https://api.example.com",
            grant_type: "client_credentials",
            scope: "scope",
        };
        const rawResponseBody = { access_token: "access_token", expires_in: 1, refresh_token: "refresh_token" };
        server
            .mockEndpoint()
            .post("/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.auth.getTokenWithClientCredentials({
            client_id: "client_id",
            client_secret: "client_secret",
            scope: "scope",
        });
        expect(response).toEqual({
            access_token: "access_token",
            expires_in: 1,
            refresh_token: "refresh_token",
        });
    });

    test("refreshToken", async () => {
        const server = mockServerPool.createServer();
        const client = new SeedInferredAuthImplicitClient({ environment: server.baseUrl });
        const rawRequestBody = {
            client_id: "client_id",
            client_secret: "client_secret",
            refresh_token: "refresh_token",
            audience: "https://api.example.com",
            grant_type: "refresh_token",
            scope: "scope",
        };
        const rawResponseBody = { access_token: "access_token", expires_in: 1, refresh_token: "refresh_token" };
        server
            .mockEndpoint()
            .post("/token/refresh")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.auth.refreshToken({
            client_id: "client_id",
            client_secret: "client_secret",
            refresh_token: "refresh_token",
            scope: "scope",
        });
        expect(response).toEqual({
            access_token: "access_token",
            expires_in: 1,
            refresh_token: "refresh_token",
        });
    });
});
