// This file was auto-generated by Fern from our API Definition.

import * as core from "../../../../core/index.js";
import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as SeedOauthClientCredentialsEnvironmentVariables from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Auth {
    export interface Options extends BaseClientOptions {
        token?: core.Supplier<core.BearerToken | undefined>;
    }

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Auth {
    protected readonly _options: Auth.Options;

    constructor(_options: Auth.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedOauthClientCredentialsEnvironmentVariables.GetTokenRequest} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.auth.getTokenWithClientCredentials({
     *         client_id: "client_id",
     *         client_secret: "client_secret",
     *         scope: "scope"
     *     })
     */
    public getTokenWithClientCredentials(
        request: SeedOauthClientCredentialsEnvironmentVariables.GetTokenRequest,
        requestOptions?: Auth.RequestOptions,
    ): core.HttpResponsePromise<SeedOauthClientCredentialsEnvironmentVariables.TokenResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTokenWithClientCredentials(request, requestOptions));
    }

    private async __getTokenWithClientCredentials(
        request: SeedOauthClientCredentialsEnvironmentVariables.GetTokenRequest,
        requestOptions?: Auth.RequestOptions,
    ): Promise<core.WithRawResponse<SeedOauthClientCredentialsEnvironmentVariables.TokenResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/token",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: { ...request, audience: "https://api.example.com", grant_type: "client_credentials" },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SeedOauthClientCredentialsEnvironmentVariables.TokenResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedOauthClientCredentialsEnvironmentVariablesError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedOauthClientCredentialsEnvironmentVariablesError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedOauthClientCredentialsEnvironmentVariablesTimeoutError(
                    "Timeout exceeded when calling POST /token.",
                );
            case "unknown":
                throw new errors.SeedOauthClientCredentialsEnvironmentVariablesError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedOauthClientCredentialsEnvironmentVariables.RefreshTokenRequest} request
     * @param {Auth.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.auth.refreshToken({
     *         client_id: "client_id",
     *         client_secret: "client_secret",
     *         refresh_token: "refresh_token",
     *         scope: "scope"
     *     })
     */
    public refreshToken(
        request: SeedOauthClientCredentialsEnvironmentVariables.RefreshTokenRequest,
        requestOptions?: Auth.RequestOptions,
    ): core.HttpResponsePromise<SeedOauthClientCredentialsEnvironmentVariables.TokenResponse> {
        return core.HttpResponsePromise.fromPromise(this.__refreshToken(request, requestOptions));
    }

    private async __refreshToken(
        request: SeedOauthClientCredentialsEnvironmentVariables.RefreshTokenRequest,
        requestOptions?: Auth.RequestOptions,
    ): Promise<core.WithRawResponse<SeedOauthClientCredentialsEnvironmentVariables.TokenResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/token",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: { ...request, audience: "https://api.example.com", grant_type: "refresh_token" },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as SeedOauthClientCredentialsEnvironmentVariables.TokenResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedOauthClientCredentialsEnvironmentVariablesError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedOauthClientCredentialsEnvironmentVariablesError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedOauthClientCredentialsEnvironmentVariablesTimeoutError(
                    "Timeout exceeded when calling POST /token.",
                );
            case "unknown":
                throw new errors.SeedOauthClientCredentialsEnvironmentVariablesError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
