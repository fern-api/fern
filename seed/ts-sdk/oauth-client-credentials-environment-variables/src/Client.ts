/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "./core/index.js";
import { Auth } from "./api/resources/auth/client/Client.js";
import { mergeHeaders } from "./core/headers.js";

export declare namespace SeedOauthClientCredentialsEnvironmentVariablesClient {
    export interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        clientId?: core.Supplier<string>;
        clientSecret?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class SeedOauthClientCredentialsEnvironmentVariablesClient {
    protected readonly _options: SeedOauthClientCredentialsEnvironmentVariablesClient.Options;
    private readonly _oauthTokenProvider: core.OAuthTokenProvider;
    protected _auth: Auth | undefined;

    constructor(_options: SeedOauthClientCredentialsEnvironmentVariablesClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@fern/oauth-client-credentials-environment-variables",
                    "X-Fern-SDK-Version": "0.0.1",
                    "User-Agent": "@fern/oauth-client-credentials-environment-variables/0.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };

        const clientId = this._options.clientId ?? process.env["CLIENT_ID"];
        if (clientId == null) {
            throw new Error(
                "clientId is required; either pass it as an argument or set the CLIENT_ID environment variable",
            );
        }

        const clientSecret = this._options.clientSecret ?? process.env["CLIENT_SECRET"];
        if (clientSecret == null) {
            throw new Error(
                "clientSecret is required; either pass it as an argument or set the CLIENT_SECRET environment variable",
            );
        }

        this._oauthTokenProvider = new core.OAuthTokenProvider({
            clientId,
            clientSecret,
            authClient: new Auth({
                environment: this._options.environment,
            }),
        });
    }

    public get auth(): Auth {
        return (this._auth ??= new Auth({
            ...this._options,
            token: async () => await this._oauthTokenProvider.getToken(),
        }));
    }
}
