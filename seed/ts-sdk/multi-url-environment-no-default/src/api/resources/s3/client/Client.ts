// This file was auto-generated by Fern from our API Definition.

import { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as SeedMultiUrlEnvironmentNoDefault from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace S3 {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class S3 {
    protected readonly _options: S3.Options;

    constructor(_options: S3.Options) {
        this._options = _options;
    }

    /**
     * @param {SeedMultiUrlEnvironmentNoDefault.GetPresignedUrlRequest} request
     * @param {S3.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.s3.getPresignedUrl({
     *         s3Key: "s3Key"
     *     })
     */
    public getPresignedUrl(
        request: SeedMultiUrlEnvironmentNoDefault.GetPresignedUrlRequest,
        requestOptions?: S3.RequestOptions,
    ): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(this.__getPresignedUrl(request, requestOptions));
    }

    private async __getPresignedUrl(
        request: SeedMultiUrlEnvironmentNoDefault.GetPresignedUrlRequest,
        requestOptions?: S3.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).s3,
                "/s3/presigned-url",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedMultiUrlEnvironmentNoDefaultError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedMultiUrlEnvironmentNoDefaultError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedMultiUrlEnvironmentNoDefaultTimeoutError(
                    "Timeout exceeded when calling POST /s3/presigned-url.",
                );
            case "unknown":
                throw new errors.SeedMultiUrlEnvironmentNoDefaultError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
