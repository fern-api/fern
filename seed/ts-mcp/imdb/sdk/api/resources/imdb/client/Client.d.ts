/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as SeedApi from "../../../index";
export declare namespace Imdb {
    interface Options {
        environment: core.Supplier<string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Imdb {
    protected readonly _options: Imdb.Options;
    constructor(_options: Imdb.Options);
    /**
     * Add a movie to the database using the movies/* /... path.
     *
     * @param {SeedApi.CreateMovieRequest} request
     * @param {Imdb.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.imdb.createMovie({
     *         title: "title",
     *         rating: 1.1
     *     })
     */
    createMovie(request: SeedApi.CreateMovieRequest, requestOptions?: Imdb.RequestOptions): core.HttpResponsePromise<SeedApi.MovieId>;
    private __createMovie;
    /**
     * @param {SeedApi.MovieId} movieId
     * @param {Imdb.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SeedApi.MovieDoesNotExistError}
     *
     * @example
     *     await client.imdb.getMovie("movieId")
     */
    getMovie(movieId: SeedApi.MovieId, requestOptions?: Imdb.RequestOptions): core.HttpResponsePromise<SeedApi.Movie>;
    private __getMovie;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
