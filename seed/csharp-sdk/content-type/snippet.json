{
    "types": {},
    "endpoints": [
        {
            "example_identifier": null,
            "id": {
                "path": "/",
                "method": "PATCH",
                "identifier_override": "endpoint_service.patch"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedContentTypes;\n\nvar client = new SeedContentTypesClient();\nawait client.Service.PatchAsync(\n    new PatchProxyRequest { Application = \"application\", RequireAuth = true }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/complex/{id}",
                "method": "PATCH",
                "identifier_override": "endpoint_service.patchComplex"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedContentTypes;\n\nvar client = new SeedContentTypesClient();\nawait client.Service.PatchComplexAsync(\n    \"id\",\n    new PatchComplexRequest\n    {\n        Name = \"name\",\n        Age = 1,\n        Active = true,\n        Metadata = new Dictionary<string, object>()\n        {\n            {\n                \"metadata\",\n                new Dictionary<object, object?>() { { \"key\", \"value\" } }\n            },\n        },\n        Tags = new List<string>() { \"tags\", \"tags\" },\n        Email = \"email\",\n        Nickname = \"nickname\",\n        Bio = \"bio\",\n        ProfileImageUrl = \"profileImageUrl\",\n        Settings = new Dictionary<string, object>()\n        {\n            {\n                \"settings\",\n                new Dictionary<object, object?>() { { \"key\", \"value\" } }\n            },\n        },\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/regular/{id}",
                "method": "PATCH",
                "identifier_override": "endpoint_service.regularPatch"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedContentTypes;\n\nvar client = new SeedContentTypesClient();\nawait client.Service.RegularPatchAsync(\n    \"id\",\n    new RegularPatchRequest { Field1 = \"field1\", Field2 = 1 }\n);\n"
            }
        }
    ]
}