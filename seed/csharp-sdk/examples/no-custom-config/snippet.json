{
    "types": {},
    "endpoints": [
        {
            "example_identifier": null,
            "id": {
                "path": "/",
                "method": "POST",
                "identifier_override": "endpoint_.echo"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.EchoAsync(\"Hello world!\\\\n\\\\nwith\\\\n\\\\tnewlines\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/",
                "method": "POST",
                "identifier_override": "endpoint_.createType"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.CreateTypeAsync(BasicType.Primitive);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/file/notification/{notificationId}",
                "method": "GET",
                "identifier_override": "endpoint_file/notification/service.getException"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.File.Notification.Service.GetExceptionAsync(\"notification-hsy129x\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/file/{filename}",
                "method": "GET",
                "identifier_override": "endpoint_file/service.getFile"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples.File;\nusing SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.File.Service.GetFileAsync(\n    \"file.txt\",\n    new GetFileRequest { XFileApiVersion = \"0.0.2\" }\n);\n"
            }
        },
        {
            "example_identifier": "Example0",
            "id": {
                "path": "/check/{id}",
                "method": "GET",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.Health.Service.CheckAsync(\"id-2sdx82h\");\n"
            }
        },
        {
            "example_identifier": "Example2",
            "id": {
                "path": "/check/{id}",
                "method": "GET",
                "identifier_override": "endpoint_health/service.check"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.Health.Service.CheckAsync(\"id-3tey93i\");\n"
            }
        },
        {
            "example_identifier": "Example0",
            "id": {
                "path": "/ping",
                "method": "GET",
                "identifier_override": "endpoint_health/service.ping"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.Health.Service.PingAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/movie/{movieId}",
                "method": "GET",
                "identifier_override": "endpoint_service.getMovie"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.Service.GetMovieAsync(\"movie-c06a4ad7\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/movie",
                "method": "POST",
                "identifier_override": "endpoint_service.createMovie"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.Service.CreateMovieAsync(\n    new Movie\n    {\n        Id = \"movie-c06a4ad7\",\n        Prequel = \"movie-cv9b914f\",\n        Title = \"The Boy and the Heron\",\n        From = \"Hayao Miyazaki\",\n        Rating = 8,\n        Type = \"movie\",\n        Tag = \"tag-wf9as23d\",\n        Metadata = new Dictionary<string, object>()\n        {\n            {\n                \"actors\",\n                new List<object?>() { \"Christian Bale\", \"Florence Pugh\", \"Willem Dafoe\" }\n            },\n            { \"releaseDate\", \"2023-12-08\" },\n            {\n                \"ratings\",\n                new Dictionary<object, object?>() { { \"imdb\", 7.6 }, { \"rottenTomatoes\", 97 } }\n            },\n        },\n        Revenue = 1000000,\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/metadata",
                "method": "GET",
                "identifier_override": "endpoint_service.getMetadata"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.Service.GetMetadataAsync(\n    new GetMetadataRequest\n    {\n        Shallow = false,\n        Tag = [\"development\"],\n        XApiVersion = \"0.0.1\",\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/big-entity",
                "method": "POST",
                "identifier_override": "endpoint_service.createBigEntity"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedExamples;\n\nvar client = new SeedExamplesClient(\"TOKEN\");\nawait client.Service.CreateBigEntityAsync(\n    new BigEntity\n    {\n        CastMember = new Actor { Name = \"name\", Id = \"id\" },\n        ExtendedMovie = new ExtendedMovie\n        {\n            Id = \"id\",\n            Prequel = \"prequel\",\n            Title = \"title\",\n            From = \"from\",\n            Rating = 1.1,\n            Type = \"movie\",\n            Tag = \"tag\",\n            Book = \"book\",\n            Metadata = new Dictionary<string, object>()\n            {\n                {\n                    \"metadata\",\n                    new Dictionary<object, object?>() { { \"key\", \"value\" } }\n                },\n            },\n            Revenue = 1000000,\n            Cast = new List<string>() { \"cast\", \"cast\" },\n        },\n        Entity = new Entity { Type = BasicType.Primitive, Name = \"name\" },\n        Metadata = \"metadata\",\n        CommonMetadata = new SeedExamples.Commons.Metadata\n        {\n            Id = \"id\",\n            Data = new Dictionary<string, string>() { { \"data\", \"data\" } },\n            JsonString = \"jsonString\",\n        },\n        EventInfo = new SeedExamples.Commons.Metadata\n        {\n            Id = \"id\",\n            Data = new Dictionary<string, string>() { { \"data\", \"data\" } },\n            JsonString = \"jsonString\",\n        },\n        Data = \"data\",\n        Migration = new Migration { Name = \"name\", Status = MigrationStatus.Running },\n        Exception = new ExceptionInfo\n        {\n            ExceptionType = \"exceptionType\",\n            ExceptionMessage = \"exceptionMessage\",\n            ExceptionStacktrace = \"exceptionStacktrace\",\n        },\n        Test = true,\n        Node = new Node\n        {\n            Name = \"name\",\n            Nodes = new List<Node>()\n            {\n                new Node\n                {\n                    Name = \"name\",\n                    Nodes = new List<Node>()\n                    {\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                    },\n                    Trees = new List<Tree>()\n                    {\n                        new Tree { Nodes = new List<Node>() { } },\n                        new Tree { Nodes = new List<Node>() { } },\n                    },\n                },\n                new Node\n                {\n                    Name = \"name\",\n                    Nodes = new List<Node>()\n                    {\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                    },\n                    Trees = new List<Tree>()\n                    {\n                        new Tree { Nodes = new List<Node>() { } },\n                        new Tree { Nodes = new List<Node>() { } },\n                    },\n                },\n            },\n            Trees = new List<Tree>()\n            {\n                new Tree\n                {\n                    Nodes = new List<Node>()\n                    {\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                    },\n                },\n                new Tree\n                {\n                    Nodes = new List<Node>()\n                    {\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                        new Node\n                        {\n                            Name = \"name\",\n                            Nodes = new List<Node>() { },\n                            Trees = new List<Tree>() { },\n                        },\n                    },\n                },\n            },\n        },\n        Directory = new Directory\n        {\n            Name = \"name\",\n            Files = new List<SeedExamples.File>()\n            {\n                new SeedExamples.File { Name = \"name\", Contents = \"contents\" },\n                new SeedExamples.File { Name = \"name\", Contents = \"contents\" },\n            },\n            Directories = new List<Directory>()\n            {\n                new Directory\n                {\n                    Name = \"name\",\n                    Files = new List<SeedExamples.File>()\n                    {\n                        new SeedExamples.File { Name = \"name\", Contents = \"contents\" },\n                        new SeedExamples.File { Name = \"name\", Contents = \"contents\" },\n                    },\n                    Directories = new List<Directory>()\n                    {\n                        new Directory\n                        {\n                            Name = \"name\",\n                            Files = new List<SeedExamples.File>() { },\n                            Directories = new List<Directory>() { },\n                        },\n                        new Directory\n                        {\n                            Name = \"name\",\n                            Files = new List<SeedExamples.File>() { },\n                            Directories = new List<Directory>() { },\n                        },\n                    },\n                },\n                new Directory\n                {\n                    Name = \"name\",\n                    Files = new List<SeedExamples.File>()\n                    {\n                        new SeedExamples.File { Name = \"name\", Contents = \"contents\" },\n                        new SeedExamples.File { Name = \"name\", Contents = \"contents\" },\n                    },\n                    Directories = new List<Directory>()\n                    {\n                        new Directory\n                        {\n                            Name = \"name\",\n                            Files = new List<SeedExamples.File>() { },\n                            Directories = new List<Directory>() { },\n                        },\n                        new Directory\n                        {\n                            Name = \"name\",\n                            Files = new List<SeedExamples.File>() { },\n                            Directories = new List<Directory>() { },\n                        },\n                    },\n                },\n            },\n        },\n        Moment = new Moment\n        {\n            Id = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n            Date = new DateOnly(2023, 1, 15),\n            Datetime = new DateTime(2024, 01, 15, 09, 30, 00, 000),\n        },\n    }\n);\n"
            }
        }
    ]
}