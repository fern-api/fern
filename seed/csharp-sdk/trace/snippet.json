{
    "types": {},
    "endpoints": [
        {
            "example_identifier": null,
            "id": {
                "path": "/",
                "method": "GET",
                "identifier_override": "endpoint_v2.test"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.TestAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-test-submission-status/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.updateTestSubmissionStatus"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.UpdateTestSubmissionStatusAsync(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    \"no-properties-union\"\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-test-submission-status-v2/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.sendTestSubmissionUpdate"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.SendTestSubmissionUpdateAsync(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    new TestSubmissionUpdate\n    {\n        UpdateTime = new DateTime(2024, 01, 15, 09, 30, 00, 000),\n        UpdateInfo = RunningSubmissionState.QueueingSubmission,\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-workspace-submission-status/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.updateWorkspaceSubmissionStatus"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.UpdateWorkspaceSubmissionStatusAsync(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    \"no-properties-union\"\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-workspace-submission-status-v2/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.sendWorkspaceSubmissionUpdate"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.SendWorkspaceSubmissionUpdateAsync(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    new WorkspaceSubmissionUpdate\n    {\n        UpdateTime = new DateTime(2024, 01, 15, 09, 30, 00, 000),\n        UpdateInfo = RunningSubmissionState.QueueingSubmission,\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-test-trace/submission/{submissionId}/testCase/{testCaseId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedTestCase"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.StoreTracedTestCaseAsync(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    \"testCaseId\",\n    new StoreTracedTestCaseRequest\n    {\n        Result = new TestCaseResultWithStdout\n        {\n            Result = new TestCaseResult\n            {\n                ExpectedResult = 1,\n                ActualResult = 1,\n                Passed = true,\n            },\n            Stdout = \"stdout\",\n        },\n        TraceResponses = new List<TraceResponse>()\n        {\n            new TraceResponse\n            {\n                SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n                LineNumber = 1,\n                ReturnValue = 1,\n                ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n                Stack = new StackInformation\n                {\n                    NumStackFrames = 1,\n                    TopStackFrame = new StackFrame\n                    {\n                        MethodName = \"methodName\",\n                        LineNumber = 1,\n                        Scopes = new List<Scope>()\n                        {\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                        },\n                    },\n                },\n                Stdout = \"stdout\",\n            },\n            new TraceResponse\n            {\n                SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n                LineNumber = 1,\n                ReturnValue = 1,\n                ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n                Stack = new StackInformation\n                {\n                    NumStackFrames = 1,\n                    TopStackFrame = new StackFrame\n                    {\n                        MethodName = \"methodName\",\n                        LineNumber = 1,\n                        Scopes = new List<Scope>()\n                        {\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                        },\n                    },\n                },\n                Stdout = \"stdout\",\n            },\n        },\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-test-trace-v2/submission/{submissionId}/testCase/{testCaseId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedTestCaseV2"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.StoreTracedTestCaseV2Async(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    \"testCaseId\",\n    new List<TraceResponseV2>()\n    {\n        new TraceResponseV2\n        {\n            SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n            LineNumber = 1,\n            File = new TracedFile { Filename = \"filename\", Directory = \"directory\" },\n            ReturnValue = 1,\n            ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n            Stack = new StackInformation\n            {\n                NumStackFrames = 1,\n                TopStackFrame = new StackFrame\n                {\n                    MethodName = \"methodName\",\n                    LineNumber = 1,\n                    Scopes = new List<Scope>()\n                    {\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                    },\n                },\n            },\n            Stdout = \"stdout\",\n        },\n        new TraceResponseV2\n        {\n            SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n            LineNumber = 1,\n            File = new TracedFile { Filename = \"filename\", Directory = \"directory\" },\n            ReturnValue = 1,\n            ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n            Stack = new StackInformation\n            {\n                NumStackFrames = 1,\n                TopStackFrame = new StackFrame\n                {\n                    MethodName = \"methodName\",\n                    LineNumber = 1,\n                    Scopes = new List<Scope>()\n                    {\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                    },\n                },\n            },\n            Stdout = \"stdout\",\n        },\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-workspace-trace/submission/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedWorkspace"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.StoreTracedWorkspaceAsync(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    new StoreTracedWorkspaceRequest\n    {\n        WorkspaceRunDetails = new WorkspaceRunDetails\n        {\n            ExceptionV2 = new ExceptionInfo\n            {\n                ExceptionType = \"exceptionType\",\n                ExceptionMessage = \"exceptionMessage\",\n                ExceptionStacktrace = \"exceptionStacktrace\",\n            },\n            Exception = new ExceptionInfo\n            {\n                ExceptionType = \"exceptionType\",\n                ExceptionMessage = \"exceptionMessage\",\n                ExceptionStacktrace = \"exceptionStacktrace\",\n            },\n            Stdout = \"stdout\",\n        },\n        TraceResponses = new List<TraceResponse>()\n        {\n            new TraceResponse\n            {\n                SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n                LineNumber = 1,\n                ReturnValue = 1,\n                ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n                Stack = new StackInformation\n                {\n                    NumStackFrames = 1,\n                    TopStackFrame = new StackFrame\n                    {\n                        MethodName = \"methodName\",\n                        LineNumber = 1,\n                        Scopes = new List<Scope>()\n                        {\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                        },\n                    },\n                },\n                Stdout = \"stdout\",\n            },\n            new TraceResponse\n            {\n                SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n                LineNumber = 1,\n                ReturnValue = 1,\n                ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n                Stack = new StackInformation\n                {\n                    NumStackFrames = 1,\n                    TopStackFrame = new StackFrame\n                    {\n                        MethodName = \"methodName\",\n                        LineNumber = 1,\n                        Scopes = new List<Scope>()\n                        {\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                            new Scope\n                            {\n                                Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                            },\n                        },\n                    },\n                },\n                Stdout = \"stdout\",\n            },\n        },\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/admin/store-workspace-trace-v2/submission/{submissionId}",
                "method": "POST",
                "identifier_override": "endpoint_admin.storeTracedWorkspaceV2"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Admin.StoreTracedWorkspaceV2Async(\n    \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n    new List<TraceResponseV2>()\n    {\n        new TraceResponseV2\n        {\n            SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n            LineNumber = 1,\n            File = new TracedFile { Filename = \"filename\", Directory = \"directory\" },\n            ReturnValue = 1,\n            ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n            Stack = new StackInformation\n            {\n                NumStackFrames = 1,\n                TopStackFrame = new StackFrame\n                {\n                    MethodName = \"methodName\",\n                    LineNumber = 1,\n                    Scopes = new List<Scope>()\n                    {\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                    },\n                },\n            },\n            Stdout = \"stdout\",\n        },\n        new TraceResponseV2\n        {\n            SubmissionId = \"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32\",\n            LineNumber = 1,\n            File = new TracedFile { Filename = \"filename\", Directory = \"directory\" },\n            ReturnValue = 1,\n            ExpressionLocation = new ExpressionLocation { Start = 1, Offset = 1 },\n            Stack = new StackInformation\n            {\n                NumStackFrames = 1,\n                TopStackFrame = new StackFrame\n                {\n                    MethodName = \"methodName\",\n                    LineNumber = 1,\n                    Scopes = new List<Scope>()\n                    {\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                        new Scope\n                        {\n                            Variables = new Dictionary<string, object>() { { \"variables\", 1 } },\n                        },\n                    },\n                },\n            },\n            Stdout = \"stdout\",\n        },\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/homepage-problems",
                "method": "GET",
                "identifier_override": "endpoint_homepage.getHomepageProblems"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Homepage.GetHomepageProblemsAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/homepage-problems",
                "method": "POST",
                "identifier_override": "endpoint_homepage.setHomepageProblems"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Homepage.SetHomepageProblemsAsync(new List<string>() { \"string\", \"string\" });\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/migration-info/all",
                "method": "GET",
                "identifier_override": "endpoint_migration.getAttemptedMigrations"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Migration.GetAttemptedMigrationsAsync(\n    new GetAttemptedMigrationsRequest { AdminKeyHeader = \"admin-key-header\" }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/v2/playlist/{serviceParam}/create",
                "method": "POST",
                "identifier_override": "endpoint_playlist.createPlaylist"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Playlist.CreatePlaylistAsync(\n    1,\n    new CreatePlaylistRequest\n    {\n        Datetime = new DateTime(2024, 01, 15, 09, 30, 00, 000),\n        OptionalDatetime = new DateTime(2024, 01, 15, 09, 30, 00, 000),\n        Body = new PlaylistCreateRequest\n        {\n            Name = \"name\",\n            Problems = new List<string>() { \"problems\", \"problems\" },\n        },\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/v2/playlist/{serviceParam}/all",
                "method": "GET",
                "identifier_override": "endpoint_playlist.getPlaylists"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Playlist.GetPlaylistsAsync(\n    1,\n    new GetPlaylistsRequest\n    {\n        Limit = 1,\n        OtherField = \"otherField\",\n        MultiLineDocs = \"multiLineDocs\",\n        OptionalMultipleField = [\"optionalMultipleField\"],\n        MultipleField = [\"multipleField\"],\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "method": "GET",
                "identifier_override": "endpoint_playlist.getPlaylist"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Playlist.GetPlaylistAsync(1, \"playlistId\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlistId}",
                "method": "PUT",
                "identifier_override": "endpoint_playlist.updatePlaylist"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Playlist.UpdatePlaylistAsync(\n    1,\n    \"playlistId\",\n    new UpdatePlaylistRequest\n    {\n        Name = \"name\",\n        Problems = new List<string>() { \"problems\", \"problems\" },\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/v2/playlist/{serviceParam}/{playlist_id}",
                "method": "DELETE",
                "identifier_override": "endpoint_playlist.deletePlaylist"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Playlist.DeletePlaylistAsync(1, \"playlist_id\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problem-crud/create",
                "method": "POST",
                "identifier_override": "endpoint_problem.createProblem"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Problem.CreateProblemAsync(\n    new CreateProblemRequest\n    {\n        ProblemName = \"problemName\",\n        ProblemDescription = new ProblemDescription\n        {\n            Boards = new List<object>() { \"boards\", \"boards\" },\n        },\n        Files = new Dictionary<Language, ProblemFiles>()\n        {\n            {\n                Language.Java,\n                new ProblemFiles\n                {\n                    SolutionFile = new FileInfo { Filename = \"filename\", Contents = \"contents\" },\n                    ReadOnlyFiles = new List<FileInfo>()\n                    {\n                        new FileInfo { Filename = \"filename\", Contents = \"contents\" },\n                        new FileInfo { Filename = \"filename\", Contents = \"contents\" },\n                    },\n                }\n            },\n        },\n        InputParams = new List<VariableTypeAndName>()\n        {\n            new VariableTypeAndName { VariableType = \"no-properties-union\", Name = \"name\" },\n            new VariableTypeAndName { VariableType = \"no-properties-union\", Name = \"name\" },\n        },\n        OutputType = \"no-properties-union\",\n        Testcases = new List<TestCaseWithExpectedResult>()\n        {\n            new TestCaseWithExpectedResult\n            {\n                TestCase = new TestCase\n                {\n                    Id = \"id\",\n                    Params = new List<object>() { 1, 1 },\n                },\n                ExpectedResult = 1,\n            },\n            new TestCaseWithExpectedResult\n            {\n                TestCase = new TestCase\n                {\n                    Id = \"id\",\n                    Params = new List<object>() { 1, 1 },\n                },\n                ExpectedResult = 1,\n            },\n        },\n        MethodName = \"methodName\",\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problem-crud/update/{problemId}",
                "method": "POST",
                "identifier_override": "endpoint_problem.updateProblem"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Problem.UpdateProblemAsync(\n    \"problemId\",\n    new CreateProblemRequest\n    {\n        ProblemName = \"problemName\",\n        ProblemDescription = new ProblemDescription\n        {\n            Boards = new List<object>() { \"boards\", \"boards\" },\n        },\n        Files = new Dictionary<Language, ProblemFiles>()\n        {\n            {\n                Language.Java,\n                new ProblemFiles\n                {\n                    SolutionFile = new FileInfo { Filename = \"filename\", Contents = \"contents\" },\n                    ReadOnlyFiles = new List<FileInfo>()\n                    {\n                        new FileInfo { Filename = \"filename\", Contents = \"contents\" },\n                        new FileInfo { Filename = \"filename\", Contents = \"contents\" },\n                    },\n                }\n            },\n        },\n        InputParams = new List<VariableTypeAndName>()\n        {\n            new VariableTypeAndName { VariableType = \"no-properties-union\", Name = \"name\" },\n            new VariableTypeAndName { VariableType = \"no-properties-union\", Name = \"name\" },\n        },\n        OutputType = \"no-properties-union\",\n        Testcases = new List<TestCaseWithExpectedResult>()\n        {\n            new TestCaseWithExpectedResult\n            {\n                TestCase = new TestCase\n                {\n                    Id = \"id\",\n                    Params = new List<object>() { 1, 1 },\n                },\n                ExpectedResult = 1,\n            },\n            new TestCaseWithExpectedResult\n            {\n                TestCase = new TestCase\n                {\n                    Id = \"id\",\n                    Params = new List<object>() { 1, 1 },\n                },\n                ExpectedResult = 1,\n            },\n        },\n        MethodName = \"methodName\",\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problem-crud/delete/{problemId}",
                "method": "DELETE",
                "identifier_override": "endpoint_problem.deleteProblem"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Problem.DeleteProblemAsync(\"problemId\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problem-crud/default-starter-files",
                "method": "POST",
                "identifier_override": "endpoint_problem.getDefaultStarterFiles"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Problem.GetDefaultStarterFilesAsync(\n    new GetDefaultStarterFilesRequest\n    {\n        InputParams = new List<VariableTypeAndName>()\n        {\n            new VariableTypeAndName { VariableType = \"no-properties-union\", Name = \"name\" },\n            new VariableTypeAndName { VariableType = \"no-properties-union\", Name = \"name\" },\n        },\n        OutputType = \"no-properties-union\",\n        MethodName = \"methodName\",\n    }\n);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/sessions/create-session/{language}",
                "method": "POST",
                "identifier_override": "endpoint_submission.createExecutionSession"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Submission.CreateExecutionSessionAsync(Language.Java);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/sessions/{sessionId}",
                "method": "GET",
                "identifier_override": "endpoint_submission.getExecutionSession"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Submission.GetExecutionSessionAsync(\"sessionId\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/sessions/stop/{sessionId}",
                "method": "DELETE",
                "identifier_override": "endpoint_submission.stopExecutionSession"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Submission.StopExecutionSessionAsync(\"sessionId\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/sessions/execution-sessions-state",
                "method": "GET",
                "identifier_override": "endpoint_submission.getExecutionSessionsState"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Submission.GetExecutionSessionsStateAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/sysprop/num-warm-instances/{language}/{numWarmInstances}",
                "method": "PUT",
                "identifier_override": "endpoint_sysprop.setNumWarmInstances"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Sysprop.SetNumWarmInstancesAsync(Language.Java, 1);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/sysprop/num-warm-instances",
                "method": "GET",
                "identifier_override": "endpoint_sysprop.getNumWarmInstances"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.Sysprop.GetNumWarmInstancesAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/lightweight-problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getLightweightProblems"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.Problem.GetLightweightProblemsAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getProblems"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.Problem.GetProblemsAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/problem-info/{problemId}",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getLatestProblem"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.Problem.GetLatestProblemAsync(\"problemId\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "method": "GET",
                "identifier_override": "endpoint_v2/problem.getProblemVersion"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.Problem.GetProblemVersionAsync(\"problemId\", 1);\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/lightweight-problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getLightweightProblems"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.V3.Problem.GetLightweightProblemsAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/problem-info",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getProblems"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.V3.Problem.GetProblemsAsync();\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/problem-info/{problemId}",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getLatestProblem"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.V3.Problem.GetLatestProblemAsync(\"problemId\");\n"
            }
        },
        {
            "example_identifier": null,
            "id": {
                "path": "/problems-v2/problem-info/{problemId}/version/{problemVersion}",
                "method": "GET",
                "identifier_override": "endpoint_v2/v3/problem.getProblemVersion"
            },
            "snippet": {
                "type": "csharp",
                "client": "using SeedTrace;\n\nvar client = new SeedTraceClient(\"TOKEN\");\nawait client.V2.V3.Problem.GetProblemVersionAsync(\"problemId\", 1);\n"
            }
        }
    ]
}