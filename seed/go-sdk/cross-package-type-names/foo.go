// Code generated by Fern. DO NOT EDIT.

package crosspackagetypenames

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/cross-package-type-names/fern/internal"
	big "math/big"
)

var (
	findRequestFieldOptionalString  = big.NewInt(1 << 0)
	findRequestFieldPublicProperty  = big.NewInt(1 << 1)
	findRequestFieldPrivateProperty = big.NewInt(1 << 2)
)

type FindRequest struct {
	OptionalString  OptionalString `json:"-" url:"optionalString,omitempty"`
	PublicProperty  *string        `json:"publicProperty,omitempty" url:"-"`
	PrivateProperty *int           `json:"privateProperty,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (f *FindRequest) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetOptionalString sets the OptionalString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FindRequest) SetOptionalString(optionalString OptionalString) {
	f.OptionalString = optionalString
	f.require(findRequestFieldOptionalString)
}

// SetPublicProperty sets the PublicProperty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FindRequest) SetPublicProperty(publicProperty *string) {
	f.PublicProperty = publicProperty
	f.require(findRequestFieldPublicProperty)
}

// SetPrivateProperty sets the PrivateProperty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FindRequest) SetPrivateProperty(privateProperty *int) {
	f.PrivateProperty = privateProperty
	f.require(findRequestFieldPrivateProperty)
}

var (
	importingTypeFieldImported = big.NewInt(1 << 0)
)

type ImportingType struct {
	Imported Imported `json:"imported" url:"imported"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *ImportingType) GetImported() Imported {
	if i == nil {
		return ""
	}
	return i.Imported
}

func (i *ImportingType) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImportingType) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetImported sets the Imported field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *ImportingType) SetImported(imported Imported) {
	i.Imported = imported
	i.require(importingTypeFieldImported)
}

func (i *ImportingType) UnmarshalJSON(data []byte) error {
	type unmarshaler ImportingType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImportingType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImportingType) MarshalJSON() ([]byte, error) {
	type embed ImportingType
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *ImportingType) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type OptionalString = *string
