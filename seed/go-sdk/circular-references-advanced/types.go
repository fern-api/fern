// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/circular-references-advanced/fern/internal"
	big "math/big"
)

var (
	importingAFieldA = big.NewInt(1 << 0)
)

type ImportingA struct {
	A *A `json:"a,omitempty" url:"a,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *ImportingA) GetA() *A {
	if i == nil {
		return nil
	}
	return i.A
}

func (i *ImportingA) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *ImportingA) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetA sets the A field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *ImportingA) SetA(a *A) {
	i.A = a
	i.require(importingAFieldA)
}

func (i *ImportingA) UnmarshalJSON(data []byte) error {
	type unmarshaler ImportingA
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImportingA(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImportingA) MarshalJSON() ([]byte, error) {
	type embed ImportingA
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *ImportingA) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	rootTypeFieldS = big.NewInt(1 << 0)
)

type RootType struct {
	S string `json:"s" url:"s"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RootType) GetS() string {
	if r == nil {
		return ""
	}
	return r.S
}

func (r *RootType) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RootType) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetS sets the S field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RootType) SetS(s string) {
	r.S = s
	r.require(rootTypeFieldS)
}

func (r *RootType) UnmarshalJSON(data []byte) error {
	type unmarshaler RootType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RootType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RootType) MarshalJSON() ([]byte, error) {
	type embed RootType
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RootType) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
