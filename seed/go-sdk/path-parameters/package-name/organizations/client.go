// Code generated by Fern. DO NOT EDIT.

package organizations

import (
	context "context"
	path "github.com/fern-api/path-parameters-go"
	core "github.com/fern-api/path-parameters-go/core"
	internal "github.com/fern-api/path-parameters-go/internal"
	option "github.com/fern-api/path-parameters-go/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) GetOrganization(
	ctx context.Context,
	tenantId string,
	organizationId string,
	opts ...option.RequestOption,
) (*path.Organization, error) {
	response, err := c.WithRawResponse.GetOrganization(
		ctx,
		tenantId,
		organizationId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) GetOrganizationUser(
	ctx context.Context,
	request *path.GetOrganizationUserRequest,
	opts ...option.RequestOption,
) (*path.User, error) {
	response, err := c.WithRawResponse.GetOrganizationUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) SearchOrganizations(
	ctx context.Context,
	tenantId string,
	organizationId string,
	request *path.SearchOrganizationsRequest,
	opts ...option.RequestOption,
) ([]*path.Organization, error) {
	response, err := c.WithRawResponse.SearchOrganizations(
		ctx,
		tenantId,
		organizationId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
