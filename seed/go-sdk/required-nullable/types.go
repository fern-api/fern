// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/required-nullable/fern/internal"
	big "math/big"
)

var (
	getFooRequestFieldOptionalBaz         = big.NewInt(1 << 0)
	getFooRequestFieldOptionalNullableBaz = big.NewInt(1 << 1)
	getFooRequestFieldRequiredBaz         = big.NewInt(1 << 2)
	getFooRequestFieldRequiredNullableBaz = big.NewInt(1 << 3)
)

type GetFooRequest struct {
	// An optional baz
	OptionalBaz *string `json:"-" url:"optional_baz,omitempty"`
	// An optional baz
	OptionalNullableBaz *string `json:"-" url:"optional_nullable_baz,omitempty"`
	// A required baz
	RequiredBaz string `json:"-" url:"required_baz"`
	// A required baz
	RequiredNullableBaz *string `json:"-" url:"required_nullable_baz,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetFooRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetOptionalBaz sets the OptionalBaz field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFooRequest) SetOptionalBaz(optionalBaz *string) {
	g.OptionalBaz = optionalBaz
	g.require(getFooRequestFieldOptionalBaz)
}

// SetOptionalNullableBaz sets the OptionalNullableBaz field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFooRequest) SetOptionalNullableBaz(optionalNullableBaz *string) {
	g.OptionalNullableBaz = optionalNullableBaz
	g.require(getFooRequestFieldOptionalNullableBaz)
}

// SetRequiredBaz sets the RequiredBaz field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFooRequest) SetRequiredBaz(requiredBaz string) {
	g.RequiredBaz = requiredBaz
	g.require(getFooRequestFieldRequiredBaz)
}

// SetRequiredNullableBaz sets the RequiredNullableBaz field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetFooRequest) SetRequiredNullableBaz(requiredNullableBaz *string) {
	g.RequiredNullableBaz = requiredNullableBaz
	g.require(getFooRequestFieldRequiredNullableBaz)
}

var (
	fooFieldBar                 = big.NewInt(1 << 0)
	fooFieldNullableBar         = big.NewInt(1 << 1)
	fooFieldNullableRequiredBar = big.NewInt(1 << 2)
	fooFieldRequiredBar         = big.NewInt(1 << 3)
)

type Foo struct {
	Bar                 *string `json:"bar,omitempty" url:"bar,omitempty"`
	NullableBar         *string `json:"nullable_bar,omitempty" url:"nullable_bar,omitempty"`
	NullableRequiredBar *string `json:"nullable_required_bar,omitempty" url:"nullable_required_bar,omitempty"`
	RequiredBar         string  `json:"required_bar" url:"required_bar"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *Foo) GetBar() *string {
	if f == nil {
		return nil
	}
	return f.Bar
}

func (f *Foo) GetNullableBar() *string {
	if f == nil {
		return nil
	}
	return f.NullableBar
}

func (f *Foo) GetNullableRequiredBar() *string {
	if f == nil {
		return nil
	}
	return f.NullableRequiredBar
}

func (f *Foo) GetRequiredBar() string {
	if f == nil {
		return ""
	}
	return f.RequiredBar
}

func (f *Foo) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *Foo) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetBar sets the Bar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *Foo) SetBar(bar *string) {
	f.Bar = bar
	f.require(fooFieldBar)
}

// SetNullableBar sets the NullableBar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *Foo) SetNullableBar(nullableBar *string) {
	f.NullableBar = nullableBar
	f.require(fooFieldNullableBar)
}

// SetNullableRequiredBar sets the NullableRequiredBar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *Foo) SetNullableRequiredBar(nullableRequiredBar *string) {
	f.NullableRequiredBar = nullableRequiredBar
	f.require(fooFieldNullableRequiredBar)
}

// SetRequiredBar sets the RequiredBar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *Foo) SetRequiredBar(requiredBar string) {
	f.RequiredBar = requiredBar
	f.require(fooFieldRequiredBar)
}

func (f *Foo) UnmarshalJSON(data []byte) error {
	type unmarshaler Foo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = Foo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *Foo) MarshalJSON() ([]byte, error) {
	type embed Foo
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *Foo) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}
