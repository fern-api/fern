// Code generated by Fern. DO NOT EDIT.

package root_test

import (
	context "context"
	fmt "fmt"
	fern "github.com/query-parameters-openapi/fern"
	client "github.com/query-parameters-openapi/fern/client"
	option "github.com/query-parameters-openapi/fern/option"
	require "github.com/stretchr/testify/require"
	gowiremock "github.com/wiremock/go-wiremock"
	wiremocktestcontainersgo "github.com/wiremock/wiremock-testcontainers-go"
	http "net/http"
	os "os"
	testing "testing"
)

// TestMain sets up shared test fixtures for all tests in this package// Global test fixtures
var (
	WireMockContainer *wiremocktestcontainersgo.WireMockContainer
	WireMockBaseURL   string
	WireMockClient    *gowiremock.Client
)

// TestMain sets up shared test fixtures for all tests in this package
func TestMain(m *testing.M) {
	// Setup shared WireMock container
	ctx := context.Background()
	container, err := wiremocktestcontainersgo.RunContainerAndStopOnCleanup(
		ctx,
		&testing.T{},
		wiremocktestcontainersgo.WithImage("docker.io/wiremock/wiremock:3.9.1"),
	)
	if err != nil {
		fmt.Printf("Failed to start WireMock container: %v\n", err)
		os.Exit(1)
	}

	// Store global references
	WireMockContainer = container
	WireMockClient = container.Client

	// Get the base URL
	baseURL, err := container.Endpoint(ctx, "")
	if err != nil {
		fmt.Printf("Failed to get WireMock container endpoint: %v\n", err)
		os.Exit(1)
	}
	WireMockBaseURL = "http://" + baseURL

	// Run all tests
	code := m.Run()

	// Cleanup
	if WireMockContainer != nil {
		WireMockContainer.Terminate(ctx)
	}

	// Exit with the same code as the tests
	os.Exit(code)
}

func TestSearchWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/user/getUsername")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"results": []interface{}{"results", "results"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &fern.SearchRequest{
		Limit: 1,
		Id:    "id",
		Date:  "date",
		Deadline: fern.MustParseDateTime(
			"2024-01-15T09:30:00Z",
		),
		Bytes: "bytes",
		User: &fern.User{
			Name: fern.String(
				"name",
			),
			Tags: []string{
				"tags",
				"tags",
			},
		},
		UserList: []*fern.User{
			&fern.User{
				Name: fern.String(
					"name",
				),
				Tags: []string{
					"tags",
					"tags",
				},
			},
		},
		OptionalDeadline: fern.Time(
			fern.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
		),
		KeyValue: map[string]*string{
			"keyValue": fern.String(
				"keyValue",
			),
		},
		OptionalString: fern.String(
			"optionalString",
		),
		NestedUser: &fern.NestedUser{
			Name: fern.String(
				"name",
			),
			User: &fern.User{
				Name: fern.String(
					"name",
				),
				Tags: []string{
					"tags",
					"tags",
				},
			},
		},
		OptionalUser: &fern.User{
			Name: fern.String(
				"name",
			),
			Tags: []string{
				"tags",
				"tags",
			},
		},
		ExcludeUser: []*fern.User{
			&fern.User{
				Name: fern.String(
					"name",
				),
				Tags: []string{
					"tags",
					"tags",
				},
			},
		},
		Filter: []*string{
			fern.String(
				"filter",
			),
		},
		Neighbor: &fern.User{
			Name: fern.String(
				"name",
			),
			Tags: []string{
				"tags",
				"tags",
			},
		},
		NeighborRequired: &fern.SearchRequestNeighborRequired{
			User: &fern.User{
				Name: fern.String(
					"name",
				),
				Tags: []string{
					"tags",
					"tags",
				},
			},
		},
	}
	_, invocationErr := client.Search(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}
