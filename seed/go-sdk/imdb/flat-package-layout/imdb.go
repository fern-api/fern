// This file was auto-generated by Fern from our API Definition.

package api

import (
	context "context"
	json "encoding/json"
	fmt "fmt"
	core "github.com/imdb/fern/core"
	internal "github.com/imdb/fern/internal"
	option "github.com/imdb/fern/option"
	http "net/http"
)

type ImdbClient struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewImdbClient(opts ...option.RequestOption) *ImdbClient {
	options := core.NewRequestOptions(opts...)
	return &ImdbClient{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Add a movie to the database
func (i *ImdbClient) CreateMovie(
	ctx context.Context,
	request *CreateMovieRequest,
	opts ...option.RequestOption,
) (MovieId, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		i.baseURL,
		"",
	)
	endpointURL := baseURL + "/movies/create-movie"
	headers := internal.MergeHeaders(
		i.header.Clone(),
		options.ToHeader(),
	)

	var response MovieId
	if err := i.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}

func (i *ImdbClient) GetMovie(
	ctx context.Context,
	movieId MovieId,
	opts ...option.RequestOption,
) (*Movie, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		i.baseURL,
		"",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/movies/%v",
		movieId,
	)
	headers := internal.MergeHeaders(
		i.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &MovieDoesNotExistError{
				APIError: apiError,
			}
		},
	}

	var response *Movie
	if err := i.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

type CreateMovieRequest struct {
	Title  string  `json:"title" url:"title"`
	Rating float64 `json:"rating" url:"rating"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateMovieRequest) GetTitle() string {
	if c == nil {
		return ""
	}
	return c.Title
}

func (c *CreateMovieRequest) GetRating() float64 {
	if c == nil {
		return 0
	}
	return c.Rating
}

func (c *CreateMovieRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateMovieRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateMovieRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateMovieRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateMovieRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Movie struct {
	Id    MovieId `json:"id" url:"id"`
	Title string  `json:"title" url:"title"`
	// The rating scale is one to five stars
	Rating float64 `json:"rating" url:"rating"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *Movie) GetId() MovieId {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *Movie) GetTitle() string {
	if m == nil {
		return ""
	}
	return m.Title
}

func (m *Movie) GetRating() float64 {
	if m == nil {
		return 0
	}
	return m.Rating
}

func (m *Movie) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *Movie) UnmarshalJSON(data []byte) error {
	type unmarshaler Movie
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = Movie(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *Movie) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MovieId = string
