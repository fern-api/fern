// Code generated by Fern. DO NOT EDIT.

package upload

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/fern-api/file-upload-go/internal"
	io "io"
	big "math/big"
)

type JustFileRequest struct {
	File io.Reader `json:"-" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (j *JustFileRequest) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

var (
	justFileWithQueryParamsRequestFieldMaybeString           = big.NewInt(1 << 0)
	justFileWithQueryParamsRequestFieldInteger               = big.NewInt(1 << 1)
	justFileWithQueryParamsRequestFieldMaybeInteger          = big.NewInt(1 << 2)
	justFileWithQueryParamsRequestFieldListOfStrings         = big.NewInt(1 << 3)
	justFileWithQueryParamsRequestFieldOptionalListOfStrings = big.NewInt(1 << 4)
)

type JustFileWithQueryParamsRequest struct {
	MaybeString           *string   `json:"-" url:"maybeString,omitempty"`
	Integer               int       `json:"-" url:"integer"`
	MaybeInteger          *int      `json:"-" url:"maybeInteger,omitempty"`
	ListOfStrings         []string  `json:"-" url:"listOfStrings"`
	OptionalListOfStrings []*string `json:"-" url:"optionalListOfStrings,omitempty"`
	File                  io.Reader `json:"-" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (j *JustFileWithQueryParamsRequest) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetMaybeString sets the MaybeString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JustFileWithQueryParamsRequest) SetMaybeString(maybeString *string) {
	j.MaybeString = maybeString
	j.require(justFileWithQueryParamsRequestFieldMaybeString)
}

// SetInteger sets the Integer field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JustFileWithQueryParamsRequest) SetInteger(integer int) {
	j.Integer = integer
	j.require(justFileWithQueryParamsRequestFieldInteger)
}

// SetMaybeInteger sets the MaybeInteger field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JustFileWithQueryParamsRequest) SetMaybeInteger(maybeInteger *int) {
	j.MaybeInteger = maybeInteger
	j.require(justFileWithQueryParamsRequestFieldMaybeInteger)
}

// SetListOfStrings sets the ListOfStrings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JustFileWithQueryParamsRequest) SetListOfStrings(listOfStrings []string) {
	j.ListOfStrings = listOfStrings
	j.require(justFileWithQueryParamsRequestFieldListOfStrings)
}

// SetOptionalListOfStrings sets the OptionalListOfStrings field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JustFileWithQueryParamsRequest) SetOptionalListOfStrings(optionalListOfStrings []*string) {
	j.OptionalListOfStrings = optionalListOfStrings
	j.require(justFileWithQueryParamsRequestFieldOptionalListOfStrings)
}

type OptionalArgsRequest struct {
	ImageFile io.Reader   `json:"-" url:"-"`
	Request   interface{} `json:"request,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (o *OptionalArgsRequest) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

type MyRequest struct {
	File                  io.Reader               `json:"-" url:"-"`
	FileList              []io.Reader             `json:"-" url:"-"`
	MaybeFile             io.Reader               `json:"-" url:"-"`
	MaybeFileList         []io.Reader             `json:"-" url:"-"`
	MaybeString           *string                 `json:"maybe_string,omitempty" url:"-"`
	Integer               int                     `json:"integer" url:"-"`
	MaybeInteger          *int                    `json:"maybe_integer,omitempty" url:"-"`
	OptionalListOfStrings []string                `json:"optional_list_of_strings,omitempty" url:"-"`
	ListOfObjects         []*MyObject             `json:"list_of_objects,omitempty" url:"-"`
	OptionalMetadata      interface{}             `json:"optional_metadata,omitempty" url:"-"`
	OptionalObjectType    *ObjectType             `json:"optional_object_type,omitempty" url:"-"`
	OptionalId            *Id                     `json:"optional_id,omitempty" url:"-"`
	AliasObject           MyAliasObject           `json:"alias_object,omitempty" url:"-"`
	ListOfAliasObject     []MyAliasObject         `json:"list_of_alias_object,omitempty" url:"-"`
	AliasListOfObject     MyCollectionAliasObject `json:"alias_list_of_object,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (m *MyRequest) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

type Id = string

type MyAliasObject = *MyObject

type MyCollectionAliasObject = []*MyObject

var (
	myInlineTypeFieldBar = big.NewInt(1 << 0)
)

type MyInlineType struct {
	Bar string `json:"bar" url:"bar"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MyInlineType) GetBar() string {
	if m == nil {
		return ""
	}
	return m.Bar
}

func (m *MyInlineType) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MyInlineType) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetBar sets the Bar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MyInlineType) SetBar(bar string) {
	m.Bar = bar
	m.require(myInlineTypeFieldBar)
}

func (m *MyInlineType) UnmarshalJSON(data []byte) error {
	type unmarshaler MyInlineType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MyInlineType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MyInlineType) MarshalJSON() ([]byte, error) {
	type embed MyInlineType
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MyInlineType) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	myObjectFieldFoo = big.NewInt(1 << 0)
)

type MyObject struct {
	Foo string `json:"foo" url:"foo"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MyObject) GetFoo() string {
	if m == nil {
		return ""
	}
	return m.Foo
}

func (m *MyObject) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MyObject) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetFoo sets the Foo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MyObject) SetFoo(foo string) {
	m.Foo = foo
	m.require(myObjectFieldFoo)
}

func (m *MyObject) UnmarshalJSON(data []byte) error {
	type unmarshaler MyObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MyObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MyObject) MarshalJSON() ([]byte, error) {
	type embed MyObject
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MyObject) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	myObjectWithOptionalFieldProp         = big.NewInt(1 << 0)
	myObjectWithOptionalFieldOptionalProp = big.NewInt(1 << 1)
)

type MyObjectWithOptional struct {
	Prop         string  `json:"prop" url:"prop"`
	OptionalProp *string `json:"optionalProp,omitempty" url:"optionalProp,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MyObjectWithOptional) GetProp() string {
	if m == nil {
		return ""
	}
	return m.Prop
}

func (m *MyObjectWithOptional) GetOptionalProp() *string {
	if m == nil {
		return nil
	}
	return m.OptionalProp
}

func (m *MyObjectWithOptional) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MyObjectWithOptional) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetProp sets the Prop field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MyObjectWithOptional) SetProp(prop string) {
	m.Prop = prop
	m.require(myObjectWithOptionalFieldProp)
}

// SetOptionalProp sets the OptionalProp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MyObjectWithOptional) SetOptionalProp(optionalProp *string) {
	m.OptionalProp = optionalProp
	m.require(myObjectWithOptionalFieldOptionalProp)
}

func (m *MyObjectWithOptional) UnmarshalJSON(data []byte) error {
	type unmarshaler MyObjectWithOptional
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MyObjectWithOptional(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MyObjectWithOptional) MarshalJSON() ([]byte, error) {
	type embed MyObjectWithOptional
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MyObjectWithOptional) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ObjectType string

const (
	ObjectTypeFoo ObjectType = "FOO"
	ObjectTypeBar ObjectType = "BAR"
)

func NewObjectTypeFromString(s string) (ObjectType, error) {
	switch s {
	case "FOO":
		return ObjectTypeFoo, nil
	case "BAR":
		return ObjectTypeBar, nil
	}
	var t ObjectType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o ObjectType) Ptr() *ObjectType {
	return &o
}

type WithContentTypeRequest struct {
	File   io.Reader `json:"-" url:"-"`
	Foo    string    `json:"foo" url:"-"`
	Bar    *MyObject `json:"bar,omitempty" url:"-"`
	FooBar *MyObject `json:"foo_bar,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (w *WithContentTypeRequest) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

type MyOtherRequest struct {
	File                       io.Reader               `json:"-" url:"-"`
	FileList                   []io.Reader             `json:"-" url:"-"`
	MaybeFile                  io.Reader               `json:"-" url:"-"`
	MaybeFileList              []io.Reader             `json:"-" url:"-"`
	MaybeString                *string                 `json:"maybe_string,omitempty" url:"-"`
	Integer                    int                     `json:"integer" url:"-"`
	MaybeInteger               *int                    `json:"maybe_integer,omitempty" url:"-"`
	OptionalListOfStrings      []string                `json:"optional_list_of_strings,omitempty" url:"-"`
	ListOfObjects              []*MyObject             `json:"list_of_objects,omitempty" url:"-"`
	OptionalMetadata           interface{}             `json:"optional_metadata,omitempty" url:"-"`
	OptionalObjectType         *ObjectType             `json:"optional_object_type,omitempty" url:"-"`
	OptionalId                 *Id                     `json:"optional_id,omitempty" url:"-"`
	ListOfObjectsWithOptionals []*MyObjectWithOptional `json:"list_of_objects_with_optionals,omitempty" url:"-"`
	AliasObject                MyAliasObject           `json:"alias_object,omitempty" url:"-"`
	ListOfAliasObject          []MyAliasObject         `json:"list_of_alias_object,omitempty" url:"-"`
	AliasListOfObject          MyCollectionAliasObject `json:"alias_list_of_object,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (m *MyOtherRequest) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

type WithFormEncodingRequest struct {
	File io.Reader `json:"-" url:"-"`
	Foo  string    `json:"foo" url:"-"`
	Bar  *MyObject `json:"bar,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (w *WithFormEncodingRequest) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

type InlineTypeRequest struct {
	File    io.Reader     `json:"-" url:"-"`
	Request *MyInlineType `json:"request,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (i *InlineTypeRequest) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}
