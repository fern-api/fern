// Code generated by Fern. DO NOT EDIT.

package file

import (
	json "encoding/json"
	fmt "fmt"
	fern "github.com/objects-with-imports/fern"
	internal "github.com/objects-with-imports/fern/internal"
	big "math/big"
)

var (
	directoryFieldName        = big.NewInt(1 << 0)
	directoryFieldFiles       = big.NewInt(1 << 1)
	directoryFieldDirectories = big.NewInt(1 << 2)
)

type Directory struct {
	Name        string       `json:"name" url:"name"`
	Files       []*fern.File `json:"files,omitempty" url:"files,omitempty"`
	Directories []*Directory `json:"directories,omitempty" url:"directories,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Directory) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *Directory) GetFiles() []*fern.File {
	if d == nil {
		return nil
	}
	return d.Files
}

func (d *Directory) GetDirectories() []*Directory {
	if d == nil {
		return nil
	}
	return d.Directories
}

func (d *Directory) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Directory) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Directory) SetName(name string) {
	d.Name = name
	d.require(directoryFieldName)
}

// SetFiles sets the Files field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Directory) SetFiles(files []*fern.File) {
	d.Files = files
	d.require(directoryFieldFiles)
}

// SetDirectories sets the Directories field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Directory) SetDirectories(directories []*Directory) {
	d.Directories = directories
	d.require(directoryFieldDirectories)
}

func (d *Directory) UnmarshalJSON(data []byte) error {
	type unmarshaler Directory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Directory(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Directory) MarshalJSON() ([]byte, error) {
	type embed Directory
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *Directory) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}
