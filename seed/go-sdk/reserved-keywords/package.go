// Code generated by Fern. DO NOT EDIT.


package nurseryapi
import (
fmt "fmt"
io "io"
uuid "github.com/google/uuid"
time "time"
assert "github.com/stretchr/testify/assert"
core "github.com/reserved-keywords/fern/core"
option "github.com/reserved-keywords/fern/option"
json "encoding/json"
http "net/http"
url "net/url"
strings "strings"
testing "testing"
bytes "bytes"
context "context"
base64 "encoding/base64"
multipart "mime/multipart"
internal "github.com/reserved-keywords/fern/internal"
errors "errors"
os "os"
strconv "strconv"
require "github.com/stretchr/testify/require"
)
type TestRequest struct {
For string`json:"-" url:"for"`
}

type Package struct {
Name string`json:"name" url:"name"`

extraProperties map[string]interface{}
rawJSON json.RawMessage
}

func (p *Package) GetName()string {
if p == nil {
return ""
}
return p.Name
}

func (p *Package) GetExtraProperties() map[string]interface{} {
return p.extraProperties
}

func (p *Package) UnmarshalJSON(data []byte) error {
type unmarshaler Package
var value unmarshaler
if err := json.Unmarshal(data, &value); err != nil {
return err
}
*p = Package(value)
extraProperties, err := internal.ExtractExtraProperties(data, *p)
if err != nil {
return err
}
p.extraProperties = extraProperties
p.rawJSON = json.RawMessage(data)
return nil
}

func (p *Package) String() string {
if len(p.rawJSON) > 0 {
if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
return value
}
}
if value, err := internal.StringifyJSON(p); err == nil {
return value
}
return fmt.Sprintf("%#v", p)
}

type Record struct {
Foo map[string]string`json:"foo" url:"foo"`
3D int`json:"3d" url:"3d"`

extraProperties map[string]interface{}
rawJSON json.RawMessage
}

func (r *Record) GetFoo()map[string]string {
if r == nil {
return nil
}
return r.Foo
}

func (r *Record) Get3D()int {
if r == nil {
return 0
}
return r.3D
}

func (r *Record) GetExtraProperties() map[string]interface{} {
return r.extraProperties
}

func (r *Record) UnmarshalJSON(data []byte) error {
type unmarshaler Record
var value unmarshaler
if err := json.Unmarshal(data, &value); err != nil {
return err
}
*r = Record(value)
extraProperties, err := internal.ExtractExtraProperties(data, *r)
if err != nil {
return err
}
r.extraProperties = extraProperties
r.rawJSON = json.RawMessage(data)
return nil
}

func (r *Record) String() string {
if len(r.rawJSON) > 0 {
if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
return value
}
}
if value, err := internal.StringifyJSON(r); err == nil {
return value
}
return fmt.Sprintf("%#v", r)
}

