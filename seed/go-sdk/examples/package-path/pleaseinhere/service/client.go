// Code generated by Fern. DO NOT EDIT.

package service

import (
	context "context"
	pleaseinhere "github.com/examples/fern/pleaseinhere"
	core "github.com/examples/fern/pleaseinhere/core"
	internal "github.com/examples/fern/pleaseinhere/internal"
	option "github.com/examples/fern/pleaseinhere/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) GetMovie(
	ctx context.Context,
	movieId pleaseinhere.MovieId,
	opts ...option.RequestOption,
) (*pleaseinhere.Movie, error) {
	response, err := c.WithRawResponse.GetMovie(
		ctx,
		movieId,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CreateMovie(
	ctx context.Context,
	request *pleaseinhere.Movie,
	opts ...option.RequestOption,
) (pleaseinhere.MovieId, error) {
	response, err := c.WithRawResponse.CreateMovie(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}

func (c *Client) GetMetadata(
	ctx context.Context,
	request *pleaseinhere.GetMetadataRequest,
	opts ...option.RequestOption,
) (*pleaseinhere.Metadata, error) {
	response, err := c.WithRawResponse.GetMetadata(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CreateBigEntity(
	ctx context.Context,
	request *pleaseinhere.BigEntity,
	opts ...option.RequestOption,
) (*pleaseinhere.Response, error) {
	response, err := c.WithRawResponse.CreateBigEntity(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) RefreshToken(
	ctx context.Context,
	request *pleaseinhere.RefreshTokenRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.RefreshToken(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
