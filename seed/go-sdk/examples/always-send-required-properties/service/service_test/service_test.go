// Code generated by Fern. DO NOT EDIT.

package service_test

import (
	context "context"
	fmt "fmt"
	fern "github.com/examples/fern"
	client "github.com/examples/fern/client"
	commons "github.com/examples/fern/commons"
	option "github.com/examples/fern/option"
	uuid "github.com/google/uuid"
	require "github.com/stretchr/testify/require"
	gowiremock "github.com/wiremock/go-wiremock"
	wiremocktestcontainersgo "github.com/wiremock/wiremock-testcontainers-go"
	http "net/http"
	os "os"
	testing "testing"
)

// TestMain sets up shared test fixtures for all tests in this package// Global test fixtures
var (
	WireMockContainer *wiremocktestcontainersgo.WireMockContainer
	WireMockBaseURL   string
	WireMockClient    *gowiremock.Client
)

// TestMain sets up shared test fixtures for all tests in this package
func TestMain(m *testing.M) {
	// Setup shared WireMock container
	ctx := context.Background()
	container, err := wiremocktestcontainersgo.RunContainerAndStopOnCleanup(
		ctx,
		&testing.T{},
		wiremocktestcontainersgo.WithImage("docker.io/wiremock/wiremock:3.9.1"),
	)
	if err != nil {
		fmt.Printf("Failed to start WireMock container: %v\n", err)
		os.Exit(1)
	}

	// Store global references
	WireMockContainer = container
	WireMockClient = container.Client

	// Get the base URL
	baseURL, err := container.Endpoint(ctx, "")
	if err != nil {
		fmt.Printf("Failed to get WireMock container endpoint: %v\n", err)
		os.Exit(1)
	}
	WireMockBaseURL = "http://" + baseURL

	// Run all tests
	code := m.Run()

	// Cleanup
	if WireMockContainer != nil {
		WireMockContainer.Terminate(ctx)
	}

	// Exit with the same code as the tests
	os.Exit(code)
}

func TestServiceGetMovieWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/movie/{movieId}")).WithPathParam(
		"movieId",
		gowiremock.Matching("movie-c06a4ad7"),
	).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"id": "movie-c06a4ad7", "prequel": "movie-cv9b914f", "title": "The Boy and the Heron", "from": "Hayao Miyazaki", "rating": 8, "type": "movie", "tag": "tag-wf9as23d", "metadata": map[string]interface{}{"actors": []interface{}{"Christian Bale", "Florence Pugh", "Willem Dafoe"}, "releaseDate": "2023-12-08", "ratings": map[string]interface{}{"rottenTomatoes": 97, "imdb": 7.6}}, "revenue": 1000000},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	_, invocationErr := client.Service.GetMovie(
		context.TODO(),
		"movie-c06a4ad7",
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestServiceCreateMovieWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/movie")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			"movie-c06a4ad7",
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &fern.Movie{
		Id: "movie-c06a4ad7",
		Prequel: fern.String(
			"movie-cv9b914f",
		),
		Title:  "The Boy and the Heron",
		From:   "Hayao Miyazaki",
		Rating: 8,
		Tag:    "tag-wf9as23d",
		Metadata: map[string]any{
			"actors": []any{
				"Christian Bale",
				"Florence Pugh",
				"Willem Dafoe",
			},
			"releaseDate": "2023-12-08",
			"ratings": map[string]any{
				"rottenTomatoes": 97,
				"imdb":           7.6,
			},
		},
		Revenue: 1000000,
	}
	_, invocationErr := client.Service.CreateMovie(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestServiceGetMetadataWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/metadata")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"type": "html", "extra": map[string]interface{}{"version": "0.0.1", "tenancy": "test"}, "tags": []interface{}{"development", "public"}, "value": "<head>...</head>"},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &fern.GetMetadataRequest{
		Shallow: fern.Bool(
			false,
		),
		Tag: []*string{
			fern.String(
				"development",
			),
		},
		XApiVersion: "0.0.1",
	}
	_, invocationErr := client.Service.GetMetadata(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestServiceCreateBigEntityWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/big-entity")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"response": map[string]interface{}{"key": "value"}, "identifiers": []interface{}{map[string]interface{}{"type": "primitive", "value": "value", "label": "label"}, map[string]interface{}{"type": "primitive", "value": "value", "label": "label"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &fern.BigEntity{
		CastMember: &fern.CastMember{
			Actor: &fern.Actor{
				Name: "name",
				Id:   "id",
			},
		},
		ExtendedMovie: &fern.ExtendedMovie{
			Cast: []string{
				"cast",
				"cast",
			},
			Id: "id",
			Prequel: fern.String(
				"prequel",
			),
			Title:  "title",
			From:   "from",
			Rating: 1.1,
			Tag:    "tag",
			Book: fern.String(
				"book",
			),
			Metadata: map[string]any{
				"metadata": map[string]any{
					"key": "value",
				},
			},
			Revenue: 1000000,
		},
		Entity: &fern.Entity{
			Type: &fern.Type{
				BasicType: fern.BasicTypePrimitive,
			},
			Name: "name",
		},
		Metadata: &fern.Metadata{
			Extra: map[string]string{
				"extra": "extra",
			},
			Tags: []string{
				"tags",
			},
		},
		CommonMetadata: &commons.Metadata{
			Id: "id",
			Data: map[string]string{
				"data": "data",
			},
			JsonString: fern.String(
				"jsonString",
			),
		},
		EventInfo: &commons.EventInfo{
			Metadata: &commons.Metadata{
				Id: "id",
				Data: map[string]string{
					"data": "data",
				},
				JsonString: fern.String(
					"jsonString",
				),
			},
		},
		Data: &commons.Data{},
		Migration: &fern.Migration{
			Name:   "name",
			Status: fern.MigrationStatusRunning,
		},
		Exception: &fern.Exception{
			Generic: &fern.ExceptionInfo{
				ExceptionType:       "exceptionType",
				ExceptionMessage:    "exceptionMessage",
				ExceptionStacktrace: "exceptionStacktrace",
			},
		},
		Test: &fern.Test{},
		Node: &fern.Node{
			Name: "name",
			Nodes: []*fern.Node{
				&fern.Node{
					Name: "name",
					Nodes: []*fern.Node{
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
					},
					Trees: []*fern.Tree{
						&fern.Tree{
							Nodes: []*fern.Node{},
						},
						&fern.Tree{
							Nodes: []*fern.Node{},
						},
					},
				},
				&fern.Node{
					Name: "name",
					Nodes: []*fern.Node{
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
					},
					Trees: []*fern.Tree{
						&fern.Tree{
							Nodes: []*fern.Node{},
						},
						&fern.Tree{
							Nodes: []*fern.Node{},
						},
					},
				},
			},
			Trees: []*fern.Tree{
				&fern.Tree{
					Nodes: []*fern.Node{
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
					},
				},
				&fern.Tree{
					Nodes: []*fern.Node{
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
						&fern.Node{
							Name:  "name",
							Nodes: []*fern.Node{},
							Trees: []*fern.Tree{},
						},
					},
				},
			},
		},
		Directory: &fern.Directory{
			Name: "name",
			Files: []*fern.File{
				&fern.File{
					Name:     "name",
					Contents: "contents",
				},
				&fern.File{
					Name:     "name",
					Contents: "contents",
				},
			},
			Directories: []*fern.Directory{
				&fern.Directory{
					Name: "name",
					Files: []*fern.File{
						&fern.File{
							Name:     "name",
							Contents: "contents",
						},
						&fern.File{
							Name:     "name",
							Contents: "contents",
						},
					},
					Directories: []*fern.Directory{
						&fern.Directory{
							Name:        "name",
							Files:       []*fern.File{},
							Directories: []*fern.Directory{},
						},
						&fern.Directory{
							Name:        "name",
							Files:       []*fern.File{},
							Directories: []*fern.Directory{},
						},
					},
				},
				&fern.Directory{
					Name: "name",
					Files: []*fern.File{
						&fern.File{
							Name:     "name",
							Contents: "contents",
						},
						&fern.File{
							Name:     "name",
							Contents: "contents",
						},
					},
					Directories: []*fern.Directory{
						&fern.Directory{
							Name:        "name",
							Files:       []*fern.File{},
							Directories: []*fern.Directory{},
						},
						&fern.Directory{
							Name:        "name",
							Files:       []*fern.File{},
							Directories: []*fern.Directory{},
						},
					},
				},
			},
		},
		Moment: &fern.Moment{
			Id: uuid.MustParse(
				"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
			),
			Date: fern.MustParseDateTime(
				"2023-01-15",
			),
			Datetime: fern.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
		},
	}
	_, invocationErr := client.Service.CreateBigEntity(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestServiceRefreshTokenWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/refresh-token")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	invocationErr := client.Service.RefreshToken(
		context.TODO(),
		nil,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}
