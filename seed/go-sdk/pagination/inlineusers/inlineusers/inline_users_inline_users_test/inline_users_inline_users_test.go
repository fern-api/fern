// Code generated by Fern. DO NOT EDIT.

package inline_users_inline_users_test

import (
	context "context"
	fmt "fmt"
	uuid "github.com/google/uuid"
	fern "github.com/pagination/fern"
	client "github.com/pagination/fern/client"
	inlineusers "github.com/pagination/fern/inlineusers"
	option "github.com/pagination/fern/option"
	require "github.com/stretchr/testify/require"
	gowiremock "github.com/wiremock/go-wiremock"
	wiremocktestcontainersgo "github.com/wiremock/wiremock-testcontainers-go"
	http "net/http"
	os "os"
	testing "testing"
)

// TestMain sets up shared test fixtures for all tests in this package// Global test fixtures
var (
	WireMockContainer *wiremocktestcontainersgo.WireMockContainer
	WireMockBaseURL   string
	WireMockClient    *gowiremock.Client
)

// TestMain sets up shared test fixtures for all tests in this package
func TestMain(m *testing.M) {
	// Setup shared WireMock container
	ctx := context.Background()
	container, err := wiremocktestcontainersgo.RunContainerAndStopOnCleanup(
		ctx,
		&testing.T{},
		wiremocktestcontainersgo.WithImage("docker.io/wiremock/wiremock:3.9.1"),
	)
	if err != nil {
		fmt.Printf("Failed to start WireMock container: %v\n", err)
		os.Exit(1)
	}

	// Store global references
	WireMockContainer = container
	WireMockClient = container.Client

	// Get the base URL
	baseURL, err := container.Endpoint(ctx, "")
	if err != nil {
		fmt.Printf("Failed to get WireMock container endpoint: %v\n", err)
		os.Exit(1)
	}
	WireMockBaseURL = "http://" + baseURL

	// Run all tests
	code := m.Run()

	// Cleanup
	if WireMockContainer != nil {
		WireMockContainer.Terminate(ctx)
	}

	// Exit with the same code as the tests
	os.Exit(code)
}

func TestInlineUsersInlineUsersListWithCursorPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"hasNextPage": true, "page": map[string]interface{}{"page": 1, "next": map[string]interface{}{"page": 1, "starting_after": "starting_after"}, "per_page": 1, "total_page": 1}, "total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersCursorPaginationRequest{
		Page: fern.Int(
			1,
		),
		PerPage: fern.Int(
			1,
		),
		Order: inlineusers.OrderAsc.Ptr(),
		StartingAfter: fern.String(
			"starting_after",
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithCursorPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithMixedTypeCursorPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"next": "next", "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersMixedTypeCursorPaginationRequest{
		Cursor: fern.String(
			"cursor",
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithMixedTypeCursorPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithMixedTypeCursorPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/inline-users")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"hasNextPage": true, "page": map[string]interface{}{"page": 1, "next": map[string]interface{}{"page": 1, "starting_after": "starting_after"}, "per_page": 1, "total_page": 1}, "total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersMixedTypeCursorPaginationRequest{}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithMixedTypeCursorPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithCursorPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"hasNextPage": true, "page": map[string]interface{}{"page": 1, "next": map[string]interface{}{"page": 1, "starting_after": "starting_after"}, "per_page": 1, "total_page": 1}, "total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersCursorPaginationRequest{
		Page: fern.Int(
			1,
		),
		PerPage: fern.Int(
			1,
		),
		Order: inlineusers.OrderAsc.Ptr(),
		StartingAfter: fern.String(
			"starting_after",
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithCursorPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithCursorPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"hasNextPage": true, "page": map[string]interface{}{"page": 1, "next": map[string]interface{}{"page": 1, "starting_after": "starting_after"}, "per_page": 1, "total_page": 1}, "total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersCursorPaginationRequest{
		Page: fern.Int(
			1.1,
		),
		PerPage: fern.Int(
			1.1,
		),
		Order: inlineusers.OrderAsc.Ptr(),
		StartingAfter: fern.String(
			"starting_after",
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithCursorPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithMixedTypeCursorPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/inline-users")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"hasNextPage": true, "page": map[string]interface{}{"page": 1, "next": map[string]interface{}{"page": 1, "starting_after": "starting_after"}, "per_page": 1, "total_page": 1}, "total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersMixedTypeCursorPaginationRequest{}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithMixedTypeCursorPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithOffsetStepPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"hasNextPage": true, "page": map[string]interface{}{"page": 1, "next": map[string]interface{}{"page": 1, "starting_after": "starting_after"}, "per_page": 1, "total_page": 1}, "total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersOffsetStepPaginationRequest{
		Page: fern.Int(
			1,
		),
		Limit: fern.Int(
			1,
		),
		Order: inlineusers.OrderAsc.Ptr(),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithOffsetStepPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithOffsetStepPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"hasNextPage": true, "page": map[string]interface{}{"page": 1, "next": map[string]interface{}{"page": 1, "starting_after": "starting_after"}, "per_page": 1, "total_page": 1}, "total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersOffsetStepPaginationRequest{
		Page: fern.Int(
			1,
		),
		Limit: fern.Int(
			1,
		),
		Order: inlineusers.OrderAsc.Ptr(),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithOffsetStepPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithExtendedResultsWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}, "next": "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersExtendedRequest{
		Cursor: fern.UUID(
			uuid.MustParse(
				"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
			),
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithExtendedResults(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithExtendedResultsWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"total_count": 1, "data": map[string]interface{}{"users": []interface{}{map[string]interface{}{"name": "name", "id": 1}, map[string]interface{}{"name": "name", "id": 1}}}, "next": "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersExtendedRequest{
		Cursor: fern.UUID(
			uuid.MustParse(
				"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
			),
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithExtendedResults(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithCursorPaginationWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"cursor": map[string]interface{}{"after": "after", "data": []interface{}{"data", "data"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListUsersCursorPaginationRequest{
		StartingAfter: fern.String(
			"starting_after",
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithCursorPagination(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestInlineUsersInlineUsersListWithGlobalConfigWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/inline-users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"results": []interface{}{"results", "results"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &inlineusers.ListWithGlobalConfigRequest{
		Offset: fern.Int(
			1,
		),
	}
	_, invocationErr := client.InlineUsers.InlineUsers.ListWithGlobalConfig(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}
