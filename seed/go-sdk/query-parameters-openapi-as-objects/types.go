// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/query-parameters-openapi-as-objects/fern/internal"
	time "time"
)

type SearchRequest struct {
	Limit            int                            `json:"-" url:"limit"`
	Id               string                         `json:"-" url:"id"`
	Date             string                         `json:"-" url:"date"`
	Deadline         time.Time                      `json:"-" url:"deadline"`
	Bytes            string                         `json:"-" url:"bytes"`
	User             *User                          `json:"-" url:"user"`
	UserList         []*User                        `json:"-" url:"userList,omitempty"`
	OptionalDeadline *time.Time                     `json:"-" url:"optionalDeadline,omitempty"`
	KeyValue         map[string]*string             `json:"-" url:"keyValue,omitempty"`
	OptionalString   *string                        `json:"-" url:"optionalString,omitempty"`
	NestedUser       *NestedUser                    `json:"-" url:"nestedUser,omitempty"`
	OptionalUser     *User                          `json:"-" url:"optionalUser,omitempty"`
	ExcludeUser      []*User                        `json:"-" url:"excludeUser,omitempty"`
	Filter           []*string                      `json:"-" url:"filter,omitempty"`
	Neighbor         *SearchRequestNeighbor         `json:"-" url:"neighbor,omitempty"`
	NeighborRequired *SearchRequestNeighborRequired `json:"-" url:"neighborRequired"`
}

type NestedUser struct {
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	User *User   `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NestedUser) GetName() *string {
	if n == nil {
		return nil
	}
	return n.Name
}

func (n *NestedUser) GetUser() *User {
	if n == nil {
		return nil
	}
	return n.User
}

func (n *NestedUser) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NestedUser) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type SearchRequestNeighbor struct {
	User       *User
	NestedUser *NestedUser
	String     string
	Integer    int

	typ string
}

func (s *SearchRequestNeighbor) GetUser() *User {
	if s == nil {
		return nil
	}
	return s.User
}

func (s *SearchRequestNeighbor) GetNestedUser() *NestedUser {
	if s == nil {
		return nil
	}
	return s.NestedUser
}

func (s *SearchRequestNeighbor) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SearchRequestNeighbor) GetInteger() int {
	if s == nil {
		return 0
	}
	return s.Integer
}

func (s *SearchRequestNeighbor) UnmarshalJSON(data []byte) error {
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		s.typ = "User"
		s.User = valueUser
		return nil
	}
	valueNestedUser := new(NestedUser)
	if err := json.Unmarshal(data, &valueNestedUser); err == nil {
		s.typ = "NestedUser"
		s.NestedUser = valueNestedUser
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		s.typ = "Integer"
		s.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SearchRequestNeighbor) MarshalJSON() ([]byte, error) {
	if s.typ == "User" || s.User != nil {
		return json.Marshal(s.User)
	}
	if s.typ == "NestedUser" || s.NestedUser != nil {
		return json.Marshal(s.NestedUser)
	}
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return json.Marshal(s.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SearchRequestNeighborVisitor interface {
	VisitUser(*User) error
	VisitNestedUser(*NestedUser) error
	VisitString(string) error
	VisitInteger(int) error
}

func (s *SearchRequestNeighbor) Accept(visitor SearchRequestNeighborVisitor) error {
	if s.typ == "User" || s.User != nil {
		return visitor.VisitUser(s.User)
	}
	if s.typ == "NestedUser" || s.NestedUser != nil {
		return visitor.VisitNestedUser(s.NestedUser)
	}
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return visitor.VisitInteger(s.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SearchRequestNeighborRequired struct {
	User       *User
	NestedUser *NestedUser
	String     string
	Integer    int

	typ string
}

func (s *SearchRequestNeighborRequired) GetUser() *User {
	if s == nil {
		return nil
	}
	return s.User
}

func (s *SearchRequestNeighborRequired) GetNestedUser() *NestedUser {
	if s == nil {
		return nil
	}
	return s.NestedUser
}

func (s *SearchRequestNeighborRequired) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *SearchRequestNeighborRequired) GetInteger() int {
	if s == nil {
		return 0
	}
	return s.Integer
}

func (s *SearchRequestNeighborRequired) UnmarshalJSON(data []byte) error {
	valueUser := new(User)
	if err := json.Unmarshal(data, &valueUser); err == nil {
		s.typ = "User"
		s.User = valueUser
		return nil
	}
	valueNestedUser := new(NestedUser)
	if err := json.Unmarshal(data, &valueNestedUser); err == nil {
		s.typ = "NestedUser"
		s.NestedUser = valueNestedUser
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		s.typ = "Integer"
		s.Integer = valueInteger
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SearchRequestNeighborRequired) MarshalJSON() ([]byte, error) {
	if s.typ == "User" || s.User != nil {
		return json.Marshal(s.User)
	}
	if s.typ == "NestedUser" || s.NestedUser != nil {
		return json.Marshal(s.NestedUser)
	}
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return json.Marshal(s.Integer)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SearchRequestNeighborRequiredVisitor interface {
	VisitUser(*User) error
	VisitNestedUser(*NestedUser) error
	VisitString(string) error
	VisitInteger(int) error
}

func (s *SearchRequestNeighborRequired) Accept(visitor SearchRequestNeighborRequiredVisitor) error {
	if s.typ == "User" || s.User != nil {
		return visitor.VisitUser(s.User)
	}
	if s.typ == "NestedUser" || s.NestedUser != nil {
		return visitor.VisitNestedUser(s.NestedUser)
	}
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return visitor.VisitInteger(s.Integer)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type SearchResponse struct {
	Results []string `json:"results,omitempty" url:"results,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchResponse) GetResults() []string {
	if s == nil {
		return nil
	}
	return s.Results
}

func (s *SearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type User struct {
	Name *string  `json:"name,omitempty" url:"name,omitempty"`
	Tags []string `json:"tags,omitempty" url:"tags,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *User) GetTags() []string {
	if u == nil {
		return nil
	}
	return u.Tags
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
