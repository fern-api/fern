// Code generated by Fern. DO NOT EDIT.

package nullable_test

import (
	context "context"
	fmt "fmt"
	fern "github.com/nullable/fern"
	client "github.com/nullable/fern/client"
	option "github.com/nullable/fern/option"
	require "github.com/stretchr/testify/require"
	gowiremock "github.com/wiremock/go-wiremock"
	wiremocktestcontainersgo "github.com/wiremock/wiremock-testcontainers-go"
	http "net/http"
	os "os"
	testing "testing"
)

// TestMain sets up shared test fixtures for all tests in this package// Global test fixtures
var (
	WireMockContainer *wiremocktestcontainersgo.WireMockContainer
	WireMockBaseURL   string
	WireMockClient    *gowiremock.Client
)

// TestMain sets up shared test fixtures for all tests in this package
func TestMain(m *testing.M) {
	// Setup shared WireMock container
	ctx := context.Background()
	container, err := wiremocktestcontainersgo.RunContainerAndStopOnCleanup(
		ctx,
		&testing.T{},
		wiremocktestcontainersgo.WithImage("docker.io/wiremock/wiremock:3.9.1"),
	)
	if err != nil {
		fmt.Printf("Failed to start WireMock container: %v\n", err)
		os.Exit(1)
	}

	// Store global references
	WireMockContainer = container
	WireMockClient = container.Client

	// Get the base URL
	baseURL, err := container.Endpoint(ctx, "")
	if err != nil {
		fmt.Printf("Failed to get WireMock container endpoint: %v\n", err)
		os.Exit(1)
	}
	WireMockBaseURL = "http://" + baseURL

	// Run all tests
	code := m.Run()

	// Cleanup
	if WireMockContainer != nil {
		WireMockContainer.Terminate(ctx)
	}

	// Exit with the same code as the tests
	os.Exit(code)
}

func TestNullableGetUsersWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Get(gowiremock.URLPathTemplate("/users")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			[]interface{}{map[string]interface{}{"name": "name", "id": "id", "tags": []interface{}{"tags", "tags"}, "metadata": map[string]interface{}{"createdAt": "2024-01-15T09:30:00Z", "updatedAt": "2024-01-15T09:30:00Z", "avatar": "avatar", "activated": true, "status": map[string]interface{}{"type": "active"}, "values": map[string]interface{}{"values": "values"}}, "email": "email", "favorite-number": 1, "numbers": []interface{}{1, 1}, "strings": map[string]interface{}{"strings": map[string]interface{}{"key": "value"}}}, map[string]interface{}{"name": "name", "id": "id", "tags": []interface{}{"tags", "tags"}, "metadata": map[string]interface{}{"createdAt": "2024-01-15T09:30:00Z", "updatedAt": "2024-01-15T09:30:00Z", "avatar": "avatar", "activated": true, "status": map[string]interface{}{"type": "active"}, "values": map[string]interface{}{"values": "values"}}, "email": "email", "favorite-number": 1, "numbers": []interface{}{1, 1}, "strings": map[string]interface{}{"strings": map[string]interface{}{"key": "value"}}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &fern.GetUsersRequest{
		Usernames: []*string{
			fern.String(
				"usernames",
			),
		},
		Avatar: fern.String(
			"avatar",
		),
		Activated: []*bool{
			fern.Bool(
				true,
			),
		},
		Tags: []*string{
			fern.String(
				"tags",
			),
		},
		Extra: fern.Bool(
			true,
		),
	}
	_, invocationErr := client.Nullable.GetUsers(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestNullableCreateUserWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/users")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": ["username"],
                    "properties": {
                        "username": {"type": "string"}
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"name": "name", "id": "id", "tags": []interface{}{"tags", "tags"}, "metadata": map[string]interface{}{"createdAt": "2024-01-15T09:30:00Z", "updatedAt": "2024-01-15T09:30:00Z", "avatar": "avatar", "activated": true, "status": map[string]interface{}{"type": "active"}, "values": map[string]interface{}{"values": "values"}}, "email": "email", "favorite-number": 1, "numbers": []interface{}{1, 1}, "strings": map[string]interface{}{"strings": map[string]interface{}{"key": "value"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &fern.CreateUserRequest{
		Username: "username",
		Tags: []string{
			"tags",
			"tags",
		},
		Metadata: &fern.Metadata{
			CreatedAt: fern.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			UpdatedAt: fern.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
			Avatar: fern.String(
				"avatar",
			),
			Activated: fern.Bool(
				true,
			),
			Status: &fern.Status{
				Active: "active",
			},
			Values: map[string]*string{
				"values": fern.String(
					"values",
				),
			},
		},
		Avatar: fern.String(
			"avatar",
		),
	}
	_, invocationErr := client.Nullable.CreateUser(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestNullableDeleteUserWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Delete(gowiremock.URLPathTemplate("/users")).WithBodyPattern(gowiremock.MatchesJsonSchema(`{
                    "$schema": "https://json-schema.org/draft/2020-12/schema",
                    "type": "object",
                    "required": [],
                    "properties": {
                        
                    },
                    "additionalProperties": true
                }`, "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			true,
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &fern.DeleteUserRequest{
		Username: fern.String(
			"xy",
		),
	}
	_, invocationErr := client.Nullable.DeleteUser(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}
