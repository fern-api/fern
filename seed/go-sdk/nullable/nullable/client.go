// Code generated by Fern. DO NOT EDIT.

package nullable

import (
	context "context"
	fern "github.com/nullable/fern"
	core "github.com/nullable/fern/core"
	internal "github.com/nullable/fern/internal"
	option "github.com/nullable/fern/option"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (c *Client) GetUsers(
	ctx context.Context,
	request *fern.GetUsersRequest,
	opts ...option.RequestOption,
) ([]*fern.User, error) {
	response, err := c.WithRawResponse.GetUsers(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) CreateUser(
	ctx context.Context,
	request *fern.CreateUserRequest,
	opts ...option.RequestOption,
) (*fern.User, error) {
	response, err := c.WithRawResponse.CreateUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

func (c *Client) DeleteUser(
	ctx context.Context,
	request *fern.DeleteUserRequest,
	opts ...option.RequestOption,
) (bool, error) {
	response, err := c.WithRawResponse.DeleteUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return false, err
	}
	return response.Body, nil
}
