// This file was auto-generated by Fern from our API Definition.

package queryparameters

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	internal "github.com/query-parameters/fern/internal"
	time "time"
)

type GetUsersRequest struct {
	Limit            int               `json:"-" url:"limit"`
	Id               uuid.UUID         `json:"-" url:"id"`
	Date             time.Time         `json:"-" url:"date" format:"date"`
	Deadline         time.Time         `json:"-" url:"deadline"`
	Bytes            []byte            `json:"-" url:"bytes"`
	User             *User             `json:"-" url:"user,omitempty"`
	UserList         []*User           `json:"-" url:"userList,omitempty"`
	OptionalDeadline *time.Time        `json:"-" url:"optionalDeadline,omitempty"`
	KeyValue         map[string]string `json:"-" url:"keyValue,omitempty"`
	OptionalString   *string           `json:"-" url:"optionalString,omitempty"`
	NestedUser       *NestedUser       `json:"-" url:"nestedUser,omitempty"`
	OptionalUser     *User             `json:"-" url:"optionalUser,omitempty"`
	ExcludeUser      []*User           `json:"-" url:"excludeUser,omitempty"`
	Filter           []string          `json:"-" url:"filter"`
}

type NestedUser struct {
	Name string `json:"name" url:"name"`
	User *User  `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NestedUser) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NestedUser) GetUser() *User {
	if n == nil {
		return nil
	}
	return n.User
}

func (n *NestedUser) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NestedUser) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type User struct {
	Name string   `json:"name" url:"name"`
	Tags []string `json:"tags,omitempty" url:"tags,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *User) GetTags() []string {
	if u == nil {
		return nil
	}
	return u.Tags
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
