// Code generated by Fern. DO NOT EDIT.

package queryparameters

import (
	json "encoding/json"
	fmt "fmt"
	uuid "github.com/google/uuid"
	internal "github.com/query-parameters/fern/internal"
	big "math/big"
	time "time"
)

var (
	getUsersRequestFieldLimit            = big.NewInt(1 << 0)
	getUsersRequestFieldId               = big.NewInt(1 << 1)
	getUsersRequestFieldDate             = big.NewInt(1 << 2)
	getUsersRequestFieldDeadline         = big.NewInt(1 << 3)
	getUsersRequestFieldBytes            = big.NewInt(1 << 4)
	getUsersRequestFieldUser             = big.NewInt(1 << 5)
	getUsersRequestFieldUserList         = big.NewInt(1 << 6)
	getUsersRequestFieldOptionalDeadline = big.NewInt(1 << 7)
	getUsersRequestFieldKeyValue         = big.NewInt(1 << 8)
	getUsersRequestFieldOptionalString   = big.NewInt(1 << 9)
	getUsersRequestFieldNestedUser       = big.NewInt(1 << 10)
	getUsersRequestFieldOptionalUser     = big.NewInt(1 << 11)
	getUsersRequestFieldExcludeUser      = big.NewInt(1 << 12)
	getUsersRequestFieldFilter           = big.NewInt(1 << 13)
)

type GetUsersRequest struct {
	Limit            int               `json:"-" url:"limit"`
	Id               uuid.UUID         `json:"-" url:"id"`
	Date             time.Time         `json:"-" url:"date" format:"date"`
	Deadline         time.Time         `json:"-" url:"deadline"`
	Bytes            []byte            `json:"-" url:"bytes"`
	User             *User             `json:"-" url:"user"`
	UserList         []*User           `json:"-" url:"userList"`
	OptionalDeadline *time.Time        `json:"-" url:"optionalDeadline,omitempty"`
	KeyValue         map[string]string `json:"-" url:"keyValue"`
	OptionalString   *string           `json:"-" url:"optionalString,omitempty"`
	NestedUser       *NestedUser       `json:"-" url:"nestedUser"`
	OptionalUser     *User             `json:"-" url:"optionalUser,omitempty"`
	ExcludeUser      []*User           `json:"-" url:"excludeUser"`
	Filter           []string          `json:"-" url:"filter"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetUsersRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

func (g *GetUsersRequest) SetLimit(limit int) {
	g.Limit = limit
	g.require(getUsersRequestFieldLimit)
}

func (g *GetUsersRequest) SetId(id uuid.UUID) {
	g.Id = id
	g.require(getUsersRequestFieldId)
}

func (g *GetUsersRequest) SetDate(date time.Time) {
	g.Date = date
	g.require(getUsersRequestFieldDate)
}

func (g *GetUsersRequest) SetDeadline(deadline time.Time) {
	g.Deadline = deadline
	g.require(getUsersRequestFieldDeadline)
}

func (g *GetUsersRequest) SetBytes(bytes []byte) {
	g.Bytes = bytes
	g.require(getUsersRequestFieldBytes)
}

func (g *GetUsersRequest) SetUser(user *User) {
	g.User = user
	g.require(getUsersRequestFieldUser)
}

func (g *GetUsersRequest) SetUserList(userList []*User) {
	g.UserList = userList
	g.require(getUsersRequestFieldUserList)
}

func (g *GetUsersRequest) SetOptionalDeadline(optionalDeadline *time.Time) {
	g.OptionalDeadline = optionalDeadline
	g.require(getUsersRequestFieldOptionalDeadline)
}

func (g *GetUsersRequest) SetKeyValue(keyValue map[string]string) {
	g.KeyValue = keyValue
	g.require(getUsersRequestFieldKeyValue)
}

func (g *GetUsersRequest) SetOptionalString(optionalString *string) {
	g.OptionalString = optionalString
	g.require(getUsersRequestFieldOptionalString)
}

func (g *GetUsersRequest) SetNestedUser(nestedUser *NestedUser) {
	g.NestedUser = nestedUser
	g.require(getUsersRequestFieldNestedUser)
}

func (g *GetUsersRequest) SetOptionalUser(optionalUser *User) {
	g.OptionalUser = optionalUser
	g.require(getUsersRequestFieldOptionalUser)
}

func (g *GetUsersRequest) SetExcludeUser(excludeUser []*User) {
	g.ExcludeUser = excludeUser
	g.require(getUsersRequestFieldExcludeUser)
}

func (g *GetUsersRequest) SetFilter(filter []string) {
	g.Filter = filter
	g.require(getUsersRequestFieldFilter)
}

var (
	nestedUserFieldName = big.NewInt(1 << 0)
	nestedUserFieldUser = big.NewInt(1 << 1)
)

type NestedUser struct {
	Name string `json:"name" url:"name"`
	User *User  `json:"user" url:"user"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NestedUser) GetName() string {
	if n == nil {
		return ""
	}
	return n.Name
}

func (n *NestedUser) GetUser() *User {
	if n == nil {
		return nil
	}
	return n.User
}

func (n *NestedUser) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NestedUser) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

func (n *NestedUser) SetName(name string) {
	n.Name = name
	n.require(nestedUserFieldName)
}

func (n *NestedUser) SetUser(user *User) {
	n.User = user
	n.require(nestedUserFieldUser)
}

func (n *NestedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler NestedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NestedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NestedUser) MarshalJSON() ([]byte, error) {
	type embed NestedUser
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NestedUser) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	userFieldName = big.NewInt(1 << 0)
	userFieldTags = big.NewInt(1 << 1)
)

type User struct {
	Name string   `json:"name" url:"name"`
	Tags []string `json:"tags" url:"tags"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *User) GetTags() []string {
	if u == nil {
		return nil
	}
	return u.Tags
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

func (u *User) SetName(name string) {
	u.Name = name
	u.require(userFieldName)
}

func (u *User) SetTags(tags []string) {
	u.Tags = tags
	u.require(userFieldTags)
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
