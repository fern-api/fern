// Code generated by Fern. DO NOT EDIT.

package multilinedocs

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/multi-line-docs/fern/internal"
	big "math/big"
)

var (
	createUserRequestFieldName = big.NewInt(1 << 0)
	createUserRequestFieldAge  = big.NewInt(1 << 1)
)

type CreateUserRequest struct {
	// The name of the user to create.
	// This name is unique to each user.
	Name string `json:"name" url:"-"`
	// The age of the user.
	// This property is not required.
	Age *int `json:"age,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (c *CreateUserRequest) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetName(name string) {
	c.Name = name
	c.require(createUserRequestFieldName)
}

// SetAge sets the Age field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetAge(age *int) {
	c.Age = age
	c.require(createUserRequestFieldAge)
}

// A user object. This type is used throughout the following APIs:
//   - createUser
//   - getUser
var (
	userFieldId   = big.NewInt(1 << 0)
	userFieldName = big.NewInt(1 << 1)
	userFieldAge  = big.NewInt(1 << 2)
)

type User struct {
	Id string `json:"id" url:"id"`
	// The user's name. This name is unique to each user. A few examples are included below:
	//   - Alice
	//   - Bob
	//   - Charlie
	Name string `json:"name" url:"name"`
	// The user's age.
	Age *int `json:"age,omitempty" url:"age,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *User) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *User) GetAge() *int {
	if u == nil {
		return nil
	}
	return u.Age
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetId(id string) {
	u.Id = id
	u.require(userFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetName(name string) {
	u.Name = name
	u.require(userFieldName)
}

// SetAge sets the Age field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *User) SetAge(age *int) {
	u.Age = age
	u.require(userFieldAge)
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
