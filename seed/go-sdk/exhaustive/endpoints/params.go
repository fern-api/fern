// Code generated by Fern. DO NOT EDIT.

package endpoints

import (
	json "encoding/json"
	big "math/big"
)

var (
	getWithMultipleQueryFieldQuery  = big.NewInt(1 << 0)
	getWithMultipleQueryFieldNumber = big.NewInt(1 << 1)
)

type GetWithMultipleQuery struct {
	Query  []string `json:"-" url:"query"`
	Number []int    `json:"-" url:"number"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetWithMultipleQuery) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithMultipleQuery) SetQuery(query []string) {
	g.Query = query
	g.require(getWithMultipleQueryFieldQuery)
}

// SetNumber sets the Number field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithMultipleQuery) SetNumber(number []int) {
	g.Number = number
	g.require(getWithMultipleQueryFieldNumber)
}

var (
	getWithInlinePathFieldParam = big.NewInt(1 << 0)
)

type GetWithInlinePath struct {
	Param string `json:"-" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetWithInlinePath) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetParam sets the Param field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithInlinePath) SetParam(param string) {
	g.Param = param
	g.require(getWithInlinePathFieldParam)
}

var (
	getWithInlinePathAndQueryFieldParam = big.NewInt(1 << 0)
	getWithInlinePathAndQueryFieldQuery = big.NewInt(1 << 1)
)

type GetWithInlinePathAndQuery struct {
	Param string `json:"-" url:"-"`
	Query string `json:"-" url:"query"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetWithInlinePathAndQuery) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetParam sets the Param field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithInlinePathAndQuery) SetParam(param string) {
	g.Param = param
	g.require(getWithInlinePathAndQueryFieldParam)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithInlinePathAndQuery) SetQuery(query string) {
	g.Query = query
	g.require(getWithInlinePathAndQueryFieldQuery)
}

var (
	getWithPathAndQueryFieldQuery = big.NewInt(1 << 0)
)

type GetWithPathAndQuery struct {
	Query string `json:"-" url:"query"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetWithPathAndQuery) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithPathAndQuery) SetQuery(query string) {
	g.Query = query
	g.require(getWithPathAndQueryFieldQuery)
}

var (
	getWithQueryFieldQuery  = big.NewInt(1 << 0)
	getWithQueryFieldNumber = big.NewInt(1 << 1)
)

type GetWithQuery struct {
	Query  string `json:"-" url:"query"`
	Number int    `json:"-" url:"number"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetWithQuery) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithQuery) SetQuery(query string) {
	g.Query = query
	g.require(getWithQueryFieldQuery)
}

// SetNumber sets the Number field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetWithQuery) SetNumber(number int) {
	g.Number = number
	g.require(getWithQueryFieldNumber)
}

var (
	modifyResourceAtInlinedPathFieldParam = big.NewInt(1 << 0)
)

type ModifyResourceAtInlinedPath struct {
	Param string `json:"-" url:"-"`
	Body  string `json:"-" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (m *ModifyResourceAtInlinedPath) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetParam sets the Param field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *ModifyResourceAtInlinedPath) SetParam(param string) {
	m.Param = param
	m.require(modifyResourceAtInlinedPathFieldParam)
}

func (m *ModifyResourceAtInlinedPath) UnmarshalJSON(data []byte) error {
	var body string
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	m.Body = body
	return nil
}

func (m *ModifyResourceAtInlinedPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.Body)
}
