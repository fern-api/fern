// Code generated by Fern. DO NOT EDIT.

package endpoints

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/exhaustive/fern/internal"
)

type PutRequest struct {
	Id string `json:"-" url:"-"`
}

type Error struct {
	Category ErrorCategory `json:"category" url:"category"`
	Code     ErrorCode     `json:"code" url:"code"`
	Detail   *string       `json:"detail,omitempty" url:"detail,omitempty"`
	Field    *string       `json:"field,omitempty" url:"field,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Error) GetCategory() ErrorCategory {
	if e == nil {
		return ""
	}
	return e.Category
}

func (e *Error) GetCode() ErrorCode {
	if e == nil {
		return ""
	}
	return e.Code
}

func (e *Error) GetDetail() *string {
	if e == nil {
		return nil
	}
	return e.Detail
}

func (e *Error) GetField() *string {
	if e == nil {
		return nil
	}
	return e.Field
}

func (e *Error) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Error) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorCategory string

const (
	ErrorCategoryApiError            ErrorCategory = "API_ERROR"
	ErrorCategoryAuthenticationError ErrorCategory = "AUTHENTICATION_ERROR"
	ErrorCategoryInvalidRequestError ErrorCategory = "INVALID_REQUEST_ERROR"
)

func NewErrorCategoryFromString(s string) (ErrorCategory, error) {
	switch s {
	case "API_ERROR":
		return ErrorCategoryApiError, nil
	case "AUTHENTICATION_ERROR":
		return ErrorCategoryAuthenticationError, nil
	case "INVALID_REQUEST_ERROR":
		return ErrorCategoryInvalidRequestError, nil
	}
	var t ErrorCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ErrorCategory) Ptr() *ErrorCategory {
	return &e
}

type ErrorCode string

const (
	ErrorCodeInternalServerError ErrorCode = "INTERNAL_SERVER_ERROR"
	ErrorCodeUnauthorized        ErrorCode = "UNAUTHORIZED"
	ErrorCodeForbidden           ErrorCode = "FORBIDDEN"
	ErrorCodeBadRequest          ErrorCode = "BAD_REQUEST"
	ErrorCodeConflict            ErrorCode = "CONFLICT"
	ErrorCodeGone                ErrorCode = "GONE"
	ErrorCodeUnprocessableEntity ErrorCode = "UNPROCESSABLE_ENTITY"
	ErrorCodeNotImplemented      ErrorCode = "NOT_IMPLEMENTED"
	ErrorCodeBadGateway          ErrorCode = "BAD_GATEWAY"
	ErrorCodeServiceUnavailable  ErrorCode = "SERVICE_UNAVAILABLE"
	ErrorCodeUnknown             ErrorCode = "Unknown"
)

func NewErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "INTERNAL_SERVER_ERROR":
		return ErrorCodeInternalServerError, nil
	case "UNAUTHORIZED":
		return ErrorCodeUnauthorized, nil
	case "FORBIDDEN":
		return ErrorCodeForbidden, nil
	case "BAD_REQUEST":
		return ErrorCodeBadRequest, nil
	case "CONFLICT":
		return ErrorCodeConflict, nil
	case "GONE":
		return ErrorCodeGone, nil
	case "UNPROCESSABLE_ENTITY":
		return ErrorCodeUnprocessableEntity, nil
	case "NOT_IMPLEMENTED":
		return ErrorCodeNotImplemented, nil
	case "BAD_GATEWAY":
		return ErrorCodeBadGateway, nil
	case "SERVICE_UNAVAILABLE":
		return ErrorCodeServiceUnavailable, nil
	case "Unknown":
		return ErrorCodeUnknown, nil
	}
	var t ErrorCode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ErrorCode) Ptr() *ErrorCode {
	return &e
}

type PutResponse struct {
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PutResponse) GetErrors() []*Error {
	if p == nil {
		return nil
	}
	return p.Errors
}

func (p *PutResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PutResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PutResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
