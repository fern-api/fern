// Code generated by Fern. DO NOT EDIT.

package endpoints_object_test

import (
	context "context"
	fmt "fmt"
	fern "github.com/exhaustive/fern"
	client "github.com/exhaustive/fern/client"
	option "github.com/exhaustive/fern/option"
	types "github.com/exhaustive/fern/types"
	uuid "github.com/google/uuid"
	require "github.com/stretchr/testify/require"
	gowiremock "github.com/wiremock/go-wiremock"
	wiremocktestcontainersgo "github.com/wiremock/wiremock-testcontainers-go"
	http "net/http"
	os "os"
	testing "testing"
)

// TestMain sets up shared test fixtures for all tests in this package// Global test fixtures
var (
	WireMockContainer *wiremocktestcontainersgo.WireMockContainer
	WireMockBaseURL   string
	WireMockClient    *gowiremock.Client
)

// TestMain sets up shared test fixtures for all tests in this package
func TestMain(m *testing.M) {
	// Setup shared WireMock container
	ctx := context.Background()
	container, err := wiremocktestcontainersgo.RunContainerAndStopOnCleanup(
		ctx,
		&testing.T{},
		wiremocktestcontainersgo.WithImage("docker.io/wiremock/wiremock:3.9.1"),
	)
	if err != nil {
		fmt.Printf("Failed to start WireMock container: %v\n", err)
		os.Exit(1)
	}

	// Store global references
	WireMockContainer = container
	WireMockClient = container.Client

	// Get the base URL
	baseURL, err := container.Endpoint(ctx, "")
	if err != nil {
		fmt.Printf("Failed to get WireMock container endpoint: %v\n", err)
		os.Exit(1)
	}
	WireMockBaseURL = "http://" + baseURL

	// Run all tests
	code := m.Run()

	// Cleanup
	if WireMockContainer != nil {
		WireMockContainer.Terminate(ctx)
	}

	// Exit with the same code as the tests
	os.Exit(code)
}

func TestEndpointsObjectGetAndReturnWithOptionalFieldWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/object/get-and-return-with-optional-field")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"string": "string", "integer": 1, "long": 1000000, "double": 1.1, "bool": true, "datetime": "2024-01-15T09:30:00Z", "date": "2023-01-15", "uuid": "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "base64": "SGVsbG8gd29ybGQh", "list": []interface{}{"list", "list"}, "set": []interface{}{"set"}, "map": map[string]interface{}{"1": "map"}, "bigint": "1000000"},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &types.ObjectWithOptionalField{
		String: fern.String(
			"string",
		),
		Integer: fern.Int(
			1,
		),
		Long: fern.Int64(
			1000000,
		),
		Double: fern.Float64(
			1.1,
		),
		Bool: fern.Bool(
			true,
		),
		Datetime: fern.Time(
			fern.MustParseDateTime(
				"2024-01-15T09:30:00Z",
			),
		),
		Date: fern.Time(
			fern.MustParseDateTime(
				"2023-01-15",
			),
		),
		Uuid: fern.UUID(
			uuid.MustParse(
				"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
			),
		),
		Base64: []byte("SGVsbG8gd29ybGQh"),
		List: []string{
			"list",
			"list",
		},
		Set: []string{
			"set",
		},
		Map: map[int]string{
			1: "map",
		},
		Bigint: fern.String(
			"1000000",
		),
	}
	_, invocationErr := client.Endpoints.Object.GetAndReturnWithOptionalField(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEndpointsObjectGetAndReturnWithRequiredFieldWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/object/get-and-return-with-required-field")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"string": "string"},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &types.ObjectWithRequiredField{
		String: "string",
	}
	_, invocationErr := client.Endpoints.Object.GetAndReturnWithRequiredField(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEndpointsObjectGetAndReturnWithMapOfMapWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/object/get-and-return-with-map-of-map")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"map": map[string]interface{}{"map": map[string]interface{}{"map": "map"}}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &types.ObjectWithMapOfMap{
		Map: map[string]map[string]string{
			"map": map[string]string{
				"map": "map",
			},
		},
	}
	_, invocationErr := client.Endpoints.Object.GetAndReturnWithMapOfMap(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEndpointsObjectGetAndReturnNestedWithOptionalFieldWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/object/get-and-return-nested-with-optional-field")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"string": "string", "NestedObject": map[string]interface{}{"string": "string", "integer": 1, "long": 1000000, "double": 1.1, "bool": true, "datetime": "2024-01-15T09:30:00Z", "date": "2023-01-15", "uuid": "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "base64": "SGVsbG8gd29ybGQh", "list": []interface{}{"list", "list"}, "set": []interface{}{"set"}, "map": map[string]interface{}{"1": "map"}, "bigint": "1000000"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &types.NestedObjectWithOptionalField{
		String: fern.String(
			"string",
		),
		NestedObject: &types.ObjectWithOptionalField{
			String: fern.String(
				"string",
			),
			Integer: fern.Int(
				1,
			),
			Long: fern.Int64(
				1000000,
			),
			Double: fern.Float64(
				1.1,
			),
			Bool: fern.Bool(
				true,
			),
			Datetime: fern.Time(
				fern.MustParseDateTime(
					"2024-01-15T09:30:00Z",
				),
			),
			Date: fern.Time(
				fern.MustParseDateTime(
					"2023-01-15",
				),
			),
			Uuid: fern.UUID(
				uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
			),
			Base64: []byte("SGVsbG8gd29ybGQh"),
			List: []string{
				"list",
				"list",
			},
			Set: []string{
				"set",
			},
			Map: map[int]string{
				1: "map",
			},
			Bigint: fern.String(
				"1000000",
			),
		},
	}
	_, invocationErr := client.Endpoints.Object.GetAndReturnNestedWithOptionalField(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEndpointsObjectGetAndReturnNestedWithRequiredFieldWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/object/get-and-return-nested-with-required-field/{string}")).WithPathParam(
		"string",
		gowiremock.Matching("string"),
	).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"string": "string", "NestedObject": map[string]interface{}{"string": "string", "integer": 1, "long": 1000000, "double": 1.1, "bool": true, "datetime": "2024-01-15T09:30:00Z", "date": "2023-01-15", "uuid": "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "base64": "SGVsbG8gd29ybGQh", "list": []interface{}{"list", "list"}, "set": []interface{}{"set"}, "map": map[string]interface{}{"1": "map"}, "bigint": "1000000"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := &types.NestedObjectWithRequiredField{
		String: "string",
		NestedObject: &types.ObjectWithOptionalField{
			String: fern.String(
				"string",
			),
			Integer: fern.Int(
				1,
			),
			Long: fern.Int64(
				1000000,
			),
			Double: fern.Float64(
				1.1,
			),
			Bool: fern.Bool(
				true,
			),
			Datetime: fern.Time(
				fern.MustParseDateTime(
					"2024-01-15T09:30:00Z",
				),
			),
			Date: fern.Time(
				fern.MustParseDateTime(
					"2023-01-15",
				),
			),
			Uuid: fern.UUID(
				uuid.MustParse(
					"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
				),
			),
			Base64: []byte("SGVsbG8gd29ybGQh"),
			List: []string{
				"list",
				"list",
			},
			Set: []string{
				"set",
			},
			Map: map[int]string{
				1: "map",
			},
			Bigint: fern.String(
				"1000000",
			),
		},
	}
	_, invocationErr := client.Endpoints.Object.GetAndReturnNestedWithRequiredField(
		context.TODO(),
		"string",
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}

func TestEndpointsObjectGetAndReturnNestedWithRequiredFieldAsListWithWireMock(
	t *testing.T,
) {
	// wiremock client and server initialized in shared main_test.go
	defer WireMockClient.Reset()
	stub := gowiremock.Post(gowiremock.URLPathTemplate("/object/get-and-return-nested-with-required-field-list")).WithBodyPattern(gowiremock.MatchesJsonSchema("{}", "V202012")).WillReturnResponse(
		gowiremock.NewResponse().WithJSONBody(
			map[string]interface{}{"string": "string", "NestedObject": map[string]interface{}{"string": "string", "integer": 1, "long": 1000000, "double": 1.1, "bool": true, "datetime": "2024-01-15T09:30:00Z", "date": "2023-01-15", "uuid": "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32", "base64": "SGVsbG8gd29ybGQh", "list": []interface{}{"list", "list"}, "set": []interface{}{"set"}, "map": map[string]interface{}{"1": "map"}, "bigint": "1000000"}},
		).WithStatus(http.StatusOK),
	)
	err := WireMockClient.StubFor(stub)
	require.NoError(t, err, "Failed to create WireMock stub")

	client := client.NewClient(
		option.WithBaseURL(
			WireMockBaseURL,
		),
	)
	request := []*types.NestedObjectWithRequiredField{
		&types.NestedObjectWithRequiredField{
			String: "string",
			NestedObject: &types.ObjectWithOptionalField{
				String: fern.String(
					"string",
				),
				Integer: fern.Int(
					1,
				),
				Long: fern.Int64(
					1000000,
				),
				Double: fern.Float64(
					1.1,
				),
				Bool: fern.Bool(
					true,
				),
				Datetime: fern.Time(
					fern.MustParseDateTime(
						"2024-01-15T09:30:00Z",
					),
				),
				Date: fern.Time(
					fern.MustParseDateTime(
						"2023-01-15",
					),
				),
				Uuid: fern.UUID(
					uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
				),
				Base64: []byte("SGVsbG8gd29ybGQh"),
				List: []string{
					"list",
					"list",
				},
				Set: []string{
					"set",
				},
				Map: map[int]string{
					1: "map",
				},
				Bigint: fern.String(
					"1000000",
				),
			},
		},
		&types.NestedObjectWithRequiredField{
			String: "string",
			NestedObject: &types.ObjectWithOptionalField{
				String: fern.String(
					"string",
				),
				Integer: fern.Int(
					1,
				),
				Long: fern.Int64(
					1000000,
				),
				Double: fern.Float64(
					1.1,
				),
				Bool: fern.Bool(
					true,
				),
				Datetime: fern.Time(
					fern.MustParseDateTime(
						"2024-01-15T09:30:00Z",
					),
				),
				Date: fern.Time(
					fern.MustParseDateTime(
						"2023-01-15",
					),
				),
				Uuid: fern.UUID(
					uuid.MustParse(
						"d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32",
					),
				),
				Base64: []byte("SGVsbG8gd29ybGQh"),
				List: []string{
					"list",
					"list",
				},
				Set: []string{
					"set",
				},
				Map: map[int]string{
					1: "map",
				},
				Bigint: fern.String(
					"1000000",
				),
			},
		},
	}
	_, invocationErr := client.Endpoints.Object.GetAndReturnNestedWithRequiredFieldAsList(
		context.TODO(),
		request,
	)

	require.NoError(t, invocationErr, "Client method call should succeed")
	ok, countErr := WireMockClient.Verify(stub.Request(), 1)
	require.NoError(t, countErr, "Failed to verify WireMock request was matched")
	require.True(t, ok, "WireMock request was not matched")
}
