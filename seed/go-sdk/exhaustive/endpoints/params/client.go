// Code generated by Fern. DO NOT EDIT.

package params

import (
	context "context"
	core "github.com/exhaustive/fern/core"
	endpoints "github.com/exhaustive/fern/endpoints"
	internal "github.com/exhaustive/fern/internal"
	option "github.com/exhaustive/fern/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// GET with path param
func (c *Client) GetWithPath(
	ctx context.Context,
	param string,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.GetWithPath(
		ctx,
		param,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}

// GET with path param
func (c *Client) GetWithInlinePath(
	ctx context.Context,
	request *endpoints.GetWithInlinePath,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.GetWithInlinePath(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}

// GET with query param
func (c *Client) GetWithQuery(
	ctx context.Context,
	request *endpoints.GetWithQuery,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.GetWithQuery(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// GET with multiple of same query param
func (c *Client) GetWithAllowMultipleQuery(
	ctx context.Context,
	request *endpoints.GetWithMultipleQuery,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.GetWithAllowMultipleQuery(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// GET with path and query params
func (c *Client) GetWithPathAndQuery(
	ctx context.Context,
	param string,
	request *endpoints.GetWithPathAndQuery,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.GetWithPathAndQuery(
		ctx,
		param,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// GET with path and query params
func (c *Client) GetWithInlinePathAndQuery(
	ctx context.Context,
	request *endpoints.GetWithInlinePathAndQuery,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.GetWithInlinePathAndQuery(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// PUT to update with path param
func (c *Client) ModifyWithPath(
	ctx context.Context,
	param string,
	request string,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.ModifyWithPath(
		ctx,
		param,
		request,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}

// PUT to update with path param
func (c *Client) ModifyWithInlinePath(
	ctx context.Context,
	request *endpoints.ModifyResourceAtInlinedPath,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.ModifyWithInlinePath(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}
