// Code generated by Fern. DO NOT EDIT.

package client

import (
	core "github.com/exhaustive/fern/core"
	container "github.com/exhaustive/fern/endpoints/container"
	contenttype "github.com/exhaustive/fern/endpoints/contenttype"
	enum "github.com/exhaustive/fern/endpoints/enum"
	httpmethods "github.com/exhaustive/fern/endpoints/httpmethods"
	object "github.com/exhaustive/fern/endpoints/object"
	params "github.com/exhaustive/fern/endpoints/params"
	primitive "github.com/exhaustive/fern/endpoints/primitive"
	put "github.com/exhaustive/fern/endpoints/put"
	union "github.com/exhaustive/fern/endpoints/union"
	urls "github.com/exhaustive/fern/endpoints/urls"
	internal "github.com/exhaustive/fern/internal"
	option "github.com/exhaustive/fern/option"
	http "net/http"
)

type Client struct {
	Container   *container.Client
	ContentType *contenttype.Client
	Enum        *enum.Client
	HttpMethods *httpmethods.Client
	Object      *object.Client
	Params      *params.Client
	Primitive   *primitive.Client
	Put         *put.Client
	Union       *union.Client
	Urls        *urls.Client

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		Container:   container.NewClient(opts...),
		ContentType: contenttype.NewClient(opts...),
		Enum:        enum.NewClient(opts...),
		HttpMethods: httpmethods.NewClient(opts...),
		Object:      object.NewClient(opts...),
		Params:      params.NewClient(opts...),
		Primitive:   primitive.NewClient(opts...),
		Put:         put.NewClient(opts...),
		Union:       union.NewClient(opts...),
		Urls:        urls.NewClient(opts...),
		baseURL:     options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}
