// Code generated by Fern. DO NOT EDIT.

package primitive

import (
	context "context"
	core "github.com/exhaustive/fern/core"
	internal "github.com/exhaustive/fern/internal"
	option "github.com/exhaustive/fern/option"
	uuid "github.com/google/uuid"
	http "net/http"
	time "time"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) GetAndReturnString(
	ctx context.Context,
	request string,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.GetAndReturnString(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnInt(
	ctx context.Context,
	request int,
	opts ...option.RequestOption,
) (int, error) {
	response, err := c.WithRawResponse.GetAndReturnInt(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return 0, err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnLong(
	ctx context.Context,
	request int64,
	opts ...option.RequestOption,
) (int64, error) {
	response, err := c.WithRawResponse.GetAndReturnLong(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return 0, err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnDouble(
	ctx context.Context,
	request float64,
	opts ...option.RequestOption,
) (float64, error) {
	response, err := c.WithRawResponse.GetAndReturnDouble(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return 0, err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnBool(
	ctx context.Context,
	request bool,
	opts ...option.RequestOption,
) (bool, error) {
	response, err := c.WithRawResponse.GetAndReturnBool(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return false, err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnDatetime(
	ctx context.Context,
	request time.Time,
	opts ...option.RequestOption,
) (time.Time, error) {
	response, err := c.WithRawResponse.GetAndReturnDatetime(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return time.Time{}, err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnDate(
	ctx context.Context,
	request time.Time,
	opts ...option.RequestOption,
) (time.Time, error) {
	response, err := c.WithRawResponse.GetAndReturnDate(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return time.Time{}, err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnUuid(
	ctx context.Context,
	request uuid.UUID,
	opts ...option.RequestOption,
) (uuid.UUID, error) {
	response, err := c.WithRawResponse.GetAndReturnUuid(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return uuid.UUID{}, err
	}
	return response.Body, nil
}

func (c *Client) GetAndReturnBase64(
	ctx context.Context,
	request []byte,
	opts ...option.RequestOption,
) ([]byte, error) {
	response, err := c.WithRawResponse.GetAndReturnBase64(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
