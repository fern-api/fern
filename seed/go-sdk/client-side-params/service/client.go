// Code generated by Fern. DO NOT EDIT.

package service

import (
	context "context"
	fern "github.com/client-side-params/fern"
	core "github.com/client-side-params/fern/core"
	internal "github.com/client-side-params/fern/internal"
	option "github.com/client-side-params/fern/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// List resources with pagination
func (c *Client) ListResources(
	ctx context.Context,
	request *fern.ListResourcesRequest,
	opts ...option.RequestOption,
) ([]*fern.Resource, error) {
	response, err := c.WithRawResponse.ListResources(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get a single resource
func (c *Client) GetResource(
	ctx context.Context,
	resourceId string,
	request *fern.GetResourceRequest,
	opts ...option.RequestOption,
) (*fern.Resource, error) {
	response, err := c.WithRawResponse.GetResource(
		ctx,
		resourceId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Search resources with complex parameters
func (c *Client) SearchResources(
	ctx context.Context,
	request *fern.SearchResourcesRequest,
	opts ...option.RequestOption,
) (*fern.SearchResponse, error) {
	response, err := c.WithRawResponse.SearchResources(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// List or search for users
func (c *Client) ListUsers(
	ctx context.Context,
	request *fern.ListUsersRequest,
	opts ...option.RequestOption,
) (*fern.PaginatedUserResponse, error) {
	response, err := c.WithRawResponse.ListUsers(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get a user by ID
func (c *Client) GetUserById(
	ctx context.Context,
	userId string,
	request *fern.GetUserRequest,
	opts ...option.RequestOption,
) (*fern.User, error) {
	response, err := c.WithRawResponse.GetUserById(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Create a new user
func (c *Client) CreateUser(
	ctx context.Context,
	request *fern.CreateUserRequest,
	opts ...option.RequestOption,
) (*fern.User, error) {
	response, err := c.WithRawResponse.CreateUser(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Update a user
func (c *Client) UpdateUser(
	ctx context.Context,
	userId string,
	request *fern.UpdateUserRequest,
	opts ...option.RequestOption,
) (*fern.User, error) {
	response, err := c.WithRawResponse.UpdateUser(
		ctx,
		userId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Delete a user
func (c *Client) DeleteUser(
	ctx context.Context,
	userId string,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.DeleteUser(
		ctx,
		userId,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// List all connections
func (c *Client) ListConnections(
	ctx context.Context,
	request *fern.ListConnectionsRequest,
	opts ...option.RequestOption,
) ([]*fern.Connection, error) {
	response, err := c.WithRawResponse.ListConnections(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get a connection by ID
func (c *Client) GetConnection(
	ctx context.Context,
	connectionId string,
	request *fern.GetConnectionRequest,
	opts ...option.RequestOption,
) (*fern.Connection, error) {
	response, err := c.WithRawResponse.GetConnection(
		ctx,
		connectionId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// List all clients/applications
func (c *Client) ListClients(
	ctx context.Context,
	request *fern.ListClientsRequest,
	opts ...option.RequestOption,
) (*fern.PaginatedClientResponse, error) {
	response, err := c.WithRawResponse.ListClients(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}

// Get a client by ID
func (c *Client) GetClient(
	ctx context.Context,
	clientId string,
	request *fern.GetClientRequest,
	opts ...option.RequestOption,
) (*fern.Client, error) {
	response, err := c.WithRawResponse.GetClient(
		ctx,
		clientId,
		request,
		opts...,
	)
	if err != nil {
		return nil, err
	}
	return response.Body, nil
}
