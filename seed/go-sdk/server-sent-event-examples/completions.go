// Code generated by Fern. DO NOT EDIT.

package serversentevents

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/server-sent-event-examples/fern/internal"
	big "math/big"
)

var (
	streamCompletionRequestFieldQuery = big.NewInt(1 << 0)
)

type StreamCompletionRequest struct {
	Query string `json:"query" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *StreamCompletionRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StreamCompletionRequest) SetQuery(query string) {
	s.Query = query
	s.require(streamCompletionRequestFieldQuery)
}

var (
	streamedCompletionFieldDelta  = big.NewInt(1 << 0)
	streamedCompletionFieldTokens = big.NewInt(1 << 1)
)

type StreamedCompletion struct {
	Delta  string `json:"delta" url:"delta"`
	Tokens *int   `json:"tokens,omitempty" url:"tokens,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StreamedCompletion) GetDelta() string {
	if s == nil {
		return ""
	}
	return s.Delta
}

func (s *StreamedCompletion) GetTokens() *int {
	if s == nil {
		return nil
	}
	return s.Tokens
}

func (s *StreamedCompletion) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamedCompletion) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetDelta sets the Delta field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StreamedCompletion) SetDelta(delta string) {
	s.Delta = delta
	s.require(streamedCompletionFieldDelta)
}

// SetTokens sets the Tokens field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StreamedCompletion) SetTokens(tokens *int) {
	s.Tokens = tokens
	s.require(streamedCompletionFieldTokens)
}

func (s *StreamedCompletion) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamedCompletion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamedCompletion(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamedCompletion) MarshalJSON() ([]byte, error) {
	type embed StreamedCompletion
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StreamedCompletion) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
