// Code generated by Fern. DO NOT EDIT.

package level2

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/empty-clients/fern/internal"
	big "math/big"
)

var (
	addressFieldLine1 = big.NewInt(1 << 0)
	addressFieldLine2 = big.NewInt(1 << 1)
	addressFieldCity  = big.NewInt(1 << 2)
	addressFieldState = big.NewInt(1 << 3)
	addressFieldZip   = big.NewInt(1 << 4)
)

type Address struct {
	Line1 string  `json:"line1" url:"line1"`
	Line2 *string `json:"line2,omitempty" url:"line2,omitempty"`
	City  string  `json:"city" url:"city"`
	State string  `json:"state" url:"state"`
	Zip   string  `json:"zip" url:"zip"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
	country        string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetLine1() string {
	if a == nil {
		return ""
	}
	return a.Line1
}

func (a *Address) GetLine2() *string {
	if a == nil {
		return nil
	}
	return a.Line2
}

func (a *Address) GetCity() string {
	if a == nil {
		return ""
	}
	return a.City
}

func (a *Address) GetState() string {
	if a == nil {
		return ""
	}
	return a.State
}

func (a *Address) GetZip() string {
	if a == nil {
		return ""
	}
	return a.Zip
}

func (a *Address) Country() string {
	return a.country
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetLine1 sets the Line1 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetLine1(line1 string) {
	a.Line1 = line1
	a.require(addressFieldLine1)
}

// SetLine2 sets the Line2 field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetLine2(line2 *string) {
	a.Line2 = line2
	a.require(addressFieldLine2)
}

// SetCity sets the City field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetCity(city string) {
	a.City = city
	a.require(addressFieldCity)
}

// SetState sets the State field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetState(state string) {
	a.State = state
	a.require(addressFieldState)
}

// SetZip sets the Zip field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetZip(zip string) {
	a.Zip = zip
	a.require(addressFieldZip)
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type embed Address
	var unmarshaler = struct {
		embed
		Country string `json:"country"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = Address(unmarshaler.embed)
	if unmarshaler.Country != "USA" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", a, "USA", unmarshaler.Country)
	}
	a.country = unmarshaler.Country
	extraProperties, err := internal.ExtractExtraProperties(data, *a, "country")
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) MarshalJSON() ([]byte, error) {
	type embed Address
	var marshaler = struct {
		embed
		Country string `json:"country"`
	}{
		embed:   embed(*a),
		Country: "USA",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	personFieldName    = big.NewInt(1 << 0)
	personFieldAddress = big.NewInt(1 << 1)
)

type Person struct {
	Name    string   `json:"name" url:"name"`
	Address *Address `json:"address" url:"address"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *Person) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *Person) GetAddress() *Address {
	if p == nil {
		return nil
	}
	return p.Address
}

func (p *Person) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Person) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Person) SetName(name string) {
	p.Name = name
	p.require(personFieldName)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *Person) SetAddress(address *Address) {
	p.Address = address
	p.require(personFieldAddress)
}

func (p *Person) UnmarshalJSON(data []byte) error {
	type unmarshaler Person
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Person(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *Person) MarshalJSON() ([]byte, error) {
	type embed Person
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *Person) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}
