// This file was auto-generated by Fern from our API Definition.

package alias

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/alias/fern/core"
)

// Object is an alias for a type.
type Object = *Type

// A simple type with just a name.
type Type struct {
	Id   TypeId `json:"id" url:"id"`
	Name string `json:"name" url:"name"`

	_rawJSON json.RawMessage
}

func (t *Type) UnmarshalJSON(data []byte) error {
	type unmarshaler Type
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Type(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *Type) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// An alias for type IDs.
type TypeId = string
