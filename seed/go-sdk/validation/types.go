// Code generated by Fern. DO NOT EDIT.

package validation

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/validation/fern/internal"
	big "math/big"
)

var (
	createRequestFieldDecimal = big.NewInt(1 << 0)
	createRequestFieldEven    = big.NewInt(1 << 1)
	createRequestFieldName    = big.NewInt(1 << 2)
	createRequestFieldShape   = big.NewInt(1 << 3)
)

type CreateRequest struct {
	Decimal float64 `json:"decimal" url:"-"`
	Even    int     `json:"even" url:"-"`
	Name    string  `json:"name" url:"-"`
	Shape   Shape   `json:"shape" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (c *CreateRequest) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetDecimal sets the Decimal field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateRequest) SetDecimal(decimal float64) {
	c.Decimal = decimal
	c.require(createRequestFieldDecimal)
}

// SetEven sets the Even field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateRequest) SetEven(even int) {
	c.Even = even
	c.require(createRequestFieldEven)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateRequest) SetName(name string) {
	c.Name = name
	c.require(createRequestFieldName)
}

// SetShape sets the Shape field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateRequest) SetShape(shape Shape) {
	c.Shape = shape
	c.require(createRequestFieldShape)
}

var (
	getRequestFieldDecimal = big.NewInt(1 << 0)
	getRequestFieldEven    = big.NewInt(1 << 1)
	getRequestFieldName    = big.NewInt(1 << 2)
)

type GetRequest struct {
	Decimal float64 `json:"-" url:"decimal"`
	Even    int     `json:"-" url:"even"`
	Name    string  `json:"-" url:"name"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetDecimal sets the Decimal field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetRequest) SetDecimal(decimal float64) {
	g.Decimal = decimal
	g.require(getRequestFieldDecimal)
}

// SetEven sets the Even field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetRequest) SetEven(even int) {
	g.Even = even
	g.require(getRequestFieldEven)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetRequest) SetName(name string) {
	g.Name = name
	g.require(getRequestFieldName)
}

type Double = float64

type LargeInteger = int

type Sentence = string

type Shape string

const (
	ShapeSquare   Shape = "SQUARE"
	ShapeCircle   Shape = "CIRCLE"
	ShapeTriangle Shape = "TRIANGLE"
)

func NewShapeFromString(s string) (Shape, error) {
	switch s {
	case "SQUARE":
		return ShapeSquare, nil
	case "CIRCLE":
		return ShapeCircle, nil
	case "TRIANGLE":
		return ShapeTriangle, nil
	}
	var t Shape
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Shape) Ptr() *Shape {
	return &s
}

type SmallInteger = int

// Defines properties with default values and validation rules.
var (
	typeFieldDecimal = big.NewInt(1 << 0)
	typeFieldEven    = big.NewInt(1 << 1)
	typeFieldName    = big.NewInt(1 << 2)
	typeFieldShape   = big.NewInt(1 << 3)
)

type Type struct {
	Decimal float64 `json:"decimal" url:"decimal"`
	Even    int     `json:"even" url:"even"`
	Name    string  `json:"name" url:"name"`
	Shape   Shape   `json:"shape" url:"shape"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Type) GetDecimal() float64 {
	if t == nil {
		return 0
	}
	return t.Decimal
}

func (t *Type) GetEven() int {
	if t == nil {
		return 0
	}
	return t.Even
}

func (t *Type) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *Type) GetShape() Shape {
	if t == nil {
		return ""
	}
	return t.Shape
}

func (t *Type) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Type) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetDecimal sets the Decimal field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetDecimal(decimal float64) {
	t.Decimal = decimal
	t.require(typeFieldDecimal)
}

// SetEven sets the Even field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetEven(even int) {
	t.Even = even
	t.require(typeFieldEven)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetName(name string) {
	t.Name = name
	t.require(typeFieldName)
}

// SetShape sets the Shape field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *Type) SetShape(shape Shape) {
	t.Shape = shape
	t.require(typeFieldShape)
}

func (t *Type) UnmarshalJSON(data []byte) error {
	type unmarshaler Type
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Type(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Type) MarshalJSON() ([]byte, error) {
	type embed Type
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *Type) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type Word = string
