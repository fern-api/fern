// Code generated by Fern. DO NOT EDIT.

package service

import (
	context "context"
	fern "github.com/content-type/fern"
	core "github.com/content-type/fern/core"
	internal "github.com/content-type/fern/internal"
	option "github.com/content-type/fern/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) Patch(
	ctx context.Context,
	request *fern.PatchProxyRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.Patch(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Update with JSON merge patch - complex types.
// This endpoint demonstrates the distinction between:
// - optional<T> fields (can be present or absent, but not null)
// - optional<nullable<T>> fields (can be present, absent, or null)
func (c *Client) PatchComplex(
	ctx context.Context,
	id string,
	request *fern.PatchComplexRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.PatchComplex(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Named request with mixed optional/nullable fields and merge-patch content type.
// This should trigger the NPE issue when optional fields aren't initialized.
func (c *Client) NamedPatchWithMixed(
	ctx context.Context,
	id string,
	request *fern.NamedMixedPatchRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.NamedPatchWithMixed(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Test endpoint to verify Optional field initialization and JsonSetter with Nulls.SKIP.
// This endpoint should:
// 1. Not NPE when fields are not provided (tests initialization)
// 2. Not NPE when fields are explicitly null in JSON (tests Nulls.SKIP)
func (c *Client) OptionalMergePatchTest(
	ctx context.Context,
	request *fern.OptionalMergePatchRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.OptionalMergePatchTest(
		ctx,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}

// Regular PATCH endpoint without merge-patch semantics
func (c *Client) RegularPatch(
	ctx context.Context,
	id string,
	request *fern.RegularPatchRequest,
	opts ...option.RequestOption,
) error {
	_, err := c.WithRawResponse.RegularPatch(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return err
	}
	return nil
}
