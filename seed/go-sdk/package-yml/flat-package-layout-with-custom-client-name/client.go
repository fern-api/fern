// Code generated by Fern. DO NOT EDIT.

package packageyml

import (
	context "context"
	core "github.com/package-yml/fern/core"
	internal "github.com/package-yml/fern/internal"
	option "github.com/package-yml/fern/option"
	http "net/http"
)

type Acme struct {
	WithRawResponse *RawAcme
	Service         *ServiceClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func New(opts ...option.RequestOption) *Acme {
	options := core.NewRequestOptions(opts...)
	return &Acme{
		Service:         NewServiceClient(opts...),
		WithRawResponse: NewRawAcme(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (a *Acme) Echo(
	ctx context.Context,
	id string,
	request *EchoRequest,
	opts ...option.RequestOption,
) (string, error) {
	response, err := a.WithRawResponse.Echo(
		ctx,
		id,
		request,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}
