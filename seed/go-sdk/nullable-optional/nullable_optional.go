// Code generated by Fern. DO NOT EDIT.

package nullableoptional

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/nullable-optional/fern/internal"
	big "math/big"
	time "time"
)

var (
	filterByRoleRequestFieldRole          = big.NewInt(1 << 0)
	filterByRoleRequestFieldStatus        = big.NewInt(1 << 1)
	filterByRoleRequestFieldSecondaryRole = big.NewInt(1 << 2)
)

type FilterByRoleRequest struct {
	Role          *UserRole   `json:"-" url:"role,omitempty"`
	Status        *UserStatus `json:"-" url:"status,omitempty"`
	SecondaryRole *UserRole   `json:"-" url:"secondaryRole,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (f *FilterByRoleRequest) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetRole sets the Role field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilterByRoleRequest) SetRole(role *UserRole) {
	f.Role = role
	f.require(filterByRoleRequestFieldRole)
}

// SetStatus sets the Status field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilterByRoleRequest) SetStatus(status *UserStatus) {
	f.Status = status
	f.require(filterByRoleRequestFieldStatus)
}

// SetSecondaryRole sets the SecondaryRole field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilterByRoleRequest) SetSecondaryRole(secondaryRole *UserRole) {
	f.SecondaryRole = secondaryRole
	f.require(filterByRoleRequestFieldSecondaryRole)
}

var (
	searchRequestFieldQuery        = big.NewInt(1 << 0)
	searchRequestFieldFilters      = big.NewInt(1 << 1)
	searchRequestFieldIncludeTypes = big.NewInt(1 << 2)
)

type SearchRequest struct {
	Query        string             `json:"query" url:"-"`
	Filters      map[string]*string `json:"filters,omitempty" url:"-"`
	IncludeTypes []string           `json:"includeTypes,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *SearchRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchRequest) SetQuery(query string) {
	s.Query = query
	s.require(searchRequestFieldQuery)
}

// SetFilters sets the Filters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchRequest) SetFilters(filters map[string]*string) {
	s.Filters = filters
	s.require(searchRequestFieldFilters)
}

// SetIncludeTypes sets the IncludeTypes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchRequest) SetIncludeTypes(includeTypes []string) {
	s.IncludeTypes = includeTypes
	s.require(searchRequestFieldIncludeTypes)
}

var (
	listUsersRequestFieldLimit          = big.NewInt(1 << 0)
	listUsersRequestFieldOffset         = big.NewInt(1 << 1)
	listUsersRequestFieldIncludeDeleted = big.NewInt(1 << 2)
	listUsersRequestFieldSortBy         = big.NewInt(1 << 3)
)

type ListUsersRequest struct {
	Limit          *int    `json:"-" url:"limit,omitempty"`
	Offset         *int    `json:"-" url:"offset,omitempty"`
	IncludeDeleted *bool   `json:"-" url:"includeDeleted,omitempty"`
	SortBy         *string `json:"-" url:"sortBy,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (l *ListUsersRequest) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetLimit sets the Limit field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersRequest) SetLimit(limit *int) {
	l.Limit = limit
	l.require(listUsersRequestFieldLimit)
}

// SetOffset sets the Offset field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersRequest) SetOffset(offset *int) {
	l.Offset = offset
	l.require(listUsersRequestFieldOffset)
}

// SetIncludeDeleted sets the IncludeDeleted field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersRequest) SetIncludeDeleted(includeDeleted *bool) {
	l.IncludeDeleted = includeDeleted
	l.require(listUsersRequestFieldIncludeDeleted)
}

// SetSortBy sets the SortBy field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *ListUsersRequest) SetSortBy(sortBy *string) {
	l.SortBy = sortBy
	l.require(listUsersRequestFieldSortBy)
}

var (
	searchUsersRequestFieldQuery      = big.NewInt(1 << 0)
	searchUsersRequestFieldDepartment = big.NewInt(1 << 1)
	searchUsersRequestFieldRole       = big.NewInt(1 << 2)
	searchUsersRequestFieldIsActive   = big.NewInt(1 << 3)
)

type SearchUsersRequest struct {
	Query      string  `json:"-" url:"query"`
	Department *string `json:"-" url:"department,omitempty"`
	Role       *string `json:"-" url:"role,omitempty"`
	IsActive   *bool   `json:"-" url:"isActive,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (s *SearchUsersRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetQuery sets the Query field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchUsersRequest) SetQuery(query string) {
	s.Query = query
	s.require(searchUsersRequestFieldQuery)
}

// SetDepartment sets the Department field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchUsersRequest) SetDepartment(department *string) {
	s.Department = department
	s.require(searchUsersRequestFieldDepartment)
}

// SetRole sets the Role field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchUsersRequest) SetRole(role *string) {
	s.Role = role
	s.require(searchUsersRequestFieldRole)
}

// SetIsActive sets the IsActive field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SearchUsersRequest) SetIsActive(isActive *bool) {
	s.IsActive = isActive
	s.require(searchUsersRequestFieldIsActive)
}

// Nested object for testing
var (
	addressFieldStreet     = big.NewInt(1 << 0)
	addressFieldCity       = big.NewInt(1 << 1)
	addressFieldState      = big.NewInt(1 << 2)
	addressFieldZipCode    = big.NewInt(1 << 3)
	addressFieldCountry    = big.NewInt(1 << 4)
	addressFieldBuildingId = big.NewInt(1 << 5)
	addressFieldTenantId   = big.NewInt(1 << 6)
)

type Address struct {
	Street     string         `json:"street" url:"street"`
	City       *string        `json:"city,omitempty" url:"city,omitempty"`
	State      *string        `json:"state,omitempty" url:"state,omitempty"`
	ZipCode    string         `json:"zipCode" url:"zipCode"`
	Country    *string        `json:"country,omitempty" url:"country,omitempty"`
	BuildingId NullableUserId `json:"buildingId,omitempty" url:"buildingId,omitempty"`
	TenantId   OptionalUserId `json:"tenantId,omitempty" url:"tenantId,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetStreet() string {
	if a == nil {
		return ""
	}
	return a.Street
}

func (a *Address) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *Address) GetState() *string {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *Address) GetZipCode() string {
	if a == nil {
		return ""
	}
	return a.ZipCode
}

func (a *Address) GetCountry() *string {
	if a == nil {
		return nil
	}
	return a.Country
}

func (a *Address) GetBuildingId() NullableUserId {
	if a == nil {
		return nil
	}
	return a.BuildingId
}

func (a *Address) GetTenantId() OptionalUserId {
	if a == nil {
		return nil
	}
	return a.TenantId
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetStreet sets the Street field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetStreet(street string) {
	a.Street = street
	a.require(addressFieldStreet)
}

// SetCity sets the City field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetCity(city *string) {
	a.City = city
	a.require(addressFieldCity)
}

// SetState sets the State field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetState(state *string) {
	a.State = state
	a.require(addressFieldState)
}

// SetZipCode sets the ZipCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetZipCode(zipCode string) {
	a.ZipCode = zipCode
	a.require(addressFieldZipCode)
}

// SetCountry sets the Country field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetCountry(country *string) {
	a.Country = country
	a.require(addressFieldCountry)
}

// SetBuildingId sets the BuildingId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetBuildingId(buildingId NullableUserId) {
	a.BuildingId = buildingId
	a.require(addressFieldBuildingId)
}

// SetTenantId sets the TenantId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *Address) SetTenantId(tenantId OptionalUserId) {
	a.TenantId = tenantId
	a.require(addressFieldTenantId)
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) MarshalJSON() ([]byte, error) {
	type embed Address
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Test object with nullable enums, unions, and arrays
var (
	complexProfileFieldId                           = big.NewInt(1 << 0)
	complexProfileFieldNullableRole                 = big.NewInt(1 << 1)
	complexProfileFieldOptionalRole                 = big.NewInt(1 << 2)
	complexProfileFieldOptionalNullableRole         = big.NewInt(1 << 3)
	complexProfileFieldNullableStatus               = big.NewInt(1 << 4)
	complexProfileFieldOptionalStatus               = big.NewInt(1 << 5)
	complexProfileFieldOptionalNullableStatus       = big.NewInt(1 << 6)
	complexProfileFieldNullableNotification         = big.NewInt(1 << 7)
	complexProfileFieldOptionalNotification         = big.NewInt(1 << 8)
	complexProfileFieldOptionalNullableNotification = big.NewInt(1 << 9)
	complexProfileFieldNullableSearchResult         = big.NewInt(1 << 10)
	complexProfileFieldOptionalSearchResult         = big.NewInt(1 << 11)
	complexProfileFieldNullableArray                = big.NewInt(1 << 12)
	complexProfileFieldOptionalArray                = big.NewInt(1 << 13)
	complexProfileFieldOptionalNullableArray        = big.NewInt(1 << 14)
	complexProfileFieldNullableListOfNullables      = big.NewInt(1 << 15)
	complexProfileFieldNullableMapOfNullables       = big.NewInt(1 << 16)
	complexProfileFieldNullableListOfUnions         = big.NewInt(1 << 17)
	complexProfileFieldOptionalMapOfEnums           = big.NewInt(1 << 18)
)

type ComplexProfile struct {
	Id                           string                `json:"id" url:"id"`
	NullableRole                 *UserRole             `json:"nullableRole,omitempty" url:"nullableRole,omitempty"`
	OptionalRole                 *UserRole             `json:"optionalRole,omitempty" url:"optionalRole,omitempty"`
	OptionalNullableRole         *UserRole             `json:"optionalNullableRole,omitempty" url:"optionalNullableRole,omitempty"`
	NullableStatus               *UserStatus           `json:"nullableStatus,omitempty" url:"nullableStatus,omitempty"`
	OptionalStatus               *UserStatus           `json:"optionalStatus,omitempty" url:"optionalStatus,omitempty"`
	OptionalNullableStatus       *UserStatus           `json:"optionalNullableStatus,omitempty" url:"optionalNullableStatus,omitempty"`
	NullableNotification         *NotificationMethod   `json:"nullableNotification,omitempty" url:"nullableNotification,omitempty"`
	OptionalNotification         *NotificationMethod   `json:"optionalNotification,omitempty" url:"optionalNotification,omitempty"`
	OptionalNullableNotification *NotificationMethod   `json:"optionalNullableNotification,omitempty" url:"optionalNullableNotification,omitempty"`
	NullableSearchResult         *SearchResult         `json:"nullableSearchResult,omitempty" url:"nullableSearchResult,omitempty"`
	OptionalSearchResult         *SearchResult         `json:"optionalSearchResult,omitempty" url:"optionalSearchResult,omitempty"`
	NullableArray                []string              `json:"nullableArray,omitempty" url:"nullableArray,omitempty"`
	OptionalArray                []string              `json:"optionalArray,omitempty" url:"optionalArray,omitempty"`
	OptionalNullableArray        []string              `json:"optionalNullableArray,omitempty" url:"optionalNullableArray,omitempty"`
	NullableListOfNullables      []*string             `json:"nullableListOfNullables,omitempty" url:"nullableListOfNullables,omitempty"`
	NullableMapOfNullables       map[string]*Address   `json:"nullableMapOfNullables,omitempty" url:"nullableMapOfNullables,omitempty"`
	NullableListOfUnions         []*NotificationMethod `json:"nullableListOfUnions,omitempty" url:"nullableListOfUnions,omitempty"`
	OptionalMapOfEnums           map[string]UserRole   `json:"optionalMapOfEnums,omitempty" url:"optionalMapOfEnums,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ComplexProfile) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *ComplexProfile) GetNullableRole() *UserRole {
	if c == nil {
		return nil
	}
	return c.NullableRole
}

func (c *ComplexProfile) GetOptionalRole() *UserRole {
	if c == nil {
		return nil
	}
	return c.OptionalRole
}

func (c *ComplexProfile) GetOptionalNullableRole() *UserRole {
	if c == nil {
		return nil
	}
	return c.OptionalNullableRole
}

func (c *ComplexProfile) GetNullableStatus() *UserStatus {
	if c == nil {
		return nil
	}
	return c.NullableStatus
}

func (c *ComplexProfile) GetOptionalStatus() *UserStatus {
	if c == nil {
		return nil
	}
	return c.OptionalStatus
}

func (c *ComplexProfile) GetOptionalNullableStatus() *UserStatus {
	if c == nil {
		return nil
	}
	return c.OptionalNullableStatus
}

func (c *ComplexProfile) GetNullableNotification() *NotificationMethod {
	if c == nil {
		return nil
	}
	return c.NullableNotification
}

func (c *ComplexProfile) GetOptionalNotification() *NotificationMethod {
	if c == nil {
		return nil
	}
	return c.OptionalNotification
}

func (c *ComplexProfile) GetOptionalNullableNotification() *NotificationMethod {
	if c == nil {
		return nil
	}
	return c.OptionalNullableNotification
}

func (c *ComplexProfile) GetNullableSearchResult() *SearchResult {
	if c == nil {
		return nil
	}
	return c.NullableSearchResult
}

func (c *ComplexProfile) GetOptionalSearchResult() *SearchResult {
	if c == nil {
		return nil
	}
	return c.OptionalSearchResult
}

func (c *ComplexProfile) GetNullableArray() []string {
	if c == nil {
		return nil
	}
	return c.NullableArray
}

func (c *ComplexProfile) GetOptionalArray() []string {
	if c == nil {
		return nil
	}
	return c.OptionalArray
}

func (c *ComplexProfile) GetOptionalNullableArray() []string {
	if c == nil {
		return nil
	}
	return c.OptionalNullableArray
}

func (c *ComplexProfile) GetNullableListOfNullables() []*string {
	if c == nil {
		return nil
	}
	return c.NullableListOfNullables
}

func (c *ComplexProfile) GetNullableMapOfNullables() map[string]*Address {
	if c == nil {
		return nil
	}
	return c.NullableMapOfNullables
}

func (c *ComplexProfile) GetNullableListOfUnions() []*NotificationMethod {
	if c == nil {
		return nil
	}
	return c.NullableListOfUnions
}

func (c *ComplexProfile) GetOptionalMapOfEnums() map[string]UserRole {
	if c == nil {
		return nil
	}
	return c.OptionalMapOfEnums
}

func (c *ComplexProfile) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComplexProfile) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetId(id string) {
	c.Id = id
	c.require(complexProfileFieldId)
}

// SetNullableRole sets the NullableRole field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableRole(nullableRole *UserRole) {
	c.NullableRole = nullableRole
	c.require(complexProfileFieldNullableRole)
}

// SetOptionalRole sets the OptionalRole field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalRole(optionalRole *UserRole) {
	c.OptionalRole = optionalRole
	c.require(complexProfileFieldOptionalRole)
}

// SetOptionalNullableRole sets the OptionalNullableRole field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalNullableRole(optionalNullableRole *UserRole) {
	c.OptionalNullableRole = optionalNullableRole
	c.require(complexProfileFieldOptionalNullableRole)
}

// SetNullableStatus sets the NullableStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableStatus(nullableStatus *UserStatus) {
	c.NullableStatus = nullableStatus
	c.require(complexProfileFieldNullableStatus)
}

// SetOptionalStatus sets the OptionalStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalStatus(optionalStatus *UserStatus) {
	c.OptionalStatus = optionalStatus
	c.require(complexProfileFieldOptionalStatus)
}

// SetOptionalNullableStatus sets the OptionalNullableStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalNullableStatus(optionalNullableStatus *UserStatus) {
	c.OptionalNullableStatus = optionalNullableStatus
	c.require(complexProfileFieldOptionalNullableStatus)
}

// SetNullableNotification sets the NullableNotification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableNotification(nullableNotification *NotificationMethod) {
	c.NullableNotification = nullableNotification
	c.require(complexProfileFieldNullableNotification)
}

// SetOptionalNotification sets the OptionalNotification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalNotification(optionalNotification *NotificationMethod) {
	c.OptionalNotification = optionalNotification
	c.require(complexProfileFieldOptionalNotification)
}

// SetOptionalNullableNotification sets the OptionalNullableNotification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalNullableNotification(optionalNullableNotification *NotificationMethod) {
	c.OptionalNullableNotification = optionalNullableNotification
	c.require(complexProfileFieldOptionalNullableNotification)
}

// SetNullableSearchResult sets the NullableSearchResult field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableSearchResult(nullableSearchResult *SearchResult) {
	c.NullableSearchResult = nullableSearchResult
	c.require(complexProfileFieldNullableSearchResult)
}

// SetOptionalSearchResult sets the OptionalSearchResult field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalSearchResult(optionalSearchResult *SearchResult) {
	c.OptionalSearchResult = optionalSearchResult
	c.require(complexProfileFieldOptionalSearchResult)
}

// SetNullableArray sets the NullableArray field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableArray(nullableArray []string) {
	c.NullableArray = nullableArray
	c.require(complexProfileFieldNullableArray)
}

// SetOptionalArray sets the OptionalArray field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalArray(optionalArray []string) {
	c.OptionalArray = optionalArray
	c.require(complexProfileFieldOptionalArray)
}

// SetOptionalNullableArray sets the OptionalNullableArray field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalNullableArray(optionalNullableArray []string) {
	c.OptionalNullableArray = optionalNullableArray
	c.require(complexProfileFieldOptionalNullableArray)
}

// SetNullableListOfNullables sets the NullableListOfNullables field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableListOfNullables(nullableListOfNullables []*string) {
	c.NullableListOfNullables = nullableListOfNullables
	c.require(complexProfileFieldNullableListOfNullables)
}

// SetNullableMapOfNullables sets the NullableMapOfNullables field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableMapOfNullables(nullableMapOfNullables map[string]*Address) {
	c.NullableMapOfNullables = nullableMapOfNullables
	c.require(complexProfileFieldNullableMapOfNullables)
}

// SetNullableListOfUnions sets the NullableListOfUnions field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetNullableListOfUnions(nullableListOfUnions []*NotificationMethod) {
	c.NullableListOfUnions = nullableListOfUnions
	c.require(complexProfileFieldNullableListOfUnions)
}

// SetOptionalMapOfEnums sets the OptionalMapOfEnums field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ComplexProfile) SetOptionalMapOfEnums(optionalMapOfEnums map[string]UserRole) {
	c.OptionalMapOfEnums = optionalMapOfEnums
	c.require(complexProfileFieldOptionalMapOfEnums)
}

func (c *ComplexProfile) UnmarshalJSON(data []byte) error {
	type unmarshaler ComplexProfile
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ComplexProfile(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComplexProfile) MarshalJSON() ([]byte, error) {
	type embed ComplexProfile
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ComplexProfile) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	createUserRequestFieldUsername = big.NewInt(1 << 0)
	createUserRequestFieldEmail    = big.NewInt(1 << 1)
	createUserRequestFieldPhone    = big.NewInt(1 << 2)
	createUserRequestFieldAddress  = big.NewInt(1 << 3)
)

type CreateUserRequest struct {
	Username string   `json:"username" url:"username"`
	Email    *string  `json:"email,omitempty" url:"email,omitempty"`
	Phone    *string  `json:"phone,omitempty" url:"phone,omitempty"`
	Address  *Address `json:"address,omitempty" url:"address,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateUserRequest) GetUsername() string {
	if c == nil {
		return ""
	}
	return c.Username
}

func (c *CreateUserRequest) GetEmail() *string {
	if c == nil {
		return nil
	}
	return c.Email
}

func (c *CreateUserRequest) GetPhone() *string {
	if c == nil {
		return nil
	}
	return c.Phone
}

func (c *CreateUserRequest) GetAddress() *Address {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CreateUserRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserRequest) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetUsername(username string) {
	c.Username = username
	c.require(createUserRequestFieldUsername)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetEmail(email *string) {
	c.Email = email
	c.require(createUserRequestFieldEmail)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetPhone(phone *string) {
	c.Phone = phone
	c.require(createUserRequestFieldPhone)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CreateUserRequest) SetAddress(address *Address) {
	c.Address = address
	c.require(createUserRequestFieldAddress)
}

func (c *CreateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserRequest) MarshalJSON() ([]byte, error) {
	type embed CreateUserRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CreateUserRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Request body for testing deserialization of null values
var (
	deserializationTestRequestFieldRequiredString         = big.NewInt(1 << 0)
	deserializationTestRequestFieldNullableString         = big.NewInt(1 << 1)
	deserializationTestRequestFieldOptionalString         = big.NewInt(1 << 2)
	deserializationTestRequestFieldOptionalNullableString = big.NewInt(1 << 3)
	deserializationTestRequestFieldNullableEnum           = big.NewInt(1 << 4)
	deserializationTestRequestFieldOptionalEnum           = big.NewInt(1 << 5)
	deserializationTestRequestFieldNullableUnion          = big.NewInt(1 << 6)
	deserializationTestRequestFieldOptionalUnion          = big.NewInt(1 << 7)
	deserializationTestRequestFieldNullableList           = big.NewInt(1 << 8)
	deserializationTestRequestFieldNullableMap            = big.NewInt(1 << 9)
	deserializationTestRequestFieldNullableObject         = big.NewInt(1 << 10)
	deserializationTestRequestFieldOptionalObject         = big.NewInt(1 << 11)
)

type DeserializationTestRequest struct {
	RequiredString         string              `json:"requiredString" url:"requiredString"`
	NullableString         *string             `json:"nullableString,omitempty" url:"nullableString,omitempty"`
	OptionalString         *string             `json:"optionalString,omitempty" url:"optionalString,omitempty"`
	OptionalNullableString *string             `json:"optionalNullableString,omitempty" url:"optionalNullableString,omitempty"`
	NullableEnum           *UserRole           `json:"nullableEnum,omitempty" url:"nullableEnum,omitempty"`
	OptionalEnum           *UserStatus         `json:"optionalEnum,omitempty" url:"optionalEnum,omitempty"`
	NullableUnion          *NotificationMethod `json:"nullableUnion,omitempty" url:"nullableUnion,omitempty"`
	OptionalUnion          *SearchResult       `json:"optionalUnion,omitempty" url:"optionalUnion,omitempty"`
	NullableList           []string            `json:"nullableList,omitempty" url:"nullableList,omitempty"`
	NullableMap            map[string]int      `json:"nullableMap,omitempty" url:"nullableMap,omitempty"`
	NullableObject         *Address            `json:"nullableObject,omitempty" url:"nullableObject,omitempty"`
	OptionalObject         *Organization       `json:"optionalObject,omitempty" url:"optionalObject,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeserializationTestRequest) GetRequiredString() string {
	if d == nil {
		return ""
	}
	return d.RequiredString
}

func (d *DeserializationTestRequest) GetNullableString() *string {
	if d == nil {
		return nil
	}
	return d.NullableString
}

func (d *DeserializationTestRequest) GetOptionalString() *string {
	if d == nil {
		return nil
	}
	return d.OptionalString
}

func (d *DeserializationTestRequest) GetOptionalNullableString() *string {
	if d == nil {
		return nil
	}
	return d.OptionalNullableString
}

func (d *DeserializationTestRequest) GetNullableEnum() *UserRole {
	if d == nil {
		return nil
	}
	return d.NullableEnum
}

func (d *DeserializationTestRequest) GetOptionalEnum() *UserStatus {
	if d == nil {
		return nil
	}
	return d.OptionalEnum
}

func (d *DeserializationTestRequest) GetNullableUnion() *NotificationMethod {
	if d == nil {
		return nil
	}
	return d.NullableUnion
}

func (d *DeserializationTestRequest) GetOptionalUnion() *SearchResult {
	if d == nil {
		return nil
	}
	return d.OptionalUnion
}

func (d *DeserializationTestRequest) GetNullableList() []string {
	if d == nil {
		return nil
	}
	return d.NullableList
}

func (d *DeserializationTestRequest) GetNullableMap() map[string]int {
	if d == nil {
		return nil
	}
	return d.NullableMap
}

func (d *DeserializationTestRequest) GetNullableObject() *Address {
	if d == nil {
		return nil
	}
	return d.NullableObject
}

func (d *DeserializationTestRequest) GetOptionalObject() *Organization {
	if d == nil {
		return nil
	}
	return d.OptionalObject
}

func (d *DeserializationTestRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeserializationTestRequest) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetRequiredString sets the RequiredString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetRequiredString(requiredString string) {
	d.RequiredString = requiredString
	d.require(deserializationTestRequestFieldRequiredString)
}

// SetNullableString sets the NullableString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetNullableString(nullableString *string) {
	d.NullableString = nullableString
	d.require(deserializationTestRequestFieldNullableString)
}

// SetOptionalString sets the OptionalString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetOptionalString(optionalString *string) {
	d.OptionalString = optionalString
	d.require(deserializationTestRequestFieldOptionalString)
}

// SetOptionalNullableString sets the OptionalNullableString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetOptionalNullableString(optionalNullableString *string) {
	d.OptionalNullableString = optionalNullableString
	d.require(deserializationTestRequestFieldOptionalNullableString)
}

// SetNullableEnum sets the NullableEnum field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetNullableEnum(nullableEnum *UserRole) {
	d.NullableEnum = nullableEnum
	d.require(deserializationTestRequestFieldNullableEnum)
}

// SetOptionalEnum sets the OptionalEnum field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetOptionalEnum(optionalEnum *UserStatus) {
	d.OptionalEnum = optionalEnum
	d.require(deserializationTestRequestFieldOptionalEnum)
}

// SetNullableUnion sets the NullableUnion field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetNullableUnion(nullableUnion *NotificationMethod) {
	d.NullableUnion = nullableUnion
	d.require(deserializationTestRequestFieldNullableUnion)
}

// SetOptionalUnion sets the OptionalUnion field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetOptionalUnion(optionalUnion *SearchResult) {
	d.OptionalUnion = optionalUnion
	d.require(deserializationTestRequestFieldOptionalUnion)
}

// SetNullableList sets the NullableList field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetNullableList(nullableList []string) {
	d.NullableList = nullableList
	d.require(deserializationTestRequestFieldNullableList)
}

// SetNullableMap sets the NullableMap field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetNullableMap(nullableMap map[string]int) {
	d.NullableMap = nullableMap
	d.require(deserializationTestRequestFieldNullableMap)
}

// SetNullableObject sets the NullableObject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetNullableObject(nullableObject *Address) {
	d.NullableObject = nullableObject
	d.require(deserializationTestRequestFieldNullableObject)
}

// SetOptionalObject sets the OptionalObject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestRequest) SetOptionalObject(optionalObject *Organization) {
	d.OptionalObject = optionalObject
	d.require(deserializationTestRequestFieldOptionalObject)
}

func (d *DeserializationTestRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DeserializationTestRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeserializationTestRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeserializationTestRequest) MarshalJSON() ([]byte, error) {
	type embed DeserializationTestRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DeserializationTestRequest) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Response for deserialization test
var (
	deserializationTestResponseFieldEcho               = big.NewInt(1 << 0)
	deserializationTestResponseFieldProcessedAt        = big.NewInt(1 << 1)
	deserializationTestResponseFieldNullCount          = big.NewInt(1 << 2)
	deserializationTestResponseFieldPresentFieldsCount = big.NewInt(1 << 3)
)

type DeserializationTestResponse struct {
	Echo               *DeserializationTestRequest `json:"echo" url:"echo"`
	ProcessedAt        time.Time                   `json:"processedAt" url:"processedAt"`
	NullCount          int                         `json:"nullCount" url:"nullCount"`
	PresentFieldsCount int                         `json:"presentFieldsCount" url:"presentFieldsCount"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeserializationTestResponse) GetEcho() *DeserializationTestRequest {
	if d == nil {
		return nil
	}
	return d.Echo
}

func (d *DeserializationTestResponse) GetProcessedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.ProcessedAt
}

func (d *DeserializationTestResponse) GetNullCount() int {
	if d == nil {
		return 0
	}
	return d.NullCount
}

func (d *DeserializationTestResponse) GetPresentFieldsCount() int {
	if d == nil {
		return 0
	}
	return d.PresentFieldsCount
}

func (d *DeserializationTestResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeserializationTestResponse) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetEcho sets the Echo field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestResponse) SetEcho(echo *DeserializationTestRequest) {
	d.Echo = echo
	d.require(deserializationTestResponseFieldEcho)
}

// SetProcessedAt sets the ProcessedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestResponse) SetProcessedAt(processedAt time.Time) {
	d.ProcessedAt = processedAt
	d.require(deserializationTestResponseFieldProcessedAt)
}

// SetNullCount sets the NullCount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestResponse) SetNullCount(nullCount int) {
	d.NullCount = nullCount
	d.require(deserializationTestResponseFieldNullCount)
}

// SetPresentFieldsCount sets the PresentFieldsCount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeserializationTestResponse) SetPresentFieldsCount(presentFieldsCount int) {
	d.PresentFieldsCount = presentFieldsCount
	d.require(deserializationTestResponseFieldPresentFieldsCount)
}

func (d *DeserializationTestResponse) UnmarshalJSON(data []byte) error {
	type embed DeserializationTestResponse
	var unmarshaler = struct {
		embed
		ProcessedAt *internal.DateTime `json:"processedAt"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeserializationTestResponse(unmarshaler.embed)
	d.ProcessedAt = unmarshaler.ProcessedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeserializationTestResponse) MarshalJSON() ([]byte, error) {
	type embed DeserializationTestResponse
	var marshaler = struct {
		embed
		ProcessedAt *internal.DateTime `json:"processedAt"`
	}{
		embed:       embed(*d),
		ProcessedAt: internal.NewDateTime(d.ProcessedAt),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DeserializationTestResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	documentFieldId      = big.NewInt(1 << 0)
	documentFieldTitle   = big.NewInt(1 << 1)
	documentFieldContent = big.NewInt(1 << 2)
	documentFieldAuthor  = big.NewInt(1 << 3)
	documentFieldTags    = big.NewInt(1 << 4)
)

type Document struct {
	Id      string   `json:"id" url:"id"`
	Title   string   `json:"title" url:"title"`
	Content string   `json:"content" url:"content"`
	Author  *string  `json:"author,omitempty" url:"author,omitempty"`
	Tags    []string `json:"tags,omitempty" url:"tags,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *Document) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *Document) GetTitle() string {
	if d == nil {
		return ""
	}
	return d.Title
}

func (d *Document) GetContent() string {
	if d == nil {
		return ""
	}
	return d.Content
}

func (d *Document) GetAuthor() *string {
	if d == nil {
		return nil
	}
	return d.Author
}

func (d *Document) GetTags() []string {
	if d == nil {
		return nil
	}
	return d.Tags
}

func (d *Document) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *Document) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Document) SetId(id string) {
	d.Id = id
	d.require(documentFieldId)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Document) SetTitle(title string) {
	d.Title = title
	d.require(documentFieldTitle)
}

// SetContent sets the Content field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Document) SetContent(content string) {
	d.Content = content
	d.require(documentFieldContent)
}

// SetAuthor sets the Author field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Document) SetAuthor(author *string) {
	d.Author = author
	d.require(documentFieldAuthor)
}

// SetTags sets the Tags field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *Document) SetTags(tags []string) {
	d.Tags = tags
	d.require(documentFieldTags)
}

func (d *Document) UnmarshalJSON(data []byte) error {
	type unmarshaler Document
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = Document(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *Document) MarshalJSON() ([]byte, error) {
	type embed Document
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *Document) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	emailNotificationFieldEmailAddress = big.NewInt(1 << 0)
	emailNotificationFieldSubject      = big.NewInt(1 << 1)
	emailNotificationFieldHtmlContent  = big.NewInt(1 << 2)
)

type EmailNotification struct {
	EmailAddress string  `json:"emailAddress" url:"emailAddress"`
	Subject      string  `json:"subject" url:"subject"`
	HtmlContent  *string `json:"htmlContent,omitempty" url:"htmlContent,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EmailNotification) GetEmailAddress() string {
	if e == nil {
		return ""
	}
	return e.EmailAddress
}

func (e *EmailNotification) GetSubject() string {
	if e == nil {
		return ""
	}
	return e.Subject
}

func (e *EmailNotification) GetHtmlContent() *string {
	if e == nil {
		return nil
	}
	return e.HtmlContent
}

func (e *EmailNotification) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmailNotification) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetEmailAddress sets the EmailAddress field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailNotification) SetEmailAddress(emailAddress string) {
	e.EmailAddress = emailAddress
	e.require(emailNotificationFieldEmailAddress)
}

// SetSubject sets the Subject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailNotification) SetSubject(subject string) {
	e.Subject = subject
	e.require(emailNotificationFieldSubject)
}

// SetHtmlContent sets the HtmlContent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EmailNotification) SetHtmlContent(htmlContent *string) {
	e.HtmlContent = htmlContent
	e.require(emailNotificationFieldHtmlContent)
}

func (e *EmailNotification) UnmarshalJSON(data []byte) error {
	type unmarshaler EmailNotification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmailNotification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmailNotification) MarshalJSON() ([]byte, error) {
	type embed EmailNotification
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EmailNotification) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Discriminated union for testing nullable unions
type NotificationMethod struct {
	Type  string
	Email *EmailNotification
	Sms   *SmsNotification
	Push  *PushNotification
}

func (n *NotificationMethod) GetType() string {
	if n == nil {
		return ""
	}
	return n.Type
}

func (n *NotificationMethod) GetEmail() *EmailNotification {
	if n == nil {
		return nil
	}
	return n.Email
}

func (n *NotificationMethod) GetSms() *SmsNotification {
	if n == nil {
		return nil
	}
	return n.Sms
}

func (n *NotificationMethod) GetPush() *PushNotification {
	if n == nil {
		return nil
	}
	return n.Push
}

func (n *NotificationMethod) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", n)
	}
	switch unmarshaler.Type {
	case "email":
		value := new(EmailNotification)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Email = value
	case "sms":
		value := new(SmsNotification)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Sms = value
	case "push":
		value := new(PushNotification)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Push = value
	}
	return nil
}

func (n NotificationMethod) MarshalJSON() ([]byte, error) {
	if err := n.validate(); err != nil {
		return nil, err
	}
	if n.Email != nil {
		return internal.MarshalJSONWithExtraProperty(n.Email, "type", "email")
	}
	if n.Sms != nil {
		return internal.MarshalJSONWithExtraProperty(n.Sms, "type", "sms")
	}
	if n.Push != nil {
		return internal.MarshalJSONWithExtraProperty(n.Push, "type", "push")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NotificationMethodVisitor interface {
	VisitEmail(*EmailNotification) error
	VisitSms(*SmsNotification) error
	VisitPush(*PushNotification) error
}

func (n *NotificationMethod) Accept(visitor NotificationMethodVisitor) error {
	if n.Email != nil {
		return visitor.VisitEmail(n.Email)
	}
	if n.Sms != nil {
		return visitor.VisitSms(n.Sms)
	}
	if n.Push != nil {
		return visitor.VisitPush(n.Push)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

func (n *NotificationMethod) validate() error {
	if n == nil {
		return fmt.Errorf("type %T is nil", n)
	}
	var fields []string
	if n.Email != nil {
		fields = append(fields, "email")
	}
	if n.Sms != nil {
		fields = append(fields, "sms")
	}
	if n.Push != nil {
		fields = append(fields, "push")
	}
	if len(fields) == 0 {
		if n.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", n, n.Type)
		}
		return fmt.Errorf("type %T is empty", n)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", n, fields)
	}
	if n.Type != "" {
		field := fields[0]
		if n.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				n,
				n.Type,
				n,
			)
		}
	}
	return nil
}

// An alias for a nullable user ID
type NullableUserId = *string

// An alias for an optional user ID
type OptionalUserId = *string

var (
	organizationFieldId            = big.NewInt(1 << 0)
	organizationFieldName          = big.NewInt(1 << 1)
	organizationFieldDomain        = big.NewInt(1 << 2)
	organizationFieldEmployeeCount = big.NewInt(1 << 3)
)

type Organization struct {
	Id            string  `json:"id" url:"id"`
	Name          string  `json:"name" url:"name"`
	Domain        *string `json:"domain,omitempty" url:"domain,omitempty"`
	EmployeeCount *int    `json:"employeeCount,omitempty" url:"employeeCount,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *Organization) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *Organization) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Organization) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *Organization) GetEmployeeCount() *int {
	if o == nil {
		return nil
	}
	return o.EmployeeCount
}

func (o *Organization) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *Organization) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *Organization) SetId(id string) {
	o.Id = id
	o.require(organizationFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *Organization) SetName(name string) {
	o.Name = name
	o.require(organizationFieldName)
}

// SetDomain sets the Domain field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *Organization) SetDomain(domain *string) {
	o.Domain = domain
	o.require(organizationFieldDomain)
}

// SetEmployeeCount sets the EmployeeCount field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *Organization) SetEmployeeCount(employeeCount *int) {
	o.EmployeeCount = employeeCount
	o.require(organizationFieldEmployeeCount)
}

func (o *Organization) UnmarshalJSON(data []byte) error {
	type unmarshaler Organization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = Organization(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *Organization) MarshalJSON() ([]byte, error) {
	type embed Organization
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *Organization) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	pushNotificationFieldDeviceToken = big.NewInt(1 << 0)
	pushNotificationFieldTitle       = big.NewInt(1 << 1)
	pushNotificationFieldBody        = big.NewInt(1 << 2)
	pushNotificationFieldBadge       = big.NewInt(1 << 3)
)

type PushNotification struct {
	DeviceToken string `json:"deviceToken" url:"deviceToken"`
	Title       string `json:"title" url:"title"`
	Body        string `json:"body" url:"body"`
	Badge       *int   `json:"badge,omitempty" url:"badge,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PushNotification) GetDeviceToken() string {
	if p == nil {
		return ""
	}
	return p.DeviceToken
}

func (p *PushNotification) GetTitle() string {
	if p == nil {
		return ""
	}
	return p.Title
}

func (p *PushNotification) GetBody() string {
	if p == nil {
		return ""
	}
	return p.Body
}

func (p *PushNotification) GetBadge() *int {
	if p == nil {
		return nil
	}
	return p.Badge
}

func (p *PushNotification) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PushNotification) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetDeviceToken sets the DeviceToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PushNotification) SetDeviceToken(deviceToken string) {
	p.DeviceToken = deviceToken
	p.require(pushNotificationFieldDeviceToken)
}

// SetTitle sets the Title field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PushNotification) SetTitle(title string) {
	p.Title = title
	p.require(pushNotificationFieldTitle)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PushNotification) SetBody(body string) {
	p.Body = body
	p.require(pushNotificationFieldBody)
}

// SetBadge sets the Badge field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PushNotification) SetBadge(badge *int) {
	p.Badge = badge
	p.require(pushNotificationFieldBadge)
}

func (p *PushNotification) UnmarshalJSON(data []byte) error {
	type unmarshaler PushNotification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PushNotification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PushNotification) MarshalJSON() ([]byte, error) {
	type embed PushNotification
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PushNotification) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Undiscriminated union for testing
type SearchResult struct {
	Type         string
	User         *UserResponse
	Organization *Organization
	Document     *Document
}

func (s *SearchResult) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SearchResult) GetUser() *UserResponse {
	if s == nil {
		return nil
	}
	return s.User
}

func (s *SearchResult) GetOrganization() *Organization {
	if s == nil {
		return nil
	}
	return s.Organization
}

func (s *SearchResult) GetDocument() *Document {
	if s == nil {
		return nil
	}
	return s.Document
}

func (s *SearchResult) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", s)
	}
	switch unmarshaler.Type {
	case "user":
		value := new(UserResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.User = value
	case "organization":
		value := new(Organization)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Organization = value
	case "document":
		value := new(Document)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Document = value
	}
	return nil
}

func (s SearchResult) MarshalJSON() ([]byte, error) {
	if err := s.validate(); err != nil {
		return nil, err
	}
	if s.User != nil {
		return internal.MarshalJSONWithExtraProperty(s.User, "type", "user")
	}
	if s.Organization != nil {
		return internal.MarshalJSONWithExtraProperty(s.Organization, "type", "organization")
	}
	if s.Document != nil {
		return internal.MarshalJSONWithExtraProperty(s.Document, "type", "document")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SearchResultVisitor interface {
	VisitUser(*UserResponse) error
	VisitOrganization(*Organization) error
	VisitDocument(*Document) error
}

func (s *SearchResult) Accept(visitor SearchResultVisitor) error {
	if s.User != nil {
		return visitor.VisitUser(s.User)
	}
	if s.Organization != nil {
		return visitor.VisitOrganization(s.Organization)
	}
	if s.Document != nil {
		return visitor.VisitDocument(s.Document)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

func (s *SearchResult) validate() error {
	if s == nil {
		return fmt.Errorf("type %T is nil", s)
	}
	var fields []string
	if s.User != nil {
		fields = append(fields, "user")
	}
	if s.Organization != nil {
		fields = append(fields, "organization")
	}
	if s.Document != nil {
		fields = append(fields, "document")
	}
	if len(fields) == 0 {
		if s.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", s, s.Type)
		}
		return fmt.Errorf("type %T is empty", s)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", s, fields)
	}
	if s.Type != "" {
		field := fields[0]
		if s.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				s,
				s.Type,
				s,
			)
		}
	}
	return nil
}

var (
	smsNotificationFieldPhoneNumber = big.NewInt(1 << 0)
	smsNotificationFieldMessage     = big.NewInt(1 << 1)
	smsNotificationFieldShortCode   = big.NewInt(1 << 2)
)

type SmsNotification struct {
	PhoneNumber string  `json:"phoneNumber" url:"phoneNumber"`
	Message     string  `json:"message" url:"message"`
	ShortCode   *string `json:"shortCode,omitempty" url:"shortCode,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SmsNotification) GetPhoneNumber() string {
	if s == nil {
		return ""
	}
	return s.PhoneNumber
}

func (s *SmsNotification) GetMessage() string {
	if s == nil {
		return ""
	}
	return s.Message
}

func (s *SmsNotification) GetShortCode() *string {
	if s == nil {
		return nil
	}
	return s.ShortCode
}

func (s *SmsNotification) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SmsNotification) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetPhoneNumber sets the PhoneNumber field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SmsNotification) SetPhoneNumber(phoneNumber string) {
	s.PhoneNumber = phoneNumber
	s.require(smsNotificationFieldPhoneNumber)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SmsNotification) SetMessage(message string) {
	s.Message = message
	s.require(smsNotificationFieldMessage)
}

// SetShortCode sets the ShortCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SmsNotification) SetShortCode(shortCode *string) {
	s.ShortCode = shortCode
	s.require(smsNotificationFieldShortCode)
}

func (s *SmsNotification) UnmarshalJSON(data []byte) error {
	type unmarshaler SmsNotification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SmsNotification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SmsNotification) MarshalJSON() ([]byte, error) {
	type embed SmsNotification
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SmsNotification) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// For testing PATCH operations
var (
	updateUserRequestFieldUsername = big.NewInt(1 << 0)
	updateUserRequestFieldEmail    = big.NewInt(1 << 1)
	updateUserRequestFieldPhone    = big.NewInt(1 << 2)
	updateUserRequestFieldAddress  = big.NewInt(1 << 3)
)

type UpdateUserRequest struct {
	Username *string  `json:"username,omitempty" url:"username,omitempty"`
	Email    *string  `json:"email,omitempty" url:"email,omitempty"`
	Phone    *string  `json:"phone,omitempty" url:"phone,omitempty"`
	Address  *Address `json:"address,omitempty" url:"address,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateUserRequest) GetUsername() *string {
	if u == nil {
		return nil
	}
	return u.Username
}

func (u *UpdateUserRequest) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdateUserRequest) GetPhone() *string {
	if u == nil {
		return nil
	}
	return u.Phone
}

func (u *UpdateUserRequest) GetAddress() *Address {
	if u == nil {
		return nil
	}
	return u.Address
}

func (u *UpdateUserRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateUserRequest) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetUsername(username *string) {
	u.Username = username
	u.require(updateUserRequestFieldUsername)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetEmail(email *string) {
	u.Email = email
	u.require(updateUserRequestFieldEmail)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetPhone(phone *string) {
	u.Phone = phone
	u.require(updateUserRequestFieldPhone)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateUserRequest) SetAddress(address *Address) {
	u.Address = address
	u.require(updateUserRequestFieldAddress)
}

func (u *UpdateUserRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateUserRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateUserRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateUserRequest) MarshalJSON() ([]byte, error) {
	type embed UpdateUserRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UpdateUserRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Test object with nullable and optional fields
var (
	userProfileFieldId                     = big.NewInt(1 << 0)
	userProfileFieldUsername               = big.NewInt(1 << 1)
	userProfileFieldNullableString         = big.NewInt(1 << 2)
	userProfileFieldNullableInteger        = big.NewInt(1 << 3)
	userProfileFieldNullableBoolean        = big.NewInt(1 << 4)
	userProfileFieldNullableDate           = big.NewInt(1 << 5)
	userProfileFieldNullableObject         = big.NewInt(1 << 6)
	userProfileFieldNullableList           = big.NewInt(1 << 7)
	userProfileFieldNullableMap            = big.NewInt(1 << 8)
	userProfileFieldOptionalString         = big.NewInt(1 << 9)
	userProfileFieldOptionalInteger        = big.NewInt(1 << 10)
	userProfileFieldOptionalBoolean        = big.NewInt(1 << 11)
	userProfileFieldOptionalDate           = big.NewInt(1 << 12)
	userProfileFieldOptionalObject         = big.NewInt(1 << 13)
	userProfileFieldOptionalList           = big.NewInt(1 << 14)
	userProfileFieldOptionalMap            = big.NewInt(1 << 15)
	userProfileFieldOptionalNullableString = big.NewInt(1 << 16)
	userProfileFieldOptionalNullableObject = big.NewInt(1 << 17)
)

type UserProfile struct {
	Id                     string            `json:"id" url:"id"`
	Username               string            `json:"username" url:"username"`
	NullableString         *string           `json:"nullableString,omitempty" url:"nullableString,omitempty"`
	NullableInteger        *int              `json:"nullableInteger,omitempty" url:"nullableInteger,omitempty"`
	NullableBoolean        *bool             `json:"nullableBoolean,omitempty" url:"nullableBoolean,omitempty"`
	NullableDate           *time.Time        `json:"nullableDate,omitempty" url:"nullableDate,omitempty"`
	NullableObject         *Address          `json:"nullableObject,omitempty" url:"nullableObject,omitempty"`
	NullableList           []string          `json:"nullableList,omitempty" url:"nullableList,omitempty"`
	NullableMap            map[string]string `json:"nullableMap,omitempty" url:"nullableMap,omitempty"`
	OptionalString         *string           `json:"optionalString,omitempty" url:"optionalString,omitempty"`
	OptionalInteger        *int              `json:"optionalInteger,omitempty" url:"optionalInteger,omitempty"`
	OptionalBoolean        *bool             `json:"optionalBoolean,omitempty" url:"optionalBoolean,omitempty"`
	OptionalDate           *time.Time        `json:"optionalDate,omitempty" url:"optionalDate,omitempty"`
	OptionalObject         *Address          `json:"optionalObject,omitempty" url:"optionalObject,omitempty"`
	OptionalList           []string          `json:"optionalList,omitempty" url:"optionalList,omitempty"`
	OptionalMap            map[string]string `json:"optionalMap,omitempty" url:"optionalMap,omitempty"`
	OptionalNullableString *string           `json:"optionalNullableString,omitempty" url:"optionalNullableString,omitempty"`
	OptionalNullableObject *Address          `json:"optionalNullableObject,omitempty" url:"optionalNullableObject,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserProfile) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UserProfile) GetUsername() string {
	if u == nil {
		return ""
	}
	return u.Username
}

func (u *UserProfile) GetNullableString() *string {
	if u == nil {
		return nil
	}
	return u.NullableString
}

func (u *UserProfile) GetNullableInteger() *int {
	if u == nil {
		return nil
	}
	return u.NullableInteger
}

func (u *UserProfile) GetNullableBoolean() *bool {
	if u == nil {
		return nil
	}
	return u.NullableBoolean
}

func (u *UserProfile) GetNullableDate() *time.Time {
	if u == nil {
		return nil
	}
	return u.NullableDate
}

func (u *UserProfile) GetNullableObject() *Address {
	if u == nil {
		return nil
	}
	return u.NullableObject
}

func (u *UserProfile) GetNullableList() []string {
	if u == nil {
		return nil
	}
	return u.NullableList
}

func (u *UserProfile) GetNullableMap() map[string]string {
	if u == nil {
		return nil
	}
	return u.NullableMap
}

func (u *UserProfile) GetOptionalString() *string {
	if u == nil {
		return nil
	}
	return u.OptionalString
}

func (u *UserProfile) GetOptionalInteger() *int {
	if u == nil {
		return nil
	}
	return u.OptionalInteger
}

func (u *UserProfile) GetOptionalBoolean() *bool {
	if u == nil {
		return nil
	}
	return u.OptionalBoolean
}

func (u *UserProfile) GetOptionalDate() *time.Time {
	if u == nil {
		return nil
	}
	return u.OptionalDate
}

func (u *UserProfile) GetOptionalObject() *Address {
	if u == nil {
		return nil
	}
	return u.OptionalObject
}

func (u *UserProfile) GetOptionalList() []string {
	if u == nil {
		return nil
	}
	return u.OptionalList
}

func (u *UserProfile) GetOptionalMap() map[string]string {
	if u == nil {
		return nil
	}
	return u.OptionalMap
}

func (u *UserProfile) GetOptionalNullableString() *string {
	if u == nil {
		return nil
	}
	return u.OptionalNullableString
}

func (u *UserProfile) GetOptionalNullableObject() *Address {
	if u == nil {
		return nil
	}
	return u.OptionalNullableObject
}

func (u *UserProfile) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserProfile) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetId(id string) {
	u.Id = id
	u.require(userProfileFieldId)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetUsername(username string) {
	u.Username = username
	u.require(userProfileFieldUsername)
}

// SetNullableString sets the NullableString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNullableString(nullableString *string) {
	u.NullableString = nullableString
	u.require(userProfileFieldNullableString)
}

// SetNullableInteger sets the NullableInteger field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNullableInteger(nullableInteger *int) {
	u.NullableInteger = nullableInteger
	u.require(userProfileFieldNullableInteger)
}

// SetNullableBoolean sets the NullableBoolean field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNullableBoolean(nullableBoolean *bool) {
	u.NullableBoolean = nullableBoolean
	u.require(userProfileFieldNullableBoolean)
}

// SetNullableDate sets the NullableDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNullableDate(nullableDate *time.Time) {
	u.NullableDate = nullableDate
	u.require(userProfileFieldNullableDate)
}

// SetNullableObject sets the NullableObject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNullableObject(nullableObject *Address) {
	u.NullableObject = nullableObject
	u.require(userProfileFieldNullableObject)
}

// SetNullableList sets the NullableList field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNullableList(nullableList []string) {
	u.NullableList = nullableList
	u.require(userProfileFieldNullableList)
}

// SetNullableMap sets the NullableMap field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetNullableMap(nullableMap map[string]string) {
	u.NullableMap = nullableMap
	u.require(userProfileFieldNullableMap)
}

// SetOptionalString sets the OptionalString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalString(optionalString *string) {
	u.OptionalString = optionalString
	u.require(userProfileFieldOptionalString)
}

// SetOptionalInteger sets the OptionalInteger field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalInteger(optionalInteger *int) {
	u.OptionalInteger = optionalInteger
	u.require(userProfileFieldOptionalInteger)
}

// SetOptionalBoolean sets the OptionalBoolean field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalBoolean(optionalBoolean *bool) {
	u.OptionalBoolean = optionalBoolean
	u.require(userProfileFieldOptionalBoolean)
}

// SetOptionalDate sets the OptionalDate field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalDate(optionalDate *time.Time) {
	u.OptionalDate = optionalDate
	u.require(userProfileFieldOptionalDate)
}

// SetOptionalObject sets the OptionalObject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalObject(optionalObject *Address) {
	u.OptionalObject = optionalObject
	u.require(userProfileFieldOptionalObject)
}

// SetOptionalList sets the OptionalList field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalList(optionalList []string) {
	u.OptionalList = optionalList
	u.require(userProfileFieldOptionalList)
}

// SetOptionalMap sets the OptionalMap field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalMap(optionalMap map[string]string) {
	u.OptionalMap = optionalMap
	u.require(userProfileFieldOptionalMap)
}

// SetOptionalNullableString sets the OptionalNullableString field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalNullableString(optionalNullableString *string) {
	u.OptionalNullableString = optionalNullableString
	u.require(userProfileFieldOptionalNullableString)
}

// SetOptionalNullableObject sets the OptionalNullableObject field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserProfile) SetOptionalNullableObject(optionalNullableObject *Address) {
	u.OptionalNullableObject = optionalNullableObject
	u.require(userProfileFieldOptionalNullableObject)
}

func (u *UserProfile) UnmarshalJSON(data []byte) error {
	type embed UserProfile
	var unmarshaler = struct {
		embed
		NullableDate *internal.DateTime `json:"nullableDate,omitempty"`
		OptionalDate *internal.DateTime `json:"optionalDate,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserProfile(unmarshaler.embed)
	u.NullableDate = unmarshaler.NullableDate.TimePtr()
	u.OptionalDate = unmarshaler.OptionalDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserProfile) MarshalJSON() ([]byte, error) {
	type embed UserProfile
	var marshaler = struct {
		embed
		NullableDate *internal.DateTime `json:"nullableDate,omitempty"`
		OptionalDate *internal.DateTime `json:"optionalDate,omitempty"`
	}{
		embed:        embed(*u),
		NullableDate: internal.NewOptionalDateTime(u.NullableDate),
		OptionalDate: internal.NewOptionalDateTime(u.OptionalDate),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserProfile) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	userResponseFieldId        = big.NewInt(1 << 0)
	userResponseFieldUsername  = big.NewInt(1 << 1)
	userResponseFieldEmail     = big.NewInt(1 << 2)
	userResponseFieldPhone     = big.NewInt(1 << 3)
	userResponseFieldCreatedAt = big.NewInt(1 << 4)
	userResponseFieldUpdatedAt = big.NewInt(1 << 5)
	userResponseFieldAddress   = big.NewInt(1 << 6)
)

type UserResponse struct {
	Id        string     `json:"id" url:"id"`
	Username  string     `json:"username" url:"username"`
	Email     *string    `json:"email,omitempty" url:"email,omitempty"`
	Phone     *string    `json:"phone,omitempty" url:"phone,omitempty"`
	CreatedAt time.Time  `json:"createdAt" url:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty" url:"updatedAt,omitempty"`
	Address   *Address   `json:"address,omitempty" url:"address,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserResponse) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UserResponse) GetUsername() string {
	if u == nil {
		return ""
	}
	return u.Username
}

func (u *UserResponse) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UserResponse) GetPhone() *string {
	if u == nil {
		return nil
	}
	return u.Phone
}

func (u *UserResponse) GetCreatedAt() time.Time {
	if u == nil {
		return time.Time{}
	}
	return u.CreatedAt
}

func (u *UserResponse) GetUpdatedAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.UpdatedAt
}

func (u *UserResponse) GetAddress() *Address {
	if u == nil {
		return nil
	}
	return u.Address
}

func (u *UserResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserResponse) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserResponse) SetId(id string) {
	u.Id = id
	u.require(userResponseFieldId)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserResponse) SetUsername(username string) {
	u.Username = username
	u.require(userResponseFieldUsername)
}

// SetEmail sets the Email field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserResponse) SetEmail(email *string) {
	u.Email = email
	u.require(userResponseFieldEmail)
}

// SetPhone sets the Phone field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserResponse) SetPhone(phone *string) {
	u.Phone = phone
	u.require(userResponseFieldPhone)
}

// SetCreatedAt sets the CreatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserResponse) SetCreatedAt(createdAt time.Time) {
	u.CreatedAt = createdAt
	u.require(userResponseFieldCreatedAt)
}

// SetUpdatedAt sets the UpdatedAt field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserResponse) SetUpdatedAt(updatedAt *time.Time) {
	u.UpdatedAt = updatedAt
	u.require(userResponseFieldUpdatedAt)
}

// SetAddress sets the Address field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserResponse) SetAddress(address *Address) {
	u.Address = address
	u.require(userResponseFieldAddress)
}

func (u *UserResponse) UnmarshalJSON(data []byte) error {
	type embed UserResponse
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserResponse(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserResponse) MarshalJSON() ([]byte, error) {
	type embed UserResponse
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"createdAt"`
		UpdatedAt *internal.DateTime `json:"updatedAt,omitempty"`
	}{
		embed:     embed(*u),
		CreatedAt: internal.NewDateTime(u.CreatedAt),
		UpdatedAt: internal.NewOptionalDateTime(u.UpdatedAt),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Test enum for nullable enum fields
type UserRole string

const (
	UserRoleAdmin     UserRole = "ADMIN"
	UserRoleUser      UserRole = "USER"
	UserRoleGuest     UserRole = "GUEST"
	UserRoleModerator UserRole = "MODERATOR"
)

func NewUserRoleFromString(s string) (UserRole, error) {
	switch s {
	case "ADMIN":
		return UserRoleAdmin, nil
	case "USER":
		return UserRoleUser, nil
	case "GUEST":
		return UserRoleGuest, nil
	case "MODERATOR":
		return UserRoleModerator, nil
	}
	var t UserRole
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UserRole) Ptr() *UserRole {
	return &u
}

// Test enum with values for optional enum fields
type UserStatus string

const (
	UserStatusActive    UserStatus = "active"
	UserStatusInactive  UserStatus = "inactive"
	UserStatusSuspended UserStatus = "suspended"
	UserStatusDeleted   UserStatus = "deleted"
)

func NewUserStatusFromString(s string) (UserStatus, error) {
	switch s {
	case "active":
		return UserStatusActive, nil
	case "inactive":
		return UserStatusInactive, nil
	case "suspended":
		return UserStatusSuspended, nil
	case "deleted":
		return UserStatusDeleted, nil
	}
	var t UserStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UserStatus) Ptr() *UserStatus {
	return &u
}

var (
	updateComplexProfileRequestFieldNullableRole         = big.NewInt(1 << 0)
	updateComplexProfileRequestFieldNullableStatus       = big.NewInt(1 << 1)
	updateComplexProfileRequestFieldNullableNotification = big.NewInt(1 << 2)
	updateComplexProfileRequestFieldNullableSearchResult = big.NewInt(1 << 3)
	updateComplexProfileRequestFieldNullableArray        = big.NewInt(1 << 4)
)

type UpdateComplexProfileRequest struct {
	NullableRole         *UserRole           `json:"nullableRole,omitempty" url:"-"`
	NullableStatus       *UserStatus         `json:"nullableStatus,omitempty" url:"-"`
	NullableNotification *NotificationMethod `json:"nullableNotification,omitempty" url:"-"`
	NullableSearchResult *SearchResult       `json:"nullableSearchResult,omitempty" url:"-"`
	NullableArray        []string            `json:"nullableArray,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (u *UpdateComplexProfileRequest) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetNullableRole sets the NullableRole field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateComplexProfileRequest) SetNullableRole(nullableRole *UserRole) {
	u.NullableRole = nullableRole
	u.require(updateComplexProfileRequestFieldNullableRole)
}

// SetNullableStatus sets the NullableStatus field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateComplexProfileRequest) SetNullableStatus(nullableStatus *UserStatus) {
	u.NullableStatus = nullableStatus
	u.require(updateComplexProfileRequestFieldNullableStatus)
}

// SetNullableNotification sets the NullableNotification field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateComplexProfileRequest) SetNullableNotification(nullableNotification *NotificationMethod) {
	u.NullableNotification = nullableNotification
	u.require(updateComplexProfileRequestFieldNullableNotification)
}

// SetNullableSearchResult sets the NullableSearchResult field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateComplexProfileRequest) SetNullableSearchResult(nullableSearchResult *SearchResult) {
	u.NullableSearchResult = nullableSearchResult
	u.require(updateComplexProfileRequestFieldNullableSearchResult)
}

// SetNullableArray sets the NullableArray field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateComplexProfileRequest) SetNullableArray(nullableArray []string) {
	u.NullableArray = nullableArray
	u.require(updateComplexProfileRequestFieldNullableArray)
}

var (
	updateTagsRequestFieldTags       = big.NewInt(1 << 0)
	updateTagsRequestFieldCategories = big.NewInt(1 << 1)
	updateTagsRequestFieldLabels     = big.NewInt(1 << 2)
)

type UpdateTagsRequest struct {
	Tags       []string `json:"tags,omitempty" url:"-"`
	Categories []string `json:"categories,omitempty" url:"-"`
	Labels     []string `json:"labels,omitempty" url:"-"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (u *UpdateTagsRequest) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetTags sets the Tags field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateTagsRequest) SetTags(tags []string) {
	u.Tags = tags
	u.require(updateTagsRequestFieldTags)
}

// SetCategories sets the Categories field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateTagsRequest) SetCategories(categories []string) {
	u.Categories = categories
	u.require(updateTagsRequestFieldCategories)
}

// SetLabels sets the Labels field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UpdateTagsRequest) SetLabels(labels []string) {
	u.Labels = labels
	u.require(updateTagsRequestFieldLabels)
}
