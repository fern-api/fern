service:
  auth: false
  base-path: /
  endpoints:
    get:
      path: ""
      method: POST
      request: MyUnion
      response: MyUnion
    
    getMetadata:
      path: "/metadata"
      method: GET
      response: Metadata
      examples:
        - response:
            body:
              name: exampleName
              value: exampleValue
              default: exampleDefault

    updateMetadata:
      path: "/metadata"
      method: PUT
      request: MetadataUnion
      response: boolean

    call:
      path: "/call"
      method: POST
      request: Request
      response: boolean

types:
  Request:
    properties:
      union: optional<MetadataUnion>

  TypeWithOptionalUnion:
    properties:
      myUnion: optional<MyUnion>

  MyUnion:
    docs: |
      Several different types are accepted.
    discriminated: false
    union:
      - string
      - list<string>
      - integer
      - list<integer>
      - list<list<integer>>
      - set<string>

  MetadataUnion:
    discriminated: false
    union:
      - OptionalMetadata
      - NamedMetadata

  NamedMetadata:
    properties:
      name: string
      value: map<string, unknown>

  OptionalMetadata:
    type: optional<map<string, unknown>>

  Metadata:
    docs: |
      Undiscriminated unions can act as a map key
      as long as all of their values are valid keys
      (i.e. do they have a valid string representation).
    type: map<Key, string>
    examples:
      - value:
          name: exampleName
          value: exampleValue
          default: exampleDefault


  Key:
    discriminated: false
    union:
      - KeyType
      - literal<"default">

  KeyType:
    enum:
      - name
      - value