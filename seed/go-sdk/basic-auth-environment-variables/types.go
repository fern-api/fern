// Code generated by Fern. DO NOT EDIT.

package basicauthenvironmentvariables

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/basic-auth-environment-variables/fern/internal"
	big "math/big"
)

var (
	unauthorizedRequestErrorBodyFieldMessage = big.NewInt(1 << 0)
)

type UnauthorizedRequestErrorBody struct {
	Message string `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UnauthorizedRequestErrorBody) GetMessage() string {
	if u == nil {
		return ""
	}
	return u.Message
}

func (u *UnauthorizedRequestErrorBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnauthorizedRequestErrorBody) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UnauthorizedRequestErrorBody) SetMessage(message string) {
	u.Message = message
	u.require(unauthorizedRequestErrorBodyFieldMessage)
}

func (u *UnauthorizedRequestErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UnauthorizedRequestErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnauthorizedRequestErrorBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnauthorizedRequestErrorBody) MarshalJSON() ([]byte, error) {
	type embed UnauthorizedRequestErrorBody
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UnauthorizedRequestErrorBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
