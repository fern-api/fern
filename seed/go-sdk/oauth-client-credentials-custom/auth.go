// Code generated by Fern. DO NOT EDIT.

package oauthclientcredentials

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/oauth-client-credentials-custom/fern/internal"
	big "math/big"
)

var (
	getTokenRequestFieldCid      = big.NewInt(1 << 0)
	getTokenRequestFieldCsr      = big.NewInt(1 << 1)
	getTokenRequestFieldScp      = big.NewInt(1 << 2)
	getTokenRequestFieldEntityId = big.NewInt(1 << 3)
	getTokenRequestFieldScope    = big.NewInt(1 << 4)
)

type GetTokenRequest struct {
	Cid       string  `json:"cid" url:"-"`
	Csr       string  `json:"csr" url:"-"`
	Scp       string  `json:"scp" url:"-"`
	EntityId  string  `json:"entity_id" url:"-"`
	Scope     *string `json:"scope,omitempty" url:"-"`
	audience  string
	grantType string

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (g *GetTokenRequest) Audience() string {
	return g.audience
}

func (g *GetTokenRequest) GrantType() string {
	return g.grantType
}

func (g *GetTokenRequest) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetCid sets the Cid field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTokenRequest) SetCid(cid string) {
	g.Cid = cid
	g.require(getTokenRequestFieldCid)
}

// SetCsr sets the Csr field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTokenRequest) SetCsr(csr string) {
	g.Csr = csr
	g.require(getTokenRequestFieldCsr)
}

// SetScp sets the Scp field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTokenRequest) SetScp(scp string) {
	g.Scp = scp
	g.require(getTokenRequestFieldScp)
}

// SetEntityId sets the EntityId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTokenRequest) SetEntityId(entityId string) {
	g.EntityId = entityId
	g.require(getTokenRequestFieldEntityId)
}

// SetScope sets the Scope field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GetTokenRequest) SetScope(scope *string) {
	g.Scope = scope
	g.require(getTokenRequestFieldScope)
}

func (g *GetTokenRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTokenRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*g = GetTokenRequest(body)
	g.audience = "https://api.example.com"
	g.grantType = "client_credentials"
	return nil
}

func (g *GetTokenRequest) MarshalJSON() ([]byte, error) {
	type embed GetTokenRequest
	var marshaler = struct {
		embed
		Audience  string `json:"audience"`
		GrantType string `json:"grant_type"`
	}{
		embed:     embed(*g),
		Audience:  "https://api.example.com",
		GrantType: "client_credentials",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

var (
	refreshTokenRequestFieldClientId     = big.NewInt(1 << 0)
	refreshTokenRequestFieldClientSecret = big.NewInt(1 << 1)
	refreshTokenRequestFieldRefreshToken = big.NewInt(1 << 2)
	refreshTokenRequestFieldScope        = big.NewInt(1 << 3)
)

type RefreshTokenRequest struct {
	ClientId     string  `json:"client_id" url:"-"`
	ClientSecret string  `json:"client_secret" url:"-"`
	RefreshToken string  `json:"refresh_token" url:"-"`
	Scope        *string `json:"scope,omitempty" url:"-"`
	audience     string
	grantType    string

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`
}

func (r *RefreshTokenRequest) Audience() string {
	return r.audience
}

func (r *RefreshTokenRequest) GrantType() string {
	return r.grantType
}

func (r *RefreshTokenRequest) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetClientId sets the ClientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RefreshTokenRequest) SetClientId(clientId string) {
	r.ClientId = clientId
	r.require(refreshTokenRequestFieldClientId)
}

// SetClientSecret sets the ClientSecret field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RefreshTokenRequest) SetClientSecret(clientSecret string) {
	r.ClientSecret = clientSecret
	r.require(refreshTokenRequestFieldClientSecret)
}

// SetRefreshToken sets the RefreshToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RefreshTokenRequest) SetRefreshToken(refreshToken string) {
	r.RefreshToken = refreshToken
	r.require(refreshTokenRequestFieldRefreshToken)
}

// SetScope sets the Scope field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RefreshTokenRequest) SetScope(scope *string) {
	r.Scope = scope
	r.require(refreshTokenRequestFieldScope)
}

func (r *RefreshTokenRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RefreshTokenRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*r = RefreshTokenRequest(body)
	r.audience = "https://api.example.com"
	r.grantType = "refresh_token"
	return nil
}

func (r *RefreshTokenRequest) MarshalJSON() ([]byte, error) {
	type embed RefreshTokenRequest
	var marshaler = struct {
		embed
		Audience  string `json:"audience"`
		GrantType string `json:"grant_type"`
	}{
		embed:     embed(*r),
		Audience:  "https://api.example.com",
		GrantType: "refresh_token",
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

// An OAuth token response.
var (
	tokenResponseFieldAccessToken  = big.NewInt(1 << 0)
	tokenResponseFieldExpiresIn    = big.NewInt(1 << 1)
	tokenResponseFieldRefreshToken = big.NewInt(1 << 2)
)

type TokenResponse struct {
	AccessToken  string  `json:"access_token" url:"access_token"`
	ExpiresIn    int     `json:"expires_in" url:"expires_in"`
	RefreshToken *string `json:"refresh_token,omitempty" url:"refresh_token,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TokenResponse) GetAccessToken() string {
	if t == nil {
		return ""
	}
	return t.AccessToken
}

func (t *TokenResponse) GetExpiresIn() int {
	if t == nil {
		return 0
	}
	return t.ExpiresIn
}

func (t *TokenResponse) GetRefreshToken() *string {
	if t == nil {
		return nil
	}
	return t.RefreshToken
}

func (t *TokenResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TokenResponse) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetAccessToken sets the AccessToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TokenResponse) SetAccessToken(accessToken string) {
	t.AccessToken = accessToken
	t.require(tokenResponseFieldAccessToken)
}

// SetExpiresIn sets the ExpiresIn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TokenResponse) SetExpiresIn(expiresIn int) {
	t.ExpiresIn = expiresIn
	t.require(tokenResponseFieldExpiresIn)
}

// SetRefreshToken sets the RefreshToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TokenResponse) SetRefreshToken(refreshToken *string) {
	t.RefreshToken = refreshToken
	t.require(tokenResponseFieldRefreshToken)
}

func (t *TokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TokenResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TokenResponse) MarshalJSON() ([]byte, error) {
	type embed TokenResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TokenResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
