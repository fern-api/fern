// Code generated by Fern. DO NOT EDIT.

package unions

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/unions/fern/internal"
	big "math/big"
	time "time"
)

var (
	activeDiamondFieldValue = big.NewInt(1 << 0)
)

type ActiveDiamond struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ActiveDiamond) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

func (a *ActiveDiamond) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ActiveDiamond) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ActiveDiamond) SetValue(value string) {
	a.Value = value
	a.require(activeDiamondFieldValue)
}

func (a *ActiveDiamond) UnmarshalJSON(data []byte) error {
	type unmarshaler ActiveDiamond
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActiveDiamond(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActiveDiamond) MarshalJSON() ([]byte, error) {
	type embed ActiveDiamond
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *ActiveDiamond) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	attractiveScriptFieldValue = big.NewInt(1 << 0)
)

type AttractiveScript struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttractiveScript) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

func (a *AttractiveScript) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttractiveScript) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AttractiveScript) SetValue(value string) {
	a.Value = value
	a.require(attractiveScriptFieldValue)
}

func (a *AttractiveScript) UnmarshalJSON(data []byte) error {
	type unmarshaler AttractiveScript
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttractiveScript(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttractiveScript) MarshalJSON() ([]byte, error) {
	type embed AttractiveScript
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AttractiveScript) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BigUnion struct {
	Type               string
	Id                 string
	CreatedAt          time.Time
	ArchivedAt         *time.Time
	NormalSweet        *NormalSweet
	ThankfulFactor     *ThankfulFactor
	JumboEnd           *JumboEnd
	HastyPain          *HastyPain
	MistySnow          *MistySnow
	DistinctFailure    *DistinctFailure
	PracticalPrinciple *PracticalPrinciple
	LimpingStep        *LimpingStep
	VibrantExcitement  *VibrantExcitement
	ActiveDiamond      *ActiveDiamond
	PopularLimit       *PopularLimit
	FalseMirror        *FalseMirror
	PrimaryBlock       *PrimaryBlock
	RotatingRatio      *RotatingRatio
	ColorfulCover      *ColorfulCover
	DisloyalValue      *DisloyalValue
	GruesomeCoach      *GruesomeCoach
	TotalWork          *TotalWork
	HarmoniousPlay     *HarmoniousPlay
	UniqueStress       *UniqueStress
	UnwillingSmoke     *UnwillingSmoke
	FrozenSleep        *FrozenSleep
	DiligentDeal       *DiligentDeal
	AttractiveScript   *AttractiveScript
	HoarseMouse        *HoarseMouse
	CircularCard       *CircularCard
	PotableBad         *PotableBad
	TriangularRepair   *TriangularRepair
	GaseousRoad        *GaseousRoad
}

func NewBigUnionFromNormalSweet(value *NormalSweet) *BigUnion {
	return &BigUnion{Type: "normalSweet", NormalSweet: value}
}

func NewBigUnionFromThankfulFactor(value *ThankfulFactor) *BigUnion {
	return &BigUnion{Type: "thankfulFactor", ThankfulFactor: value}
}

func NewBigUnionFromJumboEnd(value *JumboEnd) *BigUnion {
	return &BigUnion{Type: "jumboEnd", JumboEnd: value}
}

func NewBigUnionFromHastyPain(value *HastyPain) *BigUnion {
	return &BigUnion{Type: "hastyPain", HastyPain: value}
}

func NewBigUnionFromMistySnow(value *MistySnow) *BigUnion {
	return &BigUnion{Type: "mistySnow", MistySnow: value}
}

func NewBigUnionFromDistinctFailure(value *DistinctFailure) *BigUnion {
	return &BigUnion{Type: "distinctFailure", DistinctFailure: value}
}

func NewBigUnionFromPracticalPrinciple(value *PracticalPrinciple) *BigUnion {
	return &BigUnion{Type: "practicalPrinciple", PracticalPrinciple: value}
}

func NewBigUnionFromLimpingStep(value *LimpingStep) *BigUnion {
	return &BigUnion{Type: "limpingStep", LimpingStep: value}
}

func NewBigUnionFromVibrantExcitement(value *VibrantExcitement) *BigUnion {
	return &BigUnion{Type: "vibrantExcitement", VibrantExcitement: value}
}

func NewBigUnionFromActiveDiamond(value *ActiveDiamond) *BigUnion {
	return &BigUnion{Type: "activeDiamond", ActiveDiamond: value}
}

func NewBigUnionFromPopularLimit(value *PopularLimit) *BigUnion {
	return &BigUnion{Type: "popularLimit", PopularLimit: value}
}

func NewBigUnionFromFalseMirror(value *FalseMirror) *BigUnion {
	return &BigUnion{Type: "falseMirror", FalseMirror: value}
}

func NewBigUnionFromPrimaryBlock(value *PrimaryBlock) *BigUnion {
	return &BigUnion{Type: "primaryBlock", PrimaryBlock: value}
}

func NewBigUnionFromRotatingRatio(value *RotatingRatio) *BigUnion {
	return &BigUnion{Type: "rotatingRatio", RotatingRatio: value}
}

func NewBigUnionFromColorfulCover(value *ColorfulCover) *BigUnion {
	return &BigUnion{Type: "colorfulCover", ColorfulCover: value}
}

func NewBigUnionFromDisloyalValue(value *DisloyalValue) *BigUnion {
	return &BigUnion{Type: "disloyalValue", DisloyalValue: value}
}

func NewBigUnionFromGruesomeCoach(value *GruesomeCoach) *BigUnion {
	return &BigUnion{Type: "gruesomeCoach", GruesomeCoach: value}
}

func NewBigUnionFromTotalWork(value *TotalWork) *BigUnion {
	return &BigUnion{Type: "totalWork", TotalWork: value}
}

func NewBigUnionFromHarmoniousPlay(value *HarmoniousPlay) *BigUnion {
	return &BigUnion{Type: "harmoniousPlay", HarmoniousPlay: value}
}

func NewBigUnionFromUniqueStress(value *UniqueStress) *BigUnion {
	return &BigUnion{Type: "uniqueStress", UniqueStress: value}
}

func NewBigUnionFromUnwillingSmoke(value *UnwillingSmoke) *BigUnion {
	return &BigUnion{Type: "unwillingSmoke", UnwillingSmoke: value}
}

func NewBigUnionFromFrozenSleep(value *FrozenSleep) *BigUnion {
	return &BigUnion{Type: "frozenSleep", FrozenSleep: value}
}

func NewBigUnionFromDiligentDeal(value *DiligentDeal) *BigUnion {
	return &BigUnion{Type: "diligentDeal", DiligentDeal: value}
}

func NewBigUnionFromAttractiveScript(value *AttractiveScript) *BigUnion {
	return &BigUnion{Type: "attractiveScript", AttractiveScript: value}
}

func NewBigUnionFromHoarseMouse(value *HoarseMouse) *BigUnion {
	return &BigUnion{Type: "hoarseMouse", HoarseMouse: value}
}

func NewBigUnionFromCircularCard(value *CircularCard) *BigUnion {
	return &BigUnion{Type: "circularCard", CircularCard: value}
}

func NewBigUnionFromPotableBad(value *PotableBad) *BigUnion {
	return &BigUnion{Type: "potableBad", PotableBad: value}
}

func NewBigUnionFromTriangularRepair(value *TriangularRepair) *BigUnion {
	return &BigUnion{Type: "triangularRepair", TriangularRepair: value}
}

func NewBigUnionFromGaseousRoad(value *GaseousRoad) *BigUnion {
	return &BigUnion{Type: "gaseousRoad", GaseousRoad: value}
}

func (b *BigUnion) GetType() string {
	if b == nil {
		return ""
	}
	return b.Type
}

func (b *BigUnion) GetId() string {
	if b == nil {
		return ""
	}
	return b.Id
}

func (b *BigUnion) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BigUnion) GetArchivedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.ArchivedAt
}

func (b *BigUnion) GetNormalSweet() *NormalSweet {
	if b == nil {
		return nil
	}
	return b.NormalSweet
}

func (b *BigUnion) GetThankfulFactor() *ThankfulFactor {
	if b == nil {
		return nil
	}
	return b.ThankfulFactor
}

func (b *BigUnion) GetJumboEnd() *JumboEnd {
	if b == nil {
		return nil
	}
	return b.JumboEnd
}

func (b *BigUnion) GetHastyPain() *HastyPain {
	if b == nil {
		return nil
	}
	return b.HastyPain
}

func (b *BigUnion) GetMistySnow() *MistySnow {
	if b == nil {
		return nil
	}
	return b.MistySnow
}

func (b *BigUnion) GetDistinctFailure() *DistinctFailure {
	if b == nil {
		return nil
	}
	return b.DistinctFailure
}

func (b *BigUnion) GetPracticalPrinciple() *PracticalPrinciple {
	if b == nil {
		return nil
	}
	return b.PracticalPrinciple
}

func (b *BigUnion) GetLimpingStep() *LimpingStep {
	if b == nil {
		return nil
	}
	return b.LimpingStep
}

func (b *BigUnion) GetVibrantExcitement() *VibrantExcitement {
	if b == nil {
		return nil
	}
	return b.VibrantExcitement
}

func (b *BigUnion) GetActiveDiamond() *ActiveDiamond {
	if b == nil {
		return nil
	}
	return b.ActiveDiamond
}

func (b *BigUnion) GetPopularLimit() *PopularLimit {
	if b == nil {
		return nil
	}
	return b.PopularLimit
}

func (b *BigUnion) GetFalseMirror() *FalseMirror {
	if b == nil {
		return nil
	}
	return b.FalseMirror
}

func (b *BigUnion) GetPrimaryBlock() *PrimaryBlock {
	if b == nil {
		return nil
	}
	return b.PrimaryBlock
}

func (b *BigUnion) GetRotatingRatio() *RotatingRatio {
	if b == nil {
		return nil
	}
	return b.RotatingRatio
}

func (b *BigUnion) GetColorfulCover() *ColorfulCover {
	if b == nil {
		return nil
	}
	return b.ColorfulCover
}

func (b *BigUnion) GetDisloyalValue() *DisloyalValue {
	if b == nil {
		return nil
	}
	return b.DisloyalValue
}

func (b *BigUnion) GetGruesomeCoach() *GruesomeCoach {
	if b == nil {
		return nil
	}
	return b.GruesomeCoach
}

func (b *BigUnion) GetTotalWork() *TotalWork {
	if b == nil {
		return nil
	}
	return b.TotalWork
}

func (b *BigUnion) GetHarmoniousPlay() *HarmoniousPlay {
	if b == nil {
		return nil
	}
	return b.HarmoniousPlay
}

func (b *BigUnion) GetUniqueStress() *UniqueStress {
	if b == nil {
		return nil
	}
	return b.UniqueStress
}

func (b *BigUnion) GetUnwillingSmoke() *UnwillingSmoke {
	if b == nil {
		return nil
	}
	return b.UnwillingSmoke
}

func (b *BigUnion) GetFrozenSleep() *FrozenSleep {
	if b == nil {
		return nil
	}
	return b.FrozenSleep
}

func (b *BigUnion) GetDiligentDeal() *DiligentDeal {
	if b == nil {
		return nil
	}
	return b.DiligentDeal
}

func (b *BigUnion) GetAttractiveScript() *AttractiveScript {
	if b == nil {
		return nil
	}
	return b.AttractiveScript
}

func (b *BigUnion) GetHoarseMouse() *HoarseMouse {
	if b == nil {
		return nil
	}
	return b.HoarseMouse
}

func (b *BigUnion) GetCircularCard() *CircularCard {
	if b == nil {
		return nil
	}
	return b.CircularCard
}

func (b *BigUnion) GetPotableBad() *PotableBad {
	if b == nil {
		return nil
	}
	return b.PotableBad
}

func (b *BigUnion) GetTriangularRepair() *TriangularRepair {
	if b == nil {
		return nil
	}
	return b.TriangularRepair
}

func (b *BigUnion) GetGaseousRoad() *GaseousRoad {
	if b == nil {
		return nil
	}
	return b.GaseousRoad
}

func (b *BigUnion) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type       string     `json:"type"`
		Id         string     `json:"id"`
		CreatedAt  time.Time  `json:"created-at"`
		ArchivedAt *time.Time `json:"archived-at,omitempty"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	b.Type = unmarshaler.Type
	b.Id = unmarshaler.Id
	b.CreatedAt = unmarshaler.CreatedAt
	b.ArchivedAt = unmarshaler.ArchivedAt
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", b)
	}
	switch unmarshaler.Type {
	case "normalSweet":
		value := new(NormalSweet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.NormalSweet = value
	case "thankfulFactor":
		value := new(ThankfulFactor)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.ThankfulFactor = value
	case "jumboEnd":
		value := new(JumboEnd)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.JumboEnd = value
	case "hastyPain":
		value := new(HastyPain)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.HastyPain = value
	case "mistySnow":
		value := new(MistySnow)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.MistySnow = value
	case "distinctFailure":
		value := new(DistinctFailure)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.DistinctFailure = value
	case "practicalPrinciple":
		value := new(PracticalPrinciple)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.PracticalPrinciple = value
	case "limpingStep":
		value := new(LimpingStep)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.LimpingStep = value
	case "vibrantExcitement":
		value := new(VibrantExcitement)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.VibrantExcitement = value
	case "activeDiamond":
		value := new(ActiveDiamond)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.ActiveDiamond = value
	case "popularLimit":
		value := new(PopularLimit)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.PopularLimit = value
	case "falseMirror":
		value := new(FalseMirror)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.FalseMirror = value
	case "primaryBlock":
		value := new(PrimaryBlock)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.PrimaryBlock = value
	case "rotatingRatio":
		value := new(RotatingRatio)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.RotatingRatio = value
	case "colorfulCover":
		value := new(ColorfulCover)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.ColorfulCover = value
	case "disloyalValue":
		value := new(DisloyalValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.DisloyalValue = value
	case "gruesomeCoach":
		value := new(GruesomeCoach)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.GruesomeCoach = value
	case "totalWork":
		value := new(TotalWork)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.TotalWork = value
	case "harmoniousPlay":
		value := new(HarmoniousPlay)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.HarmoniousPlay = value
	case "uniqueStress":
		value := new(UniqueStress)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.UniqueStress = value
	case "unwillingSmoke":
		value := new(UnwillingSmoke)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.UnwillingSmoke = value
	case "frozenSleep":
		value := new(FrozenSleep)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.FrozenSleep = value
	case "diligentDeal":
		value := new(DiligentDeal)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.DiligentDeal = value
	case "attractiveScript":
		value := new(AttractiveScript)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.AttractiveScript = value
	case "hoarseMouse":
		value := new(HoarseMouse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.HoarseMouse = value
	case "circularCard":
		value := new(CircularCard)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.CircularCard = value
	case "potableBad":
		value := new(PotableBad)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.PotableBad = value
	case "triangularRepair":
		value := new(TriangularRepair)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.TriangularRepair = value
	case "gaseousRoad":
		value := new(GaseousRoad)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		b.GaseousRoad = value
	}
	return nil
}

func (b BigUnion) MarshalJSON() ([]byte, error) {
	if err := b.validate(); err != nil {
		return nil, err
	}
	switch b.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", b.Type, b)
	case "normalSweet":
		return internal.MarshalJSONWithExtraProperty(b.NormalSweet, "type", "normalSweet")
	case "thankfulFactor":
		return internal.MarshalJSONWithExtraProperty(b.ThankfulFactor, "type", "thankfulFactor")
	case "jumboEnd":
		return internal.MarshalJSONWithExtraProperty(b.JumboEnd, "type", "jumboEnd")
	case "hastyPain":
		return internal.MarshalJSONWithExtraProperty(b.HastyPain, "type", "hastyPain")
	case "mistySnow":
		return internal.MarshalJSONWithExtraProperty(b.MistySnow, "type", "mistySnow")
	case "distinctFailure":
		return internal.MarshalJSONWithExtraProperty(b.DistinctFailure, "type", "distinctFailure")
	case "practicalPrinciple":
		return internal.MarshalJSONWithExtraProperty(b.PracticalPrinciple, "type", "practicalPrinciple")
	case "limpingStep":
		return internal.MarshalJSONWithExtraProperty(b.LimpingStep, "type", "limpingStep")
	case "vibrantExcitement":
		return internal.MarshalJSONWithExtraProperty(b.VibrantExcitement, "type", "vibrantExcitement")
	case "activeDiamond":
		return internal.MarshalJSONWithExtraProperty(b.ActiveDiamond, "type", "activeDiamond")
	case "popularLimit":
		return internal.MarshalJSONWithExtraProperty(b.PopularLimit, "type", "popularLimit")
	case "falseMirror":
		return internal.MarshalJSONWithExtraProperty(b.FalseMirror, "type", "falseMirror")
	case "primaryBlock":
		return internal.MarshalJSONWithExtraProperty(b.PrimaryBlock, "type", "primaryBlock")
	case "rotatingRatio":
		return internal.MarshalJSONWithExtraProperty(b.RotatingRatio, "type", "rotatingRatio")
	case "colorfulCover":
		return internal.MarshalJSONWithExtraProperty(b.ColorfulCover, "type", "colorfulCover")
	case "disloyalValue":
		return internal.MarshalJSONWithExtraProperty(b.DisloyalValue, "type", "disloyalValue")
	case "gruesomeCoach":
		return internal.MarshalJSONWithExtraProperty(b.GruesomeCoach, "type", "gruesomeCoach")
	case "totalWork":
		return internal.MarshalJSONWithExtraProperty(b.TotalWork, "type", "totalWork")
	case "harmoniousPlay":
		return internal.MarshalJSONWithExtraProperty(b.HarmoniousPlay, "type", "harmoniousPlay")
	case "uniqueStress":
		return internal.MarshalJSONWithExtraProperty(b.UniqueStress, "type", "uniqueStress")
	case "unwillingSmoke":
		return internal.MarshalJSONWithExtraProperty(b.UnwillingSmoke, "type", "unwillingSmoke")
	case "frozenSleep":
		return internal.MarshalJSONWithExtraProperty(b.FrozenSleep, "type", "frozenSleep")
	case "diligentDeal":
		return internal.MarshalJSONWithExtraProperty(b.DiligentDeal, "type", "diligentDeal")
	case "attractiveScript":
		return internal.MarshalJSONWithExtraProperty(b.AttractiveScript, "type", "attractiveScript")
	case "hoarseMouse":
		return internal.MarshalJSONWithExtraProperty(b.HoarseMouse, "type", "hoarseMouse")
	case "circularCard":
		return internal.MarshalJSONWithExtraProperty(b.CircularCard, "type", "circularCard")
	case "potableBad":
		return internal.MarshalJSONWithExtraProperty(b.PotableBad, "type", "potableBad")
	case "triangularRepair":
		return internal.MarshalJSONWithExtraProperty(b.TriangularRepair, "type", "triangularRepair")
	case "gaseousRoad":
		return internal.MarshalJSONWithExtraProperty(b.GaseousRoad, "type", "gaseousRoad")
	}
}

type BigUnionVisitor interface {
	VisitNormalSweet(*NormalSweet) error
	VisitThankfulFactor(*ThankfulFactor) error
	VisitJumboEnd(*JumboEnd) error
	VisitHastyPain(*HastyPain) error
	VisitMistySnow(*MistySnow) error
	VisitDistinctFailure(*DistinctFailure) error
	VisitPracticalPrinciple(*PracticalPrinciple) error
	VisitLimpingStep(*LimpingStep) error
	VisitVibrantExcitement(*VibrantExcitement) error
	VisitActiveDiamond(*ActiveDiamond) error
	VisitPopularLimit(*PopularLimit) error
	VisitFalseMirror(*FalseMirror) error
	VisitPrimaryBlock(*PrimaryBlock) error
	VisitRotatingRatio(*RotatingRatio) error
	VisitColorfulCover(*ColorfulCover) error
	VisitDisloyalValue(*DisloyalValue) error
	VisitGruesomeCoach(*GruesomeCoach) error
	VisitTotalWork(*TotalWork) error
	VisitHarmoniousPlay(*HarmoniousPlay) error
	VisitUniqueStress(*UniqueStress) error
	VisitUnwillingSmoke(*UnwillingSmoke) error
	VisitFrozenSleep(*FrozenSleep) error
	VisitDiligentDeal(*DiligentDeal) error
	VisitAttractiveScript(*AttractiveScript) error
	VisitHoarseMouse(*HoarseMouse) error
	VisitCircularCard(*CircularCard) error
	VisitPotableBad(*PotableBad) error
	VisitTriangularRepair(*TriangularRepair) error
	VisitGaseousRoad(*GaseousRoad) error
}

func (b *BigUnion) Accept(visitor BigUnionVisitor) error {
	switch b.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", b.Type, b)
	case "normalSweet":
		return visitor.VisitNormalSweet(b.NormalSweet)
	case "thankfulFactor":
		return visitor.VisitThankfulFactor(b.ThankfulFactor)
	case "jumboEnd":
		return visitor.VisitJumboEnd(b.JumboEnd)
	case "hastyPain":
		return visitor.VisitHastyPain(b.HastyPain)
	case "mistySnow":
		return visitor.VisitMistySnow(b.MistySnow)
	case "distinctFailure":
		return visitor.VisitDistinctFailure(b.DistinctFailure)
	case "practicalPrinciple":
		return visitor.VisitPracticalPrinciple(b.PracticalPrinciple)
	case "limpingStep":
		return visitor.VisitLimpingStep(b.LimpingStep)
	case "vibrantExcitement":
		return visitor.VisitVibrantExcitement(b.VibrantExcitement)
	case "activeDiamond":
		return visitor.VisitActiveDiamond(b.ActiveDiamond)
	case "popularLimit":
		return visitor.VisitPopularLimit(b.PopularLimit)
	case "falseMirror":
		return visitor.VisitFalseMirror(b.FalseMirror)
	case "primaryBlock":
		return visitor.VisitPrimaryBlock(b.PrimaryBlock)
	case "rotatingRatio":
		return visitor.VisitRotatingRatio(b.RotatingRatio)
	case "colorfulCover":
		return visitor.VisitColorfulCover(b.ColorfulCover)
	case "disloyalValue":
		return visitor.VisitDisloyalValue(b.DisloyalValue)
	case "gruesomeCoach":
		return visitor.VisitGruesomeCoach(b.GruesomeCoach)
	case "totalWork":
		return visitor.VisitTotalWork(b.TotalWork)
	case "harmoniousPlay":
		return visitor.VisitHarmoniousPlay(b.HarmoniousPlay)
	case "uniqueStress":
		return visitor.VisitUniqueStress(b.UniqueStress)
	case "unwillingSmoke":
		return visitor.VisitUnwillingSmoke(b.UnwillingSmoke)
	case "frozenSleep":
		return visitor.VisitFrozenSleep(b.FrozenSleep)
	case "diligentDeal":
		return visitor.VisitDiligentDeal(b.DiligentDeal)
	case "attractiveScript":
		return visitor.VisitAttractiveScript(b.AttractiveScript)
	case "hoarseMouse":
		return visitor.VisitHoarseMouse(b.HoarseMouse)
	case "circularCard":
		return visitor.VisitCircularCard(b.CircularCard)
	case "potableBad":
		return visitor.VisitPotableBad(b.PotableBad)
	case "triangularRepair":
		return visitor.VisitTriangularRepair(b.TriangularRepair)
	case "gaseousRoad":
		return visitor.VisitGaseousRoad(b.GaseousRoad)
	}
}

func (b *BigUnion) validate() error {
	if b == nil {
		return fmt.Errorf("type %T is nil", b)
	}
	var fields []string
	if b.NormalSweet != nil {
		fields = append(fields, "normalSweet")
	}
	if b.ThankfulFactor != nil {
		fields = append(fields, "thankfulFactor")
	}
	if b.JumboEnd != nil {
		fields = append(fields, "jumboEnd")
	}
	if b.HastyPain != nil {
		fields = append(fields, "hastyPain")
	}
	if b.MistySnow != nil {
		fields = append(fields, "mistySnow")
	}
	if b.DistinctFailure != nil {
		fields = append(fields, "distinctFailure")
	}
	if b.PracticalPrinciple != nil {
		fields = append(fields, "practicalPrinciple")
	}
	if b.LimpingStep != nil {
		fields = append(fields, "limpingStep")
	}
	if b.VibrantExcitement != nil {
		fields = append(fields, "vibrantExcitement")
	}
	if b.ActiveDiamond != nil {
		fields = append(fields, "activeDiamond")
	}
	if b.PopularLimit != nil {
		fields = append(fields, "popularLimit")
	}
	if b.FalseMirror != nil {
		fields = append(fields, "falseMirror")
	}
	if b.PrimaryBlock != nil {
		fields = append(fields, "primaryBlock")
	}
	if b.RotatingRatio != nil {
		fields = append(fields, "rotatingRatio")
	}
	if b.ColorfulCover != nil {
		fields = append(fields, "colorfulCover")
	}
	if b.DisloyalValue != nil {
		fields = append(fields, "disloyalValue")
	}
	if b.GruesomeCoach != nil {
		fields = append(fields, "gruesomeCoach")
	}
	if b.TotalWork != nil {
		fields = append(fields, "totalWork")
	}
	if b.HarmoniousPlay != nil {
		fields = append(fields, "harmoniousPlay")
	}
	if b.UniqueStress != nil {
		fields = append(fields, "uniqueStress")
	}
	if b.UnwillingSmoke != nil {
		fields = append(fields, "unwillingSmoke")
	}
	if b.FrozenSleep != nil {
		fields = append(fields, "frozenSleep")
	}
	if b.DiligentDeal != nil {
		fields = append(fields, "diligentDeal")
	}
	if b.AttractiveScript != nil {
		fields = append(fields, "attractiveScript")
	}
	if b.HoarseMouse != nil {
		fields = append(fields, "hoarseMouse")
	}
	if b.CircularCard != nil {
		fields = append(fields, "circularCard")
	}
	if b.PotableBad != nil {
		fields = append(fields, "potableBad")
	}
	if b.TriangularRepair != nil {
		fields = append(fields, "triangularRepair")
	}
	if b.GaseousRoad != nil {
		fields = append(fields, "gaseousRoad")
	}
	if len(fields) == 0 {
		if b.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", b, b.Type)
		}
		return fmt.Errorf("type %T is empty", b)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", b, fields)
	}
	if b.Type != "" {
		field := fields[0]
		if b.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				b,
				b.Type,
				b,
			)
		}
	}
	return nil
}

var (
	circularCardFieldValue = big.NewInt(1 << 0)
)

type CircularCard struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CircularCard) GetValue() string {
	if c == nil {
		return ""
	}
	return c.Value
}

func (c *CircularCard) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CircularCard) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CircularCard) SetValue(value string) {
	c.Value = value
	c.require(circularCardFieldValue)
}

func (c *CircularCard) UnmarshalJSON(data []byte) error {
	type unmarshaler CircularCard
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CircularCard(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CircularCard) MarshalJSON() ([]byte, error) {
	type embed CircularCard
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CircularCard) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	colorfulCoverFieldValue = big.NewInt(1 << 0)
)

type ColorfulCover struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ColorfulCover) GetValue() string {
	if c == nil {
		return ""
	}
	return c.Value
}

func (c *ColorfulCover) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ColorfulCover) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *ColorfulCover) SetValue(value string) {
	c.Value = value
	c.require(colorfulCoverFieldValue)
}

func (c *ColorfulCover) UnmarshalJSON(data []byte) error {
	type unmarshaler ColorfulCover
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ColorfulCover(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ColorfulCover) MarshalJSON() ([]byte, error) {
	type embed ColorfulCover
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *ColorfulCover) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	diligentDealFieldValue = big.NewInt(1 << 0)
)

type DiligentDeal struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DiligentDeal) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

func (d *DiligentDeal) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DiligentDeal) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DiligentDeal) SetValue(value string) {
	d.Value = value
	d.require(diligentDealFieldValue)
}

func (d *DiligentDeal) UnmarshalJSON(data []byte) error {
	type unmarshaler DiligentDeal
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DiligentDeal(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DiligentDeal) MarshalJSON() ([]byte, error) {
	type embed DiligentDeal
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DiligentDeal) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	disloyalValueFieldValue = big.NewInt(1 << 0)
)

type DisloyalValue struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DisloyalValue) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

func (d *DisloyalValue) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DisloyalValue) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DisloyalValue) SetValue(value string) {
	d.Value = value
	d.require(disloyalValueFieldValue)
}

func (d *DisloyalValue) UnmarshalJSON(data []byte) error {
	type unmarshaler DisloyalValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DisloyalValue(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DisloyalValue) MarshalJSON() ([]byte, error) {
	type embed DisloyalValue
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DisloyalValue) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	distinctFailureFieldValue = big.NewInt(1 << 0)
)

type DistinctFailure struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DistinctFailure) GetValue() string {
	if d == nil {
		return ""
	}
	return d.Value
}

func (d *DistinctFailure) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DistinctFailure) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DistinctFailure) SetValue(value string) {
	d.Value = value
	d.require(distinctFailureFieldValue)
}

func (d *DistinctFailure) UnmarshalJSON(data []byte) error {
	type unmarshaler DistinctFailure
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DistinctFailure(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DistinctFailure) MarshalJSON() ([]byte, error) {
	type embed DistinctFailure
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DistinctFailure) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

var (
	falseMirrorFieldValue = big.NewInt(1 << 0)
)

type FalseMirror struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FalseMirror) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FalseMirror) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FalseMirror) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FalseMirror) SetValue(value string) {
	f.Value = value
	f.require(falseMirrorFieldValue)
}

func (f *FalseMirror) UnmarshalJSON(data []byte) error {
	type unmarshaler FalseMirror
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FalseMirror(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FalseMirror) MarshalJSON() ([]byte, error) {
	type embed FalseMirror
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FalseMirror) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	frozenSleepFieldValue = big.NewInt(1 << 0)
)

type FrozenSleep struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FrozenSleep) GetValue() string {
	if f == nil {
		return ""
	}
	return f.Value
}

func (f *FrozenSleep) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FrozenSleep) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FrozenSleep) SetValue(value string) {
	f.Value = value
	f.require(frozenSleepFieldValue)
}

func (f *FrozenSleep) UnmarshalJSON(data []byte) error {
	type unmarshaler FrozenSleep
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FrozenSleep(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FrozenSleep) MarshalJSON() ([]byte, error) {
	type embed FrozenSleep
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FrozenSleep) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	gaseousRoadFieldValue = big.NewInt(1 << 0)
)

type GaseousRoad struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GaseousRoad) GetValue() string {
	if g == nil {
		return ""
	}
	return g.Value
}

func (g *GaseousRoad) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GaseousRoad) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GaseousRoad) SetValue(value string) {
	g.Value = value
	g.require(gaseousRoadFieldValue)
}

func (g *GaseousRoad) UnmarshalJSON(data []byte) error {
	type unmarshaler GaseousRoad
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GaseousRoad(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GaseousRoad) MarshalJSON() ([]byte, error) {
	type embed GaseousRoad
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GaseousRoad) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	gruesomeCoachFieldValue = big.NewInt(1 << 0)
)

type GruesomeCoach struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GruesomeCoach) GetValue() string {
	if g == nil {
		return ""
	}
	return g.Value
}

func (g *GruesomeCoach) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GruesomeCoach) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GruesomeCoach) SetValue(value string) {
	g.Value = value
	g.require(gruesomeCoachFieldValue)
}

func (g *GruesomeCoach) UnmarshalJSON(data []byte) error {
	type unmarshaler GruesomeCoach
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GruesomeCoach(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GruesomeCoach) MarshalJSON() ([]byte, error) {
	type embed GruesomeCoach
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GruesomeCoach) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	harmoniousPlayFieldValue = big.NewInt(1 << 0)
)

type HarmoniousPlay struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HarmoniousPlay) GetValue() string {
	if h == nil {
		return ""
	}
	return h.Value
}

func (h *HarmoniousPlay) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HarmoniousPlay) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HarmoniousPlay) SetValue(value string) {
	h.Value = value
	h.require(harmoniousPlayFieldValue)
}

func (h *HarmoniousPlay) UnmarshalJSON(data []byte) error {
	type unmarshaler HarmoniousPlay
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HarmoniousPlay(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HarmoniousPlay) MarshalJSON() ([]byte, error) {
	type embed HarmoniousPlay
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HarmoniousPlay) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	hastyPainFieldValue = big.NewInt(1 << 0)
)

type HastyPain struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HastyPain) GetValue() string {
	if h == nil {
		return ""
	}
	return h.Value
}

func (h *HastyPain) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HastyPain) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HastyPain) SetValue(value string) {
	h.Value = value
	h.require(hastyPainFieldValue)
}

func (h *HastyPain) UnmarshalJSON(data []byte) error {
	type unmarshaler HastyPain
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HastyPain(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HastyPain) MarshalJSON() ([]byte, error) {
	type embed HastyPain
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HastyPain) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	hoarseMouseFieldValue = big.NewInt(1 << 0)
)

type HoarseMouse struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HoarseMouse) GetValue() string {
	if h == nil {
		return ""
	}
	return h.Value
}

func (h *HoarseMouse) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HoarseMouse) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HoarseMouse) SetValue(value string) {
	h.Value = value
	h.require(hoarseMouseFieldValue)
}

func (h *HoarseMouse) UnmarshalJSON(data []byte) error {
	type unmarshaler HoarseMouse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HoarseMouse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HoarseMouse) MarshalJSON() ([]byte, error) {
	type embed HoarseMouse
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HoarseMouse) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	jumboEndFieldValue = big.NewInt(1 << 0)
)

type JumboEnd struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JumboEnd) GetValue() string {
	if j == nil {
		return ""
	}
	return j.Value
}

func (j *JumboEnd) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JumboEnd) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JumboEnd) SetValue(value string) {
	j.Value = value
	j.require(jumboEndFieldValue)
}

func (j *JumboEnd) UnmarshalJSON(data []byte) error {
	type unmarshaler JumboEnd
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JumboEnd(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JumboEnd) MarshalJSON() ([]byte, error) {
	type embed JumboEnd
	var marshaler = struct {
		embed
	}{
		embed: embed(*j),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, j.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (j *JumboEnd) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

var (
	limpingStepFieldValue = big.NewInt(1 << 0)
)

type LimpingStep struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LimpingStep) GetValue() string {
	if l == nil {
		return ""
	}
	return l.Value
}

func (l *LimpingStep) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LimpingStep) require(field *big.Int) {
	if l.explicitFields == nil {
		l.explicitFields = big.NewInt(0)
	}
	l.explicitFields.Or(l.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (l *LimpingStep) SetValue(value string) {
	l.Value = value
	l.require(limpingStepFieldValue)
}

func (l *LimpingStep) UnmarshalJSON(data []byte) error {
	type unmarshaler LimpingStep
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LimpingStep(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LimpingStep) MarshalJSON() ([]byte, error) {
	type embed LimpingStep
	var marshaler = struct {
		embed
	}{
		embed: embed(*l),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, l.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (l *LimpingStep) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

var (
	mistySnowFieldValue = big.NewInt(1 << 0)
)

type MistySnow struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MistySnow) GetValue() string {
	if m == nil {
		return ""
	}
	return m.Value
}

func (m *MistySnow) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MistySnow) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MistySnow) SetValue(value string) {
	m.Value = value
	m.require(mistySnowFieldValue)
}

func (m *MistySnow) UnmarshalJSON(data []byte) error {
	type unmarshaler MistySnow
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MistySnow(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MistySnow) MarshalJSON() ([]byte, error) {
	type embed MistySnow
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MistySnow) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

var (
	normalSweetFieldValue = big.NewInt(1 << 0)
)

type NormalSweet struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NormalSweet) GetValue() string {
	if n == nil {
		return ""
	}
	return n.Value
}

func (n *NormalSweet) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NormalSweet) require(field *big.Int) {
	if n.explicitFields == nil {
		n.explicitFields = big.NewInt(0)
	}
	n.explicitFields.Or(n.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (n *NormalSweet) SetValue(value string) {
	n.Value = value
	n.require(normalSweetFieldValue)
}

func (n *NormalSweet) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalSweet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalSweet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalSweet) MarshalJSON() ([]byte, error) {
	type embed NormalSweet
	var marshaler = struct {
		embed
	}{
		embed: embed(*n),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, n.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (n *NormalSweet) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

var (
	popularLimitFieldValue = big.NewInt(1 << 0)
)

type PopularLimit struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PopularLimit) GetValue() string {
	if p == nil {
		return ""
	}
	return p.Value
}

func (p *PopularLimit) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PopularLimit) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PopularLimit) SetValue(value string) {
	p.Value = value
	p.require(popularLimitFieldValue)
}

func (p *PopularLimit) UnmarshalJSON(data []byte) error {
	type unmarshaler PopularLimit
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PopularLimit(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PopularLimit) MarshalJSON() ([]byte, error) {
	type embed PopularLimit
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PopularLimit) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	potableBadFieldValue = big.NewInt(1 << 0)
)

type PotableBad struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PotableBad) GetValue() string {
	if p == nil {
		return ""
	}
	return p.Value
}

func (p *PotableBad) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PotableBad) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PotableBad) SetValue(value string) {
	p.Value = value
	p.require(potableBadFieldValue)
}

func (p *PotableBad) UnmarshalJSON(data []byte) error {
	type unmarshaler PotableBad
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PotableBad(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PotableBad) MarshalJSON() ([]byte, error) {
	type embed PotableBad
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PotableBad) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	practicalPrincipleFieldValue = big.NewInt(1 << 0)
)

type PracticalPrinciple struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PracticalPrinciple) GetValue() string {
	if p == nil {
		return ""
	}
	return p.Value
}

func (p *PracticalPrinciple) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PracticalPrinciple) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PracticalPrinciple) SetValue(value string) {
	p.Value = value
	p.require(practicalPrincipleFieldValue)
}

func (p *PracticalPrinciple) UnmarshalJSON(data []byte) error {
	type unmarshaler PracticalPrinciple
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PracticalPrinciple(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PracticalPrinciple) MarshalJSON() ([]byte, error) {
	type embed PracticalPrinciple
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PracticalPrinciple) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	primaryBlockFieldValue = big.NewInt(1 << 0)
)

type PrimaryBlock struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PrimaryBlock) GetValue() string {
	if p == nil {
		return ""
	}
	return p.Value
}

func (p *PrimaryBlock) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PrimaryBlock) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PrimaryBlock) SetValue(value string) {
	p.Value = value
	p.require(primaryBlockFieldValue)
}

func (p *PrimaryBlock) UnmarshalJSON(data []byte) error {
	type unmarshaler PrimaryBlock
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PrimaryBlock(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PrimaryBlock) MarshalJSON() ([]byte, error) {
	type embed PrimaryBlock
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PrimaryBlock) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	rotatingRatioFieldValue = big.NewInt(1 << 0)
)

type RotatingRatio struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RotatingRatio) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

func (r *RotatingRatio) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RotatingRatio) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RotatingRatio) SetValue(value string) {
	r.Value = value
	r.require(rotatingRatioFieldValue)
}

func (r *RotatingRatio) UnmarshalJSON(data []byte) error {
	type unmarshaler RotatingRatio
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RotatingRatio(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RotatingRatio) MarshalJSON() ([]byte, error) {
	type embed RotatingRatio
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RotatingRatio) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	thankfulFactorFieldValue = big.NewInt(1 << 0)
)

type ThankfulFactor struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *ThankfulFactor) GetValue() string {
	if t == nil {
		return ""
	}
	return t.Value
}

func (t *ThankfulFactor) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *ThankfulFactor) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *ThankfulFactor) SetValue(value string) {
	t.Value = value
	t.require(thankfulFactorFieldValue)
}

func (t *ThankfulFactor) UnmarshalJSON(data []byte) error {
	type unmarshaler ThankfulFactor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThankfulFactor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThankfulFactor) MarshalJSON() ([]byte, error) {
	type embed ThankfulFactor
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *ThankfulFactor) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	totalWorkFieldValue = big.NewInt(1 << 0)
)

type TotalWork struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TotalWork) GetValue() string {
	if t == nil {
		return ""
	}
	return t.Value
}

func (t *TotalWork) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TotalWork) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TotalWork) SetValue(value string) {
	t.Value = value
	t.require(totalWorkFieldValue)
}

func (t *TotalWork) UnmarshalJSON(data []byte) error {
	type unmarshaler TotalWork
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TotalWork(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TotalWork) MarshalJSON() ([]byte, error) {
	type embed TotalWork
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TotalWork) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	triangularRepairFieldValue = big.NewInt(1 << 0)
)

type TriangularRepair struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TriangularRepair) GetValue() string {
	if t == nil {
		return ""
	}
	return t.Value
}

func (t *TriangularRepair) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TriangularRepair) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TriangularRepair) SetValue(value string) {
	t.Value = value
	t.require(triangularRepairFieldValue)
}

func (t *TriangularRepair) UnmarshalJSON(data []byte) error {
	type unmarshaler TriangularRepair
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TriangularRepair(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TriangularRepair) MarshalJSON() ([]byte, error) {
	type embed TriangularRepair
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TriangularRepair) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	uniqueStressFieldValue = big.NewInt(1 << 0)
)

type UniqueStress struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UniqueStress) GetValue() string {
	if u == nil {
		return ""
	}
	return u.Value
}

func (u *UniqueStress) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UniqueStress) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UniqueStress) SetValue(value string) {
	u.Value = value
	u.require(uniqueStressFieldValue)
}

func (u *UniqueStress) UnmarshalJSON(data []byte) error {
	type unmarshaler UniqueStress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UniqueStress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UniqueStress) MarshalJSON() ([]byte, error) {
	type embed UniqueStress
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UniqueStress) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	unwillingSmokeFieldValue = big.NewInt(1 << 0)
)

type UnwillingSmoke struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UnwillingSmoke) GetValue() string {
	if u == nil {
		return ""
	}
	return u.Value
}

func (u *UnwillingSmoke) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UnwillingSmoke) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UnwillingSmoke) SetValue(value string) {
	u.Value = value
	u.require(unwillingSmokeFieldValue)
}

func (u *UnwillingSmoke) UnmarshalJSON(data []byte) error {
	type unmarshaler UnwillingSmoke
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnwillingSmoke(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnwillingSmoke) MarshalJSON() ([]byte, error) {
	type embed UnwillingSmoke
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UnwillingSmoke) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	vibrantExcitementFieldValue = big.NewInt(1 << 0)
)

type VibrantExcitement struct {
	Value string `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VibrantExcitement) GetValue() string {
	if v == nil {
		return ""
	}
	return v.Value
}

func (v *VibrantExcitement) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VibrantExcitement) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *VibrantExcitement) SetValue(value string) {
	v.Value = value
	v.require(vibrantExcitementFieldValue)
}

func (v *VibrantExcitement) UnmarshalJSON(data []byte) error {
	type unmarshaler VibrantExcitement
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VibrantExcitement(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VibrantExcitement) MarshalJSON() ([]byte, error) {
	type embed VibrantExcitement
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *VibrantExcitement) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
