// Code generated by Fern. DO NOT EDIT.

package unknownasany

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/unknown/fern/internal"
	big "math/big"
)

type MyAlias = interface{}

var (
	myObjectFieldUnknown = big.NewInt(1 << 0)
)

type MyObject struct {
	Unknown interface{} `json:"unknown" url:"unknown"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MyObject) GetUnknown() interface{} {
	if m == nil {
		return nil
	}
	return m.Unknown
}

func (m *MyObject) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MyObject) require(field *big.Int) {
	if m.explicitFields == nil {
		m.explicitFields = big.NewInt(0)
	}
	m.explicitFields.Or(m.explicitFields, field)
}

// SetUnknown sets the Unknown field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (m *MyObject) SetUnknown(unknown interface{}) {
	m.Unknown = unknown
	m.require(myObjectFieldUnknown)
}

func (m *MyObject) UnmarshalJSON(data []byte) error {
	type unmarshaler MyObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MyObject(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MyObject) MarshalJSON() ([]byte, error) {
	type embed MyObject
	var marshaler = struct {
		embed
	}{
		embed: embed(*m),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, m.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (m *MyObject) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}
