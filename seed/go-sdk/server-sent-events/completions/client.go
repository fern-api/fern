// Code generated by Fern. DO NOT EDIT.

package completions

import (
	context "context"
	fern "github.com/server-sent-events/fern"
	core "github.com/server-sent-events/fern/core"
	internal "github.com/server-sent-events/fern/internal"
	option "github.com/server-sent-events/fern/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	options *core.RequestOptions
	baseURL string
	caller  *internal.Caller
}

func NewClient(options *core.RequestOptions) *Client {
	return &Client{
		WithRawResponse: NewRawClient(options),
		options:         options,
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
	}
}

func (c *Client) Stream(
	ctx context.Context,
	request *fern.StreamCompletionRequest,
	opts ...option.RequestOption,
) (*core.Stream[fern.StreamedCompletion], error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/stream"
	headers := internal.MergeHeaders(
		c.options.ToHeader(),
		options.ToHeader(),
	)
	headers.Add("Accept", "text/event-stream")
	streamer := internal.NewStreamer[fern.StreamedCompletion](c.caller)
	return streamer.Stream(
		ctx,
		&internal.StreamParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Prefix:          internal.DefaultSSEDataPrefix,
			Terminator:      "[[DONE]]",
			Format:          core.StreamFormatSSE,
			Request:         request,
		},
	)
}
