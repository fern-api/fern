// Code generated by Fern. DO NOT EDIT.

package propertybasederror

import (
	context "context"
	core "github.com/error-property/fern/core"
	internal "github.com/error-property/fern/internal"
	option "github.com/error-property/fern/option"
	http "net/http"
)

type Client struct {
	WithRawResponse *RawClient

	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		WithRawResponse: NewRawClient(options),
		baseURL:         options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// GET request that always throws an error
func (c *Client) ThrowError(
	ctx context.Context,
	opts ...option.RequestOption,
) (string, error) {
	response, err := c.WithRawResponse.ThrowError(
		ctx,
		opts...,
	)
	if err != nil {
		return "", err
	}
	return response.Body, nil
}
