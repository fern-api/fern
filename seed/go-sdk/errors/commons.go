// Code generated by Fern. DO NOT EDIT.

package errors

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/errors/fern/internal"
	big "math/big"
)

var (
	errorBodyFieldMessage = big.NewInt(1 << 0)
	errorBodyFieldCode    = big.NewInt(1 << 1)
)

type ErrorBody struct {
	Message string `json:"message" url:"message"`
	Code    int    `json:"code" url:"code"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorBody) GetMessage() string {
	if e == nil {
		return ""
	}
	return e.Message
}

func (e *ErrorBody) GetCode() int {
	if e == nil {
		return 0
	}
	return e.Code
}

func (e *ErrorBody) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorBody) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ErrorBody) SetMessage(message string) {
	e.Message = message
	e.require(errorBodyFieldMessage)
}

// SetCode sets the Code field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ErrorBody) SetCode(code int) {
	e.Code = code
	e.require(errorBodyFieldCode)
}

func (e *ErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorBody) MarshalJSON() ([]byte, error) {
	type embed ErrorBody
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ErrorBody) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
