openapi: 3.0.1
info:
  title: undiscriminated-unions
  version: ''
paths:
  /:
    post:
      operationId: union_get
      tags:
        - Union
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyUnion'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyUnion'
  /metadata:
    get:
      operationId: union_getMetadata
      tags:
        - Union
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
              examples:
                Example1:
                  value:
                    name: exampleName
                    value: exampleValue
                    default: exampleDefault
    put:
      operationId: union_updateMetadata
      tags:
        - Union
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataUnion'
  /call:
    post:
      operationId: union_call
      tags:
        - Union
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
  /duplicate:
    post:
      operationId: union_duplicateTypesUnion
      tags:
        - Union
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnionWithDuplicateTypes'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnionWithDuplicateTypes'
  /nested:
    post:
      operationId: union_nestedUnions
      tags:
        - Union
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedUnionRoot'
components:
  schemas:
    Request:
      title: Request
      type: object
      properties:
        union:
          $ref: '#/components/schemas/MetadataUnion'
          nullable: true
    TypeWithOptionalUnion:
      title: TypeWithOptionalUnion
      type: object
      properties:
        myUnion:
          $ref: '#/components/schemas/MyUnion'
          nullable: true
    MyUnion:
      title: MyUnion
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - type: integer
        - type: array
          items:
            type: integer
        - type: array
          items:
            type: array
            items:
              type: integer
        - type: array
          items:
            type: string
      description: Several different types are accepted.
    NestedUnionL2:
      title: NestedUnionL2
      oneOf:
        - type: boolean
        - type: array
          items:
            type: string
        - type: array
          items:
            type: string
      description: Nested layer 2.
    NestedUnionL1:
      title: NestedUnionL1
      oneOf:
        - type: integer
        - type: array
          items:
            type: string
        - type: array
          items:
            type: string
        - $ref: '#/components/schemas/NestedUnionL2'
      description: Nested layer 1.
    NestedUnionRoot:
      title: NestedUnionRoot
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - $ref: '#/components/schemas/NestedUnionL1'
      description: Nested union root.
    UnionWithDuplicateTypes:
      title: UnionWithDuplicateTypes
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - type: integer
        - type: array
          items:
            type: string
      description: Duplicate types.
    MetadataUnion:
      title: MetadataUnion
      oneOf:
        - $ref: '#/components/schemas/OptionalMetadata'
        - $ref: '#/components/schemas/NamedMetadata'
    NamedMetadata:
      title: NamedMetadata
      type: object
      properties:
        name:
          type: string
        value:
          type: object
          additionalProperties: true
      required:
        - name
        - value
    OptionalMetadata:
      title: OptionalMetadata
      type: object
      additionalProperties: true
      nullable: true
    Metadata:
      title: Metadata
      type: object
      additionalProperties:
        type: string
      description: |-
        Undiscriminated unions can act as a map key
        as long as all of their values are valid keys
        (i.e. do they have a valid string representation).
    Key:
      title: Key
      oneOf:
        - $ref: '#/components/schemas/KeyType'
        - type: string
          const: default
    KeyType:
      title: KeyType
      type: string
      enum:
        - name
        - value
  securitySchemes: {}
