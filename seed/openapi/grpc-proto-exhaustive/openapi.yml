openapi: 3.0.1
info:
  title: '""'
  version: ''
paths:
  /data:
    post:
      operationId: dataservice_upload
      tags:
        - Dataservice
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
              examples:
                Example1:
                  value:
                    count: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                columns:
                  type: array
                  items:
                    $ref: '#/components/schemas/Column'
                namespace:
                  type: string
                  nullable: true
              required:
                - columns
            examples:
              Example1:
                value:
                  columns:
                    - id: id
                      values:
                        - 1.1
  /data/delete:
    post:
      operationId: dataservice_delete
      tags:
        - Dataservice
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
              examples:
                Example1:
                  value: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  nullable: true
                deleteAll:
                  type: boolean
                  nullable: true
                namespace:
                  type: string
                  nullable: true
                filter:
                  $ref: '#/components/schemas/Metadata'
                  nullable: true
            examples:
              Example1:
                value: {}
  /data/describe:
    post:
      operationId: dataservice_describe
      tags:
        - Dataservice
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeResponse'
              examples:
                Example1:
                  value:
                    namespaces:
                      key:
                        count: 1
                    dimension: 1
                    fullness: 1.1
                    totalCount: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  $ref: '#/components/schemas/Metadata'
                  nullable: true
            examples:
              Example1:
                value: {}
  /data/fetch:
    get:
      operationId: dataservice_fetch
      tags:
        - Dataservice
      parameters:
        - name: ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              nullable: true
        - name: namespace
          in: query
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchResponse'
              examples:
                Example1:
                  value:
                    columns:
                      key:
                        id: id
                        values:
                          - 1.1
                        metadata:
                          key: 1.1
                        indexedData:
                          indices:
                            - 1
                          values:
                            - 1.1
                    namespace: namespace
                    usage:
                      units: 1
  /data/list:
    get:
      operationId: dataservice_list
      tags:
        - Dataservice
      parameters:
        - name: prefix
          in: query
          required: false
          schema:
            type: string
            nullable: true
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int64
            nullable: true
        - name: paginationToken
          in: query
          required: false
          schema:
            type: string
            nullable: true
        - name: namespace
          in: query
          required: false
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
              examples:
                Example1:
                  value:
                    columns:
                      - id: id
                    pagination:
                      next: next
                    namespace: namespace
                    usage:
                      units: 1
  /data/query:
    post:
      operationId: dataservice_query
      tags:
        - Dataservice
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
              examples:
                Example1:
                  value:
                    results:
                      - matches:
                          - id: id
                        namespace: namespace
                    matches:
                      - id: id
                        score: 1.1
                        values:
                          - 1.1
                        metadata:
                          key: 1.1
                        indexedData:
                          indices:
                            - 1
                          values:
                            - 1.1
                    namespace: namespace
                    usage:
                      units: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                namespace:
                  type: string
                  nullable: true
                topK:
                  type: integer
                  format: int64
                  example: 1
                filter:
                  $ref: '#/components/schemas/Metadata'
                  nullable: true
                includeValues:
                  type: boolean
                  nullable: true
                includeMetadata:
                  type: boolean
                  nullable: true
                queries:
                  type: array
                  items:
                    $ref: '#/components/schemas/QueryColumn'
                  nullable: true
                column:
                  type: array
                  items:
                    type: integer
                    format: float
                  nullable: true
                id:
                  type: string
                  nullable: true
                indexedData:
                  $ref: '#/components/schemas/IndexedData'
                  nullable: true
              required:
                - topK
            examples:
              Example1:
                value:
                  topK: 1
  /data/update:
    post:
      operationId: dataservice_update
      tags:
        - Dataservice
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
              examples:
                Example1:
                  value: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: id
                values:
                  type: array
                  items:
                    type: integer
                    format: float
                  nullable: true
                setMetadata:
                  $ref: '#/components/schemas/Metadata'
                  nullable: true
                namespace:
                  type: string
                  nullable: true
                indexedData:
                  $ref: '#/components/schemas/IndexedData'
                  nullable: true
              required:
                - id
            examples:
              Example1:
                value:
                  id: id
components:
  schemas:
    Column:
      title: Column
      type: object
      properties:
        id:
          type: string
        values:
          type: array
          items:
            type: integer
            format: float
        metadata:
          $ref: '#/components/schemas/Metadata'
          nullable: true
        indexedData:
          $ref: '#/components/schemas/IndexedData'
          nullable: true
      required:
        - id
        - values
    DeleteResponse:
      title: DeleteResponse
      type: object
      properties: {}
    DescribeResponse:
      title: DescribeResponse
      type: object
      properties:
        namespaces:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/NamespaceSummary'
          nullable: true
        dimension:
          type: integer
          format: int64
          nullable: true
        fullness:
          type: integer
          format: float
          nullable: true
        totalCount:
          type: integer
          format: int64
          nullable: true
    FetchResponse:
      title: FetchResponse
      type: object
      properties:
        columns:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Column'
          nullable: true
        namespace:
          type: string
          nullable: true
        usage:
          $ref: '#/components/schemas/Usage'
          nullable: true
    IndexedData:
      title: IndexedData
      type: object
      properties:
        indices:
          type: array
          items:
            type: integer
            format: int64
        values:
          type: array
          items:
            type: integer
            format: float
      required:
        - indices
        - values
    ListElement:
      title: ListElement
      type: object
      properties:
        id:
          type: string
          nullable: true
    ListResponse:
      title: ListResponse
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ListElement'
          nullable: true
        pagination:
          $ref: '#/components/schemas/Pagination'
          nullable: true
        namespace:
          type: string
          nullable: true
        usage:
          $ref: '#/components/schemas/Usage'
          nullable: true
    NamespaceSummary:
      title: NamespaceSummary
      type: object
      properties:
        count:
          type: integer
          format: int64
          nullable: true
    Pagination:
      title: Pagination
      type: object
      properties:
        next:
          type: string
          nullable: true
    QueryColumn:
      title: QueryColumn
      type: object
      properties:
        values:
          type: array
          items:
            type: integer
            format: float
        topK:
          type: integer
          format: int64
          nullable: true
        namespace:
          type: string
          nullable: true
        filter:
          $ref: '#/components/schemas/Metadata'
          nullable: true
        indexedData:
          $ref: '#/components/schemas/IndexedData'
          nullable: true
      required:
        - values
    QueryResponse:
      title: QueryResponse
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/QueryResult'
          nullable: true
        matches:
          type: array
          items:
            $ref: '#/components/schemas/ScoredColumn'
          nullable: true
        namespace:
          type: string
          nullable: true
        usage:
          $ref: '#/components/schemas/Usage'
          nullable: true
    QueryResult:
      title: QueryResult
      type: object
      properties:
        matches:
          type: array
          items:
            $ref: '#/components/schemas/ScoredColumn'
          nullable: true
        namespace:
          type: string
          nullable: true
    ScoredColumn:
      title: ScoredColumn
      type: object
      properties:
        id:
          type: string
        score:
          type: integer
          format: float
          nullable: true
        values:
          type: array
          items:
            type: integer
            format: float
          nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
          nullable: true
        indexedData:
          $ref: '#/components/schemas/IndexedData'
          nullable: true
      required:
        - id
    UpdateResponse:
      title: UpdateResponse
      type: object
      properties: {}
    UploadResponse:
      title: UploadResponse
      type: object
      properties:
        count:
          type: integer
          format: int64
          nullable: true
    Usage:
      title: Usage
      type: object
      properties:
        units:
          type: integer
          format: int64
          nullable: true
    Metadata:
      title: Metadata
      oneOf:
        - type: object
          additionalProperties:
            $ref: '#/components/schemas/MetadataValue'
        - type: object
          additionalProperties: true
    MetadataValue:
      title: MetadataValue
      oneOf:
        - type: number
          format: double
        - type: string
        - type: boolean
  securitySchemes: {}
