import { assertNever } from "@fern-api/core-utils";
import {
    HttpEndpoint,
    TypeDeclaration,
    TypeId,
    V2HttpEndpointResponse,
    V2HttpEndpointResponseBody
} from "@fern-api/ir-sdk";

export function generateResponseExample({
    endpoint,
    typeDeclarations,
    skipOptionalRequestProperties
}: {
    endpoint: HttpEndpoint;
    typeDeclarations: Record<TypeId, TypeDeclaration>;
    skipOptionalRequestProperties: boolean;
}): V2HttpEndpointResponse {
    const result: V2HttpEndpointResponse = {
        statusCode: endpoint.response?.statusCode,
        body: undefined,
        docs: undefined
    };
    if (endpoint.response == null || endpoint.response.body == null) {
        return result;
    }
    switch (endpoint.response.body.type) {
        case "bytes":
            break;
        case "fileDownload":
            break;
        case "text":
            break;
        case "json": {
            const jsonBody = endpoint.response.body.value;
            if (jsonBody.type === "response") {
                const userExamples = jsonBody.v2Examples?.userSpecifiedExamples ?? {};
                const autoExamples = jsonBody.v2Examples?.autogeneratedExamples ?? {};
                const firstUserExample = Object.values(userExamples)[0];
                const firstAutoExample = Object.values(autoExamples)[0];

                if (firstUserExample !== undefined) {
                    result.body = V2HttpEndpointResponseBody.json(firstUserExample);
                } else if (firstAutoExample !== undefined) {
                    result.body = V2HttpEndpointResponseBody.json(firstAutoExample);
                }
            }
            break;
        }
        case "streaming":
            break;
        case "streamParameter":
            break;
        default: {
            assertNever(endpoint.response.body);
        }
    }
    return result;
}
