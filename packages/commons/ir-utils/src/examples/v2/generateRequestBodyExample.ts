import { assertNever } from "@fern-api/core-utils";
import {
    HttpEndpoint,
    HttpService,
    TypeDeclaration,
    TypeId,
    V2HttpEndpointRequest,
    V2SchemaExamples
} from "@fern-api/ir-sdk";

import { generateParameterExamples } from "./generateParameterExamples";

export function generateRequestBodyExample({
    endpoint,
    service,
    typeDeclarations,
    skipOptionalRequestProperties
}: {
    endpoint: HttpEndpoint;
    service: HttpService;
    typeDeclarations: Record<TypeId, TypeDeclaration>;
    skipOptionalRequestProperties: boolean;
}): V2HttpEndpointRequest | undefined {
    const { pathParameters, queryParameters, headers } = generateParameterExamples({
        service,
        endpoint,
        typeDeclarations,
        skipOptionalRequestProperties
    });
    const result: V2HttpEndpointRequest = {
        endpoint: {
            method: endpoint.method,
            path: endpoint.path.head
        },
        baseUrl: undefined,
        environment: endpoint.baseUrl,
        auth: undefined,
        pathParameters,
        queryParameters,
        headers,
        requestBody: undefined,
        docs: undefined
    };
    if (endpoint.requestBody != null) {
        switch (endpoint.requestBody.type) {
            case "bytes":
                break;
            case "fileUpload": {
                result.requestBody = getFirstExample(endpoint.requestBody.v2Examples);
                break;
            }
            case "inlinedRequestBody": {
                result.requestBody = getFirstExample(endpoint.requestBody.v2Examples);
                break;
            }
            case "reference": {
                if (endpoint.requestBody.requestBodyType.type === "named") {
                    const typeId = endpoint.requestBody.requestBodyType.typeId;
                    const typeDeclaration = typeDeclarations[typeId];
                    if (typeDeclaration == null) {
                        break;
                    }
                    result.requestBody = getFirstExample(typeDeclaration.v2Examples);
                }
                break;
            }
            default: {
                assertNever(endpoint.requestBody);
            }
        }
    }
    return result;
}

function getFirstExample(examples: V2SchemaExamples | undefined): unknown | undefined {
    const userExamples = examples?.userSpecifiedExamples ?? {};
    const autoExamples = examples?.autogeneratedExamples ?? {};
    const firstUserExample = Object.values(userExamples)[0];
    const firstAutoExample = Object.values(autoExamples)[0];

    return firstUserExample ?? firstAutoExample;
}
