import { assertNever } from "@fern-api/core-utils";
import { HttpEndpoint, HttpService, TypeDeclaration, TypeId, V2HttpEndpointRequest } from "@fern-api/ir-sdk";

import { generateParameterExamples } from "./generateParameterExamples";

export function generateRequestBodyExample({
    endpoint,
    service,
    typeDeclarations,
    skipOptionalRequestProperties
}: {
    endpoint: HttpEndpoint;
    service: HttpService;
    typeDeclarations: Record<TypeId, TypeDeclaration>;
    skipOptionalRequestProperties: boolean;
}): V2HttpEndpointRequest | undefined {
    const { pathParameters, queryParameters, headers } = generateParameterExamples({
        service,
        endpoint,
        typeDeclarations,
        skipOptionalRequestProperties
    });
    const result: V2HttpEndpointRequest = {
        endpoint: {
            method: endpoint.method,
            path: endpoint.path.head
        },
        baseUrl: undefined,
        environment: endpoint.baseUrl,
        auth: undefined,
        pathParameters,
        queryParameters,
        headers,
        requestBody: undefined,
        docs: undefined
    };
    if (endpoint.requestBody != null) {
        switch (endpoint.requestBody.type) {
            case "bytes":
                break;
            case "fileUpload":
                break;
            case "inlinedRequestBody": {
                const userExamples = endpoint.requestBody.v2Examples?.userSpecifiedExamples ?? {};
                const autoExamples = endpoint.requestBody.v2Examples?.autogeneratedExamples ?? {};
                const firstUserExample = Object.values(userExamples)[0];
                const firstAutoExample = Object.values(autoExamples)[0];

                if (firstUserExample !== undefined) {
                    result.requestBody =
                        endpoint.source?.type === "openrpc"
                            ? wrapAsJsonRpcRequest(endpoint.id, firstUserExample)
                            : firstUserExample;
                } else if (firstAutoExample !== undefined) {
                    result.requestBody =
                        endpoint.source?.type === "openrpc"
                            ? wrapAsJsonRpcRequest(endpoint.id, firstAutoExample)
                            : firstAutoExample;
                }
                break;
            }
            case "reference": {
                if (endpoint.requestBody.requestBodyType.type === "named") {
                    const typeId = endpoint.requestBody.requestBodyType.typeId;
                    const typeDeclaration = typeDeclarations[typeId];
                    if (typeDeclaration == null) {
                        break;
                    }
                    const userExamples = typeDeclaration.v2Examples?.userSpecifiedExamples ?? {};
                    const autoExamples = typeDeclaration.v2Examples?.autogeneratedExamples ?? {};
                    const firstUserExample = Object.values(userExamples)[0];
                    const firstAutoExample = Object.values(autoExamples)[0];

                    if (firstUserExample !== undefined) {
                        result.requestBody =
                            endpoint.source?.type === "openrpc"
                                ? wrapAsJsonRpcRequest(endpoint.id, firstUserExample)
                                : firstUserExample;
                    } else if (firstAutoExample !== undefined) {
                        result.requestBody =
                            endpoint.source?.type === "openrpc"
                                ? wrapAsJsonRpcRequest(endpoint.id, firstAutoExample)
                                : firstAutoExample;
                    }
                }
                break;
            }
            default: {
                assertNever(endpoint.requestBody);
            }
        }
    } else {
        // For OpenRPC endpoints with no request body, still return a JSON-RPC request format with empty params
        if (endpoint.source?.type === "openrpc") {
            result.requestBody = wrapAsJsonRpcRequest(endpoint.id, []);
        }
    }
    return result;
}

/**
 * Wraps a payload in a JSON-RPC 2.0 request format
 *
 * @param method The method name to call
 * @param params The parameters to include in the request
 * @param id Optional request ID (defaults to 1)
 * @returns A formatted JSON-RPC 2.0 request object
 */
export function wrapAsJsonRpcRequest(method: string, params: unknown, id: number = 1): unknown {
    let processedParams: unknown;

    // If params is an object, convert it to an array of values
    if (params !== null && typeof params === "object" && !Array.isArray(params)) {
        processedParams = Object.values(params);
    } else {
        processedParams = params;
    }

    return {
        id,
        jsonrpc: "2.0",
        method,
        params: processedParams
    };
}
