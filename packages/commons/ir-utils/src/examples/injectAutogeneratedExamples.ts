import { HttpEndpoint, HttpService, IntermediateRepresentation, TypeDeclaration, TypeId, V2HttpEndpointExample, V2HttpEndpointRequest } from "@fern-api/ir-sdk";



import { generateEndpointExample as generateEndpointV1Example } from "./v1/generateEndpointExample";
import { generateWebSocketExample as generateWebSocketV1Example } from "./v1/generateWebSocketExample";
// import { generateEndpointExample as generateEndpointV2Example } from "./v2/generateEndpointExample";
import { generateParameterExamples } from "./v2/generateParameterExamples";





export interface ExampleGenerationArgs {
    disabled: boolean;
    includeOptionalRequestPropertyExamples?: boolean;
    skipAutogenerationIfManualExamplesExist?: boolean;
}

export function injectAutogeneratedExamples({
    ir,
    exampleGeneration
}: {
    ir: Omit<IntermediateRepresentation, "sdkConfig" | "subpackages" | "rootPackage">;
    exampleGeneration: ExampleGenerationArgs;
}): Omit<IntermediateRepresentation, "sdkConfig" | "subpackages" | "rootPackage"> {
    for (const [_, service] of Object.entries(ir.services)) {
        for (const endpoint of service.endpoints) {
            if (
                endpoint.userSpecifiedExamples.length > 0 &&
                exampleGeneration?.skipAutogenerationIfManualExamplesExist === true
            ) {
                continue;
            }
            const generatedExample = generateEndpointV1Example({
                ir,
                service,
                endpoint,
                typeDeclarations: ir.types,
                skipOptionalRequestProperties: exampleGeneration?.includeOptionalRequestPropertyExamples ? false : true,
                generationResponse: { type: "success" }
            });
            if (generatedExample.type === "failure") {
                continue;
            }
            const { example } = generatedExample;
            endpoint.autogeneratedExamples = [{ example }];
        }
    }
    for (const [_, channel] of Object.entries(ir.websocketChannels ?? {})) {
        if (channel.examples.length > 0 && exampleGeneration?.skipAutogenerationIfManualExamplesExist === true) {
            continue;
        }
        const generatedExample = generateWebSocketV1Example({
            ir,
            channel,
            typeDeclarations: ir.types,
            skipOptionalRequestProperties: exampleGeneration?.includeOptionalRequestPropertyExamples ? false : true
        });
        if (generatedExample.type === "failure") {
            continue;
        }
        const { example } = generatedExample;
        channel.examples = [...channel.examples, example];
    }
    return ir;
}

export function generateV2Example({
    example,
    endpoint,
    service,
    typeDeclarations,
    skipOptionalRequestProperties
}: {
    example: Record<string, unknown>;
    endpoint: HttpEndpoint;
    service: HttpService;
    typeDeclarations: Record<TypeId, TypeDeclaration>;
    skipOptionalRequestProperties: boolean;
}): V2HttpEndpointExample | undefined {
    const { pathParameters, queryParameters, headers } = generateParameterExamples({
        service,
        endpoint,
        typeDeclarations,
        skipOptionalRequestProperties
    });
    const request: V2HttpEndpointRequest = {
        endpoint: {
            method: endpoint.method,
            path: endpoint.path.head
        },
        baseUrl: undefined,
        environment: endpoint.baseUrl,
        auth: undefined,
        pathParameters,
        queryParameters,
        headers,
        requestBody: undefined,
        docs: undefined
    };

    return undefined;
}

export function injectAutogeneratedV2Examples({
    ir,
    exampleGeneration
}: {
    ir: Omit<IntermediateRepresentation, "sdkConfig" | "subpackages" | "rootPackage">;
    exampleGeneration: ExampleGenerationArgs;
}): Omit<IntermediateRepresentation, "sdkConfig" | "subpackages" | "rootPackage"> {
    for (const [_, service] of Object.entries(ir.services)) {
        for (const endpoint of service.endpoints) {
            if (Object.keys(endpoint.v2Examples?.userSpecifiedExamples ?? {}).length > 0) {
                // TODO: If there are user-specified examples (x-fern-examples), we'll want to
                // validate them and skip complete autogeneration.
                continue;
            }

            const examples: Record<string, any> = {};

            console.log(endpoint.requestBody?.v2Examples?.userSpecifiedExamples);
            console.log(endpoint.response?.body /* .value.v2Examples.userSpecifiedExamples */);


            if (endpoint.requestBody?.v2Examples?.userSpecifiedExamples) {
                for (const [exampleName, userSpecifiedExample] of Object.entries(endpoint.requestBody.v2Examples.userSpecifiedExamples)) {
                    examples[exampleName] = {
                        request: generateV2Example({ example: userSpecifiedExample, endpoint, service, typeDeclarations, skipOptionalRequestProperties }),
                        response: undefined,
                        codeSamples: undefined
                    };
                }
            }

            // if (endpoint.response?.body?.value.v2Examples.userSpecifiedExamples) {
            //     for (const [exampleName, userSpecifiedExample] of Object.entries(
            //         endpoint.response?.body?.value.v2Examples.userSpecifiedExamples
            //     )) {
            //         examples[exampleName] = {
            //             ...examples[exampleName],
            //             response: generateV2Example(),
            //         };
            //     }
            // }

            endpoint.v2Examples.userSpecifiedExamples = examples;

            // if (endpoint.v2Examples == null) {
            //     endpoint.v2Examples = {
            //         userSpecifiedExamples: {},
            //         autogeneratedExamples: {}
            //     };
            // }
            // endpoint.v2Examples.autogeneratedExamples = {
            //     [generatedExample.name]: generatedExample.example
            // };
        }
    }
    // TODO: We want to also autogenerate examples for websocket channels. This will be a separate
    // body of work.
    return ir;
}