types: 
  BaseIntermediateRepresntation: 
    docs: "Base intermediate representation that we can turn into IR"
    properties: 
      apiVersion: optional<ApiVersionScheme>
      apiName:
        type: commons.Name
        docs: This is the human readable unique id for the API.
      apiDisplayName: optional<string>
      apiDocs: optional<string>
      auth: auth.ApiAuth
      headers:
        docs: API Wide headers that are sent on every request
        type: list<http.HttpHeader>
      idempotencyHeaders:
        docs: Headers that are sent for idempotent endpoints
        type: list<http.HttpHeader>
      types:
        docs: "The types described by this API"
        type: map<commons.TypeId, types.TypeDeclaration>
      services:
        docs: "The services exposed by this API"
        type: map<commons.ServiceId, http.HttpService>
      webhookGroups:
        docs: "The webhooks sent by this API"
        type: map<commons.WebhookGroupId, webhooks.WebhookGroup>
      websocketChannels:
        docs: "The websocket channels served by this API"
        type: optional<map<commons.WebSocketChannelId, websocket.WebSocketChannel>>
      errors: map<commons.ErrorId, errors.ErrorDeclaration>
      subpackages: map<commons.SubpackageId, Subpackage>
      rootPackage: Package
      constants: constants.Constants
      environments: optional<environment.EnvironmentsConfig>
      basePath: optional<http.HttpPath>
      pathParameters: list<http.PathParameter>
      errorDiscriminationStrategy: ErrorDiscriminationStrategy
      sdkConfig: SdkConfig
      variables: list<variables.VariableDeclaration>
      serviceTypeReferenceInfo: ServiceTypeReferenceInfo
      readmeConfig: optional<ReadmeConfig>
      sourceConfig: optional<SourceConfig>
      publishConfig: optional<publish.PublishingConfig>
      dynamic: optional<dynamic.DynamicIntermediateRepresentation>      
    