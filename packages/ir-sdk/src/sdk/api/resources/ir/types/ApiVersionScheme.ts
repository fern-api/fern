/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../index";

/**
 * The available set of versions for the API. This is used to generate a special
 * enum that can be used to specify the version of the API to use.
 */
export type ApiVersionScheme = FernIr.ApiVersionScheme.Header;

export namespace ApiVersionScheme {
    export interface Header extends FernIr.HeaderApiVersionScheme, _Utils {
        type: "header";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.ApiVersionScheme._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        header: (value: FernIr.HeaderApiVersionScheme) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const ApiVersionScheme = {
    header: (value: FernIr.HeaderApiVersionScheme): FernIr.ApiVersionScheme.Header => {
        return {
            ...value,
            type: "header",
            _visit: function <_Result>(
                this: FernIr.ApiVersionScheme.Header,
                visitor: FernIr.ApiVersionScheme._Visitor<_Result>,
            ) {
                return FernIr.ApiVersionScheme._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.ApiVersionScheme, visitor: FernIr.ApiVersionScheme._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "header":
                return visitor.header(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
