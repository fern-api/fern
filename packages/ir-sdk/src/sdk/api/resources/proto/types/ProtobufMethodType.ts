/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ProtobufMethodType = "UNARY" | "CLIENT_STREAM" | "SERVER_STREAM" | "BIDIRECTIONAL_STREAM";
export const ProtobufMethodType = {
    Unary: "UNARY",
    ClientStream: "CLIENT_STREAM",
    ServerStream: "SERVER_STREAM",
    BidirectionalStream: "BIDIRECTIONAL_STREAM",
    _visit: <R>(value: ProtobufMethodType, visitor: ProtobufMethodType.Visitor<R>) => {
        switch (value) {
            case ProtobufMethodType.Unary:
                return visitor.unary();
            case ProtobufMethodType.ClientStream:
                return visitor.clientStream();
            case ProtobufMethodType.ServerStream:
                return visitor.serverStream();
            case ProtobufMethodType.BidirectionalStream:
                return visitor.bidirectionalStream();
            default:
                return visitor._other();
        }
    },
} as const;

export namespace ProtobufMethodType {
    export interface Visitor<R> {
        unary: () => R;
        clientStream: () => R;
        serverStream: () => R;
        bidirectionalStream: () => R;
        _other: () => R;
    }
}
