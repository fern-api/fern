/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ProtobufMethod = "UNARY" | "CLIENT_STREAM" | "SERVER_STREAM" | "BIDIRECTIONAL_STREAM";
export const ProtobufMethod = {
    Unary: "UNARY",
    ClientStream: "CLIENT_STREAM",
    ServerStream: "SERVER_STREAM",
    BidirectionalStream: "BIDIRECTIONAL_STREAM",
    _visit: <R>(value: ProtobufMethod, visitor: ProtobufMethod.Visitor<R>) => {
        switch (value) {
            case ProtobufMethod.Unary:
                return visitor.unary();
            case ProtobufMethod.ClientStream:
                return visitor.clientStream();
            case ProtobufMethod.ServerStream:
                return visitor.serverStream();
            case ProtobufMethod.BidirectionalStream:
                return visitor.bidirectionalStream();
            default:
                return visitor._other();
        }
    },
} as const;

export namespace ProtobufMethod {
    export interface Visitor<R> {
        unary: () => R;
        clientStream: () => R;
        serverStream: () => R;
        bidirectionalStream: () => R;
        _other: () => R;
    }
}
