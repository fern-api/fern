/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../index";

export type PublishTarget = FernIr.PublishTarget.Postman;

export namespace PublishTarget {
    export interface Postman extends FernIr.PostmanPublishTarget, _Utils {
        type: "postman";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.PublishTarget._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        postman: (value: FernIr.PostmanPublishTarget) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PublishTarget = {
    postman: (value: FernIr.PostmanPublishTarget): FernIr.PublishTarget.Postman => {
        return {
            ...value,
            type: "postman",
            _visit: function <_Result>(
                this: FernIr.PublishTarget.Postman,
                visitor: FernIr.PublishTarget._Visitor<_Result>,
            ) {
                return FernIr.PublishTarget._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.PublishTarget, visitor: FernIr.PublishTarget._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "postman":
                return visitor.postman(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
