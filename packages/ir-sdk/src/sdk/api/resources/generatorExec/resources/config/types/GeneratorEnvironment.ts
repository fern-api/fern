/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../../../index";

export type GeneratorEnvironment =
    | FernIr.generatorExec.GeneratorEnvironment.Local
    | FernIr.generatorExec.GeneratorEnvironment.Remote;

export namespace GeneratorEnvironment {
    export interface Local extends _Utils {
        type: "local";
    }

    export interface Remote extends FernIr.generatorExec.RemoteGeneratorEnvironment, _Utils {
        type: "remote";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.generatorExec.GeneratorEnvironment._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        local: () => _Result;
        remote: (value: FernIr.generatorExec.RemoteGeneratorEnvironment) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const GeneratorEnvironment = {
    local: (): FernIr.generatorExec.GeneratorEnvironment.Local => {
        return {
            type: "local",
            _visit: function <_Result>(
                this: FernIr.generatorExec.GeneratorEnvironment.Local,
                visitor: FernIr.generatorExec.GeneratorEnvironment._Visitor<_Result>,
            ) {
                return FernIr.generatorExec.GeneratorEnvironment._visit(this, visitor);
            },
        };
    },

    remote: (
        value: FernIr.generatorExec.RemoteGeneratorEnvironment,
    ): FernIr.generatorExec.GeneratorEnvironment.Remote => {
        return {
            ...value,
            type: "remote",
            _visit: function <_Result>(
                this: FernIr.generatorExec.GeneratorEnvironment.Remote,
                visitor: FernIr.generatorExec.GeneratorEnvironment._Visitor<_Result>,
            ) {
                return FernIr.generatorExec.GeneratorEnvironment._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.generatorExec.GeneratorEnvironment,
        visitor: FernIr.generatorExec.GeneratorEnvironment._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "local":
                return visitor.local();
            case "remote":
                return visitor.remote(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
