/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../index";

export type ExampleResponse = FernIr.ExampleResponse.Ok | FernIr.ExampleResponse.Error_;

export namespace ExampleResponse {
    export interface Ok extends _Utils {
        type: "ok";
        value: FernIr.ExampleEndpointSuccessResponse;
    }

    export interface Error_ extends FernIr.ExampleEndpointErrorResponse, _Utils {
        type: "error";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.ExampleResponse._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        ok: (value: FernIr.ExampleEndpointSuccessResponse) => _Result;
        error: (value: FernIr.ExampleEndpointErrorResponse) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const ExampleResponse = {
    ok: (value: FernIr.ExampleEndpointSuccessResponse): FernIr.ExampleResponse.Ok => {
        return {
            value: value,
            type: "ok",
            _visit: function <_Result>(
                this: FernIr.ExampleResponse.Ok,
                visitor: FernIr.ExampleResponse._Visitor<_Result>,
            ) {
                return FernIr.ExampleResponse._visit(this, visitor);
            },
        };
    },

    error: (value: FernIr.ExampleEndpointErrorResponse): FernIr.ExampleResponse.Error_ => {
        return {
            ...value,
            type: "error",
            _visit: function <_Result>(
                this: FernIr.ExampleResponse.Error_,
                visitor: FernIr.ExampleResponse._Visitor<_Result>,
            ) {
                return FernIr.ExampleResponse._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.ExampleResponse, visitor: FernIr.ExampleResponse._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "ok":
                return visitor.ok(value.value);
            case "error":
                return visitor.error(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
