/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../index";

export type HttpEndpointSource =
    | FernIr.HttpEndpointSource.Proto
    | FernIr.HttpEndpointSource.Openapi
    | FernIr.HttpEndpointSource.Openrpc;

export namespace HttpEndpointSource {
    export interface Proto extends _Utils {
        type: "proto";
    }

    export interface Openapi extends _Utils {
        type: "openapi";
    }

    export interface Openrpc extends _Utils {
        type: "openrpc";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.HttpEndpointSource._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        proto: () => _Result;
        openapi: () => _Result;
        openrpc: () => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const HttpEndpointSource = {
    proto: (): FernIr.HttpEndpointSource.Proto => {
        return {
            type: "proto",
            _visit: function <_Result>(
                this: FernIr.HttpEndpointSource.Proto,
                visitor: FernIr.HttpEndpointSource._Visitor<_Result>,
            ) {
                return FernIr.HttpEndpointSource._visit(this, visitor);
            },
        };
    },

    openapi: (): FernIr.HttpEndpointSource.Openapi => {
        return {
            type: "openapi",
            _visit: function <_Result>(
                this: FernIr.HttpEndpointSource.Openapi,
                visitor: FernIr.HttpEndpointSource._Visitor<_Result>,
            ) {
                return FernIr.HttpEndpointSource._visit(this, visitor);
            },
        };
    },

    openrpc: (): FernIr.HttpEndpointSource.Openrpc => {
        return {
            type: "openrpc",
            _visit: function <_Result>(
                this: FernIr.HttpEndpointSource.Openrpc,
                visitor: FernIr.HttpEndpointSource._Visitor<_Result>,
            ) {
                return FernIr.HttpEndpointSource._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.HttpEndpointSource,
        visitor: FernIr.HttpEndpointSource._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "proto":
                return visitor.proto();
            case "openapi":
                return visitor.openapi();
            case "openrpc":
                return visitor.openrpc();
            default:
                return visitor._other(value as any);
        }
    },
} as const;
