/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../index";

export type V2HttpEndpointResponseBody =
    | FernIr.V2HttpEndpointResponseBody.Error_
    | FernIr.V2HttpEndpointResponseBody.Json;

export namespace V2HttpEndpointResponseBody {
    export interface Error_ extends _Utils {
        type: "error";
        value: unknown;
    }

    export interface Json extends _Utils {
        type: "json";
        value: unknown;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.V2HttpEndpointResponseBody._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        error: (value: unknown) => _Result;
        json: (value: unknown) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const V2HttpEndpointResponseBody = {
    error: (value?: unknown): FernIr.V2HttpEndpointResponseBody.Error_ => {
        return {
            value: value,
            type: "error",
            _visit: function <_Result>(
                this: FernIr.V2HttpEndpointResponseBody.Error_,
                visitor: FernIr.V2HttpEndpointResponseBody._Visitor<_Result>,
            ) {
                return FernIr.V2HttpEndpointResponseBody._visit(this, visitor);
            },
        };
    },

    json: (value?: unknown): FernIr.V2HttpEndpointResponseBody.Json => {
        return {
            value: value,
            type: "json",
            _visit: function <_Result>(
                this: FernIr.V2HttpEndpointResponseBody.Json,
                visitor: FernIr.V2HttpEndpointResponseBody._Visitor<_Result>,
            ) {
                return FernIr.V2HttpEndpointResponseBody._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.V2HttpEndpointResponseBody,
        visitor: FernIr.V2HttpEndpointResponseBody._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "error":
                return visitor.error(value.value);
            case "json":
                return visitor.json(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
