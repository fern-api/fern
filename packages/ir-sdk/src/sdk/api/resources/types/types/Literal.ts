/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../index";

export type Literal = FernIr.Literal.String | FernIr.Literal.Boolean;

export namespace Literal {
    export interface String extends _Utils {
        type: "string";
        string: string;
    }

    export interface Boolean extends _Utils {
        type: "boolean";
        boolean: boolean;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.Literal._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        string: (value: string) => _Result;
        boolean: (value: boolean) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Literal = {
    string: (value: string): FernIr.Literal.String => {
        return {
            string: value,
            type: "string",
            _visit: function <_Result>(this: FernIr.Literal.String, visitor: FernIr.Literal._Visitor<_Result>) {
                return FernIr.Literal._visit(this, visitor);
            },
        };
    },

    boolean: (value: boolean): FernIr.Literal.Boolean => {
        return {
            boolean: value,
            type: "boolean",
            _visit: function <_Result>(this: FernIr.Literal.Boolean, visitor: FernIr.Literal._Visitor<_Result>) {
                return FernIr.Literal._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernIr.Literal, visitor: FernIr.Literal._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "string":
                return visitor.string(value.string);
            case "boolean":
                return visitor.boolean(value.boolean);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
