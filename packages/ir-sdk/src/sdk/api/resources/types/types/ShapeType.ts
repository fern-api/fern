/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ShapeType = "ENUM" | "OBJECT" | "UNION" | "UNDISCRIMINATED_UNION";
export const ShapeType = {
    Enum: "ENUM",
    Object: "OBJECT",
    Union: "UNION",
    UndiscriminatedUnion: "UNDISCRIMINATED_UNION",
    _visit: <R>(value: ShapeType, visitor: ShapeType.Visitor<R>) => {
        switch (value) {
            case ShapeType.Enum:
                return visitor.enum();
            case ShapeType.Object:
                return visitor.object();
            case ShapeType.Union:
                return visitor.union();
            case ShapeType.UndiscriminatedUnion:
                return visitor.undiscriminatedUnion();
            default:
                return visitor._other();
        }
    },
} as const;

export namespace ShapeType {
    export interface Visitor<R> {
        enum: () => R;
        object: () => R;
        union: () => R;
        undiscriminatedUnion: () => R;
        _other: () => R;
    }
}
