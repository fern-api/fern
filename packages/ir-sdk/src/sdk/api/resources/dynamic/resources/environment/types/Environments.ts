/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../../../index";

export type Environments = FernIr.dynamic.Environments.SingleBaseUrl | FernIr.dynamic.Environments.MultipleBaseUrls;

export namespace Environments {
    export interface SingleBaseUrl extends FernIr.dynamic.SingleBaseUrlEnvironments, _Utils {
        type: "singleBaseUrl";
    }

    export interface MultipleBaseUrls extends FernIr.dynamic.MultipleBaseUrlsEnvironments, _Utils {
        type: "multipleBaseUrls";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernIr.dynamic.Environments._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        singleBaseUrl: (value: FernIr.dynamic.SingleBaseUrlEnvironments) => _Result;
        multipleBaseUrls: (value: FernIr.dynamic.MultipleBaseUrlsEnvironments) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Environments = {
    singleBaseUrl: (value: FernIr.dynamic.SingleBaseUrlEnvironments): FernIr.dynamic.Environments.SingleBaseUrl => {
        return {
            ...value,
            type: "singleBaseUrl",
            _visit: function <_Result>(
                this: FernIr.dynamic.Environments.SingleBaseUrl,
                visitor: FernIr.dynamic.Environments._Visitor<_Result>,
            ) {
                return FernIr.dynamic.Environments._visit(this, visitor);
            },
        };
    },

    multipleBaseUrls: (
        value: FernIr.dynamic.MultipleBaseUrlsEnvironments,
    ): FernIr.dynamic.Environments.MultipleBaseUrls => {
        return {
            ...value,
            type: "multipleBaseUrls",
            _visit: function <_Result>(
                this: FernIr.dynamic.Environments.MultipleBaseUrls,
                visitor: FernIr.dynamic.Environments._Visitor<_Result>,
            ) {
                return FernIr.dynamic.Environments._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.dynamic.Environments,
        visitor: FernIr.dynamic.Environments._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "singleBaseUrl":
                return visitor.singleBaseUrl(value);
            case "multipleBaseUrls":
                return visitor.multipleBaseUrls(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
