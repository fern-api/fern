/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { BasicLicense } from "./BasicLicense";
import { CustomLicense } from "./CustomLicense";

export const LicenseConfig: core.serialization.Schema<
    serializers.generatorExec.LicenseConfig.Raw,
    FernIr.generatorExec.LicenseConfig
> = core.serialization
    .union("type", {
        basic: BasicLicense,
        custom: CustomLicense,
    })
    .transform<FernIr.generatorExec.LicenseConfig>({
        transform: (value) => {
            switch (value.type) {
                case "basic":
                    return FernIr.generatorExec.LicenseConfig.basic(value);
                case "custom":
                    return FernIr.generatorExec.LicenseConfig.custom(value);
                default:
                    return value as FernIr.generatorExec.LicenseConfig;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace LicenseConfig {
    export type Raw = LicenseConfig.Basic | LicenseConfig.Custom;

    export interface Basic extends BasicLicense.Raw {
        type: "basic";
    }

    export interface Custom extends CustomLicense.Raw {
        type: "custom";
    }
}
