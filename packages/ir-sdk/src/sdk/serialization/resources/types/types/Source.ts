/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { ProtobufType } from "../../proto/types/ProtobufType";

export const Source: core.serialization.Schema<serializers.Source.Raw, FernIr.Source> = core.serialization
    .union("type", {
        proto: core.serialization.object({
            value: ProtobufType,
        }),
    })
    .transform<FernIr.Source>({
        transform: (value) => {
            switch (value.type) {
                case "proto":
                    return FernIr.Source.proto(value.value);
                default:
                    return value as FernIr.Source;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Source {
    export type Raw = Source.Proto;

    export interface Proto {
        type: "proto";
        value: ProtobufType.Raw;
    }
}
