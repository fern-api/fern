/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { IntegerType } from "./IntegerType";
import { LongType } from "./LongType";
import { UintType } from "./UintType";
import { Uint64Type } from "./Uint64Type";
import { FloatType } from "./FloatType";
import { DoubleType } from "./DoubleType";
import { BooleanType } from "./BooleanType";
import { StringType } from "./StringType";
import { DateType } from "./DateType";
import { DateTimeType } from "./DateTimeType";
import { UuidType } from "./UuidType";
import { Base64Type } from "./Base64Type";
import { BigIntegerType } from "./BigIntegerType";

export const PrimitiveTypeV2: core.serialization.Schema<serializers.PrimitiveTypeV2.Raw, FernIr.PrimitiveTypeV2> =
    core.serialization
        .union("type", {
            integer: IntegerType,
            long: LongType,
            uint: UintType,
            uint64: Uint64Type,
            float: FloatType,
            double: DoubleType,
            boolean: BooleanType,
            string: StringType,
            date: DateType,
            dateTime: DateTimeType,
            uuid: UuidType,
            base64: Base64Type,
            bigInteger: BigIntegerType,
        })
        .transform<FernIr.PrimitiveTypeV2>({
            transform: (value) => {
                switch (value.type) {
                    case "integer":
                        return FernIr.PrimitiveTypeV2.integer(value);
                    case "long":
                        return FernIr.PrimitiveTypeV2.long(value);
                    case "uint":
                        return FernIr.PrimitiveTypeV2.uint(value);
                    case "uint64":
                        return FernIr.PrimitiveTypeV2.uint64(value);
                    case "float":
                        return FernIr.PrimitiveTypeV2.float(value);
                    case "double":
                        return FernIr.PrimitiveTypeV2.double(value);
                    case "boolean":
                        return FernIr.PrimitiveTypeV2.boolean(value);
                    case "string":
                        return FernIr.PrimitiveTypeV2.string(value);
                    case "date":
                        return FernIr.PrimitiveTypeV2.date(value);
                    case "dateTime":
                        return FernIr.PrimitiveTypeV2.dateTime(value);
                    case "uuid":
                        return FernIr.PrimitiveTypeV2.uuid(value);
                    case "base64":
                        return FernIr.PrimitiveTypeV2.base64(value);
                    case "bigInteger":
                        return FernIr.PrimitiveTypeV2.bigInteger(value);
                    default:
                        return value as FernIr.PrimitiveTypeV2;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace PrimitiveTypeV2 {
    export type Raw =
        | PrimitiveTypeV2.Integer
        | PrimitiveTypeV2.Long
        | PrimitiveTypeV2.Uint
        | PrimitiveTypeV2.Uint64
        | PrimitiveTypeV2.Float
        | PrimitiveTypeV2.Double
        | PrimitiveTypeV2.Boolean
        | PrimitiveTypeV2.String
        | PrimitiveTypeV2.Date
        | PrimitiveTypeV2.DateTime
        | PrimitiveTypeV2.Uuid
        | PrimitiveTypeV2.Base64
        | PrimitiveTypeV2.BigInteger;

    export interface Integer extends IntegerType.Raw {
        type: "integer";
    }

    export interface Long extends LongType.Raw {
        type: "long";
    }

    export interface Uint extends UintType.Raw {
        type: "uint";
    }

    export interface Uint64 extends Uint64Type.Raw {
        type: "uint64";
    }

    export interface Float extends FloatType.Raw {
        type: "float";
    }

    export interface Double extends DoubleType.Raw {
        type: "double";
    }

    export interface Boolean extends BooleanType.Raw {
        type: "boolean";
    }

    export interface String extends StringType.Raw {
        type: "string";
    }

    export interface Date extends DateType.Raw {
        type: "date";
    }

    export interface DateTime extends DateTimeType.Raw {
        type: "dateTime";
    }

    export interface Uuid extends UuidType.Raw {
        type: "uuid";
    }

    export interface Base64 extends Base64Type.Raw {
        type: "base64";
    }

    export interface BigInteger extends BigIntegerType.Raw {
        type: "bigInteger";
    }
}
