/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { BasicAuthValues } from "./BasicAuthValues";
import { BearerAuthValues } from "./BearerAuthValues";
import { HeaderAuthValues } from "./HeaderAuthValues";
import { OAuthValues } from "./OAuthValues";

export const V2AuthValues: core.serialization.Schema<serializers.V2AuthValues.Raw, FernIr.V2AuthValues> =
    core.serialization
        .union("type", {
            basic: BasicAuthValues,
            bearer: BearerAuthValues,
            header: HeaderAuthValues,
            oauth: OAuthValues,
        })
        .transform<FernIr.V2AuthValues>({
            transform: (value) => {
                switch (value.type) {
                    case "basic":
                        return FernIr.V2AuthValues.basic(value);
                    case "bearer":
                        return FernIr.V2AuthValues.bearer(value);
                    case "header":
                        return FernIr.V2AuthValues.header(value);
                    case "oauth":
                        return FernIr.V2AuthValues.oauth(value);
                    default:
                        return value as FernIr.V2AuthValues;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace V2AuthValues {
    export type Raw = V2AuthValues.Basic | V2AuthValues.Bearer | V2AuthValues.Header | V2AuthValues.Oauth;

    export interface Basic extends BasicAuthValues.Raw {
        type: "basic";
    }

    export interface Bearer extends BearerAuthValues.Raw {
        type: "bearer";
    }

    export interface Header extends HeaderAuthValues.Raw {
        type: "header";
    }

    export interface Oauth extends OAuthValues.Raw {
        type: "oauth";
    }
}
