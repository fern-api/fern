/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { NameAndWireValue } from "../../commons/types/NameAndWireValue";
import { V2SchemaExample } from "../../examples/types/V2SchemaExample";
import { Declaration } from "../../commons/types/Declaration";

export const QueryParameter: core.serialization.ObjectSchema<serializers.QueryParameter.Raw, FernIr.QueryParameter> =
    core.serialization
        .objectWithoutOptionalProperties({
            name: NameAndWireValue,
            valueType: core.serialization.lazy(() => serializers.TypeReference),
            allowMultiple: core.serialization.boolean(),
            example: V2SchemaExample.optional(),
        })
        .extend(Declaration);

export declare namespace QueryParameter {
    export interface Raw extends Declaration.Raw {
        name: NameAndWireValue.Raw;
        valueType: serializers.TypeReference.Raw;
        allowMultiple: boolean;
        example?: V2SchemaExample.Raw | null;
    }
}
