/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { SdkRequestBodyType } from "./SdkRequestBodyType";
import { SdkRequestWrapper } from "./SdkRequestWrapper";

export const SdkRequestShape: core.serialization.Schema<serializers.SdkRequestShape.Raw, FernIr.SdkRequestShape> =
    core.serialization
        .union("type", {
            justRequestBody: core.serialization.object({
                value: SdkRequestBodyType,
            }),
            wrapper: SdkRequestWrapper,
        })
        .transform<FernIr.SdkRequestShape>({
            transform: (value) => {
                switch (value.type) {
                    case "justRequestBody":
                        return FernIr.SdkRequestShape.justRequestBody(value.value);
                    case "wrapper":
                        return FernIr.SdkRequestShape.wrapper(value);
                    default:
                        return value as FernIr.SdkRequestShape;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace SdkRequestShape {
    export type Raw = SdkRequestShape.JustRequestBody | SdkRequestShape.Wrapper;

    export interface JustRequestBody {
        type: "justRequestBody";
        value: SdkRequestBodyType.Raw;
    }

    export interface Wrapper extends SdkRequestWrapper.Raw {
        type: "wrapper";
    }
}
