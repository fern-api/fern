/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { QueryParameter } from "./QueryParameter";
import { ObjectProperty } from "../../types/types/ObjectProperty";

export const RequestPropertyValue: core.serialization.Schema<
    serializers.RequestPropertyValue.Raw,
    FernIr.RequestPropertyValue
> = core.serialization
    .union("type", {
        query: QueryParameter,
        body: ObjectProperty,
    })
    .transform<FernIr.RequestPropertyValue>({
        transform: (value) => {
            switch (value.type) {
                case "query":
                    return FernIr.RequestPropertyValue.query(value);
                case "body":
                    return FernIr.RequestPropertyValue.body(value);
                default:
                    return value as FernIr.RequestPropertyValue;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace RequestPropertyValue {
    export type Raw = RequestPropertyValue.Query | RequestPropertyValue.Body;

    export interface Query extends QueryParameter.Raw {
        type: "query";
    }

    export interface Body extends ObjectProperty.Raw {
        type: "body";
    }
}
