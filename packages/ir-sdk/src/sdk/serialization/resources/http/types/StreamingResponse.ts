/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { JsonStreamChunk } from "./JsonStreamChunk";
import { TextStreamChunk } from "./TextStreamChunk";
import { SseStreamChunk } from "./SseStreamChunk";

export const StreamingResponse: core.serialization.Schema<serializers.StreamingResponse.Raw, FernIr.StreamingResponse> =
    core.serialization
        .union("type", {
            json: JsonStreamChunk,
            text: TextStreamChunk,
            sse: SseStreamChunk,
        })
        .transform<FernIr.StreamingResponse>({
            transform: (value) => {
                switch (value.type) {
                    case "json":
                        return FernIr.StreamingResponse.json(value);
                    case "text":
                        return FernIr.StreamingResponse.text(value);
                    case "sse":
                        return FernIr.StreamingResponse.sse(value);
                    default:
                        return value as FernIr.StreamingResponse;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace StreamingResponse {
    export type Raw = StreamingResponse.Json | StreamingResponse.Text | StreamingResponse.Sse;

    export interface Json extends JsonStreamChunk.Raw {
        type: "json";
    }

    export interface Text extends TextStreamChunk.Raw {
        type: "text";
    }

    export interface Sse extends SseStreamChunk.Raw {
        type: "sse";
    }
}
