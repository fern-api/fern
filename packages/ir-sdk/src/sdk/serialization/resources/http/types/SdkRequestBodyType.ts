/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { HttpRequestBodyReference } from "./HttpRequestBodyReference";
import { BytesRequest } from "./BytesRequest";

export const SdkRequestBodyType: core.serialization.Schema<
    serializers.SdkRequestBodyType.Raw,
    FernIr.SdkRequestBodyType
> = core.serialization
    .union("type", {
        typeReference: HttpRequestBodyReference,
        bytes: BytesRequest,
    })
    .transform<FernIr.SdkRequestBodyType>({
        transform: (value) => {
            switch (value.type) {
                case "typeReference":
                    return FernIr.SdkRequestBodyType.typeReference(value);
                case "bytes":
                    return FernIr.SdkRequestBodyType.bytes(value);
                default:
                    return value as FernIr.SdkRequestBodyType;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace SdkRequestBodyType {
    export type Raw = SdkRequestBodyType.TypeReference | SdkRequestBodyType.Bytes;

    export interface TypeReference extends HttpRequestBodyReference.Raw {
        type: "typeReference";
    }

    export interface Bytes extends BytesRequest.Raw {
        type: "bytes";
    }
}
