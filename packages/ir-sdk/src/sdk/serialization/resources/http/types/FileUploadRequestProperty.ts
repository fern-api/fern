/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const FileUploadRequestProperty: core.serialization.Schema<
    serializers.FileUploadRequestProperty.Raw,
    FernIr.FileUploadRequestProperty
> = core.serialization
    .union("type", {
        file: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).FileProperty),
        }),
        bodyProperty: core.serialization.lazyObject(async () => (await import("../../..")).InlinedRequestBodyProperty),
    })
    .transform<FernIr.FileUploadRequestProperty>({
        transform: (value) => {
            switch (value.type) {
                case "file":
                    return FernIr.FileUploadRequestProperty.file(value.value);
                case "bodyProperty":
                    return FernIr.FileUploadRequestProperty.bodyProperty(value);
                default:
                    return value as FernIr.FileUploadRequestProperty;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace FileUploadRequestProperty {
    type Raw = FileUploadRequestProperty.File | FileUploadRequestProperty.BodyProperty;

    interface File {
        type: "file";
        value: serializers.FileProperty.Raw;
    }

    interface BodyProperty extends serializers.InlinedRequestBodyProperty.Raw {
        type: "bodyProperty";
    }
}
