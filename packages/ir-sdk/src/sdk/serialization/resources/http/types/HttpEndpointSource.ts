/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";

export const HttpEndpointSource: core.serialization.Schema<
    serializers.HttpEndpointSource.Raw,
    FernIr.HttpEndpointSource
> = core.serialization
    .union("type", {
        proto: core.serialization.object({}),
        openapi: core.serialization.object({}),
        openrpc: core.serialization.object({}),
    })
    .transform<FernIr.HttpEndpointSource>({
        transform: (value) => {
            switch (value.type) {
                case "proto":
                    return FernIr.HttpEndpointSource.proto();
                case "openapi":
                    return FernIr.HttpEndpointSource.openapi();
                case "openrpc":
                    return FernIr.HttpEndpointSource.openrpc();
                default:
                    return value as FernIr.HttpEndpointSource;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace HttpEndpointSource {
    export type Raw = HttpEndpointSource.Proto | HttpEndpointSource.Openapi | HttpEndpointSource.Openrpc;

    export interface Proto {
        type: "proto";
    }

    export interface Openapi {
        type: "openapi";
    }

    export interface Openrpc {
        type: "openrpc";
    }
}
