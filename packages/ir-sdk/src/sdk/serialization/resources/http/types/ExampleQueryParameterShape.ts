/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";

export const ExampleQueryParameterShape: core.serialization.Schema<
    serializers.ExampleQueryParameterShape.Raw,
    FernIr.ExampleQueryParameterShape
> = core.serialization
    .union("type", {
        single: core.serialization.object({}),
        exploded: core.serialization.object({}),
        commaSeparated: core.serialization.object({}),
    })
    .transform<FernIr.ExampleQueryParameterShape>({
        transform: (value) => {
            switch (value.type) {
                case "single":
                    return FernIr.ExampleQueryParameterShape.single();
                case "exploded":
                    return FernIr.ExampleQueryParameterShape.exploded();
                case "commaSeparated":
                    return FernIr.ExampleQueryParameterShape.commaSeparated();
                default:
                    return value as FernIr.ExampleQueryParameterShape;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ExampleQueryParameterShape {
    export type Raw =
        | ExampleQueryParameterShape.Single
        | ExampleQueryParameterShape.Exploded
        | ExampleQueryParameterShape.CommaSeparated;

    export interface Single {
        type: "single";
    }

    export interface Exploded {
        type: "exploded";
    }

    export interface CommaSeparated {
        type: "commaSeparated";
    }
}
