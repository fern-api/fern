/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { JsonResponseBody } from "./JsonResponseBody";
import { JsonResponseBodyWithProperty } from "./JsonResponseBodyWithProperty";

export const JsonResponse: core.serialization.Schema<serializers.JsonResponse.Raw, FernIr.JsonResponse> =
    core.serialization
        .union("type", {
            response: JsonResponseBody,
            nestedPropertyAsResponse: JsonResponseBodyWithProperty,
        })
        .transform<FernIr.JsonResponse>({
            transform: (value) => {
                switch (value.type) {
                    case "response":
                        return FernIr.JsonResponse.response(value);
                    case "nestedPropertyAsResponse":
                        return FernIr.JsonResponse.nestedPropertyAsResponse(value);
                    default:
                        return value as FernIr.JsonResponse;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace JsonResponse {
    export type Raw = JsonResponse.Response | JsonResponse.NestedPropertyAsResponse;

    export interface Response extends JsonResponseBody.Raw {
        type: "response";
    }

    export interface NestedPropertyAsResponse extends JsonResponseBodyWithProperty.Raw {
        type: "nestedPropertyAsResponse";
    }
}
