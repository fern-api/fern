/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { NamedParameter } from "../../types/types/NamedParameter";
import { ReferencedRequestBody } from "./ReferencedRequestBody";
import { FileUploadRequestBody } from "./FileUploadRequestBody";

export const InlinedRequestBody: core.serialization.Schema<
    serializers.dynamic.InlinedRequestBody.Raw,
    FernIr.dynamic.InlinedRequestBody
> = core.serialization
    .union("type", {
        properties: core.serialization.object({
            value: core.serialization.list(NamedParameter),
        }),
        referenced: ReferencedRequestBody,
        fileUpload: FileUploadRequestBody,
    })
    .transform<FernIr.dynamic.InlinedRequestBody>({
        transform: (value) => {
            switch (value.type) {
                case "properties":
                    return FernIr.dynamic.InlinedRequestBody.properties(value.value);
                case "referenced":
                    return FernIr.dynamic.InlinedRequestBody.referenced(value);
                case "fileUpload":
                    return FernIr.dynamic.InlinedRequestBody.fileUpload(value);
                default:
                    return value as FernIr.dynamic.InlinedRequestBody;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace InlinedRequestBody {
    export type Raw = InlinedRequestBody.Properties | InlinedRequestBody.Referenced | InlinedRequestBody.FileUpload;

    export interface Properties {
        type: "properties";
        value: NamedParameter.Raw[];
    }

    export interface Referenced extends ReferencedRequestBody.Raw {
        type: "referenced";
    }

    export interface FileUpload extends FileUploadRequestBody.Raw {
        type: "fileUpload";
    }
}
