/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { PublishInfo } from "./PublishInfo";

export const GeneratorOutputConfig: core.serialization.Schema<
    serializers.dynamic.GeneratorOutputConfig.Raw,
    FernIr.dynamic.GeneratorOutputConfig
> = core.serialization
    .union("type", {
        publish: core.serialization.object({
            value: PublishInfo,
        }),
        local: core.serialization.object({}),
    })
    .transform<FernIr.dynamic.GeneratorOutputConfig>({
        transform: (value) => {
            switch (value.type) {
                case "publish":
                    return FernIr.dynamic.GeneratorOutputConfig.publish(value.value);
                case "local":
                    return FernIr.dynamic.GeneratorOutputConfig.local();
                default:
                    return value as FernIr.dynamic.GeneratorOutputConfig;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace GeneratorOutputConfig {
    export type Raw = GeneratorOutputConfig.Publish | GeneratorOutputConfig.Local;

    export interface Publish {
        type: "publish";
        value: PublishInfo.Raw;
    }

    export interface Local {
        type: "local";
    }
}
