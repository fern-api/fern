/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { BodyRequest } from "./BodyRequest";
import { InlinedRequest } from "./InlinedRequest";

export const Request: core.serialization.Schema<serializers.dynamic.Request.Raw, FernIr.dynamic.Request> =
    core.serialization
        .union("type", {
            body: BodyRequest,
            inlined: InlinedRequest,
        })
        .transform<FernIr.dynamic.Request>({
            transform: (value) => {
                switch (value.type) {
                    case "body":
                        return FernIr.dynamic.Request.body(value);
                    case "inlined":
                        return FernIr.dynamic.Request.inlined(value);
                    default:
                        return value as FernIr.dynamic.Request;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace Request {
    export type Raw = Request.Body | Request.Inlined;

    export interface Body extends BodyRequest.Raw {
        type: "body";
    }

    export interface Inlined extends InlinedRequest.Raw {
        type: "inlined";
    }
}
