/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { AliasType } from "./AliasType";
import { EnumType } from "./EnumType";
import { ObjectType } from "./ObjectType";
import { DiscriminatedUnionType } from "./DiscriminatedUnionType";
import { UndiscriminatedUnionType } from "./UndiscriminatedUnionType";

export const NamedType: core.serialization.Schema<serializers.dynamic.NamedType.Raw, FernIr.dynamic.NamedType> =
    core.serialization
        .union("type", {
            alias: AliasType,
            enum: EnumType,
            object: ObjectType,
            discriminatedUnion: DiscriminatedUnionType,
            undiscriminatedUnion: UndiscriminatedUnionType,
        })
        .transform<FernIr.dynamic.NamedType>({
            transform: (value) => {
                switch (value.type) {
                    case "alias":
                        return FernIr.dynamic.NamedType.alias(value);
                    case "enum":
                        return FernIr.dynamic.NamedType.enum(value);
                    case "object":
                        return FernIr.dynamic.NamedType.object(value);
                    case "discriminatedUnion":
                        return FernIr.dynamic.NamedType.discriminatedUnion(value);
                    case "undiscriminatedUnion":
                        return FernIr.dynamic.NamedType.undiscriminatedUnion(value);
                    default:
                        return value as FernIr.dynamic.NamedType;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace NamedType {
    export type Raw =
        | NamedType.Alias
        | NamedType.Enum
        | NamedType.Object
        | NamedType.DiscriminatedUnion
        | NamedType.UndiscriminatedUnion;

    export interface Alias extends AliasType.Raw {
        type: "alias";
    }

    export interface Enum extends EnumType.Raw {
        type: "enum";
    }

    export interface Object extends ObjectType.Raw {
        type: "object";
    }

    export interface DiscriminatedUnion extends DiscriminatedUnionType.Raw {
        type: "discriminatedUnion";
    }

    export interface UndiscriminatedUnion extends UndiscriminatedUnionType.Raw {
        type: "undiscriminatedUnion";
    }
}
