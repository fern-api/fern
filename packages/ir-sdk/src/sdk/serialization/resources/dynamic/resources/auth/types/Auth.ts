/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { BasicAuth } from "./BasicAuth";
import { BearerAuth } from "./BearerAuth";
import { HeaderAuth } from "./HeaderAuth";
import { OAuth } from "./OAuth";

export const Auth: core.serialization.Schema<serializers.dynamic.Auth.Raw, FernIr.dynamic.Auth> = core.serialization
    .union("type", {
        basic: BasicAuth,
        bearer: BearerAuth,
        header: HeaderAuth,
        oauth: OAuth,
    })
    .transform<FernIr.dynamic.Auth>({
        transform: (value) => {
            switch (value.type) {
                case "basic":
                    return FernIr.dynamic.Auth.basic(value);
                case "bearer":
                    return FernIr.dynamic.Auth.bearer(value);
                case "header":
                    return FernIr.dynamic.Auth.header(value);
                case "oauth":
                    return FernIr.dynamic.Auth.oauth(value);
                default:
                    return value as FernIr.dynamic.Auth;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Auth {
    export type Raw = Auth.Basic | Auth.Bearer | Auth.Header | Auth.Oauth;

    export interface Basic extends BasicAuth.Raw {
        type: "basic";
    }

    export interface Bearer extends BearerAuth.Raw {
        type: "bearer";
    }

    export interface Header extends HeaderAuth.Raw {
        type: "header";
    }

    export interface Oauth extends OAuth.Raw {
        type: "oauth";
    }
}
