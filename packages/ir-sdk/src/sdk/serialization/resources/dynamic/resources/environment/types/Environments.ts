/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { SingleBaseUrlEnvironments } from "./SingleBaseUrlEnvironments";
import { MultipleBaseUrlsEnvironments } from "./MultipleBaseUrlsEnvironments";

export const Environments: core.serialization.Schema<
    serializers.dynamic.Environments.Raw,
    FernIr.dynamic.Environments
> = core.serialization
    .union("type", {
        singleBaseUrl: SingleBaseUrlEnvironments,
        multipleBaseUrls: MultipleBaseUrlsEnvironments,
    })
    .transform<FernIr.dynamic.Environments>({
        transform: (value) => {
            switch (value.type) {
                case "singleBaseUrl":
                    return FernIr.dynamic.Environments.singleBaseUrl(value);
                case "multipleBaseUrls":
                    return FernIr.dynamic.Environments.multipleBaseUrls(value);
                default:
                    return value as FernIr.dynamic.Environments;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Environments {
    export type Raw = Environments.SingleBaseUrl | Environments.MultipleBaseUrls;

    export interface SingleBaseUrl extends SingleBaseUrlEnvironments.Raw {
        type: "singleBaseUrl";
    }

    export interface MultipleBaseUrls extends MultipleBaseUrlsEnvironments.Raw {
        type: "multipleBaseUrls";
    }
}
