/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { InlinedWebhookPayload } from "./InlinedWebhookPayload";
import { WebhookPayloadReference } from "./WebhookPayloadReference";

export const WebhookPayload: core.serialization.Schema<serializers.WebhookPayload.Raw, FernIr.WebhookPayload> =
    core.serialization
        .union("type", {
            inlinedPayload: InlinedWebhookPayload,
            reference: WebhookPayloadReference,
        })
        .transform<FernIr.WebhookPayload>({
            transform: (value) => {
                switch (value.type) {
                    case "inlinedPayload":
                        return FernIr.WebhookPayload.inlinedPayload(value);
                    case "reference":
                        return FernIr.WebhookPayload.reference(value);
                    default:
                        return value as FernIr.WebhookPayload;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace WebhookPayload {
    export type Raw = WebhookPayload.InlinedPayload | WebhookPayload.Reference;

    export interface InlinedPayload extends InlinedWebhookPayload.Raw {
        type: "inlinedPayload";
    }

    export interface Reference extends WebhookPayloadReference.Raw {
        type: "reference";
    }
}
