/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { ProtoSource } from "./ProtoSource";

export const ApiDefinitionSource: core.serialization.Schema<
    serializers.ApiDefinitionSource.Raw,
    FernIr.ApiDefinitionSource
> = core.serialization
    .union("type", {
        proto: ProtoSource,
        openapi: core.serialization.object({}),
    })
    .transform<FernIr.ApiDefinitionSource>({
        transform: (value) => {
            switch (value.type) {
                case "proto":
                    return FernIr.ApiDefinitionSource.proto(value);
                case "openapi":
                    return FernIr.ApiDefinitionSource.openapi();
                default:
                    return value as FernIr.ApiDefinitionSource;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ApiDefinitionSource {
    export type Raw = ApiDefinitionSource.Proto | ApiDefinitionSource.Openapi;

    export interface Proto extends ProtoSource.Raw {
        type: "proto";
    }

    export interface Openapi {
        type: "openapi";
    }
}
