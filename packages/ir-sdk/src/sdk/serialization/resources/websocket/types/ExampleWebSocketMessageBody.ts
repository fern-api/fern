/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernIr from "../../../../api";
import * as core from "../../../../core";

export const ExampleWebSocketMessageBody: core.serialization.Schema<
    serializers.ExampleWebSocketMessageBody.Raw,
    FernIr.ExampleWebSocketMessageBody
> = core.serialization
    .union("type", {
        inlinedBody: core.serialization.lazyObject(async () => (await import("../../..")).ExampleInlinedRequestBody),
        reference: core.serialization.lazyObject(async () => (await import("../../..")).ExampleTypeReference),
    })
    .transform<FernIr.ExampleWebSocketMessageBody>({
        transform: (value) => {
            switch (value.type) {
                case "inlinedBody":
                    return FernIr.ExampleWebSocketMessageBody.inlinedBody(value);
                case "reference":
                    return FernIr.ExampleWebSocketMessageBody.reference(value);
                default:
                    return value as FernIr.ExampleWebSocketMessageBody;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ExampleWebSocketMessageBody {
    type Raw = ExampleWebSocketMessageBody.InlinedBody | ExampleWebSocketMessageBody.Reference;

    interface InlinedBody extends serializers.ExampleInlinedRequestBody.Raw {
        type: "inlinedBody";
    }

    interface Reference extends serializers.ExampleTypeReference.Raw {
        type: "reference";
    }
}
