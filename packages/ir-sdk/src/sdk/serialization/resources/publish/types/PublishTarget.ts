/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernIr from "../../../../api/index";
import * as core from "../../../../core";
import { PostmanPublishTarget } from "./PostmanPublishTarget";
import { NpmPublishTarget } from "./NpmPublishTarget";
import { MavenPublishTarget } from "./MavenPublishTarget";

export const PublishTarget: core.serialization.Schema<serializers.PublishTarget.Raw, FernIr.PublishTarget> =
    core.serialization
        .union("type", {
            postman: PostmanPublishTarget,
            npm: NpmPublishTarget,
            maven: MavenPublishTarget,
        })
        .transform<FernIr.PublishTarget>({
            transform: (value) => {
                switch (value.type) {
                    case "postman":
                        return FernIr.PublishTarget.postman(value);
                    case "npm":
                        return FernIr.PublishTarget.npm(value);
                    case "maven":
                        return FernIr.PublishTarget.maven(value);
                    default:
                        return value as FernIr.PublishTarget;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace PublishTarget {
    export type Raw = PublishTarget.Postman | PublishTarget.Npm | PublishTarget.Maven;

    export interface Postman extends PostmanPublishTarget.Raw {
        type: "postman";
    }

    export interface Npm extends NpmPublishTarget.Raw {
        type: "npm";
    }

    export interface Maven extends MavenPublishTarget.Raw {
        type: "maven";
    }
}
