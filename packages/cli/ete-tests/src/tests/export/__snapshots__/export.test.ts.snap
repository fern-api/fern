// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`overrides > simple 1`] = `
"openapi: 3.0.1
info:
  title: api
  version: ''
  description: foo bar baz
paths:
  /test/{rootPathParam}/movies:
    post:
      operationId: imdb_createMovie
      tags:
        - Imdb
      parameters:
        - name: rootPathParam
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieId'
        '400':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - BadRequestError
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMovieRequest'
  /test/{rootPathParam}/movies/{movieId}:
    get:
      operationId: imdb_getMovie
      tags:
        - Imdb
      parameters:
        - name: rootPathParam
          in: path
          required: true
          schema:
            type: string
        - name: movieId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/MovieId'
        - name: movieName
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '400':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - BadRequestError
        '404':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - NotFoundError
                      content:
                        type: string
      summary: Get Movie by Id
    delete:
      operationId: imdb_delete
      tags:
        - Imdb
      parameters:
        - name: rootPathParam
          in: path
          required: true
          schema:
            type: string
        - name: movieId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/MovieId'
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      error:
                        type: string
                        enum:
                          - BadRequestError
components:
  schemas:
    UndiscriminatedUnion:
      title: UndiscriminatedUnion
      oneOf:
        - type: string
        - type: array
          items:
            type: string
        - type: integer
        - type: array
          items:
            type: array
            items:
              type: integer
    Director:
      title: Director
      type: object
      properties:
        name:
          type: string
        age:
          $ref: '#/components/schemas/Age'
      required:
        - name
        - age
    Age:
      title: Age
      type: integer
    LiteralString:
      title: LiteralString
      type: string
      const: hello
    CurrencyAmount:
      title: CurrencyAmount
      type: string
    MovieId:
      title: MovieId
      type: string
    ActorId:
      title: ActorId
      type: string
    Movie:
      title: Movie
      type: object
      properties:
        id:
          $ref: '#/components/schemas/MovieId'
        title:
          type: string
        rating:
          type: number
          format: double
      required:
        - id
        - title
        - rating
    CreateMovieRequest:
      title: CreateMovieRequest
      type: object
      properties:
        title:
          type: string
        ratings:
          type: array
          items:
            type: number
            format: double
      required:
        - title
        - ratings
    DirectorWrapper:
      title: DirectorWrapper
      type: object
      properties:
        director:
          $ref: '#/components/schemas/Director'
      required:
        - director
    EmptyObject:
      title: EmptyObject
      type: object
      properties: {}
    Person:
      title: Person
      oneOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - actor
            value:
              $ref: '#/components/schemas/ActorId'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - director
            - $ref: '#/components/schemas/Director'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - producer
            - $ref: '#/components/schemas/EmptyObject'
          required:
            - type
        - type: object
          allOf:
            - type: object
              properties:
                type:
                  type: string
                  enum:
                    - cinematographer
            - $ref: '#/components/schemas/EmptyObject'
          required:
            - type
    RecursiveType:
      title: RecursiveType
      type: object
      properties:
        selfReferencing:
          type: array
          items:
            $ref: '#/components/schemas/RecursiveType'
      required:
        - selfReferencing
      allOf:
        - $ref: '#/components/schemas/CreateMovieRequest'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X_API_KEY
servers:
  - url: https://buildwithfern.com
    description: Production
  - url: https://staging.buildwithfern.com
    description: Staging
"
`;

exports[`overrides > simple 2`] = `
"{
  "openapi": "3.0.1",
  "info": {
    "title": "api",
    "version": "",
    "description": "foo bar baz"
  },
  "paths": {
    "/test/{rootPathParam}/movies": {
      "post": {
        "operationId": "imdb_createMovie",
        "tags": [
          "Imdb"
        ],
        "parameters": [
          {
            "name": "rootPathParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MovieId"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "enum": [
                            "BadRequestError"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMovieRequest"
              }
            }
          }
        }
      }
    },
    "/test/{rootPathParam}/movies/{movieId}": {
      "get": {
        "operationId": "imdb_getMovie",
        "tags": [
          "Imdb"
        ],
        "parameters": [
          {
            "name": "rootPathParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "movieId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MovieId"
            }
          },
          {
            "name": "movieName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "enum": [
                            "BadRequestError"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "enum": [
                            "NotFoundError"
                          ]
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get Movie by Id"
      },
      "delete": {
        "operationId": "imdb_delete",
        "tags": [
          "Imdb"
        ],
        "parameters": [
          {
            "name": "rootPathParam",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "movieId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MovieId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "enum": [
                            "BadRequestError"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UndiscriminatedUnion": {
        "title": "UndiscriminatedUnion",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "integer"
          },
          {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ]
      },
      "Director": {
        "title": "Director",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "age": {
            "$ref": "#/components/schemas/Age"
          }
        },
        "required": [
          "name",
          "age"
        ]
      },
      "Age": {
        "title": "Age",
        "type": "integer"
      },
      "LiteralString": {
        "title": "LiteralString",
        "type": "string",
        "const": "hello"
      },
      "CurrencyAmount": {
        "title": "CurrencyAmount",
        "type": "string"
      },
      "MovieId": {
        "title": "MovieId",
        "type": "string"
      },
      "ActorId": {
        "title": "ActorId",
        "type": "string"
      },
      "Movie": {
        "title": "Movie",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MovieId"
          },
          "title": {
            "type": "string"
          },
          "rating": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "id",
          "title",
          "rating"
        ]
      },
      "CreateMovieRequest": {
        "title": "CreateMovieRequest",
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "ratings": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "required": [
          "title",
          "ratings"
        ]
      },
      "DirectorWrapper": {
        "title": "DirectorWrapper",
        "type": "object",
        "properties": {
          "director": {
            "$ref": "#/components/schemas/Director"
          }
        },
        "required": [
          "director"
        ]
      },
      "EmptyObject": {
        "title": "EmptyObject",
        "type": "object",
        "properties": {}
      },
      "Person": {
        "title": "Person",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "actor"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/ActorId"
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "director"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/Director"
              }
            ],
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "producer"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/EmptyObject"
              }
            ],
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "cinematographer"
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/EmptyObject"
              }
            ],
            "required": [
              "type"
            ]
          }
        ]
      },
      "RecursiveType": {
        "title": "RecursiveType",
        "type": "object",
        "properties": {
          "selfReferencing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecursiveType"
            }
          }
        },
        "required": [
          "selfReferencing"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateMovieRequest"
          }
        ]
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X_API_KEY"
      }
    }
  },
  "servers": [
    {
      "url": "https://buildwithfern.com",
      "description": "Production"
    },
    {
      "url": "https://staging.buildwithfern.com",
      "description": "Staging"
    }
  ]
}"
`;
