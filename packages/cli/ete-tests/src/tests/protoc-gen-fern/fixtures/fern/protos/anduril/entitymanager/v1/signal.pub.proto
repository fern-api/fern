syntax = "proto3";

package anduril.entitymanager.v1;

import "anduril/type/coords.pub.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Anduril.Entitymanager.V1";
option go_package = "ghe.anduril.dev/anduril/andurilapis-go/anduril/entitymanager/v1;entitymanager";
option java_multiple_files = true;
option java_outer_classname = "SignalProto";
option java_package = "com.anduril.entitymanager.v1";
option objc_class_prefix = "AEX";

// A component that describes an entity's signal characteristics.
message Signal {
  // Indicates either a frequency range or a center frequency of this signal.
  oneof frequency_measurement {
    Frequency frequency_center = 1;
    FrequencyRange frequency_range = 2;
  }
  // Indicates the bandwidth of a signal (Hz).
  google.protobuf.DoubleValue bandwidth_hz = 3;
  // Indicates the signal to noise (SNR) of this signal.
  google.protobuf.DoubleValue signal_to_noise_ratio = 4;
  // Indicates the signal report.
  oneof report {
    LineOfBearing line_of_bearing = 5;
    Fixed fixed = 6;
  }
  // Emitter notations associated with this entity.
  repeated EmitterNotation emitter_notations = 7;
  // length in time of a single pulse
  google.protobuf.DoubleValue pulse_width_s = 8;
  // length in time between the start of two pulses
  PulseRepetitionInterval pulse_repetition_interval = 9;
  // describes how a signal is observing the environment
  ScanCharacteristics scan_characteristics = 11;

  reserved 10;
}

// A representation of a single emitter notation.
message EmitterNotation {
  string emitter_notation = 1;
  // confidence as a percentage that the emitter notation in this component is accurate
  google.protobuf.DoubleValue confidence = 2;
}

// A component that describes some measured value with error.
message Measurement {
  // The value of the measurement.
  google.protobuf.DoubleValue value = 1;
  // Estimated one standard deviation in same unit as the value.
  google.protobuf.DoubleValue sigma = 2;
}

// A component for describing frequency.
message Frequency {
  // Indicates a frequency of a signal (Hz) with its standard deviation.
  Measurement frequency_hz = 1;
}

// A component to represent a frequency range.
message FrequencyRange {
  // Indicates the lowest measured frequency of a signal (Hz).
  Frequency minimum_frequency_hz = 1;
  // Indicates the maximum measured frequency of a signal (Hz).
  Frequency maximum_frequency_hz = 2;
}

// A line of bearing of a signal.
message LineOfBearing {
  // The direction pointing from this entity to the detection
  AngleOfArrival angle_of_arrival = 3;

  // The range of the detection in the direction defined by the angle of arrival
  oneof detection_range {
    // The estimated distance of the detection
    Measurement range_estimate_m = 4;
    // The maximum distance of the detection
    Measurement max_range_m = 5;
  }

  reserved 1, 2;
}

// The direction from which the signal is received
message AngleOfArrival {
  // Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
  // forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
  anduril.type.Pose relative_pose = 1;

  // Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
  // and elevation is positive down from the FL/XY plane.
  // mxx = bearing variance in rad^2
  // mxy = bearing/elevation covariance in rad^2
  // myy = elevation variance in rad^2
  anduril.type.TMat2 bearing_elevation_covariance_rad2 = 2;
}

// A fix of a signal. No extra fields but it is expected that location should be populated when using this report.
message Fixed {}

// A component that describe the length in time between two pulses
message PulseRepetitionInterval {
  Measurement pulse_repetition_interval_s = 1;
}

// A component that describes the scanning characteristics of a signal
message ScanCharacteristics {
  ScanType scan_type = 1;
  google.protobuf.DoubleValue scan_period_s = 2;
}

// Enumerates the possible scan types
enum ScanType {
  SCAN_TYPE_INVALID = 0;
  SCAN_TYPE_CIRCULAR = 1;
  SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR = 2;
  SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR = 3;
  SCAN_TYPE_NON_SCANNING = 4;
  SCAN_TYPE_IRREGULAR = 5;
  SCAN_TYPE_CONICAL = 6;
  SCAN_TYPE_LOBE_SWITCHING = 7;
  SCAN_TYPE_RASTER = 8;
  SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR = 9;
  SCAN_TYPE_CIRCULAR_CONICAL = 10;
  SCAN_TYPE_SECTOR_CONICAL = 11;
  SCAN_TYPE_AGILE_BEAM = 12;
  SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR = 13;
  SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR = 14;
  SCAN_TYPE_UNIDIRECTIONAL_SECTOR = 15;
  SCAN_TYPE_BIDIRECTIONAL_SECTOR = 16;
}
