syntax = "proto3";

package anduril.entitymanager.v1;

import "anduril/type/coords.pub.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "Anduril.Entitymanager.V1";
option go_package = "ghe.anduril.dev/anduril/andurilapis-go/anduril/entitymanager/v1;entitymanager";
option java_multiple_files = true;
option java_outer_classname = "LocationProto";
option java_package = "com.anduril.entitymanager.v1";
option objc_class_prefix = "AEX";

// Available for Entities that have a single or primary Location.
message Location {
  // see Position definition for details.
  Position position = 1;
  // Velocity in an ENU reference frame centered on the corresponding position. All units are meters per second.
  anduril.type.ENU velocity_enu = 2;
  // Speed is the magnitude of velocity_enu vector [sqrt(e^2 + n^2 + u^2)] when present, measured in m/s.
  google.protobuf.DoubleValue speed_mps = 5;
  // The entity's acceleration in meters/s^2.
  anduril.type.ENU acceleration = 4;
  // quaternion to translate from entity body frame to it's ENU frame
  anduril.type.Quaternion attitude_enu = 3;
}

// WGS84 position. Position includes four altitude references.
// The data model does not currently support Mean Sea Level (MSL) references,
// such as the Earth Gravitational Model 1996 (EGM-96) and the Earth Gravitational Model 2008 (EGM-08).
// If the only altitude reference available to your integration is MSL, convert it to
// Height Above Ellipsoid (HAE) and populate the altitude_hae_meters field.
message Position {
  // WGS84 geodetic latitude in decimal degrees.
  double latitude_degrees = 1;
  // WGS84 longitude in decimal degrees.
  double longitude_degrees = 2;
  // altitude as height above ellipsoid (WGS84) in meters. DoubleValue wrapper is used to distinguish optional from
  // default 0.
  google.protobuf.DoubleValue altitude_hae_meters = 3;
  // Altitude as AGL (Above Ground Level) if the upstream data source has this value set. This value represents the
  // entity's height above the terrain. This is typically measured with a radar altimeter or by using a terrain tile
  // set lookup. If the value is not set from the upstream, this value is not set.
  google.protobuf.DoubleValue altitude_agl_meters = 4;
  // Altitude as ASF (Above Sea Floor) if the upstream data source has this value set. If the value is not set from the upstream, this value is
  // not set.
  google.protobuf.DoubleValue altitude_asf_meters = 5;
  // The depth of the entity from the surface of the water through sensor measurements based on differential pressure
  // between the interior and exterior of the vessel. If the value is not set from the upstream, this value is not set.
  google.protobuf.DoubleValue pressure_depth_meters = 6;
}

// Uncertainty of entity position and velocity, if available.
message LocationUncertainty {
  // Positional covariance represented by the upper triangle of the covariance matrix. It is valid to populate
  // only the diagonal of the matrix if the full covariance matrix is unknown.
  TMat3 position_enu_cov = 1;
  // Velocity covariance represented by the upper triangle of the covariance matrix. It is valid to populate
  // only the diagonal of the matrix if the full covariance matrix is unknown.
  TMat3 velocity_enu_cov = 2;
  // An ellipse that describes the certainty probability and error boundary for a given geolocation.
  ErrorEllipse position_error_ellipse = 3;
}

// Indicates ellipse characteristics and probability that an entity lies within the defined ellipse.
message ErrorEllipse {
  // Defines the probability in percentage that an entity lies within the given ellipse: 0-1.
  google.protobuf.DoubleValue probability = 1;
  // Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
  google.protobuf.DoubleValue semi_major_axis_m = 2;
  // Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
  google.protobuf.DoubleValue semi_minor_axis_m = 3;
  // The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.
  google.protobuf.DoubleValue orientation_d = 4;
}

message Pose {
  // Geospatial location defined by this Pose.
  Position pos = 1;
  // The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
  // etc and is determined by the context in which this Pose is used.
  // The normal convention for defining orientation is to list the frames of transformation, for example
  // att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
  // in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
  // field would have been att_pose_to_enu.
  //
  // Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
  // to the enu frame.
  anduril.type.Quaternion orientation = 2;
}

// Symmetric 3d matrix only representing the upper right triangle.
message TMat3 {
  float mxx = 1;
  float mxy = 2;
  float mxz = 3;
  float myy = 4;
  float myz = 5;
  float mzz = 6;
}
