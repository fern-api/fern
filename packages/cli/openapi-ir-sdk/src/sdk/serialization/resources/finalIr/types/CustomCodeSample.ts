/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const CustomCodeSample: core.serialization.Schema<
    serializers.CustomCodeSample.Raw,
    FernOpenapiIr.CustomCodeSample
> = core.serialization
    .union("type", {
        language: core.serialization.lazyObject(async () => (await import("../../..")).CustomCodeSampleLanguage),
        sdk: core.serialization.lazyObject(async () => (await import("../../..")).CustomCodeSampleSdk),
    })
    .transform<FernOpenapiIr.CustomCodeSample>({
        transform: (value) => {
            switch (value.type) {
                case "language":
                    return FernOpenapiIr.CustomCodeSample.language(value);
                case "sdk":
                    return FernOpenapiIr.CustomCodeSample.sdk(value);
                default:
                    return value as FernOpenapiIr.CustomCodeSample;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace CustomCodeSample {
    type Raw = CustomCodeSample.Language | CustomCodeSample.Sdk;

    interface Language extends serializers.CustomCodeSampleLanguage.Raw {
        type: "language";
    }

    interface Sdk extends serializers.CustomCodeSampleSdk.Raw {
        type: "sdk";
    }
}
