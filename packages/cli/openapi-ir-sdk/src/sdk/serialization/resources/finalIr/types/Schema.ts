/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const Schema: core.serialization.Schema<serializers.Schema.Raw, FernOpenapiIr.Schema> = core.serialization
    .union("type", {
        primitive: core.serialization.lazyObject(async () => (await import("../../..")).PrimitiveSchema),
        object: core.serialization.lazyObject(async () => (await import("../../..")).ObjectSchema),
        array: core.serialization.lazyObject(async () => (await import("../../..")).ArraySchema),
        map: core.serialization.lazyObject(async () => (await import("../../..")).MapSchema),
        optional: core.serialization.lazyObject(async () => (await import("../../..")).OptionalSchema),
        enum: core.serialization.lazyObject(async () => (await import("../../..")).EnumSchema),
        reference: core.serialization.lazyObject(async () => (await import("../../..")).ReferencedSchema),
        literal: core.serialization.lazyObject(async () => (await import("../../..")).LiteralSchema),
        oneOf: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).OneOfSchema),
        }),
        nullable: core.serialization.lazyObject(async () => (await import("../../..")).NullableSchema),
        unknown: core.serialization.lazyObject(async () => (await import("../../..")).WithName),
    })
    .transform<FernOpenapiIr.Schema>({
        transform: (value) => {
            switch (value.type) {
                case "primitive":
                    return FernOpenapiIr.Schema.primitive(value);
                case "object":
                    return FernOpenapiIr.Schema.object(value);
                case "array":
                    return FernOpenapiIr.Schema.array(value);
                case "map":
                    return FernOpenapiIr.Schema.map(value);
                case "optional":
                    return FernOpenapiIr.Schema.optional(value);
                case "enum":
                    return FernOpenapiIr.Schema.enum(value);
                case "reference":
                    return FernOpenapiIr.Schema.reference(value);
                case "literal":
                    return FernOpenapiIr.Schema.literal(value);
                case "oneOf":
                    return FernOpenapiIr.Schema.oneOf(value.value);
                case "nullable":
                    return FernOpenapiIr.Schema.nullable(value);
                case "unknown":
                    return FernOpenapiIr.Schema.unknown(value);
                default:
                    return value as FernOpenapiIr.Schema;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Schema {
    type Raw =
        | Schema.Primitive
        | Schema.Object
        | Schema.Array
        | Schema.Map
        | Schema.Optional
        | Schema.Enum
        | Schema.Reference
        | Schema.Literal
        | Schema.OneOf
        | Schema.Nullable
        | Schema.Unknown;

    interface Primitive extends serializers.PrimitiveSchema.Raw {
        type: "primitive";
    }

    interface Object extends serializers.ObjectSchema.Raw {
        type: "object";
    }

    interface Array extends serializers.ArraySchema.Raw {
        type: "array";
    }

    interface Map extends serializers.MapSchema.Raw {
        type: "map";
    }

    interface Optional extends serializers.OptionalSchema.Raw {
        type: "optional";
    }

    interface Enum extends serializers.EnumSchema.Raw {
        type: "enum";
    }

    interface Reference extends serializers.ReferencedSchema.Raw {
        type: "reference";
    }

    interface Literal extends serializers.LiteralSchema.Raw {
        type: "literal";
    }

    interface OneOf {
        type: "oneOf";
        value: serializers.OneOfSchema.Raw;
    }

    interface Nullable extends serializers.NullableSchema.Raw {
        type: "nullable";
    }

    interface Unknown extends serializers.WithName.Raw {
        type: "unknown";
    }
}
