/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const SecurityScheme: core.serialization.Schema<serializers.SecurityScheme.Raw, FernOpenapiIr.SecurityScheme> =
    core.serialization
        .union("type", {
            basic: core.serialization.lazyObject(async () => (await import("../../..")).BasicSecurityScheme),
            bearer: core.serialization.lazyObject(async () => (await import("../../..")).BearerSecurityScheme),
            header: core.serialization.lazyObject(async () => (await import("../../..")).HeaderSecurityScheme),
            query: core.serialization.lazyObject(async () => (await import("../../..")).QuerySecurityScheme),
            oauth: core.serialization.lazyObject(async () => (await import("../../..")).OauthSecurityScheme),
        })
        .transform<FernOpenapiIr.SecurityScheme>({
            transform: (value) => {
                switch (value.type) {
                    case "basic":
                        return FernOpenapiIr.SecurityScheme.basic(value);
                    case "bearer":
                        return FernOpenapiIr.SecurityScheme.bearer(value);
                    case "header":
                        return FernOpenapiIr.SecurityScheme.header(value);
                    case "query":
                        return FernOpenapiIr.SecurityScheme.query(value);
                    case "oauth":
                        return FernOpenapiIr.SecurityScheme.oauth(value);
                    default:
                        return value as FernOpenapiIr.SecurityScheme;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace SecurityScheme {
    type Raw =
        | SecurityScheme.Basic
        | SecurityScheme.Bearer
        | SecurityScheme.Header
        | SecurityScheme.Query
        | SecurityScheme.Oauth;

    interface Basic extends serializers.BasicSecurityScheme.Raw {
        type: "basic";
    }

    interface Bearer extends serializers.BearerSecurityScheme.Raw {
        type: "bearer";
    }

    interface Header extends serializers.HeaderSecurityScheme.Raw {
        type: "header";
    }

    interface Query extends serializers.QuerySecurityScheme.Raw {
        type: "query";
    }

    interface Oauth extends serializers.OauthSecurityScheme.Raw {
        type: "oauth";
    }
}
