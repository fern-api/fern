/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const ResponseWithExample: core.serialization.Schema<
    serializers.ResponseWithExample.Raw,
    FernOpenapiIr.ResponseWithExample
> = core.serialization
    .union("type", {
        file: core.serialization.lazyObject(async () => (await import("../../..")).FileResponse),
        json: core.serialization.lazyObject(async () => (await import("../../..")).JsonResponseWithExample),
        text: core.serialization.lazyObject(async () => (await import("../../..")).TextResponse),
        streamingText: core.serialization.lazyObject(async () => (await import("../../..")).TextResponse),
        streamingJson: core.serialization.lazyObject(async () => (await import("../../..")).JsonResponse),
    })
    .transform<FernOpenapiIr.ResponseWithExample>({
        transform: (value) => {
            switch (value.type) {
                case "file":
                    return FernOpenapiIr.ResponseWithExample.file(value);
                case "json":
                    return FernOpenapiIr.ResponseWithExample.json(value);
                case "text":
                    return FernOpenapiIr.ResponseWithExample.text(value);
                case "streamingText":
                    return FernOpenapiIr.ResponseWithExample.streamingText(value);
                case "streamingJson":
                    return FernOpenapiIr.ResponseWithExample.streamingJson(value);
                default:
                    return value as FernOpenapiIr.ResponseWithExample;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace ResponseWithExample {
    type Raw =
        | ResponseWithExample.File
        | ResponseWithExample.Json
        | ResponseWithExample.Text
        | ResponseWithExample.StreamingText
        | ResponseWithExample.StreamingJson;

    interface File extends serializers.FileResponse.Raw {
        type: "file";
    }

    interface Json extends serializers.JsonResponseWithExample.Raw {
        type: "json";
    }

    interface Text extends serializers.TextResponse.Raw {
        type: "text";
    }

    interface StreamingText extends serializers.TextResponse.Raw {
        type: "streamingText";
    }

    interface StreamingJson extends serializers.JsonResponse.Raw {
        type: "streamingJson";
    }
}
