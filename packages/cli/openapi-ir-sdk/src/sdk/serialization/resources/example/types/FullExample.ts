/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const FullExample: core.serialization.Schema<serializers.FullExample.Raw, FernOpenapiIr.FullExample> =
    core.serialization
        .union("type", {
            primitive: core.serialization.object({
                value: core.serialization.lazy(async () => (await import("../../..")).PrimitiveExample),
            }),
            object: core.serialization.lazyObject(async () => (await import("../../..")).FullObjectExample),
            array: core.serialization.object({
                value: core.serialization.list(
                    core.serialization.lazy(async () => (await import("../../..")).FullExample)
                ),
            }),
            map: core.serialization.object({
                value: core.serialization.list(
                    core.serialization.lazyObject(async () => (await import("../../..")).KeyValuePair)
                ),
            }),
            enum: core.serialization.object({
                value: core.serialization.string(),
            }),
            literal: core.serialization.object({
                value: core.serialization.lazy(async () => (await import("../../..")).LiteralExample),
            }),
            oneOf: core.serialization.object({
                value: core.serialization.lazy(async () => (await import("../../..")).FullOneOfExample),
            }),
            unknown: core.serialization.object({
                value: core.serialization.lazy(async () => (await import("../../..")).FullExample),
            }),
        })
        .transform<FernOpenapiIr.FullExample>({
            transform: (value) => {
                switch (value.type) {
                    case "primitive":
                        return FernOpenapiIr.FullExample.primitive(value.value);
                    case "object":
                        return FernOpenapiIr.FullExample.object(value);
                    case "array":
                        return FernOpenapiIr.FullExample.array(value.value);
                    case "map":
                        return FernOpenapiIr.FullExample.map(value.value);
                    case "enum":
                        return FernOpenapiIr.FullExample.enum(value.value);
                    case "literal":
                        return FernOpenapiIr.FullExample.literal(value.value);
                    case "oneOf":
                        return FernOpenapiIr.FullExample.oneOf(value.value);
                    case "unknown":
                        return FernOpenapiIr.FullExample.unknown(value.value);
                    default:
                        return value as FernOpenapiIr.FullExample;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace FullExample {
    type Raw =
        | FullExample.Primitive
        | FullExample.Object
        | FullExample.Array
        | FullExample.Map
        | FullExample.Enum
        | FullExample.Literal
        | FullExample.OneOf
        | FullExample.Unknown;

    interface Primitive {
        type: "primitive";
        value: serializers.PrimitiveExample.Raw;
    }

    interface Object extends serializers.FullObjectExample.Raw {
        type: "object";
    }

    interface Array {
        type: "array";
        value: serializers.FullExample.Raw[];
    }

    interface Map {
        type: "map";
        value: serializers.KeyValuePair.Raw[];
    }

    interface Enum {
        type: "enum";
        value: string;
    }

    interface Literal {
        type: "literal";
        value: serializers.LiteralExample.Raw;
    }

    interface OneOf {
        type: "oneOf";
        value: serializers.FullOneOfExample.Raw;
    }

    interface Unknown {
        type: "unknown";
        value: serializers.FullExample.Raw;
    }
}
