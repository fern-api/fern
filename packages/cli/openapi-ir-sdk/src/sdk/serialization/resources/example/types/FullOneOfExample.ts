/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const FullOneOfExample: core.serialization.Schema<
    serializers.FullOneOfExample.Raw,
    FernOpenapiIr.FullOneOfExample
> = core.serialization
    .union("type", {
        discriminated: core.serialization.object({
            value: core.serialization.record(
                core.serialization.lazy(async () => (await import("../../..")).PropertyKey),
                core.serialization.lazy(async () => (await import("../../..")).FullExample)
            ),
        }),
        undisciminated: core.serialization.object({
            value: core.serialization.lazy(async () => (await import("../../..")).FullExample),
        }),
    })
    .transform<FernOpenapiIr.FullOneOfExample>({
        transform: (value) => {
            switch (value.type) {
                case "discriminated":
                    return FernOpenapiIr.FullOneOfExample.discriminated(value.value);
                case "undisciminated":
                    return FernOpenapiIr.FullOneOfExample.undisciminated(value.value);
                default:
                    return value as FernOpenapiIr.FullOneOfExample;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace FullOneOfExample {
    type Raw = FullOneOfExample.Discriminated | FullOneOfExample.Undisciminated;

    interface Discriminated {
        type: "discriminated";
        value: Record<serializers.PropertyKey.Raw, serializers.FullExample.Raw>;
    }

    interface Undisciminated {
        type: "undisciminated";
        value: serializers.FullExample.Raw;
    }
}
