/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../..";

export type FullExample =
    | FernOpenapiIr.FullExample.Primitive
    | FernOpenapiIr.FullExample.Object_
    | FernOpenapiIr.FullExample.Array
    | FernOpenapiIr.FullExample.Map
    | FernOpenapiIr.FullExample.Enum
    | FernOpenapiIr.FullExample.Literal
    | FernOpenapiIr.FullExample.OneOf
    | FernOpenapiIr.FullExample.Unknown;

export declare namespace FullExample {
    interface Primitive extends _Utils {
        type: "primitive";
        value: FernOpenapiIr.PrimitiveExample;
    }

    interface Object_ extends FernOpenapiIr.FullObjectExample, _Utils {
        type: "object";
    }

    interface Array extends _Utils {
        type: "array";
        value: FernOpenapiIr.FullExample[];
    }

    interface Map extends _Utils {
        type: "map";
        value: FernOpenapiIr.KeyValuePair[];
    }

    interface Enum extends _Utils {
        type: "enum";
        value: string;
    }

    interface Literal extends _Utils {
        type: "literal";
        value: FernOpenapiIr.LiteralExample;
    }

    interface OneOf extends _Utils {
        type: "oneOf";
        value: FernOpenapiIr.FullOneOfExample;
    }

    interface Unknown extends _Utils {
        type: "unknown";
        value: FernOpenapiIr.FullExample;
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.FullExample._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        primitive: (value: FernOpenapiIr.PrimitiveExample) => _Result;
        object: (value: FernOpenapiIr.FullObjectExample) => _Result;
        array: (value: FernOpenapiIr.FullExample[]) => _Result;
        map: (value: FernOpenapiIr.KeyValuePair[]) => _Result;
        enum: (value: string) => _Result;
        literal: (value: FernOpenapiIr.LiteralExample) => _Result;
        oneOf: (value: FernOpenapiIr.FullOneOfExample) => _Result;
        unknown: (value: FernOpenapiIr.FullExample) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const FullExample = {
    primitive: (value: FernOpenapiIr.PrimitiveExample): FernOpenapiIr.FullExample.Primitive => {
        return {
            value: value,
            type: "primitive",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.Primitive,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    object: (value: FernOpenapiIr.FullObjectExample): FernOpenapiIr.FullExample.Object_ => {
        return {
            ...value,
            type: "object",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.Object_,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    array: (value: FernOpenapiIr.FullExample[]): FernOpenapiIr.FullExample.Array => {
        return {
            value: value,
            type: "array",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.Array,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    map: (value: FernOpenapiIr.KeyValuePair[]): FernOpenapiIr.FullExample.Map => {
        return {
            value: value,
            type: "map",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.Map,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    enum: (value: string): FernOpenapiIr.FullExample.Enum => {
        return {
            value: value,
            type: "enum",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.Enum,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    literal: (value: FernOpenapiIr.LiteralExample): FernOpenapiIr.FullExample.Literal => {
        return {
            value: value,
            type: "literal",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.Literal,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    oneOf: (value: FernOpenapiIr.FullOneOfExample): FernOpenapiIr.FullExample.OneOf => {
        return {
            value: value,
            type: "oneOf",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.OneOf,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    unknown: (value: FernOpenapiIr.FullExample): FernOpenapiIr.FullExample.Unknown => {
        return {
            value: value,
            type: "unknown",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullExample.Unknown,
                visitor: FernOpenapiIr.FullExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullExample._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.FullExample,
        visitor: FernOpenapiIr.FullExample._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "primitive":
                return visitor.primitive(value.value);
            case "object":
                return visitor.object(value);
            case "array":
                return visitor.array(value.value);
            case "map":
                return visitor.map(value.value);
            case "enum":
                return visitor.enum(value.value);
            case "literal":
                return visitor.literal(value.value);
            case "oneOf":
                return visitor.oneOf(value.value);
            case "unknown":
                return visitor.unknown(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
