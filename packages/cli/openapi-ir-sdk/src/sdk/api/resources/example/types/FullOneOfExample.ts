/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../..";

export type FullOneOfExample =
    | FernOpenapiIr.FullOneOfExample.Discriminated
    | FernOpenapiIr.FullOneOfExample.Undisciminated;

export declare namespace FullOneOfExample {
    interface Discriminated extends _Utils {
        type: "discriminated";
        value: Record<FernOpenapiIr.PropertyKey, FernOpenapiIr.FullExample>;
    }

    interface Undisciminated extends _Utils {
        type: "undisciminated";
        value: FernOpenapiIr.FullExample;
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.FullOneOfExample._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        discriminated: (value: Record<FernOpenapiIr.PropertyKey, FernOpenapiIr.FullExample>) => _Result;
        undisciminated: (value: FernOpenapiIr.FullExample) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const FullOneOfExample = {
    discriminated: (
        value: Record<FernOpenapiIr.PropertyKey, FernOpenapiIr.FullExample>
    ): FernOpenapiIr.FullOneOfExample.Discriminated => {
        return {
            value: value,
            type: "discriminated",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullOneOfExample.Discriminated,
                visitor: FernOpenapiIr.FullOneOfExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullOneOfExample._visit(this, visitor);
            },
        };
    },

    undisciminated: (value: FernOpenapiIr.FullExample): FernOpenapiIr.FullOneOfExample.Undisciminated => {
        return {
            value: value,
            type: "undisciminated",
            _visit: function <_Result>(
                this: FernOpenapiIr.FullOneOfExample.Undisciminated,
                visitor: FernOpenapiIr.FullOneOfExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.FullOneOfExample._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.FullOneOfExample,
        visitor: FernOpenapiIr.FullOneOfExample._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "discriminated":
                return visitor.discriminated(value.value);
            case "undisciminated":
                return visitor.undisciminated(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
