/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../..";

export type SchemaWithExample =
    | FernOpenapiIr.SchemaWithExample.Primitive
    | FernOpenapiIr.SchemaWithExample.Object_
    | FernOpenapiIr.SchemaWithExample.Array
    | FernOpenapiIr.SchemaWithExample.Map
    | FernOpenapiIr.SchemaWithExample.Optional
    | FernOpenapiIr.SchemaWithExample.Enum
    | FernOpenapiIr.SchemaWithExample.Reference
    | FernOpenapiIr.SchemaWithExample.Literal
    | FernOpenapiIr.SchemaWithExample.OneOf
    | FernOpenapiIr.SchemaWithExample.Nullable
    | FernOpenapiIr.SchemaWithExample.Unknown;

export declare namespace SchemaWithExample {
    interface Primitive extends FernOpenapiIr.PrimitiveSchemaWithExample, _Utils {
        type: "primitive";
    }

    interface Object_ extends FernOpenapiIr.ObjectSchemaWithExample, _Utils {
        type: "object";
    }

    interface Array extends FernOpenapiIr.ArraySchemaWithExample, _Utils {
        type: "array";
    }

    interface Map extends FernOpenapiIr.MapSchemaWithExample, _Utils {
        type: "map";
    }

    interface Optional extends FernOpenapiIr.OptionalSchemaWithExample, _Utils {
        type: "optional";
    }

    interface Enum extends FernOpenapiIr.EnumSchemaWithExample, _Utils {
        type: "enum";
    }

    interface Reference extends FernOpenapiIr.ReferencedSchema, _Utils {
        type: "reference";
    }

    interface Literal extends FernOpenapiIr.LiteralSchema, _Utils {
        type: "literal";
    }

    interface OneOf extends _Utils {
        type: "oneOf";
        value: FernOpenapiIr.OneOfSchemaWithExample;
    }

    interface Nullable extends FernOpenapiIr.NullableSchemaWithExample, _Utils {
        type: "nullable";
    }

    interface Unknown extends FernOpenapiIr.UnknownSchemaWithExample, _Utils {
        type: "unknown";
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        primitive: (value: FernOpenapiIr.PrimitiveSchemaWithExample) => _Result;
        object: (value: FernOpenapiIr.ObjectSchemaWithExample) => _Result;
        array: (value: FernOpenapiIr.ArraySchemaWithExample) => _Result;
        map: (value: FernOpenapiIr.MapSchemaWithExample) => _Result;
        optional: (value: FernOpenapiIr.OptionalSchemaWithExample) => _Result;
        enum: (value: FernOpenapiIr.EnumSchemaWithExample) => _Result;
        reference: (value: FernOpenapiIr.ReferencedSchema) => _Result;
        literal: (value: FernOpenapiIr.LiteralSchema) => _Result;
        oneOf: (value: FernOpenapiIr.OneOfSchemaWithExample) => _Result;
        nullable: (value: FernOpenapiIr.NullableSchemaWithExample) => _Result;
        unknown: (value: FernOpenapiIr.UnknownSchemaWithExample) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const SchemaWithExample = {
    primitive: (value: FernOpenapiIr.PrimitiveSchemaWithExample): FernOpenapiIr.SchemaWithExample.Primitive => {
        return {
            ...value,
            type: "primitive",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Primitive,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    object: (value: FernOpenapiIr.ObjectSchemaWithExample): FernOpenapiIr.SchemaWithExample.Object_ => {
        return {
            ...value,
            type: "object",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Object_,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    array: (value: FernOpenapiIr.ArraySchemaWithExample): FernOpenapiIr.SchemaWithExample.Array => {
        return {
            ...value,
            type: "array",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Array,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    map: (value: FernOpenapiIr.MapSchemaWithExample): FernOpenapiIr.SchemaWithExample.Map => {
        return {
            ...value,
            type: "map",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Map,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    optional: (value: FernOpenapiIr.OptionalSchemaWithExample): FernOpenapiIr.SchemaWithExample.Optional => {
        return {
            ...value,
            type: "optional",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Optional,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    enum: (value: FernOpenapiIr.EnumSchemaWithExample): FernOpenapiIr.SchemaWithExample.Enum => {
        return {
            ...value,
            type: "enum",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Enum,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    reference: (value: FernOpenapiIr.ReferencedSchema): FernOpenapiIr.SchemaWithExample.Reference => {
        return {
            ...value,
            type: "reference",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Reference,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    literal: (value: FernOpenapiIr.LiteralSchema): FernOpenapiIr.SchemaWithExample.Literal => {
        return {
            ...value,
            type: "literal",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Literal,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    oneOf: (value: FernOpenapiIr.OneOfSchemaWithExample): FernOpenapiIr.SchemaWithExample.OneOf => {
        return {
            value: value,
            type: "oneOf",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.OneOf,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    nullable: (value: FernOpenapiIr.NullableSchemaWithExample): FernOpenapiIr.SchemaWithExample.Nullable => {
        return {
            ...value,
            type: "nullable",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Nullable,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    unknown: (value: FernOpenapiIr.UnknownSchemaWithExample): FernOpenapiIr.SchemaWithExample.Unknown => {
        return {
            ...value,
            type: "unknown",
            _visit: function <_Result>(
                this: FernOpenapiIr.SchemaWithExample.Unknown,
                visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
            ) {
                return FernOpenapiIr.SchemaWithExample._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.SchemaWithExample,
        visitor: FernOpenapiIr.SchemaWithExample._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "primitive":
                return visitor.primitive(value);
            case "object":
                return visitor.object(value);
            case "array":
                return visitor.array(value);
            case "map":
                return visitor.map(value);
            case "optional":
                return visitor.optional(value);
            case "enum":
                return visitor.enum(value);
            case "reference":
                return visitor.reference(value);
            case "literal":
                return visitor.literal(value);
            case "oneOf":
                return visitor.oneOf(value.value);
            case "nullable":
                return visitor.nullable(value);
            case "unknown":
                return visitor.unknown(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
