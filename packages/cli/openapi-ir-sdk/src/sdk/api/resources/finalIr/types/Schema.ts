/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../..";

export type Schema =
    | FernOpenapiIr.Schema.Primitive
    | FernOpenapiIr.Schema.Object_
    | FernOpenapiIr.Schema.Array
    | FernOpenapiIr.Schema.Map
    | FernOpenapiIr.Schema.Optional
    | FernOpenapiIr.Schema.Enum
    | FernOpenapiIr.Schema.Reference
    | FernOpenapiIr.Schema.Literal
    | FernOpenapiIr.Schema.OneOf
    | FernOpenapiIr.Schema.Nullable
    | FernOpenapiIr.Schema.Unknown;

export declare namespace Schema {
    interface Primitive extends FernOpenapiIr.PrimitiveSchema, _Utils {
        type: "primitive";
    }

    interface Object_ extends FernOpenapiIr.ObjectSchema, _Utils {
        type: "object";
    }

    interface Array extends FernOpenapiIr.ArraySchema, _Utils {
        type: "array";
    }

    interface Map extends FernOpenapiIr.MapSchema, _Utils {
        type: "map";
    }

    interface Optional extends FernOpenapiIr.OptionalSchema, _Utils {
        type: "optional";
    }

    interface Enum extends FernOpenapiIr.EnumSchema, _Utils {
        type: "enum";
    }

    interface Reference extends FernOpenapiIr.ReferencedSchema, _Utils {
        type: "reference";
    }

    interface Literal extends FernOpenapiIr.LiteralSchema, _Utils {
        type: "literal";
    }

    interface OneOf extends _Utils {
        type: "oneOf";
        value: FernOpenapiIr.OneOfSchema;
    }

    interface Nullable extends FernOpenapiIr.NullableSchema, _Utils {
        type: "nullable";
    }

    interface Unknown extends FernOpenapiIr.WithName, _Utils {
        type: "unknown";
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.Schema._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        primitive: (value: FernOpenapiIr.PrimitiveSchema) => _Result;
        object: (value: FernOpenapiIr.ObjectSchema) => _Result;
        array: (value: FernOpenapiIr.ArraySchema) => _Result;
        map: (value: FernOpenapiIr.MapSchema) => _Result;
        optional: (value: FernOpenapiIr.OptionalSchema) => _Result;
        enum: (value: FernOpenapiIr.EnumSchema) => _Result;
        reference: (value: FernOpenapiIr.ReferencedSchema) => _Result;
        literal: (value: FernOpenapiIr.LiteralSchema) => _Result;
        oneOf: (value: FernOpenapiIr.OneOfSchema) => _Result;
        nullable: (value: FernOpenapiIr.NullableSchema) => _Result;
        unknown: (value: FernOpenapiIr.WithName) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const Schema = {
    primitive: (value: FernOpenapiIr.PrimitiveSchema): FernOpenapiIr.Schema.Primitive => {
        return {
            ...value,
            type: "primitive",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Primitive,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    object: (value: FernOpenapiIr.ObjectSchema): FernOpenapiIr.Schema.Object_ => {
        return {
            ...value,
            type: "object",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Object_,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    array: (value: FernOpenapiIr.ArraySchema): FernOpenapiIr.Schema.Array => {
        return {
            ...value,
            type: "array",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Array,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    map: (value: FernOpenapiIr.MapSchema): FernOpenapiIr.Schema.Map => {
        return {
            ...value,
            type: "map",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Map,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    optional: (value: FernOpenapiIr.OptionalSchema): FernOpenapiIr.Schema.Optional => {
        return {
            ...value,
            type: "optional",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Optional,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    enum: (value: FernOpenapiIr.EnumSchema): FernOpenapiIr.Schema.Enum => {
        return {
            ...value,
            type: "enum",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Enum,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    reference: (value: FernOpenapiIr.ReferencedSchema): FernOpenapiIr.Schema.Reference => {
        return {
            ...value,
            type: "reference",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Reference,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    literal: (value: FernOpenapiIr.LiteralSchema): FernOpenapiIr.Schema.Literal => {
        return {
            ...value,
            type: "literal",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Literal,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    oneOf: (value: FernOpenapiIr.OneOfSchema): FernOpenapiIr.Schema.OneOf => {
        return {
            value: value,
            type: "oneOf",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.OneOf,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    nullable: (value: FernOpenapiIr.NullableSchema): FernOpenapiIr.Schema.Nullable => {
        return {
            ...value,
            type: "nullable",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Nullable,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    unknown: (value: FernOpenapiIr.WithName): FernOpenapiIr.Schema.Unknown => {
        return {
            ...value,
            type: "unknown",
            _visit: function <_Result>(
                this: FernOpenapiIr.Schema.Unknown,
                visitor: FernOpenapiIr.Schema._Visitor<_Result>
            ) {
                return FernOpenapiIr.Schema._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(value: FernOpenapiIr.Schema, visitor: FernOpenapiIr.Schema._Visitor<_Result>): _Result => {
        switch (value.type) {
            case "primitive":
                return visitor.primitive(value);
            case "object":
                return visitor.object(value);
            case "array":
                return visitor.array(value);
            case "map":
                return visitor.map(value);
            case "optional":
                return visitor.optional(value);
            case "enum":
                return visitor.enum(value);
            case "reference":
                return visitor.reference(value);
            case "literal":
                return visitor.literal(value);
            case "oneOf":
                return visitor.oneOf(value.value);
            case "nullable":
                return visitor.nullable(value);
            case "unknown":
                return visitor.unknown(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
