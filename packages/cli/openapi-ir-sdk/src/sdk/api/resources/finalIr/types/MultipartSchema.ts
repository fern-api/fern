/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../..";

export type MultipartSchema = FernOpenapiIr.MultipartSchema.File_ | FernOpenapiIr.MultipartSchema.Json;

export declare namespace MultipartSchema {
    interface File_ extends FernOpenapiIr.FileSchema, _Utils {
        type: "file";
    }

    interface Json extends _Utils {
        type: "json";
        value: FernOpenapiIr.Schema;
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.MultipartSchema._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        file: (value: FernOpenapiIr.FileSchema) => _Result;
        json: (value: FernOpenapiIr.Schema) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const MultipartSchema = {
    file: (value: FernOpenapiIr.FileSchema): FernOpenapiIr.MultipartSchema.File_ => {
        return {
            ...value,
            type: "file",
            _visit: function <_Result>(
                this: FernOpenapiIr.MultipartSchema.File_,
                visitor: FernOpenapiIr.MultipartSchema._Visitor<_Result>
            ) {
                return FernOpenapiIr.MultipartSchema._visit(this, visitor);
            },
        };
    },

    json: (value: FernOpenapiIr.Schema): FernOpenapiIr.MultipartSchema.Json => {
        return {
            value: value,
            type: "json",
            _visit: function <_Result>(
                this: FernOpenapiIr.MultipartSchema.Json,
                visitor: FernOpenapiIr.MultipartSchema._Visitor<_Result>
            ) {
                return FernOpenapiIr.MultipartSchema._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.MultipartSchema,
        visitor: FernOpenapiIr.MultipartSchema._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "file":
                return visitor.file(value);
            case "json":
                return visitor.json(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
