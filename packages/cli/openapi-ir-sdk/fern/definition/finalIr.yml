imports:
  example: example.yml
  commons: commons.yml

types:
  OpenAPIIntermediateRepresentation:
    properties:
      title: optional<string>
      description: optional<string>
      servers: list<commons.Server>
      tags: Tags
      hasEndpointsMarkedInternal: boolean
      endpoints: list<Endpoint>
      webhooks: list<Webhook>
      channel: list<WebsocketChannel>
      schemas: map<commons.SchemaId, Schema>
      errors: map<commons.StatusCode, HttpError>
      variables: map<string, PrimitiveSchema>
      nonRequestReferencedSchemas:
        type: set<commons.SchemaId>
        docs: Whether the schema is directly referenced from a response, parameters, or other schemas
      securitySchemes: map<commons.SecuritySchemeId, commons.SecurityScheme>
      globalHeaders: optional<list<GlobalHeader>>

  GlobalHeader:
    properties:
      header: string
      name: optional<string>
      optional: optional<boolean>

  Tags:
    properties:
      tagsById: map<commons.TagId, commons.Tag>
      orderedTagIds: optional<list<commons.TagId>>

  HttpError:
    extends:
      - commons.WithDescription
      - commons.WithName
    properties:
      schema: optional<Schema>

  Webhook:
    extends: commons.WithDescription
    properties:
      sdkName: optional<EndpointSdkName>
      method: WebhookHttpMethod
      summary: optional<string>
      operationId: string
      tags: list<commons.TagId>
      headers: list<Header>
      generatedPayloadName:
        type: string
        docs: |
          Populated as ${operationId}Payload
      payload: Schema
  
  WebsocketChannel: 
    extends: commons.WithDescription
    properties: 
      path: string
      groupName: list<commons.SdkGroupName>
      summary: optional<string>
      handshake: WebsocketHandshake
      publish: optional<Schema>
      subscribe: optional<Schema>
      examples: list<WebsocketSessionExample>
    
  WebsocketHandshake: 
    properties: 
      queryParameters: list<QueryParameter>
      headers: list<Header>
  
  WebsocketSessionExample:
    docs: |
      A complete example associated with the websocket channel.
    extends: commons.WithDescription
    properties:
      name: optional<string>
      queryParameters: optional<list<QueryParameterExample>>
      headers: optional<list<HeaderExample>>
      messages: list<WebsocketMessageExample>
  
  WebsocketMessageExample: 
    extends: commons.WithDescription
    properties: 
      messageType: string
      payload: example.FullExample

  WebhookHttpMethod:
    enum:
      - GET
      - POST

  EndpointAvailability:
    enum:
      - GenerallyAvailable
      - Beta
      - Deprecated

  Endpoint:
    extends: commons.WithDescription
    properties:
      authed: boolean
      internal: optional<boolean>
      method: HttpMethod
      availability: optional<EndpointAvailability>
      audiences: list<string>
      path:
        type: string
        docs: |
          This string includes templated path parameters. 
          For example, `/users/{userId}` is a valid value.
      summary: optional<string>
      operationId: optional<string>
      tags: list<commons.TagId>
      pathParameters: list<PathParameter>
      queryParameters: list<QueryParameter>
      headers: list<Header>
      sdkName: optional<EndpointSdkName>
      generatedRequestName:
        type: string
        docs: |
          Populated as ${operationId}Request
      requestNameOverride:
        type: optional<string>
        docs: |
          Populated by `x-request-name` on a path object.
      request: optional<Request>
      response: optional<Response>
      errorStatusCode: list<commons.StatusCode>
      server: list<commons.Server>
      examples: list<EndpointExample>

  CustomCodeSample:
    availability: in-development
    union:
      language: CustomCodeSampleLanguage
      sdk: CustomCodeSampleSdk

  CustomCodeSampleLanguage:
    docs: |
      This is intended to co-exist with the auto-generated code samples.
    extends: commons.WithDescription
    properties:
      name:
        type: optional<string>
        docs: Override the example name.
      language: string
      code: string
      install:
        type: optional<string>
        docs: |
          The command to install the dependencies for the code sample.
          For example, `npm install` or `pip install -r requirements.txt`.

  CustomCodeSampleSdk:
    docs: |
      This will be used to replace the auto-generated code samples.
    extends: commons.WithDescription
    properties:
      name:
        type: optional<string>
        docs: Override the example name.
      sdk: SupportedSdkLanguage
      code: string

  # be sure to keep this in sync with the SupportedSdkLanguage enum
  SupportedSdkLanguage:
    enum:
      - curl
      - python
      - javascript
      - typescript
      - go
      - ruby
      - csharp
      - java
      - js # alias to javascript
      - node # alias to javascript
      - ts # alias to typescript
      - nodets # alias to typescript
      - golang # alias to go
      - dotnet # alias to csharp
      - jvm # alias to java

  EndpointExample:
    docs: |
      A complete example associated with the endpoint. All child
      examples will be fully complete (i.e. there will be no
      PartialObjectExamples).
    extends: commons.WithDescription
    properties:
      name: optional<string>
      pathParameters: optional<list<PathParameterExample>>
      queryParameters: optional<list<QueryParameterExample>>
      headers: optional<list<HeaderExample>>
      request: optional<example.FullExample>
      response: optional<example.FullExample>
      codeSamples: list<CustomCodeSample>

  PathParameterExample:
    properties:
      name: string
      value: example.FullExample

  QueryParameterExample:
    properties:
      name: string
      value: example.FullExample

  HeaderExample:
    properties:
      name: string
      value: example.FullExample

  EndpointSdkName:
    properties:
      groupName:
        type: list<commons.SdkGroupName>
        docs: This is populated by `x-fern-sdk-method-name`
      methodName:
        type: string
        docs: This is populated by `x-fern-sdk-group-name`

  HttpMethod:
    enum:
      - GET
      - POST
      - PUT
      - PATCH
      - DELETE
      - HEAD
      - OPTIONS
      - TRACE

  PathParameter:
    extends: commons.WithDescription
    properties:
      name: string
      schema: Schema
      variableReference: optional<string>

  QueryParameter:
    extends: commons.WithDescription
    properties:
      name: string
      schema: Schema
      parameterNameOverride:
        type: optional<string>
        docs: |
          Populated by `x-fern-parameter-name` on a parameter object.

  Header:
    extends: commons.WithDescription
    properties:
      name: string
      schema: Schema
      parameterNameOverride:
        type: optional<string>
        docs: |
          Populated by `x-fern-parameter-name` on a parameter object.

  Request:
    union:
      octetStream: OctetStremRequest
      multipart: MultipartRequest
      json: JsonRequest

  OctetStremRequest:
    extends: commons.WithDescription
    properties: {}

  JsonRequest:
    extends: commons.WithDescription
    properties:
      schema: Schema
      contentType: optional<string>

  MultipartRequest:
    extends: commons.WithDescription
    properties:
      name:
        type: optional<string>
        docs: If multipart was a reference, this will be the schema name.
      properties: list<MultipartRequestProperty>

  MultipartRequestProperty:
    extends: commons.WithDescription
    properties:
      key: string
      schema: MultipartSchema

  FileSchema:
    properties:
      isOptional: boolean
      isArray: boolean

  MultipartSchema:
    union:
      file: FileSchema
      json: Schema

  Response:
    union:
      file: FileResponse
      json: JsonResponse
      text: TextResponse
      streamingText: TextResponse
      streamingJson:
        type: JsonResponse
        docs: Checks if `x-fern-streaming` is present and is true.

  FileResponse:
    extends: commons.WithDescription

  TextResponse:
    extends: commons.WithDescription

  JsonResponse:
    extends: commons.WithDescription
    properties:
      schema: Schema
      responseProperty: optional<string>

  Schema:
    union:
      primitive: PrimitiveSchema
      object: ObjectSchema
      array: ArraySchema
      map: MapSchema
      optional: OptionalSchema
      enum: EnumSchema
      reference: ReferencedSchema
      literal: LiteralSchema
      oneOf: OneOfSchema
      nullable: NullableSchema
      unknown: commons.WithName

  PrimitiveSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      schema: PrimitiveSchemaValue

  PrimitiveSchemaValue:
    union:
      int: {}
      int64: {}
      float: {}
      double: {}
      string: StringSchema
      datetime: {}
      date: {}
      base64: {}
      boolean: {}

  StringSchema:
    properties:
      minLength: optional<integer>
      maxLength: optional<integer>

  LiteralSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      value: LiteralSchemaValue

  LiteralSchemaValue:
    union:
      boolean: boolean
      string: string

  ObjectSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      allOf: list<ReferencedSchema>
      properties: list<ObjectProperty>
      allOfPropertyConflicts: list<AllOfPropertyConflict>

  # OpenAPI IR to Fern:
  # For every allOfPropertyConflict, we will inline the SchemaIds that conflict.
  # If the property conflict has conflicting type signatures, then we will make the type unknown.
  AllOfPropertyConflict:
    properties:
      propertyKey: string
      allOfSchemaIds:
        type: list<commons.SchemaId>
        docs: The allOf schemas that conflict with each other
      conflictingTypeSignatures:
        type: boolean
        docs: If the allOf schemas have different types. Unclear how to resolve this. Possibly make the property unknown?

  ObjectProperty:
    properties:
      key: string
      schema: Schema
      conflict:
        type: map<commons.SchemaId, ObjectPropertyConflictInfo>
        docs: The schemas that conflict with this property
      generatedName:
        type: string
        docs: |
          A unique name for the property.
      audiences: list<string>

  ObjectPropertyConflictInfo:
    properties:
      differentSchema: boolean

  ArraySchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      value: Schema

  MapSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      key: PrimitiveSchema
      value: Schema

  OptionalSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      value: Schema

  NullableSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      value: Schema

  EnumSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      values: list<EnumValue>

  EnumValue:
    extends:
      - commons.WithDescription
    properties:
      nameOverride:
        type: optional<string>
        docs: Codegen friendly name. Read from `X-Enum-Names`
      generatedName:
        type: string
        docs: Codegen friendly name. Generated by removing unalphanumeric characters and camel casing.
      value:
        type: string
        docs: Value of the enum
      casing: optional<CasingOverrides>
  
  CasingOverrides: 
    properties: 
      snake: optional<string>
      camel: optional<string>
      screamingSnake: optional<string>
      pascal: optional<string>

  ReferencedSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      schema: commons.SchemaId

  OneOfSchema:
    union:
      discriminated: DiscriminatedOneOfSchema
      undisciminated: UnDiscriminatedOneOfSchema

  DiscriminatedOneOfSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      discriminantProperty: string
      commonProperties: list<CommonProperty>
      schemas: map<string, Schema>

  CommonProperty:
    properties:
      key: string
      schema: Schema

  UnDiscriminatedOneOfSchema:
    extends:
      - commons.WithDescription
      - commons.WithName
      - commons.WithSdkGroupName
    properties:
      schemas: list<Schema>
