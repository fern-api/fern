/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernDefinition from "../../../../api/index";
import * as core from "../../../../core";
import { TypeReferenceSchema } from "../../types/types/TypeReferenceSchema";
import { ServiceTransport } from "./ServiceTransport";
import { SourceSchema } from "../../source/types/SourceSchema";
import { HttpEndpointSchema } from "./HttpEndpointSchema";
import { DeclarationWithoutDocsSchema } from "../../commons/types/DeclarationWithoutDocsSchema";
import { WithDisplayName } from "../../commons/types/WithDisplayName";

export const HttpServiceSchema: core.serialization.ObjectSchema<
    serializers.HttpServiceSchema.Raw,
    FernDefinition.HttpServiceSchema
> = core.serialization
    .object({
        auth: core.serialization.boolean(),
        url: core.serialization.string().optional(),
        "base-path": core.serialization.string(),
        "path-parameters": core.serialization.record(core.serialization.string(), TypeReferenceSchema).optional(),
        idempotent: core.serialization.boolean().optional(),
        headers: core.serialization.record(core.serialization.string(), TypeReferenceSchema).optional(),
        transport: ServiceTransport.optional(),
        source: SourceSchema.optional(),
        endpoints: core.serialization.record(core.serialization.string(), HttpEndpointSchema),
    })
    .extend(DeclarationWithoutDocsSchema)
    .extend(WithDisplayName);

export declare namespace HttpServiceSchema {
    export interface Raw extends DeclarationWithoutDocsSchema.Raw, WithDisplayName.Raw {
        auth: boolean;
        url?: string | null;
        "base-path": string;
        "path-parameters"?: Record<string, TypeReferenceSchema.Raw> | null;
        idempotent?: boolean | null;
        headers?: Record<string, TypeReferenceSchema.Raw> | null;
        transport?: ServiceTransport.Raw | null;
        source?: SourceSchema.Raw | null;
        endpoints: Record<string, HttpEndpointSchema.Raw>;
    }
}
