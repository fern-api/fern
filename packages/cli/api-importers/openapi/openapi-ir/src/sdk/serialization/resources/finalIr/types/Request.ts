/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { OctetStreamRequest } from "./OctetStreamRequest";
import { MultipartRequest } from "./MultipartRequest";
import { JsonRequest } from "./JsonRequest";

export const Request: core.serialization.Schema<serializers.Request.Raw, FernOpenapiIr.Request> = core.serialization
    .union("type", {
        octetStream: OctetStreamRequest,
        multipart: MultipartRequest,
        json: JsonRequest,
    })
    .transform<FernOpenapiIr.Request>({
        transform: (value) => {
            switch (value.type) {
                case "octetStream":
                    return FernOpenapiIr.Request.octetStream(value);
                case "multipart":
                    return FernOpenapiIr.Request.multipart(value);
                case "json":
                    return FernOpenapiIr.Request.json(value);
                default:
                    return value as FernOpenapiIr.Request;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace Request {
    export type Raw = Request.OctetStream | Request.Multipart | Request.Json;

    export interface OctetStream extends OctetStreamRequest.Raw {
        type: "octetStream";
    }

    export interface Multipart extends MultipartRequest.Raw {
        type: "multipart";
    }

    export interface Json extends JsonRequest.Raw {
        type: "json";
    }
}
