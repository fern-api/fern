/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { NamedFullExample } from "./NamedFullExample";
import { WithDescription } from "../../commons/types/WithDescription";
import { WithSource } from "../../commons/types/WithSource";
import { WithSdkMethodName } from "../../commons/types/WithSdkMethodName";

export const ParseFormUrlEncodedRequest: core.serialization.ObjectSchema<
    serializers.ParseFormUrlEncodedRequest.Raw,
    FernOpenapiIr.ParseFormUrlEncodedRequest
> = core.serialization
    .objectWithoutOptionalProperties({
        schema: core.serialization.lazy(() => serializers.SchemaWithExample),
        contentType: core.serialization.string().optional(),
        fullExamples: core.serialization.list(NamedFullExample).optional(),
        additionalProperties: core.serialization.boolean(),
    })
    .extend(WithDescription)
    .extend(WithSource)
    .extend(WithSdkMethodName);

export declare namespace ParseFormUrlEncodedRequest {
    export interface Raw extends WithDescription.Raw, WithSource.Raw, WithSdkMethodName.Raw {
        schema: serializers.SchemaWithExample.Raw;
        contentType?: string | null;
        fullExamples?: NamedFullExample.Raw[] | null;
        additionalProperties: boolean;
    }
}
