/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";

export const RetriesConfiguration: core.serialization.Schema<
    serializers.RetriesConfiguration.Raw,
    FernOpenapiIr.RetriesConfiguration
> = core.serialization
    .union("type", {
        disabled: core.serialization.object({
            value: core.serialization.boolean().optional(),
        }),
    })
    .transform<FernOpenapiIr.RetriesConfiguration>({
        transform: (value) => {
            switch (value.type) {
                case "disabled":
                    return FernOpenapiIr.RetriesConfiguration.disabled(value.value);
                default:
                    return value as FernOpenapiIr.RetriesConfiguration;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace RetriesConfiguration {
    export type Raw = RetriesConfiguration.Disabled;

    export interface Disabled {
        type: "disabled";
        value?: boolean | null;
    }
}
