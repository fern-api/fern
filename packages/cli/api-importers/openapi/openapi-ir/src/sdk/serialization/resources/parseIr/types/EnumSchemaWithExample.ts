/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { EnumValue } from "../../finalIr/types/EnumValue";
import { WithSdkGroupName } from "../../commons/types/WithSdkGroupName";
import { WithNamespace } from "../../commons/types/WithNamespace";
import { WithName } from "../../commons/types/WithName";
import { WithDescription } from "../../commons/types/WithDescription";
import { WithAvailability } from "../../commons/types/WithAvailability";
import { WithSource } from "../../commons/types/WithSource";
import { WithTitle } from "../../commons/types/WithTitle";
import { WithInline } from "../../commons/types/WithInline";

export const EnumSchemaWithExample: core.serialization.ObjectSchema<
    serializers.EnumSchemaWithExample.Raw,
    FernOpenapiIr.EnumSchemaWithExample
> = core.serialization
    .objectWithoutOptionalProperties({
        default: EnumValue.optional(),
        values: core.serialization.list(EnumValue),
        example: core.serialization.string().optional(),
    })
    .extend(WithSdkGroupName)
    .extend(WithNamespace)
    .extend(WithName)
    .extend(WithDescription)
    .extend(WithAvailability)
    .extend(WithSource)
    .extend(WithTitle)
    .extend(WithInline);

export declare namespace EnumSchemaWithExample {
    export interface Raw
        extends WithSdkGroupName.Raw,
            WithNamespace.Raw,
            WithName.Raw,
            WithDescription.Raw,
            WithAvailability.Raw,
            WithSource.Raw,
            WithTitle.Raw,
            WithInline.Raw {
        default?: EnumValue.Raw | null;
        values: EnumValue.Raw[];
        example?: string | null;
    }
}
