/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as FernOpenapiIr from "../../../../api/index";
import * as core from "../../../../core";
import { IntWithExample } from "./IntWithExample";
import { Int64WithExample } from "./Int64WithExample";
import { UintWithExample } from "./UintWithExample";
import { Uint64WithExample } from "./Uint64WithExample";
import { FloatWithExample } from "./FloatWithExample";
import { DoubleWithExample } from "./DoubleWithExample";
import { StringSchemaWithExample } from "./StringSchemaWithExample";
import { DatetimeWithExample } from "./DatetimeWithExample";
import { DateWithExample } from "./DateWithExample";
import { Base64WithExample } from "./Base64WithExample";
import { BooleanWithExample } from "./BooleanWithExample";

export const PrimitiveSchemaValueWithExample: core.serialization.Schema<
    serializers.PrimitiveSchemaValueWithExample.Raw,
    FernOpenapiIr.PrimitiveSchemaValueWithExample
> = core.serialization
    .union("type", {
        int: IntWithExample,
        int64: Int64WithExample,
        uint: UintWithExample,
        uint64: Uint64WithExample,
        float: FloatWithExample,
        double: DoubleWithExample,
        string: StringSchemaWithExample,
        datetime: DatetimeWithExample,
        date: DateWithExample,
        base64: Base64WithExample,
        boolean: BooleanWithExample,
    })
    .transform<FernOpenapiIr.PrimitiveSchemaValueWithExample>({
        transform: (value) => {
            switch (value.type) {
                case "int":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.int(value);
                case "int64":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.int64(value);
                case "uint":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.uint(value);
                case "uint64":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.uint64(value);
                case "float":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.float(value);
                case "double":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.double(value);
                case "string":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.string(value);
                case "datetime":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.datetime(value);
                case "date":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.date(value);
                case "base64":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.base64(value);
                case "boolean":
                    return FernOpenapiIr.PrimitiveSchemaValueWithExample.boolean(value);
                default:
                    return value as FernOpenapiIr.PrimitiveSchemaValueWithExample;
            }
        },
        untransform: ({ _visit, ...value }) => value as any,
    });

export declare namespace PrimitiveSchemaValueWithExample {
    export type Raw =
        | PrimitiveSchemaValueWithExample.Int
        | PrimitiveSchemaValueWithExample.Int64
        | PrimitiveSchemaValueWithExample.Uint
        | PrimitiveSchemaValueWithExample.Uint64
        | PrimitiveSchemaValueWithExample.Float
        | PrimitiveSchemaValueWithExample.Double
        | PrimitiveSchemaValueWithExample.String
        | PrimitiveSchemaValueWithExample.Datetime
        | PrimitiveSchemaValueWithExample.Date
        | PrimitiveSchemaValueWithExample.Base64
        | PrimitiveSchemaValueWithExample.Boolean;

    export interface Int extends IntWithExample.Raw {
        type: "int";
    }

    export interface Int64 extends Int64WithExample.Raw {
        type: "int64";
    }

    export interface Uint extends UintWithExample.Raw {
        type: "uint";
    }

    export interface Uint64 extends Uint64WithExample.Raw {
        type: "uint64";
    }

    export interface Float extends FloatWithExample.Raw {
        type: "float";
    }

    export interface Double extends DoubleWithExample.Raw {
        type: "double";
    }

    export interface String extends StringSchemaWithExample.Raw {
        type: "string";
    }

    export interface Datetime extends DatetimeWithExample.Raw {
        type: "datetime";
    }

    export interface Date extends DateWithExample.Raw {
        type: "date";
    }

    export interface Base64 extends Base64WithExample.Raw {
        type: "base64";
    }

    export interface Boolean extends BooleanWithExample.Raw {
        type: "boolean";
    }
}
