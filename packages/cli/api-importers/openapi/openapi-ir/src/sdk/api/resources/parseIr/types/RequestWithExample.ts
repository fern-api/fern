/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../../index";

export type RequestWithExample =
    | FernOpenapiIr.RequestWithExample.OctetStream
    | FernOpenapiIr.RequestWithExample.Multipart
    | FernOpenapiIr.RequestWithExample.Json
    | FernOpenapiIr.RequestWithExample.FormUrlEncoded;

export namespace RequestWithExample {
    export interface OctetStream extends FernOpenapiIr.ParseOctetStreamRequest, _Utils {
        type: "octetStream";
    }

    export interface Multipart extends FernOpenapiIr.ParseMultipartRequest, _Utils {
        type: "multipart";
    }

    export interface Json extends FernOpenapiIr.JsonRequestWithExample, _Utils {
        type: "json";
    }

    export interface FormUrlEncoded extends FernOpenapiIr.ParseFormUrlEncodedRequest, _Utils {
        type: "formUrlEncoded";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.RequestWithExample._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        octetStream: (value: FernOpenapiIr.ParseOctetStreamRequest) => _Result;
        multipart: (value: FernOpenapiIr.ParseMultipartRequest) => _Result;
        json: (value: FernOpenapiIr.JsonRequestWithExample) => _Result;
        formUrlEncoded: (value: FernOpenapiIr.ParseFormUrlEncodedRequest) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const RequestWithExample = {
    octetStream: (value: FernOpenapiIr.ParseOctetStreamRequest): FernOpenapiIr.RequestWithExample.OctetStream => {
        return {
            ...value,
            type: "octetStream",
            _visit: function <_Result>(
                this: FernOpenapiIr.RequestWithExample.OctetStream,
                visitor: FernOpenapiIr.RequestWithExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.RequestWithExample._visit(this, visitor);
            },
        };
    },

    multipart: (value: FernOpenapiIr.ParseMultipartRequest): FernOpenapiIr.RequestWithExample.Multipart => {
        return {
            ...value,
            type: "multipart",
            _visit: function <_Result>(
                this: FernOpenapiIr.RequestWithExample.Multipart,
                visitor: FernOpenapiIr.RequestWithExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.RequestWithExample._visit(this, visitor);
            },
        };
    },

    json: (value: FernOpenapiIr.JsonRequestWithExample): FernOpenapiIr.RequestWithExample.Json => {
        return {
            ...value,
            type: "json",
            _visit: function <_Result>(
                this: FernOpenapiIr.RequestWithExample.Json,
                visitor: FernOpenapiIr.RequestWithExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.RequestWithExample._visit(this, visitor);
            },
        };
    },

    formUrlEncoded: (
        value: FernOpenapiIr.ParseFormUrlEncodedRequest,
    ): FernOpenapiIr.RequestWithExample.FormUrlEncoded => {
        return {
            ...value,
            type: "formUrlEncoded",
            _visit: function <_Result>(
                this: FernOpenapiIr.RequestWithExample.FormUrlEncoded,
                visitor: FernOpenapiIr.RequestWithExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.RequestWithExample._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.RequestWithExample,
        visitor: FernOpenapiIr.RequestWithExample._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "octetStream":
                return visitor.octetStream(value);
            case "multipart":
                return visitor.multipart(value);
            case "json":
                return visitor.json(value);
            case "formUrlEncoded":
                return visitor.formUrlEncoded(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
