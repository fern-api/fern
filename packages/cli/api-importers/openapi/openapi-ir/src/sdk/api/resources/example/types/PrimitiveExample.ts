/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../../index";

export type PrimitiveExample =
    | FernOpenapiIr.PrimitiveExample.Int
    | FernOpenapiIr.PrimitiveExample.Int64
    | FernOpenapiIr.PrimitiveExample.Uint
    | FernOpenapiIr.PrimitiveExample.Uint64
    | FernOpenapiIr.PrimitiveExample.Float
    | FernOpenapiIr.PrimitiveExample.Double
    | FernOpenapiIr.PrimitiveExample.String
    | FernOpenapiIr.PrimitiveExample.Datetime
    | FernOpenapiIr.PrimitiveExample.Date_
    | FernOpenapiIr.PrimitiveExample.Base64
    | FernOpenapiIr.PrimitiveExample.Boolean;

export namespace PrimitiveExample {
    export interface Int extends _Utils {
        type: "int";
        value: number;
    }

    export interface Int64 extends _Utils {
        type: "int64";
        value: number;
    }

    export interface Uint extends _Utils {
        type: "uint";
        value: number;
    }

    export interface Uint64 extends _Utils {
        type: "uint64";
        value: number;
    }

    export interface Float extends _Utils {
        type: "float";
        value: number;
    }

    export interface Double extends _Utils {
        type: "double";
        value: number;
    }

    export interface String extends _Utils {
        type: "string";
        value: string;
    }

    export interface Datetime extends _Utils {
        type: "datetime";
        value: string;
    }

    export interface Date_ extends _Utils {
        type: "date";
        value: string;
    }

    export interface Base64 extends _Utils {
        type: "base64";
        value: string;
    }

    export interface Boolean extends _Utils {
        type: "boolean";
        value: boolean;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        int: (value: number) => _Result;
        int64: (value: number) => _Result;
        uint: (value: number) => _Result;
        uint64: (value: number) => _Result;
        float: (value: number) => _Result;
        double: (value: number) => _Result;
        string: (value: string) => _Result;
        datetime: (value: string) => _Result;
        date: (value: string) => _Result;
        base64: (value: string) => _Result;
        boolean: (value: boolean) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const PrimitiveExample = {
    int: (value: number): FernOpenapiIr.PrimitiveExample.Int => {
        return {
            value: value,
            type: "int",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Int,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    int64: (value: number): FernOpenapiIr.PrimitiveExample.Int64 => {
        return {
            value: value,
            type: "int64",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Int64,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    uint: (value: number): FernOpenapiIr.PrimitiveExample.Uint => {
        return {
            value: value,
            type: "uint",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Uint,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    uint64: (value: number): FernOpenapiIr.PrimitiveExample.Uint64 => {
        return {
            value: value,
            type: "uint64",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Uint64,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    float: (value: number): FernOpenapiIr.PrimitiveExample.Float => {
        return {
            value: value,
            type: "float",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Float,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    double: (value: number): FernOpenapiIr.PrimitiveExample.Double => {
        return {
            value: value,
            type: "double",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Double,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    string: (value: string): FernOpenapiIr.PrimitiveExample.String => {
        return {
            value: value,
            type: "string",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.String,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    datetime: (value: string): FernOpenapiIr.PrimitiveExample.Datetime => {
        return {
            value: value,
            type: "datetime",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Datetime,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    date: (value: string): FernOpenapiIr.PrimitiveExample.Date_ => {
        return {
            value: value,
            type: "date",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Date_,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    base64: (value: string): FernOpenapiIr.PrimitiveExample.Base64 => {
        return {
            value: value,
            type: "base64",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Base64,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    boolean: (value: boolean): FernOpenapiIr.PrimitiveExample.Boolean => {
        return {
            value: value,
            type: "boolean",
            _visit: function <_Result>(
                this: FernOpenapiIr.PrimitiveExample.Boolean,
                visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.PrimitiveExample._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.PrimitiveExample,
        visitor: FernOpenapiIr.PrimitiveExample._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "int":
                return visitor.int(value.value);
            case "int64":
                return visitor.int64(value.value);
            case "uint":
                return visitor.uint(value.value);
            case "uint64":
                return visitor.uint64(value.value);
            case "float":
                return visitor.float(value.value);
            case "double":
                return visitor.double(value.value);
            case "string":
                return visitor.string(value.value);
            case "datetime":
                return visitor.datetime(value.value);
            case "date":
                return visitor.date(value.value);
            case "base64":
                return visitor.base64(value.value);
            case "boolean":
                return visitor.boolean(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
