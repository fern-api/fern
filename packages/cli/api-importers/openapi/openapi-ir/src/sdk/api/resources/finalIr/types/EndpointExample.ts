/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../../index";

export type EndpointExample = FernOpenapiIr.EndpointExample.Unknown | FernOpenapiIr.EndpointExample.Full;

export namespace EndpointExample {
    export interface Unknown extends _Utils {
        type: "unknown";
        value: FernOpenapiIr.FernExample | undefined;
    }

    export interface Full extends FernOpenapiIr.FullEndpointExample, _Utils {
        type: "full";
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.EndpointExample._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        unknown: (value: FernOpenapiIr.FernExample | undefined) => _Result;
        full: (value: FernOpenapiIr.FullEndpointExample) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const EndpointExample = {
    unknown: (value?: FernOpenapiIr.FernExample): FernOpenapiIr.EndpointExample.Unknown => {
        return {
            value: value,
            type: "unknown",
            _visit: function <_Result>(
                this: FernOpenapiIr.EndpointExample.Unknown,
                visitor: FernOpenapiIr.EndpointExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.EndpointExample._visit(this, visitor);
            },
        };
    },

    full: (value: FernOpenapiIr.FullEndpointExample): FernOpenapiIr.EndpointExample.Full => {
        return {
            ...value,
            type: "full",
            _visit: function <_Result>(
                this: FernOpenapiIr.EndpointExample.Full,
                visitor: FernOpenapiIr.EndpointExample._Visitor<_Result>,
            ) {
                return FernOpenapiIr.EndpointExample._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.EndpointExample,
        visitor: FernOpenapiIr.EndpointExample._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "unknown":
                return visitor.unknown(value.value);
            case "full":
                return visitor.full(value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
