/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernOpenapiIr from "../../../index";

export type RetriesConfiguration = FernOpenapiIr.RetriesConfiguration.Disabled;

export namespace RetriesConfiguration {
    export interface Disabled extends _Utils {
        type: "disabled";
        value: boolean | undefined;
    }

    export interface _Utils {
        _visit: <_Result>(visitor: FernOpenapiIr.RetriesConfiguration._Visitor<_Result>) => _Result;
    }

    export interface _Visitor<_Result> {
        disabled: (value: boolean | undefined) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const RetriesConfiguration = {
    disabled: (value?: boolean): FernOpenapiIr.RetriesConfiguration.Disabled => {
        return {
            value: value,
            type: "disabled",
            _visit: function <_Result>(
                this: FernOpenapiIr.RetriesConfiguration.Disabled,
                visitor: FernOpenapiIr.RetriesConfiguration._Visitor<_Result>,
            ) {
                return FernOpenapiIr.RetriesConfiguration._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernOpenapiIr.RetriesConfiguration,
        visitor: FernOpenapiIr.RetriesConfiguration._Visitor<_Result>,
    ): _Result => {
        switch (value.type) {
            case "disabled":
                return visitor.disabled(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
