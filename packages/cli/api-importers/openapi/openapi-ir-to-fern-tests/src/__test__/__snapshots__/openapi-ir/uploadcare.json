{
  "title": "Upload API Reference",
  "description": "### Summary\nUpload API provides several ways of uploading files to Uploadcare servers in a\nsecure and reliable way.\n\n### API endpoints\nUpload API's root is located at `https://upload.uploadcare.com/`.\n**Note**: All API endpoints end with a forward slash `/`. Please do not forget to include it.\n\n### API clients\nPlease checkout [API clients](https://uploadcare.com/docs/integrations/) page for a\nlist of official and third party Upload API clients.\n\n### File storage\nEvery uploaded file is **temporary** by nature and subject to be deleted within a\n24-hour period. **Mark the file as stored** to make it permanent:\n* On upload via the [`UPLOADCARE_STORE` flag](/api-refs/upload-api/#operation/baseUpload)\n* [Store](/api-refs/rest-api/v0.6.0/#operation/storeFile) or\n  [copy](/api-refs/rest-api/v0.6.0/#operation/createLocalCopy) an already uploaded\n  file via [REST API](/api-refs/rest-api/v0.6.0/).\n\n**Note**: `UPLOADCARE_STORE=auto` parameter delegates the choice of the\nfile storing behavior to a project\n[auto-store](https://app.uploadcare.com/projects/-/settings/#storage)\nsetting (which is enabled by default). \n\n### File delivery\nOnce uploaded, your files become available via our [CDN](https://uploadcare.com/docs/delivery/).\nThe CDN includes on the fly image processing features and can work as a proxy.\nPlease check the referenced page to learn more.\n",
  "servers": [
    {
      "url": "https://upload.uploadcare.com",
      "description": "Production server"
    }
  ],
  "tags": {
    "tagsById": {
      "Integrations": {
        "id": "Integrations",
        "description": "You don't have to code most of the low-level API interactions.\nWe have high-level [libraries](https://uploadcare.com/docs/integrations/) for all popular platforms:\n* [JavaScript](https://uploadcare.com/docs/integrations/javascript/)\n* [PHP](https://uploadcare.com/docs/integrations/php/)\n* [Python](https://uploadcare.com/docs/integrations/python/) (including Django)\n* [Ruby](https://uploadcare.com/docs/integrations/ruby/) and [Rails](https://uploadcare.com/docs/integrations/rails/)\n* [Swift](https://uploadcare.com/docs/integrations/swift/) (iOS, iPadOS, macOS, tvOS, Linux)\n* [Kotlin](https://uploadcare.com/docs/integrations/android/) (Android)\n* [Java](https://uploadcare.com/docs/integrations/java/)\n* [Golang](https://uploadcare.com/docs/integrations/golang/)\n* [Rust](https://uploadcare.com/docs/integrations/rust/)\n\nIn this API reference, you will see request examples in different languages.\nKeep in mind that running sample queries requires our libraries to be installed and initialized.\n"
      },
      "Upload": {
        "id": "Upload"
      },
      "Groups": {
        "id": "Groups"
      },
      "Errors": {
        "id": "Errors",
        "description": "If the request fails, Upload API returns an error response.\nError responses are returned in the form of a JSON object with an error code, an HTTP status code and an error message.\nThe following errors are possible.\n<table>\n  <tr>\n    <th>Error code</th>\n    <th>HTTP status code</th>\n    <th>Error message</th>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">Base upload errors:</td>\n  </tr>\n  <tr>\n    <td>AccountBlockedError</td>\n    <td>403</td>\n    <td>Account has been blocked.</td>\n  </tr>\n  <tr>\n    <td>AccountLimitsExceededError</td>\n    <td>403</td>\n    <td>Account has reached its limits.</td>\n  </tr>\n  <tr>\n    <td>AccountUnpaidError</td>\n    <td>403</td>\n    <td>Account has been blocked for non payment.</td>\n  </tr>\n  <tr>\n    <td>AutostoreDisabledError</td>\n    <td>403</td>\n    <td>Autostore is disabled.</td>\n  </tr>\n  <tr>\n    <td>BaseViewsError</td>\n    <td>400</td>\n    <td>Request processing failed.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyDuplicatedError</td>\n    <td>400</td>\n    <td>File's metadata key `%s` has a duplicate.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyEmptyError</td>\n    <td>400</td>\n    <td>File's metadata key can not be empty.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyForbiddenError</td>\n    <td>400</td>\n    <td>File's metadata key `%s` contains symbols not allowed by the metadata key format.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeyLengthTooBigError</td>\n    <td>400</td>\n    <td>Length of file metadata key `%s` can not be more than %d symbols.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataKeysNumberTooBigError</td>\n    <td>400</td>\n    <td>A file can not have more than %d metadata keys.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataValueEmptyError</td>\n    <td>400</td>\n    <td>Value of the file metadata key `%s` can not be empty.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataValueForbiddenError</td>\n    <td>400</td>\n    <td>Value of file metadata key `%s` contains symbols not allowed by the metadata value format.</td>\n  </tr>\n  <tr>\n    <td>FileMetadataValueLengthTooBigError</td>\n    <td>400</td>\n    <td>Value of file metadata's key `%s` can not be more than %d symbols in length.</td>\n  </tr>\n  <tr>\n    <td>FileSizeLimitExceededError</td>\n    <td>400</td>\n    <td>File is too large.</td>\n  </tr>\n  <tr>\n    <td>MethodNotAllowedError</td>\n    <td>405</td>\n    <td>HTTP method %s is not allowed for %s</td>\n  </tr>\n  <tr>\n    <td>NullCharactersForbiddenError</td>\n    <td>400</td>\n    <td>Null characters are not allowed.</td>\n  </tr>\n  <tr>\n    <td>PostRequestParserFailedError</td>\n    <td>400</td>\n    <td>HTTP POST request parsing failed.</td>\n  </tr>\n  <tr>\n    <td>ProjectPublicKeyInvalidError</td>\n    <td>403</td>\n    <td>%s is invalid.</td>\n  </tr>\n  <tr>\n    <td>ProjectPublicKeyRemovedError</td>\n    <td>403</td>\n    <td>Project %s is marked as removed.</td>\n  </tr>\n  <tr>\n    <td>ProjectPublicKeyRequiredError</td>\n    <td>403</td>\n    <td>%s is required.</td>\n  </tr>\n  <tr>\n    <td>RequestFileNumberLimitExceededError</td>\n    <td>400</td>\n    <td>The request contains too many files.</td>\n  </tr>\n  <tr>\n    <td>RequestFiledsNumberLimitExceededError</td>\n    <td>400</td>\n    <td>The request contains too many HTTP POST fields.</td>\n  </tr>\n  <tr>\n    <td>RequestSizeLimitExceededError</td>\n    <td>413</td>\n    <td>The size of the request is too large.</td>\n  </tr>\n  <tr>\n    <td>RequestThrottledError</td>\n    <td>429</td>\n    <td>Request was throttled.</td>\n  </tr>\n  <tr>\n    <td>SignatureExpirationError</td>\n    <td>403</td>\n    <td>Expired signature.</td>\n  </tr>\n  <tr>\n    <td>SignatureExpirationInvalidError</td>\n    <td>400</td>\n    <td>`expire` must be a UNIX timestamp.</td>\n  </tr>\n  <tr>\n    <td>SignatureExpirationRequiredError</td>\n    <td>400</td>\n    <td>`expire` is required.</td>\n  </tr>\n  <tr>\n    <td>SignatureInvalidError</td>\n    <td>403</td>\n    <td>Invalid signature.</td>\n  </tr>\n  <tr>\n    <td>SignatureRequiredError</td>\n    <td>400</td>\n    <td>`signature` is required.</td>\n  </tr>\n  <tr>\n    <td>UploadAPIError</td>\n    <td>500</td>\n    <td>Internal error.</td>\n  </tr>\n  <tr>\n    <td>UploadFailedError</td>\n    <td>403</td>\n    <td>Upload failed.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">FromURL upload errors:</td>\n  </tr>\n  <tr>\n    <td>DownloadFileError</td>\n    <td>500</td>\n    <td>Failed to download the file.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPClientError</td>\n    <td>500</td>\n    <td>HTTP client error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPNetworkError</td>\n    <td>500</td>\n    <td>HTTP network error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPServerError</td>\n    <td>500</td>\n    <td>HTTP server error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileHTTPURLValidationError</td>\n    <td>500</td>\n    <td>HTTP URL validation error: %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileInternalServerError</td>\n    <td>500</td>\n    <td>Internal server error.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileNotFoundError</td>\n    <td>500</td>\n    <td>downloaded file not found.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileSizeLimitExceededError</td>\n    <td>500</td>\n    <td>Downloaded file is too big: %s > %s.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileTaskFailedError</td>\n    <td>500</td>\n    <td>download task failed.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileTimeLimitExceededError</td>\n    <td>500</td>\n    <td>Failed to download the file within the allotted time limit of %s seconds.</td>\n  </tr>\n  <tr>\n    <td>DownloadFileValidationFailedError</td>\n    <td>500</td>\n    <td>File validation error: %s</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">File upload errors:</td>\n  </tr>\n  <tr>\n    <td>FileIdInvalidError</td>\n    <td>400</td>\n    <td>file_id is invalid.</td>\n  </tr>\n  <tr>\n    <td>FileIdNotUniqueError</td>\n    <td>400</td>\n    <td>File id must be unique.</td>\n  </tr>\n  <tr>\n    <td>FileIdRequiredError</td>\n    <td>400</td>\n    <td>file_id is required.</td>\n  </tr>\n  <tr>\n    <td>FileNotFoundError</td>\n    <td>404</td>\n    <td>File is not found.</td>\n  </tr>\n  <tr>\n    <td>FileRequiredError</td>\n    <td>400</td>\n    <td>There should be a file.</td>\n  </tr>\n  <tr>\n    <td>FilesNumberLimitExceededError</td>\n    <td>400</td>\n    <td>There are too many files.</td>\n  </tr>\n  <tr>\n    <td>FilesRequiredError</td>\n    <td>400</td>\n    <td>Request does not contain files.</td>\n  </tr>\n  <tr>\n    <td>InternalRequestForbiddenError</td>\n    <td>403</td>\n    <td>Forbidden request.</td>\n  </tr>\n  <tr>\n    <td>InternalRequestInvalidError</td>\n    <td>400</td>\n    <td>Incorrect request.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileAlreadyUploadedError</td>\n    <td>400</td>\n    <td>File is already uploaded.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileCompletionFailedError</td>\n    <td>400</td>\n    <td>Can not complete upload. Wrong parts size?</td>\n  </tr>\n  <tr>\n    <td>MultipartFileIdRequiredError</td>\n    <td>400</td>\n    <td>uuid is required.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileNotFoundError</td>\n    <td>404</td>\n    <td>File is not found.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileSizeLimitExceededError</td>\n    <td>400</td>\n    <td>File size exceeds project limit.</td>\n  </tr>\n  <tr>\n    <td>MultipartFileSizeTooSmallError</td>\n    <td>400</td>\n    <td>File size can not be less than %d bytes. Please use direct upload instead of multipart.</td>\n  </tr>\n  <tr>\n    <td>MultipartPartSizeInvalidError</td>\n    <td>400</td>\n    <td>Multipart Upload Part Size should be an integer.</td>\n  </tr>\n  <tr>\n    <td>MultipartPartSizeTooBigError</td>\n    <td>400</td>\n    <td>Multipart Upload Part Size can not be more than %d bytes.</td>\n  </tr>\n  <tr>\n    <td>MultipartPartSizeTooSmallError</td>\n    <td>400</td>\n    <td>Multipart Upload Part Size can not be less than %d bytes.</td>\n  </tr>\n  <tr>\n    <td>MultipartSizeInvalidError</td>\n    <td>400</td>\n    <td>size should be integer.</td>\n  </tr>\n  <tr>\n    <td>MultipartUploadSizeTooLargeError</td>\n    <td>400</td>\n    <td>Uploaded size is more than expected.</td>\n  </tr>\n  <tr>\n    <td>MultipartUploadSizeTooSmallError</td>\n    <td>400</td>\n    <td>File size mismatch. Not all parts uploaded?</td>\n  </tr>\n  <tr>\n    <td>RequestParamRequiredError</td>\n    <td>400</td>\n    <td>%s is required.</td>\n  </tr>\n  <tr>\n    <td>SourceURLRequiredError</td>\n    <td>400</td>\n    <td>source_url is required.</td>\n  </tr>\n  <tr>\n    <td>TokenRequiredError</td>\n    <td>400</td>\n    <td>token is required.</td>\n  </tr>\n  <tr>\n    <td>UUIDInvalidError</td>\n    <td>400</td>\n    <td>uuid is invalid.</td>\n  </tr>\n  <tr>\n    <td>UploadViewsError</td>\n    <td>400</td>\n    <td>Upload request processing failed.</td>\n  </tr>\n  <tr>\n    <td>UploadcareFileIdDuplicatedError</td>\n    <td>400</td>\n    <td>UPLOADCARE_FILE_ID is duplicated. You are probably a lottery winner.</td>\n  </tr>\n  <tr>\n    <td>UploadcareFileIdInvalidError</td>\n    <td>400</td>\n    <td>UPLOADCARE_FILE_ID should be a valid UUID.</td>\n  </tr>\n  <tr>\n    <td>UploadcareFileIdRequiredError</td>\n    <td>400</td>\n    <td>UPLOADCARE_FILE_ID is required.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">File group errors:</td>\n  </tr>\n  <tr>\n    <td>GroupFileURLParsingFailedError</td>\n    <td>400</td>\n    <td>This is not valid file url: %s.</td>\n  </tr>\n  <tr>\n    <td>GroupFilesInvalidError</td>\n    <td>400</td>\n    <td>No files[N] parameters found.</td>\n  </tr>\n  <tr>\n    <td>GroupFilesNotFoundError</td>\n    <td>400</td>\n    <td>Some files not found.</td>\n  </tr>\n  <tr>\n    <td>GroupIdRequiredError</td>\n    <td>400</td>\n    <td>group_id is required.</td>\n  </tr>\n  <tr>\n    <td>GroupNotFoundError</td>\n    <td>404</td>\n    <td>group_id is invalid.</td>\n  </tr>\n  <tr>\n    <td>GroupViewsError</td>\n    <td>400</td>\n    <td>Request to group processing failed.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">File content validation errors:</td>\n  </tr>\n  <tr>\n    <td>FileInfectedError</td>\n    <td>400</td>\n    <td>The file is infected by %s virus.</td>\n  </tr>\n  <tr>\n    <td>FileTypeForbiddenError</td>\n    <td>400</td>\n    <td>Uploading of these file types is not allowed.</td>\n  </tr>\n\n  <tr>\n    <td colspan=\"3\" style=\"font-weight: bold;\">URL validation errors:</td>\n  </tr>\n  <tr>\n    <td>HostnameNotFoundError</td>\n    <td>400</td>\n    <td>Host does not exist.</td>\n  </tr>\n  <tr>\n    <td>URLBlacklistedError</td>\n    <td>400</td>\n    <td>Source is blacklisted.</td>\n  </tr>\n  <tr>\n    <td>URLHostMalformedError</td>\n    <td>400</td>\n    <td>URL host is malformed.</td>\n  </tr>\n  <tr>\n    <td>URLHostPrivateIPForbiddenError</td>\n    <td>400</td>\n    <td>Only public IPs are allowed.</td>\n  </tr>\n  <tr>\n    <td>URLHostRequiredError</td>\n    <td>400</td>\n    <td>No URL host supplied.</td>\n  </tr>\n  <tr>\n    <td>URLParsingFailedError</td>\n    <td>400</td>\n    <td>Failed to parse URL.</td>\n  </tr>\n  <tr>\n    <td>URLRedirectsLimitExceededError</td>\n    <td>400</td>\n    <td>Too many redirects.</td>\n  </tr>\n  <tr>\n    <td>URLSchemeInvalidError</td>\n    <td>400</td>\n    <td>Invalid URL scheme.</td>\n  </tr>\n  <tr>\n    <td>URLSchemeRequiredError</td>\n    <td>400</td>\n    <td>No URL scheme supplied.</td>\n  </tr>\n  <tr>\n    <td>URLValidationError</td>\n    <td>400</td>\n    <td>Failed to validate URL.</td>\n  </tr>\n\n</table>\n"
      },
      "Other APIs": {
        "id": "Other APIs",
        "description": "You can find the complete reference documentation for the REST API [here](/api-refs/rest-api/) and URL API [here](/api-refs/url-api/).\n"
      }
    },
    "orderedTagIds": [
      "Integrations",
      "Upload",
      "Groups",
      "Errors",
      "Other APIs"
    ]
  },
  "hasEndpointsMarkedInternal": false,
  "endpoints": [
    {
      "summary": "Direct uploads",
      "audiences": [],
      "operationId": "baseUpload",
      "tags": [
        "Upload"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "BaseUploadRequest",
      "request": {
        "properties": [
          {
            "key": "UPLOADCARE_PUB_KEY",
            "schema": {
              "value": {
                "generatedName": "BaseUploadRequestUploadcarePubKey",
                "schema": "projectPublicKeyType",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "json"
            }
          },
          {
            "key": "UPLOADCARE_STORE",
            "schema": {
              "value": {
                "generatedName": "baseUploadRequestUploadcareStore",
                "value": {
                  "generatedName": "BaseUploadRequestUploadcareStore",
                  "schema": "storeType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "{filename}",
            "schema": {
              "isOptional": false,
              "isArray": true,
              "type": "file"
            },
            "description": "File's content"
          },
          {
            "key": "metadata[{key}]",
            "schema": {
              "value": {
                "generatedName": "baseUploadRequestMetadataKey",
                "value": {
                  "generatedName": "BaseUploadRequestMetadataKey",
                  "schema": "metadataValue",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "signature",
            "schema": {
              "value": {
                "generatedName": "baseUploadRequestSignature",
                "value": {
                  "generatedName": "BaseUploadRequestSignature",
                  "schema": "signatureType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "expire",
            "schema": {
              "value": {
                "generatedName": "baseUploadRequestExpire",
                "value": {
                  "generatedName": "BaseUploadRequestExpire",
                  "schema": "expireType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          }
        ],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "multipart"
      },
      "response": {
        "description": "The file was uploaded successfully.",
        "schema": {
          "allOf": [],
          "properties": [
            {
              "conflict": {},
              "generatedName": "baseUploadResponseFilename",
              "key": "filename",
              "schema": {
                "generatedName": "baseUploadResponseFilename",
                "value": {
                  "schema": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "generatedName": "BaseUploadResponseFilename",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": []
            }
          ],
          "allOfPropertyConflicts": [],
          "description": "JSON object where the key is the file name of the uploaded file and\nthe value is the unique ID of the file on our systems.\n",
          "generatedName": "BaseUploadResponse",
          "groupName": [],
          "additionalProperties": false,
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "value": {
              "generatedName": "BadRequestErrorBody",
              "schemas": [
                {
                  "generatedName": "BadRequestErrorBodyZero",
                  "schema": "requestFiledsNumberLimitExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyOne",
                  "schema": "postRequestParserFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwo",
                  "schema": "nullCharactersForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThree",
                  "schema": "fileMetadataKeyDuplicatedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFour",
                  "schema": "fileMetadataKeyEmptyError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFive",
                  "schema": "fileMetadataKeyForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySix",
                  "schema": "fileMetadataKeyLengthTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeven",
                  "schema": "fileMetadataValueEmptyError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEight",
                  "schema": "fileMetadataValueForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyNine",
                  "schema": "fileMetadataValueLengthTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTen",
                  "schema": "fileMetadataKeysNumberTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEleven",
                  "schema": "signatureRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwelve",
                  "schema": "signatureExpirationRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThirteen",
                  "schema": "signatureExpirationInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFourteen",
                  "schema": "filesRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFifteen",
                  "schema": "fileSizeLimitExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySixteen",
                  "schema": "fileTypeForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeventeen",
                  "schema": "fileInfectedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "request-fields-number-limit-exceeded",
              "example": {
                "value": {
                  "value": "The request contains too many HTTP POST fields.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "post-request-parser-failed",
              "example": {
                "value": {
                  "value": "HTTP POST request parsing failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "null-characters-forbidden",
              "example": {
                "value": {
                  "value": "Null characters are not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-duplicate",
              "example": {
                "value": {
                  "value": "File's metadata key `subsystem` has a duplicate.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-empty",
              "example": {
                "value": {
                  "value": "File's metadata key can not be empty.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-forbidden",
              "example": {
                "value": {
                  "value": "File's metadata key `subsystem` contains symbols not allowed by the metadata key format.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-length-too-big",
              "example": {
                "value": {
                  "value": "Length of file metadata key `aaa...` can not be more than 64 symbols.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-empty",
              "example": {
                "value": {
                  "value": "Value of the file metadata key `subsystem` can not be empty.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-forbidden",
              "example": {
                "value": {
                  "value": "Value of file metadata key `subsystem` contains symbols not allowed by the metadata value format.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-length-too-big",
              "example": {
                "value": {
                  "value": "Value of file metadata's key `subsystem` can not be more than 512 symbols in length.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-keys-number-too-big",
              "example": {
                "value": {
                  "value": "A file can not have more than 50 metadata keys.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-required",
              "example": {
                "value": {
                  "value": "`signature` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-required",
              "example": {
                "value": {
                  "value": "`expire` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-invalid",
              "example": {
                "value": {
                  "value": "`expire` must be a UNIX timestamp.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "files-required",
              "example": {
                "value": {
                  "value": "Request does not contain files.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-size-limit-exceeded",
              "example": {
                "value": {
                  "value": "File is too large.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-type-forbidden",
              "example": {
                "value": {
                  "value": "Uploading of these file types is not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-infected",
              "example": {
                "value": {
                  "value": "The file is infected by Win.Test.EICAR_HDB-1 virus.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "value": {
              "generatedName": "ForbiddenErrorBody",
              "schemas": [
                {
                  "generatedName": "ForbiddenErrorBodyZero",
                  "schema": "uploadcarePublicKeyRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyOne",
                  "schema": "uploadcarePublicKeyInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "schema": "autoStoreDisabledError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyThree",
                  "schema": "projectPublicKeyRemovedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFour",
                  "schema": "accountBlockedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFive",
                  "schema": "accountUnpaidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySix",
                  "schema": "uploadFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySeven",
                  "schema": "accountLimitsExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyEight",
                  "schema": "signatureExpirationError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyNine",
                  "schema": "signatureInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request was not allowed.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "public-key-is-required",
              "example": {
                "value": {
                  "value": "UPLOADCARE_PUB_KEY is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "public-key-is-invalid",
              "example": {
                "value": {
                  "value": "UPLOADCARE_PUB_KEY is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "auto-store-is-disabled",
              "example": {
                "value": {
                  "value": "Autostore is disabled.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "project-public-key-removed",
              "example": {
                "value": {
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-blocked",
              "example": {
                "value": {
                  "value": "Account has been blocked.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-unpaid",
              "example": {
                "value": {
                  "value": "Account has been blocked for non payment.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "upload-failed",
              "example": {
                "value": {
                  "value": "Upload failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-limits-exceeded",
              "example": {
                "value": {
                  "value": "Account has reached its limits.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration",
              "example": {
                "value": {
                  "value": "Expired signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-invalid",
              "example": {
                "value": {
                  "value": "Invalid signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "413": {
          "generatedName": "ContentTooLargeError",
          "schema": {
            "schema": {
              "default": "The size of the request is too large.",
              "type": "string"
            },
            "generatedName": "ContentTooLargeErrorBody",
            "groupName": [],
            "type": "primitive"
          },
          "description": "The size of the request is too large.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "value": {
                  "value": "The size of the request is too large.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "schema": {
              "default": "Request was throttled.",
              "type": "string"
            },
            "generatedName": "TooManyRequestsErrorBody",
            "groupName": [],
            "type": "primitive"
          },
          "description": "Request was throttled.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "value": {
                  "value": "Request was throttled.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "Direct file uploads comply with the [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) standard.\nIn other words, you can perform a direct upload by making an HTTP POST request with the Content-Type\nheader set to `multipart/form-data`.\n\n**Note**: Direct file uploads support files smaller than 100 megabytes only.\nIf you would like to upload larger files, please use [Multipart Uploads](/api-refs/upload-api/#operation/multipartFileUploadStart) instead.\n\nFile upload example with curl:\n\n```\ncurl -F \"UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY\" -F \"my_file.jpg=@my_file.jpg\" \"https://upload.uploadcare.com/base/\"\n```\n",
      "authed": false,
      "method": "POST",
      "path": "/base/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "UPLOADCARE_PUB_KEY": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "filename": {
                  "value": {
                    "value": "filename",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { base } from '@uploadcare/upload-client'\n\n// fileData must be `Blob` or `File` or `Buffer`\nconst result = await base(\n  fileData,\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    store: 'auto',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$fileInfo = $uploader->fromPath(__DIR__ . '/squirrel.jpg', null, null, 'auto', [\n    'system' => 'php-uploader',\n    'pet' => 'cat',\n]);\necho \\sprintf(\"URL: %s, ID: %s, Mime type: %s\\n\", $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\nforeach ($fileInfo->getMetadata() as $key => $value) {\n    echo \\sprintf(\"%s: %s\\n\", $key, $value);\n}\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.upload(file_object)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"squirrel\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\n\nlet file = try await uploadcare.uploadFile(data, withName: \"random_file_name.jpg\", store: .auto) { progress in\n  print(\"progress: \\(progress)\")\n}\nprkint(file)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Start multipart upload",
      "audiences": [],
      "operationId": "multipartFileUploadStart",
      "tags": [
        "Upload"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "MultipartFileUploadStartRequest",
      "request": {
        "description": "Multipart upload parameters to start multipart uploading.",
        "properties": [
          {
            "key": "UPLOADCARE_PUB_KEY",
            "schema": {
              "value": {
                "generatedName": "MultipartFileUploadStartRequestUploadcarePubKey",
                "schema": "projectPublicKeyType",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "json"
            }
          },
          {
            "key": "UPLOADCARE_STORE",
            "schema": {
              "value": {
                "generatedName": "multipartFileUploadStartRequestUploadcareStore",
                "value": {
                  "generatedName": "MultipartFileUploadStartRequestUploadcareStore",
                  "schema": "storeType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "filename",
            "schema": {
              "value": {
                "generatedName": "MultipartFileUploadStartRequestFilename",
                "schema": {
                  "example": "myfile.mp4",
                  "type": "string"
                },
                "description": "Original file name of the uploaded file",
                "groupName": [],
                "type": "primitive"
              },
              "type": "json"
            }
          },
          {
            "key": "size",
            "schema": {
              "value": {
                "generatedName": "MultipartFileUploadStartRequestSize",
                "schema": {
                  "example": 27796904,
                  "type": "int"
                },
                "description": "Precise file size of the uploaded file (in bytes).\n**Note**: The size should not exceed max file size cap for your project.\n",
                "groupName": [],
                "type": "primitive"
              },
              "type": "json"
            }
          },
          {
            "key": "part_size",
            "schema": {
              "value": {
                "generatedName": "multipartFileUploadStartRequestPartSize",
                "value": {
                  "generatedName": "MultipartFileUploadStartRequestPartSize",
                  "schema": {
                    "default": 5242880,
                    "minimum": 5242880,
                    "maximum": 5368709120,
                    "example": 10485760,
                    "type": "int"
                  },
                  "description": "Multipart Uploads expect that you will split the uploaded file into equally sized\nparts (except for the last part) and then will upload them to AWS S3 (possibly in parallel).\nBy default, we assume that you will upload the files in 5 megabyte chunks,\nso we return a list of presigned AWS S3 URLs accordingly.\nIf you intend to upload large files (for example, larger than a gigabyte),\nwe recommend to bump the part size and to pass the expected chunk size\nto us as a value of the `part_size` parameter (in bytes).\n",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "content_type",
            "schema": {
              "value": {
                "generatedName": "MultipartFileUploadStartRequestContentType",
                "schema": {
                  "example": "video/mp4",
                  "type": "string"
                },
                "description": "File's MIME-type.",
                "groupName": [],
                "type": "primitive"
              },
              "type": "json"
            }
          },
          {
            "key": "metadata[{key}]",
            "schema": {
              "value": {
                "generatedName": "multipartFileUploadStartRequestMetadataKey",
                "value": {
                  "generatedName": "MultipartFileUploadStartRequestMetadataKey",
                  "schema": "metadataValue",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "signature",
            "schema": {
              "value": {
                "generatedName": "multipartFileUploadStartRequestSignature",
                "value": {
                  "generatedName": "MultipartFileUploadStartRequestSignature",
                  "schema": "signatureType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "expire",
            "schema": {
              "value": {
                "generatedName": "multipartFileUploadStartRequestExpire",
                "value": {
                  "generatedName": "MultipartFileUploadStartRequestExpire",
                  "schema": "expireType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          }
        ],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "multipart"
      },
      "response": {
        "description": "Multipart upload started successfully.",
        "schema": {
          "allOf": [],
          "properties": [
            {
              "conflict": {},
              "generatedName": "multipartFileUploadStartResponseUuid",
              "key": "uuid",
              "schema": {
                "description": "File's UUID.",
                "schema": {
                  "format": "uuid",
                  "type": "string"
                },
                "generatedName": "MultipartFileUploadStartResponseUuid",
                "groupName": [],
                "type": "primitive"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "multipartFileUploadStartResponseParts",
              "key": "parts",
              "schema": {
                "value": {
                  "description": "Upload file parts here.",
                  "schema": {
                    "format": "uri",
                    "type": "string"
                  },
                  "generatedName": "MultipartFileUploadStartResponsePartsItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "MultipartFileUploadStartResponseParts",
                "groupName": [],
                "type": "array"
              },
              "audiences": []
            }
          ],
          "allOfPropertyConflicts": [],
          "generatedName": "MultipartFileUploadStartResponse",
          "groupName": [],
          "additionalProperties": false,
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "value": {
              "generatedName": "BadRequestErrorBody",
              "schemas": [
                {
                  "generatedName": "BadRequestErrorBodyZero",
                  "schema": "requestFiledsNumberLimitExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyOne",
                  "schema": "postRequestParserFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwo",
                  "schema": "nullCharactersForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThree",
                  "schema": "fileMetadataKeyDuplicatedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFour",
                  "schema": "fileMetadataKeyEmptyError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFive",
                  "schema": "fileMetadataKeyForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySix",
                  "schema": "fileMetadataKeyLengthTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeven",
                  "schema": "fileMetadataValueEmptyError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEight",
                  "schema": "fileMetadataValueForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyNine",
                  "schema": "fileMetadataValueLengthTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTen",
                  "schema": "fileMetadataKeysNumberTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEleven",
                  "schema": "signatureRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwelve",
                  "schema": "signatureExpirationRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThirteen",
                  "schema": "signatureExpirationInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFourteen",
                  "schema": "requestParamRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFifteen",
                  "schema": "multipartSizeInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySixteen",
                  "schema": "multipartFileSizeLimitExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeventeen",
                  "schema": "multipartFileSizeTooSmallError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEighteen",
                  "schema": "multipartPartSizeInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyNineteen",
                  "schema": "multipartPartSizeTooSmallError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwenty",
                  "schema": "multipartPartSizeTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "request-fields-number-limit-exceeded",
              "example": {
                "value": {
                  "value": "The request contains too many HTTP POST fields.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "post-request-parser-failed",
              "example": {
                "value": {
                  "value": "HTTP POST request parsing failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "null-characters-forbidden",
              "example": {
                "value": {
                  "value": "Null characters are not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-duplicate",
              "example": {
                "value": {
                  "value": "File's metadata key `subsystem` has a duplicate.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-empty",
              "example": {
                "value": {
                  "value": "File's metadata key can not be empty.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-forbidden",
              "example": {
                "value": {
                  "value": "File's metadata key `subsystem` contains symbols not allowed by the metadata key format.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-length-too-big",
              "example": {
                "value": {
                  "value": "Length of file metadata key `aaa...` can not be more than 64 symbols.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-empty",
              "example": {
                "value": {
                  "value": "Value of the file metadata key `subsystem` can not be empty.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-forbidden",
              "example": {
                "value": {
                  "value": "Value of file metadata key `subsystem` contains symbols not allowed by the metadata value format.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-length-too-big",
              "example": {
                "value": {
                  "value": "Value of file metadata's key `subsystem` can not be more than 512 symbols in length.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-keys-number-too-big",
              "example": {
                "value": {
                  "value": "A file can not have more than 50 metadata keys.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-required",
              "example": {
                "value": {
                  "value": "`signature` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-required",
              "example": {
                "value": {
                  "value": "`expire` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-invalid",
              "example": {
                "value": {
                  "value": "`expire` must be a UNIX timestamp.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "request-param-required",
              "example": {
                "value": {
                  "value": "filename is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-size-invalid",
              "example": {
                "value": {
                  "value": "size should be integer.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-file-size-limit-exceeded",
              "example": {
                "value": {
                  "value": "File size exceeds project limit.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-file-size-too-small",
              "example": {
                "value": {
                  "value": "File size can not be less than 10485760 bytes. Please use direct upload instead of multipart.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-part-size-invalid",
              "example": {
                "value": {
                  "value": "Multipart Upload Part Size should be an integer.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-part-size-too-small",
              "example": {
                "value": {
                  "value": "Multipart Upload Part Size can not be less than 5242880 bytes.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-part-size-too-big",
              "example": {
                "value": {
                  "value": "Multipart Upload Part Size can not be more than 5368709120 bytes.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "value": {
              "generatedName": "ForbiddenErrorBody",
              "schemas": [
                {
                  "generatedName": "ForbiddenErrorBodyZero",
                  "schema": "uploadcarePublicKeyRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyOne",
                  "schema": "uploadcarePublicKeyInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "schema": "autoStoreDisabledError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyThree",
                  "schema": "projectPublicKeyRemovedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFour",
                  "schema": "accountBlockedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFive",
                  "schema": "accountUnpaidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySix",
                  "schema": "uploadFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySeven",
                  "schema": "accountLimitsExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyEight",
                  "schema": "signatureExpirationError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyNine",
                  "schema": "signatureInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request was not allowed.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "public-key-is-required",
              "example": {
                "value": {
                  "value": "UPLOADCARE_PUB_KEY is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "public-key-is-invalid",
              "example": {
                "value": {
                  "value": "UPLOADCARE_PUB_KEY is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "auto-store-is-disabled",
              "example": {
                "value": {
                  "value": "Autostore is disabled.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "project-public-key-removed",
              "example": {
                "value": {
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-blocked",
              "example": {
                "value": {
                  "value": "Account has been blocked.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-unpaid",
              "example": {
                "value": {
                  "value": "Account has been blocked for non payment.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "upload-failed",
              "example": {
                "value": {
                  "value": "Upload failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-limits-exceeded",
              "example": {
                "value": {
                  "value": "Account has reached its limits.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration",
              "example": {
                "value": {
                  "value": "Expired signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-invalid",
              "example": {
                "value": {
                  "value": "Invalid signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "schema": {
              "default": "Request was throttled.",
              "type": "string"
            },
            "generatedName": "TooManyRequestsErrorBody",
            "groupName": [],
            "type": "primitive"
          },
          "description": "Request was throttled.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "value": {
                  "value": "Request was throttled.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to\nexplicitly trigger [AWS S3 Transfer Acceleration](https://aws.amazon.com/s3/transfer-acceleration/).\nWhen you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.\n\nTo upload large files, 3 requests are sent in sequence:\n1. `/multipart/start/`\n2. `<presigned-url-x>`\n3. `/multipart/complete/`.\n\n**Note**: Multipart uploads support files larger than 10 megabytes only.\n",
      "authed": false,
      "method": "POST",
      "path": "/multipart/start/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "UPLOADCARE_PUB_KEY": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              },
              "filename": {
                "value": {
                  "value": "filename",
                  "type": "string"
                },
                "type": "primitive"
              },
              "size": {
                "value": {
                  "value": 1,
                  "type": "int"
                },
                "type": "primitive"
              },
              "content_type": {
                "value": {
                  "value": "content_type",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "uuid": {
                  "value": {
                    "value": "67947755-1584-4e3f-902b-d4e2bf76a841",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "parts": {
                  "value": [
                    {
                      "value": {
                        "value": "<presigned-url-1>",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    {
                      "value": {
                        "value": "<presigned-url-2>",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    {
                      "value": {
                        "value": "<presigned-url-3>",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    {
                      "value": {
                        "value": "<presigned-url-4>",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    {
                      "value": {
                        "value": "<presigned-url-5>",
                        "type": "string"
                      },
                      "type": "primitive"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { multipartStart } from '@uploadcare/upload-client'\n\nconst result = await multipartStart(\n  27796904,\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    store: 'auto',\n    fileName: 'myfile.mp4',\n    contentType: 'video/mp4',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Upload individual file parts",
      "audiences": [],
      "operationId": "multipartFileUploadPart",
      "tags": [
        "Upload"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "MultipartFileUploadPartRequest",
      "request": {
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "octetStream"
      },
      "errors": {},
      "server": [],
      "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the\n`/multipart/start/` endpoint.\n\nEach uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.\nYou can upload the file parts in parallel provided that the byte order stays unchanged.\n\n**Note**: You MUST define `Content-Type` header for your data.\n",
      "authed": false,
      "method": "PUT",
      "path": "/<presigned-url-x>",
      "examples": [
        {
          "value": {
            "code-samples": [
              {
                "name": "JS",
                "language": "JavaScript",
                "code": "import { multipartUpload } from '@uploadcare/upload-client'\n\n// partData is a chunk of the uploaded file's content\n// must be `Blob` or `File` or `Buffer`\nconst result = await multipartUpload(\n  partData,\n  '<presigned-url-x>'\n)\n"
              },
              {
                "name": "PHP",
                "language": "PHP",
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n"
              },
              {
                "name": "Python",
                "language": "Python",
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n"
              },
              {
                "name": "Ruby",
                "language": "Ruby",
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n"
              },
              {
                "name": "Swift",
                "language": "Swift",
                "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n"
              },
              {
                "name": "Kotlin",
                "language": "Kotlin",
                "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n"
              }
            ]
          },
          "type": "unknown"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Complete multipart upload",
      "audiences": [],
      "operationId": "multipartFileUploadComplete",
      "tags": [
        "Upload"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "MultipartFileUploadCompleteRequest",
      "request": {
        "properties": [
          {
            "key": "UPLOADCARE_PUB_KEY",
            "schema": {
              "value": {
                "generatedName": "MultipartFileUploadCompleteRequestUploadcarePubKey",
                "schema": "projectPublicKeyType",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "json"
            }
          },
          {
            "key": "uuid",
            "schema": {
              "value": {
                "generatedName": "MultipartFileUploadCompleteRequestUuid",
                "schema": {
                  "format": "uuid",
                  "example": "67947755-1584-4e3f-902b-d4e2bf76a841",
                  "type": "string"
                },
                "description": "File's UUID from the `/multipart/start/` endpoint.",
                "groupName": [],
                "type": "primitive"
              },
              "type": "json"
            }
          }
        ],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "multipart"
      },
      "response": {
        "description": "The file was uploaded successfully.",
        "schema": {
          "generatedName": "MultipartFileUploadCompleteResponse",
          "schema": "fileUploadInfo",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "value": {
              "generatedName": "BadRequestErrorBody",
              "schemas": [
                {
                  "generatedName": "BadRequestErrorBodyZero",
                  "schema": "requestFiledsNumberLimitExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyOne",
                  "schema": "postRequestParserFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwo",
                  "schema": "nullCharactersForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThree",
                  "schema": "multipartFileIdRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFour",
                  "schema": "uuidInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFive",
                  "schema": "multipartFileAlreadyUploadedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySix",
                  "schema": "multipartUploadSizeTooLargeError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeven",
                  "schema": "multipartUploadSizeTooSmallError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEight",
                  "schema": "multipartFileCompletionFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyNine",
                  "schema": "fileTypeForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTen",
                  "schema": "fileInfectedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "request-fields-number-limit-exceeded",
              "example": {
                "value": {
                  "value": "The request contains too many HTTP POST fields.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "post-request-parser-failed",
              "example": {
                "value": {
                  "value": "HTTP POST request parsing failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "null-characters-forbidden",
              "example": {
                "value": {
                  "value": "Null characters are not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-file-id-required",
              "example": {
                "value": {
                  "value": "uuid is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "uuid-invalid",
              "example": {
                "value": {
                  "value": "uuid is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-file-already-uploaded",
              "example": {
                "value": {
                  "value": "File is already uploaded.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-upload-size-too-large",
              "example": {
                "value": {
                  "value": "Uploaded size is more than expected.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-upload-size-too-small",
              "example": {
                "value": {
                  "value": "File size mismatch. Not all parts uploaded?",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "multipart-file-completion-failed",
              "example": {
                "value": {
                  "value": "Can not complete upload. Wrong parts size?",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-type-forbidden",
              "example": {
                "value": {
                  "value": "Uploading of these file types is not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-infected",
              "example": {
                "value": {
                  "value": "The file is infected by Win.Test.EICAR_HDB-1 virus.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "value": {
              "generatedName": "ForbiddenErrorBody",
              "schemas": [
                {
                  "generatedName": "ForbiddenErrorBodyZero",
                  "schema": "uploadcarePublicKeyRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyOne",
                  "schema": "uploadcarePublicKeyInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request was not allowed.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "public-key-is-required",
              "example": {
                "value": {
                  "value": "UPLOADCARE_PUB_KEY is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "public-key-is-invalid",
              "example": {
                "value": {
                  "value": "UPLOADCARE_PUB_KEY is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "fileNotFoundError",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "File with specified UUID was not found.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "file-not-found",
              "example": {
                "value": {
                  "value": "File is not found.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "Once all the file parts have been uploaded successfully, complete the\nupload session to assemble all the file parts into a single resulting file.\n",
      "authed": false,
      "method": "POST",
      "path": "/multipart/complete/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "UPLOADCARE_PUB_KEY": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              },
              "uuid": {
                "value": {
                  "value": "uuid",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "uuid": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "file_id": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "size": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "total": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "done": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "original_filename": {
                  "value": {
                    "value": "IMG-0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "filename": {
                  "value": {
                    "value": "IMG0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "mime_type": {
                  "value": {
                    "value": "image/jpeg",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "image_info": {
                  "properties": {
                    "color_mode": {
                      "value": "RGB",
                      "type": "enum"
                    },
                    "orientation": {
                      "value": {
                        "value": 6,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "JPEG",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "sequence": {
                      "value": {
                        "value": false,
                        "type": "boolean"
                      },
                      "type": "primitive"
                    },
                    "height": {
                      "value": {
                        "value": 4032,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "width": {
                      "value": {
                        "value": 3024,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "geo_location": {
                      "properties": {
                        "latitude": {
                          "value": {
                            "value": 55.62013611111111,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "longitude": {
                          "value": {
                            "value": 37.66299166666666,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "datetime_original": {
                      "value": {
                        "value": "2024-01-15T09:30:00Z",
                        "type": "datetime"
                      },
                      "type": "primitive"
                    },
                    "dpi": {
                      "value": [
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "video_info": {
                  "properties": {
                    "duration": {
                      "value": {
                        "value": 261827,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "mp4",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "bitrate": {
                      "value": {
                        "value": 393,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "audio": {
                      "properties": {
                        "bitrate": {
                          "value": {
                            "value": 78,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "aac",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sample_rate": {
                          "value": {
                            "value": 44100,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "channels": {
                          "value": {
                            "value": "2",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "height": {
                          "value": {
                            "value": 360,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 640,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "frame_rate": {
                          "value": {
                            "value": 30,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 315,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "h264",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "content_info": {
                  "properties": {
                    "mime": {
                      "properties": {
                        "mime": {
                          "value": {
                            "value": "image/jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": {
                          "value": {
                            "value": "image",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "subtype": {
                          "value": {
                            "value": "jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "image": {
                      "properties": {
                        "color_mode": {
                          "value": "RGB",
                          "type": "enum"
                        },
                        "orientation": {
                          "value": {
                            "value": 6,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "JPEG",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sequence": {
                          "value": {
                            "value": false,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "height": {
                          "value": {
                            "value": 4032,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 3024,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "geo_location": {
                          "properties": {
                            "latitude": {
                              "value": {
                                "value": 55.62013611111111,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            "longitude": {
                              "value": {
                                "value": 37.66299166666666,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        },
                        "datetime_original": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "dpi": {
                          "value": [
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "duration": {
                          "value": {
                            "value": 261827,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "mp4",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 393,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "audio": {
                          "value": [
                            {
                              "properties": {
                                "bitrate": {
                                  "value": {
                                    "value": 78,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "aac",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "sample_rate": {
                                  "value": {
                                    "value": 44100,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "channels": {
                                  "value": {
                                    "value": 2,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        },
                        "video": {
                          "value": [
                            {
                              "properties": {
                                "height": {
                                  "value": {
                                    "value": 360,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "width": {
                                  "value": {
                                    "value": 640,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "frame_rate": {
                                  "value": {
                                    "value": 30,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "bitrate": {
                                  "value": {
                                    "value": 315,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "h264",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "value": [
                    {
                      "key": {
                        "value": "subsystem",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "uploader",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    },
                    {
                      "key": {
                        "value": "pet",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "cat",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    }
                  ],
                  "type": "map"
                },
                "is_image": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_stored": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_ready": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "s3_bucket": {
                  "value": {
                    "value": "custom-s3-bucket-name",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { multipartComplete } from '@uploadcare/upload-client'\n\nconst result = await multipartComplete(\n  '67947755-1584-4e3f-902b-d4e2bf76a841',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Upload files from URLs",
      "audiences": [],
      "operationId": "fromURLUpload",
      "tags": [
        "Upload"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "FromUrlUploadRequest",
      "request": {
        "properties": [
          {
            "key": "pub_key",
            "schema": {
              "value": {
                "generatedName": "FromUrlUploadRequestPubKey",
                "schema": "projectPublicKeyType",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "json"
            }
          },
          {
            "key": "source_url",
            "schema": {
              "value": {
                "generatedName": "FromUrlUploadRequestSourceUrl",
                "schema": {
                  "format": "uri",
                  "example": "https://source.unsplash.com/featured",
                  "type": "string"
                },
                "description": "Source URL of the file to fetch and upload.\n\n**Note**: The URL should point to a resource publicly available via HTTP/HTTPS.\n",
                "groupName": [],
                "type": "primitive"
              },
              "type": "json"
            }
          },
          {
            "key": "store",
            "schema": {
              "value": {
                "generatedName": "fromUrlUploadRequestStore",
                "value": {
                  "generatedName": "FromUrlUploadRequestStore",
                  "schema": "storeType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "filename",
            "schema": {
              "value": {
                "generatedName": "fromUrlUploadRequestFilename",
                "value": {
                  "generatedName": "FromUrlUploadRequestFilename",
                  "schema": {
                    "example": "googlelogo_color_272x92dp.png",
                    "type": "string"
                  },
                  "description": "Sets the file name of the resource fetched from the source URL.\nIf not defined, the file name is obtained from either HTTP\nresponse headers or the `source_url`'s path.\n\n**Note:** The filename will be sanitized to only contain the following symbols:\n`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._`.\n",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "check_URL_duplicates",
            "schema": {
              "value": {
                "generatedName": "fromUrlUploadRequestCheckUrlDuplicates",
                "value": {
                  "generatedName": "FromUrlUploadRequestCheckUrlDuplicates",
                  "values": [
                    {
                      "generatedName": "Zero",
                      "value": "0",
                      "casing": {}
                    },
                    {
                      "generatedName": "One",
                      "value": "1",
                      "casing": {}
                    }
                  ],
                  "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.\n",
                  "default": {
                    "generatedName": "Zero",
                    "value": "0",
                    "casing": {}
                  },
                  "groupName": [],
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "enum"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "save_URL_duplicates",
            "schema": {
              "value": {
                "generatedName": "fromUrlUploadRequestSaveUrlDuplicates",
                "value": {
                  "generatedName": "FromUrlUploadRequestSaveUrlDuplicates",
                  "values": [
                    {
                      "generatedName": "Zero",
                      "value": "0",
                      "casing": {}
                    },
                    {
                      "generatedName": "One",
                      "value": "1",
                      "casing": {}
                    }
                  ],
                  "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.\n",
                  "groupName": [],
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "enum"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "metadata[{key}]",
            "schema": {
              "value": {
                "generatedName": "fromUrlUploadRequestMetadataKey",
                "value": {
                  "generatedName": "FromUrlUploadRequestMetadataKey",
                  "schema": "metadataValue",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "signature",
            "schema": {
              "value": {
                "generatedName": "fromUrlUploadRequestSignature",
                "value": {
                  "generatedName": "FromUrlUploadRequestSignature",
                  "schema": "signatureType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "expire",
            "schema": {
              "value": {
                "generatedName": "fromUrlUploadRequestExpire",
                "value": {
                  "generatedName": "FromUrlUploadRequestExpire",
                  "schema": "expireType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          }
        ],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "multipart"
      },
      "response": {
        "description": "Status Token or File Info of an already downloaded file.",
        "schema": {
          "value": {
            "generatedName": "FromUrlUploadResponse",
            "schemas": [
              {
                "generatedName": "FromUrlUploadResponseZero",
                "schema": "fromURLUploadResponseSchema",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              {
                "generatedName": "FromUrlUploadResponseOne",
                "schema": "fileUploadInfoFromURL",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              }
            ],
            "groupName": [],
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "undiscriminated"
          },
          "type": "oneOf"
        },
        "fullExamples": [
          {
            "name": "type-token",
            "value": {
              "type": "token",
              "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
            }
          },
          {
            "name": "type-file-info",
            "value": {
              "type": "file_info",
              "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
              "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
              "size": 2667636,
              "total": 2667636,
              "done": 2667636,
              "original_filename": "IMG-0412_123.JPG",
              "filename": "IMG0412_123.JPG",
              "mime_type": "image/jpeg",
              "image_info": {
                "color_mode": "RGB",
                "orientation": 6,
                "format": "JPEG",
                "height": 4032,
                "width": 3024,
                "sequence": false,
                "geo_location": {
                  "latitude": 55.62013611111111,
                  "longitude": 37.66299166666666
                },
                "dpi": [
                  72,
                  72
                ]
              },
              "video_info": null,
              "content_info": {
                "mime": {
                  "mime": "image/jpeg",
                  "type": "image",
                  "subtype": "jpeg"
                },
                "image": {
                  "color_mode": "RGB",
                  "orientation": 6,
                  "format": "JPEG",
                  "height": 4032,
                  "width": 3024,
                  "sequence": false,
                  "geo_location": {
                    "latitude": 55.62013611111111,
                    "longitude": 37.66299166666666
                  },
                  "dpi": [
                    72,
                    72
                  ]
                }
              },
              "metadata": {
                "subsystem": "uploader",
                "pet": "cat"
              },
              "is_image": true,
              "is_stored": true,
              "is_ready": true
            }
          }
        ],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "value": {
              "generatedName": "BadRequestErrorBody",
              "schemas": [
                {
                  "generatedName": "BadRequestErrorBodyZero",
                  "schema": "requestFiledsNumberLimitExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyOne",
                  "schema": "postRequestParserFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwo",
                  "schema": "nullCharactersForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThree",
                  "schema": "fileMetadataKeyDuplicatedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFour",
                  "schema": "fileMetadataKeyEmptyError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFive",
                  "schema": "fileMetadataKeyForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySix",
                  "schema": "fileMetadataKeyLengthTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeven",
                  "schema": "fileMetadataValueEmptyError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEight",
                  "schema": "fileMetadataValueForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyNine",
                  "schema": "fileMetadataValueLengthTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTen",
                  "schema": "fileMetadataKeysNumberTooBigError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEleven",
                  "schema": "signatureRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwelve",
                  "schema": "signatureExpirationRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThirteen",
                  "schema": "signatureExpirationInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFourteen",
                  "schema": "sourceURLRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFifteen",
                  "schema": "urlParsingFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySixteen",
                  "schema": "urlSchemeRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeventeen",
                  "schema": "urlSchemeInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEighteen",
                  "schema": "urlHostRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyNineteen",
                  "schema": "urlBlacklistedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwenty",
                  "schema": "hostnameNotFoundError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwentyOne",
                  "schema": "urlHostMalformedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwentyTwo",
                  "schema": "urlHostPrivateIPForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "request-fields-number-limit-exceeded",
              "example": {
                "value": {
                  "value": "The request contains too many HTTP POST fields.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "post-request-parser-failed",
              "example": {
                "value": {
                  "value": "HTTP POST request parsing failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "null-characters-forbidden",
              "example": {
                "value": {
                  "value": "Null characters are not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-duplicate",
              "example": {
                "value": {
                  "value": "File's metadata key `subsystem` has a duplicate.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-empty",
              "example": {
                "value": {
                  "value": "File's metadata key can not be empty.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-forbidden",
              "example": {
                "value": {
                  "value": "File's metadata key `subsystem` contains symbols not allowed by the metadata key format.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-key-length-too-big",
              "example": {
                "value": {
                  "value": "Length of file metadata key `aaa...` can not be more than 64 symbols.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-empty",
              "example": {
                "value": {
                  "value": "Value of the file metadata key `subsystem` can not be empty.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-forbidden",
              "example": {
                "value": {
                  "value": "Value of file metadata key `subsystem` contains symbols not allowed by the metadata value format.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-value-length-too-big",
              "example": {
                "value": {
                  "value": "Value of file metadata's key `subsystem` can not be more than 512 symbols in length.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-metadata-keys-number-too-big",
              "example": {
                "value": {
                  "value": "A file can not have more than 50 metadata keys.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-required",
              "example": {
                "value": {
                  "value": "`signature` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-required",
              "example": {
                "value": {
                  "value": "`expire` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-invalid",
              "example": {
                "value": {
                  "value": "`expire` must be a UNIX timestamp.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "source-url-required",
              "example": {
                "value": {
                  "value": "source_url is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "url-parsing-failed",
              "example": {
                "value": {
                  "value": "Failed to parse URL.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "url-scheme-required",
              "example": {
                "value": {
                  "value": "No URL scheme supplied.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "url-scheme-invalid",
              "example": {
                "value": {
                  "value": "Invalid URL scheme.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "url-host-required",
              "example": {
                "value": {
                  "value": "No URL host supplied.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "url-blacklisted",
              "example": {
                "value": {
                  "value": "Source is blacklisted.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "hostname-not-found",
              "example": {
                "value": {
                  "value": "Host does not exist.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "url-host-malformed",
              "example": {
                "value": {
                  "value": "URL host is malformed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "url-host-private-ip-forbidden",
              "example": {
                "value": {
                  "value": "Only public IPs are allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "value": {
              "generatedName": "ForbiddenErrorBody",
              "schemas": [
                {
                  "generatedName": "ForbiddenErrorBodyZero",
                  "schema": "publicKeyRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyOne",
                  "schema": "publicKeyInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "schema": "autoStoreDisabledError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyThree",
                  "schema": "projectPublicKeyRemovedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFour",
                  "schema": "accountBlockedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFive",
                  "schema": "accountUnpaidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySix",
                  "schema": "uploadFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySeven",
                  "schema": "accountLimitsExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyEight",
                  "schema": "signatureExpirationError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyNine",
                  "schema": "signatureInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request was not allowed.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "public-key-is-required",
              "example": {
                "value": {
                  "value": "pub_key is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "public-key-is-invalid",
              "example": {
                "value": {
                  "value": "pub_key is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "auto-store-is-disabled",
              "example": {
                "value": {
                  "value": "Autostore is disabled.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "project-public-key-removed",
              "example": {
                "value": {
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-blocked",
              "example": {
                "value": {
                  "value": "Account has been blocked.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-unpaid",
              "example": {
                "value": {
                  "value": "Account has been blocked for non payment.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "upload-failed",
              "example": {
                "value": {
                  "value": "Upload failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-limits-exceeded",
              "example": {
                "value": {
                  "value": "Account has reached its limits.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration",
              "example": {
                "value": {
                  "value": "Expired signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-invalid",
              "example": {
                "value": {
                  "value": "Invalid signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "429": {
          "generatedName": "TooManyRequestsError",
          "schema": {
            "schema": {
              "default": "Request was throttled.",
              "type": "string"
            },
            "generatedName": "TooManyRequestsErrorBody",
            "groupName": [],
            "type": "primitive"
          },
          "description": "Request was throttled.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "example": {
                "value": {
                  "value": "Request was throttled.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the\nfetched file to your project.\n\n#### Upload tokens\nRequests to the endpoint return a JSON dictionary with a `token` that can be further used\nto [check the status](/api-refs/upload-api/#operation/fromURLUploadStatus) of the upload\nrequest.\n\n**Note:** The token is not a file ID and can't be used to address the file directly.\nThe actual file ID should be retrieved by calling the `/from_url/status/` endpoint.\n\n#### Duplicates prevention\nBy default, every call to the `/from_url/` endpoint with the same `source_url` results in\na new upload leading to file duplication.\n\nIf you would like Uploadcare to keep track of the requested URLs and avoid the duplicate\nuploads, pass the `save_URL_duplicates` and `check_URL_duplicates` parameters described below.\n",
      "authed": false,
      "method": "POST",
      "path": "/from_url/",
      "examples": [
        {
          "name": "type-token",
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "pub_key": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              },
              "source_url": {
                "value": {
                  "value": "source_url",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "type": {
                  "value": {
                    "value": "token",
                    "type": "string"
                  },
                  "type": "literal"
                },
                "token": {
                  "value": {
                    "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { fromUrl } from '@uploadcare/upload-client'\n\nconst result = await fromUrl(\n  'https://source.unsplash.com/featured',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$url = 'https://source.unsplash.com/featured';\n$token = $uploader->fromUrl($url, null, null, 'auto', [\n    'action' => 'upload from URL', // The \"Action\" is the metadata key\n    'checkDuplicates' => true,\n    'storeDuplicates' => false,\n]);\necho \\sprintf('Upload from URL \\'%s\\' has been started. Token is %s', $url, $token);\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nucare_file = uploadcare.upload_from_url_sync(\n    \"https://source.unsplash.com/featured\",\n    check_duplicates=True,\n    save_duplicates=False\n)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nsource_url = \"https://source.unsplash.com/featured\"\nuploaded_file = Uploadcare::Uploader.upload(source_url, store: auto)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://source.unsplash.com/featured\")!\nlet task = UploadFromURLTask(sourceUrl: url)\n  .store(.auto)\n  .setMetadata(\"uploader\", forKey: \"subsystem\")\n  .setMetadata(\"cat\", forKey: \"pet\")\n\nlet file = try await uploadcare.uploadAPI.uploadAndWaitForCompletion(task: task)\nprint(file)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uploader = UrlUploader(\n    client = uploadcare,\n    sourceUrl = \"https://source.unsplash.com/featured\"\n)\nval file = uploader.upload()\nLog.d(\"TAG\", file.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        },
        {
          "name": "type-file-info",
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "pub_key": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              },
              "source_url": {
                "value": {
                  "value": "source_url",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "uuid": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "file_id": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "size": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "total": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "done": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "original_filename": {
                  "value": {
                    "value": "IMG-0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "filename": {
                  "value": {
                    "value": "IMG0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "mime_type": {
                  "value": {
                    "value": "image/jpeg",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "image_info": {
                  "properties": {
                    "color_mode": {
                      "value": "RGB",
                      "type": "enum"
                    },
                    "orientation": {
                      "value": {
                        "value": 6,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "JPEG",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "sequence": {
                      "value": {
                        "value": false,
                        "type": "boolean"
                      },
                      "type": "primitive"
                    },
                    "height": {
                      "value": {
                        "value": 4032,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "width": {
                      "value": {
                        "value": 3024,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "geo_location": {
                      "properties": {
                        "latitude": {
                          "value": {
                            "value": 55.62013611111111,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "longitude": {
                          "value": {
                            "value": 37.66299166666666,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "datetime_original": {
                      "value": {
                        "value": "2024-01-15T09:30:00Z",
                        "type": "datetime"
                      },
                      "type": "primitive"
                    },
                    "dpi": {
                      "value": [
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "video_info": {
                  "properties": {
                    "duration": {
                      "value": {
                        "value": 261827,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "mp4",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "bitrate": {
                      "value": {
                        "value": 393,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "audio": {
                      "properties": {
                        "bitrate": {
                          "value": {
                            "value": 78,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "aac",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sample_rate": {
                          "value": {
                            "value": 44100,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "channels": {
                          "value": {
                            "value": "2",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "height": {
                          "value": {
                            "value": 360,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 640,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "frame_rate": {
                          "value": {
                            "value": 30,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 315,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "h264",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "content_info": {
                  "properties": {
                    "mime": {
                      "properties": {
                        "mime": {
                          "value": {
                            "value": "image/jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": {
                          "value": {
                            "value": "image",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "subtype": {
                          "value": {
                            "value": "jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "image": {
                      "properties": {
                        "color_mode": {
                          "value": "RGB",
                          "type": "enum"
                        },
                        "orientation": {
                          "value": {
                            "value": 6,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "JPEG",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sequence": {
                          "value": {
                            "value": false,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "height": {
                          "value": {
                            "value": 4032,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 3024,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "geo_location": {
                          "properties": {
                            "latitude": {
                              "value": {
                                "value": 55.62013611111111,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            "longitude": {
                              "value": {
                                "value": 37.66299166666666,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        },
                        "datetime_original": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "dpi": {
                          "value": [
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "duration": {
                          "value": {
                            "value": 261827,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "mp4",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 393,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "audio": {
                          "value": [
                            {
                              "properties": {
                                "bitrate": {
                                  "value": {
                                    "value": 78,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "aac",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "sample_rate": {
                                  "value": {
                                    "value": 44100,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "channels": {
                                  "value": {
                                    "value": 2,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        },
                        "video": {
                          "value": [
                            {
                              "properties": {
                                "height": {
                                  "value": {
                                    "value": 360,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "width": {
                                  "value": {
                                    "value": 640,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "frame_rate": {
                                  "value": {
                                    "value": 30,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "bitrate": {
                                  "value": {
                                    "value": 315,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "h264",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "value": [
                    {
                      "key": {
                        "value": "subsystem",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "uploader",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    },
                    {
                      "key": {
                        "value": "pet",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "cat",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    }
                  ],
                  "type": "map"
                },
                "is_image": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_stored": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_ready": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "s3_bucket": {
                  "value": {
                    "value": "custom-s3-bucket-name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "type": {
                  "value": {
                    "value": "file_info",
                    "type": "string"
                  },
                  "type": "literal"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { fromUrl } from '@uploadcare/upload-client'\n\nconst result = await fromUrl(\n  'https://source.unsplash.com/featured',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$url = 'https://source.unsplash.com/featured';\n$token = $uploader->fromUrl($url, null, null, 'auto', [\n    'action' => 'upload from URL', // The \"Action\" is the metadata key\n    'checkDuplicates' => true,\n    'storeDuplicates' => false,\n]);\necho \\sprintf('Upload from URL \\'%s\\' has been started. Token is %s', $url, $token);\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nucare_file = uploadcare.upload_from_url_sync(\n    \"https://source.unsplash.com/featured\",\n    check_duplicates=True,\n    save_duplicates=False\n)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nsource_url = \"https://source.unsplash.com/featured\"\nuploaded_file = Uploadcare::Uploader.upload(source_url, store: auto)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://source.unsplash.com/featured\")!\nlet task = UploadFromURLTask(sourceUrl: url)\n  .store(.auto)\n  .setMetadata(\"uploader\", forKey: \"subsystem\")\n  .setMetadata(\"cat\", forKey: \"pet\")\n\nlet file = try await uploadcare.uploadAPI.uploadAndWaitForCompletion(task: task)\nprint(file)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uploader = UrlUploader(\n    client = uploadcare,\n    sourceUrl = \"https://source.unsplash.com/featured\"\n)\nval file = uploader.upload()\nLog.d(\"TAG\", file.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Check the status of a task to fetch/upload a file from a URL",
      "audiences": [],
      "operationId": "fromURLUploadStatus",
      "tags": [
        "Upload"
      ],
      "pathParameters": [],
      "queryParameters": [
        {
          "description": "Token returned by the `/from_url/` endpoint that identifies a request to fetch/upload a file from a URL.",
          "name": "token",
          "schema": {
            "schema": {
              "format": "uuid",
              "example": "945ebb27-1fd6-46c6-a859-b9893712d650",
              "type": "string"
            },
            "generatedName": "FromUrlUploadStatusRequestToken",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [],
      "generatedRequestName": "FromUrlUploadStatusRequest",
      "response": {
        "description": "Request was processed successfully.\n",
        "schema": {
          "value": {
            "generatedName": "FromUrlUploadStatusResponse",
            "schemas": [
              {
                "generatedName": "FromUrlUploadStatusResponseZero",
                "schema": "fileUploadInfoWaitingStatus",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              {
                "generatedName": "FromUrlUploadStatusResponseOne",
                "schema": "fileUploadInfoProgressStatus",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              {
                "generatedName": "FromUrlUploadStatusResponseTwo",
                "schema": "fileUploadInfoSuccessStatus",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              {
                "generatedName": "FromUrlUploadStatusResponseThree",
                "schema": "fileUploadInfoErrorStatus",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              {
                "generatedName": "FromUrlUploadStatusResponseFour",
                "schema": "fileUploadInfoUnknownStatus",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              }
            ],
            "groupName": [],
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "undiscriminated"
          },
          "type": "oneOf"
        },
        "fullExamples": [
          {
            "name": "status-waiting",
            "value": {
              "status": "waiting"
            }
          },
          {
            "name": "status-progress",
            "value": {
              "status": "progress",
              "total": 732434,
              "done": 134427
            }
          },
          {
            "name": "status-success",
            "value": {
              "status": "success",
              "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
              "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
              "size": 2667636,
              "total": 2667636,
              "done": 2667636,
              "original_filename": "IMG-0412_123.JPG",
              "filename": "IMG0412_123.JPG",
              "mime_type": "image/jpeg",
              "image_info": {
                "color_mode": "RGB",
                "orientation": 6,
                "format": "JPEG",
                "height": 4032,
                "width": 3024,
                "sequence": false,
                "geo_location": {
                  "latitude": 55.62013611111111,
                  "longitude": 37.66299166666666
                },
                "dpi": [
                  72,
                  72
                ]
              },
              "video_info": null,
              "content_info": {
                "mime": {
                  "mime": "image/jpeg",
                  "type": "image",
                  "subtype": "jpeg"
                },
                "image": {
                  "color_mode": "RGB",
                  "orientation": 6,
                  "format": "JPEG",
                  "height": 4032,
                  "width": 3024,
                  "sequence": false,
                  "geo_location": {
                    "latitude": 55.62013611111111,
                    "longitude": 37.66299166666666
                  },
                  "dpi": [
                    72,
                    72
                  ]
                }
              },
              "metadata": {
                "subsystem": "uploader",
                "pet": "cat"
              },
              "is_image": true,
              "is_stored": true,
              "is_ready": true
            }
          },
          {
            "name": "status-error",
            "value": {
              "status": "error",
              "error": "HTTP client error: 404.",
              "error_code": "DownloadFileHTTPClientError"
            }
          },
          {
            "name": "status-unknown",
            "value": {
              "status": "unknown"
            }
          }
        ],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "generatedName": "BadRequestErrorBody",
            "schema": "tokenRequiredError",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "token-required",
              "example": {
                "value": {
                  "value": "token is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "The endpoint notifies about the progress of the task by changing the value of the `status` field:\n  * the field is set to `waiting` initially\n  * once the system starts processing the request, the field is set to `progress`\n  * if the file is fetched and uploaded successfully, the `status` field is set to `success`\n    and the endpoint returns a JSON object holding information about the uploaded file\n  * if the system fails to fetch/upload the file, the `status` field is set to `error` and\n    the `error` field is set to the cause of the error.\n",
      "authed": false,
      "method": "GET",
      "path": "/from_url/status/",
      "examples": [
        {
          "name": "status-waiting",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "value": {
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "status": {
                  "value": {
                    "value": "waiting",
                    "type": "string"
                  },
                  "type": "literal"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        },
        {
          "name": "status-progress",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "value": {
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "status": {
                  "value": {
                    "value": "progress",
                    "type": "string"
                  },
                  "type": "literal"
                },
                "total": {
                  "value": {
                    "value": 732434,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "done": {
                  "value": {
                    "value": 134427,
                    "type": "double"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        },
        {
          "name": "status-success",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "value": {
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "uuid": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "file_id": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "size": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "total": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "done": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "original_filename": {
                  "value": {
                    "value": "IMG-0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "filename": {
                  "value": {
                    "value": "IMG0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "mime_type": {
                  "value": {
                    "value": "image/jpeg",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "image_info": {
                  "properties": {
                    "color_mode": {
                      "value": "RGB",
                      "type": "enum"
                    },
                    "orientation": {
                      "value": {
                        "value": 6,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "JPEG",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "sequence": {
                      "value": {
                        "value": false,
                        "type": "boolean"
                      },
                      "type": "primitive"
                    },
                    "height": {
                      "value": {
                        "value": 4032,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "width": {
                      "value": {
                        "value": 3024,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "geo_location": {
                      "properties": {
                        "latitude": {
                          "value": {
                            "value": 55.62013611111111,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "longitude": {
                          "value": {
                            "value": 37.66299166666666,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "datetime_original": {
                      "value": {
                        "value": "2024-01-15T09:30:00Z",
                        "type": "datetime"
                      },
                      "type": "primitive"
                    },
                    "dpi": {
                      "value": [
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "video_info": {
                  "properties": {
                    "duration": {
                      "value": {
                        "value": 261827,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "mp4",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "bitrate": {
                      "value": {
                        "value": 393,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "audio": {
                      "properties": {
                        "bitrate": {
                          "value": {
                            "value": 78,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "aac",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sample_rate": {
                          "value": {
                            "value": 44100,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "channels": {
                          "value": {
                            "value": "2",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "height": {
                          "value": {
                            "value": 360,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 640,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "frame_rate": {
                          "value": {
                            "value": 30,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 315,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "h264",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "content_info": {
                  "properties": {
                    "mime": {
                      "properties": {
                        "mime": {
                          "value": {
                            "value": "image/jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": {
                          "value": {
                            "value": "image",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "subtype": {
                          "value": {
                            "value": "jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "image": {
                      "properties": {
                        "color_mode": {
                          "value": "RGB",
                          "type": "enum"
                        },
                        "orientation": {
                          "value": {
                            "value": 6,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "JPEG",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sequence": {
                          "value": {
                            "value": false,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "height": {
                          "value": {
                            "value": 4032,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 3024,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "geo_location": {
                          "properties": {
                            "latitude": {
                              "value": {
                                "value": 55.62013611111111,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            "longitude": {
                              "value": {
                                "value": 37.66299166666666,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        },
                        "datetime_original": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "dpi": {
                          "value": [
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "duration": {
                          "value": {
                            "value": 261827,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "mp4",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 393,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "audio": {
                          "value": [
                            {
                              "properties": {
                                "bitrate": {
                                  "value": {
                                    "value": 78,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "aac",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "sample_rate": {
                                  "value": {
                                    "value": 44100,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "channels": {
                                  "value": {
                                    "value": 2,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        },
                        "video": {
                          "value": [
                            {
                              "properties": {
                                "height": {
                                  "value": {
                                    "value": 360,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "width": {
                                  "value": {
                                    "value": 640,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "frame_rate": {
                                  "value": {
                                    "value": 30,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "bitrate": {
                                  "value": {
                                    "value": 315,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "h264",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "value": [
                    {
                      "key": {
                        "value": "subsystem",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "uploader",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    },
                    {
                      "key": {
                        "value": "pet",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "cat",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    }
                  ],
                  "type": "map"
                },
                "is_image": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_stored": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_ready": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "s3_bucket": {
                  "value": {
                    "value": "custom-s3-bucket-name",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "status": {
                  "value": {
                    "value": "success",
                    "type": "string"
                  },
                  "type": "literal"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        },
        {
          "name": "status-error",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "value": {
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "status": {
                  "value": {
                    "value": "error",
                    "type": "string"
                  },
                  "type": "literal"
                },
                "error": {
                  "value": {
                    "value": "HTTP client error: 404.",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "error_code": {
                  "value": {
                    "value": "DownloadFileHTTPClientError",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        },
        {
          "name": "status-unknown",
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "token",
              "value": {
                "value": {
                  "value": "945ebb27-1fd6-46c6-a859-b9893712d650",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "status": {
                  "value": {
                    "value": "unknown",
                    "type": "string"
                  },
                  "type": "literal"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Get information about an uploaded file",
      "audiences": [],
      "operationId": "fileUploadInfo",
      "tags": [
        "Upload"
      ],
      "pathParameters": [],
      "queryParameters": [
        {
          "name": "pub_key",
          "schema": {
            "generatedName": "FileUploadInfoRequestPubKey",
            "schema": "projectPublicKeyType",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          }
        },
        {
          "description": "File's unique ID.",
          "name": "file_id",
          "schema": {
            "schema": {
              "format": "uuid",
              "example": "67947755-1584-4e3f-902b-d4e2bf76a841",
              "type": "string"
            },
            "generatedName": "FileUploadInfoRequestFileId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [],
      "generatedRequestName": "FileUploadInfoRequest",
      "response": {
        "description": "File information was retrieved successfully.",
        "schema": {
          "generatedName": "FileUploadInfoResponse",
          "schema": "fileUploadInfo",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "value": {
              "generatedName": "BadRequestErrorBody",
              "schemas": [
                {
                  "generatedName": "BadRequestErrorBodyZero",
                  "schema": "nullCharactersForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyOne",
                  "schema": "fileIdRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwo",
                  "schema": "fileIdInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "null-characters-forbidden",
              "example": {
                "value": {
                  "value": "Null characters are not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-id-required",
              "example": {
                "value": {
                  "value": "file_id is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file-id-invalid",
              "example": {
                "value": {
                  "value": "file_id is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "value": {
              "generatedName": "ForbiddenErrorBody",
              "schemas": [
                {
                  "generatedName": "ForbiddenErrorBodyZero",
                  "schema": "publicKeyRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyOne",
                  "schema": "publicKeyInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request was not allowed.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "public-key-is-required",
              "example": {
                "value": {
                  "value": "pub_key is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "public-key-is-invalid",
              "example": {
                "value": {
                  "value": "pub_key is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "fileNotFoundError",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "File with specified UUID was not found.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "file-not-found",
              "example": {
                "value": {
                  "value": "File is not found.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).\n",
      "authed": false,
      "method": "GET",
      "path": "/info/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "pub_key",
              "value": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "file_id",
              "value": {
                "value": {
                  "value": "67947755-1584-4e3f-902b-d4e2bf76a841",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "uuid": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "file_id": {
                  "value": {
                    "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "size": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "total": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "done": {
                  "value": {
                    "value": 2667636,
                    "type": "int"
                  },
                  "type": "primitive"
                },
                "original_filename": {
                  "value": {
                    "value": "IMG-0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "filename": {
                  "value": {
                    "value": "IMG0412_123.JPG",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "mime_type": {
                  "value": {
                    "value": "image/jpeg",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "image_info": {
                  "properties": {
                    "color_mode": {
                      "value": "RGB",
                      "type": "enum"
                    },
                    "orientation": {
                      "value": {
                        "value": 6,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "JPEG",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "sequence": {
                      "value": {
                        "value": false,
                        "type": "boolean"
                      },
                      "type": "primitive"
                    },
                    "height": {
                      "value": {
                        "value": 4032,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "width": {
                      "value": {
                        "value": 3024,
                        "type": "int"
                      },
                      "type": "primitive"
                    },
                    "geo_location": {
                      "properties": {
                        "latitude": {
                          "value": {
                            "value": 55.62013611111111,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "longitude": {
                          "value": {
                            "value": 37.66299166666666,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "datetime_original": {
                      "value": {
                        "value": "2024-01-15T09:30:00Z",
                        "type": "datetime"
                      },
                      "type": "primitive"
                    },
                    "dpi": {
                      "value": [
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        {
                          "value": {
                            "value": 72,
                            "type": "double"
                          },
                          "type": "primitive"
                        }
                      ],
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "video_info": {
                  "properties": {
                    "duration": {
                      "value": {
                        "value": 261827,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "format": {
                      "value": {
                        "value": "mp4",
                        "type": "string"
                      },
                      "type": "primitive"
                    },
                    "bitrate": {
                      "value": {
                        "value": 393,
                        "type": "double"
                      },
                      "type": "primitive"
                    },
                    "audio": {
                      "properties": {
                        "bitrate": {
                          "value": {
                            "value": 78,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "aac",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sample_rate": {
                          "value": {
                            "value": 44100,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "channels": {
                          "value": {
                            "value": "2",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "height": {
                          "value": {
                            "value": 360,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 640,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "frame_rate": {
                          "value": {
                            "value": 30,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 315,
                            "type": "double"
                          },
                          "type": "primitive"
                        },
                        "codec": {
                          "value": {
                            "value": "h264",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "content_info": {
                  "properties": {
                    "mime": {
                      "properties": {
                        "mime": {
                          "value": {
                            "value": "image/jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": {
                          "value": {
                            "value": "image",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "subtype": {
                          "value": {
                            "value": "jpeg",
                            "type": "string"
                          },
                          "type": "primitive"
                        }
                      },
                      "type": "object"
                    },
                    "image": {
                      "properties": {
                        "color_mode": {
                          "value": "RGB",
                          "type": "enum"
                        },
                        "orientation": {
                          "value": {
                            "value": 6,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "JPEG",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "sequence": {
                          "value": {
                            "value": false,
                            "type": "boolean"
                          },
                          "type": "primitive"
                        },
                        "height": {
                          "value": {
                            "value": 4032,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "width": {
                          "value": {
                            "value": 3024,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "geo_location": {
                          "properties": {
                            "latitude": {
                              "value": {
                                "value": 55.62013611111111,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            "longitude": {
                              "value": {
                                "value": 37.66299166666666,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          },
                          "type": "object"
                        },
                        "datetime_original": {
                          "value": {
                            "value": "2024-01-15T09:30:00Z",
                            "type": "datetime"
                          },
                          "type": "primitive"
                        },
                        "dpi": {
                          "value": [
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            },
                            {
                              "value": {
                                "value": 72,
                                "type": "double"
                              },
                              "type": "primitive"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "video": {
                      "properties": {
                        "duration": {
                          "value": {
                            "value": 261827,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "format": {
                          "value": {
                            "value": "mp4",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "bitrate": {
                          "value": {
                            "value": 393,
                            "type": "int"
                          },
                          "type": "primitive"
                        },
                        "audio": {
                          "value": [
                            {
                              "properties": {
                                "bitrate": {
                                  "value": {
                                    "value": 78,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "aac",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                },
                                "sample_rate": {
                                  "value": {
                                    "value": 44100,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "channels": {
                                  "value": {
                                    "value": 2,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        },
                        "video": {
                          "value": [
                            {
                              "properties": {
                                "height": {
                                  "value": {
                                    "value": 360,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "width": {
                                  "value": {
                                    "value": 640,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "frame_rate": {
                                  "value": {
                                    "value": 30,
                                    "type": "double"
                                  },
                                  "type": "primitive"
                                },
                                "bitrate": {
                                  "value": {
                                    "value": 315,
                                    "type": "int"
                                  },
                                  "type": "primitive"
                                },
                                "codec": {
                                  "value": {
                                    "value": "h264",
                                    "type": "string"
                                  },
                                  "type": "primitive"
                                }
                              },
                              "type": "object"
                            }
                          ],
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "metadata": {
                  "value": [
                    {
                      "key": {
                        "value": "subsystem",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "uploader",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    },
                    {
                      "key": {
                        "value": "pet",
                        "type": "string"
                      },
                      "value": {
                        "value": {
                          "value": {
                            "value": "cat",
                            "type": "string"
                          },
                          "type": "primitive"
                        },
                        "type": "unknown"
                      }
                    }
                  ],
                  "type": "map"
                },
                "is_image": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_stored": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "is_ready": {
                  "value": {
                    "value": true,
                    "type": "boolean"
                  },
                  "type": "primitive"
                },
                "s3_bucket": {
                  "value": {
                    "value": "custom-s3-bucket-name",
                    "type": "string"
                  },
                  "type": "primitive"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { info } from '@uploadcare/upload-client'\n\nconst result = await info(\n  'be3b4d5e-179d-460e-8a5d-69112ac86cbb',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$fileInfo = (new Uploadcare\\Api($configuration))->file()->fileInfo(string $uuid);\necho \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file('740e1b8c-1ad8-4324-b7ec-112c79d8eac2')\nprint(file.info)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '740e1b8c-1ad8-4324-b7ec-112c79d8eac2'\ninfo = Uploadcare::File.info(uuid)\nputs info.inspect\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.uploadAPI.fileInfo(withFileId: \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nprint(file)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval file = uploadcare.getUploadedFile(fileId = \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nLog.d(\"TAG\", file.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Create a file group",
      "audiences": [],
      "operationId": "createFilesGroup",
      "tags": [
        "Groups"
      ],
      "pathParameters": [],
      "queryParameters": [],
      "headers": [],
      "generatedRequestName": "CreateFilesGroupRequest",
      "request": {
        "properties": [
          {
            "key": "pub_key",
            "schema": {
              "value": {
                "generatedName": "CreateFilesGroupRequestPubKey",
                "schema": "projectPublicKeyType",
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "reference"
              },
              "type": "json"
            }
          },
          {
            "key": "files[]",
            "schema": {
              "value": {
                "generatedName": "CreateFilesGroupRequestFiles",
                "value": {
                  "generatedName": "CreateFilesGroupRequestFilesItem",
                  "schema": {
                    "type": "string"
                  },
                  "groupName": [],
                  "type": "primitive"
                },
                "description": "Set of files you want to add to the group.\nEach element can be a file UUID with or without the applied image\nprocessing operations.\n",
                "groupName": [],
                "type": "array"
              },
              "type": "json"
            }
          },
          {
            "key": "signature",
            "schema": {
              "value": {
                "generatedName": "createFilesGroupRequestSignature",
                "value": {
                  "generatedName": "CreateFilesGroupRequestSignature",
                  "schema": "signatureType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          },
          {
            "key": "expire",
            "schema": {
              "value": {
                "generatedName": "createFilesGroupRequestExpire",
                "value": {
                  "generatedName": "CreateFilesGroupRequestExpire",
                  "schema": "expireType",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "type": "json"
            }
          }
        ],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "multipart"
      },
      "response": {
        "description": "The group was created successfully.",
        "schema": {
          "generatedName": "CreateFilesGroupResponse",
          "schema": "groupInfo",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "value": {
              "generatedName": "BadRequestErrorBody",
              "schemas": [
                {
                  "generatedName": "BadRequestErrorBodyZero",
                  "schema": "requestFiledsNumberLimitExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyOne",
                  "schema": "postRequestParserFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyTwo",
                  "schema": "nullCharactersForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyThree",
                  "schema": "signatureRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFour",
                  "schema": "signatureExpirationRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyFive",
                  "schema": "signatureExpirationInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySix",
                  "schema": "groupFilesInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodySeven",
                  "schema": "groupFileURLParsingFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyEight",
                  "schema": "groupFilesNotFoundError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "request-fields-number-limit-exceeded",
              "example": {
                "value": {
                  "value": "The request contains too many HTTP POST fields.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "post-request-parser-failed",
              "example": {
                "value": {
                  "value": "HTTP POST request parsing failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "null-characters-forbidden",
              "example": {
                "value": {
                  "value": "Null characters are not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-required",
              "example": {
                "value": {
                  "value": "`signature` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-required",
              "example": {
                "value": {
                  "value": "`expire` is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration-invalid",
              "example": {
                "value": {
                  "value": "`expire` must be a UNIX timestamp.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "group-files-invalid",
              "example": {
                "value": {
                  "value": "This is not valid file url: wrong-uuid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "group-file-url-parsing-failed",
              "example": {
                "value": {
                  "value": "No files[N] parameters found.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "group-files-not-found",
              "example": {
                "value": {
                  "value": "Some files not found.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "value": {
              "generatedName": "ForbiddenErrorBody",
              "schemas": [
                {
                  "generatedName": "ForbiddenErrorBodyZero",
                  "schema": "publicKeyRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyOne",
                  "schema": "publicKeyInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyTwo",
                  "schema": "projectPublicKeyRemovedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyThree",
                  "schema": "accountBlockedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFour",
                  "schema": "accountUnpaidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyFive",
                  "schema": "uploadFailedError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySix",
                  "schema": "accountLimitsExceededError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodySeven",
                  "schema": "signatureExpirationError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyEight",
                  "schema": "signatureInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request was not allowed.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "public-key-is-required",
              "example": {
                "value": {
                  "value": "pub_key is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "public-key-is-invalid",
              "example": {
                "value": {
                  "value": "pub_key is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "project-public-key-removed",
              "example": {
                "value": {
                  "value": "Project 39e3eb895fdada95e7a9 is marked as removed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-blocked",
              "example": {
                "value": {
                  "value": "Account has been blocked.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-unpaid",
              "example": {
                "value": {
                  "value": "Account has been blocked for non payment.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "upload-failed",
              "example": {
                "value": {
                  "value": "Upload failed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "account-limits-exceeded",
              "example": {
                "value": {
                  "value": "Account has reached its limits.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-expiration",
              "example": {
                "value": {
                  "value": "Expired signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "signature-invalid",
              "example": {
                "value": {
                  "value": "Invalid signature.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "Create a file group from a set of already uploaded files.\n\nThe most common use case for creating a file group is when a user uploads\nmultiple files at once and then wants to display them together.\n\n**Note:** A group itself and files within it MUST belong to the same project.\n\n**Note:** Groups are immutable and the only way to add/remove a file to a group\nis to create a new one.\n",
      "authed": false,
      "method": "POST",
      "path": "/group/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [],
          "headers": [],
          "request": {
            "properties": {
              "pub_key": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              },
              "files[]": {
                "value": [
                  {
                    "value": {
                      "value": "files[]",
                      "type": "string"
                    },
                    "type": "primitive"
                  }
                ],
                "type": "array"
              }
            },
            "type": "object"
          },
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "0d712319-b970-4602-850c-bae1ced521a6~1",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "datetime_created": {
                  "value": {
                    "value": "2018-09-12T10:03:38.686710Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "files_count": {
                  "value": {
                    "value": 1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "cdn_url": {
                  "value": {
                    "value": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "url": {
                  "value": {
                    "value": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "files": {
                  "value": [
                    {
                      "value": {
                        "value": [
                          {
                            "key": {
                              "value": "default_effects",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "resize/x800/",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "uuid",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "file_id",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "size",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": 2667636,
                                "type": "int"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "total",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": 2667636,
                                "type": "int"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "done",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": 2667636,
                                "type": "int"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "original_filename",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "IMG-0412_123.JPG",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "filename",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "IMG0412_123.JPG",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "mime_type",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "image/jpeg",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "image_info",
                              "type": "string"
                            },
                            "value": {
                              "value": [
                                {
                                  "key": {
                                    "value": "color_mode",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "RGB",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "orientation",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 6,
                                      "type": "int"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "format",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "JPEG",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "height",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 4032,
                                      "type": "int"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "width",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 3024,
                                      "type": "int"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "sequence",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": false,
                                      "type": "boolean"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "geo_location",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "key": {
                                          "value": "latitude",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 55.62013611111111,
                                            "type": "double"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "longitude",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 37.66299166666666,
                                            "type": "double"
                                          },
                                          "type": "primitive"
                                        }
                                      }
                                    ],
                                    "type": "map"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "dpi",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "value": {
                                          "value": 72,
                                          "type": "int"
                                        },
                                        "type": "primitive"
                                      },
                                      {
                                        "value": {
                                          "value": 72,
                                          "type": "int"
                                        },
                                        "type": "primitive"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          {
                            "key": {
                              "value": "content_info",
                              "type": "string"
                            },
                            "value": {
                              "value": [
                                {
                                  "key": {
                                    "value": "mime",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "key": {
                                          "value": "mime",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "image/jpeg",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "type",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "image",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "subtype",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "jpeg",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      }
                                    ],
                                    "type": "map"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "image",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "key": {
                                          "value": "color_mode",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "RGB",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "orientation",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 6,
                                            "type": "int"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "format",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "JPEG",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "height",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 4032,
                                            "type": "int"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "width",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 3024,
                                            "type": "int"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "sequence",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": false,
                                            "type": "boolean"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "geo_location",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": [
                                            {
                                              "key": {
                                                "value": "latitude",
                                                "type": "string"
                                              },
                                              "value": {
                                                "value": {
                                                  "value": 55.62013611111111,
                                                  "type": "double"
                                                },
                                                "type": "primitive"
                                              }
                                            },
                                            {
                                              "key": {
                                                "value": "longitude",
                                                "type": "string"
                                              },
                                              "value": {
                                                "value": {
                                                  "value": 37.66299166666666,
                                                  "type": "double"
                                                },
                                                "type": "primitive"
                                              }
                                            }
                                          ],
                                          "type": "map"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "dpi",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": [
                                            {
                                              "value": {
                                                "value": 72,
                                                "type": "int"
                                              },
                                              "type": "primitive"
                                            },
                                            {
                                              "value": {
                                                "value": 72,
                                                "type": "int"
                                              },
                                              "type": "primitive"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      }
                                    ],
                                    "type": "map"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          {
                            "key": {
                              "value": "metadata",
                              "type": "string"
                            },
                            "value": {
                              "value": [
                                {
                                  "key": {
                                    "value": "subsystem",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "uploader",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "pet",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "cat",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          {
                            "key": {
                              "value": "is_image",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": true,
                                "type": "boolean"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "is_stored",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": true,
                                "type": "boolean"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "is_ready",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": true,
                                "type": "boolean"
                              },
                              "type": "primitive"
                            }
                          }
                        ],
                        "type": "map"
                      },
                      "type": "unknown"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { group } from '@uploadcare/upload-client'\n\nconst result = await group(\n  [\n    'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n    'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n  ],\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$result = $uploader->groupFiles(['d6d34fa9-addd-472c-868d-2e5c105f9fcd', 'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/']);\necho \\sprintf('Response status is %s', $result->getStatusCode());\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, File, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_1 = uploadcare.file('d6d34fa9-addd-472c-868d-2e5c105f9fcd')\nfile_2 = uploadcare.file('b1026315-8116-4632-8364-607e64fca723/-/resize/x800/')\nfile_group = uploadcare.create_file_group([file_1, file_2])\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nuuids = [\n  'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n  'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n]\ngroup = Uploadcare::Group.create(uuids)\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet filesIds = [\"d6d34fa9-addd-472c-868d-2e5c105f9fcd\", \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"]\nlet group = try await uploadAPI.createFilesGroup(fileIds: filesIds)\nprint(group)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\n    \"d6d34fa9-addd-472c-868d-2e5c105f9fcd\",\n    \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"\n)\nval group = uploadcare.createGroup(fileIds = uuids)\nLog.d(\"TAG\", group.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    },
    {
      "summary": "Get information about a file group",
      "audiences": [],
      "operationId": "filesGroupInfo",
      "tags": [
        "Groups"
      ],
      "pathParameters": [],
      "queryParameters": [
        {
          "name": "pub_key",
          "schema": {
            "generatedName": "FilesGroupInfoRequestPubKey",
            "schema": "projectPublicKeyType",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          }
        },
        {
          "description": "Group's unique ID. Group IDs look like `UUID~N`, where the `~N` part reflects the number of the files in the group.\n",
          "name": "group_id",
          "schema": {
            "schema": {
              "example": "d52d7136-a2e5-4338-9f45-affbf83b857d~2",
              "type": "string"
            },
            "generatedName": "FilesGroupInfoRequestGroupId",
            "groupName": [],
            "type": "primitive"
          },
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          }
        }
      ],
      "headers": [],
      "generatedRequestName": "FilesGroupInfoRequest",
      "response": {
        "description": "File group information was retrieved successfully.",
        "schema": {
          "generatedName": "FilesGroupInfoResponse",
          "schema": "groupInfo",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "reference"
        },
        "fullExamples": [],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "statusCode": 200,
        "type": "json"
      },
      "errors": {
        "400": {
          "generatedName": "BadRequestError",
          "schema": {
            "value": {
              "generatedName": "BadRequestErrorBody",
              "schemas": [
                {
                  "generatedName": "BadRequestErrorBodyZero",
                  "schema": "nullCharactersForbiddenError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "BadRequestErrorBodyOne",
                  "schema": "groupIdRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request failed input parameters validation.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "null-characters-forbidden",
              "example": {
                "value": {
                  "value": "Null characters are not allowed.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "group-id-required",
              "example": {
                "value": {
                  "value": "group_id is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "403": {
          "generatedName": "ForbiddenError",
          "schema": {
            "value": {
              "generatedName": "ForbiddenErrorBody",
              "schemas": [
                {
                  "generatedName": "ForbiddenErrorBodyZero",
                  "schema": "publicKeyRequiredError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                {
                  "generatedName": "ForbiddenErrorBodyOne",
                  "schema": "publicKeyInvalidError",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "undiscriminated"
            },
            "type": "oneOf"
          },
          "description": "Request was not allowed.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "public-key-is-required",
              "example": {
                "value": {
                  "value": "pub_key is required.",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "public-key-is-invalid",
              "example": {
                "value": {
                  "value": "pub_key is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        },
        "404": {
          "generatedName": "NotFoundError",
          "schema": {
            "generatedName": "NotFoundErrorBody",
            "schema": "groupNotFoundError",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          },
          "description": "Group with specified UUID was not found.",
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "examples": [
            {
              "name": "group-not-found",
              "example": {
                "value": {
                  "value": "group_id is invalid.",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ]
        }
      },
      "server": [],
      "description": "Returns a JSON object with information about a file group (when the group was created,\nnumber of the files in the group, etc).\n",
      "authed": false,
      "method": "GET",
      "path": "/group/info/",
      "examples": [
        {
          "pathParameters": [],
          "queryParameters": [
            {
              "name": "pub_key",
              "value": {
                "value": {
                  "value": "caa9d29da887ee88ffe6",
                  "type": "string"
                },
                "type": "primitive"
              }
            },
            {
              "name": "group_id",
              "value": {
                "value": {
                  "value": "d52d7136-a2e5-4338-9f45-affbf83b857d~2",
                  "type": "string"
                },
                "type": "primitive"
              }
            }
          ],
          "headers": [],
          "response": {
            "value": {
              "properties": {
                "id": {
                  "value": {
                    "value": "0d712319-b970-4602-850c-bae1ced521a6~1",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "datetime_created": {
                  "value": {
                    "value": "2018-09-12T10:03:38.686710Z",
                    "type": "datetime"
                  },
                  "type": "primitive"
                },
                "files_count": {
                  "value": {
                    "value": 1,
                    "type": "double"
                  },
                  "type": "primitive"
                },
                "cdn_url": {
                  "value": {
                    "value": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "url": {
                  "value": {
                    "value": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                    "type": "string"
                  },
                  "type": "primitive"
                },
                "files": {
                  "value": [
                    {
                      "value": {
                        "value": [
                          {
                            "key": {
                              "value": "default_effects",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "resize/x800/",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "uuid",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "file_id",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "size",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": 2667636,
                                "type": "int"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "total",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": 2667636,
                                "type": "int"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "done",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": 2667636,
                                "type": "int"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "original_filename",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "IMG-0412_123.JPG",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "filename",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "IMG0412_123.JPG",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "mime_type",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": "image/jpeg",
                                "type": "string"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "image_info",
                              "type": "string"
                            },
                            "value": {
                              "value": [
                                {
                                  "key": {
                                    "value": "color_mode",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "RGB",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "orientation",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 6,
                                      "type": "int"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "format",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "JPEG",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "height",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 4032,
                                      "type": "int"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "width",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": 3024,
                                      "type": "int"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "sequence",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": false,
                                      "type": "boolean"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "geo_location",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "key": {
                                          "value": "latitude",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 55.62013611111111,
                                            "type": "double"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "longitude",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 37.66299166666666,
                                            "type": "double"
                                          },
                                          "type": "primitive"
                                        }
                                      }
                                    ],
                                    "type": "map"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "dpi",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "value": {
                                          "value": 72,
                                          "type": "int"
                                        },
                                        "type": "primitive"
                                      },
                                      {
                                        "value": {
                                          "value": 72,
                                          "type": "int"
                                        },
                                        "type": "primitive"
                                      }
                                    ],
                                    "type": "array"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          {
                            "key": {
                              "value": "content_info",
                              "type": "string"
                            },
                            "value": {
                              "value": [
                                {
                                  "key": {
                                    "value": "mime",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "key": {
                                          "value": "mime",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "image/jpeg",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "type",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "image",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "subtype",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "jpeg",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      }
                                    ],
                                    "type": "map"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "image",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": [
                                      {
                                        "key": {
                                          "value": "color_mode",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "RGB",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "orientation",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 6,
                                            "type": "int"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "format",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": "JPEG",
                                            "type": "string"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "height",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 4032,
                                            "type": "int"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "width",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": 3024,
                                            "type": "int"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "sequence",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": {
                                            "value": false,
                                            "type": "boolean"
                                          },
                                          "type": "primitive"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "geo_location",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": [
                                            {
                                              "key": {
                                                "value": "latitude",
                                                "type": "string"
                                              },
                                              "value": {
                                                "value": {
                                                  "value": 55.62013611111111,
                                                  "type": "double"
                                                },
                                                "type": "primitive"
                                              }
                                            },
                                            {
                                              "key": {
                                                "value": "longitude",
                                                "type": "string"
                                              },
                                              "value": {
                                                "value": {
                                                  "value": 37.66299166666666,
                                                  "type": "double"
                                                },
                                                "type": "primitive"
                                              }
                                            }
                                          ],
                                          "type": "map"
                                        }
                                      },
                                      {
                                        "key": {
                                          "value": "dpi",
                                          "type": "string"
                                        },
                                        "value": {
                                          "value": [
                                            {
                                              "value": {
                                                "value": 72,
                                                "type": "int"
                                              },
                                              "type": "primitive"
                                            },
                                            {
                                              "value": {
                                                "value": 72,
                                                "type": "int"
                                              },
                                              "type": "primitive"
                                            }
                                          ],
                                          "type": "array"
                                        }
                                      }
                                    ],
                                    "type": "map"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          {
                            "key": {
                              "value": "metadata",
                              "type": "string"
                            },
                            "value": {
                              "value": [
                                {
                                  "key": {
                                    "value": "subsystem",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "uploader",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                },
                                {
                                  "key": {
                                    "value": "pet",
                                    "type": "string"
                                  },
                                  "value": {
                                    "value": {
                                      "value": "cat",
                                      "type": "string"
                                    },
                                    "type": "primitive"
                                  }
                                }
                              ],
                              "type": "map"
                            }
                          },
                          {
                            "key": {
                              "value": "is_image",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": true,
                                "type": "boolean"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "is_stored",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": true,
                                "type": "boolean"
                              },
                              "type": "primitive"
                            }
                          },
                          {
                            "key": {
                              "value": "is_ready",
                              "type": "string"
                            },
                            "value": {
                              "value": {
                                "value": true,
                                "type": "boolean"
                              },
                              "type": "primitive"
                            }
                          }
                        ],
                        "type": "map"
                      },
                      "type": "unknown"
                    }
                  ],
                  "type": "array"
                }
              },
              "type": "object"
            },
            "type": "withoutStreaming"
          },
          "codeSamples": [
            {
              "name": "JS",
              "language": "JavaScript",
              "code": "import { groupInfo } from '@uploadcare/upload-client'\n\nconst result = await groupInfo(\n  '0d712319-b970-4602-850c-bae1ced521a6~1',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
              "type": "language"
            },
            {
              "name": "PHP",
              "language": "PHP",
              "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$groupInfo = $uploader->groupInfo('0d712319-b970-4602-850c-bae1ced521a6~1');\necho $groupInfo->getBody()->getContents();\n",
              "type": "language"
            },
            {
              "name": "Python",
              "language": "Python",
              "code": "from pyuploadcare import Uploadcare, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_group = uploadcare.file_group('0d712319-b970-4602-850c-bae1ced521a6~1')\nprint(file_group.info)\n",
              "type": "language"
            },
            {
              "name": "Ruby",
              "language": "Ruby",
              "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '0d712319-b970-4602-850c-bae1ced521a6~1'\ninfo = Uploadcare::Group.info(uuid)\nputs info.inspect\n",
              "type": "language"
            },
            {
              "name": "Swift",
              "language": "Swift",
              "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet group = try await uploadcare.uploadAPI.filesGroupInfo(groupId: \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nprint(group)\n",
              "type": "language"
            },
            {
              "name": "Kotlin",
              "language": "Kotlin",
              "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval group = uploadcare.getUploadedGroup(groupId = \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nLog.d(\"TAG\", group.toString())\n",
              "type": "language"
            }
          ],
          "type": "full"
        }
      ],
      "source": {
        "file": "../openapi.json",
        "type": "openapi"
      }
    }
  ],
  "webhooks": [],
  "channel": [],
  "groupedSchemas": {
    "rootSchemas": {
      "signatureType": {
        "description": "`signature` must be sent along with your upload request if you would like to use signed uploads.\nThe signature should be generated on your backend.\n**Note**: the process requires knowledge of your Uploadcare Project's Secret key.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.\n",
        "schema": {
          "example": "04b29480233f4def5c875875b6bdc3b1",
          "type": "string"
        },
        "generatedName": "SignatureType",
        "groupName": [],
        "type": "primitive"
      },
      "expireType": {
        "description": "`expire` must be sent along with your upload request if you would like to use signed uploads.\nThe parameter defines the time during which your signature is valid. It's a UNIX timestamp.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.\n",
        "schema": {
          "example": 1454902434,
          "type": "double"
        },
        "generatedName": "ExpireType",
        "groupName": [],
        "type": "primitive"
      },
      "storeType": {
        "description": "Determines if an uploaded file should be marked as temporary or permanent.\n\nThe parameter can have the following values:\n- `0` - do not mark an uploaded file as stored and remove it after 24 hours\n- `1` - mark the uploaded file as stored\n- `auto` - delegate the choice of the file-storing behavior to a project-wide setting called\n  [auto-store](https://app.uploadcare.com/projects/-/settings/#storage).\n\nThe default value depends on the user registration date.\n\nFor all users registered after February 12, 2024 (UTC 13:30), the default value is `auto`. \nFile-storing behavior depends entirely on what is set in the \n[storage settings](https://app.uploadcare.com/projects/-/settings/#storage) in the Dashboard.\n\nFor users registered before February 12, 2024, the default value is `0`. \nTo ensure that file storage in the project matches the settings in the Dashboard,\nchange the value to `auto`.\n",
        "generatedName": "StoreType",
        "values": [
          {
            "generatedName": "Zero",
            "value": "0",
            "casing": {}
          },
          {
            "generatedName": "One",
            "value": "1",
            "casing": {}
          },
          {
            "generatedName": "auto",
            "value": "auto",
            "casing": {}
          }
        ],
        "default": {
          "generatedName": "auto",
          "value": "auto",
          "casing": {}
        },
        "groupName": [],
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "enum"
      },
      "projectPublicKeyType": {
        "description": "Public key identifying an Uploadcare project your uploads will go to.",
        "schema": {
          "example": "caa9d29da887ee88ffe6",
          "type": "string"
        },
        "generatedName": "ProjectPublicKeyType",
        "groupName": [],
        "type": "primitive"
      },
      "fileUploadInfo": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileUploadInfoUuid",
            "key": "uuid",
            "schema": {
              "description": "File's unique ID.",
              "schema": {
                "format": "uuid",
                "example": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                "type": "string"
              },
              "generatedName": "FileUploadInfoUuid",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoFileId",
            "key": "file_id",
            "schema": {
              "description": "Same as `uuid`",
              "schema": {
                "format": "uuid",
                "example": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                "type": "string"
              },
              "generatedName": "FileUploadInfoFileId",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoSize",
            "key": "size",
            "schema": {
              "description": "File's size in bytes.",
              "schema": {
                "example": 145212,
                "type": "int"
              },
              "generatedName": "FileUploadInfoSize",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoTotal",
            "key": "total",
            "schema": {
              "description": "Same as `size`.",
              "schema": {
                "example": 145212,
                "type": "int"
              },
              "generatedName": "FileUploadInfoTotal",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoDone",
            "key": "done",
            "schema": {
              "description": "Same as `size`.",
              "schema": {
                "example": 145212,
                "type": "int"
              },
              "generatedName": "FileUploadInfoDone",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoOriginalFilename",
            "key": "original_filename",
            "schema": {
              "description": "Original file of the uploaded file.",
              "schema": {
                "example": "test-image_1.jpg",
                "type": "string"
              },
              "generatedName": "FileUploadInfoOriginalFilename",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoFilename",
            "key": "filename",
            "schema": {
              "description": "Sanitized `original_filename`.",
              "schema": {
                "example": "testimage_1.jpg",
                "type": "string"
              },
              "generatedName": "FileUploadInfoFilename",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoMimeType",
            "key": "mime_type",
            "schema": {
              "description": "File's MIME-type.",
              "schema": {
                "example": "image/jpeg",
                "type": "string"
              },
              "generatedName": "FileUploadInfoMimeType",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoImageInfo",
            "key": "image_info",
            "schema": {
              "generatedName": "FileUploadInfoImageInfo",
              "schema": "imageInfo",
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoVideoInfo",
            "key": "video_info",
            "schema": {
              "generatedName": "FileUploadInfoVideoInfo",
              "schema": "legacyVideoInfo",
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoContentInfo",
            "key": "content_info",
            "schema": {
              "generatedName": "FileUploadInfoContentInfo",
              "schema": "contentInfo",
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoMetadata",
            "key": "metadata",
            "schema": {
              "generatedName": "FileUploadInfoMetadata",
              "schema": "metadata",
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "reference"
            },
            "audiences": [],
            "readonly": false
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoIsImage",
            "key": "is_image",
            "schema": {
              "description": "True if the uploaded file is an image of a supported file format.",
              "schema": {
                "example": true,
                "type": "boolean"
              },
              "generatedName": "FileUploadInfoIsImage",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoIsStored",
            "key": "is_stored",
            "schema": {
              "description": "True if the file has been marked as stored.",
              "schema": {
                "example": true,
                "type": "boolean"
              },
              "generatedName": "FileUploadInfoIsStored",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoIsReady",
            "key": "is_ready",
            "schema": {
              "description": "True if the file is ready to be fetched from Uploadcare's CDN.",
              "schema": {
                "example": true,
                "type": "boolean"
              },
              "generatedName": "FileUploadInfoIsReady",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoS3Bucket",
            "key": "s3_bucket",
            "schema": {
              "generatedName": "fileUploadInfoS3Bucket",
              "value": {
                "generatedName": "FileUploadInfoS3Bucket",
                "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project.",
                "value": {
                  "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project.",
                  "schema": {
                    "example": "custom-s3-bucket-name",
                    "type": "string"
                  },
                  "generatedName": "FileUploadInfoS3Bucket",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Information about an uploaded file.",
        "generatedName": "FileUploadInfo",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "fileUploadInfoWaitingStatus": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileUploadInfoWaitingStatusStatus",
            "key": "status",
            "schema": {
              "generatedName": "fileUploadInfoWaitingStatusStatus",
              "value": {
                "description": "The system is preparing to handle the request.\n",
                "value": {
                  "value": "waiting",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoWaitingStatusStatus",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FileUploadInfoWaitingStatus",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "fileUploadInfoProgressStatus": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileUploadInfoProgressStatusStatus",
            "key": "status",
            "schema": {
              "generatedName": "fileUploadInfoProgressStatusStatus",
              "value": {
                "description": "The system is fetching/uploading the file.\n",
                "value": {
                  "value": "progress",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoProgressStatusStatus",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoProgressStatusTotal",
            "key": "total",
            "schema": {
              "generatedName": "fileUploadInfoProgressStatusTotal",
              "value": {
                "generatedName": "FileUploadInfoProgressStatusTotal",
                "description": "The expected size of the fetched file (in bytes).\n\n**Note:** the value can be missing if the server we are fetching the file from\ndoes not provide the information or if the server is returning the file in, for\nexample, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding).\n",
                "value": {
                  "description": "The expected size of the fetched file (in bytes).\n\n**Note:** the value can be missing if the server we are fetching the file from\ndoes not provide the information or if the server is returning the file in, for\nexample, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding).\n",
                  "schema": {
                    "example": 732434,
                    "type": "double"
                  },
                  "generatedName": "FileUploadInfoProgressStatusTotal",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoProgressStatusDone",
            "key": "done",
            "schema": {
              "generatedName": "fileUploadInfoProgressStatusDone",
              "value": {
                "description": "How many bytes of the file have been fetched so far.\n",
                "schema": {
                  "example": 134427,
                  "type": "double"
                },
                "generatedName": "FileUploadInfoProgressStatusDone",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FileUploadInfoProgressStatus",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "fileUploadInfoSuccessStatus": {
        "allOf": [
          {
            "generatedName": "FileUploadInfo",
            "schema": "fileUploadInfo",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileUploadInfoSuccessStatusStatus",
            "key": "status",
            "schema": {
              "generatedName": "fileUploadInfoSuccessStatusStatus",
              "value": {
                "description": "The file has been fetched/uploaded successfully.",
                "value": {
                  "value": "success",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoSuccessStatusStatus",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FileUploadInfoSuccessStatus",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "fileUploadInfoErrorStatus": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileUploadInfoErrorStatusStatus",
            "key": "status",
            "schema": {
              "generatedName": "fileUploadInfoErrorStatusStatus",
              "value": {
                "description": "The system failed to fetch and/or upload the file.\n",
                "value": {
                  "value": "error",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoErrorStatusStatus",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoErrorStatusError",
            "key": "error",
            "schema": {
              "generatedName": "fileUploadInfoErrorStatusError",
              "value": {
                "description": "Human readable description of the issue with the fetch/upload task.\n",
                "schema": {
                  "example": "HTTP client error: 404.",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoErrorStatusError",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fileUploadInfoErrorStatusErrorCode",
            "key": "error_code",
            "schema": {
              "generatedName": "fileUploadInfoErrorStatusErrorCode",
              "value": {
                "description": "Machine readable error code.\n\nNote: See the [Errors > FromURL upload errors](#tag/Errors) section of this\npage for a full list of all possible error codes.\n",
                "schema": {
                  "example": "DownloadFileHTTPClientError",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoErrorStatusErrorCode",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FileUploadInfoErrorStatus",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "fileUploadInfoUnknownStatus": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileUploadInfoUnknownStatusStatus",
            "key": "status",
            "schema": {
              "generatedName": "fileUploadInfoUnknownStatusStatus",
              "value": {
                "description": "The system does not have information about the task.\n\nNote: Uploadcare stores information about the `/from_url/` tasks for a limited\nperiod of time only. The endpoint can return the status `unknown` for the tasks\nthat are tool old (or that have not been created at all).\n",
                "value": {
                  "value": "unknown",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoUnknownStatusStatus",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FileUploadInfoUnknownStatus",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "fileUploadInfoFromURL": {
        "allOf": [
          {
            "generatedName": "FileUploadInfo",
            "schema": "fileUploadInfo",
            "source": {
              "file": "../openapi.json",
              "type": "openapi"
            },
            "type": "reference"
          }
        ],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fileUploadInfoFromUrlType",
            "key": "type",
            "schema": {
              "generatedName": "fileUploadInfoFromUrlType",
              "value": {
                "value": {
                  "value": "file_info",
                  "type": "string"
                },
                "generatedName": "FileUploadInfoFromUrlType",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "generatedName": "FileUploadInfoFromUrl",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "fromURLUploadResponseSchema": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "fromUrlUploadResponseSchemaType",
            "key": "type",
            "schema": {
              "generatedName": "fromUrlUploadResponseSchemaType",
              "value": {
                "value": {
                  "value": "token",
                  "type": "string"
                },
                "generatedName": "FromUrlUploadResponseSchemaType",
                "groupName": [],
                "type": "literal"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "fromUrlUploadResponseSchemaToken",
            "key": "token",
            "schema": {
              "generatedName": "fromUrlUploadResponseSchemaToken",
              "value": {
                "description": "Token to identify a `/from_url/` request.",
                "schema": {
                  "format": "uuid",
                  "example": "945ebb27-1fd6-46c6-a859-b9893712d650",
                  "type": "string"
                },
                "generatedName": "FromUrlUploadResponseSchemaToken",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "`/from_url/` upload response.",
        "generatedName": "FromUrlUploadResponseSchema",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "groupInfo": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "groupInfoId",
            "key": "id",
            "schema": {
              "generatedName": "groupInfoId",
              "value": {
                "description": "Group's unique ID.",
                "schema": {
                  "example": "d52d7136-a2e5-4338-9f45-affbf83b857d~2",
                  "type": "string"
                },
                "generatedName": "GroupInfoId",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupInfoDatetimeCreated",
            "key": "datetime_created",
            "schema": {
              "generatedName": "groupInfoDatetimeCreated",
              "value": {
                "description": "ISO-8601 date and time when the group was created.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "GroupInfoDatetimeCreated",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupInfoDatetimeStored",
            "key": "datetime_stored",
            "schema": {
              "generatedName": "groupInfoDatetimeStored",
              "availability": "Deprecated",
              "value": {
                "generatedName": "GroupInfoDatetimeStored",
                "description": "ISO-8601 date and time when the group was marked as stored.",
                "availability": "Deprecated",
                "value": {
                  "description": "ISO-8601 date and time when the group was marked as stored.",
                  "availability": "Deprecated",
                  "schema": {
                    "type": "datetime"
                  },
                  "generatedName": "GroupInfoDatetimeStored",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": [],
            "availability": "Deprecated"
          },
          {
            "conflict": {},
            "generatedName": "groupInfoFilesCount",
            "key": "files_count",
            "schema": {
              "generatedName": "groupInfoFilesCount",
              "value": {
                "description": "Number of the files in the group.",
                "schema": {
                  "example": 2,
                  "type": "double"
                },
                "generatedName": "GroupInfoFilesCount",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupInfoCdnUrl",
            "key": "cdn_url",
            "schema": {
              "generatedName": "groupInfoCdnUrl",
              "value": {
                "description": "Group's CDN URL.",
                "schema": {
                  "format": "uri",
                  "example": "http://www.ucarecdn.com/d52d7136-a2e5-4338-9f45-affbf83b857d~2/",
                  "type": "string"
                },
                "generatedName": "GroupInfoCdnUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupInfoUrl",
            "key": "url",
            "schema": {
              "generatedName": "groupInfoUrl",
              "value": {
                "description": "Group's API resource URL. See the [REST API](/api-refs/rest-api/) documentation for details.",
                "schema": {
                  "format": "uri",
                  "example": "https://api.uploadcare.com/groups/d52d7136-a2e5-4338-9f45-affbf83b857d~2/",
                  "type": "string"
                },
                "generatedName": "GroupInfoUrl",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "groupInfoFiles",
            "key": "files",
            "schema": {
              "generatedName": "groupInfoFiles",
              "value": {
                "generatedName": "GroupInfoFiles",
                "description": "The list of files in the group. An array may contain null values if a file has been removed.\n",
                "value": {
                  "description": "The list of files in the group. An array may contain null values if a file has been removed.\n",
                  "value": {
                    "generatedName": "GroupInfoFiles",
                    "type": "unknown"
                  },
                  "generatedName": "GroupInfoFiles",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "groupName": [],
              "type": "optional"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "File group information object.",
        "generatedName": "GroupInfo",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "metadataValue": {
        "description": "Arbitrary metadata associated with the file.\nSee [docs](https://uploadcare.com/docs/file-metadata/) and [REST API v0.7](/api-refs/rest-api/v0.7.0/#tag/File-metadata) for more information.\n",
        "schema": {
          "minLength": 1,
          "maxLength": 512,
          "example": "#/components/examples/metadataValue/value",
          "type": "string"
        },
        "generatedName": "MetadataValue",
        "groupName": [],
        "type": "primitive"
      },
      "autoStoreDisabledError": {
        "schema": {
          "default": "Autostore is disabled.",
          "example": "#/components/examples/autoStoreDisabledError/value",
          "type": "string"
        },
        "generatedName": "AutoStoreDisabledError",
        "groupName": [],
        "type": "primitive"
      },
      "uploadcarePublicKeyRequiredError": {
        "schema": {
          "default": "UPLOADCARE_PUB_KEY is required.",
          "example": "#/components/examples/uploadcarePublicKeyRequiredError/value",
          "type": "string"
        },
        "generatedName": "UploadcarePublicKeyRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "publicKeyRequiredError": {
        "schema": {
          "default": "pub_key is required.",
          "example": "#/components/examples/publicKeyRequiredError/value",
          "type": "string"
        },
        "generatedName": "PublicKeyRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "uploadcarePublicKeyInvalidError": {
        "schema": {
          "default": "UPLOADCARE_PUB_KEY is invalid.",
          "example": "#/components/examples/uploadcarePublicKeyInvalidError/value",
          "type": "string"
        },
        "generatedName": "UploadcarePublicKeyInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "publicKeyInvalidError": {
        "schema": {
          "default": "pub_key is invalid.",
          "example": "#/components/examples/publicKeyInvalidError/value",
          "type": "string"
        },
        "generatedName": "PublicKeyInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "projectPublicKeyRemovedError": {
        "schema": {
          "default": "Project <PUB-KEY> is marked as removed.",
          "example": "#/components/examples/projectPublicKeyRemovedError/value",
          "type": "string"
        },
        "generatedName": "ProjectPublicKeyRemovedError",
        "groupName": [],
        "type": "primitive"
      },
      "accountBlockedError": {
        "schema": {
          "default": "Account has been blocked.",
          "example": "#/components/examples/accountBlockedError/value",
          "type": "string"
        },
        "generatedName": "AccountBlockedError",
        "groupName": [],
        "type": "primitive"
      },
      "accountUnpaidError": {
        "schema": {
          "default": "Account has been blocked for non payment.",
          "example": "#/components/examples/accountUnpaidError/value",
          "type": "string"
        },
        "generatedName": "AccountUnpaidError",
        "groupName": [],
        "type": "primitive"
      },
      "uploadFailedError": {
        "schema": {
          "default": "Upload failed.",
          "example": "#/components/examples/uploadFailedError/value",
          "type": "string"
        },
        "generatedName": "UploadFailedError",
        "groupName": [],
        "type": "primitive"
      },
      "accountLimitsExceededError": {
        "schema": {
          "default": "Account has reached its limits.",
          "example": "#/components/examples/accountLimitsExceededError/value",
          "type": "string"
        },
        "generatedName": "AccountLimitsExceededError",
        "groupName": [],
        "type": "primitive"
      },
      "signatureExpirationError": {
        "schema": {
          "default": "Expired signature.",
          "example": "#/components/examples/signatureExpirationError/value",
          "type": "string"
        },
        "generatedName": "SignatureExpirationError",
        "groupName": [],
        "type": "primitive"
      },
      "signatureInvalidError": {
        "schema": {
          "default": "Invalid signature.",
          "example": "#/components/examples/signatureInvalidError/value",
          "type": "string"
        },
        "generatedName": "SignatureInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "requestFiledsNumberLimitExceededError": {
        "schema": {
          "default": "The request contains too many HTTP POST fields.",
          "example": "#/components/examples/requestFiledsNumberLimitExceededError/value",
          "type": "string"
        },
        "generatedName": "RequestFiledsNumberLimitExceededError",
        "groupName": [],
        "type": "primitive"
      },
      "postRequestParserFailedError": {
        "schema": {
          "default": "HTTP POST request parsing failed.",
          "example": "#/components/examples/postRequestParserFailedError/value",
          "type": "string"
        },
        "generatedName": "PostRequestParserFailedError",
        "groupName": [],
        "type": "primitive"
      },
      "nullCharactersForbiddenError": {
        "schema": {
          "default": "Null characters are not allowed.",
          "example": "#/components/examples/nullCharactersForbiddenError/value",
          "type": "string"
        },
        "generatedName": "NullCharactersForbiddenError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataKeyDuplicatedError": {
        "schema": {
          "default": "File's metadata key `<KEY>` has a duplicate.",
          "example": "#/components/examples/fileMetadataKeyDuplicatedError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataKeyDuplicatedError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataKeyEmptyError": {
        "schema": {
          "default": "File's metadata key can not be empty.",
          "example": "#/components/examples/fileMetadataKeyEmptyError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataKeyEmptyError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataKeyForbiddenError": {
        "schema": {
          "default": "File's metadata key `<KEY>` contains symbols not allowed by the metadata key format.",
          "example": "#/components/examples/fileMetadataKeyForbiddenError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataKeyForbiddenError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataKeyLengthTooBigError": {
        "schema": {
          "default": "Length of file metadata key `<KEY>` can not be more than <LENGTH> symbols.",
          "example": "#/components/examples/fileMetadataKeyLengthTooBigError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataKeyLengthTooBigError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataValueEmptyError": {
        "schema": {
          "default": "Value of the file metadata key `<KEY>` can not be empty.",
          "example": "#/components/examples/fileMetadataValueEmptyError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataValueEmptyError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataValueForbiddenError": {
        "schema": {
          "default": "Value of file metadata key `<KEY>` contains symbols not allowed by the metadata value format.",
          "example": "#/components/examples/fileMetadataValueForbiddenError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataValueForbiddenError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataValueLengthTooBigError": {
        "schema": {
          "default": "Value of file metadata's key `<KEY>` can not be more than <LENGTH> symbols in length.",
          "example": "#/components/examples/fileMetadataValueLengthTooBigError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataValueLengthTooBigError",
        "groupName": [],
        "type": "primitive"
      },
      "fileMetadataKeysNumberTooBigError": {
        "schema": {
          "default": "A file can not have more than <NUMBER> metadata keys.",
          "example": "#/components/examples/fileMetadataKeysNumberTooBigError/value",
          "type": "string"
        },
        "generatedName": "FileMetadataKeysNumberTooBigError",
        "groupName": [],
        "type": "primitive"
      },
      "filesRequiredError": {
        "schema": {
          "default": "Request does not contain files.",
          "example": "#/components/examples/filesRequiredError/value",
          "type": "string"
        },
        "generatedName": "FilesRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "fileSizeLimitExceededError": {
        "schema": {
          "default": "File is too large.",
          "example": "#/components/examples/fileSizeLimitExceededError/value",
          "type": "string"
        },
        "generatedName": "FileSizeLimitExceededError",
        "groupName": [],
        "type": "primitive"
      },
      "fileTypeForbiddenError": {
        "schema": {
          "default": "Uploading of these file types is not allowed.",
          "example": "#/components/examples/fileTypeForbiddenError/value",
          "type": "string"
        },
        "generatedName": "FileTypeForbiddenError",
        "groupName": [],
        "type": "primitive"
      },
      "fileInfectedError": {
        "schema": {
          "default": "The file is infected by <VIRUS-NAME> virus.",
          "example": "#/components/examples/fileInfectedError/value",
          "type": "string"
        },
        "generatedName": "FileInfectedError",
        "groupName": [],
        "type": "primitive"
      },
      "requestParamRequiredError": {
        "schema": {
          "default": "<PARAMETER-NAME> is required.",
          "example": "#/components/examples/requestParamRequiredError/value",
          "type": "string"
        },
        "generatedName": "RequestParamRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartSizeInvalidError": {
        "schema": {
          "default": "size should be integer.",
          "example": "#/components/examples/multipartSizeInvalidError/value",
          "type": "string"
        },
        "generatedName": "MultipartSizeInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartFileSizeLimitExceededError": {
        "schema": {
          "default": "File size exceeds project limit.",
          "example": "#/components/examples/multipartFileSizeLimitExceededError/value",
          "type": "string"
        },
        "generatedName": "MultipartFileSizeLimitExceededError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartFileSizeTooSmallError": {
        "schema": {
          "default": "File size can not be less than <SIZE> bytes. Please use direct upload instead of multipart.",
          "example": "#/components/examples/multipartFileSizeTooSmallError/value",
          "type": "string"
        },
        "generatedName": "MultipartFileSizeTooSmallError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartPartSizeInvalidError": {
        "schema": {
          "default": "Multipart Upload Part Size should be an integer.",
          "example": "#/components/examples/multipartPartSizeInvalidError/value",
          "type": "string"
        },
        "generatedName": "MultipartPartSizeInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartPartSizeTooSmallError": {
        "schema": {
          "default": "Multipart Upload Part Size can not be less than <SIZE> bytes.",
          "example": "#/components/examples/multipartPartSizeTooSmallError/value",
          "type": "string"
        },
        "generatedName": "MultipartPartSizeTooSmallError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartPartSizeTooBigError": {
        "schema": {
          "default": "Multipart Upload Part Size can not be more than <SIZE> bytes.",
          "example": "#/components/examples/multipartPartSizeTooBigError/value",
          "type": "string"
        },
        "generatedName": "MultipartPartSizeTooBigError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartFileIdRequiredError": {
        "schema": {
          "default": "uuid is required.",
          "example": "#/components/examples/multipartFileIdRequiredError/value",
          "type": "string"
        },
        "generatedName": "MultipartFileIdRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartFileAlreadyUploadedError": {
        "schema": {
          "default": "File is already uploaded.",
          "example": "#/components/examples/multipartFileAlreadyUploadedError/value",
          "type": "string"
        },
        "generatedName": "MultipartFileAlreadyUploadedError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartUploadSizeTooLargeError": {
        "schema": {
          "default": "Uploaded size is more than expected.",
          "example": "#/components/examples/multipartUploadSizeTooLargeError/value",
          "type": "string"
        },
        "generatedName": "MultipartUploadSizeTooLargeError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartUploadSizeTooSmallError": {
        "schema": {
          "default": "File size mismatch. Not all parts uploaded?",
          "example": "#/components/examples/multipartUploadSizeTooSmallError/value",
          "type": "string"
        },
        "generatedName": "MultipartUploadSizeTooSmallError",
        "groupName": [],
        "type": "primitive"
      },
      "multipartFileCompletionFailedError": {
        "schema": {
          "default": "Can not complete upload. Wrong parts size?",
          "example": "#/components/examples/multipartFileCompletionFailedError/value",
          "type": "string"
        },
        "generatedName": "MultipartFileCompletionFailedError",
        "groupName": [],
        "type": "primitive"
      },
      "uuidInvalidError": {
        "schema": {
          "default": "uuid is invalid.",
          "example": "#/components/examples/uuidInvalidError/value",
          "type": "string"
        },
        "generatedName": "UuidInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "sourceURLRequiredError": {
        "schema": {
          "default": "source_url is required.",
          "example": "#/components/examples/sourceURLRequiredError/value",
          "type": "string"
        },
        "generatedName": "SourceUrlRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "urlParsingFailedError": {
        "schema": {
          "default": "Failed to parse URL.",
          "example": "#/components/examples/urlParsingFailedError/value",
          "type": "string"
        },
        "generatedName": "UrlParsingFailedError",
        "groupName": [],
        "type": "primitive"
      },
      "urlSchemeRequiredError": {
        "schema": {
          "default": "No URL scheme supplied.",
          "example": "#/components/examples/urlSchemeRequiredError/value",
          "type": "string"
        },
        "generatedName": "UrlSchemeRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "urlSchemeInvalidError": {
        "schema": {
          "default": "Invalid URL scheme.",
          "example": "#/components/examples/urlSchemeInvalidError/value",
          "type": "string"
        },
        "generatedName": "UrlSchemeInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "urlHostRequiredError": {
        "schema": {
          "default": "No URL host supplied.",
          "example": "#/components/examples/urlHostRequiredError/value",
          "type": "string"
        },
        "generatedName": "UrlHostRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "urlBlacklistedError": {
        "schema": {
          "default": "Source is blacklisted.",
          "example": "#/components/examples/urlBlacklistedError/value",
          "type": "string"
        },
        "generatedName": "UrlBlacklistedError",
        "groupName": [],
        "type": "primitive"
      },
      "hostnameNotFoundError": {
        "schema": {
          "default": "Host does not exist.",
          "example": "#/components/examples/hostnameNotFoundError/value",
          "type": "string"
        },
        "generatedName": "HostnameNotFoundError",
        "groupName": [],
        "type": "primitive"
      },
      "urlHostMalformedError": {
        "schema": {
          "default": "URL host is malformed.",
          "example": "#/components/examples/urlHostMalformedError/value",
          "type": "string"
        },
        "generatedName": "UrlHostMalformedError",
        "groupName": [],
        "type": "primitive"
      },
      "urlHostPrivateIPForbiddenError": {
        "schema": {
          "default": "Only public IPs are allowed.",
          "example": "#/components/examples/urlHostPrivateIPForbiddenError/value",
          "type": "string"
        },
        "generatedName": "UrlHostPrivateIpForbiddenError",
        "groupName": [],
        "type": "primitive"
      },
      "tokenRequiredError": {
        "schema": {
          "default": "token is required.",
          "example": "#/components/examples/tokenRequiredError/value",
          "type": "string"
        },
        "generatedName": "TokenRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "fileIdRequiredError": {
        "schema": {
          "default": "file_id is required.",
          "example": "#/components/examples/fileIdRequiredError/value",
          "type": "string"
        },
        "generatedName": "FileIdRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "fileIdInvalidError": {
        "schema": {
          "default": "file_id is invalid.",
          "example": "#/components/examples/fileIdInvalidError/value",
          "type": "string"
        },
        "generatedName": "FileIdInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "fileNotFoundError": {
        "schema": {
          "default": "File is not found.",
          "example": "#/components/examples/fileNotFoundError/value",
          "type": "string"
        },
        "generatedName": "FileNotFoundError",
        "groupName": [],
        "type": "primitive"
      },
      "groupFilesInvalidError": {
        "schema": {
          "default": "This is not valid file url: %s.",
          "example": "#/components/examples/groupFilesInvalidError/value",
          "type": "string"
        },
        "generatedName": "GroupFilesInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "groupFileURLParsingFailedError": {
        "schema": {
          "default": "No files[N] parameters found.",
          "example": "#/components/examples/groupFileURLParsingFailedError/value",
          "type": "string"
        },
        "generatedName": "GroupFileUrlParsingFailedError",
        "groupName": [],
        "type": "primitive"
      },
      "groupFilesNotFoundError": {
        "schema": {
          "default": "Some files not found.",
          "example": "#/components/examples/groupFilesNotFoundError/value",
          "type": "string"
        },
        "generatedName": "GroupFilesNotFoundError",
        "groupName": [],
        "type": "primitive"
      },
      "groupIdRequiredError": {
        "schema": {
          "default": "group_id is required.",
          "example": "#/components/examples/groupIdRequiredError/value",
          "type": "string"
        },
        "generatedName": "GroupIdRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "groupNotFoundError": {
        "schema": {
          "default": "group_id is invalid.",
          "example": "#/components/examples/groupNotFoundError/value",
          "type": "string"
        },
        "generatedName": "GroupNotFoundError",
        "groupName": [],
        "type": "primitive"
      },
      "signatureRequiredError": {
        "schema": {
          "default": "`signature` is required.",
          "example": "#/components/examples/signatureRequiredError/value",
          "type": "string"
        },
        "generatedName": "SignatureRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "signatureExpirationRequiredError": {
        "schema": {
          "default": "`expire` is required.",
          "example": "#/components/examples/signatureExpirationRequiredError/value",
          "type": "string"
        },
        "generatedName": "SignatureExpirationRequiredError",
        "groupName": [],
        "type": "primitive"
      },
      "signatureExpirationInvalidError": {
        "schema": {
          "default": "`expire` must be a UNIX timestamp.",
          "example": "#/components/examples/signatureExpirationInvalidError/value",
          "type": "string"
        },
        "generatedName": "SignatureExpirationInvalidError",
        "groupName": [],
        "type": "primitive"
      },
      "imageInfo": {
        "generatedName": "ImageInfo",
        "description": "Image metadata.",
        "value": {
          "allOf": [],
          "properties": [
            {
              "conflict": {},
              "generatedName": "imageInfoColorMode",
              "key": "color_mode",
              "schema": {
                "description": "Image color mode.",
                "generatedName": "ImageInfoColorMode",
                "values": [
                  {
                    "generatedName": "RGB",
                    "value": "RGB",
                    "casing": {}
                  },
                  {
                    "generatedName": "RGBA",
                    "value": "RGBA",
                    "casing": {}
                  },
                  {
                    "generatedName": "RGBa",
                    "value": "RGBa",
                    "casing": {}
                  },
                  {
                    "generatedName": "RGBX",
                    "value": "RGBX",
                    "casing": {}
                  },
                  {
                    "generatedName": "L",
                    "value": "L",
                    "casing": {}
                  },
                  {
                    "generatedName": "LA",
                    "value": "LA",
                    "casing": {}
                  },
                  {
                    "generatedName": "La",
                    "value": "La",
                    "casing": {}
                  },
                  {
                    "generatedName": "P",
                    "value": "P",
                    "casing": {}
                  },
                  {
                    "generatedName": "PA",
                    "value": "PA",
                    "casing": {}
                  },
                  {
                    "generatedName": "CMYK",
                    "value": "CMYK",
                    "casing": {}
                  },
                  {
                    "generatedName": "YCbCr",
                    "value": "YCbCr",
                    "casing": {}
                  },
                  {
                    "generatedName": "HSV",
                    "value": "HSV",
                    "casing": {}
                  },
                  {
                    "generatedName": "LAB",
                    "value": "LAB",
                    "casing": {}
                  }
                ],
                "groupName": [],
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "enum"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoOrientation",
              "key": "orientation",
              "schema": {
                "generatedName": "ImageInfoOrientation",
                "description": "Image orientation from EXIF.",
                "value": {
                  "description": "Image orientation from EXIF.",
                  "schema": {
                    "minimum": 0,
                    "maximum": 8,
                    "example": 6,
                    "type": "int"
                  },
                  "generatedName": "ImageInfoOrientation",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoFormat",
              "key": "format",
              "schema": {
                "description": "Image format.",
                "schema": {
                  "example": "JPEG",
                  "type": "string"
                },
                "generatedName": "ImageInfoFormat",
                "groupName": [],
                "type": "primitive"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoSequence",
              "key": "sequence",
              "schema": {
                "description": "Set to true if a file contains a sequence of images (GIF for example).",
                "schema": {
                  "example": false,
                  "type": "boolean"
                },
                "generatedName": "ImageInfoSequence",
                "groupName": [],
                "type": "primitive"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoHeight",
              "key": "height",
              "schema": {
                "description": "Image height in pixels.",
                "schema": {
                  "example": 2352,
                  "type": "int"
                },
                "generatedName": "ImageInfoHeight",
                "groupName": [],
                "type": "primitive"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoWidth",
              "key": "width",
              "schema": {
                "description": "Image width in pixels.",
                "schema": {
                  "example": 2935,
                  "type": "int"
                },
                "generatedName": "ImageInfoWidth",
                "groupName": [],
                "type": "primitive"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoGeoLocation",
              "key": "geo_location",
              "schema": {
                "generatedName": "ImageInfoGeoLocation",
                "description": "Geo-location of image from EXIF.",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "imageInfoGeoLocationLatitude",
                      "key": "latitude",
                      "schema": {
                        "description": "Location latitude.",
                        "schema": {
                          "example": -1.1884555555555556,
                          "type": "double"
                        },
                        "generatedName": "ImageInfoGeoLocationLatitude",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "imageInfoGeoLocationLongitude",
                      "key": "longitude",
                      "schema": {
                        "description": "Location longitude.",
                        "schema": {
                          "example": 52.66996666666667,
                          "type": "double"
                        },
                        "generatedName": "ImageInfoGeoLocationLongitude",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "description": "Geo-location of image from EXIF.",
                  "generatedName": "ImageInfoGeoLocation",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "groupName": [],
                "type": "nullable"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoDatetimeOriginal",
              "key": "datetime_original",
              "schema": {
                "generatedName": "ImageInfoDatetimeOriginal",
                "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                "value": {
                  "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                  "schema": {
                    "type": "datetime"
                  },
                  "generatedName": "ImageInfoDatetimeOriginal",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "nullable"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "imageInfoDpi",
              "key": "dpi",
              "schema": {
                "generatedName": "ImageInfoDpi",
                "description": "Image DPI for two dimensions.",
                "value": {
                  "description": "Image DPI for two dimensions.",
                  "value": {
                    "schema": {
                      "example": 72,
                      "type": "double"
                    },
                    "generatedName": "ImageInfoDpiItem",
                    "groupName": [],
                    "type": "primitive"
                  },
                  "generatedName": "ImageInfoDpi",
                  "groupName": [],
                  "type": "array"
                },
                "groupName": [],
                "type": "nullable"
              },
              "audiences": []
            }
          ],
          "allOfPropertyConflicts": [],
          "description": "Image metadata.",
          "generatedName": "ImageInfo",
          "groupName": [],
          "additionalProperties": false,
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "groupName": [],
        "type": "nullable"
      },
      "legacyVideoInfo": {
        "generatedName": "LegacyVideoInfo",
        "description": "Video metadata.",
        "value": {
          "allOf": [],
          "properties": [
            {
              "conflict": {},
              "generatedName": "legacyVideoInfoDuration",
              "key": "duration",
              "schema": {
                "generatedName": "legacyVideoInfoDuration",
                "value": {
                  "description": "Video file's duration in milliseconds.",
                  "schema": {
                    "example": 261827,
                    "type": "double"
                  },
                  "generatedName": "LegacyVideoInfoDuration",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "legacyVideoInfoFormat",
              "key": "format",
              "schema": {
                "generatedName": "legacyVideoInfoFormat",
                "value": {
                  "description": "Video file's format.",
                  "schema": {
                    "example": "mp4",
                    "type": "string"
                  },
                  "generatedName": "LegacyVideoInfoFormat",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "legacyVideoInfoBitrate",
              "key": "bitrate",
              "schema": {
                "generatedName": "legacyVideoInfoBitrate",
                "value": {
                  "description": "Video file's bitrate.",
                  "schema": {
                    "example": 393,
                    "type": "double"
                  },
                  "generatedName": "LegacyVideoInfoBitrate",
                  "groupName": [],
                  "type": "primitive"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "legacyVideoInfoAudio",
              "key": "audio",
              "schema": {
                "generatedName": "legacyVideoInfoAudio",
                "value": {
                  "generatedName": "LegacyVideoInfoAudio",
                  "description": "Audio stream's metadata.",
                  "value": {
                    "allOf": [],
                    "properties": [
                      {
                        "conflict": {},
                        "generatedName": "legacyVideoInfoAudioBitrate",
                        "key": "bitrate",
                        "schema": {
                          "generatedName": "legacyVideoInfoAudioBitrate",
                          "value": {
                            "generatedName": "LegacyVideoInfoAudioBitrate",
                            "description": "Audio stream's bitrate.",
                            "value": {
                              "description": "Audio stream's bitrate.",
                              "schema": {
                                "example": 78,
                                "type": "double"
                              },
                              "generatedName": "LegacyVideoInfoAudioBitrate",
                              "groupName": [],
                              "type": "primitive"
                            },
                            "groupName": [],
                            "type": "nullable"
                          },
                          "groupName": [],
                          "type": "optional"
                        },
                        "audiences": []
                      },
                      {
                        "conflict": {},
                        "generatedName": "legacyVideoInfoAudioCodec",
                        "key": "codec",
                        "schema": {
                          "generatedName": "legacyVideoInfoAudioCodec",
                          "value": {
                            "generatedName": "LegacyVideoInfoAudioCodec",
                            "description": "Audio stream's codec.",
                            "value": {
                              "description": "Audio stream's codec.",
                              "schema": {
                                "example": "aac",
                                "type": "string"
                              },
                              "generatedName": "LegacyVideoInfoAudioCodec",
                              "groupName": [],
                              "type": "primitive"
                            },
                            "groupName": [],
                            "type": "nullable"
                          },
                          "groupName": [],
                          "type": "optional"
                        },
                        "audiences": []
                      },
                      {
                        "conflict": {},
                        "generatedName": "legacyVideoInfoAudioSampleRate",
                        "key": "sample_rate",
                        "schema": {
                          "generatedName": "legacyVideoInfoAudioSampleRate",
                          "value": {
                            "generatedName": "LegacyVideoInfoAudioSampleRate",
                            "description": "Audio stream's sample rate.",
                            "value": {
                              "description": "Audio stream's sample rate.",
                              "schema": {
                                "example": 44100,
                                "type": "double"
                              },
                              "generatedName": "LegacyVideoInfoAudioSampleRate",
                              "groupName": [],
                              "type": "primitive"
                            },
                            "groupName": [],
                            "type": "nullable"
                          },
                          "groupName": [],
                          "type": "optional"
                        },
                        "audiences": []
                      },
                      {
                        "conflict": {},
                        "generatedName": "legacyVideoInfoAudioChannels",
                        "key": "channels",
                        "schema": {
                          "generatedName": "legacyVideoInfoAudioChannels",
                          "value": {
                            "generatedName": "LegacyVideoInfoAudioChannels",
                            "description": "Audio stream's number of channels.",
                            "value": {
                              "description": "Audio stream's number of channels.",
                              "schema": {
                                "example": "2",
                                "type": "string"
                              },
                              "generatedName": "LegacyVideoInfoAudioChannels",
                              "groupName": [],
                              "type": "primitive"
                            },
                            "groupName": [],
                            "type": "nullable"
                          },
                          "groupName": [],
                          "type": "optional"
                        },
                        "audiences": []
                      }
                    ],
                    "allOfPropertyConflicts": [],
                    "description": "Audio stream's metadata.",
                    "generatedName": "LegacyVideoInfoAudio",
                    "groupName": [],
                    "additionalProperties": false,
                    "source": {
                      "file": "../openapi.json",
                      "type": "openapi"
                    },
                    "type": "object"
                  },
                  "groupName": [],
                  "type": "nullable"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "legacyVideoInfoVideo",
              "key": "video",
              "schema": {
                "generatedName": "legacyVideoInfoVideo",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "legacyVideoInfoVideoHeight",
                      "key": "height",
                      "schema": {
                        "generatedName": "legacyVideoInfoVideoHeight",
                        "value": {
                          "description": "Video stream's image height.",
                          "schema": {
                            "example": 360,
                            "type": "double"
                          },
                          "generatedName": "LegacyVideoInfoVideoHeight",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "legacyVideoInfoVideoWidth",
                      "key": "width",
                      "schema": {
                        "generatedName": "legacyVideoInfoVideoWidth",
                        "value": {
                          "description": "Video stream's image width.",
                          "schema": {
                            "example": 640,
                            "type": "double"
                          },
                          "generatedName": "LegacyVideoInfoVideoWidth",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "legacyVideoInfoVideoFrameRate",
                      "key": "frame_rate",
                      "schema": {
                        "generatedName": "legacyVideoInfoVideoFrameRate",
                        "value": {
                          "description": "Video stream's frame rate.",
                          "schema": {
                            "example": 30,
                            "type": "double"
                          },
                          "generatedName": "LegacyVideoInfoVideoFrameRate",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "legacyVideoInfoVideoBitrate",
                      "key": "bitrate",
                      "schema": {
                        "generatedName": "legacyVideoInfoVideoBitrate",
                        "value": {
                          "description": "Video stream's bitrate.",
                          "schema": {
                            "example": 315,
                            "type": "double"
                          },
                          "generatedName": "LegacyVideoInfoVideoBitrate",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "legacyVideoInfoVideoCodec",
                      "key": "codec",
                      "schema": {
                        "generatedName": "legacyVideoInfoVideoCodec",
                        "value": {
                          "description": "Video stream codec.",
                          "schema": {
                            "example": "h264",
                            "type": "string"
                          },
                          "generatedName": "LegacyVideoInfoVideoCodec",
                          "groupName": [],
                          "type": "primitive"
                        },
                        "groupName": [],
                        "type": "optional"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "description": "Video stream's metadata.",
                  "generatedName": "LegacyVideoInfoVideo",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": []
            }
          ],
          "allOfPropertyConflicts": [],
          "description": "Video metadata.",
          "generatedName": "LegacyVideoInfo",
          "groupName": [],
          "additionalProperties": false,
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "groupName": [],
        "type": "nullable"
      },
      "schemas-imageInfo": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "schemasImageInfoColorMode",
            "key": "color_mode",
            "schema": {
              "description": "Image color mode.",
              "generatedName": "SchemasImageInfoColorMode",
              "values": [
                {
                  "generatedName": "RGB",
                  "value": "RGB",
                  "casing": {}
                },
                {
                  "generatedName": "RGBA",
                  "value": "RGBA",
                  "casing": {}
                },
                {
                  "generatedName": "RGBa",
                  "value": "RGBa",
                  "casing": {}
                },
                {
                  "generatedName": "RGBX",
                  "value": "RGBX",
                  "casing": {}
                },
                {
                  "generatedName": "L",
                  "value": "L",
                  "casing": {}
                },
                {
                  "generatedName": "LA",
                  "value": "LA",
                  "casing": {}
                },
                {
                  "generatedName": "La",
                  "value": "La",
                  "casing": {}
                },
                {
                  "generatedName": "P",
                  "value": "P",
                  "casing": {}
                },
                {
                  "generatedName": "PA",
                  "value": "PA",
                  "casing": {}
                },
                {
                  "generatedName": "CMYK",
                  "value": "CMYK",
                  "casing": {}
                },
                {
                  "generatedName": "YCbCr",
                  "value": "YCbCr",
                  "casing": {}
                },
                {
                  "generatedName": "HSV",
                  "value": "HSV",
                  "casing": {}
                },
                {
                  "generatedName": "LAB",
                  "value": "LAB",
                  "casing": {}
                }
              ],
              "groupName": [],
              "source": {
                "file": "../openapi.json",
                "type": "openapi"
              },
              "type": "enum"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoOrientation",
            "key": "orientation",
            "schema": {
              "generatedName": "SchemasImageInfoOrientation",
              "description": "Image orientation from EXIF.",
              "value": {
                "description": "Image orientation from EXIF.",
                "schema": {
                  "minimum": 0,
                  "maximum": 8,
                  "example": 6,
                  "type": "int"
                },
                "generatedName": "SchemasImageInfoOrientation",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoFormat",
            "key": "format",
            "schema": {
              "description": "Image format.",
              "schema": {
                "example": "JPEG",
                "type": "string"
              },
              "generatedName": "SchemasImageInfoFormat",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoSequence",
            "key": "sequence",
            "schema": {
              "description": "Set to true if a file contains a sequence of images (GIF for example).",
              "schema": {
                "example": false,
                "type": "boolean"
              },
              "generatedName": "SchemasImageInfoSequence",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoHeight",
            "key": "height",
            "schema": {
              "description": "Image height in pixels.",
              "schema": {
                "example": 2352,
                "type": "int"
              },
              "generatedName": "SchemasImageInfoHeight",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoWidth",
            "key": "width",
            "schema": {
              "description": "Image width in pixels.",
              "schema": {
                "example": 2935,
                "type": "int"
              },
              "generatedName": "SchemasImageInfoWidth",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoGeoLocation",
            "key": "geo_location",
            "schema": {
              "generatedName": "SchemasImageInfoGeoLocation",
              "description": "Geo-location of image from EXIF.",
              "value": {
                "allOf": [],
                "properties": [
                  {
                    "conflict": {},
                    "generatedName": "schemasImageInfoGeoLocationLatitude",
                    "key": "latitude",
                    "schema": {
                      "description": "Location latitude.",
                      "schema": {
                        "example": -1.1884555555555556,
                        "type": "double"
                      },
                      "generatedName": "SchemasImageInfoGeoLocationLatitude",
                      "groupName": [],
                      "type": "primitive"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "schemasImageInfoGeoLocationLongitude",
                    "key": "longitude",
                    "schema": {
                      "description": "Location longitude.",
                      "schema": {
                        "example": 52.66996666666667,
                        "type": "double"
                      },
                      "generatedName": "SchemasImageInfoGeoLocationLongitude",
                      "groupName": [],
                      "type": "primitive"
                    },
                    "audiences": []
                  }
                ],
                "allOfPropertyConflicts": [],
                "description": "Geo-location of image from EXIF.",
                "generatedName": "SchemasImageInfoGeoLocation",
                "groupName": [],
                "additionalProperties": false,
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "object"
              },
              "groupName": [],
              "type": "nullable"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoDatetimeOriginal",
            "key": "datetime_original",
            "schema": {
              "generatedName": "SchemasImageInfoDatetimeOriginal",
              "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
              "value": {
                "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                "schema": {
                  "type": "datetime"
                },
                "generatedName": "SchemasImageInfoDatetimeOriginal",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "schemasImageInfoDpi",
            "key": "dpi",
            "schema": {
              "generatedName": "SchemasImageInfoDpi",
              "description": "Image DPI for two dimensions.",
              "value": {
                "description": "Image DPI for two dimensions.",
                "value": {
                  "schema": {
                    "example": 72,
                    "type": "double"
                  },
                  "generatedName": "SchemasImageInfoDpiItem",
                  "groupName": [],
                  "type": "primitive"
                },
                "generatedName": "SchemasImageInfoDpi",
                "groupName": [],
                "type": "array"
              },
              "groupName": [],
              "type": "nullable"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Image metadata.",
        "generatedName": "SchemasImageInfo",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "videoInfo": {
        "allOf": [],
        "properties": [
          {
            "conflict": {},
            "generatedName": "videoInfoDuration",
            "key": "duration",
            "schema": {
              "generatedName": "VideoInfoDuration",
              "description": "Video file's duration in milliseconds.",
              "value": {
                "description": "Video file's duration in milliseconds.",
                "schema": {
                  "example": 261827,
                  "type": "int"
                },
                "generatedName": "VideoInfoDuration",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "videoInfoFormat",
            "key": "format",
            "schema": {
              "description": "Video file's format.",
              "schema": {
                "example": "mp4",
                "type": "string"
              },
              "generatedName": "VideoInfoFormat",
              "groupName": [],
              "type": "primitive"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "videoInfoBitrate",
            "key": "bitrate",
            "schema": {
              "generatedName": "VideoInfoBitrate",
              "description": "Video file's bitrate.",
              "value": {
                "description": "Video file's bitrate.",
                "schema": {
                  "example": 393,
                  "type": "int"
                },
                "generatedName": "VideoInfoBitrate",
                "groupName": [],
                "type": "primitive"
              },
              "groupName": [],
              "type": "nullable"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "videoInfoAudio",
            "key": "audio",
            "schema": {
              "value": {
                "allOf": [],
                "properties": [
                  {
                    "conflict": {},
                    "generatedName": "videoInfoAudioItemBitrate",
                    "key": "bitrate",
                    "schema": {
                      "generatedName": "VideoInfoAudioItemBitrate",
                      "description": "Audio stream's bitrate.",
                      "value": {
                        "description": "Audio stream's bitrate.",
                        "schema": {
                          "example": 78,
                          "type": "int"
                        },
                        "generatedName": "VideoInfoAudioItemBitrate",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "nullable"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "videoInfoAudioItemCodec",
                    "key": "codec",
                    "schema": {
                      "generatedName": "VideoInfoAudioItemCodec",
                      "description": "Audio stream's codec.",
                      "value": {
                        "description": "Audio stream's codec.",
                        "schema": {
                          "example": "aac",
                          "type": "string"
                        },
                        "generatedName": "VideoInfoAudioItemCodec",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "nullable"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "videoInfoAudioItemSampleRate",
                    "key": "sample_rate",
                    "schema": {
                      "generatedName": "VideoInfoAudioItemSampleRate",
                      "description": "Audio stream's sample rate.",
                      "value": {
                        "description": "Audio stream's sample rate.",
                        "schema": {
                          "example": 44100,
                          "type": "int"
                        },
                        "generatedName": "VideoInfoAudioItemSampleRate",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "nullable"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "videoInfoAudioItemChannels",
                    "key": "channels",
                    "schema": {
                      "generatedName": "VideoInfoAudioItemChannels",
                      "description": "Audio stream's number of channels.",
                      "value": {
                        "description": "Audio stream's number of channels.",
                        "schema": {
                          "example": 2,
                          "type": "int"
                        },
                        "generatedName": "VideoInfoAudioItemChannels",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "nullable"
                    },
                    "audiences": []
                  }
                ],
                "allOfPropertyConflicts": [],
                "description": "Audio stream's metadata.",
                "generatedName": "VideoInfoAudioItem",
                "groupName": [],
                "additionalProperties": false,
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "object"
              },
              "generatedName": "VideoInfoAudio",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          },
          {
            "conflict": {},
            "generatedName": "videoInfoVideo",
            "key": "video",
            "schema": {
              "value": {
                "allOf": [],
                "properties": [
                  {
                    "conflict": {},
                    "generatedName": "videoInfoVideoItemHeight",
                    "key": "height",
                    "schema": {
                      "description": "Video stream's image height.",
                      "schema": {
                        "example": 360,
                        "type": "int"
                      },
                      "generatedName": "VideoInfoVideoItemHeight",
                      "groupName": [],
                      "type": "primitive"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "videoInfoVideoItemWidth",
                    "key": "width",
                    "schema": {
                      "description": "Video stream's image width.",
                      "schema": {
                        "example": 640,
                        "type": "int"
                      },
                      "generatedName": "VideoInfoVideoItemWidth",
                      "groupName": [],
                      "type": "primitive"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "videoInfoVideoItemFrameRate",
                    "key": "frame_rate",
                    "schema": {
                      "description": "Video stream's frame rate.",
                      "schema": {
                        "example": 30,
                        "type": "double"
                      },
                      "generatedName": "VideoInfoVideoItemFrameRate",
                      "groupName": [],
                      "type": "primitive"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "videoInfoVideoItemBitrate",
                    "key": "bitrate",
                    "schema": {
                      "generatedName": "VideoInfoVideoItemBitrate",
                      "description": "Video stream's bitrate.",
                      "value": {
                        "description": "Video stream's bitrate.",
                        "schema": {
                          "example": 315,
                          "type": "int"
                        },
                        "generatedName": "VideoInfoVideoItemBitrate",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "nullable"
                    },
                    "audiences": []
                  },
                  {
                    "conflict": {},
                    "generatedName": "videoInfoVideoItemCodec",
                    "key": "codec",
                    "schema": {
                      "generatedName": "VideoInfoVideoItemCodec",
                      "description": "Video stream's codec.",
                      "value": {
                        "description": "Video stream's codec.",
                        "schema": {
                          "example": "h264",
                          "type": "string"
                        },
                        "generatedName": "VideoInfoVideoItemCodec",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "groupName": [],
                      "type": "nullable"
                    },
                    "audiences": []
                  }
                ],
                "allOfPropertyConflicts": [],
                "description": "Video stream's metadata.",
                "generatedName": "VideoInfoVideoItem",
                "groupName": [],
                "additionalProperties": false,
                "source": {
                  "file": "../openapi.json",
                  "type": "openapi"
                },
                "type": "object"
              },
              "generatedName": "VideoInfoVideo",
              "groupName": [],
              "type": "array"
            },
            "audiences": []
          }
        ],
        "allOfPropertyConflicts": [],
        "description": "Video metadata.",
        "generatedName": "VideoInfo",
        "groupName": [],
        "additionalProperties": false,
        "source": {
          "file": "../openapi.json",
          "type": "openapi"
        },
        "type": "object"
      },
      "contentInfo": {
        "generatedName": "ContentInfo",
        "description": "Information about file content.",
        "value": {
          "allOf": [],
          "properties": [
            {
              "conflict": {},
              "generatedName": "contentInfoMime",
              "key": "mime",
              "schema": {
                "generatedName": "contentInfoMime",
                "value": {
                  "allOf": [],
                  "properties": [
                    {
                      "conflict": {},
                      "generatedName": "contentInfoMimeMime",
                      "key": "mime",
                      "schema": {
                        "description": "Full MIME type.",
                        "schema": {
                          "example": "image/jpeg",
                          "type": "string"
                        },
                        "generatedName": "ContentInfoMimeMime",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "contentInfoMimeType",
                      "key": "type",
                      "schema": {
                        "description": "Type of MIME type.",
                        "schema": {
                          "example": "image",
                          "type": "string"
                        },
                        "generatedName": "ContentInfoMimeType",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    },
                    {
                      "conflict": {},
                      "generatedName": "contentInfoMimeSubtype",
                      "key": "subtype",
                      "schema": {
                        "description": "Subtype of MIME type.",
                        "schema": {
                          "example": "jpeg",
                          "type": "string"
                        },
                        "generatedName": "ContentInfoMimeSubtype",
                        "groupName": [],
                        "type": "primitive"
                      },
                      "audiences": []
                    }
                  ],
                  "allOfPropertyConflicts": [],
                  "description": "MIME type.",
                  "generatedName": "ContentInfoMime",
                  "groupName": [],
                  "additionalProperties": false,
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "object"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": []
            },
            {
              "conflict": {},
              "generatedName": "contentInfoImage",
              "key": "image",
              "schema": {
                "generatedName": "contentInfoImage",
                "value": {
                  "generatedName": "ContentInfoImage",
                  "schema": "schemas-imageInfo",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": [],
              "readonly": false
            },
            {
              "conflict": {},
              "generatedName": "contentInfoVideo",
              "key": "video",
              "schema": {
                "generatedName": "contentInfoVideo",
                "value": {
                  "generatedName": "ContentInfoVideo",
                  "schema": "videoInfo",
                  "source": {
                    "file": "../openapi.json",
                    "type": "openapi"
                  },
                  "type": "reference"
                },
                "groupName": [],
                "type": "optional"
              },
              "audiences": [],
              "readonly": false
            }
          ],
          "allOfPropertyConflicts": [],
          "description": "Information about file content.",
          "generatedName": "ContentInfo",
          "groupName": [],
          "additionalProperties": false,
          "source": {
            "file": "../openapi.json",
            "type": "openapi"
          },
          "type": "object"
        },
        "groupName": [],
        "type": "nullable"
      },
      "metadata": {
        "generatedName": "Metadata",
        "description": "Arbitrary metadata associated with a file.",
        "value": {
          "description": "Arbitrary metadata associated with a file.",
          "key": {
            "schema": {
              "type": "string"
            },
            "generatedName": "MetadataKey",
            "groupName": [],
            "type": "primitive"
          },
          "value": {
            "generatedName": "MetadataValue",
            "type": "unknown"
          },
          "generatedName": "Metadata",
          "groupName": [],
          "type": "map"
        },
        "groupName": [],
        "type": "nullable"
      }
    },
    "namespacedSchemas": {}
  },
  "variables": {},
  "nonRequestReferencedSchemas": {},
  "securitySchemes": {},
  "globalHeaders": [],
  "idempotencyHeaders": [],
  "groups": {}
}