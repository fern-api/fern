{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "CreateAccountHolderV3AccountHoldersPostRequestBadRequestError": {
            "docs": "Account holder with the provided id already exists.",
            "status-code": 400,
            "type": "unknown",
          },
          "CreateAccountHolderV3AccountHoldersPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CustomCategoriesPostV3CategoriesAccountHolderTypePostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteAccountHolderV3AccountHoldersIdDeleteRequestNotFoundError": {
            "docs": "Account holder with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "DeleteAccountHolderV3AccountHoldersIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteBankStatementV3BankStatementsIdDeleteRequestNotFoundError": {
            "docs": "Bank statement with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "DeleteBankStatementV3BankStatementsIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteCustomCategorySetV3CategoriesAccountHolderTypeResetPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteReportV3ReportsIdDeleteRequestNotFoundError": {
            "docs": "Report with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "DeleteReportV3ReportsIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteTransactionV3TransactionsIdDeleteRequestNotFoundError": {
            "docs": "Transaction with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "DeleteTransactionV3TransactionsIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteWebhookV3WebhooksIdDeleteRequestNotFoundError": {
            "docs": "Webhook with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "DeleteWebhookV3WebhooksIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FilterAppendV3RulesAppendPostRequestBadRequestError": {
            "docs": "Provided rule has invalid structure",
            "status-code": 400,
            "type": "unknown",
          },
          "FilterAppendV3RulesAppendPostRequestContentTooLargeError": {
            "docs": "Ruleset after append was larger than 50KiB",
            "status-code": 413,
            "type": "unknown",
          },
          "FilterAppendV3RulesAppendPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FilterDeleteV3RulesIndexDeleteRequestBadRequestError": {
            "docs": "Provided index does not exist in ruleset",
            "status-code": 400,
            "type": "unknown",
          },
          "FilterDeleteV3RulesIndexDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FilterGetV3RulesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FilterPatchV3RulesIndexPatchRequestBadRequestError": {
            "docs": "Provided index does not exist in ruleset",
            "status-code": 400,
            "type": "unknown",
          },
          "FilterPatchV3RulesIndexPatchRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FilterPostV3RulesPostRequestBadRequestError": {
            "docs": "Provided ruleset has invalid structure",
            "status-code": 400,
            "type": "unknown",
          },
          "FilterPostV3RulesPostRequestContentTooLargeError": {
            "docs": "Ruleset was larger than 50KiB",
            "status-code": 413,
            "type": "unknown",
          },
          "FilterPostV3RulesPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestNotFoundError": {
            "docs": "Account holder with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetAccountHolderV3AccountHoldersIdGetRequestNotFoundError": {
            "docs": "Account holder with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetAccountHolderV3AccountHoldersIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetAccountHoldersV3AccountHoldersGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetBankStatementResultV3BankStatementsIdResultsGetRequestNotFoundError": {
            "docs": "Bank statement with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetBankStatementResultV3BankStatementsIdResultsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestNotFoundError": {
            "docs": "Bank statement with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetBankStatementV3BankStatementsIdGetRequestNotFoundError": {
            "docs": "Bank statement with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetBankStatementV3BankStatementsIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetBankStatementsV3BankStatementsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetBatchResultsV3BatchesIdResultsGetRequestNotFoundError": {
            "docs": "Batch with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetBatchResultsV3BatchesIdResultsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetBatchesV3BatchesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetCategorySetV3CategoriesAccountHolderTypeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetEntityByIdV3EntitiesIdGetRequestBadRequestError": {
            "docs": "Bad request.",
            "status-code": 400,
            "type": "unknown",
          },
          "GetEntityByIdV3EntitiesIdGetRequestNotFoundError": {
            "docs": "Entity does not exist for ID",
            "status-code": 404,
            "type": "unknown",
          },
          "GetEntityByIdV3EntitiesIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetReportV3ReportsIdGetRequestNotFoundError": {
            "docs": "Report with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetReportV3ReportsIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetReportsV3ReportsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetSingleBatchV3BatchesIdGetRequestNotFoundError": {
            "docs": "Batch with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetSingleBatchV3BatchesIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetTransactionV3TransactionsIdGetRequestNotFoundError": {
            "docs": "Transaction with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "GetTransactionV3TransactionsIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetWebhookV3WebhooksIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetWebhooksV3WebhooksGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListTransactionsV3TransactionsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "PatchWebhookV3WebhooksIdPatchRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "PostBankStatementV3BankStatementsPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "PostBatchV3BatchesPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "PostReportV3ReportsPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "PostTransactionsV3TransactionsPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "PostWebhookV3WebhooksPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SearchEntityV3EntitiesLookupGetRequestBadRequestError": {
            "docs": "Bad request.",
            "status-code": 400,
            "type": "unknown",
          },
          "SearchEntityV3EntitiesLookupGetRequestLockedError": {
            "docs": "Not enough credits.",
            "status-code": 423,
            "type": "unknown",
          },
          "SearchEntityV3EntitiesLookupGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetTransactionAhV3TransactionsIdAssignPostRequestNotFoundError": {
            "docs": "Transaction or account holder with the provided id not found.",
            "status-code": 404,
            "type": "unknown",
          },
          "SetTransactionAhV3TransactionsIdAssignPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
        },
        "types": {
          "Account": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "closing_balance": {
                "type": "optional<double>",
              },
              "iso_currency_code": {
                "type": "optional<string>",
              },
              "number": {
                "type": "optional<string>",
              },
              "opening_balance": {
                "type": "optional<double>",
              },
              "type": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountHolder": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "address": {
                "type": "optional<Address>",
              },
              "name": {
                "type": "optional<string>",
              },
              "type": {
                "type": "optional<AccountType>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountHolderExternal": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The timestamp of when the account holder was created.",
                "type": "datetime",
              },
              "id": {
                "docs": "The unique ID of the account holder of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "name": {
                "docs": "The name of the account holder",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The type of the account holder. ",
                "type": "AccountHolderType",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountHolderType": {
            "docs": "An enumeration.",
            "enum": [
              "consumer",
              "business",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountType": {
            "docs": "An enumeration.",
            "enum": [
              "consumer",
              "business",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AccountingCategory": {
            "docs": "An enumeration.",
            "enum": [
              {
                "name": "OperationalExpenses",
                "value": "operational expenses",
              },
              {
                "name": "CostOfGoodsSold",
                "value": "cost of goods sold",
              },
              "revenue",
              "financing",
              "taxes",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ActionModel": {
            "type": "action",
          },
          "Address": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "city": {
                "type": "optional<string>",
              },
              "country": {
                "type": "optional<string>",
              },
              "postcode": {
                "type": "optional<string>",
              },
              "state": {
                "type": "optional<string>",
              },
              "street": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatement": {
            "docs": "Represents a bank statement with details about the file and its status.",
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The date and time when the job was created.",
                "type": "datetime",
              },
              "error": {
                "type": "optional<BankStatementError>",
              },
              "file": {
                "docs": "Information about the bank statement file being processed.",
                "type": "BankStatementFile",
              },
              "id": {
                "docs": "A unique identifier for the bank statement job.",
                "type": "string",
              },
              "name": {
                "docs": "The name of the bank statement file, if available.",
                "type": "optional<string>",
              },
              "status": {
                "docs": "The current status of the document.",
                "type": "BankStatementStatus",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatementAccount": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "closing_balance": {
                "docs": "The closing balance of the account for the statement period.",
                "type": "optional<double>",
              },
              "end_date": {
                "docs": "The end date of the statement period.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "is_balance_reconciled": {
                "docs": "Indicates whether the balance has been reconciled.",
                "type": "optional<boolean>",
              },
              "number": {
                "docs": "The account number, if available.",
                "type": "optional<string>",
              },
              "opening_balance": {
                "docs": "The opening balance of the account for the statement period.",
                "type": "optional<double>",
              },
              "start_date": {
                "docs": "The start date of the statement period.",
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "total_incoming": {
                "docs": "The sum of amounts of all incoming transactions.",
                "type": "optional<double>",
              },
              "total_outgoing": {
                "docs": "The sum of amounts of all outgoing transactions.",
                "type": "optional<double>",
              },
              "transactions": {
                "docs": "List of transactions for this account.",
                "type": "list<BankStatementTransaction>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatementError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "type": "BankStatementErrorCode",
              },
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatementErrorCode": {
            "docs": "An enumeration.",
            "enum": [
              "invalid_bank_statement",
              "internal_error",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatementFile": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "no_pages": {
                "docs": "The number of pages in the bank statement file.",
                "type": "integer",
              },
              "size": {
                "docs": "The size of the bank statement file in bytes, if available.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatementResults": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accounts": {
                "docs": "List of accounts in the bank statement.",
                "type": "list<BankStatementAccount>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatementStatus": {
            "docs": "An enumeration.",
            "enum": [
              "processing",
              "completed",
              "error",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BankStatementTransaction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "amount": {
                "docs": "The amount of the transaction in the `currency`. Must be a positive value. For example, if the `currency` is USD, then it's the amount in dollars.",
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "currency": {
                "docs": "The currency of the transaction in ISO 4217 format",
                "type": "Currency",
              },
              "date": {
                "docs": "The date that the transaction was posted. Uses ISO 8601 format (YYYY-MM-DD)",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "docs": "The description string of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 1024,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "entry_type": {
                "docs": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
                "type": "EntryType",
              },
              "id": {
                "docs": "A unique identifier of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "running_balance": {
                "docs": "The account's balance when this transaction was performed",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Batch": {
            "docs": "The `Batch` object represents the status and progress of an asynchronous batch enrichment job.",
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The timestamp of when the batch was created.",
                "type": "datetime",
              },
              "id": {
                "docs": "A unique identifier for the batch.",
                "type": "string",
              },
              "progress": {
                "docs": "The number of transactions processed so far.",
                "type": "integer",
              },
              "status": {
                "docs": "The current status of the batch. A batch will error if at least one of the transactions contains an error.",
                "type": "BatchStatus",
              },
              "total": {
                "docs": "The total number of transactions in the batch.",
                "type": "integer",
              },
              "updated_at": {
                "docs": "The timestamp of when the batch was last updated.",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BatchResult": {
            "docs": "The `BatchResult` object represents the result of a batch enrichment job, including its status and
enriched transactions.",
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "A unique identifier for the batch.",
                "type": "string",
              },
              "results": {
                "type": "EnrichmentResult",
              },
              "status": {
                "docs": "The current status of the batch job.",
                "type": "BatchStatus",
              },
              "total": {
                "docs": "The total number of transactions in the batch result.",
                "type": "integer",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BatchStatus": {
            "docs": "An enumeration.",
            "enum": [
              "processing",
              "completed",
              "error",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Categories": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "accounting": {
                "docs": "The corresponding accounting category. Only available for `business` transactions.",
                "type": "optional<AccountingCategory>",
              },
              "general": {
                "docs": "The category of the transaction. View the valid set of categories for your key [here](./docs/v3/enrichment/entities).",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CategoryConfidence": {
            "docs": "An enumeration.",
            "enum": [
              "high",
              "medium",
              "low",
              "unknown",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CategorySet": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "incoming": {
                "type": "list<string>",
              },
              "outgoing": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Counterparty": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The unique UUID identifier of the entity",
                "type": "optional<string>",
              },
              "logo": {
                "docs": "Logo's URL",
                "type": "optional<string>",
              },
              "mccs": {
                "docs": "A list of [Merchant Category Codes](https://en.wikipedia.org/wiki/Merchant_category_code)",
                "type": "optional<list<integer>>",
              },
              "name": {
                "docs": "The name of the entity",
                "type": "optional<string>",
              },
              "type": {
                "type": "CounterpartyType",
              },
              "website": {
                "docs": "The website URL of the entity",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CounterpartyType": {
            "docs": "An enumeration.",
            "enum": [
              "person",
              "organization",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Country": {
            "docs": "An enumeration.",
            "enum": [
              "AD",
              "AE",
              "AF",
              "AG",
              "AI",
              "AL",
              "AM",
              "AO",
              "AR",
              "AS",
              "AT",
              "AU",
              "AW",
              "AZ",
              "BA",
              "BB",
              "BD",
              "BE",
              "BF",
              "BG",
              "BH",
              "BI",
              "BJ",
              "BL",
              "BM",
              "BN",
              "BO",
              "BQ",
              "BR",
              "BS",
              "BT",
              "BV",
              "BW",
              "BY",
              "BZ",
              "CA",
              "CC",
              "CD",
              "CF",
              "CG",
              "CH",
              "CI",
              "CK",
              "CL",
              "CM",
              "CN",
              "CO",
              "CR",
              "CU",
              "CV",
              "CW",
              "CX",
              "CY",
              "CZ",
              "DE",
              "DJ",
              "DK",
              "DM",
              "DO",
              "DZ",
              "EC",
              "EE",
              "EG",
              "EH",
              "ER",
              "ES",
              "ET",
              "FI",
              "FJ",
              "FK",
              "FM",
              "FR",
              "GA",
              "GB",
              "GD",
              "GE",
              "GF",
              "GG",
              "GH",
              "GI",
              "GL",
              "GM",
              "GN",
              "GP",
              "GQ",
              "GR",
              "GS",
              "GT",
              "GU",
              "GW",
              "GY",
              "HK",
              "HM",
              "HN",
              "HR",
              "HT",
              "HU",
              "ID",
              "IE",
              "IL",
              "IM",
              "IN",
              "IO",
              "IQ",
              "IR",
              "IS",
              "IT",
              "JE",
              "JM",
              "JO",
              "JP",
              "KE",
              "KG",
              "KH",
              "KI",
              "KM",
              "KN",
              "KP",
              "KR",
              "KW",
              "KY",
              "KZ",
              "LA",
              "LB",
              "LC",
              "LI",
              "LK",
              "LR",
              "LS",
              "LT",
              "LU",
              "LV",
              "LY",
              "MA",
              "MC",
              "MD",
              "ME",
              "MF",
              "MG",
              "MH",
              "MK",
              "ML",
              "MM",
              "MN",
              "MO",
              "MP",
              "MQ",
              "MR",
              "MS",
              "MT",
              "MU",
              "MV",
              "MW",
              "MX",
              "MY",
              "MZ",
              "NA",
              "NC",
              "NE",
              "NF",
              "NG",
              "NI",
              "NL",
              "NO",
              "NP",
              "NR",
              "NU",
              "NZ",
              "OM",
              "PA",
              "PE",
              "PF",
              "PG",
              "PH",
              "PK",
              "PL",
              "PM",
              "PN",
              "PR",
              "PS",
              "PT",
              "PW",
              "PY",
              "QA",
              "RE",
              "RO",
              "RS",
              "RU",
              "RW",
              "SA",
              "SB",
              "SC",
              "SD",
              "SE",
              "SG",
              "SH",
              "SI",
              "SJ",
              "SK",
              "SL",
              "SM",
              "SN",
              "SO",
              "SR",
              "SS",
              "ST",
              "SV",
              "SX",
              "SY",
              "SZ",
              "TC",
              "TD",
              "TG",
              "TH",
              "TJ",
              "TK",
              "TL",
              "TM",
              "TN",
              "TO",
              "TR",
              "TT",
              "TV",
              "TW",
              "TZ",
              "UA",
              "UG",
              "UM",
              "US",
              "UY",
              "UZ",
              "VC",
              "VE",
              "VG",
              "VI",
              "VN",
              "VU",
              "WF",
              "WS",
              "YE",
              "YT",
              "ZA",
              "ZM",
              "ZW",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Currency": {
            "docs": "An enumeration.",
            "enum": [
              "EUR",
              "AED",
              "AFN",
              "XCD",
              "ALL",
              "AMD",
              "AOA",
              "ARS",
              "USD",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "XOF",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BRL",
              "BSD",
              "INR",
              "NOK",
              "BWP",
              "BYR",
              "BZD",
              "CAD",
              "CDF",
              "XAF",
              "CHF",
              "NZD",
              "CLP",
              "CNY",
              "COP",
              "CRC",
              "CUP",
              "CVE",
              "ANG",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "MAD",
              "ERN",
              "ETB",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HUF",
              "IDR",
              "ILS",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "ZAR",
              "LYD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MYR",
              "MZN",
              "XPF",
              "NGN",
              "NIO",
              "NPR",
              "OMR",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STD",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "UYU",
              "UZS",
              "VEF",
              "VND",
              "VUV",
              "WST",
              "YER",
              "ZMW",
              "ZWL",
              "HRK",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CustomCategorySet": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "incoming": {
                "type": "list<string>",
              },
              "outgoing": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentStatus": {
            "docs": "An enumeration.",
            "enum": [
              "queued",
              "processing",
              "processed",
              "failed",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EditableTxProp": {
            "enum": [
              "logo",
              "website",
              "merchant",
              "merchant_id",
              "location",
              "person",
              "transaction_type",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnrichedTransaction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "categories": {
                "type": "optional<Categories>",
              },
              "created_at": {
                "docs": "The timestamp of when the account holder was created.",
                "type": "datetime",
              },
              "entities": {
                "type": "optional<Entities>",
              },
              "error": {
                "type": "optional<TransactionError>",
              },
              "id": {
                "docs": "A unique identifier for the transaction. If two transactions are submitted with the same `id` the most recent one will replace the previous one.",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "location": {
                "type": "optional<Location>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EnrichmentResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "transactions": {
                "docs": "A list of enriched transactions resulting from the enrichment of this batch.",
                "type": "list<EnrichedTransaction>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Entities": {
            "docs": "Entities found by identity identification",
            "inline": undefined,
            "properties": {
              "counterparty": {
                "type": "optional<Counterparty>",
              },
              "intermediaries": {
                "type": "optional<list<Intermediary>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Entity": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The unique UUID identifier of the entity",
                "type": "optional<string>",
              },
              "logo": {
                "docs": "Logo's URL",
                "type": "optional<string>",
              },
              "mccs": {
                "docs": "A list of [Merchant Category Codes](https://en.wikipedia.org/wiki/Merchant_category_code)",
                "type": "optional<list<integer>>",
              },
              "name": {
                "docs": "The name of the entity",
                "type": "optional<string>",
              },
              "website": {
                "docs": "The website URL of the entity",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "EntryType": {
            "docs": "An enumeration.",
            "enum": [
              "incoming",
              "outgoing",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Filter": {
            "type": "list<action>",
          },
          "FilterModel": {
            "type": "Filter",
          },
          "FnCall": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "FnCall&&",
              },
              {
                "type": "FnCall||",
              },
              {
                "type": "FnCall==",
              },
              {
                "type": "FnCall+",
              },
              {
                "type": "FnCall-",
              },
              {
                "type": "FnCall*",
              },
              {
                "type": "FnCall/",
              },
              {
                "type": "FnCall//",
              },
              {
                "type": "FnCall<",
              },
              {
                "type": "FnCall<=",
              },
              {
                "type": "FnCall>",
              },
              {
                "type": "FnCall>=",
              },
              {
                "type": "FnCall!",
              },
              {
                "type": "FnCallIsSubstring",
              },
              {
                "type": "FnCallStartsWith",
              },
              {
                "type": "FnCallEndsWith",
              },
              {
                "type": "FnCallToLower",
              },
              {
                "type": "FnCallToUpper",
              },
              {
                "type": "FnCallHasLabel",
              },
              {
                "type": "FnCallHasMcc",
              },
              {
                "type": "FnCallGet",
              },
            ],
          },
          "FnCall!": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "!": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall&&": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "&&": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall*": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "*": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall+": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "+": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall-": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "-": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall/": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "/": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall//": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "//": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall<": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "<": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall<=": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "<=": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall==": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "==": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall>": {
            "docs": undefined,
            "inline": true,
            "properties": {
              ">": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall>=": {
            "docs": undefined,
            "inline": true,
            "properties": {
              ">=": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallEndsWith": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "ends_with": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallGet": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "get": {
                "type": "properties",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallHasLabel": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "has_label": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallHasMcc": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "has_mcc": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallIsSubstring": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "is_substring": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallStartsWith": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "starts_with": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallToLower": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "to_lower": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCallToUpper": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "to_upper": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "FnCall||": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "||": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "HTTPValidationError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "detail": {
                "type": "optional<list<ValidationError>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Intermediary": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The unique UUID identifier of the entity",
                "type": "optional<string>",
              },
              "logo": {
                "docs": "Logo's URL",
                "type": "optional<string>",
              },
              "mccs": {
                "docs": "A list of [Merchant Category Codes](https://en.wikipedia.org/wiki/Merchant_category_code)",
                "type": "optional<list<integer>>",
              },
              "name": {
                "docs": "The name of the entity",
                "type": "optional<string>",
              },
              "type": {
                "type": "IntermediaryType",
              },
              "website": {
                "docs": "The website URL of the entity",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IntermediaryType": {
            "docs": "An enumeration.",
            "enum": [
              "delivery_service",
              "payment_processor",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Location": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "raw_address": {
                "docs": "An unstructured string containing the address",
                "type": "optional<string>",
              },
              "structured": {
                "docs": "When raw is set, a structured representation of it.",
                "type": "optional<LocationStructured>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LocationInput": {
            "docs": "Location of where the transaction has taken place. This can greatly improve entity identification, especially
under ambiguity.",
            "inline": undefined,
            "properties": {
              "country": {
                "docs": "The country where the transaction was made in ISO 3166-2 format",
                "type": "Country",
              },
              "raw_address": {
                "docs": "An unstructured string containing the address",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LocationStructured": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "apple_maps_url": {
                "docs": "A URL link to view the location on Apple Maps",
                "type": "optional<string>",
              },
              "city": {
                "docs": "The city where the location is situated",
                "type": "optional<string>",
              },
              "country": {
                "docs": "The full name of the country",
                "type": "optional<string>",
              },
              "country_code": {
                "docs": "The country code of the location in ISO 3166-2 format",
                "type": "optional<string>",
              },
              "google_maps_url": {
                "docs": "A URL link to view the location on Google Maps",
                "type": "optional<string>",
              },
              "latitude": {
                "docs": "The latitude coordinate of the location",
                "type": "optional<double>",
              },
              "longitude": {
                "docs": "The longitude coordinate of the location",
                "type": "optional<double>",
              },
              "postcode": {
                "docs": "The postal code or ZIP code of the location",
                "type": "optional<string>",
              },
              "state": {
                "docs": "The state or region of the location",
                "type": "optional<string>",
              },
              "store_number": {
                "docs": "A unique identifier for a specific store or branch, if applicable",
                "type": "optional<string>",
              },
              "street": {
                "docs": "The street name and number of the location",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModifyLabels": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "ModifyLabelsAddLabel",
              },
              {
                "type": "ModifyLabelsRemoveLabel",
              },
              {
                "type": "ModifyLabelsSetLabels",
              },
              {
                "type": "ModifyLabelsAddMcc",
              },
              {
                "type": "ModifyLabelsRemoveMcc",
              },
              {
                "type": "ModifyLabelsSetMcc",
              },
            ],
          },
          "ModifyLabelsAddLabel": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "add_label": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModifyLabelsAddMcc": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "add_mcc": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModifyLabelsRemoveLabel": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "remove_label": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModifyLabelsRemoveMcc": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "remove_mcc": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModifyLabelsSetLabels": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "set_labels": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModifyLabelsSetMcc": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "set_mcc": "list<expression>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PagedResponseAccountHolderExternal": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "type": "list<AccountHolderExternal>",
              },
              "next_cursor": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PagedResponseBankStatement": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "type": "list<BankStatement>",
              },
              "next_cursor": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PagedResponseBatch": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "type": "list<Batch>",
              },
              "next_cursor": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PagedResponseReport": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "type": "list<Report>",
              },
              "next_cursor": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PagedResponseTransaction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "type": "list<Transaction>",
              },
              "next_cursor": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PagedResponseWebhook": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "type": "list<Webhook>",
              },
              "next_cursor": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Recurrence": {
            "docs": "The `Recurrence` object represents the recurrence pattern of a transaction. It provides information about
whether a transaction is a one-time event or a part of a recurring series.",
            "inline": undefined,
            "properties": {
              "type": {
                "docs": "Whether the transaction is a one-time transfer `one-off`, regularly with varying pricing `recurring` or with fixed pricing `subscription`",
                "type": "RecurrenceType",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RecurrenceGroup": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "average_amount": {
                "docs": "The average amount per transaction in this group",
                "type": "double",
              },
              "categories": {
                "docs": "Categories of the transactions in the recurrence group",
                "type": "Categories",
              },
              "counterparty": {
                "docs": "Counterparty of the transactions",
                "type": "Counterparty",
              },
              "end_date": {
                "docs": "The date of the most recent transaction in the group",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "docs": "A unique UUID identifier for the group",
                "type": "string",
              },
              "periodicity": {
                "docs": "A human-readable description of the transaction frequency",
                "type": "RecurrencePeriodicity",
              },
              "periodicity_in_days": {
                "docs": "The estimated number of days between transactions in this group",
                "type": "double",
              },
              "start_date": {
                "docs": "The date of the oldest transaction in the group",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "total_amount": {
                "docs": "The sum of all transaction amounts in this group",
                "type": "double",
              },
              "transaction_ids": {
                "docs": "Transactions in this recurrence group",
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RecurrencePeriodicity": {
            "docs": "An enumeration.",
            "enum": [
              "daily",
              "weekly",
              "bi_weekly",
              "monthly",
              "bi_monthly",
              "quarterly",
              "semi_yearly",
              "yearly",
              "other",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "RecurrenceType": {
            "docs": "An enumeration.",
            "enum": [
              "recurring",
              "subscription",
              {
                "name": "OneOff",
                "value": "one off",
              },
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Report": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The date and time when the report was created.",
                "type": "datetime",
              },
              "description": {
                "docs": "A description of what is wrong in the transaction",
                "type": "string",
              },
              "fields": {
                "docs": "A list of the fields that are incorrect",
                "type": "list<string>",
              },
              "id": {
                "docs": "A generated unique identifier for the report.",
                "type": "string",
              },
              "rejection_reason": {
                "docs": "An explanation of why the report was rejected",
                "type": "optional<string>",
              },
              "status": {
                "docs": "The status of the report.

* `open`: a newly created report
* `pending`: the report is being investigated
* `rejected`: the original enrichment output was deemed correct or we couldn't resolve it, check `rejection_reason`
* `resolved`: the issue has been resolved",
                "type": "ReportStatus",
              },
              "transaction_id": {
                "docs": "The unique identifier of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ReportStatus": {
            "docs": "An enumeration.",
            "enum": [
              "open",
              "pending",
              "resolved",
              "rejected",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "StatementInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_holder": {
                "type": "optional<AccountHolder>",
              },
              "accounts": {
                "type": "optional<list<Account>>",
              },
              "end_date": {
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "institution": {
                "type": "optional<string>",
              },
              "start_date": {
                "type": "optional<string>",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SyncEnrichmentOutput": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "transactions": {
                "docs": "A list of enriched transactions resulting from the enrichment of this batch.",
                "type": "list<EnrichedTransaction>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Transaction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_holder_id": {
                "docs": "The unique ID of the account holder of the transaction",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "amount": {
                "docs": "The amount of the transaction in the `currency`. Must be a positive value. For example, if the `currency` is USD, then it's the amount in dollars.",
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "categories": {
                "type": "optional<Categories>",
              },
              "created_at": {
                "docs": "The timestamp of when the account holder was created.",
                "type": "datetime",
              },
              "currency": {
                "docs": "The currency of the transaction in ISO 4217 format",
                "type": "Currency",
              },
              "date": {
                "docs": "The date that the transaction was posted. Uses ISO 8601 format (YYYY-MM-DD)",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "docs": "The description string of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 1024,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "entities": {
                "type": "optional<Entities>",
              },
              "entry_type": {
                "docs": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
                "type": "EntryType",
              },
              "error": {
                "type": "optional<TransactionError>",
              },
              "id": {
                "docs": "A unique identifier of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "location": {
                "type": "optional<Location>",
              },
              "recurrence": {
                "type": "optional<Recurrence>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "type": "TransactionErrorCode",
              },
              "message": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionErrorCode": {
            "docs": "An enumeration.",
            "enum": [
              "account_holder_not_found",
              "internal_error",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TransactionInput": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "account_holder_id": {
                "docs": "The unique ID of the account holder. Unsetting it will disable [categorization](./docs/v3/enrichment/entities).",
                "type": "string",
              },
              "amount": {
                "docs": "The amount of the transaction in the `currency`. Must be a positive value. For example, if the `currency` is USD, then it's the amount in dollars.",
                "type": "double",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": undefined,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
              "currency": {
                "docs": "The currency of the transaction in ISO 4217 format",
                "type": "Currency",
              },
              "date": {
                "docs": "The date that the transaction was posted. Uses ISO 8601 format (YYYY-MM-DD)",
                "type": "string",
                "validation": {
                  "format": "date",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "docs": "The description string of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 1024,
                  "minLength": 0,
                  "pattern": undefined,
                },
              },
              "entry_type": {
                "docs": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
                "type": "EntryType",
              },
              "id": {
                "docs": "A unique identifier of the transaction",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": undefined,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "location": {
                "type": "optional<LocationInput>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ValidationError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "loc": {
                "type": "list<ValidationErrorLocItem>",
              },
              "msg": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ValidationErrorLocItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              "string",
              "integer",
            ],
          },
          "Webhook": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created_at": {
                "docs": "The date and time when the webhook was created.",
                "type": "datetime",
              },
              "enabled": {
                "docs": "Whether the webhook is enabled or not.",
                "type": "boolean",
              },
              "events": {
                "docs": "A list of events that this webhook subscribes to",
                "type": "list<WebhookEventsItem>",
              },
              "id": {
                "docs": "A generated unique identifier for the webhook",
                "type": "string",
              },
              "token": {
                "docs": "A secret string used to authenticate the webhook. This value will be included in the `X-Ntropy-Token` header when sending requests to the webhook",
                "type": "optional<string>",
                "validation": {
                  "format": undefined,
                  "maxLength": 128,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "url": {
                "docs": "The URL of the webhook",
                "type": "string",
                "validation": {
                  "format": "uri",
                  "maxLength": 1024,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookEventsItem": {
            "enum": [
              {
                "name": "ReportsResolved",
                "value": "reports.resolved",
              },
              {
                "name": "ReportsRejected",
                "value": "reports.rejected",
              },
              {
                "name": "ReportsPending",
                "value": "reports.pending",
              },
              {
                "name": "BankStatementsCompleted",
                "value": "bank_statements.completed",
              },
              {
                "name": "BankStatementsError",
                "value": "bank_statements.error",
              },
              {
                "name": "BatchesCompleted",
                "value": "batches.completed",
              },
              {
                "name": "BatchesError",
                "value": "batches.error",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "action": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              {
                "type": "if",
              },
              {
                "type": "ModifyLabels",
              },
              {
                "type": "set",
              },
            ],
          },
          "expression": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              "boolean",
              "string",
              "double",
              "FnCall",
            ],
          },
          "if": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "else": {
                "type": "optional<list<action>>",
              },
              "if": {
                "type": "expression",
              },
              "then": {
                "type": "optional<list<action>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "properties": {
            "enum": [
              "logo",
              "website",
              "merchant",
              "description",
              "merchant_id",
              "location",
              "person",
              "transaction_type",
              "amount",
              "entry_type",
              "account_holder_type",
              "account_holder_id",
              "account_holder_name",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "set": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "set": {
                "type": "EditableTxProp",
              },
              "to": {
                "type": "expression",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "errors:
  GetTransactionV3TransactionsIdGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Transaction with the provided id not found.
  GetTransactionV3TransactionsIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteTransactionV3TransactionsIdDeleteRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Transaction with the provided id not found.
  DeleteTransactionV3TransactionsIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListTransactionsV3TransactionsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  PostTransactionsV3TransactionsPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetTransactionAhV3TransactionsIdAssignPostRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Transaction or account holder with the provided id not found.
  SetTransactionAhV3TransactionsIdAssignPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetBatchesV3BatchesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  PostBatchV3BatchesPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetSingleBatchV3BatchesIdGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Batch with the provided id not found.
  GetSingleBatchV3BatchesIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetBatchResultsV3BatchesIdResultsGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Batch with the provided id not found.
  GetBatchResultsV3BatchesIdResultsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetBankStatementsV3BankStatementsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  PostBankStatementV3BankStatementsPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetBankStatementV3BankStatementsIdGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Bank statement with the provided id not found.
  GetBankStatementV3BankStatementsIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteBankStatementV3BankStatementsIdDeleteRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Bank statement with the provided id not found.
  DeleteBankStatementV3BankStatementsIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Bank statement with the provided id not found.
  GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetBankStatementResultV3BankStatementsIdResultsGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Bank statement with the provided id not found.
  GetBankStatementResultV3BankStatementsIdResultsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetAccountHolderV3AccountHoldersIdGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Account holder with the provided id not found.
  GetAccountHolderV3AccountHoldersIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteAccountHolderV3AccountHoldersIdDeleteRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Account holder with the provided id not found.
  DeleteAccountHolderV3AccountHoldersIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetAccountHoldersV3AccountHoldersGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateAccountHolderV3AccountHoldersPostRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Account holder with the provided id already exists.
  CreateAccountHolderV3AccountHoldersPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Account holder with the provided id not found.
  GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetWebhooksV3WebhooksGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  PostWebhookV3WebhooksPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetWebhookV3WebhooksIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteWebhookV3WebhooksIdDeleteRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Webhook with the provided id not found.
  DeleteWebhookV3WebhooksIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  PatchWebhookV3WebhooksIdPatchRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FilterGetV3RulesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FilterPostV3RulesPostRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Provided ruleset has invalid structure
  FilterPostV3RulesPostRequestContentTooLargeError:
    status-code: 413
    type: unknown
    docs: Ruleset was larger than 50KiB
  FilterPostV3RulesPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FilterAppendV3RulesAppendPostRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Provided rule has invalid structure
  FilterAppendV3RulesAppendPostRequestContentTooLargeError:
    status-code: 413
    type: unknown
    docs: Ruleset after append was larger than 50KiB
  FilterAppendV3RulesAppendPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FilterDeleteV3RulesIndexDeleteRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Provided index does not exist in ruleset
  FilterDeleteV3RulesIndexDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FilterPatchV3RulesIndexPatchRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Provided index does not exist in ruleset
  FilterPatchV3RulesIndexPatchRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetReportsV3ReportsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  PostReportV3ReportsPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetReportV3ReportsIdGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Report with the provided id not found.
  GetReportV3ReportsIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteReportV3ReportsIdDeleteRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Report with the provided id not found.
  DeleteReportV3ReportsIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetCategorySetV3CategoriesAccountHolderTypeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CustomCategoriesPostV3CategoriesAccountHolderTypePostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteCustomCategorySetV3CategoriesAccountHolderTypeResetPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SearchEntityV3EntitiesLookupGetRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad request.
  SearchEntityV3EntitiesLookupGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SearchEntityV3EntitiesLookupGetRequestLockedError:
    status-code: 423
    type: unknown
    docs: Not enough credits.
  GetEntityByIdV3EntitiesIdGetRequestBadRequestError:
    status-code: 400
    type: unknown
    docs: Bad request.
  GetEntityByIdV3EntitiesIdGetRequestNotFoundError:
    status-code: 404
    type: unknown
    docs: Entity does not exist for ID
  GetEntityByIdV3EntitiesIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
types:
  Account:
    properties:
      type:
        type: optional<string>
      number:
        type: optional<string>
      opening_balance:
        type: optional<double>
      closing_balance:
        type: optional<double>
      iso_currency_code:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  AccountHolder:
    properties:
      type:
        type: optional<AccountType>
      name:
        type: optional<string>
      address:
        type: optional<Address>
    source:
      openapi: ../openapi.yml
  AccountHolderExternal:
    properties:
      id:
        type: string
        docs: The unique ID of the account holder of the transaction
        validation:
          minLength: 1
      type:
        type: AccountHolderType
        docs: 'The type of the account holder. '
      name:
        type: optional<string>
        docs: The name of the account holder
      created_at:
        type: datetime
        docs: The timestamp of when the account holder was created.
    source:
      openapi: ../openapi.yml
  AccountHolderType:
    enum:
      - consumer
      - business
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  AccountType:
    enum:
      - consumer
      - business
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  AccountingCategory:
    enum:
      - value: operational expenses
        name: OperationalExpenses
      - value: cost of goods sold
        name: CostOfGoodsSold
      - revenue
      - financing
      - taxes
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  ActionModel:
    type: action
  Address:
    properties:
      street:
        type: optional<string>
      postcode:
        type: optional<string>
      city:
        type: optional<string>
      state:
        type: optional<string>
      country:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  BankStatement:
    docs: Represents a bank statement with details about the file and its status.
    properties:
      id:
        type: string
        docs: A unique identifier for the bank statement job.
      name:
        type: optional<string>
        docs: The name of the bank statement file, if available.
      status:
        type: BankStatementStatus
        docs: The current status of the document.
      created_at:
        type: datetime
        docs: The date and time when the job was created.
      file:
        type: BankStatementFile
        docs: Information about the bank statement file being processed.
      error:
        type: optional<BankStatementError>
    source:
      openapi: ../openapi.yml
  BankStatementAccount:
    properties:
      number:
        type: optional<string>
        docs: The account number, if available.
      opening_balance:
        type: optional<double>
        docs: The opening balance of the account for the statement period.
      closing_balance:
        type: optional<double>
        docs: The closing balance of the account for the statement period.
      start_date:
        type: optional<string>
        docs: The start date of the statement period.
        validation:
          format: date
      end_date:
        type: optional<string>
        docs: The end date of the statement period.
        validation:
          format: date
      is_balance_reconciled:
        type: optional<boolean>
        docs: Indicates whether the balance has been reconciled.
      total_incoming:
        type: optional<double>
        docs: The sum of amounts of all incoming transactions.
      total_outgoing:
        type: optional<double>
        docs: The sum of amounts of all outgoing transactions.
      transactions:
        docs: List of transactions for this account.
        type: list<BankStatementTransaction>
    source:
      openapi: ../openapi.yml
  BankStatementError:
    properties:
      code:
        type: BankStatementErrorCode
      message: string
    source:
      openapi: ../openapi.yml
  BankStatementErrorCode:
    enum:
      - invalid_bank_statement
      - internal_error
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  BankStatementFile:
    properties:
      no_pages:
        type: integer
        docs: The number of pages in the bank statement file.
      size:
        type: optional<integer>
        docs: The size of the bank statement file in bytes, if available.
    source:
      openapi: ../openapi.yml
  BankStatementResults:
    properties:
      accounts:
        docs: List of accounts in the bank statement.
        type: list<BankStatementAccount>
    source:
      openapi: ../openapi.yml
  BankStatementStatus:
    enum:
      - processing
      - completed
      - error
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  BankStatementTransaction:
    properties:
      id:
        type: string
        docs: A unique identifier of the transaction
        validation:
          minLength: 1
      description:
        type: string
        docs: The description string of the transaction
        validation:
          minLength: 0
          maxLength: 1024
      date:
        type: string
        docs: >-
          The date that the transaction was posted. Uses ISO 8601 format
          (YYYY-MM-DD)
        validation:
          format: date
      amount:
        type: double
        docs: >-
          The amount of the transaction in the `currency`. Must be a positive
          value. For example, if the `currency` is USD, then it's the amount in
          dollars.
        validation:
          min: 0
      entry_type:
        type: EntryType
        docs: >-
          The direction of the flow of the money from the perspective of the
          account holder. `outgoing` to represent money leaving the account,
          such as purchases or fees, while `incoming` represents money entering
          the account, such as income or refunds.
      currency:
        type: Currency
        docs: The currency of the transaction in ISO 4217 format
      running_balance:
        type: optional<double>
        docs: The account's balance when this transaction was performed
    source:
      openapi: ../openapi.yml
  Batch:
    docs: >-
      The `Batch` object represents the status and progress of an asynchronous
      batch enrichment job.
    properties:
      id:
        type: string
        docs: A unique identifier for the batch.
      status:
        type: BatchStatus
        docs: >-
          The current status of the batch. A batch will error if at least one of
          the transactions contains an error.
      created_at:
        type: datetime
        docs: The timestamp of when the batch was created.
      updated_at:
        type: datetime
        docs: The timestamp of when the batch was last updated.
      progress:
        type: integer
        docs: The number of transactions processed so far.
      total:
        type: integer
        docs: The total number of transactions in the batch.
    source:
      openapi: ../openapi.yml
  BatchResult:
    docs: >-
      The `BatchResult` object represents the result of a batch enrichment job,
      including its status and

      enriched transactions.
    properties:
      id:
        type: string
        docs: A unique identifier for the batch.
      total:
        type: integer
        docs: The total number of transactions in the batch result.
      status:
        type: BatchStatus
        docs: The current status of the batch job.
      results:
        type: EnrichmentResult
    source:
      openapi: ../openapi.yml
  BatchStatus:
    enum:
      - processing
      - completed
      - error
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  Categories:
    properties:
      general:
        type: optional<string>
        docs: >-
          The category of the transaction. View the valid set of categories for
          your key [here](./docs/v3/enrichment/entities).
      accounting:
        type: optional<AccountingCategory>
        docs: >-
          The corresponding accounting category. Only available for `business`
          transactions.
    source:
      openapi: ../openapi.yml
  CategoryConfidence:
    enum:
      - high
      - medium
      - low
      - unknown
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  CategorySet:
    properties:
      incoming:
        type: list<string>
      outgoing:
        type: list<string>
    source:
      openapi: ../openapi.yml
  Counterparty:
    properties:
      id:
        type: optional<string>
        docs: The unique UUID identifier of the entity
      name:
        type: optional<string>
        docs: The name of the entity
      website:
        type: optional<string>
        docs: The website URL of the entity
      logo:
        type: optional<string>
        docs: Logo's URL
      mccs:
        type: optional<list<integer>>
        docs: >-
          A list of [Merchant Category
          Codes](https://en.wikipedia.org/wiki/Merchant_category_code)
      type:
        type: CounterpartyType
    source:
      openapi: ../openapi.yml
  CounterpartyType:
    enum:
      - person
      - organization
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  Country:
    enum:
      - AD
      - AE
      - AF
      - AG
      - AI
      - AL
      - AM
      - AO
      - AR
      - AS
      - AT
      - AU
      - AW
      - AZ
      - BA
      - BB
      - BD
      - BE
      - BF
      - BG
      - BH
      - BI
      - BJ
      - BL
      - BM
      - BN
      - BO
      - BQ
      - BR
      - BS
      - BT
      - BV
      - BW
      - BY
      - BZ
      - CA
      - CC
      - CD
      - CF
      - CG
      - CH
      - CI
      - CK
      - CL
      - CM
      - CN
      - CO
      - CR
      - CU
      - CV
      - CW
      - CX
      - CY
      - CZ
      - DE
      - DJ
      - DK
      - DM
      - DO
      - DZ
      - EC
      - EE
      - EG
      - EH
      - ER
      - ES
      - ET
      - FI
      - FJ
      - FK
      - FM
      - FR
      - GA
      - GB
      - GD
      - GE
      - GF
      - GG
      - GH
      - GI
      - GL
      - GM
      - GN
      - GP
      - GQ
      - GR
      - GS
      - GT
      - GU
      - GW
      - GY
      - HK
      - HM
      - HN
      - HR
      - HT
      - HU
      - ID
      - IE
      - IL
      - IM
      - IN
      - IO
      - IQ
      - IR
      - IS
      - IT
      - JE
      - JM
      - JO
      - JP
      - KE
      - KG
      - KH
      - KI
      - KM
      - KN
      - KP
      - KR
      - KW
      - KY
      - KZ
      - LA
      - LB
      - LC
      - LI
      - LK
      - LR
      - LS
      - LT
      - LU
      - LV
      - LY
      - MA
      - MC
      - MD
      - ME
      - MF
      - MG
      - MH
      - MK
      - ML
      - MM
      - MN
      - MO
      - MP
      - MQ
      - MR
      - MS
      - MT
      - MU
      - MV
      - MW
      - MX
      - MY
      - MZ
      - NA
      - NC
      - NE
      - NF
      - NG
      - NI
      - NL
      - 'NO'
      - NP
      - NR
      - NU
      - NZ
      - OM
      - PA
      - PE
      - PF
      - PG
      - PH
      - PK
      - PL
      - PM
      - PN
      - PR
      - PS
      - PT
      - PW
      - PY
      - QA
      - RE
      - RO
      - RS
      - RU
      - RW
      - SA
      - SB
      - SC
      - SD
      - SE
      - SG
      - SH
      - SI
      - SJ
      - SK
      - SL
      - SM
      - SN
      - SO
      - SR
      - SS
      - ST
      - SV
      - SX
      - SY
      - SZ
      - TC
      - TD
      - TG
      - TH
      - TJ
      - TK
      - TL
      - TM
      - TN
      - TO
      - TR
      - TT
      - TV
      - TW
      - TZ
      - UA
      - UG
      - UM
      - US
      - UY
      - UZ
      - VC
      - VE
      - VG
      - VI
      - VN
      - VU
      - WF
      - WS
      - YE
      - YT
      - ZA
      - ZM
      - ZW
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  Currency:
    enum:
      - EUR
      - AED
      - AFN
      - XCD
      - ALL
      - AMD
      - AOA
      - ARS
      - USD
      - AUD
      - AWG
      - AZN
      - BAM
      - BBD
      - BDT
      - XOF
      - BGN
      - BHD
      - BIF
      - BMD
      - BND
      - BOB
      - BRL
      - BSD
      - INR
      - NOK
      - BWP
      - BYR
      - BZD
      - CAD
      - CDF
      - XAF
      - CHF
      - NZD
      - CLP
      - CNY
      - COP
      - CRC
      - CUP
      - CVE
      - ANG
      - CZK
      - DJF
      - DKK
      - DOP
      - DZD
      - EGP
      - MAD
      - ERN
      - ETB
      - FJD
      - FKP
      - GBP
      - GEL
      - GHS
      - GIP
      - GMD
      - GNF
      - GTQ
      - GYD
      - HKD
      - HNL
      - HUF
      - IDR
      - ILS
      - IQD
      - IRR
      - ISK
      - JMD
      - JOD
      - JPY
      - KES
      - KGS
      - KHR
      - KMF
      - KPW
      - KRW
      - KWD
      - KYD
      - KZT
      - LAK
      - LBP
      - LKR
      - LRD
      - ZAR
      - LYD
      - MDL
      - MGA
      - MKD
      - MMK
      - MNT
      - MOP
      - MRO
      - MUR
      - MVR
      - MWK
      - MXN
      - MYR
      - MZN
      - XPF
      - NGN
      - NIO
      - NPR
      - OMR
      - PEN
      - PGK
      - PHP
      - PKR
      - PLN
      - PYG
      - QAR
      - RON
      - RSD
      - RUB
      - RWF
      - SAR
      - SBD
      - SCR
      - SDG
      - SEK
      - SGD
      - SHP
      - SLL
      - SOS
      - SRD
      - SSP
      - STD
      - SYP
      - SZL
      - THB
      - TJS
      - TMT
      - TND
      - TOP
      - TRY
      - TTD
      - TWD
      - TZS
      - UAH
      - UGX
      - UYU
      - UZS
      - VEF
      - VND
      - VUV
      - WST
      - YER
      - ZMW
      - ZWL
      - HRK
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  CustomCategorySet:
    properties:
      incoming:
        type: list<string>
      outgoing:
        type: list<string>
    source:
      openapi: ../openapi.yml
  DocumentStatus:
    enum:
      - queued
      - processing
      - processed
      - failed
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  EnrichedTransaction:
    properties:
      entities:
        type: optional<Entities>
      categories:
        type: optional<Categories>
      location:
        type: optional<Location>
      error:
        type: optional<TransactionError>
      created_at:
        type: datetime
        docs: The timestamp of when the account holder was created.
      id:
        type: string
        docs: >-
          A unique identifier for the transaction. If two transactions are
          submitted with the same `id` the most recent one will replace the
          previous one.
        validation:
          minLength: 1
    source:
      openapi: ../openapi.yml
  EnrichmentResult:
    properties:
      transactions:
        docs: >-
          A list of enriched transactions resulting from the enrichment of this
          batch.
        type: list<EnrichedTransaction>
    source:
      openapi: ../openapi.yml
  Entities:
    docs: Entities found by identity identification
    properties:
      counterparty:
        type: optional<Counterparty>
      intermediaries:
        type: optional<list<Intermediary>>
    source:
      openapi: ../openapi.yml
  Entity:
    properties:
      id:
        type: optional<string>
        docs: The unique UUID identifier of the entity
      name:
        type: optional<string>
        docs: The name of the entity
      website:
        type: optional<string>
        docs: The website URL of the entity
      logo:
        type: optional<string>
        docs: Logo's URL
      mccs:
        type: optional<list<integer>>
        docs: >-
          A list of [Merchant Category
          Codes](https://en.wikipedia.org/wiki/Merchant_category_code)
    source:
      openapi: ../openapi.yml
  EntryType:
    enum:
      - incoming
      - outgoing
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  FilterModel:
    type: Filter
  HTTPValidationError:
    properties:
      detail:
        type: optional<list<ValidationError>>
    source:
      openapi: ../openapi.yml
  Intermediary:
    properties:
      id:
        type: optional<string>
        docs: The unique UUID identifier of the entity
      name:
        type: optional<string>
        docs: The name of the entity
      website:
        type: optional<string>
        docs: The website URL of the entity
      logo:
        type: optional<string>
        docs: Logo's URL
      mccs:
        type: optional<list<integer>>
        docs: >-
          A list of [Merchant Category
          Codes](https://en.wikipedia.org/wiki/Merchant_category_code)
      type:
        type: IntermediaryType
    source:
      openapi: ../openapi.yml
  IntermediaryType:
    enum:
      - delivery_service
      - payment_processor
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  Location:
    properties:
      raw_address:
        type: optional<string>
        docs: An unstructured string containing the address
      structured:
        type: optional<LocationStructured>
        docs: When raw is set, a structured representation of it.
    source:
      openapi: ../openapi.yml
  LocationInput:
    docs: >-
      Location of where the transaction has taken place. This can greatly
      improve entity identification, especially

      under ambiguity.
    properties:
      raw_address:
        type: optional<string>
        docs: An unstructured string containing the address
      country:
        type: Country
        docs: The country where the transaction was made in ISO 3166-2 format
    source:
      openapi: ../openapi.yml
  LocationStructured:
    properties:
      street:
        type: optional<string>
        docs: The street name and number of the location
      city:
        type: optional<string>
        docs: The city where the location is situated
      state:
        type: optional<string>
        docs: The state or region of the location
      postcode:
        type: optional<string>
        docs: The postal code or ZIP code of the location
      country_code:
        type: optional<string>
        docs: The country code of the location in ISO 3166-2 format
      country:
        type: optional<string>
        docs: The full name of the country
      latitude:
        type: optional<double>
        docs: The latitude coordinate of the location
      longitude:
        type: optional<double>
        docs: The longitude coordinate of the location
      google_maps_url:
        type: optional<string>
        docs: A URL link to view the location on Google Maps
      apple_maps_url:
        type: optional<string>
        docs: A URL link to view the location on Apple Maps
      store_number:
        type: optional<string>
        docs: A unique identifier for a specific store or branch, if applicable
    source:
      openapi: ../openapi.yml
  PagedResponseAccountHolderExternal:
    properties:
      next_cursor: string
      data:
        type: list<AccountHolderExternal>
    source:
      openapi: ../openapi.yml
  PagedResponseBankStatement:
    properties:
      next_cursor: string
      data:
        type: list<BankStatement>
    source:
      openapi: ../openapi.yml
  PagedResponseBatch:
    properties:
      next_cursor: string
      data:
        type: list<Batch>
    source:
      openapi: ../openapi.yml
  PagedResponseReport:
    properties:
      next_cursor:
        type: optional<string>
      data:
        type: list<Report>
    source:
      openapi: ../openapi.yml
  PagedResponseTransaction:
    properties:
      next_cursor: string
      data:
        type: list<Transaction>
    source:
      openapi: ../openapi.yml
  PagedResponseWebhook:
    properties:
      next_cursor: string
      data:
        type: list<Webhook>
    source:
      openapi: ../openapi.yml
  Recurrence:
    docs: >-
      The `Recurrence` object represents the recurrence pattern of a
      transaction. It provides information about

      whether a transaction is a one-time event or a part of a recurring series.
    properties:
      type:
        type: RecurrenceType
        docs: >-
          Whether the transaction is a one-time transfer `one-off`, regularly
          with varying pricing `recurring` or with fixed pricing `subscription`
    source:
      openapi: ../openapi.yml
  RecurrenceGroup:
    properties:
      id:
        type: string
        docs: A unique UUID identifier for the group
      start_date:
        type: string
        docs: The date of the oldest transaction in the group
        validation:
          format: date
      end_date:
        type: string
        docs: The date of the most recent transaction in the group
        validation:
          format: date
      total_amount:
        type: double
        docs: The sum of all transaction amounts in this group
      average_amount:
        type: double
        docs: The average amount per transaction in this group
      periodicity_in_days:
        type: double
        docs: The estimated number of days between transactions in this group
      periodicity:
        type: RecurrencePeriodicity
        docs: A human-readable description of the transaction frequency
      counterparty:
        type: Counterparty
        docs: Counterparty of the transactions
      categories:
        type: Categories
        docs: Categories of the transactions in the recurrence group
      transaction_ids:
        docs: Transactions in this recurrence group
        type: list<string>
    source:
      openapi: ../openapi.yml
  RecurrencePeriodicity:
    enum:
      - daily
      - weekly
      - bi_weekly
      - monthly
      - bi_monthly
      - quarterly
      - semi_yearly
      - yearly
      - other
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  RecurrenceType:
    enum:
      - recurring
      - subscription
      - value: one off
        name: OneOff
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  Report:
    properties:
      transaction_id:
        type: string
        docs: The unique identifier of the transaction
        validation:
          minLength: 1
      description:
        type: string
        docs: A description of what is wrong in the transaction
      fields:
        docs: A list of the fields that are incorrect
        type: list<string>
      id:
        type: string
        docs: A generated unique identifier for the report.
      created_at:
        type: datetime
        docs: The date and time when the report was created.
      status:
        type: ReportStatus
        docs: >-
          The status of the report.


          * `open`: a newly created report

          * `pending`: the report is being investigated

          * `rejected`: the original enrichment output was deemed correct or we
          couldn't resolve it, check `rejection_reason`

          * `resolved`: the issue has been resolved
      rejection_reason:
        type: optional<string>
        docs: An explanation of why the report was rejected
    source:
      openapi: ../openapi.yml
  ReportStatus:
    enum:
      - open
      - pending
      - resolved
      - rejected
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  StatementInfo:
    properties:
      institution:
        type: optional<string>
      start_date:
        type: optional<string>
        validation:
          format: date
      end_date:
        type: optional<string>
        validation:
          format: date
      account_holder:
        type: optional<AccountHolder>
      accounts:
        type: optional<list<Account>>
    source:
      openapi: ../openapi.yml
  SyncEnrichmentOutput:
    properties:
      transactions:
        docs: >-
          A list of enriched transactions resulting from the enrichment of this
          batch.
        type: list<EnrichedTransaction>
    source:
      openapi: ../openapi.yml
  Transaction:
    properties:
      id:
        type: string
        docs: A unique identifier of the transaction
        validation:
          minLength: 1
      description:
        type: string
        docs: The description string of the transaction
        validation:
          minLength: 0
          maxLength: 1024
      date:
        type: string
        docs: >-
          The date that the transaction was posted. Uses ISO 8601 format
          (YYYY-MM-DD)
        validation:
          format: date
      amount:
        type: double
        docs: >-
          The amount of the transaction in the `currency`. Must be a positive
          value. For example, if the `currency` is USD, then it's the amount in
          dollars.
        validation:
          min: 0
      entry_type:
        type: EntryType
        docs: >-
          The direction of the flow of the money from the perspective of the
          account holder. `outgoing` to represent money leaving the account,
          such as purchases or fees, while `incoming` represents money entering
          the account, such as income or refunds.
      currency:
        type: Currency
        docs: The currency of the transaction in ISO 4217 format
      entities:
        type: optional<Entities>
      categories:
        type: optional<Categories>
      location:
        type: optional<Location>
      error:
        type: optional<TransactionError>
      created_at:
        type: datetime
        docs: The timestamp of when the account holder was created.
      account_holder_id:
        type: optional<string>
        docs: The unique ID of the account holder of the transaction
        validation:
          minLength: 1
      recurrence:
        type: optional<Recurrence>
    source:
      openapi: ../openapi.yml
  TransactionError:
    properties:
      code:
        type: TransactionErrorCode
      message: string
    source:
      openapi: ../openapi.yml
  TransactionErrorCode:
    enum:
      - account_holder_not_found
      - internal_error
    docs: An enumeration.
    source:
      openapi: ../openapi.yml
  TransactionInput:
    properties:
      id:
        type: string
        docs: A unique identifier of the transaction
        validation:
          minLength: 1
      description:
        type: string
        docs: The description string of the transaction
        validation:
          minLength: 0
          maxLength: 1024
      date:
        type: string
        docs: >-
          The date that the transaction was posted. Uses ISO 8601 format
          (YYYY-MM-DD)
        validation:
          format: date
      amount:
        type: double
        docs: >-
          The amount of the transaction in the `currency`. Must be a positive
          value. For example, if the `currency` is USD, then it's the amount in
          dollars.
        validation:
          min: 0
      entry_type:
        type: EntryType
        docs: >-
          The direction of the flow of the money from the perspective of the
          account holder. `outgoing` to represent money leaving the account,
          such as purchases or fees, while `incoming` represents money entering
          the account, such as income or refunds.
      currency:
        type: Currency
        docs: The currency of the transaction in ISO 4217 format
      account_holder_id:
        type: string
        docs: >-
          The unique ID of the account holder. Unsetting it will disable
          [categorization](./docs/v3/enrichment/entities).
      location:
        type: optional<LocationInput>
    source:
      openapi: ../openapi.yml
  ValidationErrorLocItem:
    discriminated: false
    union:
      - string
      - integer
    source:
      openapi: ../openapi.yml
    inline: true
  ValidationError:
    properties:
      loc:
        type: list<ValidationErrorLocItem>
      msg: string
      type: string
    source:
      openapi: ../openapi.yml
  WebhookEventsItem:
    enum:
      - value: reports.resolved
        name: ReportsResolved
      - value: reports.rejected
        name: ReportsRejected
      - value: reports.pending
        name: ReportsPending
      - value: bank_statements.completed
        name: BankStatementsCompleted
      - value: bank_statements.error
        name: BankStatementsError
      - value: batches.completed
        name: BatchesCompleted
      - value: batches.error
        name: BatchesError
    inline: true
    source:
      openapi: ../openapi.yml
  Webhook:
    properties:
      url:
        type: string
        docs: The URL of the webhook
        validation:
          format: uri
          minLength: 1
          maxLength: 1024
      events:
        docs: A list of events that this webhook subscribes to
        type: list<WebhookEventsItem>
      token:
        type: optional<string>
        docs: >-
          A secret string used to authenticate the webhook. This value will be
          included in the `X-Ntropy-Token` header when sending requests to the
          webhook
        validation:
          maxLength: 128
      id:
        type: string
        docs: A generated unique identifier for the webhook
      created_at:
        type: datetime
        docs: The date and time when the webhook was created.
      enabled:
        type: boolean
        docs: Whether the webhook is enabled or not.
    source:
      openapi: ../openapi.yml
  expression:
    discriminated: false
    union:
      - boolean
      - string
      - double
      - FnCall
    source:
      openapi: ../openapi.yml
  properties:
    enum:
      - logo
      - website
      - merchant
      - description
      - merchant_id
      - location
      - person
      - transaction_type
      - amount
      - entry_type
      - account_holder_type
      - account_holder_id
      - account_holder_name
    source:
      openapi: ../openapi.yml
  FnCall&&:
    properties:
      '&&': list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall||:
    properties:
      '||': list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall==:
    properties:
      '==': list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall+:
    properties:
      +: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall-:
    properties:
      '-': list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall*:
    properties:
      '*': list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall/:
    properties:
      /: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall//:
    properties:
      //: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall<:
    properties:
      <: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall<=:
    properties:
      <=: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall>:
    properties:
      '>': list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall>=:
    properties:
      '>=': list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall!:
    properties:
      '!':
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallIsSubstring:
    properties:
      is_substring: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallStartsWith:
    properties:
      starts_with: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallEndsWith:
    properties:
      ends_with: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallToLower:
    properties:
      to_lower:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallToUpper:
    properties:
      to_upper:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallHasLabel:
    properties:
      has_label:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallHasMcc:
    properties:
      has_mcc:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  FnCallGet:
    properties:
      get:
        type: properties
    source:
      openapi: ../openapi.yml
    inline: true
  FnCall:
    discriminated: false
    union:
      - type: FnCall&&
      - type: FnCall||
      - type: FnCall==
      - type: FnCall+
      - type: FnCall-
      - type: FnCall*
      - type: FnCall/
      - type: FnCall//
      - type: FnCall<
      - type: FnCall<=
      - type: FnCall>
      - type: FnCall>=
      - type: FnCall!
      - type: FnCallIsSubstring
      - type: FnCallStartsWith
      - type: FnCallEndsWith
      - type: FnCallToLower
      - type: FnCallToUpper
      - type: FnCallHasLabel
      - type: FnCallHasMcc
      - type: FnCallGet
    source:
      openapi: ../openapi.yml
  action:
    discriminated: false
    union:
      - type: if
      - type: ModifyLabels
      - type: set
    source:
      openapi: ../openapi.yml
  if:
    properties:
      if:
        type: expression
      then:
        type: optional<list<action>>
      else:
        type: optional<list<action>>
    source:
      openapi: ../openapi.yml
  ModifyLabelsAddLabel:
    properties:
      add_label:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  ModifyLabelsRemoveLabel:
    properties:
      remove_label:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  ModifyLabelsSetLabels:
    properties:
      set_labels: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  ModifyLabelsAddMcc:
    properties:
      add_mcc:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  ModifyLabelsRemoveMcc:
    properties:
      remove_mcc:
        type: expression
    source:
      openapi: ../openapi.yml
    inline: true
  ModifyLabelsSetMcc:
    properties:
      set_mcc: list<expression>
    source:
      openapi: ../openapi.yml
    inline: true
  ModifyLabels:
    discriminated: false
    union:
      - type: ModifyLabelsAddLabel
      - type: ModifyLabelsRemoveLabel
      - type: ModifyLabelsSetLabels
      - type: ModifyLabelsAddMcc
      - type: ModifyLabelsRemoveMcc
      - type: ModifyLabelsSetMcc
    source:
      openapi: ../openapi.yml
  EditableTxProp:
    enum:
      - logo
      - website
      - merchant
      - merchant_id
      - location
      - person
      - transaction_type
    source:
      openapi: ../openapi.yml
  set:
    properties:
      set:
        type: EditableTxProp
      to:
        type: expression
    source:
      openapi: ../openapi.yml
  Filter:
    type: list<action>
",
    },
    "accountHolders.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Account Holder API allows you to retrieve, create and modify account holders. An account holder represents an
entity that holds an account associated with transactions. An account holder can either be a business or an individual
person - consumer.

The fields chosen for an account holder are used by our enrichment process and can dramatically improve the accuracy
of the results. 

Complete guide: [Account Holders](../../../account-holders).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Account Holders",
          "endpoints": {
            "createAccountHolder": {
              "auth": true,
              "display-name": "Create an account holder.",
              "docs": undefined,
              "errors": [
                "root.CreateAccountHolderV3AccountHoldersPostRequestBadRequestError",
                "root.CreateAccountHolderV3AccountHoldersPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/account_holders" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '{
        "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
        "type": "consumer",
        "name": "John Doe"
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
ah = sdk.account_holders.create(
    id="35b927b6-6fda-40aa-93b8-95b47c2b2cad",
    type="consumer",
    name="John Doe",
) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": {
                    "id": "id",
                    "type": "consumer",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-03-30T00:00:00Z",
                      "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "name": "John Doe",
                      "type": "consumer",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/account_holders",
              "request": {
                "body": {
                  "properties": {
                    "id": {
                      "docs": "The unique ID of the account holder of the transaction",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "name": {
                      "docs": "The name of the account holder",
                      "type": "optional<string>",
                    },
                    "type": {
                      "docs": "The type of the account holder. ",
                      "type": "root.AccountHolderType",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AccountHolderCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.AccountHolderExternal",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "deleteAccountHolder": {
              "auth": true,
              "display-name": "Deletes an account holder and their transactions",
              "docs": "Deletes all of the transactions in the account holder's history. This operation is permanent and irreversible",
              "errors": [
                "root.DeleteAccountHolderV3AccountHoldersIdDeleteRequestNotFoundError",
                "root.DeleteAccountHolderV3AccountHoldersIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "DELETE" \
    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
ah = sdk.account_holders.delete("f35b927b6-6fda-40aa-93b8-95b47c2b2cad") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v3/account_holders/{id}",
              "path-parameters": {
                "id": "string",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getAccountHolder": {
              "auth": true,
              "display-name": "Retrieve an account holder.",
              "docs": undefined,
              "errors": [
                "root.GetAccountHolderV3AccountHoldersIdGetRequestNotFoundError",
                "root.GetAccountHolderV3AccountHoldersIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
ah = sdk.account_holders.get("f35b927b6-6fda-40aa-93b8-95b47c2b2cad") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-03-30T00:00:00Z",
                      "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "name": "John Doe",
                      "type": "consumer",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/account_holders/{id}",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.AccountHolderExternal",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getAccountHolders": {
              "auth": true,
              "display-name": "List all account holders.",
              "docs": undefined,
              "errors": [
                "root.GetAccountHoldersV3AccountHoldersGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
ah = sdk.account_holders.get("f35b927b6-6fda-40aa-93b8-95b47c2b2cad") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": {
                      "data": [
                        {
                          "created_at": "2024-03-30T00:00:00Z",
                          "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                          "name": "John Doe",
                          "type": "consumer",
                        },
                      ],
                      "next_cursor": "XjdHaksD",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/account_holders",
              "request": {
                "name": "GetAccountHoldersV3AccountHoldersGetRequest",
                "query-parameters": {
                  "created_after": {
                    "docs": "Only return account holders older or equal than this date",
                    "type": "optional<datetime>",
                  },
                  "created_before": {
                    "docs": "Only return account holders newer than this date",
                    "type": "optional<datetime>",
                  },
                  "cursor": {
                    "docs": "Starting point for the set of account holders",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "default": 10,
                    "docs": "The limit of account holders to be returned",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 50,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PagedResponseAccountHolderExternal",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAccountHolder:
      path: /v3/account_holders/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve an account holder.
      response:
        docs: Successful Response
        type: root.AccountHolderExternal
        status-code: 200
      errors:
        - root.GetAccountHolderV3AccountHoldersIdGetRequestNotFoundError
        - >-
          root.GetAccountHolderV3AccountHoldersIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
              type: consumer
              name: John Doe
              created_at: '2024-03-30T00:00:00Z'
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >-
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                ah =
                sdk.account_holders.get("f35b927b6-6fda-40aa-93b8-95b47c2b2cad") 
    deleteAccountHolder:
      path: /v3/account_holders/{id}
      method: DELETE
      auth: true
      docs: >-
        Deletes all of the transactions in the account holder's history. This
        operation is permanent and irreversible
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Deletes an account holder and their transactions
      errors:
        - root.DeleteAccountHolderV3AccountHoldersIdDeleteRequestNotFoundError
        - >-
          root.DeleteAccountHolderV3AccountHoldersIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "DELETE" \
                    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >-
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                ah =
                sdk.account_holders.delete("f35b927b6-6fda-40aa-93b8-95b47c2b2cad") 
    getAccountHolders:
      path: /v3/account_holders
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: List all account holders.
      request:
        name: GetAccountHoldersV3AccountHoldersGetRequest
        query-parameters:
          created_after:
            type: optional<datetime>
            docs: Only return account holders older or equal than this date
          created_before:
            type: optional<datetime>
            docs: Only return account holders newer than this date
          cursor:
            type: optional<string>
            docs: Starting point for the set of account holders
          limit:
            type: optional<integer>
            default: 10
            docs: The limit of account holders to be returned
            validation:
              min: 1
              max: 50
      response:
        docs: Successful Response
        type: root.PagedResponseAccountHolderExternal
        status-code: 200
      errors:
        - >-
          root.GetAccountHoldersV3AccountHoldersGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              next_cursor: XjdHaksD
              data:
                - id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
                  type: consumer
                  name: John Doe
                  created_at: '2024-03-30T00:00:00Z'
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >-
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                ah =
                sdk.account_holders.get("f35b927b6-6fda-40aa-93b8-95b47c2b2cad") 
    createAccountHolder:
      path: /v3/account_holders
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Create an account holder.
      request:
        name: AccountHolderCreate
        body:
          properties:
            id:
              type: string
              docs: The unique ID of the account holder of the transaction
              validation:
                minLength: 1
            type:
              type: root.AccountHolderType
              docs: 'The type of the account holder. '
            name:
              type: optional<string>
              docs: The name of the account holder
        content-type: application/json
      response:
        docs: Successful Response
        type: root.AccountHolderExternal
        status-code: 200
      errors:
        - root.CreateAccountHolderV3AccountHoldersPostRequestBadRequestError
        - >-
          root.CreateAccountHolderV3AccountHoldersPostRequestUnprocessableEntityError
      examples:
        - request:
            id: id
            type: consumer
          response:
            body:
              id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
              type: consumer
              name: John Doe
              created_at: '2024-03-30T00:00:00Z'
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/account_holders" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '{
                        "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                        "type": "consumer",
                        "name": "John Doe"
                    }]'
                 
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                ah = sdk.account_holders.create(
                    id="35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                    type="consumer",
                    name="John Doe",
                ) 
  source:
    openapi: ../openapi.yml
  display-name: Account Holders
docs: >

  The Account Holder API allows you to retrieve, create and modify account
  holders. An account holder represents an

  entity that holds an account associated with transactions. An account holder
  can either be a business or an individual

  person - consumer.


  The fields chosen for an account holder are used by our enrichment process and
  can dramatically improve the accuracy

  of the results. 


  Complete guide: [Account Holders](../../../account-holders).
",
    },
    "bankStatements.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Bank Statements API allows you to manage and extract information from bank statements. We support extraction of
account holder information, account information and transaction records. Files should be uploaded in PDF format.

During the extraction process, the bank statements undergo several status changes:
|  Status  |                              Description                               |
|----------|------------------------------------------------------------------------|
|processing|The upload was successful. Extraction is in progress.                   |
|completed |The extraction was successful. Results are available.                   |
|error     |An error occurred during extraction. Check `error` for more information.|


A list of error codes for the `error` status can be found below:
|         Code         |                Description                |
|----------------------|-------------------------------------------|
|invalid_bank_statement|Failed to process file as a bank statement.|
|internal_error        |Internal error. Please contact support.    |


Complete guide: [Bank Statements](../../../bank-statements).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Bank statements",
          "endpoints": {
            "deleteBankStatement": {
              "auth": true,
              "display-name": "Deletes a bank statement",
              "docs": undefined,
              "errors": [
                "root.DeleteBankStatementV3BankStatementsIdDeleteRequestNotFoundError",
                "root.DeleteBankStatementV3BankStatementsIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v3/bank_statements/{id}",
              "path-parameters": {
                "id": "string",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getBankStatement": {
              "auth": true,
              "display-name": "Retrieve a bank statement",
              "docs": undefined,
              "errors": [
                "root.GetBankStatementV3BankStatementsIdGetRequestNotFoundError",
                "root.GetBankStatementV3BankStatementsIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/bank_statements/7f8dceac-2848-472d-b5c3-55cdbaf35a9b" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
bs = sdk.bank_statements.get("7f8dceac-2848-472d-b5c3-55cdbaf35a9b") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-01T00:00:00Z",
                      "error": {
                        "code": "invalid_bank_statement",
                        "message": "message",
                      },
                      "file": {
                        "no_pages": 1,
                        "size": 4096,
                      },
                      "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                      "name": "2014-01-01_2014-02-01_statement.pdf",
                      "status": "processing",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/bank_statements/{id}",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.BankStatement",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getBankStatementResult": {
              "auth": true,
              "display-name": "Retrieve the extraction results",
              "docs": "Return the extracted account information and associated transactions from a bank statement PDF. The results are accessible once the statement's status is `completed`.",
              "errors": [
                "root.GetBankStatementResultV3BankStatementsIdResultsGetRequestNotFoundError",
                "root.GetBankStatementResultV3BankStatementsIdResultsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/bank_statements/7f8dceac-2848-472d-b5c3-55cdbaf35a9b/results" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
bs = sdk.bank_statements.get("7f8dceac-2848-472d-b5c3-55cdbaf35a9b")
results = sdk.bank_statements.wait_for_results(
    "7f8dceac-2848-472d-b5c3-55cdbaf35a9b"
) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "accounts": [
                        {
                          "closing_balance": 200,
                          "end_date": "2024-02-01",
                          "is_balance_reconciled": true,
                          "number": "972913289",
                          "opening_balance": 400,
                          "start_date": "2024-01-01",
                          "total_incoming": 0,
                          "total_outgoing": 200,
                          "transactions": [
                            {
                              "amount": 200,
                              "currency": "USD",
                              "date": "2024-03-30",
                              "description": "SQ* STARBUCKS NW 43RD",
                              "entry_type": "outgoing",
                              "id": "xbx8YP14g565Xk",
                              "running_balance": 400,
                            },
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/bank_statements/{id}/results",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.BankStatementResults",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getBankStatementStatementInfo": {
              "auth": true,
              "display-name": "Quickly extract account holder, institution and first account",
              "docs": "Extracts account holder, bank and account information extracted from the first page of the bank statement, which is typically available before the full results. This is a synchronous call.

Complete guide: [Overview](../../../bank-statements)",
              "errors": [
                "root.GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestNotFoundError",
                "root.GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/bank_statements/7f8dceac-2848-472d-b5c3-55cdbaf35a9b/overview" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
overview = sdk.bank_statements.overview(
    "7f8dceac-2848-472d-b5c3-55cdbaf35a9b"
) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "account_holder": {
                        "address": {
                          "city": "Victoria",
                          "country": "United States",
                          "postcode": "77901",
                          "state": "Texas",
                          "street": "601 Rosebud Avenue",
                        },
                        "name": "John Doe",
                        "type": "consumer",
                      },
                      "accounts": [
                        {
                          "closing_balance": 1500,
                          "iso_currency_code": "USD",
                          "number": "83721",
                          "opening_balance": 1000,
                          "type": "checking",
                        },
                      ],
                      "end_date": "2024-02-01",
                      "institution": "Well's Fargo",
                      "start_date": "2024-01-01",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/bank_statements/{id}/overview",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.StatementInfo",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getBankStatements": {
              "auth": true,
              "display-name": "List all bank statements",
              "docs": "Return a list of submitted bank statements starting with the most recent one.",
              "errors": [
                "root.GetBankStatementsV3BankStatementsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/bank_statements" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
for bs in sdk.bank_statements.list().auto_paginate():
    ... ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": {
                      "data": [
                        {
                          "created_at": "2024-01-01T00:00:00Z",
                          "error": {
                            "code": "invalid_bank_statement",
                            "message": "message",
                          },
                          "file": {
                            "no_pages": 1,
                            "size": 4096,
                          },
                          "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                          "name": "2014-01-01_2014-02-01_statement.pdf",
                          "status": "processing",
                        },
                      ],
                      "next_cursor": "XjdHaksD",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/bank_statements",
              "request": {
                "name": "GetBankStatementsV3BankStatementsGetRequest",
                "query-parameters": {
                  "created_after": {
                    "docs": "Only return bank statements older or equal than this date",
                    "type": "optional<datetime>",
                  },
                  "created_before": {
                    "docs": "Only return bank statements newer than this date",
                    "type": "optional<datetime>",
                  },
                  "cursor": {
                    "docs": "Starting point for the set of bank statements",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "default": 10,
                    "docs": "The limit of bank statements to be returned",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 50,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "status": {
                    "docs": "If specified, only return bank statements with this status",
                    "type": "optional<root.DocumentStatus>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PagedResponseBankStatement",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "postBankStatement": {
              "auth": true,
              "display-name": "Submit a bank statement PDF",
              "docs": "Upload a PDF file and queue it for extraction.",
              "errors": [
                "root.PostBankStatementV3BankStatementsPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
        "https://api.ntropy.com/v3/bank_statements" \
        -H "Accept: application/json" \
        -H "X-API-KEY: cd1H...Wmhl" \
        --form file=@bank_statement.pdf
    ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
with open('bank_statement.pdf', 'rb') as fh:
    bank_statement = sdk.bank_statements.create(fh)
    results = sdk.bank_statement.wait_for_results(bank_statement.id) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": {},
                  "response": {
                    "body": {
                      "created_at": "2024-01-01T00:00:00Z",
                      "error": {
                        "code": "invalid_bank_statement",
                        "message": "message",
                      },
                      "file": {
                        "no_pages": 1,
                        "size": 4096,
                      },
                      "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                      "name": "2014-01-01_2014-02-01_statement.pdf",
                      "status": "processing",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/bank_statements",
              "request": {
                "body": {
                  "properties": {
                    "file": "file",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "Body_post_bank_statement_v3_bank_statements_post",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.BankStatement",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getBankStatements:
      path: /v3/bank_statements
      method: GET
      auth: true
      docs: >-
        Return a list of submitted bank statements starting with the most recent
        one.
      source:
        openapi: ../openapi.yml
      display-name: List all bank statements
      request:
        name: GetBankStatementsV3BankStatementsGetRequest
        query-parameters:
          created_after:
            type: optional<datetime>
            docs: Only return bank statements older or equal than this date
          created_before:
            type: optional<datetime>
            docs: Only return bank statements newer than this date
          cursor:
            type: optional<string>
            docs: Starting point for the set of bank statements
          limit:
            type: optional<integer>
            default: 10
            docs: The limit of bank statements to be returned
            validation:
              min: 1
              max: 50
          status:
            type: optional<root.DocumentStatus>
            docs: If specified, only return bank statements with this status
      response:
        docs: Successful Response
        type: root.PagedResponseBankStatement
        status-code: 200
      errors:
        - >-
          root.GetBankStatementsV3BankStatementsGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              next_cursor: XjdHaksD
              data:
                - id: 7f8dceac-2848-472d-b5c3-55cdbaf35a9b
                  name: 2014-01-01_2014-02-01_statement.pdf
                  status: processing
                  created_at: '2024-01-01T00:00:00Z'
                  file:
                    no_pages: 1
                    size: 4096
                  error:
                    code: invalid_bank_statement
                    message: message
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/bank_statements" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                for bs in sdk.bank_statements.list().auto_paginate():
                    ... 
    postBankStatement:
      path: /v3/bank_statements
      method: POST
      auth: true
      docs: Upload a PDF file and queue it for extraction.
      source:
        openapi: ../openapi.yml
      display-name: Submit a bank statement PDF
      request:
        name: Body_post_bank_statement_v3_bank_statements_post
        body:
          properties:
            file: file
        content-type: multipart/form-data
      response:
        docs: Successful Response
        type: root.BankStatement
        status-code: 200
      errors:
        - >-
          root.PostBankStatementV3BankStatementsPostRequestUnprocessableEntityError
      examples:
        - request: {}
          response:
            body:
              id: 7f8dceac-2848-472d-b5c3-55cdbaf35a9b
              name: 2014-01-01_2014-02-01_statement.pdf
              status: processing
              created_at: '2024-01-01T00:00:00Z'
              file:
                no_pages: 1
                size: 4096
              error:
                code: invalid_bank_statement
                message: message
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                        "https://api.ntropy.com/v3/bank_statements" \
                        -H "Accept: application/json" \
                        -H "X-API-KEY: cd1H...Wmhl" \
                        --form file=@bank_statement.pdf
                    
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                with open('bank_statement.pdf', 'rb') as fh:
                    bank_statement = sdk.bank_statements.create(fh)
                    results = sdk.bank_statement.wait_for_results(bank_statement.id) 
    getBankStatement:
      path: /v3/bank_statements/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve a bank statement
      response:
        docs: Successful Response
        type: root.BankStatement
        status-code: 200
      errors:
        - root.GetBankStatementV3BankStatementsIdGetRequestNotFoundError
        - >-
          root.GetBankStatementV3BankStatementsIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: 7f8dceac-2848-472d-b5c3-55cdbaf35a9b
              name: 2014-01-01_2014-02-01_statement.pdf
              status: processing
              created_at: '2024-01-01T00:00:00Z'
              file:
                no_pages: 1
                size: 4096
              error:
                code: invalid_bank_statement
                message: message
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/bank_statements/7f8dceac-2848-472d-b5c3-55cdbaf35a9b" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >-
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                bs =
                sdk.bank_statements.get("7f8dceac-2848-472d-b5c3-55cdbaf35a9b") 
    deleteBankStatement:
      path: /v3/bank_statements/{id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Deletes a bank statement
      errors:
        - root.DeleteBankStatementV3BankStatementsIdDeleteRequestNotFoundError
        - >-
          root.DeleteBankStatementV3BankStatementsIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
    getBankStatementStatementInfo:
      path: /v3/bank_statements/{id}/overview
      method: POST
      auth: true
      docs: >-
        Extracts account holder, bank and account information extracted from the
        first page of the bank statement, which is typically available before
        the full results. This is a synchronous call.


        Complete guide: [Overview](../../../bank-statements)
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Quickly extract account holder, institution and first account
      response:
        docs: Successful Response
        type: root.StatementInfo
        status-code: 200
      errors:
        - >-
          root.GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestNotFoundError
        - >-
          root.GetBankStatementStatementInfoV3BankStatementsIdOverviewPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              institution: Well's Fargo
              start_date: '2024-01-01'
              end_date: '2024-02-01'
              account_holder:
                type: consumer
                name: John Doe
                address:
                  street: 601 Rosebud Avenue
                  postcode: '77901'
                  city: Victoria
                  state: Texas
                  country: United States
              accounts:
                - type: checking
                  number: '83721'
                  opening_balance: 1000
                  closing_balance: 1500
                  iso_currency_code: USD
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/bank_statements/7f8dceac-2848-472d-b5c3-55cdbaf35a9b/overview" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                overview = sdk.bank_statements.overview(
                    "7f8dceac-2848-472d-b5c3-55cdbaf35a9b"
                ) 
    getBankStatementResult:
      path: /v3/bank_statements/{id}/results
      method: GET
      auth: true
      docs: >-
        Return the extracted account information and associated transactions
        from a bank statement PDF. The results are accessible once the
        statement's status is `completed`.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve the extraction results
      response:
        docs: Successful Response
        type: root.BankStatementResults
        status-code: 200
      errors:
        - >-
          root.GetBankStatementResultV3BankStatementsIdResultsGetRequestNotFoundError
        - >-
          root.GetBankStatementResultV3BankStatementsIdResultsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              accounts:
                - number: '972913289'
                  opening_balance: 400
                  closing_balance: 200
                  start_date: '2024-01-01'
                  end_date: '2024-02-01'
                  is_balance_reconciled: true
                  total_incoming: 0
                  total_outgoing: 200
                  transactions:
                    - id: xbx8YP14g565Xk
                      description: SQ* STARBUCKS NW 43RD
                      date: '2024-03-30'
                      amount: 200
                      entry_type: outgoing
                      currency: USD
                      running_balance: 400
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/bank_statements/7f8dceac-2848-472d-b5c3-55cdbaf35a9b/results" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >-
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                bs =
                sdk.bank_statements.get("7f8dceac-2848-472d-b5c3-55cdbaf35a9b")

                results = sdk.bank_statements.wait_for_results(
                    "7f8dceac-2848-472d-b5c3-55cdbaf35a9b"
                ) 
  source:
    openapi: ../openapi.yml
  display-name: Bank statements
docs: >

  The Bank Statements API allows you to manage and extract information from bank
  statements. We support extraction of

  account holder information, account information and transaction records. Files
  should be uploaded in PDF format.


  During the extraction process, the bank statements undergo several status
  changes:

  |  Status  |                             
  Description                               |

  |----------|------------------------------------------------------------------------|

  |processing|The upload was successful. Extraction is in
  progress.                   |

  |completed |The extraction was successful. Results are
  available.                   |

  |error     |An error occurred during extraction. Check `error` for more
  information.|



  A list of error codes for the `error` status can be found below:

  |         Code         |                Description                |

  |----------------------|-------------------------------------------|

  |invalid_bank_statement|Failed to process file as a bank statement.|

  |internal_error        |Internal error. Please contact support.    |



  Complete guide: [Bank Statements](../../../bank-statements).
",
    },
    "batches.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getBatchResults": {
              "auth": true,
              "display-name": "Retrieve the results of a batch",
              "docs": "Returns the results of the enrichment request. The resulting enriched transactions are returned in the same order they were submitted. Results are available after the batch has finished processing.",
              "errors": [
                "root.GetBatchResultsV3BatchesIdResultsGetRequestNotFoundError",
                "root.GetBatchResultsV3BatchesIdResultsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/batches/203613d2-83c8-4130-8809-d14206eeec20/results" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
results = sdk.batches.wait_for_results("f203613d2-83c8-4130-8809-d14206eeec20")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "id": "id",
                      "results": {
                        "transactions": [
                          {
                            "categories": {
                              "general": "outgoing - coffee shops",
                            },
                            "created_at": "2024-03-30T00:00:00Z",
                            "entities": {
                              "counterparty": {
                                "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                                "logo": "https://logos.ntropy.com/starbucks.com",
                                "mccs": [
                                  5814,
                                ],
                                "name": "Starbucks",
                                "type": "organization",
                                "website": "starbucks.com",
                              },
                              "intermediaries": [
                                {
                                  "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                                  "logo": "https://logos.ntropy.com/squareup.com",
                                  "mccs": [
                                    1,
                                  ],
                                  "name": "Square",
                                  "type": "payment_processor",
                                  "website": "squareup.com",
                                },
                              ],
                            },
                            "id": "xbx8YP14g565Xk",
                            "location": {
                              "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                              "structured": {
                                "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277",
                                "city": "Gainesville",
                                "country": "United States",
                                "country_code": "US",
                                "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                                "latitude": 29.704558,
                                "longitude": -82.389277,
                                "postcode": "32653",
                                "state": "Florida",
                                "street": "Nw 43rd Street 5480",
                              },
                            },
                          },
                        ],
                      },
                      "status": "processing",
                      "total": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/batches/{id}/results",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Returned batch of transaction enrichment results.",
                "status-code": 200,
                "type": "root.BatchResult",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getBatches": {
              "auth": true,
              "display-name": "List all batches",
              "docs": "Returns a list of submitted batches starting with the most recent one.",
              "errors": [
                "root.GetBatchesV3BatchesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/batches" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

for batch in sdk.batches.list().auto_paginate():
    ... ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": {
                      "data": [
                        {
                          "created_at": "2024-01-01T00:00:00Z",
                          "id": "203613d2-83c8-4130-8809-d14206eeec20",
                          "progress": 0,
                          "status": "processing",
                          "total": 4000,
                          "updated_at": "2024-01-01T00:00:30Z",
                        },
                      ],
                      "next_cursor": "XjdHaksD",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/batches",
              "request": {
                "name": "GetBatchesV3BatchesGetRequest",
                "query-parameters": {
                  "created_after": {
                    "docs": "Only return batches older or equal than this date",
                    "type": "optional<datetime>",
                  },
                  "created_before": {
                    "docs": "Only return batches newer than this date",
                    "type": "optional<datetime>",
                  },
                  "cursor": {
                    "docs": "Starting point for the set of batches",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "default": 10,
                    "docs": "The limit of batches to be returned",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 50,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "status": {
                    "docs": "If specified, only return batches with this status",
                    "type": "optional<root.BatchStatus>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PagedResponseBatch",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getSingleBatch": {
              "auth": true,
              "display-name": "Retrieve a batch",
              "docs": undefined,
              "errors": [
                "root.GetSingleBatchV3BatchesIdGetRequestNotFoundError",
                "root.GetSingleBatchV3BatchesIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/batches/203613d2-83c8-4130-8809-d14206eeec20" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
batch = sdk.batches.get("f203613d2-83c8-4130-8809-d14206eeec20") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-01T00:00:00Z",
                      "id": "203613d2-83c8-4130-8809-d14206eeec20",
                      "progress": 0,
                      "status": "processing",
                      "total": 4000,
                      "updated_at": "2024-01-01T00:00:30Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/batches/{id}",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Batch",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "postBatch": {
              "auth": true,
              "display-name": "Submit a batch of transactions",
              "docs": "Creates a batch of transactions and enriches it in an asynchronous fashion. A batch, representing the status of the 
enrichment progress is returned as a result of the submission. 

In order to be notified on the status of the batch, you can setup [webhooks](../../../webhooks) and receive 
the respective notifications. Alternatively, you can 
[poll](../../../enrichment/introduction/#viewing-the-progress-of-a-batch) for the status of the batch using its id.

This endpoints supports up to 24960 transactions.",
              "errors": [
                "root.PostBatchV3BatchesPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/batches/" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '[{
        "id": "xbx8YP14g565Xk",
        "description": "SQ* STARBUCKS NW 43RD",
        "date": "2024-03-30",
        "amount": 10.0,
        "entry_type": "outgoing",
        "currency": "USD",
        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
        "location": {
            "country": "US"
        }
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK, TransactionInput, LocationInput

sdk = SDK("cd1H...Wmhl")
batch = sdk.batches.create([
    TransactionInput(
        id="xbx8YP14g565Xk",
        description="SQ* STARBUCKS NW 43RD",
        account_holder_id="35b927b6-6fda-40aa-93b8-95b47c2b2cad",
        amount=10.0,
        entry_type="outgoing",
        date="2024-03-30",
        currency="USD",
        location=LocationInput(
          country="US",
        )
    )
]) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": {
                    "transactions": [
                      {
                        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                        "amount": 10,
                        "currency": "USD",
                        "date": "2024-03-30",
                        "description": "SQ* STARBUCKS NW 43RD",
                        "entry_type": "outgoing",
                        "id": "xbx8YP14g565Xk",
                        "location": {
                          "country": "US",
                        },
                      },
                    ],
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-01-01T00:00:00Z",
                      "id": "203613d2-83c8-4130-8809-d14206eeec20",
                      "progress": 0,
                      "status": "processing",
                      "total": 4000,
                      "updated_at": "2024-01-01T00:00:30Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/batches",
              "request": {
                "body": {
                  "properties": {
                    "transactions": {
                      "type": "list<root.TransactionInput>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "AsyncEnrichmentInput",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Batch",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getBatches:
      path: /v3/batches
      method: GET
      auth: true
      docs: Returns a list of submitted batches starting with the most recent one.
      source:
        openapi: ../openapi.yml
      display-name: List all batches
      request:
        name: GetBatchesV3BatchesGetRequest
        query-parameters:
          created_after:
            type: optional<datetime>
            docs: Only return batches older or equal than this date
          created_before:
            type: optional<datetime>
            docs: Only return batches newer than this date
          cursor:
            type: optional<string>
            docs: Starting point for the set of batches
          limit:
            type: optional<integer>
            default: 10
            docs: The limit of batches to be returned
            validation:
              min: 1
              max: 50
          status:
            type: optional<root.BatchStatus>
            docs: If specified, only return batches with this status
      response:
        docs: Successful Response
        type: root.PagedResponseBatch
        status-code: 200
      errors:
        - root.GetBatchesV3BatchesGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              next_cursor: XjdHaksD
              data:
                - id: 203613d2-83c8-4130-8809-d14206eeec20
                  status: processing
                  created_at: '2024-01-01T00:00:00Z'
                  updated_at: '2024-01-01T00:00:30Z'
                  progress: 0
                  total: 4000
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/batches" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                for batch in sdk.batches.list().auto_paginate():
                    ... 
    postBatch:
      path: /v3/batches
      method: POST
      auth: true
      docs: >-
        Creates a batch of transactions and enriches it in an asynchronous
        fashion. A batch, representing the status of the 

        enrichment progress is returned as a result of the submission. 


        In order to be notified on the status of the batch, you can setup
        [webhooks](../../../webhooks) and receive 

        the respective notifications. Alternatively, you can 

        [poll](../../../enrichment/introduction/#viewing-the-progress-of-a-batch)
        for the status of the batch using its id.


        This endpoints supports up to 24960 transactions.
      source:
        openapi: ../openapi.yml
      display-name: Submit a batch of transactions
      request:
        name: AsyncEnrichmentInput
        body:
          properties:
            transactions:
              type: list<root.TransactionInput>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Batch
        status-code: 200
      errors:
        - root.PostBatchV3BatchesPostRequestUnprocessableEntityError
      examples:
        - request:
            transactions:
              - id: xbx8YP14g565Xk
                description: SQ* STARBUCKS NW 43RD
                date: '2024-03-30'
                amount: 10
                entry_type: outgoing
                currency: USD
                account_holder_id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
                location:
                  country: US
          response:
            body:
              id: 203613d2-83c8-4130-8809-d14206eeec20
              status: processing
              created_at: '2024-01-01T00:00:00Z'
              updated_at: '2024-01-01T00:00:30Z'
              progress: 0
              total: 4000
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/batches/" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '[{
                        "id": "xbx8YP14g565Xk",
                        "description": "SQ* STARBUCKS NW 43RD",
                        "date": "2024-03-30",
                        "amount": 10.0,
                        "entry_type": "outgoing",
                        "currency": "USD",
                        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                        "location": {
                            "country": "US"
                        }
                    }]'
                 
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK, TransactionInput, LocationInput

                sdk = SDK("cd1H...Wmhl")
                batch = sdk.batches.create([
                    TransactionInput(
                        id="xbx8YP14g565Xk",
                        description="SQ* STARBUCKS NW 43RD",
                        account_holder_id="35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                        amount=10.0,
                        entry_type="outgoing",
                        date="2024-03-30",
                        currency="USD",
                        location=LocationInput(
                          country="US",
                        )
                    )
                ]) 
    getSingleBatch:
      path: /v3/batches/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve a batch
      response:
        docs: Successful Response
        type: root.Batch
        status-code: 200
      errors:
        - root.GetSingleBatchV3BatchesIdGetRequestNotFoundError
        - root.GetSingleBatchV3BatchesIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: 203613d2-83c8-4130-8809-d14206eeec20
              status: processing
              created_at: '2024-01-01T00:00:00Z'
              updated_at: '2024-01-01T00:00:30Z'
              progress: 0
              total: 4000
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/batches/203613d2-83c8-4130-8809-d14206eeec20" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >-
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                batch =
                sdk.batches.get("f203613d2-83c8-4130-8809-d14206eeec20") 
    getBatchResults:
      path: /v3/batches/{id}/results
      method: GET
      auth: true
      docs: >-
        Returns the results of the enrichment request. The resulting enriched
        transactions are returned in the same order they were submitted. Results
        are available after the batch has finished processing.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve the results of a batch
      response:
        docs: Returned batch of transaction enrichment results.
        type: root.BatchResult
        status-code: 200
      errors:
        - root.GetBatchResultsV3BatchesIdResultsGetRequestNotFoundError
        - >-
          root.GetBatchResultsV3BatchesIdResultsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: id
              total: 1
              status: processing
              results:
                transactions:
                  - entities:
                      counterparty:
                        id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
                        name: Starbucks
                        website: starbucks.com
                        logo: https://logos.ntropy.com/starbucks.com
                        mccs:
                          - 5814
                        type: organization
                      intermediaries:
                        - id: 916bc837-55ef-3106-88f6-5a8269ca9f2a
                          name: Square
                          website: squareup.com
                          logo: https://logos.ntropy.com/squareup.com
                          mccs:
                            - 1
                          type: payment_processor
                    categories:
                      general: outgoing - coffee shops
                    location:
                      raw_address: Nw 43rd Street 5480, Gainesville, Florida 32653, US
                      structured:
                        street: Nw 43rd Street 5480
                        city: Gainesville
                        state: Florida
                        postcode: '32653'
                        country_code: US
                        country: United States
                        latitude: 29.704558
                        longitude: -82.389277
                        google_maps_url: >-
                          https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277
                        apple_maps_url: https://maps.apple.com/?q=29.704558,-82.389277
                    created_at: '2024-03-30T00:00:00Z'
                    id: xbx8YP14g565Xk
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/batches/203613d2-83c8-4130-8809-d14206eeec20/results" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                results =
                sdk.batches.wait_for_results("f203613d2-83c8-4130-8809-d14206eeec20")
  source:
    openapi: ../openapi.yml
",
    },
    "categories.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "customCategoriesPost": {
              "auth": true,
              "display-name": "Set a custom set of categories",
              "docs": "Sets a custom set of categories. Transactions that don't match a category will be categorized `not enough information` regardless of whether it is present in the set.",
              "errors": [
                "root.CustomCategoriesPostV3CategoriesAccountHolderTypePostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/categories/consumer" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '{
        "incoming": [
            "salary",
            "investment income",
            "other income"
        ],
        "outgoing": [
            "rent",
            "utilities",
            "groceries",
            "entertainment"
        ]
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.categories.set("consumer", {
    "incoming": [
        "transfer from investment app",
        "transfer from stock broker",
        "transfer from crypto broker",
        "chargeback",
        "freelance income",
        "rideshare or delivery income",
        "paycheck",
        "benefits",
        "interest earned",
        "stock dividend"
    ],
    "outgoing": [
        "digital content and streaming",
        "vending machine",
        "reversal",
        "transfer to investment app",
        "transfer to stock broker",
        "transfer to crypto broker",
        "adjustment",
        "intra account transfer",
        "inter account transfer",
        "peer to peer transfer",
        "funeral service",
        "ATM withdrawal",
        "teller withdrawal"
    ]
})
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "account_holder_type": "consumer",
                  },
                  "request": {
                    "incoming": [
                      "salary",
                      "investment income",
                      "other income",
                    ],
                    "outgoing": [
                      "rent",
                      "utilities",
                      "groceries",
                      "entertainment",
                    ],
                  },
                  "response": {
                    "body": {
                      "incoming": [
                        "salary",
                        "investment income",
                        "other income",
                      ],
                      "outgoing": [
                        "rent",
                        "utilities",
                        "groceries",
                        "entertainment",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/categories/{account_holder_type}",
              "path-parameters": {
                "account_holder_type": "root.AccountHolderType",
              },
              "request": {
                "body": {
                  "type": "root.CustomCategorySet",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Custom categories successfully set.",
                "status-code": 200,
                "type": "root.CustomCategorySet",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "deleteCustomCategorySet": {
              "auth": true,
              "display-name": "Reset category set to original values",
              "docs": "Resets the set of categories of the specified account holder type to the original values.",
              "errors": [
                "root.DeleteCustomCategorySetV3CategoriesAccountHolderTypeResetPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/categories/consumer/reset" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.categories.reset("consumer")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "account_holder_type": "consumer",
                  },
                  "response": {
                    "body": {
                      "incoming": [
                        "transfer from investment app",
                        "transfer from stock broker",
                        "transfer from crypto broker",
                        "chargeback",
                        "freelance income",
                        "rideshare or delivery income",
                        "paycheck",
                        "benefits",
                        "interest earned",
                        "stock dividend",
                      ],
                      "outgoing": [
                        "digital content and streaming",
                        "vending machine",
                        "reversal",
                        "transfer to investment app",
                        "transfer to stock broker",
                        "transfer to crypto broker",
                        "adjustment",
                        "intra account transfer",
                        "inter account transfer",
                        "peer to peer transfer",
                        "funeral service",
                        "ATM withdrawal",
                        "teller withdrawal",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/categories/{account_holder_type}/reset",
              "path-parameters": {
                "account_holder_type": "root.AccountHolderType",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.CategorySet",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getCategorySet": {
              "auth": true,
              "display-name": "Retrieve category set",
              "docs": "Retrieves the set of categories. Category sets are different per account holder type.",
              "errors": [
                "root.GetCategorySetV3CategoriesAccountHolderTypeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/categories/consumer" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.categories.get("consumer")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "account_holder_type": "consumer",
                  },
                  "response": {
                    "body": {
                      "incoming": [
                        "transfer from investment app",
                        "transfer from stock broker",
                        "transfer from crypto broker",
                        "chargeback",
                        "freelance income",
                        "rideshare or delivery income",
                        "paycheck",
                        "benefits",
                        "interest earned",
                        "stock dividend",
                      ],
                      "outgoing": [
                        "digital content and streaming",
                        "vending machine",
                        "reversal",
                        "transfer to investment app",
                        "transfer to stock broker",
                        "transfer to crypto broker",
                        "adjustment",
                        "intra account transfer",
                        "inter account transfer",
                        "peer to peer transfer",
                        "funeral service",
                        "ATM withdrawal",
                        "teller withdrawal",
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/categories/{account_holder_type}",
              "path-parameters": {
                "account_holder_type": "root.AccountHolderType",
              },
              "response": {
                "docs": "Category set for the selected type of account holder",
                "status-code": 200,
                "type": "root.CategorySet",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getCategorySet:
      path: /v3/categories/{account_holder_type}
      method: GET
      auth: true
      docs: >-
        Retrieves the set of categories. Category sets are different per account
        holder type.
      source:
        openapi: ../openapi.yml
      path-parameters:
        account_holder_type: root.AccountHolderType
      display-name: Retrieve category set
      response:
        docs: Category set for the selected type of account holder
        type: root.CategorySet
        status-code: 200
      errors:
        - >-
          root.GetCategorySetV3CategoriesAccountHolderTypeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            account_holder_type: consumer
          response:
            body:
              incoming:
                - transfer from investment app
                - transfer from stock broker
                - transfer from crypto broker
                - chargeback
                - freelance income
                - rideshare or delivery income
                - paycheck
                - benefits
                - interest earned
                - stock dividend
              outgoing:
                - digital content and streaming
                - vending machine
                - reversal
                - transfer to investment app
                - transfer to stock broker
                - transfer to crypto broker
                - adjustment
                - intra account transfer
                - inter account transfer
                - peer to peer transfer
                - funeral service
                - ATM withdrawal
                - teller withdrawal
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/categories/consumer" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.categories.get("consumer")
    customCategoriesPost:
      path: /v3/categories/{account_holder_type}
      method: POST
      auth: true
      docs: >-
        Sets a custom set of categories. Transactions that don't match a
        category will be categorized `not enough information` regardless of
        whether it is present in the set.
      source:
        openapi: ../openapi.yml
      path-parameters:
        account_holder_type: root.AccountHolderType
      display-name: Set a custom set of categories
      request:
        body:
          type: root.CustomCategorySet
        content-type: application/json
      response:
        docs: Custom categories successfully set.
        type: root.CustomCategorySet
        status-code: 200
      errors:
        - >-
          root.CustomCategoriesPostV3CategoriesAccountHolderTypePostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            account_holder_type: consumer
          request:
            incoming:
              - salary
              - investment income
              - other income
            outgoing:
              - rent
              - utilities
              - groceries
              - entertainment
          response:
            body:
              incoming:
                - salary
                - investment income
                - other income
              outgoing:
                - rent
                - utilities
                - groceries
                - entertainment
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/categories/consumer" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '{
                        "incoming": [
                            "salary",
                            "investment income",
                            "other income"
                        ],
                        "outgoing": [
                            "rent",
                            "utilities",
                            "groceries",
                            "entertainment"
                        ]
                    }]'
                 
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.categories.set("consumer", {
                    "incoming": [
                        "transfer from investment app",
                        "transfer from stock broker",
                        "transfer from crypto broker",
                        "chargeback",
                        "freelance income",
                        "rideshare or delivery income",
                        "paycheck",
                        "benefits",
                        "interest earned",
                        "stock dividend"
                    ],
                    "outgoing": [
                        "digital content and streaming",
                        "vending machine",
                        "reversal",
                        "transfer to investment app",
                        "transfer to stock broker",
                        "transfer to crypto broker",
                        "adjustment",
                        "intra account transfer",
                        "inter account transfer",
                        "peer to peer transfer",
                        "funeral service",
                        "ATM withdrawal",
                        "teller withdrawal"
                    ]
                })
    deleteCustomCategorySet:
      path: /v3/categories/{account_holder_type}/reset
      method: POST
      auth: true
      docs: >-
        Resets the set of categories of the specified account holder type to the
        original values.
      source:
        openapi: ../openapi.yml
      path-parameters:
        account_holder_type: root.AccountHolderType
      display-name: Reset category set to original values
      response:
        docs: Successful Response
        type: root.CategorySet
        status-code: 200
      errors:
        - >-
          root.DeleteCustomCategorySetV3CategoriesAccountHolderTypeResetPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            account_holder_type: consumer
          response:
            body:
              incoming:
                - transfer from investment app
                - transfer from stock broker
                - transfer from crypto broker
                - chargeback
                - freelance income
                - rideshare or delivery income
                - paycheck
                - benefits
                - interest earned
                - stock dividend
              outgoing:
                - digital content and streaming
                - vending machine
                - reversal
                - transfer to investment app
                - transfer to stock broker
                - transfer to crypto broker
                - adjustment
                - intra account transfer
                - inter account transfer
                - peer to peer transfer
                - funeral service
                - ATM withdrawal
                - teller withdrawal
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/categories/consumer/reset" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.categories.reset("consumer")
  source:
    openapi: ../openapi.yml
",
    },
    "entities.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getEntityById": {
              "auth": true,
              "display-name": "Retrieve an entity",
              "docs": "Retrieve more information about an entity by using its unique ID.",
              "errors": [
                "root.GetEntityByIdV3EntitiesIdGetRequestBadRequestError",
                "root.GetEntityByIdV3EntitiesIdGetRequestNotFoundError",
                "root.GetEntityByIdV3EntitiesIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/entities/d4bc3c80-ec1a-3da2-836e-2a4ca4758be5" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.entities.lookup("d4bc3c80-ec1a-3da2-836e-2a4ca4758be5") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                      "logo": "https://logos.ntropy.com/starbucks.com",
                      "mccs": [
                        5814,
                      ],
                      "name": "Starbucks",
                      "website": "starbucks.com",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/entities/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The unique ID of the entity",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Entity",
                "status-code": 200,
                "type": "root.Entity",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "searchEntity": {
              "auth": true,
              "display-name": "Searches for an entity",
              "docs": "Resolves a query into an entity by querying our entity resolution system. 
    The parameters `name` and `website` are mutually exclusive. Calls to this endpoint using 
    the `name` parameter are billed the same way transactions are.",
              "errors": [
                "root.SearchEntityV3EntitiesLookupGetRequestBadRequestError",
                "root.SearchEntityV3EntitiesLookupGetRequestUnprocessableEntityError",
                "root.SearchEntityV3EntitiesLookupGetRequestLockedError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/entities?name=Starbucks" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.entities.lookup(name="Starbucks") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": {
                      "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                      "logo": "https://logos.ntropy.com/starbucks.com",
                      "mccs": [
                        5814,
                      ],
                      "name": "Starbucks",
                      "website": "starbucks.com",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/entities/lookup",
              "request": {
                "name": "SearchEntityV3EntitiesLookupGetRequest",
                "query-parameters": {
                  "location": {
                    "docs": "An unstructured location string of the entity to resolve",
                    "type": "optional<string>",
                  },
                  "name": {
                    "docs": "The name of the entity to resolve",
                    "type": "optional<string>",
                  },
                  "website": {
                    "docs": "The website of the entity to resolve",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Entity",
                "status-code": 200,
                "type": "root.Entity",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    searchEntity:
      path: /v3/entities/lookup
      method: GET
      auth: true
      docs: >-
        Resolves a query into an entity by querying our entity resolution
        system. 
            The parameters `name` and `website` are mutually exclusive. Calls to this endpoint using 
            the `name` parameter are billed the same way transactions are.
      source:
        openapi: ../openapi.yml
      display-name: Searches for an entity
      request:
        name: SearchEntityV3EntitiesLookupGetRequest
        query-parameters:
          name:
            type: optional<string>
            docs: The name of the entity to resolve
          website:
            type: optional<string>
            docs: The website of the entity to resolve
          location:
            type: optional<string>
            docs: An unstructured location string of the entity to resolve
      response:
        docs: Entity
        type: root.Entity
        status-code: 200
      errors:
        - root.SearchEntityV3EntitiesLookupGetRequestBadRequestError
        - root.SearchEntityV3EntitiesLookupGetRequestUnprocessableEntityError
        - root.SearchEntityV3EntitiesLookupGetRequestLockedError
      examples:
        - response:
            body:
              id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
              name: Starbucks
              website: starbucks.com
              logo: https://logos.ntropy.com/starbucks.com
              mccs:
                - 5814
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/entities?name=Starbucks" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.entities.lookup(name="Starbucks") 
    getEntityById:
      path: /v3/entities/{id}
      method: GET
      auth: true
      docs: Retrieve more information about an entity by using its unique ID.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: The unique ID of the entity
      display-name: Retrieve an entity
      response:
        docs: Entity
        type: root.Entity
        status-code: 200
      errors:
        - root.GetEntityByIdV3EntitiesIdGetRequestBadRequestError
        - root.GetEntityByIdV3EntitiesIdGetRequestNotFoundError
        - root.GetEntityByIdV3EntitiesIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
              name: Starbucks
              website: starbucks.com
              logo: https://logos.ntropy.com/starbucks.com
              mccs:
                - 5814
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/entities/d4bc3c80-ec1a-3da2-836e-2a4ca4758be5" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.entities.lookup("d4bc3c80-ec1a-3da2-836e-2a4ca4758be5") 
  source:
    openapi: ../openapi.yml
",
    },
    "personalization.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Personalization API allows you to customize the output of enrichment by
uploading a set of rules. For more information, see our documentation on
[Personalization](None).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Personalization",
          "endpoints": {
            "filterAppend": {
              "auth": true,
              "display-name": "Append a rule.",
              "docs": "Append a rule to the personalization ruleset.",
              "errors": [
                "root.FilterAppendV3RulesAppendPostRequestBadRequestError",
                "root.FilterAppendV3RulesAppendPostRequestContentTooLargeError",
                "root.FilterAppendV3RulesAppendPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/rules/append" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl" \
    -H "Content-Type: application/json" \
    -d '{"set": "logo", "to": "http://example.com/favicon.ico"}'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.rules.append({"set": "logo", "to": "http://example.com/favicon.ico"})
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": {
                    "if": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/rules/append",
              "request": {
                "body": {
                  "type": "root.action",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "filterDelete": {
              "auth": true,
              "display-name": "Delete a rule.",
              "docs": "Delete the rule at the specified index from the personalization ruleset.",
              "errors": [
                "root.FilterDeleteV3RulesIndexDeleteRequestBadRequestError",
                "root.FilterDeleteV3RulesIndexDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "DELETE" \
    "https://api.ntropy.com/v3/rules/0" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.rules.delete(0)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "index": 1,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v3/rules/{index}",
              "path-parameters": {
                "index": "integer",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "filterGet": {
              "auth": true,
              "display-name": "Get the current personalization ruleset.",
              "docs": "Get the current personalization ruleset.",
              "errors": [
                "root.FilterGetV3RulesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/rules" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
rules = sdk.rules.get()
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": [
                      {
                        "if": {
                          "is_substring": [],
                        },
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/rules",
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Filter",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "filterPatch": {
              "auth": true,
              "display-name": "Modify an existing rule.",
              "docs": "Modify an existing rule at the specified index on the ruleset.",
              "errors": [
                "root.FilterPatchV3RulesIndexPatchRequestBadRequestError",
                "root.FilterPatchV3RulesIndexPatchRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "PATCH" \
    "https://api.ntropy.com/v3/rules/0" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl" \
    -H "Content-Type: application/json" \
    -d '{"set": "logo", "to": "http://example.com/favicon.ico"}'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.rules.patch(0, {"set": "logo", "to": "http://example.com/favicon.ico"})
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "index": 1,
                  },
                  "request": {
                    "if": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v3/rules/{index}",
              "path-parameters": {
                "index": "integer",
              },
              "request": {
                "body": {
                  "type": "root.action",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "filterPost": {
              "auth": true,
              "display-name": "Set the personalization ruleset.",
              "docs": "Set the personalization ruleset.",
              "errors": [
                "root.FilterPostV3RulesPostRequestBadRequestError",
                "root.FilterPostV3RulesPostRequestContentTooLargeError",
                "root.FilterPostV3RulesPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/rules" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl" \
    -H "Content-Type: application/json" \
    -d '[{
        "if": {
            "is_substring": [
                {"get": "website"},
                "ntropy"
            ]
        },
        "then": [
            {"set": "logo", "to": "http://example.com/favicon.ico"}
        ],
        "else": [
            {"remove_label": "example label"}
        ]
    }]'
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.rules.set([{
    "if": {
        "is_substring": [
            {"get": "website"},
            "ntropy"
        ]
    },
    "then": [
        {"set": "logo", "to": "http://example.com/favicon.ico"}
    ],
    "else": [
        {"remove_label": "example label"}
    ]
}])
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": [
                    {
                      "if": {
                        "is_substring": [],
                      },
                    },
                  ],
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/rules",
              "request": {
                "body": {
                  "type": "root.Filter",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    filterGet:
      path: /v3/rules
      method: GET
      auth: true
      docs: Get the current personalization ruleset.
      source:
        openapi: ../openapi.yml
      display-name: Get the current personalization ruleset.
      response:
        docs: Successful Response
        type: root.Filter
        status-code: 200
      errors:
        - root.FilterGetV3RulesGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              - if:
                  is_substring: []
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/rules" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                rules = sdk.rules.get()
    filterPost:
      path: /v3/rules
      method: POST
      auth: true
      docs: Set the personalization ruleset.
      source:
        openapi: ../openapi.yml
      display-name: Set the personalization ruleset.
      request:
        body:
          type: root.Filter
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - root.FilterPostV3RulesPostRequestBadRequestError
        - root.FilterPostV3RulesPostRequestContentTooLargeError
        - root.FilterPostV3RulesPostRequestUnprocessableEntityError
      examples:
        - request:
            - if:
                is_substring: []
          response:
            body:
              key: value
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl -X "POST" \
                    "https://api.ntropy.com/v3/rules" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl" \
                    -H "Content-Type: application/json" \
                    -d '[{
                        "if": {
                            "is_substring": [
                                {"get": "website"},
                                "ntropy"
                            ]
                        },
                        "then": [
                            {"set": "logo", "to": "http://example.com/favicon.ico"}
                        ],
                        "else": [
                            {"remove_label": "example label"}
                        ]
                    }]'
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.rules.set([{
                    "if": {
                        "is_substring": [
                            {"get": "website"},
                            "ntropy"
                        ]
                    },
                    "then": [
                        {"set": "logo", "to": "http://example.com/favicon.ico"}
                    ],
                    "else": [
                        {"remove_label": "example label"}
                    ]
                }])
    filterAppend:
      path: /v3/rules/append
      method: POST
      auth: true
      docs: Append a rule to the personalization ruleset.
      source:
        openapi: ../openapi.yml
      display-name: Append a rule.
      request:
        body:
          type: root.action
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - root.FilterAppendV3RulesAppendPostRequestBadRequestError
        - root.FilterAppendV3RulesAppendPostRequestContentTooLargeError
        - root.FilterAppendV3RulesAppendPostRequestUnprocessableEntityError
      examples:
        - request:
            if: true
          response:
            body:
              key: value
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl -X "POST" \
                    "https://api.ntropy.com/v3/rules/append" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl" \
                    -H "Content-Type: application/json" \
                    -d '{"set": "logo", "to": "http://example.com/favicon.ico"}'
            - name: Python SDK
              language: python
              code: >
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                sdk.rules.append({"set": "logo", "to":
                "http://example.com/favicon.ico"})
    filterDelete:
      path: /v3/rules/{index}
      method: DELETE
      auth: true
      docs: Delete the rule at the specified index from the personalization ruleset.
      source:
        openapi: ../openapi.yml
      path-parameters:
        index: integer
      display-name: Delete a rule.
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - root.FilterDeleteV3RulesIndexDeleteRequestBadRequestError
        - root.FilterDeleteV3RulesIndexDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            index: 1
          response:
            body:
              key: value
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "DELETE" \
                    "https://api.ntropy.com/v3/rules/0" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.rules.delete(0)
    filterPatch:
      path: /v3/rules/{index}
      method: PATCH
      auth: true
      docs: Modify an existing rule at the specified index on the ruleset.
      source:
        openapi: ../openapi.yml
      path-parameters:
        index: integer
      display-name: Modify an existing rule.
      request:
        body:
          type: root.action
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - root.FilterPatchV3RulesIndexPatchRequestBadRequestError
        - root.FilterPatchV3RulesIndexPatchRequestUnprocessableEntityError
      examples:
        - path-parameters:
            index: 1
          request:
            if: true
          response:
            body:
              key: value
          code-samples:
            - name: cURL
              language: cURL
              code: |
                curl -X "PATCH" \
                    "https://api.ntropy.com/v3/rules/0" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl" \
                    -H "Content-Type: application/json" \
                    -d '{"set": "logo", "to": "http://example.com/favicon.ico"}'
            - name: Python SDK
              language: python
              code: >
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                sdk.rules.patch(0, {"set": "logo", "to":
                "http://example.com/favicon.ico"})
  source:
    openapi: ../openapi.yml
  display-name: Personalization
docs: |

  The Personalization API allows you to customize the output of enrichment by
  uploading a set of rules. For more information, see our documentation on
  [Personalization](None).
",
    },
    "recurrence.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Recurrence API allows you to identify and categorize recurring patterns found in the transactions of an 
[account holder](#tag/Account-Holders), such as periodic payments or subscriptions and group them 
into recurrence groups. Each recurrence group contains detailed information about the pattern, 
such as periodicity, amount and counterparty.

Transactions can be added to an account holder via the [Enrichment API](#tag/Enrichment). 
It is crucial that transactions are submitted with the [correct](../../../account-holders) 
account holder information as the recurrence calculation relies heavily on it.

Complete guide: [Recurrence](../../../enrichment/recurrence).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Recurrence",
          "endpoints": {
            "getAccountHolderRecurringPayments": {
              "auth": true,
              "display-name": "Find recurring groups in a transaction history",
              "docs": "Identifies and categorizes recurring patterns found in the transaction history of the account holder, such as periodic payments or subscriptions. These patterns are called recurrence groups.",
              "errors": [
                "root.GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestNotFoundError",
                "root.GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad/recurring_groups" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
recurring_groups = sdk.account_holders.recurring_groups(
    "35b927b6-6fda-40aa-93b8-95b47c2b2cad"
) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": [
                      {
                        "average_amount": 10,
                        "categories": {
                          "accounting": "operational expenses",
                          "general": "outgoing - coffee shops",
                        },
                        "counterparty": {
                          "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                          "logo": "https://logos.ntropy.com/starbucks.com",
                          "mccs": [
                            5814,
                          ],
                          "name": "Starbucks",
                          "type": "organization",
                          "website": "starbucks.com",
                        },
                        "end_date": "2024-03-30",
                        "id": "8efbac45-9bd5-4b67-be29-334106198c40",
                        "periodicity": "daily",
                        "periodicity_in_days": 1,
                        "start_date": "2024-03-01",
                        "total_amount": 300,
                        "transaction_ids": [
                          "2dc6SE8A7cTQ2jUdUadCg",
                          "tQYAhhl0XNkl1wasacpVQ",
                          "NNJTqvockIdKnYxBqPlJw",
                        ],
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/account_holders/{id}/recurring_groups",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.RecurrenceGroup>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAccountHolderRecurringPayments:
      path: /v3/account_holders/{id}/recurring_groups
      method: POST
      auth: true
      docs: >-
        Identifies and categorizes recurring patterns found in the transaction
        history of the account holder, such as periodic payments or
        subscriptions. These patterns are called recurrence groups.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Find recurring groups in a transaction history
      response:
        docs: Successful Response
        type: list<root.RecurrenceGroup>
        status-code: 200
      errors:
        - >-
          root.GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestNotFoundError
        - >-
          root.GetAccountHolderRecurringPaymentsV3AccountHoldersIdRecurringGroupsPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              - id: 8efbac45-9bd5-4b67-be29-334106198c40
                start_date: '2024-03-01'
                end_date: '2024-03-30'
                total_amount: 300
                average_amount: 10
                periodicity_in_days: 1
                periodicity: daily
                counterparty:
                  id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
                  name: Starbucks
                  website: starbucks.com
                  logo: https://logos.ntropy.com/starbucks.com
                  mccs:
                    - 5814
                  type: organization
                categories:
                  general: outgoing - coffee shops
                  accounting: operational expenses
                transaction_ids:
                  - 2dc6SE8A7cTQ2jUdUadCg
                  - tQYAhhl0XNkl1wasacpVQ
                  - NNJTqvockIdKnYxBqPlJw
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/account_holders/35b927b6-6fda-40aa-93b8-95b47c2b2cad/recurring_groups" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                recurring_groups = sdk.account_holders.recurring_groups(
                    "35b927b6-6fda-40aa-93b8-95b47c2b2cad"
                ) 
  source:
    openapi: ../openapi.yml
  display-name: Recurrence
docs: >

  The Recurrence API allows you to identify and categorize recurring patterns
  found in the transactions of an 

  [account holder](#tag/Account-Holders), such as periodic payments or
  subscriptions and group them 

  into recurrence groups. Each recurrence group contains detailed information
  about the pattern, 

  such as periodicity, amount and counterparty.


  Transactions can be added to an account holder via the [Enrichment
  API](#tag/Enrichment). 

  It is crucial that transactions are submitted with the
  [correct](../../../account-holders) 

  account holder information as the recurrence calculation relies heavily on it.


  Complete guide: [Recurrence](../../../enrichment/recurrence).
",
    },
    "reports.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Reports API allows you to flag transactions with incorrect fields. You can also track the progress of each
report either through the API or using [webhooks](#tag/Webhooks).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Reports",
          "endpoints": {
            "deleteReport": {
              "auth": true,
              "display-name": "Delete a report",
              "docs": "Delete a report",
              "errors": [
                "root.DeleteReportV3ReportsIdDeleteRequestNotFoundError",
                "root.DeleteReportV3ReportsIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v3/reports/{id}",
              "path-parameters": {
                "id": "string",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getReport": {
              "auth": true,
              "display-name": "Retrieve a report",
              "docs": "Retrieve a report",
              "errors": [
                "root.GetReportV3ReportsIdGetRequestNotFoundError",
                "root.GetReportV3ReportsIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/reports/a652285d-de1b-4a6f-b6ce-45efa9be7952" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
report = sdk.reports.get("a652285d-de1b-4a6f-b6ce-45efa9be7952")
    ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-10-03T02:53:30Z",
                      "description": "lorem ipsum",
                      "fields": [
                        ".entities.counterparty",
                      ],
                      "id": "a652285d-de1b-4a6f-b6ce-45efa9be7952",
                      "rejection_reason": "rejection_reason",
                      "status": "open",
                      "transaction_id": "xbx8YP14g565Xk",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/reports/{id}",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Report",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getReports": {
              "auth": true,
              "display-name": "List all reports",
              "docs": "List all reports",
              "errors": [
                "root.GetReportsV3ReportsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/reports" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
reports = sdk.reports.list()
    ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": {
                      "data": [
                        {
                          "created_at": "2024-10-03T02:53:30Z",
                          "description": "lorem ipsum",
                          "fields": [
                            ".entities.counterparty",
                          ],
                          "id": "a652285d-de1b-4a6f-b6ce-45efa9be7952",
                          "rejection_reason": "rejection_reason",
                          "status": "open",
                          "transaction_id": "xbx8YP14g565Xk",
                        },
                      ],
                      "next_cursor": "next_cursor",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/reports",
              "request": {
                "name": "GetReportsV3ReportsGetRequest",
                "query-parameters": {
                  "created_after": {
                    "docs": "Only return report older or equal than this date",
                    "type": "optional<datetime>",
                  },
                  "created_before": {
                    "docs": "Only return report newer than this date",
                    "type": "optional<datetime>",
                  },
                  "cursor": {
                    "docs": "Starting point for the set of report",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "default": 10,
                    "docs": "The limit of report to be returned",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 50,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "status": {
                    "docs": "If specified, only return reports with this status",
                    "type": "optional<root.ReportStatus>",
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PagedResponseReport",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "postReport": {
              "auth": true,
              "display-name": "Create a report",
              "docs": "Report a transaction with incorrect fields.",
              "errors": [
                "root.PostReportV3ReportsPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/reports" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '{
        "transaction_id": "xbx8YP14g565Xk",
        "description": "lorem ipsum",
        "fields": [
            ".entities.counterparty"
        ]
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
report = sdk.reports.create(
    transaction_id="xbx8YP14g565Xk",
    description="lorem ipsum",
    fields=['.entities.counterparty'],
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": {
                    "description": "lorem ipsum",
                    "fields": [
                      ".entities.counterparty",
                    ],
                    "transaction_id": "xbx8YP14g565Xk",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-10-03T02:53:30Z",
                      "description": "lorem ipsum",
                      "fields": [
                        ".entities.counterparty",
                      ],
                      "id": "a652285d-de1b-4a6f-b6ce-45efa9be7952",
                      "rejection_reason": "rejection_reason",
                      "status": "open",
                      "transaction_id": "xbx8YP14g565Xk",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/reports",
              "request": {
                "body": {
                  "properties": {
                    "description": {
                      "docs": "A description of what is wrong in the transaction",
                      "type": "string",
                    },
                    "fields": {
                      "docs": "A list of the fields that are incorrect",
                      "type": "list<string>",
                    },
                    "transaction_id": {
                      "docs": "The unique identifier of the transaction",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ReportBase",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "The newly created report",
                "status-code": 200,
                "type": "root.Report",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getReports:
      path: /v3/reports
      method: GET
      auth: true
      docs: List all reports
      source:
        openapi: ../openapi.yml
      display-name: List all reports
      request:
        name: GetReportsV3ReportsGetRequest
        query-parameters:
          created_after:
            type: optional<datetime>
            docs: Only return report older or equal than this date
          created_before:
            type: optional<datetime>
            docs: Only return report newer than this date
          cursor:
            type: optional<string>
            docs: Starting point for the set of report
          limit:
            type: optional<integer>
            default: 10
            docs: The limit of report to be returned
            validation:
              min: 1
              max: 50
          status:
            type: optional<root.ReportStatus>
            docs: If specified, only return reports with this status
      response:
        docs: Successful Response
        type: root.PagedResponseReport
        status-code: 200
      errors:
        - root.GetReportsV3ReportsGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              next_cursor: next_cursor
              data:
                - transaction_id: xbx8YP14g565Xk
                  description: lorem ipsum
                  fields:
                    - .entities.counterparty
                  id: a652285d-de1b-4a6f-b6ce-45efa9be7952
                  created_at: '2024-10-03T02:53:30Z'
                  status: open
                  rejection_reason: rejection_reason
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/reports" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                reports = sdk.reports.list()
                    
    postReport:
      path: /v3/reports
      method: POST
      auth: true
      docs: Report a transaction with incorrect fields.
      source:
        openapi: ../openapi.yml
      display-name: Create a report
      request:
        name: ReportBase
        body:
          properties:
            transaction_id:
              type: string
              docs: The unique identifier of the transaction
              validation:
                minLength: 1
            description:
              type: string
              docs: A description of what is wrong in the transaction
            fields:
              docs: A list of the fields that are incorrect
              type: list<string>
        content-type: application/json
      response:
        docs: The newly created report
        type: root.Report
        status-code: 200
      errors:
        - root.PostReportV3ReportsPostRequestUnprocessableEntityError
      examples:
        - request:
            transaction_id: xbx8YP14g565Xk
            description: lorem ipsum
            fields:
              - .entities.counterparty
          response:
            body:
              transaction_id: xbx8YP14g565Xk
              description: lorem ipsum
              fields:
                - .entities.counterparty
              id: a652285d-de1b-4a6f-b6ce-45efa9be7952
              created_at: '2024-10-03T02:53:30Z'
              status: open
              rejection_reason: rejection_reason
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/reports" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '{
                        "transaction_id": "xbx8YP14g565Xk",
                        "description": "lorem ipsum",
                        "fields": [
                            ".entities.counterparty"
                        ]
                    }]'
                 
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                report = sdk.reports.create(
                    transaction_id="xbx8YP14g565Xk",
                    description="lorem ipsum",
                    fields=['.entities.counterparty'],
                )
    getReport:
      path: /v3/reports/{id}
      method: GET
      auth: true
      docs: Retrieve a report
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve a report
      response:
        docs: Successful Response
        type: root.Report
        status-code: 200
      errors:
        - root.GetReportV3ReportsIdGetRequestNotFoundError
        - root.GetReportV3ReportsIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              transaction_id: xbx8YP14g565Xk
              description: lorem ipsum
              fields:
                - .entities.counterparty
              id: a652285d-de1b-4a6f-b6ce-45efa9be7952
              created_at: '2024-10-03T02:53:30Z'
              status: open
              rejection_reason: rejection_reason
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/reports/a652285d-de1b-4a6f-b6ce-45efa9be7952" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                report = sdk.reports.get("a652285d-de1b-4a6f-b6ce-45efa9be7952")
                    
    deleteReport:
      path: /v3/reports/{id}
      method: DELETE
      auth: true
      docs: Delete a report
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Delete a report
      errors:
        - root.DeleteReportV3ReportsIdDeleteRequestNotFoundError
        - root.DeleteReportV3ReportsIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
  source:
    openapi: ../openapi.yml
  display-name: Reports
docs: >

  The Reports API allows you to flag transactions with incorrect fields. You can
  also track the progress of each

  report either through the API or using [webhooks](#tag/Webhooks).
",
    },
    "transactions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Transaction API allows you to manage, retrieve and search through enriched transactions. A transaction contains
both the enrichment fields and the original input fields. They are made available after being 
[enriched](#tag/Enrichment).
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Transactions",
          "endpoints": {
            "deleteTransaction": {
              "auth": true,
              "display-name": "Deletes a transaction",
              "docs": "Deleting a transaction will also delete it from our systems. This operation is permanent.",
              "errors": [
                "root.DeleteTransactionV3TransactionsIdDeleteRequestNotFoundError",
                "root.DeleteTransactionV3TransactionsIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "DELETE" \
    "https://api.ntropy.com/v3/transactions/xbx8YP14g565Xk" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
tx = sdk.transactions.delete("xbx8YP14g565Xk") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v3/transactions/{id}",
              "path-parameters": {
                "id": "string",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getTransaction": {
              "auth": true,
              "display-name": "Retrieve a transaction",
              "docs": undefined,
              "errors": [
                "root.GetTransactionV3TransactionsIdGetRequestNotFoundError",
                "root.GetTransactionV3TransactionsIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/transactions/xbx8YP14g565Xk" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
tx = sdk.transactions.get("xbx8YP14g565Xk") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "amount": 10,
                      "categories": {
                        "accounting": "operational expenses",
                        "general": "outgoing - coffee shops",
                      },
                      "created_at": "2024-03-30T00:00:00Z",
                      "currency": "USD",
                      "date": "2024-03-30",
                      "description": "SQ* STARBUCKS NW 43RD",
                      "entities": {
                        "counterparty": {
                          "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                          "logo": "https://logos.ntropy.com/starbucks.com",
                          "mccs": [
                            5814,
                          ],
                          "name": "Starbucks",
                          "type": "organization",
                          "website": "starbucks.com",
                        },
                        "intermediaries": [
                          {
                            "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                            "logo": "https://logos.ntropy.com/squareup.com",
                            "mccs": [
                              1,
                            ],
                            "name": "Square",
                            "type": "payment_processor",
                            "website": "squareup.com",
                          },
                        ],
                      },
                      "entry_type": "outgoing",
                      "error": {
                        "code": "account_holder_not_found",
                        "message": "message",
                      },
                      "id": "xbx8YP14g565Xk",
                      "location": {
                        "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                        "structured": {
                          "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277",
                          "city": "Gainesville",
                          "country": "United States",
                          "country_code": "US",
                          "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                          "latitude": 29.704558,
                          "longitude": -82.389277,
                          "postcode": "32653",
                          "state": "Florida",
                          "store_number": "store_number",
                          "street": "Nw 43rd Street 5480",
                        },
                      },
                      "recurrence": {
                        "type": "recurring",
                      },
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/transactions/{id}",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Transaction",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listTransactions": {
              "auth": true,
              "display-name": "List all transactions",
              "docs": "Return a list of enriched transactions starting with the most recent one.",
              "errors": [
                "root.ListTransactionsV3TransactionsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/transactions" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
for tx in sdk.transactions.list().auto_paginate():
    ... ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": {
                      "data": [
                        {
                          "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                          "amount": 10,
                          "categories": {
                            "general": "outgoing - coffee shops",
                          },
                          "created_at": "2024-03-30T00:00:00Z",
                          "currency": "USD",
                          "date": "2024-03-30",
                          "description": "SQ* STARBUCKS NW 43RD",
                          "entities": {
                            "counterparty": {
                              "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                              "logo": "https://logos.ntropy.com/starbucks.com",
                              "mccs": [
                                5814,
                              ],
                              "name": "Starbucks",
                              "type": "organization",
                              "website": "starbucks.com",
                            },
                            "intermediaries": [
                              {
                                "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                                "logo": "https://logos.ntropy.com/squareup.com",
                                "mccs": [
                                  1,
                                ],
                                "name": "Square",
                                "type": "payment_processor",
                                "website": "squareup.com",
                              },
                            ],
                          },
                          "entry_type": "outgoing",
                          "error": {
                            "code": "account_holder_not_found",
                            "message": "message",
                          },
                          "id": "xbx8YP14g565Xk",
                          "location": {
                            "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                            "structured": {
                              "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277",
                              "city": "Gainesville",
                              "country": "United States",
                              "country_code": "US",
                              "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                              "latitude": 29.704558,
                              "longitude": -82.389277,
                              "postcode": "32653",
                              "state": "Florida",
                              "street": "Nw 43rd Street 5480",
                            },
                          },
                          "recurrence": {
                            "type": "recurring",
                          },
                        },
                      ],
                      "next_cursor": "XjdHaksD",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/transactions",
              "request": {
                "name": "ListTransactionsV3TransactionsGetRequest",
                "query-parameters": {
                  "account_holder_id": {
                    "docs": "If specified, only return the transactions of this account holder",
                    "type": "optional<string>",
                  },
                  "created_after": {
                    "docs": "Only return transactions older or equal than this date",
                    "type": "optional<datetime>",
                  },
                  "created_before": {
                    "docs": "Only return transactions newer than this date",
                    "type": "optional<datetime>",
                  },
                  "cursor": {
                    "docs": "Starting point for the set of transactions",
                    "type": "optional<string>",
                  },
                  "limit": {
                    "default": 25,
                    "docs": "The limit of transactions to be returned",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 500,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PagedResponseTransaction",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "postTransactions": {
              "auth": true,
              "display-name": "Synchronously enrich transactions",
              "docs": "Enriches a list of transactions in synchronous fashion. The enriched transactions returned in
the order that they were submitted. Webhook events are not triggered for this operation. 

This endpoint supports up to 1000 transactions. 

If you want more throughput and live updates refer to the 
[async enrichment endpoint](../batches/post-batch).",
              "errors": [
                "root.PostTransactionsV3TransactionsPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/transactions" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '[{
        "id": "xbx8YP14g565Xk",
        "description": "SQ* STARBUCKS NW 43RD",
        "date": "2024-03-30",
        "amount": 10.0,
        "entry_type": "outgoing",
        "currency": "USD",
        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
        "location": {
            "country": "US"
        }
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK, TransactionInput, LocationInput

sdk = SDK("cd1H...Wmhl")
enriched = sdk.transactions.create([
    TransactionInput(
        id="xbx8YP14g565Xk",
        description="SQ* STARBUCKS NW 43RD",
        account_holder_id="35b927b6-6fda-40aa-93b8-95b47c2b2cad",
        amount=10.0,
        entry_type="outgoing",
        date="2024-03-30",
        currency="USD",
        location=LocationInput(
          country="US",
        )
    )
]) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": {
                    "transactions": [
                      {
                        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                        "amount": 10,
                        "currency": "USD",
                        "date": "2024-03-30",
                        "description": "SQ* STARBUCKS NW 43RD",
                        "entry_type": "outgoing",
                        "id": "xbx8YP14g565Xk",
                        "location": {
                          "country": "US",
                        },
                      },
                    ],
                  },
                  "response": {
                    "body": {
                      "transactions": [
                        {
                          "categories": {
                            "general": "outgoing - coffee shops",
                          },
                          "created_at": "2024-03-30T00:00:00Z",
                          "entities": {
                            "counterparty": {
                              "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                              "logo": "https://logos.ntropy.com/starbucks.com",
                              "mccs": [
                                5814,
                              ],
                              "name": "Starbucks",
                              "type": "organization",
                              "website": "starbucks.com",
                            },
                            "intermediaries": [
                              {
                                "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                                "logo": "https://logos.ntropy.com/squareup.com",
                                "mccs": [
                                  1,
                                ],
                                "name": "Square",
                                "type": "payment_processor",
                                "website": "squareup.com",
                              },
                            ],
                          },
                          "id": "xbx8YP14g565Xk",
                          "location": {
                            "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                            "structured": {
                              "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277",
                              "city": "Gainesville",
                              "country": "United States",
                              "country_code": "US",
                              "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                              "latitude": 29.704558,
                              "longitude": -82.389277,
                              "postcode": "32653",
                              "state": "Florida",
                              "street": "Nw 43rd Street 5480",
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/transactions",
              "request": {
                "body": {
                  "properties": {
                    "transactions": {
                      "type": "list<root.TransactionInput>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SyncEnrichmentInput",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Enriched transactions.",
                "status-code": 200,
                "type": "root.SyncEnrichmentOutput",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setTransactionAh": {
              "auth": true,
              "display-name": "Assign a transaction to an account holder",
              "docs": "Changes the account holder associated with the transaction. The old and new account holder must share the same categories",
              "errors": [
                "root.SetTransactionAhV3TransactionsIdAssignPostRequestNotFoundError",
                "root.SetTransactionAhV3TransactionsIdAssignPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/transactions/xbx8YP14g565Xk" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '{
        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad"
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.transactions.assign(
    transaction_id="xbx8YP14g565Xk", 
    account_holder_id="35b927b6-6fda-40aa-93b8-95b47c2b2cad"
) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {
                    "account_holder_id": "account_holder_id",
                  },
                  "response": {
                    "body": {
                      "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "amount": 10,
                      "categories": {
                        "accounting": "operational expenses",
                        "general": "outgoing - coffee shops",
                      },
                      "created_at": "2024-03-30T00:00:00Z",
                      "currency": "USD",
                      "date": "2024-03-30",
                      "description": "SQ* STARBUCKS NW 43RD",
                      "entities": {
                        "counterparty": {
                          "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                          "logo": "https://logos.ntropy.com/starbucks.com",
                          "mccs": [
                            5814,
                          ],
                          "name": "Starbucks",
                          "type": "organization",
                          "website": "starbucks.com",
                        },
                        "intermediaries": [
                          {
                            "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                            "logo": "https://logos.ntropy.com/squareup.com",
                            "mccs": [
                              1,
                            ],
                            "name": "Square",
                            "type": "payment_processor",
                            "website": "squareup.com",
                          },
                        ],
                      },
                      "entry_type": "outgoing",
                      "error": {
                        "code": "account_holder_not_found",
                        "message": "message",
                      },
                      "id": "xbx8YP14g565Xk",
                      "location": {
                        "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                        "structured": {
                          "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277",
                          "city": "Gainesville",
                          "country": "United States",
                          "country_code": "US",
                          "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                          "latitude": 29.704558,
                          "longitude": -82.389277,
                          "postcode": "32653",
                          "state": "Florida",
                          "store_number": "store_number",
                          "street": "Nw 43rd Street 5480",
                        },
                      },
                      "recurrence": {
                        "type": "recurring",
                      },
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/transactions/{id}/assign",
              "path-parameters": {
                "id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "account_holder_id": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BodySetTransactionAhV3TransactionsIdAssignPost",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Transaction",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getTransaction:
      path: /v3/transactions/{id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve a transaction
      response:
        docs: Successful Response
        type: root.Transaction
        status-code: 200
      errors:
        - root.GetTransactionV3TransactionsIdGetRequestNotFoundError
        - root.GetTransactionV3TransactionsIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: xbx8YP14g565Xk
              description: SQ* STARBUCKS NW 43RD
              date: '2024-03-30'
              amount: 10
              entry_type: outgoing
              currency: USD
              entities:
                counterparty:
                  id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
                  name: Starbucks
                  website: starbucks.com
                  logo: https://logos.ntropy.com/starbucks.com
                  mccs:
                    - 5814
                  type: organization
                intermediaries:
                  - id: 916bc837-55ef-3106-88f6-5a8269ca9f2a
                    name: Square
                    website: squareup.com
                    logo: https://logos.ntropy.com/squareup.com
                    mccs:
                      - 1
                    type: payment_processor
              categories:
                general: outgoing - coffee shops
                accounting: operational expenses
              location:
                raw_address: Nw 43rd Street 5480, Gainesville, Florida 32653, US
                structured:
                  street: Nw 43rd Street 5480
                  city: Gainesville
                  state: Florida
                  postcode: '32653'
                  country_code: US
                  country: United States
                  latitude: 29.704558
                  longitude: -82.389277
                  google_maps_url: >-
                    https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277
                  apple_maps_url: https://maps.apple.com/?q=29.704558,-82.389277
                  store_number: store_number
              error:
                code: account_holder_not_found
                message: message
              created_at: '2024-03-30T00:00:00Z'
              account_holder_id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
              recurrence:
                type: recurring
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/transactions/xbx8YP14g565Xk" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                tx = sdk.transactions.get("xbx8YP14g565Xk") 
    deleteTransaction:
      path: /v3/transactions/{id}
      method: DELETE
      auth: true
      docs: >-
        Deleting a transaction will also delete it from our systems. This
        operation is permanent.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Deletes a transaction
      errors:
        - root.DeleteTransactionV3TransactionsIdDeleteRequestNotFoundError
        - >-
          root.DeleteTransactionV3TransactionsIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "DELETE" \
                    "https://api.ntropy.com/v3/transactions/xbx8YP14g565Xk" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                tx = sdk.transactions.delete("xbx8YP14g565Xk") 
    listTransactions:
      path: /v3/transactions
      method: GET
      auth: true
      docs: >-
        Return a list of enriched transactions starting with the most recent
        one.
      source:
        openapi: ../openapi.yml
      display-name: List all transactions
      request:
        name: ListTransactionsV3TransactionsGetRequest
        query-parameters:
          created_after:
            type: optional<datetime>
            docs: Only return transactions older or equal than this date
          created_before:
            type: optional<datetime>
            docs: Only return transactions newer than this date
          cursor:
            type: optional<string>
            docs: Starting point for the set of transactions
          limit:
            type: optional<integer>
            default: 25
            docs: The limit of transactions to be returned
            validation:
              min: 1
              max: 500
          account_holder_id:
            type: optional<string>
            docs: If specified, only return the transactions of this account holder
      response:
        docs: Successful Response
        type: root.PagedResponseTransaction
        status-code: 200
      errors:
        - root.ListTransactionsV3TransactionsGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              next_cursor: XjdHaksD
              data:
                - id: xbx8YP14g565Xk
                  description: SQ* STARBUCKS NW 43RD
                  date: '2024-03-30'
                  amount: 10
                  entry_type: outgoing
                  currency: USD
                  entities:
                    counterparty:
                      id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
                      name: Starbucks
                      website: starbucks.com
                      logo: https://logos.ntropy.com/starbucks.com
                      mccs:
                        - 5814
                      type: organization
                    intermediaries:
                      - id: 916bc837-55ef-3106-88f6-5a8269ca9f2a
                        name: Square
                        website: squareup.com
                        logo: https://logos.ntropy.com/squareup.com
                        mccs:
                          - 1
                        type: payment_processor
                  categories:
                    general: outgoing - coffee shops
                  location:
                    raw_address: Nw 43rd Street 5480, Gainesville, Florida 32653, US
                    structured:
                      street: Nw 43rd Street 5480
                      city: Gainesville
                      state: Florida
                      postcode: '32653'
                      country_code: US
                      country: United States
                      latitude: 29.704558
                      longitude: -82.389277
                      google_maps_url: >-
                        https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277
                      apple_maps_url: https://maps.apple.com/?q=29.704558,-82.389277
                  error:
                    code: account_holder_not_found
                    message: message
                  created_at: '2024-03-30T00:00:00Z'
                  account_holder_id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
                  recurrence:
                    type: recurring
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/transactions" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                for tx in sdk.transactions.list().auto_paginate():
                    ... 
    postTransactions:
      path: /v3/transactions
      method: POST
      auth: true
      docs: >-
        Enriches a list of transactions in synchronous fashion. The enriched
        transactions returned in

        the order that they were submitted. Webhook events are not triggered for
        this operation. 


        This endpoint supports up to 1000 transactions. 


        If you want more throughput and live updates refer to the 

        [async enrichment endpoint](../batches/post-batch).
      source:
        openapi: ../openapi.yml
      display-name: Synchronously enrich transactions
      request:
        name: SyncEnrichmentInput
        body:
          properties:
            transactions:
              type: list<root.TransactionInput>
        content-type: application/json
      response:
        docs: Enriched transactions.
        type: root.SyncEnrichmentOutput
        status-code: 200
      errors:
        - root.PostTransactionsV3TransactionsPostRequestUnprocessableEntityError
      examples:
        - request:
            transactions:
              - id: xbx8YP14g565Xk
                description: SQ* STARBUCKS NW 43RD
                date: '2024-03-30'
                amount: 10
                entry_type: outgoing
                currency: USD
                account_holder_id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
                location:
                  country: US
          response:
            body:
              transactions:
                - entities:
                    counterparty:
                      id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
                      name: Starbucks
                      website: starbucks.com
                      logo: https://logos.ntropy.com/starbucks.com
                      mccs:
                        - 5814
                      type: organization
                    intermediaries:
                      - id: 916bc837-55ef-3106-88f6-5a8269ca9f2a
                        name: Square
                        website: squareup.com
                        logo: https://logos.ntropy.com/squareup.com
                        mccs:
                          - 1
                        type: payment_processor
                  categories:
                    general: outgoing - coffee shops
                  location:
                    raw_address: Nw 43rd Street 5480, Gainesville, Florida 32653, US
                    structured:
                      street: Nw 43rd Street 5480
                      city: Gainesville
                      state: Florida
                      postcode: '32653'
                      country_code: US
                      country: United States
                      latitude: 29.704558
                      longitude: -82.389277
                      google_maps_url: >-
                        https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277
                      apple_maps_url: https://maps.apple.com/?q=29.704558,-82.389277
                  created_at: '2024-03-30T00:00:00Z'
                  id: xbx8YP14g565Xk
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/transactions" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '[{
                        "id": "xbx8YP14g565Xk",
                        "description": "SQ* STARBUCKS NW 43RD",
                        "date": "2024-03-30",
                        "amount": 10.0,
                        "entry_type": "outgoing",
                        "currency": "USD",
                        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                        "location": {
                            "country": "US"
                        }
                    }]'
                 
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK, TransactionInput, LocationInput

                sdk = SDK("cd1H...Wmhl")
                enriched = sdk.transactions.create([
                    TransactionInput(
                        id="xbx8YP14g565Xk",
                        description="SQ* STARBUCKS NW 43RD",
                        account_holder_id="35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                        amount=10.0,
                        entry_type="outgoing",
                        date="2024-03-30",
                        currency="USD",
                        location=LocationInput(
                          country="US",
                        )
                    )
                ]) 
    setTransactionAh:
      path: /v3/transactions/{id}/assign
      method: POST
      auth: true
      docs: >-
        Changes the account holder associated with the transaction. The old and
        new account holder must share the same categories
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Assign a transaction to an account holder
      request:
        name: BodySetTransactionAhV3TransactionsIdAssignPost
        body:
          properties:
            account_holder_id: string
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Transaction
        status-code: 200
      errors:
        - root.SetTransactionAhV3TransactionsIdAssignPostRequestNotFoundError
        - >-
          root.SetTransactionAhV3TransactionsIdAssignPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          request:
            account_holder_id: account_holder_id
          response:
            body:
              id: xbx8YP14g565Xk
              description: SQ* STARBUCKS NW 43RD
              date: '2024-03-30'
              amount: 10
              entry_type: outgoing
              currency: USD
              entities:
                counterparty:
                  id: d4bc3c80-ec1a-3da2-836e-2a4ca4758be5
                  name: Starbucks
                  website: starbucks.com
                  logo: https://logos.ntropy.com/starbucks.com
                  mccs:
                    - 5814
                  type: organization
                intermediaries:
                  - id: 916bc837-55ef-3106-88f6-5a8269ca9f2a
                    name: Square
                    website: squareup.com
                    logo: https://logos.ntropy.com/squareup.com
                    mccs:
                      - 1
                    type: payment_processor
              categories:
                general: outgoing - coffee shops
                accounting: operational expenses
              location:
                raw_address: Nw 43rd Street 5480, Gainesville, Florida 32653, US
                structured:
                  street: Nw 43rd Street 5480
                  city: Gainesville
                  state: Florida
                  postcode: '32653'
                  country_code: US
                  country: United States
                  latitude: 29.704558
                  longitude: -82.389277
                  google_maps_url: >-
                    https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277
                  apple_maps_url: https://maps.apple.com/?q=29.704558,-82.389277
                  store_number: store_number
              error:
                code: account_holder_not_found
                message: message
              created_at: '2024-03-30T00:00:00Z'
              account_holder_id: 35b927b6-6fda-40aa-93b8-95b47c2b2cad
              recurrence:
                type: recurring
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/transactions/xbx8YP14g565Xk" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '{
                        "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad"
                    }]'
                 
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.transactions.assign(
                    transaction_id="xbx8YP14g565Xk", 
                    account_holder_id="35b927b6-6fda-40aa-93b8-95b47c2b2cad"
                ) 
  source:
    openapi: ../openapi.yml
  display-name: Transactions
docs: >

  The Transaction API allows you to manage, retrieve and search through enriched
  transactions. A transaction contains

  both the enrichment fields and the original input fields. They are made
  available after being 

  [enriched](#tag/Enrichment).
",
    },
    "webhooks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "docs": "
The Webhooks API allows you to receive notifications when certain events occur,
such as when a batch or bank statement finishes processing. 

When an event occurs, Ntropy will make a POST request to the `url` of the
webhook. If you specified a `token` when creating the webhook, this string will
be included in the `X-Ntropy-Token` header. The webhook call has a timeout limit of 10 
seconds, so any processing of the event 
",
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "display-name": "Webhooks",
          "endpoints": {
            "deleteWebhook": {
              "auth": true,
              "display-name": "Delete a webhook",
              "docs": "Delete a webhook",
              "errors": [
                "root.DeleteWebhookV3WebhooksIdDeleteRequestNotFoundError",
                "root.DeleteWebhookV3WebhooksIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "DELETE" \
    "https://api.ntropy.com/v3/webhooks/e94a150d-40af-4e96-8aa7-2948a6b4d8d3" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.webhooks.delete("e94a150d-40af-4e96-8aa7-2948a6b4d8d3") ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/v3/webhooks/{id}",
              "path-parameters": {
                "id": "string",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getWebhook": {
              "auth": true,
              "display-name": "Retrieve a webhook",
              "docs": "Retrieve a webhook",
              "errors": [
                "root.GetWebhookV3WebhooksIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/webhooks/e94a150d-40af-4e96-8aa7-2948a6b4d8d3" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
webhook = sdk.webhooks.get("e94a150d-40af-4e96-8aa7-2948a6b4d8d3")
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-10-03T02:53:30Z",
                      "enabled": true,
                      "events": [
                        "batches.completed",
                        "batches.error",
                      ],
                      "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                      "token": "hunter2",
                      "url": "https://example.com:5689",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/webhooks/{id}",
              "path-parameters": {
                "id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Webhook",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getWebhooks": {
              "auth": true,
              "display-name": "List all webhooks",
              "docs": "List all webhooks",
              "errors": [
                "root.GetWebhooksV3WebhooksGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "GET" \
    "https://api.ntropy.com/v3/webhooks" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
for webhook in sdk.webhooks.list().auto_paginate():
    ... ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "response": {
                    "body": {
                      "data": [
                        {
                          "created_at": "2024-10-03T02:53:30Z",
                          "enabled": true,
                          "events": [
                            "batches.completed",
                            "batches.error",
                          ],
                          "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                          "token": "hunter2",
                          "url": "https://example.com:5689",
                        },
                      ],
                      "next_cursor": "XjdHaksD",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/v3/webhooks",
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PagedResponseWebhook",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "patchWebhook": {
              "auth": true,
              "display-name": "Update a webhook",
              "docs": "Update a webhook. Fields that aren't specified in the body will remain unchanged",
              "errors": [
                "root.PatchWebhookV3WebhooksIdPatchRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/webhooks/e94a150d-40af-4e96-8aa7-2948a6b4d8d3" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '{
        "events": [
            "batches.completed",
            "batches.error"
        ],
        "enabled": false
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
wh = sdk.webhooks.patch(
    "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
    events=['batches.completed', 'batches.error'],
    enabled=False,
)
",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "created_at": "2024-10-03T02:53:30Z",
                      "enabled": true,
                      "events": [
                        "batches.completed",
                        "batches.error",
                      ],
                      "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                      "token": "hunter2",
                      "url": "https://example.com:5689",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/v3/webhooks/{id}",
              "path-parameters": {
                "id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "enabled": {
                      "docs": "Whether the webhook is enabled or not.",
                      "type": "optional<boolean>",
                    },
                    "events": {
                      "docs": "A list of events that this webhook subscribes to",
                      "type": "optional<list<WebhookPatchEventsItem>>",
                    },
                    "token": {
                      "docs": "A secret string used to authenticate the webhook. This value will be included in the `X-Ntropy-Token` header when sending requests to the webhook",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 128,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "url": {
                      "docs": "The URL of the webhook",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uri",
                        "maxLength": 1024,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhookPatch",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Webhook",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "postWebhook": {
              "auth": true,
              "display-name": "Create a webhook",
              "docs": "Create a webhook to be called when certain events occur.",
              "errors": [
                "root.PostWebhookV3WebhooksPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl -X "POST" \
    "https://api.ntropy.com/v3/webhooks" \
    -H "Accept: application/json" \
    -H "X-API-KEY: cd1H...Wmhl"  \
    -H "Content-Type: application/json" \
    -d '{
        "url": "https://example.com:5689",
        "events": [
            "batches.completed",
            "batches.error"
        ],
        "token": "hunter2"
    }]'
 ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "cURL",
                      "name": "cURL",
                    },
                    {
                      "code": "from ntropy_sdk import SDK

sdk = SDK("cd1H...Wmhl")
sdk.webhooks.create(
    url="https://example.com:5689",
    events="['batches.completed', 'batches.error']",
    token="hunter2",
) ",
                      "docs": undefined,
                      "install": undefined,
                      "language": "python",
                      "name": "Python SDK",
                    },
                  ],
                  "request": {
                    "events": [
                      "reports.resolved",
                    ],
                    "url": "url",
                  },
                  "response": {
                    "body": {
                      "created_at": "2024-10-03T02:53:30Z",
                      "enabled": true,
                      "events": [
                        "batches.completed",
                        "batches.error",
                      ],
                      "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                      "token": "hunter2",
                      "url": "https://example.com:5689",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/v3/webhooks",
              "request": {
                "body": {
                  "properties": {
                    "events": {
                      "docs": "A list of events that this webhook subscribes to",
                      "type": "list<WebhookBaseEventsItem>",
                    },
                    "token": {
                      "docs": "A secret string used to authenticate the webhook. This value will be included in the `X-Ntropy-Token` header when sending requests to the webhook",
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 128,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "url": {
                      "docs": "The URL of the webhook",
                      "type": "string",
                      "validation": {
                        "format": "uri",
                        "maxLength": 1024,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "WebhookBase",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Webhook",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "WebhookBaseEventsItem": {
            "enum": [
              {
                "name": "ReportsResolved",
                "value": "reports.resolved",
              },
              {
                "name": "ReportsRejected",
                "value": "reports.rejected",
              },
              {
                "name": "ReportsPending",
                "value": "reports.pending",
              },
              {
                "name": "BankStatementsCompleted",
                "value": "bank_statements.completed",
              },
              {
                "name": "BankStatementsError",
                "value": "bank_statements.error",
              },
              {
                "name": "BatchesCompleted",
                "value": "batches.completed",
              },
              {
                "name": "BatchesError",
                "value": "batches.error",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WebhookPatchEventsItem": {
            "enum": [
              {
                "name": "ReportsResolved",
                "value": "reports.resolved",
              },
              {
                "name": "ReportsRejected",
                "value": "reports.rejected",
              },
              {
                "name": "ReportsPending",
                "value": "reports.pending",
              },
              {
                "name": "BankStatementsCompleted",
                "value": "bank_statements.completed",
              },
              {
                "name": "BankStatementsError",
                "value": "bank_statements.error",
              },
              {
                "name": "BatchesCompleted",
                "value": "batches.completed",
              },
              {
                "name": "BatchesError",
                "value": "batches.error",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getWebhooks:
      path: /v3/webhooks
      method: GET
      auth: true
      docs: List all webhooks
      source:
        openapi: ../openapi.yml
      display-name: List all webhooks
      response:
        docs: Successful Response
        type: root.PagedResponseWebhook
        status-code: 200
      errors:
        - root.GetWebhooksV3WebhooksGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              next_cursor: XjdHaksD
              data:
                - url: https://example.com:5689
                  events:
                    - batches.completed
                    - batches.error
                  token: hunter2
                  id: e94a150d-40af-4e96-8aa7-2948a6b4d8d3
                  created_at: '2024-10-03T02:53:30Z'
                  enabled: true
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/webhooks" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                for webhook in sdk.webhooks.list().auto_paginate():
                    ... 
    postWebhook:
      path: /v3/webhooks
      method: POST
      auth: true
      docs: Create a webhook to be called when certain events occur.
      source:
        openapi: ../openapi.yml
      display-name: Create a webhook
      request:
        name: WebhookBase
        body:
          properties:
            url:
              type: string
              docs: The URL of the webhook
              validation:
                format: uri
                minLength: 1
                maxLength: 1024
            events:
              docs: A list of events that this webhook subscribes to
              type: list<WebhookBaseEventsItem>
            token:
              type: optional<string>
              docs: >-
                A secret string used to authenticate the webhook. This value
                will be included in the `X-Ntropy-Token` header when sending
                requests to the webhook
              validation:
                maxLength: 128
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Webhook
        status-code: 200
      errors:
        - root.PostWebhookV3WebhooksPostRequestUnprocessableEntityError
      examples:
        - request:
            url: url
            events:
              - reports.resolved
          response:
            body:
              url: https://example.com:5689
              events:
                - batches.completed
                - batches.error
              token: hunter2
              id: e94a150d-40af-4e96-8aa7-2948a6b4d8d3
              created_at: '2024-10-03T02:53:30Z'
              enabled: true
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/webhooks" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '{
                        "url": "https://example.com:5689",
                        "events": [
                            "batches.completed",
                            "batches.error"
                        ],
                        "token": "hunter2"
                    }]'
                 
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.webhooks.create(
                    url="https://example.com:5689",
                    events="['batches.completed', 'batches.error']",
                    token="hunter2",
                ) 
    getWebhook:
      path: /v3/webhooks/{id}
      method: GET
      auth: true
      docs: Retrieve a webhook
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Retrieve a webhook
      response:
        docs: Successful Response
        type: root.Webhook
        status-code: 200
      errors:
        - root.GetWebhookV3WebhooksIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              url: https://example.com:5689
              events:
                - batches.completed
                - batches.error
              token: hunter2
              id: e94a150d-40af-4e96-8aa7-2948a6b4d8d3
              created_at: '2024-10-03T02:53:30Z'
              enabled: true
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "GET" \
                    "https://api.ntropy.com/v3/webhooks/e94a150d-40af-4e96-8aa7-2948a6b4d8d3" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: >
                from ntropy_sdk import SDK


                sdk = SDK("cd1H...Wmhl")

                webhook =
                sdk.webhooks.get("e94a150d-40af-4e96-8aa7-2948a6b4d8d3")
    deleteWebhook:
      path: /v3/webhooks/{id}
      method: DELETE
      auth: true
      docs: Delete a webhook
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Delete a webhook
      errors:
        - root.DeleteWebhookV3WebhooksIdDeleteRequestNotFoundError
        - root.DeleteWebhookV3WebhooksIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "DELETE" \
                    "https://api.ntropy.com/v3/webhooks/e94a150d-40af-4e96-8aa7-2948a6b4d8d3" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  
            - name: Python SDK
              language: python
              code: |-
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                sdk.webhooks.delete("e94a150d-40af-4e96-8aa7-2948a6b4d8d3") 
    patchWebhook:
      path: /v3/webhooks/{id}
      method: PATCH
      auth: true
      docs: >-
        Update a webhook. Fields that aren't specified in the body will remain
        unchanged
      source:
        openapi: ../openapi.yml
      path-parameters:
        id: string
      display-name: Update a webhook
      request:
        name: WebhookPatch
        body:
          properties:
            url:
              type: optional<string>
              docs: The URL of the webhook
              validation:
                format: uri
                minLength: 1
                maxLength: 1024
            events:
              type: optional<list<WebhookPatchEventsItem>>
              docs: A list of events that this webhook subscribes to
            token:
              type: optional<string>
              docs: >-
                A secret string used to authenticate the webhook. This value
                will be included in the `X-Ntropy-Token` header when sending
                requests to the webhook
              validation:
                maxLength: 128
            enabled:
              type: optional<boolean>
              docs: Whether the webhook is enabled or not.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Webhook
        status-code: 200
      errors:
        - root.PatchWebhookV3WebhooksIdPatchRequestUnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          request: {}
          response:
            body:
              url: https://example.com:5689
              events:
                - batches.completed
                - batches.error
              token: hunter2
              id: e94a150d-40af-4e96-8aa7-2948a6b4d8d3
              created_at: '2024-10-03T02:53:30Z'
              enabled: true
          code-samples:
            - name: cURL
              language: cURL
              code: |-
                curl -X "POST" \
                    "https://api.ntropy.com/v3/webhooks/e94a150d-40af-4e96-8aa7-2948a6b4d8d3" \
                    -H "Accept: application/json" \
                    -H "X-API-KEY: cd1H...Wmhl"  \
                    -H "Content-Type: application/json" \
                    -d '{
                        "events": [
                            "batches.completed",
                            "batches.error"
                        ],
                        "enabled": false
                    }]'
                 
            - name: Python SDK
              language: python
              code: |
                from ntropy_sdk import SDK

                sdk = SDK("cd1H...Wmhl")
                wh = sdk.webhooks.patch(
                    "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                    events=['batches.completed', 'batches.error'],
                    enabled=False,
                )
  source:
    openapi: ../openapi.yml
  display-name: Webhooks
docs: >

  The Webhooks API allows you to receive notifications when certain events
  occur,

  such as when a batch or bank statement finishes processing. 


  When an event occurs, Ntropy will make a POST request to the `url` of the

  webhook. If you specified a `token` when creating the webhook, this string
  will

  be included in the `X-Ntropy-Token` header. The webhook call has a timeout
  limit of 10 

  seconds, so any processing of the event 
types:
  WebhookBaseEventsItem:
    enum:
      - value: reports.resolved
        name: ReportsResolved
      - value: reports.rejected
        name: ReportsRejected
      - value: reports.pending
        name: ReportsPending
      - value: bank_statements.completed
        name: BankStatementsCompleted
      - value: bank_statements.error
        name: BankStatementsError
      - value: batches.completed
        name: BatchesCompleted
      - value: batches.error
        name: BatchesError
    inline: true
    source:
      openapi: ../openapi.yml
  WebhookPatchEventsItem:
    enum:
      - value: reports.resolved
        name: ReportsResolved
      - value: reports.rejected
        name: ReportsRejected
      - value: reports.pending
        name: ReportsPending
      - value: bank_statements.completed
        name: BankStatementsCompleted
      - value: bank_statements.error
        name: BankStatementsError
      - value: batches.completed
        name: BatchesCompleted
      - value: batches.error
        name: BatchesError
    inline: true
    source:
      openapi: ../openapi.yml
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "APIKeyHeader",
      "auth-schemes": {
        "APIKeyHeader": {
          "header": "X-Api-Key",
          "name": "apiKey",
          "type": "string",
        },
      },
      "default-environment": "Default",
      "display-name": "Ntropy Transaction API",
      "environments": {
        "Default": "https://api.ntropy.com",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Ntropy Transaction API
environments:
  Default: https://api.ntropy.com
default-environment: Default
auth-schemes:
  APIKeyHeader:
    header: X-Api-Key
    name: apiKey
    type: string
auth: APIKeyHeader
",
  },
}