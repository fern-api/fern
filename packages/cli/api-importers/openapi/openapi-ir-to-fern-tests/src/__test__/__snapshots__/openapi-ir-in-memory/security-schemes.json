{
  "type": "openapi",
  "value": {
    "openapi": "3.1.0",
    "info": {
      "title": "Security Schemes Test",
      "version": "1.0.0",
      "description": "Test various security inheritance scenarios"
    },
    "servers": [
      {
        "url": "https://api.example.com/v1"
      }
    ],
    "security": [
      {
        "ApiKeyAuth": []
      }
    ],
    "paths": {
      "/plants/search": {
        "get": {
          "summary": "Search plants (inherits global ApiKeyAuth)",
          "operationId": "searchPlants",
          "parameters": [
            {
              "name": "query",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of plants",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Plant"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/plants/{plantId}": {
        "get": {
          "summary": "Get plant by ID (requires OAuth)",
          "operationId": "getPlantById",
          "security": [
            {
              "OAuth": [
                "read:plants"
              ]
            }
          ],
          "parameters": [
            {
              "name": "plantId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Plant details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          }
        }
      },
      "/plants": {
        "post": {
          "summary": "Add a new plant (OAuth OR OrgApiKeyAuth)",
          "operationId": "addPlant",
          "security": [
            {
              "OAuth": [
                "write:plants"
              ]
            },
            {
              "OrgApiKeyAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Plant created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          }
        }
      },
      "/plants/public": {
        "get": {
          "summary": "Get public plants (no auth required)",
          "operationId": "getPublicPlants",
          "security": [],
          "responses": {
            "200": {
              "description": "List of public plants",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Plant"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "OAuth": {
          "type": "oauth2",
          "description": "OAuth authentication for plant operations",
          "flows": {
            "authorizationCode": {
              "authorizationUrl": "https://api.example.com/oauth/authorize",
              "tokenUrl": "https://api.example.com/oauth/token",
              "scopes": {
                "read:plants": "Read access to plant information",
                "write:plants": "Write access to plant operations"
              }
            }
          }
        },
        "ApiKeyAuth": {
          "type": "apiKey",
          "in": "header",
          "name": "x-api-key",
          "description": "API key for authentication"
        },
        "OrgApiKeyAuth": {
          "type": "apiKey",
          "in": "header",
          "name": "x-org-api-key",
          "description": "Org-specific API authentication"
        }
      },
      "schemas": {
        "Plant": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "name": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            }
          }
        }
      }
    }
  },
  "settings": {
    "disableExamples": false,
    "discriminatedUnionV2": false,
    "useTitlesAsName": true,
    "optionalAdditionalProperties": true,
    "coerceEnumsToLiterals": true,
    "respectReadonlySchemas": false,
    "respectNullableSchemas": false,
    "onlyIncludeReferencedSchemas": false,
    "inlinePathParameters": false,
    "preserveSchemaIds": false,
    "shouldUseUndiscriminatedUnionsWithLiterals": false,
    "shouldUseIdiomaticRequestNames": false,
    "objectQueryParameters": false,
    "asyncApiNaming": "v1",
    "useBytesForBinaryResponse": false,
    "respectForwardCompatibleEnums": false,
    "additionalPropertiesDefaultsTo": false,
    "typeDatesAsStrings": true,
    "preserveSingleSchemaOneOf": false,
    "inlineAllOfSchemas": false,
    "resolveAliases": false,
    "groupMultiApiEnvironments": false,
    "wrapReferencesToNullableInOptional": true,
    "coerceOptionalSchemasToNullable": true
  }
}