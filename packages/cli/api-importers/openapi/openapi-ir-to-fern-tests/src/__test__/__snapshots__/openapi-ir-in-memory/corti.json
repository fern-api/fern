{
  "type": "openapi",
  "value": {
    "openapi": "3.0.0",
    "info": {
      "title": "Corti API",
      "version": "2.0.0"
    },
    "servers": [
      {
        "url": "https://api.{environment}.corti.app/v2/",
        "variables": {
          "environment": {
            "default": "beta-eu",
            "enum": [
              "us",
              "eu",
              "beta-eu"
            ]
          }
        }
      }
    ],
    "paths": {
      "/interactions/": {
        "get": {
          "responses": {
            "200": {
              "description": " ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseInteractions"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "interactions"
          ],
          "summary": "List All Interactions",
          "description": " Lists all existing interactions. Results can be filtered by encounter status and patient identifier.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Field used to sort interactions. Allowed values: [startedAt, endedAt, updatedAt, lastUpdated]. Default is startedAt.",
              "schema": {
                "type": "string",
                "description": "Field used to sort interactions. Allowed values: [startedAt, endedAt, updatedAt, lastUpdated]. Default is startedAt."
              }
            },
            {
              "name": "direction",
              "in": "query",
              "description": "Sorting order. Allowed values: [asc, desc]. Default is desc.",
              "schema": {
                "type": "string",
                "description": "Sorting order. Allowed values: [asc, desc]. Default is desc."
              }
            },
            {
              "name": "pageSize",
              "in": "query",
              "description": "Number of interactions to return per page. Must be greater than 0. Default is 10.",
              "schema": {
                "type": "integer",
                "format": "int64",
                "description": "Number of interactions to return per page. Must be greater than 0. Default is 10."
              }
            },
            {
              "name": "index",
              "in": "query",
              "description": "Page number to retrieve. Starts at 1. For example, index=2 with pageSize=10 will return interactions 11–20. Must be greater than 0. Default is 1.",
              "schema": {
                "type": "integer",
                "format": "int64",
                "description": "Page number to retrieve. Starts at 1. For example, index=2 with pageSize=10 will return interactions 11–20. Must be greater than 0. Default is 1."
              }
            },
            {
              "name": "encounterStatus",
              "in": "query",
              "description": "The status of the encounter. To filter on multiple statuses, pass the same parameter again.",
              "schema": {
                "type": "string",
                "description": "The status of the encounter. To filter on multiple statuses, pass the same parameter again."
              }
            },
            {
              "name": "patient",
              "in": "query",
              "description": "A unique identifier for the patient. Must be a valid UUID.",
              "schema": {
                "type": "string",
                "description": "A unique identifier for the patient. Must be a valid UUID."
              }
            }
          ]
        },
        "post": {
          "responses": {
            "201": {
              "description": "Returns the newly created interaction with its assigned ID and WebSocket URL for real-time data streaming.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseInteractionCreate"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "interactions"
          ],
          "summary": "Create Interaction",
          "description": " Creates a new interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestInteractionCreate"
                }
              }
            },
            "required": true
          }
        }
      },
      "/interactions/{id}": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns the requested interaction with all associated details.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseInteraction"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "interactions"
          ],
          "summary": "Get Existing Interaction",
          "description": " Retrieves a previously recorded interaction by its unique identifier (interaction ID).",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction to retrieve. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction to retrieve. Must be a valid UUID."
              }
            }
          ]
        },
        "patch": {
          "responses": {
            "200": {
              "description": "A request body containing the fields to update within the interaction.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseInteraction"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "interactions"
          ],
          "summary": "Update Interaction",
          "description": " Modifies an existing interaction by updating specific fields without overwriting the entire record.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction to update. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction to update. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestInteractionUpdate"
                }
              }
            },
            "required": true
          }
        },
        "delete": {
          "responses": {
            "204": {
              "description": "The interaction was successfully deleted. No response body is returned.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "interactions"
          ],
          "summary": "Delete Interaction",
          "description": " Deletes an existing interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction to delete. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction to delete. Must be a valid UUID."
              }
            }
          ]
        }
      },
      "/interactions/{id}/recordings/": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns a list of recording IDs for the interaction.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseRecordingList"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "recordings"
          ],
          "summary": "List Recordings",
          "description": " Retrieve a list of recordings for a given interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which recordings should be retrieved. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which recordings should be retrieved. Must be a valid UUID."
              }
            }
          ]
        },
        "post": {
          "responses": {
            "201": {
              "description": "Returns the recording ID in the response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseRecordingCreate"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "recordings"
          ],
          "summary": "Upload Recording",
          "description": " Upload a recording for a given interaction. There is a maximum limit of 60 minutes in length and 150MB in size for recordings.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which recording should be attributed. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which recording should be attributed. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary",
                  "description": "Recording",
                  "title": "Recording"
                }
              }
            },
            "required": true
          }
        }
      },
      "/interactions/{id}/recordings/{recordingId}": {
        "get": {
          "responses": {
            "200": {
              "description": "Binary content of the recording file.",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "recordings"
          ],
          "summary": "Get Recording",
          "description": " Retrieve a specific recording for a given interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which the recording should be retrieved. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which the recording should be retrieved. Must be a valid UUID."
              }
            },
            {
              "name": "recordingId",
              "in": "path",
              "description": "The unique identifier of the recording to be retrieved. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the recording to be retrieved. Must be a valid UUID."
              }
            }
          ]
        },
        "delete": {
          "responses": {
            "204": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "recordings"
          ],
          "summary": "Delete Recording",
          "description": " Delete a specific recording for a given interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which the recording should be deleted from. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which the recording should be deleted from. Must be a valid UUID."
              }
            },
            {
              "name": "recordingId",
              "in": "path",
              "description": "The unique identifier of the recording to be deleted. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the recording to be deleted. Must be a valid UUID."
              }
            }
          ]
        }
      },
      "/interactions/{id}/transcripts/": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns a list of transcripts associated with the interaction.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseTranscriptListAll"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "transcripts"
          ],
          "summary": "List Transcripts",
          "description": " Retrieves a list of transcripts for a given interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which transcripts should be retrieved. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which transcripts should be retrieved. Must be a valid UUID."
              }
            },
            {
              "name": "sort",
              "in": "query",
              "description": "Describes transcript attribute for sorting",
              "schema": {
                "type": "string",
                "description": "Describes transcript attribute for sorting"
              }
            },
            {
              "name": "direction",
              "in": "query",
              "description": "Describes sorting direction",
              "schema": {
                "type": "string",
                "description": "Describes sorting direction"
              }
            },
            {
              "name": "pageSize",
              "in": "query",
              "description": "The number of transcripts to return. For example, a pageSize of 10 will return a maximum of 10 interactions.",
              "schema": {
                "type": "integer",
                "format": "int64",
                "description": "The number of transcripts to return. For example, a pageSize of 10 will return a maximum of 10 interactions."
              }
            },
            {
              "name": "index",
              "in": "query",
              "description": "The number of transcripts to skip. For example, index=2 with pageSize=10 will skip the first 10 interactions and return 11-20.",
              "schema": {
                "type": "integer",
                "format": "int64",
                "description": "The number of transcripts to skip. For example, index=2 with pageSize=10 will skip the first 10 interactions and return 11-20."
              }
            },
            {
              "name": "full",
              "in": "query",
              "description": "Display full transcripts in listing",
              "schema": {
                "type": "boolean",
                "description": "Display full transcripts in listing"
              }
            }
          ]
        },
        "post": {
          "responses": {
            "201": {
              "description": "Returns the generated transcript, including participant roles and timestamps for each utterance.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseTranscriptCreate"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "transcripts"
          ],
          "summary": "Create Transcript",
          "description": " Creates a new transcript for an interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which the transcript is created. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which the transcript is created. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestTranscriptCreate"
                }
              }
            },
            "required": true
          }
        }
      },
      "/interactions/{id}/transcripts/{transcriptId}": {
        "get": {
          "responses": {
            "200": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseTranscriptCreate"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "transcripts"
          ],
          "summary": "Get Transcript",
          "description": " Retrieves the transcript for a specific interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction containing the transcript. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction containing the transcript. Must be a valid UUID."
              }
            },
            {
              "name": "transcriptId",
              "in": "path",
              "description": "The unique identifier of the transcript to retrieve. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the transcript to retrieve. Must be a valid UUID."
              }
            }
          ]
        },
        "delete": {
          "responses": {
            "204": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "transcripts"
          ],
          "summary": "Delete Transcript",
          "description": " Deletes a specific transcript associated with an interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction to which the transcript belongs. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction to which the transcript belongs. Must be a valid UUID."
              }
            },
            {
              "name": "transcriptId",
              "in": "path",
              "description": "The unique identifier of the transcript to delete. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the transcript to delete. Must be a valid UUID."
              }
            }
          ]
        }
      },
      "/factgroups/": {
        "get": {
          "responses": {
            "200": {
              "description": " ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseDirectusFactGroupsFiltered"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "facts"
          ],
          "summary": "List Fact Groups",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            }
          ]
        }
      },
      "/interactions/{id}/facts/": {
        "get": {
          "responses": {
            "200": {
              "description": "Returns a list of facts associated with the specified interaction.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseFactsList"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "facts"
          ],
          "summary": "List Facts",
          "description": " Retrieves a list of facts for a given interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which facts should be retrieved. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which facts should be retrieved. Must be a valid UUID."
              }
            }
          ]
        },
        "post": {
          "responses": {
            "200": {
              "description": "Returns the created facts, including their unique identifiers and associated metadata.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseFactsCreate"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "facts"
          ],
          "summary": "Add Facts",
          "description": " Adds new facts to an interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction to which the facts belong. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction to which the facts belong. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFactsCreate"
                }
              }
            },
            "required": true
          }
        },
        "patch": {
          "responses": {
            "200": {
              "description": "Returns the list of successfully updated facts.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseFactsUpdate"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "facts"
          ],
          "summary": "Update Facts",
          "description": " Updates multiple facts associated with an interaction. If the interaction `status = \"in progress\"`, the updated facts will be sent to the client over WebSocket.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction for which facts are being updated. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction for which facts are being updated. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFactsUpdate"
                }
              }
            },
            "required": true
          }
        }
      },
      "/interactions/{id}/facts/{factId}": {
        "patch": {
          "responses": {
            "200": {
              "description": "Returns the updated fact, including updated fields.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseFactUpdate"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "facts"
          ],
          "summary": "Update Fact",
          "description": " Updates an existing fact within a specific interaction. If the interaction `status = \"in progress\"`, the updated fact will be sent to the client via WebSocket. To discard a fact, simply set `discarded = true`.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The unique identifier of the interaction to which the fact belongs. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the interaction to which the fact belongs. Must be a valid UUID."
              }
            },
            {
              "name": "factId",
              "in": "path",
              "description": "The unique identifier of the fact to update. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The unique identifier of the fact to update. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestFactUpdate"
                }
              }
            },
            "required": true
          }
        }
      },
      "/interactions/{id}/documents/": {
        "get": {
          "responses": {
            "200": {
              "description": " ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseDocumentList"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "documents"
          ],
          "summary": "List Documents",
          "description": " List Documents",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            }
          ]
        },
        "post": {
          "responses": {
            "201": {
              "description": " ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseDocumentRead"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "documents"
          ],
          "summary": "Generate Document",
          "description": " Generate Document.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDocumentCreate"
                }
              }
            },
            "required": true
          },
          "x-codeSamples": [
            {
              "lang": "text",
              "label": "from Facts",
              "source": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"facts\",\n      \"data\": [\n        {\n          \"text\": \"<string>\",\n          \"group\": \"other\",\n          \"source\": \"core\"\n        }\n      ]\n    }\n  ],\n  \"templateKey\": \"<string>\",\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'"
            },
            {
              "lang": "text",
              "label": "from Transcript",
              "source": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"transcript\",\n      \"data\": {\n        \"channel\": 1,\n        \"end\": 129,\n        \"participant\": 123,\n        \"start\": 20,\n        \"text\": \"<string>\"\n      }\n    }\n  ],\n  \"templateKey\": \"<string>\",\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'"
            },
            {
              "lang": "text",
              "label": "assemble Template",
              "source": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"string\",\n      \"data\": \"<string>\"\n      }\n  ],\n  \"templateKey\": \"<string>\",\n  \"template\": {\n   \"sectionKeys\": [\n      \"<string>\"\n    ],\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'"
            },
            {
              "lang": "text",
              "label": "from string",
              "source": "curl --request POST \\\n  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n  \"context\": [\n    {\n      \"type\": \"string\",\n      \"data\": \"<string>\"\n    }\n  ],\n  \"templateKey\": \"<string>\",\n  \"name\": \"<string>\",\n  \"outputLanguage\": \"<string>\"\n}'"
            }
          ]
        }
      },
      "/interactions/{id}/documents/{documentId}": {
        "get": {
          "responses": {
            "200": {
              "description": " ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseDocumentRead"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "documents"
          ],
          "summary": "Get Document",
          "description": " Get Document.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            },
            {
              "name": "documentId",
              "in": "path",
              "description": "The document ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The document ID representing the context for the request. Must be a valid UUID."
              }
            },
            {
              "name": "context",
              "in": "query",
              "description": "If true the response contains the context used to generated the document, such as fact, transcript or string.",
              "example": "false",
              "schema": {
                "type": "boolean",
                "description": "If true the response contains the context used to generated the document, such as fact, transcript or string."
              }
            }
          ]
        },
        "patch": {
          "responses": {
            "200": {
              "description": " ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseDocumentRead"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "documents"
          ],
          "summary": "Update Document",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            },
            {
              "name": "documentId",
              "in": "path",
              "description": "The document ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The document ID representing the context for the request. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDocumentUpdate"
                }
              }
            },
            "required": true
          }
        },
        "delete": {
          "responses": {
            "204": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "documents"
          ],
          "summary": "Delete Document",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            },
            {
              "name": "documentId",
              "in": "path",
              "description": "The document ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The document ID representing the context for the request. Must be a valid UUID."
              }
            }
          ]
        }
      },
      "/templateSections/": {
        "get": {
          "responses": {
            "200": {
              "description": "List of Template Sections",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseAllTemplateSections"
                  }
                }
              }
            },
            "401": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "templates"
          ],
          "summary": "List Template Sections",
          "description": " Retrieves a list of template sections with optional filters for organization and language.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "org",
              "in": "query",
              "description": "Filter template sections by organization.",
              "schema": {
                "type": "string",
                "description": "Filter template sections by organization."
              }
            },
            {
              "name": "lang",
              "in": "query",
              "description": "Filter template sections by language.",
              "schema": {
                "type": "string",
                "description": "Filter template sections by language."
              }
            }
          ]
        }
      },
      "/templates/": {
        "get": {
          "responses": {
            "200": {
              "description": "List of Templates",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseAllTemplates"
                  }
                }
              }
            },
            "401": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "templates"
          ],
          "summary": "List Templates",
          "description": " Retrieves a list of templates with optional filters for organization, language, and status.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "org",
              "in": "query",
              "description": "Filter templates by organization.",
              "schema": {
                "type": "string",
                "description": "Filter templates by organization."
              }
            },
            {
              "name": "lang",
              "in": "query",
              "description": "Filter templates by language.",
              "schema": {
                "type": "string",
                "description": "Filter templates by language."
              }
            },
            {
              "name": "templateStatus",
              "in": "query",
              "description": "Filter templates by their status.",
              "schema": {
                "type": "string",
                "description": "Filter templates by their status."
              }
            }
          ]
        }
      },
      "/templates/{key}": {
        "get": {
          "responses": {
            "200": {
              "description": "Template by key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TemplateFiltered"
                  }
                }
              }
            },
            "401": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "templates"
          ],
          "summary": "Get Template",
          "description": " Retrieves template by key.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "key",
              "in": "path",
              "description": "The key of the template",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The key of the template"
              }
            }
          ]
        }
      },
      "/interactions/{id}/codes/": {
        "get": {
          "responses": {
            "200": {
              "description": "List of associated codes.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseCodesList"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "codes"
          ],
          "summary": "List Codes",
          "description": " Get all codes associated with an interaction.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            }
          ]
        },
        "post": {
          "responses": {
            "200": {
              "description": "List of predicted codes.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseCodesList"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "502": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "codes"
          ],
          "summary": "Generate Codes",
          "description": " Generate Codes.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestCodesPredict"
                }
              }
            },
            "required": true
          }
        },
        "put": {
          "responses": {
            "200": {
              "description": "Updated list of selected codes.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseCodesList"
                  }
                }
              }
            },
            "400": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "codes"
          ],
          "summary": "Select Codes",
          "description": " Mark provided codes as selected.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestCodesUpdate"
                }
              }
            },
            "required": true
          }
        }
      },
      "/private/v2/align/": {
        "post": {
          "responses": {
            "200": {
              "description": "Alignment results with percentage and optionally aligned segments.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseAlign"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - The request was malformed or missing required parameters.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Authentication failed or user is not authorized.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error - An error occurred on the server.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "alignment"
          ],
          "summary": "Alignment Model",
          "description": " Compares two reference texts, a 'source' document and a 'target' document, and returns a percentage alignment, optionally including aligned segments.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestAlign"
                }
              }
            },
            "required": true
          }
        }
      },
      "/private/v2/interactions/{id}/classification/binary/": {
        "post": {
          "responses": {
            "200": {
              "description": " ",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseClassificationCreate"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "classification"
          ],
          "summary": "Classify Binary",
          "description": " This endpoint is used for binary classification tasks: comparing two resources, where a boolean output is expected.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestClassificationCreate"
                }
              }
            },
            "required": true
          }
        }
      },
      "/private/v2/interactions/{id}/query/": {
        "post": {
          "responses": {
            "200": {
              "description": "SSE streaming response with results from multiple tools. The initial response includes a thread ID for continuing the conversation. (`text/event-stream`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseQuery"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - The request was malformed or missing required parameters.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Authentication failed or user is not authorized.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error - An error occurred on the server.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NoContent"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "contextual"
          ],
          "summary": "Chat",
          "description": " Allows users to ask questions or make queries in the context of a specific interaction. This endpoint supports Server-Sent Events (SSE) for real-time updates and responses. The thread ID, which is returned with the initial query, allows users to ask follow-up questions or refine their queries. This endpoint is designed to facilitate dynamic and context-aware conversations, making it suitable for applications such as chatbots, virtual assistants, research tools and workflow augmentation.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            },
            {
              "name": "id",
              "in": "path",
              "description": "The interaction ID representing the context for the request. Must be a valid UUID.",
              "required": true,
              "schema": {
                "type": "string",
                "description": "The interaction ID representing the context for the request. Must be a valid UUID."
              }
            },
            {
              "name": "threadId",
              "in": "query",
              "description": "The thread ID representing the context for the request. Must be a valid UUID.",
              "schema": {
                "type": "string",
                "description": "The thread ID representing the context for the request. Must be a valid UUID."
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestQuery"
                }
              }
            },
            "required": true
          }
        }
      },
      "/private/v2/tools/guidelines/": {
        "post": {
          "responses": {
            "200": {
              "description": "Returns a summary and a list of relevant sources.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseGuidelines"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "contextual"
          ],
          "summary": "Retrieval",
          "description": " Access and unlock knowledge bases and guidelines tools queries, documents, or interactions. This endpoint is designed to facilitate the retrieval of relevant information from various sources, enabling users to access and utilize knowledge bases and guidelines effectively. The response includes a summary and a list of relevant sources, providing users with a comprehensive overview of the retrieved information.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestGuidelines"
                }
              }
            },
            "required": true
          }
        }
      },
      "/tools/question-prompts/": {
        "post": {
          "responses": {
            "200": {
              "description": "Returns an array of suggested questions.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseQuestionPrompts"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "contextual"
          ],
          "summary": "Predictive Prompt",
          "description": " Provides a list of suggested questions based on a query and/or interaction context.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestQuestionPrompts"
                }
              }
            },
            "required": true
          }
        }
      },
      "/tools/mentions/": {
        "post": {
          "responses": {
            "200": {
              "description": "Returns an array of mentions found in the reference texts.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseMention"
                  }
                }
              }
            },
            "504": {
              "description": "RFC9457",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "tags": [
            "explainability"
          ],
          "summary": "Explainability Model",
          "description": " Finds mentions of defined content within a set of reference texts.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestMention"
                }
              }
            },
            "required": true
          }
        }
      },
      "/swagger/": {
        "get": {
          "responses": {
            "200": {
              "description": "JSON representation of the API documentation",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "tags": [
            "swagger"
          ],
          "summary": "Swagger JSON",
          "description": " JSON representation of the API documentation.",
          "parameters": [
            {
              "$ref": "#/components/parameters/Tenant-Name"
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "AdditionalCode": {
          "type": "object",
          "properties": {
            "subsetName": {
              "type": "string",
              "description": "Category or subset of the additional code",
              "example": "orsakskoder"
            },
            "code": {
              "type": "string",
              "description": "The additional code",
              "example": "W0231"
            },
            "description": {
              "type": "string",
              "description": "Description of the additional code"
            },
            "state": {
              "type": "object",
              "description": "State of the additional code",
              "$ref": "#/components/schemas/CodesState"
            }
          }
        },
        "AlignedSegment": {
          "type": "object",
          "properties": {
            "targetSegment": {
              "type": "object",
              "$ref": "#/components/schemas/TargetSegment"
            },
            "sourceReference": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The content of the matching segment in the source document."
                  },
                  "range": {
                    "type": "array",
                    "description": "Start and end indices of the segment in the source document.",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "alignmentPercentage": {
              "type": "number",
              "description": "Alignment percentage between the target and source segment."
            }
          }
        },
        "ClassificationResult": {
          "type": "object",
          "properties": {
            "prediction": {
              "type": "string"
            }
          }
        },
        "CodesContext": {
          "type": "object",
          "required": [
            "type",
            "data"
          ],
          "properties": {
            "type": {
              "$ref": "#/components/schemas/CodesContextTypeEnum"
            },
            "data": {
              "type": "string"
            },
            "metadata": {
              "type": "string"
            }
          }
        },
        "CodesContextType": {
          "type": "string"
        },
        "CodesContextTypeEnum": {
          "type": "string",
          "enum": [
            "string",
            "documentId"
          ]
        },
        "CodesState": {
          "type": "object",
          "properties": {
            "isSelected": {
              "type": "boolean",
              "description": "Indicates whether the code is selected"
            },
            "source": {
              "description": "Source of the predicted code",
              "$ref": "#/components/schemas/V2SourceEnum"
            }
          }
        },
        "CommonHeaders": {
          "type": "object",
          "properties": {
            "Tenant-Name": {
              "type": "string",
              "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
              "example": "copiloteu"
            }
          }
        },
        "DirectusFactGroupFiltered": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "key": {
              "type": "string"
            },
            "translations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "languages_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "DirectusFactGroupTranslationFiltered": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "languages_id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            }
          }
        },
        "DocumentContext": {
          "type": "object",
          "required": [
            "type",
            "data"
          ],
          "properties": {
            "type": {
              "description": "The type of context data.",
              "$ref": "#/components/schemas/V2DocumentContextTypeEnum"
            },
            "data": {
              "description": "The actual data, which can be an array of facts, a transcript, or a string.",
              "$ref": "#/components/schemas/DocumentContextData"
            }
          }
        },
        "DocumentContextData": {
          "oneOf": [
            {
              "title": "Facts",
              "description": "Facts",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FactContext"
              }
            },
            {
              "title": "Transcript",
              "description": "Transcript",
              "type": "object",
              "$ref": "#/components/schemas/Transcript"
            },
            {
              "title": "Text",
              "description": "Text",
              "type": "string"
            }
          ]
        },
        "DocumentSection": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "Document section key"
            },
            "name": {
              "type": "string",
              "description": "Name or heading of the document section within the generated document"
            },
            "text": {
              "type": "string",
              "description": "Contents of the document section within the generated document"
            },
            "sort": {
              "type": "integer",
              "description": "Order of the document section within the generated document"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The original timestamp when the document section was created."
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the document section was last updated."
            }
          }
        },
        "DocumentTemplate": {
          "type": "object",
          "properties": {
            "sectionIds": {
              "type": "array",
              "format": "uuid",
              "description": "An array of section IDs.",
              "items": {
                "$ref": "#/components/schemas/UUID"
              }
            },
            "sectionKeys": {
              "type": "array",
              "description": "An array of section keys.",
              "items": {
                "type": "string"
              }
            },
            "documentName": {
              "type": "string",
              "description": "The name of the document."
            },
            "additionalInstructions": {
              "type": "string",
              "description": "Any additional instructions to be considered during document generation."
            }
          }
        },
        "Encounter": {
          "type": "object",
          "required": [
            "identifier",
            "status",
            "type",
            "period"
          ],
          "properties": {
            "identifier": {
              "type": "string",
              "description": "A unique identifier for the encounter, essential for tracking and referencing specific patient interactions."
            },
            "status": {
              "description": "Indicates the current state of the encounter, crucial for understanding the progression and current state of care.",
              "$ref": "#/components/schemas/V2EncounterStatusEnum"
            },
            "type": {
              "description": "The specific type of encounter, providing context about the nature and setting of the patient interaction.",
              "$ref": "#/components/schemas/V2EncounterTypeEnum"
            },
            "period": {
              "type": "object",
              "description": "The time period during which the encounter takes place.",
              "$ref": "#/components/schemas/EncounterPeriod"
            },
            "title": {
              "type": "string",
              "description": "A readable name for the interaction"
            }
          }
        },
        "EncounterPeriod": {
          "type": "object",
          "required": [
            "startedAt"
          ],
          "properties": {
            "startedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The start date/time of the encounter. (UTC)"
            },
            "endedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The end date/time of the encounter. (UTC)"
            }
          }
        },
        "ErrorResponse": {
          "type": "object",
          "properties": {
            "requestid": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "status": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            },
            "details": {
              "type": "string"
            },
            "instance": {
              "type": "string"
            }
          }
        },
        "FactContext": {
          "type": "object",
          "required": [
            "text",
            "source"
          ],
          "properties": {
            "text": {
              "type": "string",
              "description": "The text of the fact."
            },
            "group": {
              "type": "string",
              "description": "The group to which the fact belongs.",
              "example": "Others"
            },
            "source": {
              "description": "The source of the fact. 'USER' refers to facts provided by the user, while 'SYSTEM' refers to system-generated facts (e.g., EHR).",
              "$ref": "#/components/schemas/V2SourceEnum"
            }
          }
        },
        "MentionData": {
          "type": "object",
          "properties": {
            "range": {
              "type": "array",
              "description": "Character range for document type.",
              "items": {
                "type": "integer"
              }
            },
            "time": {
              "type": "array",
              "description": "Time range in seconds for transcript type.",
              "items": {
                "type": "integer"
              }
            },
            "snippet": {
              "type": "string",
              "description": "Text snippet for the mention."
            },
            "documentId": {
              "type": "string",
              "format": "uuid",
              "description": "The document ID if applicable.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "utteranceId": {
              "type": "string",
              "format": "uuid",
              "description": "The utterance ID if applicable.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp for transcript mentions."
            }
          }
        },
        "NoContent": {
          "type": "object"
        },
        "Patient": {
          "type": "object",
          "required": [
            "identifier"
          ],
          "properties": {
            "identifier": {
              "type": "string",
              "description": "FHIR reference to patient identifier."
            },
            "name": {
              "type": "string",
              "description": "FHIR reference to Text representation of the full name."
            },
            "gender": {
              "description": "FHIR reference to patient gender.",
              "$ref": "#/components/schemas/V2GenderEnum"
            },
            "birthDate": {
              "type": "string",
              "format": "date-time",
              "description": "FHIR reference to patient birth date."
            },
            "pronouns": {
              "type": "string",
              "description": "FHIR reference to patient extension Individual Pronouns."
            }
          }
        },
        "QueryData": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "For guidelines, a summary of the response."
            },
            "sources": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "favicon": {
                    "type": "string",
                    "description": "The favicon URL of the source."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the source."
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL of the source."
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the source (e.g., PDF, Web)."
                  },
                  "description": {
                    "type": "string",
                    "description": "A brief description of the source."
                  }
                }
              }
            },
            "mentions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of mention (e.g., transcript, document)."
                  },
                  "data": {
                    "type": "object",
                    "$ref": "#/components/schemas/MentionData"
                  }
                }
              }
            },
            "response": {
              "type": "string",
              "description": "General chat response in markdown format."
            },
            "rewrittenText": {
              "type": "string",
              "description": "For document rewrites, the rewritten text in markdown format."
            },
            "queries": {
              "type": "array",
              "description": "Related or follow-up queries.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "QueryMention": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of mention (e.g., transcript, document)."
            },
            "data": {
              "type": "object",
              "$ref": "#/components/schemas/MentionData"
            }
          }
        },
        "QuerySource": {
          "type": "object",
          "properties": {
            "favicon": {
              "type": "string",
              "description": "The favicon URL of the source."
            },
            "title": {
              "type": "string",
              "description": "The title of the source."
            },
            "url": {
              "type": "string",
              "description": "The URL of the source."
            },
            "type": {
              "type": "string",
              "description": "The type of the source (e.g., PDF, Web)."
            },
            "description": {
              "type": "string",
              "description": "A brief description of the source."
            }
          }
        },
        "RequestAlign": {
          "type": "object",
          "required": [
            "sourceDocument",
            "targetDocument"
          ],
          "properties": {
            "sourceDocument": {
              "type": "string",
              "description": "The content of the source document."
            },
            "targetDocument": {
              "type": "string",
              "description": "The content of the target document."
            },
            "compareSegments": {
              "type": "boolean",
              "description": "Indicates if segments from the source should be compared with the target.",
              "example": false
            }
          }
        },
        "RequestClassificationCreate": {
          "type": "object",
          "properties": {
            "inputs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "taskId": {
              "type": "string",
              "format": "uuid",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            }
          }
        },
        "RequestCodeUpdate": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The medical code to update",
              "example": "W0231"
            },
            "additionalCodes": {
              "type": "array",
              "description": "List of additional codes",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "RequestCodesPredict": {
          "type": "object",
          "required": [
            "modelName",
            "context"
          ],
          "properties": {
            "modelName": {
              "type": "string",
              "description": "The model name used for code predictions",
              "example": "\"geography_modelName (Latest)\" | \"geography_modelName_version\""
            },
            "context": {
              "type": "object",
              "description": "Context object containing type and data",
              "$ref": "#/components/schemas/CodesContext"
            },
            "existingCodes": {
              "type": "array",
              "description": "List of pre-selected codes before interaction",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "RequestCodesUpdate": {
          "type": "object",
          "properties": {
            "finalCodes": {
              "type": "array",
              "description": "List of final codes",
              "items": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The medical code to update",
                    "example": "W0231"
                  },
                  "additionalCodes": {
                    "type": "array",
                    "description": "List of additional codes",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "RequestDocumentCreate": {
          "type": "object",
          "required": [
            "context",
            "templateKey",
            "outputLanguage"
          ],
          "properties": {
            "context": {
              "type": "array",
              "description": "An array of context objects.",
              "items": {
                "type": "object",
                "required": [
                  "type",
                  "data"
                ],
                "properties": {
                  "type": {
                    "description": "The type of context data.",
                    "$ref": "#/components/schemas/V2DocumentContextTypeEnum"
                  },
                  "data": {
                    "description": "The actual data, which can be an array of facts, a transcript, or a string.",
                    "$ref": "#/components/schemas/DocumentContextData"
                  }
                }
              }
            },
            "templateKey": {
              "type": "string",
              "description": "The key of the template that informs on what kind of document is to be generated."
            },
            "template": {
              "type": "object",
              "description": "Template details if the template should be generated during the request.",
              "$ref": "#/components/schemas/DocumentTemplate"
            },
            "name": {
              "type": "string",
              "description": "An optional name for the document."
            },
            "modelName": {
              "type": "string",
              "example": "\"model_name (Latest)\" | \"model_name_version\""
            },
            "outputLanguage": {
              "type": "string",
              "description": "The language in which the document will be generated. Check https://docs.corti.ai/about/languages for more."
            }
          }
        },
        "RequestDocumentSectionUpdate": {
          "type": "object",
          "required": [
            "key"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "text": {
              "type": "string"
            },
            "sort": {
              "type": "integer"
            }
          }
        },
        "RequestDocumentUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "An optional name for the document."
            },
            "sections": {
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "text": {
                    "type": "string"
                  },
                  "sort": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "RequestEncounterPeriodUpdate": {
          "type": "object",
          "required": [
            "startedAt"
          ],
          "properties": {
            "startedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The UTC timestamp indicating when the encounter started."
            },
            "endedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The UTC timestamp indicating when the encounter ended."
            }
          }
        },
        "RequestEncounterUpdate": {
          "type": "object",
          "properties": {
            "identifier": {
              "type": "string",
              "description": "A unique identifier for the encounter."
            },
            "status": {
              "description": "The current status of the encounter.",
              "$ref": "#/components/schemas/V2EncounterStatusEnum"
            },
            "type": {
              "description": "The type of encounter.",
              "$ref": "#/components/schemas/V2EncounterTypeEnum"
            },
            "period": {
              "type": "object",
              "description": "Details of when the encounter took place, including start and optional end timestamps with timezone offsets.",
              "$ref": "#/components/schemas/RequestEncounterPeriodUpdate"
            },
            "title": {
              "type": "string",
              "description": "A title providing context about the encounter."
            }
          }
        },
        "RequestFactCreate": {
          "type": "object",
          "required": [
            "text",
            "group"
          ],
          "properties": {
            "text": {
              "type": "string",
              "description": "The text content of the fact."
            },
            "group": {
              "type": "string",
              "description": "The key identifying the group to which the fact belongs.",
              "example": "other"
            },
            "source": {
              "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
              "$ref": "#/components/schemas/V2SourceEnum"
            }
          }
        },
        "RequestFactUpdate": {
          "type": "object",
          "required": [
            "text",
            "source"
          ],
          "properties": {
            "text": {
              "type": "string",
              "description": "The updated text of the fact."
            },
            "group": {
              "type": "string",
              "description": "The updated group key for the fact.",
              "example": "other"
            },
            "source": {
              "description": "The updated origin of the fact.",
              "$ref": "#/components/schemas/V2SourceEnum"
            },
            "isDiscarded": {
              "type": "boolean",
              "description": "Indicates whether the fact should be marked as discarded."
            }
          }
        },
        "RequestFactsCreate": {
          "type": "object",
          "required": [
            "facts"
          ],
          "properties": {
            "facts": {
              "type": "array",
              "description": "A list of facts to be created.",
              "items": {
                "type": "object",
                "required": [
                  "text",
                  "group"
                ],
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The text content of the fact."
                  },
                  "group": {
                    "type": "string",
                    "description": "The key identifying the group to which the fact belongs.",
                    "example": "other"
                  },
                  "source": {
                    "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                    "$ref": "#/components/schemas/V2SourceEnum"
                  }
                }
              }
            }
          }
        },
        "RequestFactsUpdate": {
          "type": "object",
          "required": [
            "facts"
          ],
          "properties": {
            "facts": {
              "type": "array",
              "description": "A list of facts to be updated.",
              "items": {
                "type": "object",
                "required": [
                  "factId"
                ],
                "properties": {
                  "factId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the fact to be updated.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "isDiscarded": {
                    "type": "boolean",
                    "description": "Indicates whether the fact should be discarded."
                  },
                  "text": {
                    "type": "string",
                    "description": "The updated text content of the fact."
                  },
                  "group": {
                    "type": "string",
                    "description": "The updated group key for the fact.",
                    "example": "other"
                  }
                }
              }
            }
          }
        },
        "RequestFactsUpdateSingle": {
          "type": "object",
          "required": [
            "factId"
          ],
          "properties": {
            "factId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the fact to be updated.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "isDiscarded": {
              "type": "boolean",
              "description": "Indicates whether the fact should be discarded."
            },
            "text": {
              "type": "string",
              "description": "The updated text content of the fact."
            },
            "group": {
              "type": "string",
              "description": "The updated group key for the fact.",
              "example": "other"
            }
          }
        },
        "RequestGuidelines": {
          "type": "object",
          "required": [
            "query",
            "context",
            "sourceIds"
          ],
          "properties": {
            "query": {
              "type": "string",
              "description": "The text-based query from the user."
            },
            "context": {
              "type": "array",
              "description": "An array of contexts, such as documents or relevant segments.",
              "items": {
                "type": "string"
              }
            },
            "sourceIds": {
              "type": "array",
              "format": "uuid",
              "description": "An array of source IDs to narrow down the search.",
              "items": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          }
        },
        "RequestInteractionCreate": {
          "type": "object",
          "required": [
            "encounter"
          ],
          "properties": {
            "assignedUserId": {
              "type": "string",
              "format": "uuid",
              "description": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "encounter": {
              "type": "object",
              "description": "Details about the encounter.",
              "$ref": "#/components/schemas/Encounter"
            },
            "patient": {
              "type": "object",
              "description": "Optional patient details.",
              "$ref": "#/components/schemas/Patient"
            }
          }
        },
        "RequestInteractionUpdate": {
          "type": "object",
          "properties": {
            "assignedUserId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the medical professional responsible for this interaction.  If nulled, automatically set to a uuid.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "encounter": {
              "type": "object",
              "description": "Details of the encounter being updated.",
              "$ref": "#/components/schemas/RequestEncounterUpdate"
            },
            "patient": {
              "type": "object",
              "description": "Patient-related updates.",
              "$ref": "#/components/schemas/RequestPatientUpdate"
            }
          }
        },
        "RequestMention": {
          "type": "object",
          "required": [
            "query",
            "referenceTexts"
          ],
          "properties": {
            "query": {
              "type": "string",
              "description": "The text-based query from the user."
            },
            "referenceTexts": {
              "type": "array",
              "description": "An array of reference texts where the mentions will be searched.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "RequestParticipantCreate": {
          "type": "object",
          "required": [
            "channel",
            "role"
          ],
          "properties": {
            "channel": {
              "type": "integer",
              "description": "The audio channel to associate with a participant role."
            },
            "role": {
              "$ref": "#/components/schemas/V2TranscriptParticipantRoleEnum"
            }
          }
        },
        "RequestPatientUpdate": {
          "type": "object",
          "properties": {
            "identifier": {
              "type": "string",
              "description": "FHIR reference to patient identifier."
            },
            "name": {
              "type": "string",
              "description": "FHIR reference to Text representation of the full name."
            },
            "gender": {
              "description": "FHIR reference to patient gender.",
              "$ref": "#/components/schemas/V2GenderEnum"
            },
            "birthDate": {
              "type": "string",
              "format": "date-time",
              "description": "FHIR reference to patient birth date."
            },
            "pronouns": {
              "type": "string",
              "description": "FHIR reference to patient extension Individual Pronouns."
            }
          }
        },
        "RequestQuery": {
          "type": "object",
          "required": [
            "query"
          ],
          "properties": {
            "query": {
              "type": "string",
              "description": "The text-based query from the user.",
              "example": "What are the key points from the latest guidelines?"
            },
            "queryContext": {
              "type": "string",
              "description": "A specific document or focus context for the query.",
              "example": "doc123"
            },
            "focusContexts": {
              "type": "array",
              "description": "A list of additional focus contexts or documents.",
              "items": {
                "type": "string"
              },
              "example": [
                "doc456",
                "doc789"
              ]
            }
          }
        },
        "RequestQuestionPrompts": {
          "type": "object",
          "required": [
            "context"
          ],
          "properties": {
            "context": {
              "type": "array",
              "description": "The context in which the query is being made.",
              "items": {
                "type": "string"
              }
            },
            "query": {
              "type": "string",
              "description": "The query for which the questions are being generated (optional)."
            }
          }
        },
        "RequestTranscriptAnonymize": {
          "type": "object",
          "properties": {
            "inputLanguage": {
              "type": "string"
            },
            "transcript": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "RequestTranscriptCreate": {
          "type": "object",
          "required": [
            "recordingId",
            "primaryLanguage",
            "modelName"
          ],
          "properties": {
            "recordingId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier for the recording.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "primaryLanguage": {
              "type": "string",
              "description": "The primary spoken language of the recording. Check https://docs.corti.ai/about/languages for more."
            },
            "isDictation": {
              "type": "boolean",
              "description": "Indicates whether spoken dictation commands should be converted to punctuation (e.g., 'comma' → ',')."
            },
            "isMultichannel": {
              "type": "boolean",
              "description": "If true, each audio channel is transcribed separately."
            },
            "diarize": {
              "type": "boolean",
              "description": "If true, separates speakers within an audio channel returning incrementing ids for transcript segments."
            },
            "participants": {
              "type": "array",
              "description": "An array of participants, each specifying a role and an assigned audio channel in the recording. Leave empty when shouldDiarize: true",
              "items": {
                "type": "object",
                "required": [
                  "channel",
                  "role"
                ],
                "properties": {
                  "channel": {
                    "type": "integer",
                    "description": "The audio channel to associate with a participant role."
                  },
                  "role": {
                    "$ref": "#/components/schemas/V2TranscriptParticipantRoleEnum"
                  }
                }
              }
            },
            "modelName": {
              "type": "string",
              "description": "Can be \"base\", \"enhanced\", \"premier\". By default, only the highest tier is accessible. Check https://docs.corti.ai/about/languages for more."
            }
          }
        },
        "ResponseAlign": {
          "type": "object",
          "properties": {
            "alignmentPercentage": {
              "type": "number",
              "description": "Alignment percentage between the source and target documents."
            },
            "alignedSegments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "targetSegment": {
                    "type": "object",
                    "$ref": "#/components/schemas/TargetSegment"
                  },
                  "sourceReference": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string",
                          "description": "The content of the matching segment in the source document."
                        },
                        "range": {
                          "type": "array",
                          "description": "Start and end indices of the segment in the source document.",
                          "items": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "alignmentPercentage": {
                    "type": "number",
                    "description": "Alignment percentage between the target and source segment."
                  }
                }
              }
            }
          }
        },
        "ResponseAllTemplateSections": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "description": "List of filtered template sections",
              "items": {
                "$ref": "#/components/schemas/Section"
              }
            }
          }
        },
        "ResponseAllTemplates": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "description": "List of filtered templates",
              "items": {
                "type": "object",
                "properties": {
                  "date_updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the template was updated."
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the template"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the template"
                  },
                  "key": {
                    "type": "string",
                    "description": "Unique key for the template"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the template."
                  },
                  "template_sections": {
                    "type": "array",
                    "description": "List of sections included in the template",
                    "items": {
                      "type": "object",
                      "properties": {
                        "sort": {
                          "type": "integer",
                          "description": "Sort order of the section within the template"
                        },
                        "sections_id": {
                          "type": "object",
                          "description": "The section details",
                          "$ref": "#/components/schemas/Section"
                        }
                      }
                    }
                  },
                  "translations": {
                    "type": "array",
                    "description": "Available translations for the template",
                    "items": {
                      "type": "object",
                      "properties": {
                        "languages_id": {
                          "type": "string",
                          "description": "Language identifier"
                        },
                        "name": {
                          "type": "string",
                          "description": "Localized name of the template"
                        },
                        "description": {
                          "type": "string",
                          "description": "Localized description of the template"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "ResponseClassificationCreate": {
          "type": "object",
          "properties": {
            "result": {
              "type": "object",
              "$ref": "#/components/schemas/ClassificationResult"
            }
          }
        },
        "ResponseCodesList": {
          "type": "object",
          "properties": {
            "codes": {
              "type": "array",
              "description": "List of medical codes",
              "items": {
                "type": "object",
                "properties": {
                  "system": {
                    "type": "string",
                    "description": "The coding system used",
                    "example": "ICD-10"
                  },
                  "code": {
                    "type": "string",
                    "description": "The medical code",
                    "example": "T933"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the medical code"
                  },
                  "state": {
                    "type": "object",
                    "description": "State of the code",
                    "$ref": "#/components/schemas/CodesState"
                  },
                  "additionalCodes": {
                    "type": "array",
                    "description": "List of additional codes",
                    "items": {
                      "type": "object",
                      "properties": {
                        "subsetName": {
                          "type": "string",
                          "description": "Category or subset of the additional code",
                          "example": "orsakskoder"
                        },
                        "code": {
                          "type": "string",
                          "description": "The additional code",
                          "example": "W0231"
                        },
                        "description": {
                          "type": "string",
                          "description": "Description of the additional code"
                        },
                        "state": {
                          "type": "object",
                          "description": "State of the additional code",
                          "$ref": "#/components/schemas/CodesState"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "ResponseCodesRead": {
          "type": "object",
          "properties": {
            "system": {
              "type": "string",
              "description": "The coding system used",
              "example": "ICD-10"
            },
            "code": {
              "type": "string",
              "description": "The medical code",
              "example": "T933"
            },
            "description": {
              "type": "string",
              "description": "Description of the medical code"
            },
            "state": {
              "type": "object",
              "description": "State of the code",
              "$ref": "#/components/schemas/CodesState"
            },
            "additionalCodes": {
              "type": "array",
              "description": "List of additional codes",
              "items": {
                "type": "object",
                "properties": {
                  "subsetName": {
                    "type": "string",
                    "description": "Category or subset of the additional code",
                    "example": "orsakskoder"
                  },
                  "code": {
                    "type": "string",
                    "description": "The additional code",
                    "example": "W0231"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the additional code"
                  },
                  "state": {
                    "type": "object",
                    "description": "State of the additional code",
                    "$ref": "#/components/schemas/CodesState"
                  }
                }
              }
            }
          }
        },
        "ResponseDirectusFactGroupsFiltered": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "key": {
                    "type": "string"
                  },
                  "translations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "languages_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "ResponseDocumentList": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseDocumentRead"
              }
            }
          }
        },
        "ResponseDocumentRead": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique ID of the generated document",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "name": {
              "type": "string",
              "description": "Name of the generated document"
            },
            "templateRef": {
              "type": "string",
              "description": "Reference for the used template"
            },
            "isStream": {
              "type": "boolean"
            },
            "sections": {
              "type": "array",
              "description": "Individual document sections",
              "items": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "Document section key"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name or heading of the document section within the generated document"
                  },
                  "text": {
                    "type": "string",
                    "description": "Contents of the document section within the generated document"
                  },
                  "sort": {
                    "type": "integer",
                    "description": "Order of the document section within the generated document"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original timestamp when the document section was created."
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the document section was last updated."
                  }
                }
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The original timestamp when the document was created."
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the document was last updated."
            },
            "outputLanguage": {
              "type": "string",
              "description": "The language in which the document will be generated. Check https://docs.corti.ai/about/languages for more."
            }
          }
        },
        "ResponseFact": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the fact.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "text": {
              "type": "string",
              "description": "The text content of the fact."
            },
            "group": {
              "type": "string",
              "description": "The key identifying the group to which the fact belongs.",
              "example": "other"
            },
            "groupId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the group to which the fact belongs.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "isDiscarded": {
              "type": "boolean",
              "description": "Indicates whether the fact has been marked as discarded."
            },
            "source": {
              "description": "The origin of the fact.",
              "$ref": "#/components/schemas/V2SourceEnum"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the fact was created."
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the fact was last updated."
            },
            "evidence": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The category of evidence."
                  },
                  "reference": {
                    "type": "string",
                    "description": "A reference that supports the fact."
                  },
                  "quote": {
                    "type": "string",
                    "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact."
                  }
                }
              }
            }
          }
        },
        "ResponseFactCreate": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the newly created fact.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "text": {
              "type": "string",
              "description": "The textual content of the created fact."
            },
            "group": {
              "type": "string",
              "description": "The group key categorizing the fact.",
              "example": "other"
            },
            "groupId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the group to which the fact belongs.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "source": {
              "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
              "$ref": "#/components/schemas/V2SourceEnum"
            },
            "isDiscarded": {
              "type": "boolean",
              "description": "Indicates whether the fact has been marked as discarded."
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the fact was last updated."
            }
          }
        },
        "ResponseFactEvidence": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The category of evidence."
            },
            "reference": {
              "type": "string",
              "description": "A reference that supports the fact."
            },
            "quote": {
              "type": "string",
              "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact."
            }
          }
        },
        "ResponseFactUpdate": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the fact.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "text": {
              "type": "string",
              "description": "The updated text content of the fact."
            },
            "group": {
              "type": "string",
              "description": "The updated group key to which the fact belongs.",
              "example": "other"
            },
            "groupId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the associated group.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "source": {
              "description": "The updated origin of the fact.",
              "$ref": "#/components/schemas/V2SourceEnum"
            },
            "isDiscarded": {
              "type": "boolean",
              "description": "Indicates whether the fact is marked as discarded."
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The original timestamp when the fact was created."
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the fact was last updated."
            }
          }
        },
        "ResponseFactsCreate": {
          "type": "object",
          "properties": {
            "facts": {
              "type": "array",
              "description": "A list of successfully created facts.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the newly created fact.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "text": {
                    "type": "string",
                    "description": "The textual content of the created fact."
                  },
                  "group": {
                    "type": "string",
                    "description": "The group key categorizing the fact.",
                    "example": "other"
                  },
                  "groupId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the group to which the fact belongs.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "source": {
                    "description": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                    "$ref": "#/components/schemas/V2SourceEnum"
                  },
                  "isDiscarded": {
                    "type": "boolean",
                    "description": "Indicates whether the fact has been marked as discarded."
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the fact was last updated."
                  }
                }
              }
            }
          }
        },
        "ResponseFactsList": {
          "type": "object",
          "properties": {
            "facts": {
              "type": "array",
              "description": "A list of facts associated with the interaction.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the fact.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "text": {
                    "type": "string",
                    "description": "The text content of the fact."
                  },
                  "group": {
                    "type": "string",
                    "description": "The key identifying the group to which the fact belongs.",
                    "example": "other"
                  },
                  "groupId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the group to which the fact belongs.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "isDiscarded": {
                    "type": "boolean",
                    "description": "Indicates whether the fact has been marked as discarded."
                  },
                  "source": {
                    "description": "The origin of the fact.",
                    "$ref": "#/components/schemas/V2SourceEnum"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the fact was created."
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the fact was last updated."
                  },
                  "evidence": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "The category of evidence."
                        },
                        "reference": {
                          "type": "string",
                          "description": "A reference that supports the fact."
                        },
                        "quote": {
                          "type": "string",
                          "description": "A direct excerpt or phrase extracted from the reference source that justifies the fact."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "ResponseFactsUpdate": {
          "type": "object",
          "properties": {
            "facts": {
              "type": "array",
              "description": "A list of updated facts.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the updated fact.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "text": {
                    "type": "string",
                    "description": "The updated text content of the fact."
                  },
                  "group": {
                    "type": "string",
                    "description": "The updated group key to which the fact belongs.",
                    "example": "other"
                  },
                  "groupId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the associated group.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "source": {
                    "description": "The updated origin of the fact.",
                    "$ref": "#/components/schemas/V2SourceEnum"
                  },
                  "isDiscarded": {
                    "type": "boolean",
                    "description": "Indicates whether the fact is marked as discarded."
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The original timestamp when the fact was created."
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the fact was last updated."
                  }
                }
              }
            }
          }
        },
        "ResponseFactsUpdateSingle": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the updated fact.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "text": {
              "type": "string",
              "description": "The updated text content of the fact."
            },
            "group": {
              "type": "string",
              "description": "The updated group key to which the fact belongs.",
              "example": "other"
            },
            "groupId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the associated group.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "source": {
              "description": "The updated origin of the fact.",
              "$ref": "#/components/schemas/V2SourceEnum"
            },
            "isDiscarded": {
              "type": "boolean",
              "description": "Indicates whether the fact is marked as discarded."
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The original timestamp when the fact was created."
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the fact was last updated."
            }
          }
        },
        "ResponseGuidelines": {
          "type": "object",
          "properties": {
            "summary": {
              "type": "string",
              "description": "A summary of the response."
            },
            "sources": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QuerySource"
              }
            }
          }
        },
        "ResponseInteraction": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier for the interaction.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "assignedUserId": {
              "type": "string",
              "format": "uuid",
              "description": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "encounter": {
              "type": "object",
              "description": "Information about the encounter, including type, status, and timing.",
              "$ref": "#/components/schemas/Encounter"
            },
            "patient": {
              "type": "object",
              "description": "Details about the patient involved in the interaction, if applicable.",
              "$ref": "#/components/schemas/Patient"
            },
            "endedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the interaction concluded (UTC)."
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the interaction was started (UTC)."
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the interaction was last modified (UTC)."
            },
            "websocketUrl": {
              "type": "string",
              "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here"
            },
            "lastUpdated": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp indicating the last recorded update for this interaction."
            }
          }
        },
        "ResponseInteractionCreate": {
          "type": "object",
          "properties": {
            "interactionId": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier for the interaction.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "websocketUrl": {
              "type": "string",
              "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here"
            }
          }
        },
        "ResponseInteractions": {
          "type": "object",
          "properties": {
            "interactions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Unique identifier for the interaction.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "assignedUserId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "encounter": {
                    "type": "object",
                    "description": "Information about the encounter, including type, status, and timing.",
                    "$ref": "#/components/schemas/Encounter"
                  },
                  "patient": {
                    "type": "object",
                    "description": "Details about the patient involved in the interaction, if applicable.",
                    "$ref": "#/components/schemas/Patient"
                  },
                  "endedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the interaction concluded (UTC)."
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the interaction was started (UTC)."
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp when the interaction was last modified (UTC)."
                  },
                  "websocketUrl": {
                    "type": "string",
                    "description": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here"
                  },
                  "lastUpdated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp indicating the last recorded update for this interaction."
                  }
                }
              }
            }
          }
        },
        "ResponseMention": {
          "type": "object",
          "properties": {
            "properties": {
              "type": "string",
              "description": "The type of mention (e.g., transcript, document)."
            },
            "range": {
              "type": "array",
              "description": "Character range for document type.",
              "items": {
                "type": "integer"
              }
            },
            "time": {
              "type": "array",
              "description": "Time range in seconds for transcript type.",
              "items": {
                "type": "integer"
              }
            },
            "snippet": {
              "type": "string",
              "description": "Text snippet for the mention."
            },
            "documentId": {
              "type": "string",
              "format": "uuid",
              "description": "The document ID if applicable.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "utteranceId": {
              "type": "string",
              "format": "uuid",
              "description": "The utterance ID if applicable.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp for transcript mentions."
            }
          }
        },
        "ResponseMetadataCreate": {
          "type": "object",
          "properties": {
            "participantsRoles": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "channel": {
                    "type": "integer",
                    "description": "The audio channel associated with the participant."
                  },
                  "role": {
                    "description": "The role of the participant.",
                    "$ref": "#/components/schemas/V2TranscriptParticipantRoleEnum"
                  }
                }
              }
            }
          }
        },
        "ResponseParticipantCreate": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "integer",
              "description": "The audio channel associated with the participant."
            },
            "role": {
              "description": "The role of the participant.",
              "$ref": "#/components/schemas/V2TranscriptParticipantRoleEnum"
            }
          }
        },
        "ResponseQuery": {
          "type": "object",
          "properties": {
            "tool": {
              "type": "string",
              "description": "The tool providing the response (e.g., guidelines, mentions, general_chat, etc.)"
            },
            "data": {
              "type": "object",
              "description": "The response data specific to the tool.",
              "$ref": "#/components/schemas/QueryData"
            }
          }
        },
        "ResponseQuestionPrompts": {
          "type": "object",
          "properties": {
            "prompts": {
              "type": "array",
              "description": "An array of suggested questions.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ResponseRecordingCreate": {
          "type": "object",
          "properties": {
            "recordingId": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier for the created recording.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            }
          }
        },
        "ResponseRecordingList": {
          "type": "object",
          "properties": {
            "recordings": {
              "type": "array",
              "format": "uuid",
              "description": "A list of recordings for the interaction.",
              "items": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          }
        },
        "ResponseTranscriptAnonymize": {
          "type": "object",
          "properties": {
            "anonymized": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Utterance"
              }
            }
          }
        },
        "ResponseTranscriptCreate": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the transcript.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "metadata": {
              "type": "object",
              "description": "Additional information about the participants involved in the transcript.",
              "$ref": "#/components/schemas/ResponseMetadataCreate"
            },
            "transcripts": {
              "type": "array",
              "description": "An array of transcripts.",
              "items": {
                "type": "object",
                "properties": {
                  "channel": {
                    "type": "integer",
                    "description": "The channel associated with this phrase/utterance."
                  },
                  "participant": {
                    "type": "integer",
                    "description": "The identifier of the participant."
                  },
                  "speakerId": {
                    "type": "integer",
                    "description": "Id to tag an identified speaker. Auto-increments."
                  },
                  "text": {
                    "type": "string",
                    "description": "The spoken phrase or utterance extracted from the audio."
                  },
                  "start": {
                    "type": "integer",
                    "description": "Start time in milliseconds for phrase/utterance."
                  },
                  "end": {
                    "type": "integer",
                    "description": "End time in milliseconds for phrase/utterance."
                  }
                }
              }
            }
          }
        },
        "ResponseTranscriptListAll": {
          "type": "object",
          "properties": {
            "transcripts": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique identifier of the transcript.",
                    "items": {},
                    "$ref": "#/components/schemas/UUID"
                  },
                  "transcriptSample": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "ResponseTranscriptListAllSingle": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier of the transcript.",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "transcriptSample": {
              "type": "string"
            }
          }
        },
        "Section": {
          "type": "object",
          "properties": {
            "date_updated": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the section was updated."
            },
            "name": {
              "type": "string",
              "description": "Name of the section"
            },
            "alternate_names": {
              "type": "array",
              "description": "Alternate names for the section",
              "items": {
                "type": "string"
              }
            },
            "key": {
              "type": "string",
              "description": "Unique key for the section"
            },
            "description": {
              "type": "string",
              "description": "Description of the section"
            },
            "default_writing_style": {
              "type": "object",
              "description": "Default writing style for the section",
              "$ref": "#/components/schemas/WritingStyle"
            },
            "section_type": {
              "type": "string",
              "description": "Type of section"
            },
            "translations": {
              "type": "array",
              "description": "Available translations for the section",
              "items": {
                "type": "object",
                "properties": {
                  "languages_id": {
                    "type": "string",
                    "description": "Language identifier"
                  },
                  "name": {
                    "type": "string",
                    "description": "Localized name of the section"
                  },
                  "description": {
                    "type": "string",
                    "description": "Localized description of the section"
                  }
                }
              }
            }
          }
        },
        "SectionTranslation": {
          "type": "object",
          "properties": {
            "languages_id": {
              "type": "string",
              "description": "Language identifier"
            },
            "name": {
              "type": "string",
              "description": "Localized name of the section"
            },
            "description": {
              "type": "string",
              "description": "Localized description of the section"
            }
          }
        },
        "SourceReference": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "The content of the matching segment in the source document."
            },
            "range": {
              "type": "array",
              "description": "Start and end indices of the segment in the source document.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "TargetSegment": {
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "The content of the target document segment."
            },
            "range": {
              "type": "array",
              "description": "Start and end indices of the segment in the target document.",
              "items": {
                "type": "integer"
              }
            }
          }
        },
        "TemplateFiltered": {
          "type": "object",
          "properties": {
            "date_updated": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp when the template was updated."
            },
            "name": {
              "type": "string",
              "description": "Name of the template"
            },
            "description": {
              "type": "string",
              "description": "Description of the template"
            },
            "key": {
              "type": "string",
              "description": "Unique key for the template"
            },
            "status": {
              "type": "string",
              "description": "Status of the template."
            },
            "template_sections": {
              "type": "array",
              "description": "List of sections included in the template",
              "items": {
                "type": "object",
                "properties": {
                  "sort": {
                    "type": "integer",
                    "description": "Sort order of the section within the template"
                  },
                  "sections_id": {
                    "type": "object",
                    "description": "The section details",
                    "$ref": "#/components/schemas/Section"
                  }
                }
              }
            },
            "translations": {
              "type": "array",
              "description": "Available translations for the template",
              "items": {
                "type": "object",
                "properties": {
                  "languages_id": {
                    "type": "string",
                    "description": "Language identifier"
                  },
                  "name": {
                    "type": "string",
                    "description": "Localized name of the template"
                  },
                  "description": {
                    "type": "string",
                    "description": "Localized description of the template"
                  }
                }
              }
            }
          }
        },
        "TemplateSection": {
          "type": "object",
          "properties": {
            "sort": {
              "type": "integer",
              "description": "Sort order of the section within the template"
            },
            "sections_id": {
              "type": "object",
              "description": "The section details",
              "$ref": "#/components/schemas/Section"
            }
          }
        },
        "TemplateTranslation": {
          "type": "object",
          "properties": {
            "languages_id": {
              "type": "string",
              "description": "Language identifier"
            },
            "name": {
              "type": "string",
              "description": "Localized name of the template"
            },
            "description": {
              "type": "string",
              "description": "Localized description of the template"
            }
          }
        },
        "Transcript": {
          "type": "object",
          "properties": {
            "channel": {
              "type": "integer",
              "description": "The channel associated with this phrase/utterance."
            },
            "participant": {
              "type": "integer",
              "description": "The identifier of the participant."
            },
            "speakerId": {
              "type": "integer",
              "description": "Id to tag an identified speaker. Auto-increments."
            },
            "text": {
              "type": "string",
              "description": "The spoken phrase or utterance extracted from the audio."
            },
            "start": {
              "type": "integer",
              "description": "Start time in milliseconds for phrase/utterance."
            },
            "end": {
              "type": "integer",
              "description": "End time in milliseconds for phrase/utterance."
            }
          }
        },
        "UUID": {
          "type": "string",
          "items": {},
          "format": "uuid"
        },
        "Utterance": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            },
            "role": {
              "type": "string"
            }
          }
        },
        "V2DocumentContextType": {
          "type": "string"
        },
        "V2DocumentContextTypeEnum": {
          "type": "string",
          "enum": [
            "facts",
            "transcript",
            "string"
          ]
        },
        "V2EncounterStatus": {
          "type": "string"
        },
        "V2EncounterStatusEnum": {
          "type": "string",
          "enum": [
            "planned",
            "in-progress",
            "on-hold",
            "completed",
            "cancelled",
            "deleted"
          ]
        },
        "V2EncounterType": {
          "type": "string"
        },
        "V2EncounterTypeEnum": {
          "type": "string",
          "enum": [
            "first_consultation",
            "consultation",
            "emergency",
            "inpatient",
            "outpatient"
          ]
        },
        "V2Gender": {
          "type": "string"
        },
        "V2GenderEnum": {
          "type": "string",
          "enum": [
            "male",
            "female",
            "unknown",
            "other"
          ]
        },
        "V2ParticipantRoleEnum": {
          "type": "string",
          "enum": [
            "doctor",
            "patient",
            "multiple"
          ]
        },
        "V2Source": {
          "type": "string"
        },
        "V2SourceEnum": {
          "type": "string",
          "enum": [
            "core",
            "system",
            "user"
          ]
        },
        "V2TranscriptParticipantRole": {
          "type": "string"
        },
        "V2TranscriptParticipantRoleEnum": {
          "type": "string",
          "enum": [
            "doctor",
            "patient",
            "multiple"
          ]
        },
        "WritingStyle": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the writing style"
            }
          }
        },
        "common.ErrorResponse": {
          "type": "object",
          "properties": {
            "requestid": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "status": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            },
            "details": {
              "type": "string"
            },
            "instance": {
              "type": "string"
            }
          }
        },
        "copilotCommon.ErrorResponse": {
          "type": "object",
          "properties": {
            "requestid": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "status": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            },
            "details": {
              "type": "string"
            },
            "instance": {
              "type": "string"
            }
          }
        },
        "copilotModels.V2EncounterStatus": {
          "type": "string"
        },
        "copilotModels.V2EncounterType": {
          "type": "string"
        },
        "copilotModels.V2Gender": {
          "type": "string"
        },
        "copilotModels.V2Source": {
          "type": "string"
        },
        "copilotModels.V2TranscriptParticipantRole": {
          "type": "string"
        },
        "cortiCommon.ErrorResponse": {
          "type": "object",
          "properties": {
            "requestid": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "status": {
              "type": "integer"
            },
            "title": {
              "type": "string"
            },
            "details": {
              "type": "string"
            },
            "instance": {
              "type": "string"
            }
          }
        },
        "type.NoContent": {
          "type": "object"
        },
        "uuid.UUID": {
          "type": "string",
          "items": {},
          "format": "uuid"
        },
        "ResponseTranscriptTime": {
          "type": "object",
          "properties": {
            "start": {
              "type": "number"
            },
            "end": {
              "type": "number"
            }
          }
        },
        "ResponseTranscript": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "start": {
              "type": "number"
            },
            "duration": {
              "type": "number"
            },
            "transcript": {
              "type": "string"
            },
            "isFinal": {
              "type": "boolean"
            },
            "participant": {
              "type": "object",
              "$ref": "#/components/schemas/RequestParticipantCreate"
            },
            "time": {
              "type": "object",
              "$ref": "#/components/schemas/ResponseTranscriptTime"
            }
          }
        },
        "DocumentationEvidence": {
          "type": "object",
          "properties": {
            "evidenceId": {
              "type": "string",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "type": {
              "type": "string",
              "example": "transcript"
            },
            "quote": {
              "type": "string"
            }
          }
        },
        "ResponseDocumentation": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "text": {
              "type": "string"
            },
            "sectionId": {
              "type": "string",
              "items": {},
              "$ref": "#/components/schemas/UUID"
            },
            "sectionTitle": {
              "type": "string"
            },
            "evidence": {
              "type": "object",
              "$ref": "#/components/schemas/DocumentationEvidence"
            }
          }
        }
      },
      "parameters": {
        "Tenant-Name": {
          "name": "Tenant-Name",
          "in": "header",
          "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "example": "copiloteu",
          "schema": {
            "type": "string",
            "description": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
            "example": "copiloteu"
          }
        }
      }
    },
    "tags": [
      {
        "name": "interactions"
      },
      {
        "name": "facts"
      },
      {
        "name": "documents"
      },
      {
        "name": "codes"
      },
      {
        "name": "recordings"
      },
      {
        "name": "transcripts"
      }
    ]
  },
  "settings": {
    "disableExamples": false,
    "discriminatedUnionV2": false,
    "useTitlesAsName": true,
    "optionalAdditionalProperties": true,
    "coerceEnumsToLiterals": true,
    "respectReadonlySchemas": false,
    "respectNullableSchemas": false,
    "onlyIncludeReferencedSchemas": false,
    "inlinePathParameters": false,
    "preserveSchemaIds": false,
    "shouldUseUndiscriminatedUnionsWithLiterals": false,
    "shouldUseIdiomaticRequestNames": false,
    "objectQueryParameters": false,
    "asyncApiNaming": "v1",
    "useBytesForBinaryResponse": false,
    "respectForwardCompatibleEnums": false,
    "additionalPropertiesDefaultsTo": false,
    "typeDatesAsStrings": true,
    "preserveSingleSchemaOneOf": false
  }
}