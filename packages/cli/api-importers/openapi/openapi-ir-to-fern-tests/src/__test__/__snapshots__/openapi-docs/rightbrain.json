{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenErrorBody",
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CallbackDatasourceBoxCallbackGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CallbackDatasourceConfluenceCallbackGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CallbackDatasourceDropboxCallbackGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CallbackDatasourceGdriveCallbackGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CallbackDatasourceNotionCallbackGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CallbackDatasourceOnedriveCallbackGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CallbackDatasourceSharepointCallbackGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ChatGetMemberRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ChatGetMemberRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ChatGetMemberRequestForbiddenErrorBody",
          },
          "ChatGetMemberRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ChatIamListMembersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ChatIamListMembersRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ChatIamListMembersRequestForbiddenErrorBody",
          },
          "ChatIamListMembersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ChatIamTestPermissionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "ChatIamTestPermissionsRequestBadRequestErrorBody",
          },
          "ChatIamTestPermissionsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ChatIamTestPermissionsRequestForbiddenErrorBody",
          },
          "ChatIamTestPermissionsRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "ChatIamTestPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ChatIamUpdateMemberRolesRequestBadRequestError": {
            "docs": "Bad Request",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "string",
                  "reason": "INVALID_MEMBER",
                },
              },
            ],
            "status-code": 400,
            "type": "ChatIamUpdateMemberRolesRequestBadRequestErrorBody",
          },
          "ChatIamUpdateMemberRolesRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ChatIamUpdateMemberRolesRequestForbiddenErrorBody",
          },
          "ChatIamUpdateMemberRolesRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "ChatIamUpdateMemberRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenErrorBody",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenErrorBody",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenErrorBody",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenErrorBody",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenErrorBody",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenErrorBody",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenErrorBody",
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CheckStatusOrgOrgIdProjectProjectIdScrapeRunSyncRunIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenErrorBody",
          },
          "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenErrorBody",
          },
          "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionGetMemberRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CollectionGetMemberRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionGetMemberRequestForbiddenErrorBody",
          },
          "CollectionGetMemberRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionIamListMembersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CollectionIamListMembersRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionIamListMembersRequestForbiddenErrorBody",
          },
          "CollectionIamListMembersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionIamTestPermissionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "CollectionIamTestPermissionsRequestBadRequestErrorBody",
          },
          "CollectionIamTestPermissionsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionIamTestPermissionsRequestForbiddenErrorBody",
          },
          "CollectionIamTestPermissionsRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "CollectionIamTestPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionIamUpdateMemberRolesRequestBadRequestError": {
            "docs": "Bad Request",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "string",
                  "reason": "INVALID_MEMBER",
                },
              },
            ],
            "status-code": 400,
            "type": "CollectionIamUpdateMemberRolesRequestBadRequestErrorBody",
          },
          "CollectionIamUpdateMemberRolesRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionIamUpdateMemberRolesRequestForbiddenErrorBody",
          },
          "CollectionIamUpdateMemberRolesRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "CollectionIamUpdateMemberRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenErrorBody",
          },
          "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenErrorBody",
          },
          "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateChatChatPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CreateChatChatPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CreateChatChatPostRequestForbiddenErrorBody",
          },
          "CreateChatChatPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenErrorBody",
          },
          "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateProjectOrgOrgIdProjectPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CreateProjectOrgOrgIdProjectPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CreateProjectOrgOrgIdProjectPostRequestForbiddenErrorBody",
          },
          "CreateProjectOrgOrgIdProjectPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateTaskForwarderRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CreateTaskForwarderRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CreateTaskForwarderRequestForbiddenErrorBody",
          },
          "CreateTaskForwarderRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "CreateTaskRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "CreateTaskRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "CreateTaskRequestForbiddenErrorBody",
          },
          "CreateTaskRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenErrorBody",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenErrorBody",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenErrorBody",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenErrorBody",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenErrorBody",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenErrorBody",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenErrorBody",
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenErrorBody",
          },
          "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenErrorBody",
          },
          "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentEmbeddingGetOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingEmbeddingIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenErrorBody",
          },
          "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenErrorBody",
          },
          "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentGetMemberRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentGetMemberRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentGetMemberRequestForbiddenErrorBody",
          },
          "DocumentGetMemberRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentIamListMembersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentIamListMembersRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentIamListMembersRequestForbiddenErrorBody",
          },
          "DocumentIamListMembersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentIamTestPermissionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "DocumentIamTestPermissionsRequestBadRequestErrorBody",
          },
          "DocumentIamTestPermissionsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentIamTestPermissionsRequestForbiddenErrorBody",
          },
          "DocumentIamTestPermissionsRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "DocumentIamTestPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentIamUpdateMemberRolesRequestBadRequestError": {
            "docs": "Bad Request",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "string",
                  "reason": "INVALID_MEMBER",
                },
              },
            ],
            "status-code": 400,
            "type": "DocumentIamUpdateMemberRolesRequestBadRequestErrorBody",
          },
          "DocumentIamUpdateMemberRolesRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentIamUpdateMemberRolesRequestForbiddenErrorBody",
          },
          "DocumentIamUpdateMemberRolesRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "DocumentIamUpdateMemberRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenErrorBody",
          },
          "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenErrorBody",
          },
          "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenErrorBody",
          },
          "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenErrorBody",
          },
          "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "EditTaskRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "EditTaskRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "EditTaskRequestForbiddenErrorBody",
          },
          "EditTaskRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "EnableOrgOrgIdProjectProjectIdScrapePostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "FetchOrgOrgIdProjectProjectIdScrapeStartPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenErrorBody",
          },
          "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetAllModelsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetAllModelsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetAllModelsRequestForbiddenErrorBody",
          },
          "GetAllModelsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetAllTaskForwardersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetAllTaskForwardersRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetAllTaskForwardersRequestForbiddenErrorBody",
          },
          "GetAllTaskForwardersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetAllTasksRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetAllTasksRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetAllTasksRequestForbiddenErrorBody",
          },
          "GetAllTasksRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetChatChatChatIdGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetChatChatChatIdGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetChatChatChatIdGetRequestForbiddenErrorBody",
          },
          "GetChatChatChatIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetChatConfigChatChatIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetChatConfigChatChatIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetChatConfigChatChatIdConfigGetRequestForbiddenErrorBody",
          },
          "GetChatConfigChatChatIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenErrorBody",
          },
          "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenErrorBody",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenErrorBody",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenErrorBody",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenErrorBody",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenErrorBody",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenErrorBody",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenErrorBody",
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetProjectConfigOrgOrgIdProjectProjectIdConfigGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetProjectOrgOrgIdProjectProjectIdGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenErrorBody",
          },
          "GetProjectOrgOrgIdProjectProjectIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetRecentChatsForUserChatRecentGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetTaskForwarderRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetTaskForwarderRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetTaskForwarderRequestForbiddenErrorBody",
          },
          "GetTaskForwarderRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetTaskRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetTaskRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetTaskRequestForbiddenErrorBody",
          },
          "GetTaskRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetTaskRunRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetTaskRunRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetTaskRunRequestForbiddenErrorBody",
          },
          "GetTaskRunRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "GetTaskRunsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "GetTaskRunsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "GetTaskRunsRequestForbiddenErrorBody",
          },
          "GetTaskRunsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "InitialiseOrgOrgIdProjectProjectIdComposePostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenErrorBody",
          },
          "InitialiseOrgOrgIdProjectProjectIdComposePostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListAvailableGuardrailsOrgOrgIdProjectProjectIdGuardrailGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenErrorBody",
          },
          "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenErrorBody",
          },
          "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListProjectOrgOrgIdProjectGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListProjectOrgOrgIdProjectGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListProjectOrgOrgIdProjectGetRequestForbiddenErrorBody",
          },
          "ListProjectOrgOrgIdProjectGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenErrorBody",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenErrorBody",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenErrorBody",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenErrorBody",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenErrorBody",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenErrorBody",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenErrorBody",
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgCreateOrgPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenErrorBody",
          },
          "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgDomainsListOrgOrgIdDomainsGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenErrorBody",
          },
          "OrgDomainsListOrgOrgIdDomainsGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgDomainsPostOrgOrgIdDomainsPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenErrorBody",
          },
          "OrgDomainsPostOrgOrgIdDomainsPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgGetOrgOrgIdGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgGetOrgOrgIdGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgGetOrgOrgIdGetRequestForbiddenErrorBody",
          },
          "OrgGetOrgOrgIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestErrorBody",
          },
          "OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenErrorBody",
          },
          "OrgInvitesCreateOrgOrgIdInvitePostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenErrorBody",
          },
          "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgInvitesListOrgOrgIdInviteGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgInvitesListOrgOrgIdInviteGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgInvitesListOrgOrgIdInviteGetRequestForbiddenErrorBody",
          },
          "OrgInvitesListOrgOrgIdInviteGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgJoinOrgOrgIdJoinPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgJoinOrgOrgIdJoinPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgJoinOrgOrgIdJoinPostRequestForbiddenErrorBody",
          },
          "OrgJoinOrgOrgIdJoinPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgListOrgGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgUpdateAvatarOrgOrgIdAvatarPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenErrorBody",
          },
          "OrgUpdateAvatarOrgOrgIdAvatarPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrgUpdateOrgOrgIdPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrgUpdateOrgOrgIdPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrgUpdateOrgOrgIdPostRequestForbiddenErrorBody",
          },
          "OrgUpdateOrgOrgIdPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrganizationGetMemberRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrganizationGetMemberRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrganizationGetMemberRequestForbiddenErrorBody",
          },
          "OrganizationGetMemberRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrganizationIamListMembersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "OrganizationIamListMembersRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrganizationIamListMembersRequestForbiddenErrorBody",
          },
          "OrganizationIamListMembersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrganizationIamTestPermissionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "OrganizationIamTestPermissionsRequestBadRequestErrorBody",
          },
          "OrganizationIamTestPermissionsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrganizationIamTestPermissionsRequestForbiddenErrorBody",
          },
          "OrganizationIamTestPermissionsRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "OrganizationIamTestPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "OrganizationIamUpdateMemberRolesRequestBadRequestError": {
            "docs": "Bad Request",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "string",
                  "reason": "INVALID_MEMBER",
                },
              },
            ],
            "status-code": 400,
            "type": "OrganizationIamUpdateMemberRolesRequestBadRequestErrorBody",
          },
          "OrganizationIamUpdateMemberRolesRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "OrganizationIamUpdateMemberRolesRequestForbiddenErrorBody",
          },
          "OrganizationIamUpdateMemberRolesRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "OrganizationIamUpdateMemberRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ProjectGetMemberRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ProjectGetMemberRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ProjectGetMemberRequestForbiddenErrorBody",
          },
          "ProjectGetMemberRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ProjectIamListMembersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ProjectIamListMembersRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ProjectIamListMembersRequestForbiddenErrorBody",
          },
          "ProjectIamListMembersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ProjectIamTestPermissionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "ProjectIamTestPermissionsRequestBadRequestErrorBody",
          },
          "ProjectIamTestPermissionsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ProjectIamTestPermissionsRequestForbiddenErrorBody",
          },
          "ProjectIamTestPermissionsRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "ProjectIamTestPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ProjectIamUpdateMemberRolesRequestBadRequestError": {
            "docs": "Bad Request",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "string",
                  "reason": "INVALID_MEMBER",
                },
              },
            ],
            "status-code": 400,
            "type": "ProjectIamUpdateMemberRolesRequestBadRequestErrorBody",
          },
          "ProjectIamUpdateMemberRolesRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ProjectIamUpdateMemberRolesRequestForbiddenErrorBody",
          },
          "ProjectIamUpdateMemberRolesRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "ProjectIamUpdateMemberRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenErrorBody",
          },
          "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "QueryChatChatChatIdQueryGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "QueryChatChatChatIdQueryGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "QueryChatChatChatIdQueryGetRequestForbiddenErrorBody",
          },
          "QueryChatChatChatIdQueryGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenErrorBody",
          },
          "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenErrorBody",
          },
          "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "RunTaskRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "RunTaskRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "RunTaskRequestForbiddenErrorBody",
          },
          "RunTaskRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenErrorBody",
          },
          "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetChatConfigChatChatIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetChatConfigChatChatIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetChatConfigChatChatIdConfigPostRequestForbiddenErrorBody",
          },
          "SetChatConfigChatChatIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenErrorBody",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenErrorBody",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenErrorBody",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenErrorBody",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenErrorBody",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenErrorBody",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenErrorBody",
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenErrorBody",
          },
          "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "TaskGetMemberRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "TaskGetMemberRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "TaskGetMemberRequestForbiddenErrorBody",
          },
          "TaskGetMemberRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "TaskIamListMembersRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "TaskIamListMembersRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "TaskIamListMembersRequestForbiddenErrorBody",
          },
          "TaskIamListMembersRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "TaskIamTestPermissionsRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "TaskIamTestPermissionsRequestBadRequestErrorBody",
          },
          "TaskIamTestPermissionsRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "TaskIamTestPermissionsRequestForbiddenErrorBody",
          },
          "TaskIamTestPermissionsRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "TaskIamTestPermissionsRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "TaskIamUpdateMemberRolesRequestBadRequestError": {
            "docs": "Bad Request",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "string",
                  "reason": "INVALID_MEMBER",
                },
              },
            ],
            "status-code": 400,
            "type": "TaskIamUpdateMemberRolesRequestBadRequestErrorBody",
          },
          "TaskIamUpdateMemberRolesRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "TaskIamUpdateMemberRolesRequestForbiddenErrorBody",
          },
          "TaskIamUpdateMemberRolesRequestNotFoundError": {
            "docs": "Not Found",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "invalidMemberError": {},
                  "message": "message",
                },
              },
            ],
            "status-code": 404,
            "type": "InvalidMemberErrorResponse",
          },
          "TaskIamUpdateMemberRolesRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenErrorBody",
          },
          "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenErrorBody",
          },
          "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateChatChatChatIdPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "UpdateChatChatChatIdPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "UpdateChatChatChatIdPostRequestForbiddenErrorBody",
          },
          "UpdateChatChatChatIdPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateProjectOrgOrgIdProjectProjectIdPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenErrorBody",
          },
          "UpdateProjectOrgOrgIdProjectProjectIdPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenErrorBody",
          },
          "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenErrorBody",
          },
          "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UpdateTaskForwarderRequestBadRequestError": {
            "docs": "Bad Request",
            "status-code": 400,
            "type": "MalformedResourceIdentifierErrorResponse",
          },
          "UpdateTaskForwarderRequestForbiddenError": {
            "docs": "Forbidden",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {
                  "message": "string",
                  "permissionCheckFailedError": {
                    "permission": "permission",
                  },
                  "reason": "PERMISSION_CHECK_FAILED",
                },
              },
            ],
            "status-code": 403,
            "type": "UpdateTaskForwarderRequestForbiddenErrorBody",
          },
          "UpdateTaskForwarderRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UserGetUserGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UserPostUserPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "UserUpdateAvatarUserAvatarPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "WebhookHydraTokenHookInternalWebhookHydraTokenHookPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "WebhookKratosSignupCheckInternalWebhookKratosSignupCheckPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "WebhookKratosSignupCommitInternalWebhookKratosSignupCommitPostRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
          "WhoamiWhoamiGetRequestUnprocessableEntityError": {
            "docs": "Validation Error",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 422,
            "type": "HTTPValidationError",
          },
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "root_ping_get": {
              "auth": false,
              "display-name": "Root",
              "docs": "Root endpoint that returns a "Hello World" message.",
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/ping",
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "whoami_whoami_get": {
              "auth": true,
              "display-name": "Whoami",
              "docs": undefined,
              "errors": [
                "WhoamiWhoamiGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/whoami",
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "AsyncJobResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "status": "string",
              "task_id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "BodyFetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPost": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BodyFetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPost": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BodyFetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPost": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BodyFetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPost": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BodyFetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPost": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BodyFetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPost": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "BodyFetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPost": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Chat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "collection_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "created": {
                "type": "datetime",
              },
              "created_by_user_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "type": "optional<string>",
              },
              "documents_have_been_modified": {
                "default": false,
                "type": "optional<boolean>",
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "last_message": {
                "type": "optional<datetime>",
              },
              "summary": {
                "type": "optional<string>",
              },
              "title": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "chat_guardrails": {
                "docs": "Conversational Guardrails can be defined to run against Chat `input` (i.e. the users query) or on Chat `output` (i.e. the LLM output)",
                "type": "optional<ConversationalGuardrails>",
              },
              "chat_system_commands": {
                "type": "optional<list<string>>",
              },
              "knn": {
                "default": 5,
                "type": "optional<integer>",
              },
              "llm": {
                "default": "gpt-3.5-turbo",
                "type": "optional<Llm>",
              },
              "query_expansion": {
                "default": false,
                "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                "type": "optional<boolean>",
              },
              "temperature": {
                "default": 0.5,
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatDocument": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "chunks": "integer",
              "connection_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "description": {
                "type": "optional<string>",
              },
              "embedding_instances": "optional<list<ChatDocumentEmbeddingInstance>>",
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "original_mime": "string",
              "project_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "source": {
                "type": "optional<ChatDocumentSource>",
              },
              "source_meta": {
                "type": "optional<map<string, unknown>>",
              },
              "strategy": "string",
              "title": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatDocumentEmbeddingInstance": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "chat_document_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "config": {
                "type": "optional<map<string, unknown>>",
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "is_active": "boolean",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatDocumentEmbeddingRecord": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "document": "string",
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatDocumentQueryResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "chat_document_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "score": "double",
              "text": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatDocumentSource": {
            "enum": [
              "upload",
              "gdrive",
              "onedrive",
              "web_scrape",
              "notion",
              "confluence",
              "box",
              "dropbox",
              "sharepoint",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatGetMemberRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ChatGuardrail": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": "string",
              "id": {
                "type": "Id",
              },
              "name": "string",
              "type": {
                "type": "Type",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatIamListMembersRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ChatIamTestPermissionsRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
            },
          },
          "ChatIamTestPermissionsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ChatIamUpdateMemberRolesRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
              "MULTIPLE_ROLES_NOT_ALLOWED": {
                "type": "MultipleRolesNotAllowedErrorResponse",
              },
            },
          },
          "ChatIamUpdateMemberRolesRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ChatModel": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "alias": {
                "docs": "Human readable name for the LLM.",
                "type": "string",
              },
              "description": {
                "docs": "Key information about the LLM.",
                "type": "string",
              },
              "name": {
                "docs": "LLM reference name.",
                "type": "Name",
              },
              "provider": {
                "docs": "The company that produces the LLM.",
                "type": "string",
              },
              "supports_vision": {
                "default": false,
                "docs": "Whether the LLM is able to see and interpret images.",
                "type": "boolean",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "Collection": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created": {
                "type": "datetime",
              },
              "embedding_instances": {
                "type": "optional<list<ChatDocumentEmbeddingInstance>>",
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "modified": {
                "type": "datetime",
              },
              "project_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "summary": {
                "type": "optional<string>",
              },
              "title": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionChatShow": {
            "enum": [
              "all",
              "viewable",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionEmbeddingUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "embedding_instance_ids": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CollectionGetMemberRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionIamListMembersRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionIamTestPermissionsRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
            },
          },
          "CollectionIamTestPermissionsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionIamUpdateMemberRolesRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
              "MULTIPLE_ROLES_NOT_ALLOWED": {
                "type": "MultipleRolesNotAllowedErrorResponse",
              },
            },
          },
          "CollectionIamUpdateMemberRolesRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CollectionStatsResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "documents_by_source": {
                "type": "list<SourceRow>",
              },
              "number_of_chats": "integer",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ComposeContent": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "existing_content": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ComposeGenerate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "structure": {
                "type": "list<InitialComposeSection>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ComposeInit": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "audience": {
                "type": "optional<string>",
              },
              "content": {
                "type": "optional<string>",
              },
              "cta": {
                "type": "optional<string>",
              },
              "deny_words": {
                "type": "optional<string>",
              },
              "domain": {
                "type": "optional<string>",
              },
              "favourable_words": {
                "type": "optional<string>",
              },
              "keywords": {
                "type": "optional<string>",
              },
              "language": {
                "default": "english_british",
                "type": "optional<Language>",
              },
              "num_sections": {
                "type": "optional<integer>",
              },
              "purpose": {
                "type": "optional<string>",
              },
              "title": "string",
              "tone": {
                "type": "optional<string>",
              },
              "topic": {
                "type": "optional<string>",
              },
              "voice": {
                "type": "optional<string>",
              },
              "word_count": {
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ComposeSectionTalkingPoint": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "section_heading": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ComposeSectionUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "instructions": {
                "type": "list<string>",
              },
              "position": "integer",
              "section_title": "string",
              "text": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ConversationalGuardrails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "input": {
                "docs": "List of valid Input Conversational Guardrails to enable",
                "type": "optional<list<InputConversationalGuardrailDefinition>>",
              },
              "output": {
                "docs": "List of valid Output Conversational Guardrails to enable",
                "type": "optional<list<OutputConversationalGuardrailDefinition>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CreateChatChatPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CreateProjectOrgOrgIdProjectPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CreateTaskForwarderRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "CreateTaskRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "Datasource": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DatasourceConfiguration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": "string",
              "private": "boolean",
              "root_folder_id": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DatasourceConnection": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "config": {
                "type": "optional<map<string, unknown>>",
              },
              "created_by": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "datasource_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "private": {
                "type": "optional<boolean>",
              },
              "project_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "token": {
                "default": "",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DatasourceConnectionPublic": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "config": {
                "type": "optional<map<string, unknown>>",
              },
              "created": {
                "type": "datetime",
              },
              "datasource": {
                "type": "Datasource",
              },
              "datasource_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "modified": {
                "type": "datetime",
              },
              "name": "string",
              "private": "boolean",
              "project_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DatasourceSyncRun": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created": {
                "type": "datetime",
              },
              "datasource_connection": {
                "type": "optional<DatasourceConnection>",
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "modified": {
                "type": "datetime",
              },
              "run_output": {
                "type": "optional<map<string, unknown>>",
              },
              "status": {
                "default": "pending",
                "type": "optional<Status>",
              },
              "task_id": {
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentCreateTask": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "info": {
                "type": "optional<map<string, unknown>>",
              },
              "state": {
                "type": "State",
              },
              "task_id": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentGetMemberRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentIamListMembersRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentIamTestPermissionsRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
            },
          },
          "DocumentIamTestPermissionsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentIamUpdateMemberRolesRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
              "MULTIPLE_ROLES_NOT_ALLOWED": {
                "type": "MultipleRolesNotAllowedErrorResponse",
              },
            },
          },
          "DocumentIamUpdateMemberRolesRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentStatusResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "group_id": "string",
              "task_count": "integer",
              "tasks": {
                "type": "list<DocumentCreateTask>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "EditTaskRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "EmptyErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {},
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetAllModelsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetAllTaskForwardersRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetAllTasksRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetChatChatChatIdGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetChatConfigChatChatIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetTaskForwarderRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetTaskRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetTaskRunRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "GetTaskRunsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "HTTPValidationError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "detail": {
                "type": "optional<list<ValidationError>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "HydraWebhookTokenHookSession": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_id": "string",
              "id_token": {
                "type": "HydraWebhookTokenHookSessionIDTokenClaims",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "HydraWebhookTokenHookSessionIDTokenClaims": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id_token_claims": {
                "type": "map<string, unknown>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IAMMember": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "avatar_url": {
                "docs": "If avatar of the member, if it is supported by their subject type.",
                "type": "optional<string>",
              },
              "member": {
                "docs": "The member identifier string, the format of which is '<subject_type>:<subject_id>'",
                "type": "string",
              },
              "name": {
                "docs": "The name of the member.",
                "type": "optional<string>",
              },
              "roles": {
                "docs": "A list of roles that the member holds on an entity.

Some entities, such as Organizations, may contain members that exist without any roles.",
                "type": "optional<list<string>>",
              },
              "total_subjects": {
                "default": 1,
                "docs": "The total number of subjects that the member represents, which may be a value other than `1` if the member is not a User.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IAMObjectErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "optional<string>",
              },
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "IAMPermissionTest": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "member": {
                "type": "optional<string>",
              },
              "permissions": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Id": {
            "enum": [
              "source_validation",
              "prompt_policy",
              "pii_policy",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Identity": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              "map<string, unknown>",
              {
                "type": "KratosIdentity",
              },
            ],
          },
          "InitialComposeSection": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "ideas": {
                "type": "optional<list<string>>",
              },
              "position": "integer",
              "title": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "InputConversationalGuardrailDefinition": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "type": "Name",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidMemberErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "resource": {
                "type": "optional<IAMObjectErrorDetails>",
              },
              "subject": {
                "type": "optional<IAMObjectErrorDetails>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidMemberErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "invalidMemberError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "InvalidMemberErrorDetails",
              },
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidRoleErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "resource": {
                "type": "optional<IAMObjectErrorDetails>",
              },
              "role": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidRoleErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "invalidRoleError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "InvalidRoleErrorDetails",
              },
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidSubjectTypeErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "subject": {
                "type": "optional<IAMObjectErrorDetails>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "InvalidSubjectTypeErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "invalidSubjectTypeError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "InvalidSubjectTypeErrorDetails",
              },
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "KratosIdentity": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "traits": "optional<KratosIdentityTraits>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "KratosIdentityTraits": {
            "docs": undefined,
            "extra-properties": true,
            "inline": undefined,
            "properties": {
              "avatar_url": {
                "type": "optional<string>",
              },
              "email": {
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": {
                "type": "optional<string>",
              },
              "org_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "project_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "sso_email_verified": {
                "type": "optional<boolean>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "KratosWebhook": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "bio": {
                "type": "optional<string>",
              },
              "ctx": {
                "type": "optional<map<string, unknown>>",
              },
              "email": {
                "type": "optional<string>",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "flow_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "flow_type": {
                "type": "optional<string>",
              },
              "identity": {
                "type": "optional<KratosIdentity>",
              },
              "identity_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "KratosWebhookDetailedMessage": {
            "docs": "Sourced from detailedMessage in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
            "inline": undefined,
            "properties": {
              "context": {
                "type": "optional<unknown>",
              },
              "id": "integer",
              "text": "string",
              "type": {
                "type": "Type",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "KratosWebhookErrorMessage": {
            "docs": "Sourced from errorMessage in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
            "inline": undefined,
            "properties": {
              "instance_ptr": "string",
              "messages": {
                "type": "optional<list<KratosWebhookDetailedMessage>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "KratosWebhookResponse": {
            "docs": "Sourced from rawHookResponse in:
https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go",
            "inline": undefined,
            "properties": {
              "identity": {
                "type": "optional<Identity>",
              },
              "messages": {
                "type": "optional<list<KratosWebhookErrorMessage>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Language": {
            "default": "english_british",
            "enum": [
              "english_british",
              "english_american",
              "french",
              "chinese",
              "spanish",
              "korean",
              "italian",
              "german",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListProjectOrgOrgIdProjectGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "Llm": {
            "default": "gpt-3.5-turbo",
            "enum": [
              {
                "name": "Gpt4O",
                "value": "gpt-4o",
              },
              {
                "name": "Gpt35Turbo",
                "value": "gpt-3.5-turbo",
              },
              {
                "name": "Gpt4",
                "value": "gpt-4",
              },
              {
                "name": "Gpt4Turbo",
                "value": "gpt-4-turbo",
              },
              {
                "name": "Gpt4TurboPreview",
                "value": "gpt-4-turbo-preview",
              },
              {
                "name": "Gpt41106Preview",
                "value": "gpt-4-1106-preview",
              },
              {
                "name": "Claude35Sonnet20240620",
                "value": "claude-3-5-sonnet-20240620",
              },
              {
                "name": "Claude3Haiku20240307",
                "value": "claude-3-haiku-20240307",
              },
              {
                "name": "Claude3Sonnet20240229",
                "value": "claude-3-sonnet-20240229",
              },
              {
                "name": "Claude3Opus20240229",
                "value": "claude-3-opus-20240229",
              },
              {
                "name": "Gemini15ProLatest",
                "value": "gemini-1.5-pro-latest",
              },
              {
                "name": "GeminiPro",
                "value": "gemini-pro",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MalformedResourceIdentifierErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "expected_format": "string",
              "field": "string",
              "value": "unknown",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MalformedResourceIdentifierErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "malformedResourceIdentifierError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "MalformedResourceIdentifierErrorDetails",
              },
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MissingAuthenticationErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
              "missingAuthenticationError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "EmptyErrorDetails",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MultipleRolesNotAllowedErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "resource": {
                "type": "optional<IAMObjectErrorDetails>",
              },
              "roles": {
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "MultipleRolesNotAllowedErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
              "multipleRolesNotAllowedError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "MultipleRolesNotAllowedErrorDetails",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Name": {
            "enum": [
              "prompt_policy",
              "pii_policy",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OAuthClientCreateResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "client_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "client_secret": "string",
              "name": "string",
              "redirect_uris": {
                "type": "list<string>",
              },
              "scope": {
                "default": "",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OAuthClientProfile": {
            "enum": [
              "rightbrain_docs",
              "rightbrain_tasks",
              "user_defined",
              "zendesk",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Object": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdTime": {
                "type": "optional<string>",
              },
              "id": "string",
              "mimeType": {
                "type": "optional<string>",
              },
              "modifiedTime": {
                "type": "optional<string>",
              },
              "name": "string",
              "size": {
                "type": "optional<string>",
              },
              "synced": {
                "default": false,
                "type": "optional<boolean>",
              },
              "tags": {
                "type": "optional<list<ObjectTags>>",
              },
              "type": "optional<ObjectType>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ObjectList": {
            "type": "list<Object>",
          },
          "ObjectTags": {
            "enum": [
              "no_size",
              "site",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ObjectType": {
            "enum": [
              "file",
              "dir",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Org": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "avatar_url": {
                "type": "optional<string>",
              },
              "contact_email": {
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgGetOrgOrgIdGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgInviteShow": {
            "enum": [
              "all",
              "pending",
              "accepted",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
              "ORGANIZATION_INVITE_ALREADY_EXISTS": {
                "type": "OrganizationInviteAlreadyExistsErrorResponse",
              },
              "ORGANIZATION_MEMBER_ALREADY_EXISTS": {
                "type": "OrganizationMemberAlreadyExistsErrorResponse",
              },
            },
          },
          "OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgInvitesListOrgOrgIdInviteGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgJoinOrgOrgIdJoinPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgMembership": {
            "enum": [
              "active",
              "joinable",
              "joinable_by_domain",
              "joinable_by_invite",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrgUpdateOrgOrgIdPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrganizationDomain": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "domain": "string",
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "status": {
                "type": "Status",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationGetMemberRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrganizationIamListMembersRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrganizationIamTestPermissionsRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
            },
          },
          "OrganizationIamTestPermissionsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrganizationIamUpdateMemberRolesRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
              "MULTIPLE_ROLES_NOT_ALLOWED": {
                "type": "MultipleRolesNotAllowedErrorResponse",
              },
            },
          },
          "OrganizationIamUpdateMemberRolesRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "OrganizationInvite": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "email_address": {
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "roles": {
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationInviteAlreadyExistsErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "email_address": "string",
              "organization_id": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationInviteAlreadyExistsErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
              "organizationInviteAlreadyExistsError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "OrganizationInviteAlreadyExistsErrorDetails",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationMemberAlreadyExistsErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "member_id": "string",
              "organization_id": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationMemberAlreadyExistsErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
              "organizationMemberAlreadyExistsError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "OrganizationMemberAlreadyExistsErrorDetails",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OutputConversationalGuardrailDefinition": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "type": "literal<"source_validation">",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetChat": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<Chat>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetChatDocument": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<ChatDocument>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetChatDocumentEmbeddingRecord": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<ChatDocumentEmbeddingRecord>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetCollection": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<Collection>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetDatasourceSyncRun": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<DatasourceSyncRun>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetIamMember": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<IAMMember>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetOrganizationDomain": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<OrganizationDomain>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetOrganizationInvite": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<OrganizationInvite>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetProject": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<Project>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetTask": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<Task>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetTaskForwarder": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<TaskForwarder>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginatedResultSetTaskRun": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Contains pagination information for the result set.",
                "type": "optional<PaginationDetails>",
              },
              "results": {
                "docs": "The list of items returned for the current page.",
                "type": "list<TaskRun>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PaginationDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "has_next": {
                "docs": "Indicates whether there are more results available in the next page.",
                "type": "optional<boolean>",
              },
              "next_cursor": {
                "docs": "A token used to retrieve the next page of results. If `null`, there are no more results.",
                "type": "optional<string>",
              },
              "page_limit": {
                "docs": "The maximum number of items returned per page.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PermissionCheckFailedErrorDetails": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "permission": "string",
              "resource": {
                "type": "optional<IAMObjectErrorDetails>",
              },
              "subject": {
                "type": "optional<IAMObjectErrorDetails>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "PermissionCheckFailedErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "message": {
                "docs": "Human readable representation of the error",
                "type": "string",
              },
              "permissionCheckFailedError": {
                "docs": "Metadata detailing more information about the error.",
                "type": "PermissionCheckFailedErrorDetails",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Project": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "avatar_url": {
                "type": "optional<string>",
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": "string",
              "org_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "tasks_oauth_client_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProjectConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "chat_guardrails": {
                "type": "optional<ConversationalGuardrails>",
              },
              "chat_system_commands": {
                "type": "optional<list<string>>",
              },
              "knn": {
                "default": 4,
                "type": "optional<integer>",
              },
              "llm": {
                "default": "gpt-3.5-turbo",
                "type": "optional<Llm>",
              },
              "query_expansion": {
                "default": false,
                "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                "type": "optional<boolean>",
              },
              "temperature": {
                "default": 0.5,
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProjectGetMemberRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ProjectIamListMembersRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ProjectIamTestPermissionsRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
            },
          },
          "ProjectIamTestPermissionsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ProjectIamUpdateMemberRolesRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
              "MULTIPLE_ROLES_NOT_ALLOWED": {
                "type": "MultipleRolesNotAllowedErrorResponse",
              },
            },
          },
          "ProjectIamUpdateMemberRolesRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "ProjectWithDatasources": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "avatar_url": {
                "type": "optional<string>",
              },
              "datasource_connections": {
                "type": "optional<list<DatasourceConnectionPublic>>",
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": "string",
              "org_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "tasks_oauth_client_id": {
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "QueryChatChatChatIdQueryGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "RunTaskRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetChatConfigChatChatIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "Source": {
            "enum": [
              "upload",
              "gdrive",
              "onedrive",
              "web_scrape",
              "notion",
              "confluence",
              "box",
              "dropbox",
              "sharepoint",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SourceRow": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "count": "integer",
              "source": {
                "type": "Source",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "State": {
            "enum": [
              "PENDING",
              "STARTED",
              "SUCCESS",
              "FAILURE",
              "RETRY",
              "PROGRESS",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Status": {
            "enum": [
              "unverified",
              "verified",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Task": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created": {
                "docs": "When the Task was created.",
                "type": "datetime",
              },
              "description": {
                "docs": "A longer description of the Task for internal reference.",
                "type": "optional<string>",
              },
              "enabled": {
                "docs": "When `true` the Task is active and callable. `false` denotes the Task is not yet operational.",
                "type": "boolean",
              },
              "id": {
                "docs": "The unique identifier of the Task.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "modified": {
                "docs": "When the Task was last updated.",
                "type": "datetime",
              },
              "name": {
                "docs": "A name or reference for the Task.",
                "type": "string",
              },
              "project_id": {
                "docs": "The Project that the Task belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "revisions": {
                "docs": "Each update to a Task results in a new Revision being created. Task Revisions are a powerful concept that can be used to assist with A/B testing, comparing responses from different LLM's, etc.",
                "type": "list<TaskRevision>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskForwarder": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "config": {
                "docs": "Configuration parameters for the Task Forwarder such as a `destination` URL.",
                "type": "optional<TaskForwarderConfig>",
              },
              "config_sensitive": {
                "docs": "Sensitive parameters for the Task Forwarder such as a `signing_key`.",
                "type": "optional<TaskForwarderSensitiveConfig>",
              },
              "created": {
                "docs": "When the Task Forwarder was created.",
                "type": "datetime",
              },
              "description": {
                "docs": "Additional details about the Task Forwarder's purpose or configuration.",
                "type": "optional<string>",
              },
              "id": {
                "docs": "The unique identifier of the Task Forwarder.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "modified": {
                "docs": "When the Task Forwarder was last updated.",
                "type": "datetime",
              },
              "name": {
                "docs": "A descriptive name for the Task Forwarder.",
                "type": "string",
              },
              "project_id": {
                "docs": "The Project that the Task Forwarder belongs to.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskForwarderConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "destination_url": {
                "docs": "The URL where Task Run result will be forwarded. Must be a valid HTTPS URL.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskForwarderSensitiveConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "signing_key": {
                "docs": "A secret key used to sign the forwarded data for verification purposes.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskGetMemberRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "TaskIamListMembersRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "TaskIamTestPermissionsRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
            },
          },
          "TaskIamTestPermissionsRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "TaskIamUpdateMemberRolesRequestBadRequestErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "INVALID_MEMBER": {
                "type": "InvalidMemberErrorResponse",
              },
              "INVALID_ROLE": {
                "type": "InvalidRoleErrorResponse",
              },
              "INVALID_SUBJECT_TYPE": {
                "type": "InvalidSubjectTypeErrorResponse",
              },
              "MALFORMED_RESOURCE_IDENTIFIER": {
                "type": "MalformedResourceIdentifierErrorResponse",
              },
              "MULTIPLE_ROLES_NOT_ALLOWED": {
                "type": "MultipleRolesNotAllowedErrorResponse",
              },
            },
          },
          "TaskIamUpdateMemberRolesRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "TaskLLMConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "temperature": {
                "default": 0.2,
                "docs": "Controls randomness in the output. Lower values make the output more focused and deterministic, while higher values make it more creative and diverse.",
                "type": "optional<double>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1,
                  "min": 0,
                  "multipleOf": 0.1,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskRAG": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "collection_id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "rag_param": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskRevision": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "active": {
                "default": false,
                "docs": "When `true` the Revision is the currently active version and will be activated when the Task Run is executed.",
                "type": "optional<boolean>",
              },
              "created": {
                "docs": "When the Task was created.",
                "type": "datetime",
              },
              "id": {
                "docs": "The unique identifier of the Revision.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "image_required": {
                "default": false,
                "docs": "When `true` it requires an image to be sent in the Task Run request.",
                "type": "optional<boolean>",
              },
              "llm_config": {
                "docs": "Specific configuration parameters for the LLM model.",
                "type": "optional<TaskLLMConfig>",
              },
              "llm_model": {
                "docs": "The LLM model to use for the Task.",
                "type": "TaskRevisionLlmModel",
              },
              "modified": {
                "docs": "When the Task was last updated.",
                "type": "datetime",
              },
              "output_format": {
                "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with `type` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional `description` can be passed to provide it with additional context.",
                "type": "map<string, TaskRevisionOutputFormatValue>",
              },
              "rag": {
                "audiences": [
                  "paid",
                ],
                "availability": "pre-release",
                "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
                "type": "optional<TaskRAG>",
              },
              "system_prompt": "unknown",
              "task_forwarder_id": {
                "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
                "type": "optional<string>",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "user_prompt": "unknown",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskRevisionLlmModel": {
            "docs": "The LLM model to use for the Task.",
            "enum": [
              {
                "name": "Gpt4O",
                "value": "gpt-4o",
              },
              {
                "name": "Gpt35Turbo",
                "value": "gpt-3.5-turbo",
              },
              {
                "name": "Gpt4",
                "value": "gpt-4",
              },
              {
                "name": "Gpt4Turbo",
                "value": "gpt-4-turbo",
              },
              {
                "name": "Gpt4TurboPreview",
                "value": "gpt-4-turbo-preview",
              },
              {
                "name": "Gpt41106Preview",
                "value": "gpt-4-1106-preview",
              },
              {
                "name": "Claude35Sonnet20240620",
                "value": "claude-3-5-sonnet-20240620",
              },
              {
                "name": "Claude3Haiku20240307",
                "value": "claude-3-haiku-20240307",
              },
              {
                "name": "Claude3Sonnet20240229",
                "value": "claude-3-sonnet-20240229",
              },
              {
                "name": "Claude3Opus20240229",
                "value": "claude-3-opus-20240229",
              },
              {
                "name": "Gemini15ProLatest",
                "value": "gemini-1.5-pro-latest",
              },
              {
                "name": "GeminiPro",
                "value": "gemini-pro",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskRevisionOutputFormatValue": {
            "enum": [
              "str",
              "string",
              "boolean",
              "bool",
              "int",
              "integer",
              "list",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskRun": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "created": {
                "docs": "The timestamp when the Task Run was created.",
                "type": "datetime",
              },
              "id": {
                "docs": "The unique identifier of the Task Run.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "response": {
                "docs": "The structured response from the Task execution.",
                "type": "map<string, unknown>",
              },
              "run_data": {
                "docs": "Additional data about the Task run, including audit information and submitted input.",
                "type": "map<string, unknown>",
              },
              "task_revision_id": {
                "docs": "The unique identifier of the Task Revision associated with this run.",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "Type": {
            "enum": [
              "info",
              "error",
              "success",
              "validation",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "UpdateChatChatChatIdPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "UpdateTaskForwarderRequestForbiddenErrorBody": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "reason",
            "docs": undefined,
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "MISSING_AUTHENTICATION": {
                "type": "MissingAuthenticationErrorResponse",
              },
              "PERMISSION_CHECK_FAILED": {
                "type": "PermissionCheckFailedErrorResponse",
              },
            },
          },
          "User": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "avatar_url": {
                "type": "optional<string>",
              },
              "bio": {
                "type": "optional<string>",
              },
              "email": {
                "type": "string",
                "validation": {
                  "format": "email",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "id": {
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ValidationError": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "loc": {
                "type": "list<ValidationErrorLocItem>",
              },
              "msg": "string",
              "type": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ValidationErrorLocItem": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": [
              "string",
              "integer",
            ],
          },
        },
      },
      "rawContents": "service:
  auth: false
  base-path: ''
  endpoints:
    root_ping_get:
      path: /ping
      method: GET
      auth: false
      docs: Root endpoint that returns a "Hello World" message.
      source:
        openapi: ../openapi.yml
      display-name: Root
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      examples:
        - response:
            body:
              key: value
    whoami_whoami_get:
      path: /whoami
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Whoami
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - WhoamiWhoamiGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
errors:
  OrganizationIamListMembersRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrganizationIamListMembersRequestForbiddenError:
    status-code: 403
    type: OrganizationIamListMembersRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrganizationIamListMembersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrganizationGetMemberRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrganizationGetMemberRequestForbiddenError:
    status-code: 403
    type: OrganizationGetMemberRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrganizationGetMemberRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrganizationIamUpdateMemberRolesRequestBadRequestError:
    status-code: 400
    type: OrganizationIamUpdateMemberRolesRequestBadRequestErrorBody
    docs: Bad Request
    examples:
      - value:
          reason: INVALID_MEMBER
          message: string
          invalidMemberError: {}
  OrganizationIamUpdateMemberRolesRequestForbiddenError:
    status-code: 403
    type: OrganizationIamUpdateMemberRolesRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrganizationIamUpdateMemberRolesRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  OrganizationIamUpdateMemberRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrganizationIamTestPermissionsRequestBadRequestError:
    status-code: 400
    type: OrganizationIamTestPermissionsRequestBadRequestErrorBody
    docs: Bad Request
  OrganizationIamTestPermissionsRequestForbiddenError:
    status-code: 403
    type: OrganizationIamTestPermissionsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrganizationIamTestPermissionsRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  OrganizationIamTestPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgListOrgGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgCreateOrgPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgGetOrgOrgIdGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgGetOrgOrgIdGetRequestForbiddenError:
    status-code: 403
    type: OrgGetOrgOrgIdGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgGetOrgOrgIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgUpdateOrgOrgIdPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgUpdateOrgOrgIdPostRequestForbiddenError:
    status-code: 403
    type: OrgUpdateOrgOrgIdPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgUpdateOrgOrgIdPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgJoinOrgOrgIdJoinPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgJoinOrgOrgIdJoinPostRequestForbiddenError:
    status-code: 403
    type: OrgJoinOrgOrgIdJoinPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgJoinOrgOrgIdJoinPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgInvitesListOrgOrgIdInviteGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgInvitesListOrgOrgIdInviteGetRequestForbiddenError:
    status-code: 403
    type: OrgInvitesListOrgOrgIdInviteGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgInvitesListOrgOrgIdInviteGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestError:
    status-code: 400
    type: OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestErrorBody
    docs: Bad Request
  OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenError:
    status-code: 403
    type: OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgInvitesCreateOrgOrgIdInvitePostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenError:
    status-code: 403
    type: OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgDomainsListOrgOrgIdDomainsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenError:
    status-code: 403
    type: OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgDomainsListOrgOrgIdDomainsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgDomainsPostOrgOrgIdDomainsPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenError:
    status-code: 403
    type: OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgDomainsPostOrgOrgIdDomainsPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenError:
    status-code: 403
    type: OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  OrgUpdateAvatarOrgOrgIdAvatarPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenError:
    status-code: 403
    type: OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  OrgUpdateAvatarOrgOrgIdAvatarPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UserGetUserGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UserPostUserPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UserUpdateAvatarUserAvatarPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListProjectOrgOrgIdProjectGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListProjectOrgOrgIdProjectGetRequestForbiddenError:
    status-code: 403
    type: ListProjectOrgOrgIdProjectGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListProjectOrgOrgIdProjectGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateProjectOrgOrgIdProjectPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CreateProjectOrgOrgIdProjectPostRequestForbiddenError:
    status-code: 403
    type: CreateProjectOrgOrgIdProjectPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CreateProjectOrgOrgIdProjectPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetProjectOrgOrgIdProjectProjectIdGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenError:
    status-code: 403
    type: GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetProjectOrgOrgIdProjectProjectIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateProjectOrgOrgIdProjectProjectIdPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenError:
    status-code: 403
    type: UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  UpdateProjectOrgOrgIdProjectProjectIdPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetProjectConfigOrgOrgIdProjectProjectIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenError:
    status-code: 403
    type: >-
      ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ProjectIamListMembersRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ProjectIamListMembersRequestForbiddenError:
    status-code: 403
    type: ProjectIamListMembersRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ProjectIamListMembersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ProjectGetMemberRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ProjectGetMemberRequestForbiddenError:
    status-code: 403
    type: ProjectGetMemberRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ProjectGetMemberRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ProjectIamUpdateMemberRolesRequestBadRequestError:
    status-code: 400
    type: ProjectIamUpdateMemberRolesRequestBadRequestErrorBody
    docs: Bad Request
    examples:
      - value:
          reason: INVALID_MEMBER
          message: string
          invalidMemberError: {}
  ProjectIamUpdateMemberRolesRequestForbiddenError:
    status-code: 403
    type: ProjectIamUpdateMemberRolesRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ProjectIamUpdateMemberRolesRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  ProjectIamUpdateMemberRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ProjectIamTestPermissionsRequestBadRequestError:
    status-code: 400
    type: ProjectIamTestPermissionsRequestBadRequestErrorBody
    docs: Bad Request
  ProjectIamTestPermissionsRequestForbiddenError:
    status-code: 403
    type: ProjectIamTestPermissionsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ProjectIamTestPermissionsRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  ProjectIamTestPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenError:
    status-code: 403
    type: >-
      CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenError:
    status-code: 403
    type: >-
      CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenError:
    status-code: 403
    type: >-
      CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenError:
    status-code: 403
    type: >-
      QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenError:
    status-code: 403
    type: >-
      UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenError:
    status-code: 403
    type: >-
      CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenError:
    status-code: 403
    type: >-
      CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionIamListMembersRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CollectionIamListMembersRequestForbiddenError:
    status-code: 403
    type: CollectionIamListMembersRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionIamListMembersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionGetMemberRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CollectionGetMemberRequestForbiddenError:
    status-code: 403
    type: CollectionGetMemberRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionGetMemberRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionIamUpdateMemberRolesRequestBadRequestError:
    status-code: 400
    type: CollectionIamUpdateMemberRolesRequestBadRequestErrorBody
    docs: Bad Request
    examples:
      - value:
          reason: INVALID_MEMBER
          message: string
          invalidMemberError: {}
  CollectionIamUpdateMemberRolesRequestForbiddenError:
    status-code: 403
    type: CollectionIamUpdateMemberRolesRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionIamUpdateMemberRolesRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  CollectionIamUpdateMemberRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CollectionIamTestPermissionsRequestBadRequestError:
    status-code: 400
    type: CollectionIamTestPermissionsRequestBadRequestErrorBody
    docs: Bad Request
  CollectionIamTestPermissionsRequestForbiddenError:
    status-code: 403
    type: CollectionIamTestPermissionsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CollectionIamTestPermissionsRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  CollectionIamTestPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenError:
    status-code: 403
    type: DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenError:
    status-code: 403
    type: >-
      DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenError:
    status-code: 403
    type: >-
      DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenError:
    status-code: 403
    type: >-
      TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenError:
    status-code: 403
    type: >-
      DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenError:
    status-code: 403
    type: >-
      DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenError:
    status-code: 403
    type: >-
      DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenError:
    status-code: 403
    type: >-
      DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentEmbeddingGetOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingEmbeddingIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentIamListMembersRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentIamListMembersRequestForbiddenError:
    status-code: 403
    type: DocumentIamListMembersRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentIamListMembersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentGetMemberRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DocumentGetMemberRequestForbiddenError:
    status-code: 403
    type: DocumentGetMemberRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentGetMemberRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentIamUpdateMemberRolesRequestBadRequestError:
    status-code: 400
    type: DocumentIamUpdateMemberRolesRequestBadRequestErrorBody
    docs: Bad Request
    examples:
      - value:
          reason: INVALID_MEMBER
          message: string
          invalidMemberError: {}
  DocumentIamUpdateMemberRolesRequestForbiddenError:
    status-code: 403
    type: DocumentIamUpdateMemberRolesRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentIamUpdateMemberRolesRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  DocumentIamUpdateMemberRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DocumentIamTestPermissionsRequestBadRequestError:
    status-code: 400
    type: DocumentIamTestPermissionsRequestBadRequestErrorBody
    docs: Bad Request
  DocumentIamTestPermissionsRequestForbiddenError:
    status-code: 403
    type: DocumentIamTestPermissionsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DocumentIamTestPermissionsRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  DocumentIamTestPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetRecentChatsForUserChatRecentGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetChatChatChatIdGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetChatChatChatIdGetRequestForbiddenError:
    status-code: 403
    type: GetChatChatChatIdGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetChatChatChatIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateChatChatChatIdPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  UpdateChatChatChatIdPostRequestForbiddenError:
    status-code: 403
    type: UpdateChatChatChatIdPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  UpdateChatChatChatIdPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetChatConfigChatChatIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetChatConfigChatChatIdConfigGetRequestForbiddenError:
    status-code: 403
    type: GetChatConfigChatChatIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetChatConfigChatChatIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetChatConfigChatChatIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetChatConfigChatChatIdConfigPostRequestForbiddenError:
    status-code: 403
    type: SetChatConfigChatChatIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetChatConfigChatChatIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateChatChatPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CreateChatChatPostRequestForbiddenError:
    status-code: 403
    type: CreateChatChatPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CreateChatChatPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  QueryChatChatChatIdQueryGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  QueryChatChatChatIdQueryGetRequestForbiddenError:
    status-code: 403
    type: QueryChatChatChatIdQueryGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  QueryChatChatChatIdQueryGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ChatIamListMembersRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ChatIamListMembersRequestForbiddenError:
    status-code: 403
    type: ChatIamListMembersRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ChatIamListMembersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ChatGetMemberRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ChatGetMemberRequestForbiddenError:
    status-code: 403
    type: ChatGetMemberRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ChatGetMemberRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ChatIamUpdateMemberRolesRequestBadRequestError:
    status-code: 400
    type: ChatIamUpdateMemberRolesRequestBadRequestErrorBody
    docs: Bad Request
    examples:
      - value:
          reason: INVALID_MEMBER
          message: string
          invalidMemberError: {}
  ChatIamUpdateMemberRolesRequestForbiddenError:
    status-code: 403
    type: ChatIamUpdateMemberRolesRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ChatIamUpdateMemberRolesRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  ChatIamUpdateMemberRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ChatIamTestPermissionsRequestBadRequestError:
    status-code: 400
    type: ChatIamTestPermissionsRequestBadRequestErrorBody
    docs: Bad Request
  ChatIamTestPermissionsRequestForbiddenError:
    status-code: 403
    type: ChatIamTestPermissionsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ChatIamTestPermissionsRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  ChatIamTestPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenError:
    status-code: 403
    type: >-
      CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CallbackDatasourceBoxCallbackGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenError:
    status-code: 403
    type: >-
      CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CallbackDatasourceConfluenceCallbackGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenError:
    status-code: 403
    type: >-
      CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CallbackDatasourceDropboxCallbackGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenError:
    status-code: 403
    type: >-
      CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CallbackDatasourceGdriveCallbackGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenError:
    status-code: 403
    type: >-
      CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CallbackDatasourceNotionCallbackGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenError:
    status-code: 403
    type: >-
      CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CallbackDatasourceOnedriveCallbackGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenError:
    status-code: 403
    type: >-
      AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenError:
    status-code: 403
    type: >-
      DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenError:
    status-code: 403
    type: >-
      ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenError:
    status-code: 403
    type: >-
      CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenError:
    status-code: 403
    type: >-
      GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenError:
    status-code: 403
    type: >-
      SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CallbackDatasourceSharepointCallbackGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  WebhookHydraTokenHookInternalWebhookHydraTokenHookPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenError:
    status-code: 403
    type: >-
      RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  WebhookKratosSignupCheckInternalWebhookKratosSignupCheckPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  WebhookKratosSignupCommitInternalWebhookKratosSignupCommitPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  EnableOrgOrgIdProjectProjectIdScrapePostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  FetchOrgOrgIdProjectProjectIdScrapeStartPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CheckStatusOrgOrgIdProjectProjectIdScrapeRunSyncRunIdGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  InitialiseOrgOrgIdProjectProjectIdComposePostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenError:
    status-code: 403
    type: InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  InitialiseOrgOrgIdProjectProjectIdComposePostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenError:
    status-code: 403
    type: >-
      GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenError:
    status-code: 403
    type: >-
      UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenError:
    status-code: 403
    type: >-
      SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenError:
    status-code: 403
    type: TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetAllTasksRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetAllTasksRequestForbiddenError:
    status-code: 403
    type: GetAllTasksRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetAllTasksRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateTaskRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CreateTaskRequestForbiddenError:
    status-code: 403
    type: CreateTaskRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CreateTaskRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetTaskRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetTaskRequestForbiddenError:
    status-code: 403
    type: GetTaskRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetTaskRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  EditTaskRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  EditTaskRequestForbiddenError:
    status-code: 403
    type: EditTaskRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  EditTaskRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetTaskRunsRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetTaskRunsRequestForbiddenError:
    status-code: 403
    type: GetTaskRunsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetTaskRunsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  RunTaskRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  RunTaskRequestForbiddenError:
    status-code: 403
    type: RunTaskRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  RunTaskRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  TaskIamListMembersRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  TaskIamListMembersRequestForbiddenError:
    status-code: 403
    type: TaskIamListMembersRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  TaskIamListMembersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  TaskGetMemberRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  TaskGetMemberRequestForbiddenError:
    status-code: 403
    type: TaskGetMemberRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  TaskGetMemberRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  TaskIamUpdateMemberRolesRequestBadRequestError:
    status-code: 400
    type: TaskIamUpdateMemberRolesRequestBadRequestErrorBody
    docs: Bad Request
    examples:
      - value:
          reason: INVALID_MEMBER
          message: string
          invalidMemberError: {}
  TaskIamUpdateMemberRolesRequestForbiddenError:
    status-code: 403
    type: TaskIamUpdateMemberRolesRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  TaskIamUpdateMemberRolesRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  TaskIamUpdateMemberRolesRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  TaskIamTestPermissionsRequestBadRequestError:
    status-code: 400
    type: TaskIamTestPermissionsRequestBadRequestErrorBody
    docs: Bad Request
  TaskIamTestPermissionsRequestForbiddenError:
    status-code: 403
    type: TaskIamTestPermissionsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  TaskIamTestPermissionsRequestNotFoundError:
    status-code: 404
    type: InvalidMemberErrorResponse
    docs: Not Found
    examples:
      - value:
          message: message
          invalidMemberError: {}
  TaskIamTestPermissionsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetAllTaskForwardersRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetAllTaskForwardersRequestForbiddenError:
    status-code: 403
    type: GetAllTaskForwardersRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetAllTaskForwardersRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  CreateTaskForwarderRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  CreateTaskForwarderRequestForbiddenError:
    status-code: 403
    type: CreateTaskForwarderRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  CreateTaskForwarderRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetTaskForwarderRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetTaskForwarderRequestForbiddenError:
    status-code: 403
    type: GetTaskForwarderRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetTaskForwarderRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  UpdateTaskForwarderRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  UpdateTaskForwarderRequestForbiddenError:
    status-code: 403
    type: UpdateTaskForwarderRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  UpdateTaskForwarderRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetTaskRunRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetTaskRunRequestForbiddenError:
    status-code: 403
    type: GetTaskRunRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetTaskRunRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  GetAllModelsRequestBadRequestError:
    status-code: 400
    type: MalformedResourceIdentifierErrorResponse
    docs: Bad Request
  GetAllModelsRequestForbiddenError:
    status-code: 403
    type: GetAllModelsRequestForbiddenErrorBody
    docs: Forbidden
    examples:
      - value:
          reason: PERMISSION_CHECK_FAILED
          message: string
          permissionCheckFailedError:
            permission: permission
  GetAllModelsRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  ListAvailableGuardrailsOrgOrgIdProjectProjectIdGuardrailGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
  WhoamiWhoamiGetRequestUnprocessableEntityError:
    status-code: 422
    type: HTTPValidationError
    docs: Validation Error
    examples:
      - value: {}
types:
  OrganizationIamListMembersRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrganizationGetMemberRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrganizationIamUpdateMemberRolesRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MULTIPLE_ROLES_NOT_ALLOWED:
        type: MultipleRolesNotAllowedErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
    source:
      openapi: ../openapi.yml
  OrganizationIamUpdateMemberRolesRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrganizationIamTestPermissionsRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
    source:
      openapi: ../openapi.yml
  OrganizationIamTestPermissionsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgGetOrgOrgIdGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgUpdateOrgOrgIdPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgJoinOrgOrgIdJoinPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgInvitesListOrgOrgIdInviteGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      ORGANIZATION_INVITE_ALREADY_EXISTS:
        type: OrganizationInviteAlreadyExistsErrorResponse
      ORGANIZATION_MEMBER_ALREADY_EXISTS:
        type: OrganizationMemberAlreadyExistsErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
    source:
      openapi: ../openapi.yml
  OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListProjectOrgOrgIdProjectGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CreateProjectOrgOrgIdProjectPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ProjectIamListMembersRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ProjectGetMemberRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ProjectIamUpdateMemberRolesRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MULTIPLE_ROLES_NOT_ALLOWED:
        type: MultipleRolesNotAllowedErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
    source:
      openapi: ../openapi.yml
  ProjectIamUpdateMemberRolesRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ProjectIamTestPermissionsRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
    source:
      openapi: ../openapi.yml
  ProjectIamTestPermissionsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionIamListMembersRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionGetMemberRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionIamUpdateMemberRolesRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MULTIPLE_ROLES_NOT_ALLOWED:
        type: MultipleRolesNotAllowedErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionIamUpdateMemberRolesRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionIamTestPermissionsRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
    source:
      openapi: ../openapi.yml
  CollectionIamTestPermissionsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentIamListMembersRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentGetMemberRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentIamUpdateMemberRolesRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MULTIPLE_ROLES_NOT_ALLOWED:
        type: MultipleRolesNotAllowedErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentIamUpdateMemberRolesRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentIamTestPermissionsRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
    source:
      openapi: ../openapi.yml
  DocumentIamTestPermissionsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetChatChatChatIdGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  UpdateChatChatChatIdPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetChatConfigChatChatIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetChatConfigChatChatIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CreateChatChatPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  QueryChatChatChatIdQueryGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ChatIamListMembersRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ChatGetMemberRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ChatIamUpdateMemberRolesRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MULTIPLE_ROLES_NOT_ALLOWED:
        type: MultipleRolesNotAllowedErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
    source:
      openapi: ../openapi.yml
  ChatIamUpdateMemberRolesRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ChatIamTestPermissionsRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
    source:
      openapi: ../openapi.yml
  ChatIamTestPermissionsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetAllTasksRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CreateTaskRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetTaskRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  EditTaskRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetTaskRunsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  RunTaskRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  TaskIamListMembersRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  TaskGetMemberRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  TaskIamUpdateMemberRolesRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MULTIPLE_ROLES_NOT_ALLOWED:
        type: MultipleRolesNotAllowedErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
    source:
      openapi: ../openapi.yml
  TaskIamUpdateMemberRolesRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  TaskIamTestPermissionsRequestBadRequestErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      INVALID_SUBJECT_TYPE:
        type: InvalidSubjectTypeErrorResponse
      INVALID_MEMBER:
        type: InvalidMemberErrorResponse
      INVALID_ROLE:
        type: InvalidRoleErrorResponse
      MALFORMED_RESOURCE_IDENTIFIER:
        type: MalformedResourceIdentifierErrorResponse
    source:
      openapi: ../openapi.yml
  TaskIamTestPermissionsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetAllTaskForwardersRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  CreateTaskForwarderRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetTaskForwarderRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  UpdateTaskForwarderRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetTaskRunRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  GetAllModelsRequestForbiddenErrorBody:
    discriminant: reason
    base-properties: {}
    union:
      MISSING_AUTHENTICATION:
        type: MissingAuthenticationErrorResponse
      PERMISSION_CHECK_FAILED:
        type: PermissionCheckFailedErrorResponse
    source:
      openapi: ../openapi.yml
  AsyncJobResult:
    properties:
      status: string
      task_id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  BodyFetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPost:
    properties:
      id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  BodyFetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPost:
    properties:
      id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  BodyFetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPost:
    properties:
      id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  BodyFetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPost:
    properties:
      id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  BodyFetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPost:
    properties:
      id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  BodyFetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPost:
    properties:
      id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  BodyFetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPost:
    properties:
      id:
        type: list<string>
    source:
      openapi: ../openapi.yml
  Chat:
    properties:
      title:
        type: optional<string>
      description:
        type: optional<string>
      summary:
        type: optional<string>
      collection_id:
        type: string
        validation:
          format: uuid
      created:
        type: datetime
      created_by_user_id:
        type: string
        validation:
          format: uuid
      last_message:
        type: optional<datetime>
      id:
        type: string
        validation:
          format: uuid
      documents_have_been_modified:
        type: optional<boolean>
        default: false
    source:
      openapi: ../openapi.yml
  Llm:
    enum:
      - value: gpt-4o
        name: Gpt4O
      - value: gpt-3.5-turbo
        name: Gpt35Turbo
      - value: gpt-4
        name: Gpt4
      - value: gpt-4-turbo
        name: Gpt4Turbo
      - value: gpt-4-turbo-preview
        name: Gpt4TurboPreview
      - value: gpt-4-1106-preview
        name: Gpt41106Preview
      - value: claude-3-5-sonnet-20240620
        name: Claude35Sonnet20240620
      - value: claude-3-haiku-20240307
        name: Claude3Haiku20240307
      - value: claude-3-sonnet-20240229
        name: Claude3Sonnet20240229
      - value: claude-3-opus-20240229
        name: Claude3Opus20240229
      - value: gemini-1.5-pro-latest
        name: Gemini15ProLatest
      - value: gemini-pro
        name: GeminiPro
    default: gpt-3.5-turbo
    inline: true
    source:
      openapi: ../openapi.yml
  ChatConfig:
    properties:
      llm:
        type: optional<Llm>
        default: gpt-3.5-turbo
      temperature:
        type: optional<double>
        default: 0.5
        validation:
          min: 0
          max: 1
      knn:
        type: optional<integer>
        default: 5
      chat_system_commands:
        type: optional<list<string>>
      chat_guardrails:
        type: optional<ConversationalGuardrails>
        docs: >-
          Conversational Guardrails can be defined to run against Chat `input`
          (i.e. the users query) or on Chat `output` (i.e. the LLM output)
      query_expansion:
        type: optional<boolean>
        docs: >-
          Enable query expansion. Uses an LLM to generate multiple rephrasing of
          the original query for better broad spectrum vector retrieval
        default: false
    source:
      openapi: ../openapi.yml
  ChatDocumentSource:
    enum:
      - upload
      - gdrive
      - onedrive
      - web_scrape
      - notion
      - confluence
      - box
      - dropbox
      - sharepoint
    inline: true
    source:
      openapi: ../openapi.yml
  ChatDocument:
    properties:
      title: string
      project_id:
        type: string
        validation:
          format: uuid
      description:
        type: optional<string>
      source:
        type: optional<ChatDocumentSource>
      strategy: string
      source_meta:
        type: optional<map<string, unknown>>
      connection_id:
        type: optional<string>
        validation:
          format: uuid
      id:
        type: string
        validation:
          format: uuid
      chunks: integer
      original_mime: string
      embedding_instances: optional<list<ChatDocumentEmbeddingInstance>>
    source:
      openapi: ../openapi.yml
  ChatDocumentEmbeddingInstance:
    properties:
      config:
        type: optional<map<string, unknown>>
      id:
        type: string
        validation:
          format: uuid
      chat_document_id:
        type: string
        validation:
          format: uuid
      is_active: boolean
    source:
      openapi: ../openapi.yml
  ChatDocumentEmbeddingRecord:
    properties:
      id:
        type: string
        validation:
          format: uuid
      document: string
    source:
      openapi: ../openapi.yml
  ChatDocumentQueryResult:
    properties:
      chat_document_id:
        type: string
        validation:
          format: uuid
      text: string
      score: double
    source:
      openapi: ../openapi.yml
  Id:
    enum:
      - source_validation
      - prompt_policy
      - pii_policy
    inline: true
    source:
      openapi: ../openapi.yml
  Type:
    enum:
      - info
      - error
      - success
      - validation
    inline: true
    source:
      openapi: ../openapi.yml
  ChatGuardrail:
    properties:
      id:
        type: Id
      name: string
      description: string
      type:
        type: Type
    source:
      openapi: ../openapi.yml
  Name:
    enum:
      - prompt_policy
      - pii_policy
    inline: true
    source:
      openapi: ../openapi.yml
  ChatModel:
    properties:
      name:
        type: Name
        docs: LLM reference name.
      alias:
        type: string
        docs: Human readable name for the LLM.
      provider:
        type: string
        docs: The company that produces the LLM.
      description:
        type: string
        docs: Key information about the LLM.
      supports_vision:
        type: boolean
        docs: Whether the LLM is able to see and interpret images.
        default: false
    source:
      openapi: ../openapi.yml
  Collection:
    properties:
      title: string
      project_id:
        type: string
        validation:
          format: uuid
      id:
        type: string
        validation:
          format: uuid
      summary:
        type: optional<string>
      created:
        type: datetime
      modified:
        type: datetime
      embedding_instances:
        type: optional<list<ChatDocumentEmbeddingInstance>>
    source:
      openapi: ../openapi.yml
  CollectionChatShow:
    enum:
      - all
      - viewable
    source:
      openapi: ../openapi.yml
  CollectionEmbeddingUpdate:
    properties:
      embedding_instance_ids:
        type: list<string>
    source:
      openapi: ../openapi.yml
  CollectionStatsResponse:
    properties:
      documents_by_source:
        type: list<SourceRow>
      number_of_chats: integer
    source:
      openapi: ../openapi.yml
  ComposeContent:
    properties:
      existing_content: string
    source:
      openapi: ../openapi.yml
  ComposeGenerate:
    properties:
      structure:
        type: list<InitialComposeSection>
    source:
      openapi: ../openapi.yml
  Language:
    enum:
      - english_british
      - english_american
      - french
      - chinese
      - spanish
      - korean
      - italian
      - german
    default: english_british
    inline: true
    source:
      openapi: ../openapi.yml
  ComposeInit:
    properties:
      title: string
      topic:
        type: optional<string>
      purpose:
        type: optional<string>
      audience:
        type: optional<string>
      num_sections:
        type: optional<integer>
      word_count:
        type: optional<integer>
      voice:
        type: optional<string>
      domain:
        type: optional<string>
      tone:
        type: optional<string>
      favourable_words:
        type: optional<string>
      deny_words:
        type: optional<string>
      keywords:
        type: optional<string>
      cta:
        type: optional<string>
      content:
        type: optional<string>
      language:
        type: optional<Language>
        default: english_british
    source:
      openapi: ../openapi.yml
  ComposeSectionTalkingPoint:
    properties:
      section_heading: string
    source:
      openapi: ../openapi.yml
  ComposeSectionUpdate:
    properties:
      position: integer
      section_title: string
      instructions:
        type: list<string>
      text:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  ConversationalGuardrails:
    properties:
      input:
        type: optional<list<InputConversationalGuardrailDefinition>>
        docs: List of valid Input Conversational Guardrails to enable
      output:
        type: optional<list<OutputConversationalGuardrailDefinition>>
        docs: List of valid Output Conversational Guardrails to enable
    source:
      openapi: ../openapi.yml
  Datasource:
    properties:
      name: string
      id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  DatasourceConfiguration:
    properties:
      name: string
      private: boolean
      root_folder_id: optional<string>
    source:
      openapi: ../openapi.yml
  DatasourceConnection:
    properties:
      private:
        type: optional<boolean>
      project_id:
        type: optional<string>
        validation:
          format: uuid
      datasource_id:
        type: optional<string>
        validation:
          format: uuid
      config:
        type: optional<map<string, unknown>>
      token:
        type: optional<string>
        default: ''
      created_by:
        type: optional<string>
        validation:
          format: uuid
      id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  DatasourceConnectionPublic:
    properties:
      id:
        type: string
        validation:
          format: uuid
      name: string
      private: boolean
      project_id:
        type: string
        validation:
          format: uuid
      datasource_id:
        type: string
        validation:
          format: uuid
      created:
        type: datetime
      modified:
        type: datetime
      config:
        type: optional<map<string, unknown>>
      datasource:
        type: Datasource
    source:
      openapi: ../openapi.yml
  Status:
    enum:
      - unverified
      - verified
    inline: true
    source:
      openapi: ../openapi.yml
  DatasourceSyncRun:
    properties:
      task_id:
        type: optional<string>
      status:
        type: optional<Status>
        default: pending
      run_output:
        type: optional<map<string, unknown>>
      id:
        type: string
        validation:
          format: uuid
      created:
        type: datetime
      modified:
        type: datetime
      datasource_connection:
        type: optional<DatasourceConnection>
    source:
      openapi: ../openapi.yml
  State:
    enum:
      - PENDING
      - STARTED
      - SUCCESS
      - FAILURE
      - RETRY
      - PROGRESS
    inline: true
    source:
      openapi: ../openapi.yml
  DocumentCreateTask:
    properties:
      task_id: string
      state:
        type: State
      info:
        type: optional<map<string, unknown>>
    source:
      openapi: ../openapi.yml
  DocumentStatusResponse:
    properties:
      group_id: string
      task_count: integer
      tasks:
        type: list<DocumentCreateTask>
    source:
      openapi: ../openapi.yml
  EmptyErrorDetails:
    properties: {}
    source:
      openapi: ../openapi.yml
  HTTPValidationError:
    properties:
      detail:
        type: optional<list<ValidationError>>
    source:
      openapi: ../openapi.yml
  HydraWebhookTokenHookSession:
    properties:
      client_id: string
      id_token:
        type: HydraWebhookTokenHookSessionIDTokenClaims
    source:
      openapi: ../openapi.yml
  HydraWebhookTokenHookSessionIDTokenClaims:
    properties:
      id_token_claims:
        type: map<string, unknown>
    source:
      openapi: ../openapi.yml
  IAMMember:
    properties:
      member:
        type: string
        docs: >-
          The member identifier string, the format of which is
          '<subject_type>:<subject_id>'
      roles:
        type: optional<list<string>>
        docs: >-
          A list of roles that the member holds on an entity.


          Some entities, such as Organizations, may contain members that exist
          without any roles.
      name:
        type: optional<string>
        docs: The name of the member.
      avatar_url:
        type: optional<string>
        docs: If avatar of the member, if it is supported by their subject type.
      total_subjects:
        type: optional<integer>
        docs: >-
          The total number of subjects that the member represents, which may be
          a value other than `1` if the member is not a User.
        default: 1
    source:
      openapi: ../openapi.yml
  IAMObjectErrorDetails:
    properties:
      type: string
      id:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  IAMPermissionTest:
    properties:
      permissions:
        type: list<string>
      member:
        type: optional<string>
    source:
      openapi: ../openapi.yml
  InitialComposeSection:
    properties:
      position: integer
      title: string
      ideas:
        type: optional<list<string>>
    source:
      openapi: ../openapi.yml
  InputConversationalGuardrailDefinition:
    properties:
      name:
        type: Name
    source:
      openapi: ../openapi.yml
  InvalidMemberErrorDetails:
    properties:
      resource:
        type: optional<IAMObjectErrorDetails>
      subject:
        type: optional<IAMObjectErrorDetails>
    source:
      openapi: ../openapi.yml
  InvalidMemberErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      invalidMemberError:
        type: InvalidMemberErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  InvalidRoleErrorDetails:
    properties:
      resource:
        type: optional<IAMObjectErrorDetails>
      role: string
    source:
      openapi: ../openapi.yml
  InvalidRoleErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      invalidRoleError:
        type: InvalidRoleErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  InvalidSubjectTypeErrorDetails:
    properties:
      subject:
        type: optional<IAMObjectErrorDetails>
    source:
      openapi: ../openapi.yml
  InvalidSubjectTypeErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      invalidSubjectTypeError:
        type: InvalidSubjectTypeErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  KratosIdentity:
    properties:
      id:
        type: string
        validation:
          format: uuid
      traits: optional<KratosIdentityTraits>
    extra-properties: true
    source:
      openapi: ../openapi.yml
  KratosIdentityTraits:
    properties:
      email:
        type: optional<string>
        validation:
          format: email
      name:
        type: optional<string>
      avatar_url:
        type: optional<string>
      project_id:
        type: optional<string>
        validation:
          format: uuid
      org_id:
        type: optional<string>
        validation:
          format: uuid
      sso_email_verified:
        type: optional<boolean>
    extra-properties: true
    source:
      openapi: ../openapi.yml
  KratosWebhook:
    properties:
      identity_id:
        type: string
        validation:
          format: uuid
      email:
        type: optional<string>
        validation:
          format: email
      bio:
        type: optional<string>
      flow_id:
        type: optional<string>
        validation:
          format: uuid
      flow_type:
        type: optional<string>
      identity:
        type: optional<KratosIdentity>
      ctx:
        type: optional<map<string, unknown>>
    source:
      openapi: ../openapi.yml
  KratosWebhookDetailedMessage:
    docs: |-
      Sourced from detailedMessage in:
      https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go
    properties:
      id: integer
      text: string
      type:
        type: Type
      context:
        type: optional<unknown>
    source:
      openapi: ../openapi.yml
  KratosWebhookErrorMessage:
    docs: |-
      Sourced from errorMessage in:
      https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go
    properties:
      instance_ptr: string
      messages:
        type: optional<list<KratosWebhookDetailedMessage>>
    source:
      openapi: ../openapi.yml
  Identity:
    discriminated: false
    union:
      - map<string, unknown>
      - type: KratosIdentity
    source:
      openapi: ../openapi.yml
    inline: true
  KratosWebhookResponse:
    docs: |-
      Sourced from rawHookResponse in:
      https://github.com/ory/kratos/blob/master/selfservice/hook/web_hook.go
    properties:
      messages:
        type: optional<list<KratosWebhookErrorMessage>>
      identity:
        type: optional<Identity>
    source:
      openapi: ../openapi.yml
  MalformedResourceIdentifierErrorDetails:
    properties:
      field: string
      value: unknown
      expected_format: string
    source:
      openapi: ../openapi.yml
  MalformedResourceIdentifierErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      malformedResourceIdentifierError:
        type: MalformedResourceIdentifierErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  MissingAuthenticationErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      missingAuthenticationError:
        type: EmptyErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  MultipleRolesNotAllowedErrorDetails:
    properties:
      resource:
        type: optional<IAMObjectErrorDetails>
      roles:
        type: list<string>
    source:
      openapi: ../openapi.yml
  MultipleRolesNotAllowedErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      multipleRolesNotAllowedError:
        type: MultipleRolesNotAllowedErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  OAuthClientCreateResponse:
    properties:
      name: string
      redirect_uris:
        type: list<string>
      client_id:
        type: string
        validation:
          format: uuid
      client_secret: string
      scope:
        type: optional<string>
        default: ''
    source:
      openapi: ../openapi.yml
  OAuthClientProfile:
    enum:
      - rightbrain_docs
      - rightbrain_tasks
      - user_defined
      - zendesk
    source:
      openapi: ../openapi.yml
  Object:
    properties:
      id: string
      name: string
      synced:
        type: optional<boolean>
        default: false
      size:
        type: optional<string>
      mimeType:
        type: optional<string>
      createdTime:
        type: optional<string>
      modifiedTime:
        type: optional<string>
      type: optional<ObjectType>
      tags:
        type: optional<list<ObjectTags>>
    source:
      openapi: ../openapi.yml
  ObjectList:
    type: list<Object>
  ObjectTags:
    enum:
      - no_size
      - site
    source:
      openapi: ../openapi.yml
  ObjectType:
    enum:
      - file
      - dir
    source:
      openapi: ../openapi.yml
  Org:
    properties:
      name: string
      contact_email:
        type: string
        validation:
          format: email
      avatar_url:
        type: optional<string>
      id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  OrgInviteShow:
    enum:
      - all
      - pending
      - accepted
    source:
      openapi: ../openapi.yml
  OrgMembership:
    enum:
      - active
      - joinable
      - joinable_by_domain
      - joinable_by_invite
    source:
      openapi: ../openapi.yml
  OrganizationDomain:
    properties:
      domain: string
      id:
        type: string
        validation:
          format: uuid
      status:
        type: Status
    source:
      openapi: ../openapi.yml
  OrganizationInvite:
    properties:
      email_address:
        type: string
        validation:
          format: email
      roles:
        type: optional<list<string>>
      id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  OrganizationInviteAlreadyExistsErrorDetails:
    properties:
      organization_id: string
      email_address: string
    source:
      openapi: ../openapi.yml
  OrganizationInviteAlreadyExistsErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      organizationInviteAlreadyExistsError:
        type: OrganizationInviteAlreadyExistsErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  OrganizationMemberAlreadyExistsErrorDetails:
    properties:
      organization_id: string
      member_id: string
    source:
      openapi: ../openapi.yml
  OrganizationMemberAlreadyExistsErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      organizationMemberAlreadyExistsError:
        type: OrganizationMemberAlreadyExistsErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  OutputConversationalGuardrailDefinition:
    properties:
      name:
        type: literal<"source_validation">
    source:
      openapi: ../openapi.yml
  PaginatedResultSetChatDocumentEmbeddingRecord:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<ChatDocumentEmbeddingRecord>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetChatDocument:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<ChatDocument>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetChat:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<Chat>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetCollection:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<Collection>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetDatasourceSyncRun:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<DatasourceSyncRun>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetIamMember:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<IAMMember>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetOrganizationDomain:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<OrganizationDomain>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetOrganizationInvite:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<OrganizationInvite>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetProject:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<Project>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetTaskForwarder:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<TaskForwarder>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetTaskRun:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<TaskRun>
    source:
      openapi: ../openapi.yml
  PaginatedResultSetTask:
    properties:
      pagination:
        type: optional<PaginationDetails>
        docs: Contains pagination information for the result set.
      results:
        docs: The list of items returned for the current page.
        type: list<Task>
    source:
      openapi: ../openapi.yml
  PaginationDetails:
    properties:
      next_cursor:
        type: optional<string>
        docs: >-
          A token used to retrieve the next page of results. If `null`, there
          are no more results.
      has_next:
        type: optional<boolean>
        docs: Indicates whether there are more results available in the next page.
      page_limit:
        type: optional<integer>
        docs: The maximum number of items returned per page.
    source:
      openapi: ../openapi.yml
  PermissionCheckFailedErrorDetails:
    properties:
      subject:
        type: optional<IAMObjectErrorDetails>
      resource:
        type: optional<IAMObjectErrorDetails>
      permission: string
    source:
      openapi: ../openapi.yml
  PermissionCheckFailedErrorResponse:
    properties:
      message:
        type: string
        docs: Human readable representation of the error
      permissionCheckFailedError:
        type: PermissionCheckFailedErrorDetails
        docs: Metadata detailing more information about the error.
    source:
      openapi: ../openapi.yml
  Project:
    properties:
      name: string
      avatar_url:
        type: optional<string>
      id:
        type: string
        validation:
          format: uuid
      org_id:
        type: string
        validation:
          format: uuid
      tasks_oauth_client_id:
        type: optional<string>
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  ProjectConfig:
    properties:
      llm:
        type: optional<Llm>
        default: gpt-3.5-turbo
      temperature:
        type: optional<double>
        default: 0.5
        validation:
          min: 0
          max: 1
      knn:
        type: optional<integer>
        default: 4
      chat_system_commands:
        type: optional<list<string>>
      chat_guardrails:
        type: optional<ConversationalGuardrails>
      query_expansion:
        type: optional<boolean>
        docs: >-
          Enable query expansion. Uses an LLM to generate multiple rephrasing of
          the original query for better broad spectrum vector retrieval
        default: false
    source:
      openapi: ../openapi.yml
  ProjectWithDatasources:
    properties:
      name: string
      avatar_url:
        type: optional<string>
      id:
        type: string
        validation:
          format: uuid
      org_id:
        type: string
        validation:
          format: uuid
      tasks_oauth_client_id:
        type: optional<string>
        validation:
          format: uuid
      datasource_connections:
        type: optional<list<DatasourceConnectionPublic>>
    source:
      openapi: ../openapi.yml
  Source:
    enum:
      - upload
      - gdrive
      - onedrive
      - web_scrape
      - notion
      - confluence
      - box
      - dropbox
      - sharepoint
    inline: true
    source:
      openapi: ../openapi.yml
  SourceRow:
    properties:
      source:
        type: Source
      count: integer
    source:
      openapi: ../openapi.yml
  Task:
    properties:
      name:
        type: string
        docs: A name or reference for the Task.
      description:
        type: optional<string>
        docs: A longer description of the Task for internal reference.
      enabled:
        type: boolean
        docs: >-
          When `true` the Task is active and callable. `false` denotes the Task
          is not yet operational.
      id:
        type: string
        docs: The unique identifier of the Task.
        validation:
          format: uuid
      project_id:
        type: string
        docs: The Project that the Task belongs to.
        validation:
          format: uuid
      created:
        type: datetime
        docs: When the Task was created.
      modified:
        type: datetime
        docs: When the Task was last updated.
      revisions:
        docs: >-
          Each update to a Task results in a new Revision being created. Task
          Revisions are a powerful concept that can be used to assist with A/B
          testing, comparing responses from different LLM's, etc.
        type: list<TaskRevision>
    source:
      openapi: ../openapi.yml
  TaskForwarder:
    properties:
      name:
        type: string
        docs: A descriptive name for the Task Forwarder.
      description:
        type: optional<string>
        docs: >-
          Additional details about the Task Forwarder's purpose or
          configuration.
      config:
        type: optional<TaskForwarderConfig>
        docs: >-
          Configuration parameters for the Task Forwarder such as a
          `destination` URL.
      config_sensitive:
        type: optional<TaskForwarderSensitiveConfig>
        docs: Sensitive parameters for the Task Forwarder such as a `signing_key`.
      id:
        type: string
        docs: The unique identifier of the Task Forwarder.
        validation:
          format: uuid
      project_id:
        type: string
        docs: The Project that the Task Forwarder belongs to.
        validation:
          format: uuid
      created:
        type: datetime
        docs: When the Task Forwarder was created.
      modified:
        type: datetime
        docs: When the Task Forwarder was last updated.
    source:
      openapi: ../openapi.yml
  TaskForwarderConfig:
    properties:
      destination_url:
        type: string
        docs: >-
          The URL where Task Run result will be forwarded. Must be a valid HTTPS
          URL.
    source:
      openapi: ../openapi.yml
  TaskForwarderSensitiveConfig:
    properties:
      signing_key:
        type: string
        docs: >-
          A secret key used to sign the forwarded data for verification
          purposes.
    source:
      openapi: ../openapi.yml
  TaskLLMConfig:
    properties:
      temperature:
        type: optional<double>
        docs: >-
          Controls randomness in the output. Lower values make the output more
          focused and deterministic, while higher values make it more creative
          and diverse.
        default: 0.2
        validation:
          min: 0
          max: 1
          multipleOf: 0.1
    source:
      openapi: ../openapi.yml
  TaskRAG:
    properties:
      collection_id:
        type: string
        validation:
          format: uuid
      rag_param: string
    source:
      openapi: ../openapi.yml
  TaskRevisionLlmModel:
    enum:
      - value: gpt-4o
        name: Gpt4O
      - value: gpt-3.5-turbo
        name: Gpt35Turbo
      - value: gpt-4
        name: Gpt4
      - value: gpt-4-turbo
        name: Gpt4Turbo
      - value: gpt-4-turbo-preview
        name: Gpt4TurboPreview
      - value: gpt-4-1106-preview
        name: Gpt41106Preview
      - value: claude-3-5-sonnet-20240620
        name: Claude35Sonnet20240620
      - value: claude-3-haiku-20240307
        name: Claude3Haiku20240307
      - value: claude-3-sonnet-20240229
        name: Claude3Sonnet20240229
      - value: claude-3-opus-20240229
        name: Claude3Opus20240229
      - value: gemini-1.5-pro-latest
        name: Gemini15ProLatest
      - value: gemini-pro
        name: GeminiPro
    docs: The LLM model to use for the Task.
    inline: true
    source:
      openapi: ../openapi.yml
  TaskRevisionOutputFormatValue:
    enum:
      - str
      - string
      - boolean
      - bool
      - int
      - integer
      - list
    inline: true
    source:
      openapi: ../openapi.yml
  TaskRevision:
    properties:
      system_prompt: unknown
      user_prompt: unknown
      llm_model:
        type: TaskRevisionLlmModel
        docs: The LLM model to use for the Task.
      llm_config:
        type: optional<TaskLLMConfig>
        docs: Specific configuration parameters for the LLM model.
      output_format:
        type: map<string, TaskRevisionOutputFormatValue>
        docs: >-
          This gives control over the structure of how the Task responds.
          Supports shorthand notation or an object with `type` can be specified
          for each attribute. In most instances, the LLM will be able to
          generate the desired output into the relevant property, but an
          optional `description` can be passed to provide it with additional
          context.
      task_forwarder_id:
        type: optional<string>
        docs: >-
          The unique identifier for a valid Task Forwarder. It is used to
          forward the Task output to another system or service.
        validation:
          format: uuid
      rag:
        type: optional<TaskRAG>
        docs: >-
          **Note: This is a Paid Tier feature.** Provide additional domain
          specific input to the LLM so that it is able to reference user
          specific information when executing the Task. Examples of this could
          be a product catalogue, terms and conditions or a user manual.
        availability: pre-release
        audiences:
          - paid
      image_required:
        type: optional<boolean>
        docs: When `true` it requires an image to be sent in the Task Run request.
        default: false
      id:
        type: string
        docs: The unique identifier of the Revision.
        validation:
          format: uuid
      created:
        type: datetime
        docs: When the Task was created.
      modified:
        type: datetime
        docs: When the Task was last updated.
      active:
        type: optional<boolean>
        docs: >-
          When `true` the Revision is the currently active version and will be
          activated when the Task Run is executed.
        default: false
    source:
      openapi: ../openapi.yml
  TaskRun:
    properties:
      task_revision_id:
        type: string
        docs: The unique identifier of the Task Revision associated with this run.
        validation:
          format: uuid
      response:
        type: map<string, unknown>
        docs: The structured response from the Task execution.
      run_data:
        type: map<string, unknown>
        docs: >-
          Additional data about the Task run, including audit information and
          submitted input.
      id:
        type: string
        docs: The unique identifier of the Task Run.
        validation:
          format: uuid
      created:
        type: datetime
        docs: The timestamp when the Task Run was created.
    source:
      openapi: ../openapi.yml
  User:
    properties:
      email:
        type: string
        validation:
          format: email
      name: optional<string>
      bio:
        type: optional<string>
      avatar_url:
        type: optional<string>
      id:
        type: string
        validation:
          format: uuid
    source:
      openapi: ../openapi.yml
  ValidationErrorLocItem:
    discriminated: false
    union:
      - string
      - integer
    source:
      openapi: ../openapi.yml
    inline: true
  ValidationError:
    properties:
      loc:
        type: list<ValidationErrorLocItem>
      msg: string
      type: string
    source:
      openapi: ../openapi.yml
",
    },
    "chat.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "createChat": {
              "auth": true,
              "display-name": "Create Chat",
              "docs": undefined,
              "errors": [
                "root.CreateChatChatPostRequestBadRequestError",
                "root.CreateChatChatPostRequestForbiddenError",
                "root.CreateChatChatPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {
                    "collection_id": "collection_id",
                  },
                  "response": {
                    "body": {
                      "collection_id": "collection_id",
                      "created": "2024-01-15T09:30:00Z",
                      "created_by_user_id": "created_by_user_id",
                      "description": "description",
                      "documents_have_been_modified": true,
                      "id": "id",
                      "last_message": "2024-01-15T09:30:00Z",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/chat",
              "request": {
                "body": {
                  "properties": {
                    "collection_id": {
                      "type": "string",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "description": {
                      "type": "optional<string>",
                    },
                    "summary": {
                      "type": "optional<string>",
                    },
                    "title": {
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChatCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Chat",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getChat": {
              "auth": true,
              "display-name": "Get Chat",
              "docs": undefined,
              "errors": [
                "root.GetChatChatChatIdGetRequestBadRequestError",
                "root.GetChatChatChatIdGetRequestForbiddenError",
                "root.GetChatChatChatIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                  },
                  "response": {
                    "body": {
                      "collection_id": "collection_id",
                      "created": "2024-01-15T09:30:00Z",
                      "created_by_user_id": "created_by_user_id",
                      "description": "description",
                      "documents_have_been_modified": true,
                      "id": "id",
                      "last_message": "2024-01-15T09:30:00Z",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/chat/{chat_id}",
              "path-parameters": {
                "chat_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Chat",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getChatConfig": {
              "auth": true,
              "display-name": "Get Chat Config",
              "docs": undefined,
              "errors": [
                "root.GetChatConfigChatChatIdConfigGetRequestBadRequestError",
                "root.GetChatConfigChatChatIdConfigGetRequestForbiddenError",
                "root.GetChatConfigChatChatIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                  },
                  "response": {
                    "body": {
                      "chat_guardrails": {
                        "input": [
                          {
                            "name": "prompt_policy",
                          },
                        ],
                        "output": [
                          {
                            "name": "source_validation",
                          },
                        ],
                      },
                      "chat_system_commands": [
                        "chat_system_commands",
                      ],
                      "knn": 1,
                      "llm": "gpt-4o",
                      "query_expansion": true,
                      "temperature": 1.1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/chat/{chat_id}/config",
              "path-parameters": {
                "chat_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ChatConfig",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getMember": {
              "auth": true,
              "display-name": "IAM - Lookup Chat Member",
              "docs": "Retrieve a specific member that has been granted direct access to the chat.",
              "errors": [
                "root.ChatGetMemberRequestBadRequestError",
                "root.ChatGetMemberRequestForbiddenError",
                "root.ChatGetMemberRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                    "member": "member",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/chat/{chat_id}/iam/members/{member}",
              "path-parameters": {
                "chat_id": "string",
                "member": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getRecentChatsForUser": {
              "auth": true,
              "display-name": "Get Recent Chats For User",
              "docs": undefined,
              "errors": [
                "root.GetRecentChatsForUserChatRecentGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": [
                      {
                        "collection_id": "collection_id",
                        "created": "2024-01-15T09:30:00Z",
                        "created_by_user_id": "created_by_user_id",
                        "description": "description",
                        "documents_have_been_modified": true,
                        "id": "id",
                        "last_message": "2024-01-15T09:30:00Z",
                        "summary": "summary",
                        "title": "title",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/chat/recent",
              "request": {
                "name": "GetRecentChatsForUserChatRecentGetRequest",
                "query-parameters": {
                  "project_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.Chat>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamListMembers": {
              "auth": true,
              "display-name": "IAM - List Chat Members",
              "docs": "Lists all members that have been granted direct access to the chat.",
              "errors": [
                "root.ChatIamListMembersRequestBadRequestError",
                "root.ChatIamListMembersRequestForbiddenError",
                "root.ChatIamListMembersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "avatar_url": "avatar_url",
                          "member": "member",
                          "name": "name",
                          "roles": [
                            "roles",
                          ],
                          "total_subjects": 1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/chat/{chat_id}/iam/members",
              "path-parameters": {
                "chat_id": "string",
              },
              "request": {
                "name": "ChatIamListMembersRequest",
                "query-parameters": {
                  "type": "optional<ChatIamListMembersRequestType>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetIamMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamTestPermissions": {
              "auth": true,
              "display-name": "IAM - Test Chat Permissions",
              "docs": "Test the permissions that the caller (or another subject) holds on the chat.",
              "errors": [
                "root.ChatIamTestPermissionsRequestBadRequestError",
                "root.ChatIamTestPermissionsRequestForbiddenError",
                "root.ChatIamTestPermissionsRequestNotFoundError",
                "root.ChatIamTestPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                  },
                  "request": {
                    "permissions": [
                      "add_editor",
                    ],
                  },
                  "response": {
                    "body": {
                      "member": "member",
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/chat/{chat_id}/iam/test",
              "path-parameters": {
                "chat_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "member": {
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "A list of permissions to test on the chat.",
                      "type": "list<ChatIamPermissionTestPermissionsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChatIAMPermissionTest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMPermissionTest",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamUpdateMemberRoles": {
              "auth": true,
              "display-name": "IAM - Update Chat Member",
              "docs": "Update the roles that a member holds on the chat.",
              "errors": [
                "root.ChatIamUpdateMemberRolesRequestBadRequestError",
                "root.ChatIamUpdateMemberRolesRequestForbiddenError",
                "root.ChatIamUpdateMemberRolesRequestNotFoundError",
                "root.ChatIamUpdateMemberRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                    "member": "member",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/chat/{chat_id}/iam/members/{member}",
              "path-parameters": {
                "chat_id": "string",
                "member": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "add": {
                      "docs": "A list of chat roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in `remove`.

This may be combined with `remove_all` to replace the member's entire role list.",
                      "type": "optional<list<ChatIamMemberRoleUpdateAddItem>>",
                    },
                    "remove": {
                      "docs": "A list of chat roles to revoke from the member.",
                      "type": "optional<list<ChatIamMemberRoleUpdateRemoveItem>>",
                    },
                    "remove_all": {
                      "docs": "Removes all existing roles from the member. This may be combined with `add` to replace all existing roles that the member holds.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChatIAMMemberRoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "queryChat": {
              "auth": true,
              "display-name": "Query Chat",
              "docs": undefined,
              "errors": [
                "root.QueryChatChatChatIdQueryGetRequestBadRequestError",
                "root.QueryChatChatChatIdQueryGetRequestForbiddenError",
                "root.QueryChatChatChatIdQueryGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                  },
                  "query-parameters": {
                    "query": "query",
                  },
                  "response": {
                    "body": [
                      {
                        "chat_document_id": "chat_document_id",
                        "score": 1.1,
                        "text": "text",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/chat/{chat_id}/query",
              "path-parameters": {
                "chat_id": "string",
              },
              "request": {
                "name": "QueryChatChatChatIdQueryGetRequest",
                "query-parameters": {
                  "query": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ChatDocumentQueryResult>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setChatConfig": {
              "auth": true,
              "display-name": "Set Chat Config",
              "docs": undefined,
              "errors": [
                "root.SetChatConfigChatChatIdConfigPostRequestBadRequestError",
                "root.SetChatConfigChatChatIdConfigPostRequestForbiddenError",
                "root.SetChatConfigChatChatIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "chat_guardrails": {
                        "input": [
                          {
                            "name": "prompt_policy",
                          },
                        ],
                        "output": [
                          {
                            "name": "source_validation",
                          },
                        ],
                      },
                      "chat_system_commands": [
                        "chat_system_commands",
                      ],
                      "knn": 1,
                      "llm": "gpt-4o",
                      "query_expansion": true,
                      "temperature": 1.1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/chat/{chat_id}/config",
              "path-parameters": {
                "chat_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "chat_guardrails": {
                      "docs": "Conversational Guardrails can be defined to run against Chat `input` (i.e. the users query) or on Chat `output` (i.e. the LLM output)",
                      "type": "optional<root.ConversationalGuardrails>",
                    },
                    "chat_system_commands": {
                      "type": "optional<list<string>>",
                    },
                    "knn": {
                      "default": 5,
                      "type": "optional<integer>",
                    },
                    "llm": {
                      "default": "gpt-3.5-turbo",
                      "type": "optional<Llm>",
                    },
                    "query_expansion": {
                      "default": false,
                      "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                      "type": "optional<boolean>",
                    },
                    "temperature": {
                      "default": 0.5,
                      "type": "optional<double>",
                      "validation": {
                        "exclusiveMax": undefined,
                        "exclusiveMin": undefined,
                        "max": 1,
                        "min": 0,
                        "multipleOf": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChatConfig",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ChatConfig",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "updateChat": {
              "auth": true,
              "display-name": "Update Chat",
              "docs": undefined,
              "errors": [
                "root.UpdateChatChatChatIdPostRequestBadRequestError",
                "root.UpdateChatChatChatIdPostRequestForbiddenError",
                "root.UpdateChatChatChatIdPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "chat_id": "chat_id",
                  },
                  "request": {
                    "title": "title",
                  },
                  "response": {
                    "body": {
                      "collection_id": "collection_id",
                      "created": "2024-01-15T09:30:00Z",
                      "created_by_user_id": "created_by_user_id",
                      "description": "description",
                      "documents_have_been_modified": true,
                      "id": "id",
                      "last_message": "2024-01-15T09:30:00Z",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/chat/{chat_id}",
              "path-parameters": {
                "chat_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "title": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChatUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Chat",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "ChatIamListMembersRequestType": {
            "enum": [
              "user",
              "organization",
              "project",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatIamMemberRoleUpdateAddItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatIamMemberRoleUpdateRemoveItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ChatIamPermissionTestPermissionsItem": {
            "enum": [
              "add_editor",
              "add_member",
              "add_owner",
              "edit",
              "query",
              "remove_editor",
              "remove_member",
              "remove_owner",
              "view",
              "view_members",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Llm": {
            "default": "gpt-3.5-turbo",
            "enum": [
              {
                "name": "Gpt4O",
                "value": "gpt-4o",
              },
              {
                "name": "Gpt35Turbo",
                "value": "gpt-3.5-turbo",
              },
              {
                "name": "Gpt4",
                "value": "gpt-4",
              },
              {
                "name": "Gpt4Turbo",
                "value": "gpt-4-turbo",
              },
              {
                "name": "Gpt4TurboPreview",
                "value": "gpt-4-turbo-preview",
              },
              {
                "name": "Gpt41106Preview",
                "value": "gpt-4-1106-preview",
              },
              {
                "name": "Claude35Sonnet20240620",
                "value": "claude-3-5-sonnet-20240620",
              },
              {
                "name": "Claude3Haiku20240307",
                "value": "claude-3-haiku-20240307",
              },
              {
                "name": "Claude3Sonnet20240229",
                "value": "claude-3-sonnet-20240229",
              },
              {
                "name": "Claude3Opus20240229",
                "value": "claude-3-opus-20240229",
              },
              {
                "name": "Gemini15ProLatest",
                "value": "gemini-1.5-pro-latest",
              },
              {
                "name": "GeminiPro",
                "value": "gemini-pro",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getRecentChatsForUser:
      path: /chat/recent
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Get Recent Chats For User
      request:
        name: GetRecentChatsForUserChatRecentGetRequest
        query-parameters:
          project_id: optional<string>
      response:
        docs: Successful Response
        type: list<root.Chat>
        status-code: 200
      errors:
        - root.GetRecentChatsForUserChatRecentGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              - title: title
                description: description
                summary: summary
                collection_id: collection_id
                created: '2024-01-15T09:30:00Z'
                created_by_user_id: created_by_user_id
                last_message: '2024-01-15T09:30:00Z'
                id: id
                documents_have_been_modified: true
    getChat:
      path: /chat/{chat_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
      display-name: Get Chat
      response:
        docs: Successful Response
        type: root.Chat
        status-code: 200
      errors:
        - root.GetChatChatChatIdGetRequestBadRequestError
        - root.GetChatChatChatIdGetRequestForbiddenError
        - root.GetChatChatChatIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
          response:
            body:
              title: title
              description: description
              summary: summary
              collection_id: collection_id
              created: '2024-01-15T09:30:00Z'
              created_by_user_id: created_by_user_id
              last_message: '2024-01-15T09:30:00Z'
              id: id
              documents_have_been_modified: true
    updateChat:
      path: /chat/{chat_id}
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
      display-name: Update Chat
      request:
        name: ChatUpdate
        body:
          properties:
            title: string
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Chat
        status-code: 200
      errors:
        - root.UpdateChatChatChatIdPostRequestBadRequestError
        - root.UpdateChatChatChatIdPostRequestForbiddenError
        - root.UpdateChatChatChatIdPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
          request:
            title: title
          response:
            body:
              title: title
              description: description
              summary: summary
              collection_id: collection_id
              created: '2024-01-15T09:30:00Z'
              created_by_user_id: created_by_user_id
              last_message: '2024-01-15T09:30:00Z'
              id: id
              documents_have_been_modified: true
    getChatConfig:
      path: /chat/{chat_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
      display-name: Get Chat Config
      response:
        docs: Successful Response
        type: root.ChatConfig
        status-code: 200
      errors:
        - root.GetChatConfigChatChatIdConfigGetRequestBadRequestError
        - root.GetChatConfigChatChatIdConfigGetRequestForbiddenError
        - root.GetChatConfigChatChatIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
          response:
            body:
              llm: gpt-4o
              temperature: 1.1
              knn: 1
              chat_system_commands:
                - chat_system_commands
              chat_guardrails:
                input:
                  - name: prompt_policy
                output:
                  - name: source_validation
              query_expansion: true
    setChatConfig:
      path: /chat/{chat_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
      display-name: Set Chat Config
      request:
        name: ChatConfig
        body:
          properties:
            llm:
              type: optional<Llm>
              default: gpt-3.5-turbo
            temperature:
              type: optional<double>
              default: 0.5
              validation:
                min: 0
                max: 1
            knn:
              type: optional<integer>
              default: 5
            chat_system_commands:
              type: optional<list<string>>
            chat_guardrails:
              type: optional<root.ConversationalGuardrails>
              docs: >-
                Conversational Guardrails can be defined to run against Chat
                `input` (i.e. the users query) or on Chat `output` (i.e. the LLM
                output)
            query_expansion:
              type: optional<boolean>
              docs: >-
                Enable query expansion. Uses an LLM to generate multiple
                rephrasing of the original query for better broad spectrum
                vector retrieval
              default: false
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ChatConfig
        status-code: 200
      errors:
        - root.SetChatConfigChatChatIdConfigPostRequestBadRequestError
        - root.SetChatConfigChatChatIdConfigPostRequestForbiddenError
        - root.SetChatConfigChatChatIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
          request: {}
          response:
            body:
              llm: gpt-4o
              temperature: 1.1
              knn: 1
              chat_system_commands:
                - chat_system_commands
              chat_guardrails:
                input:
                  - name: prompt_policy
                output:
                  - name: source_validation
              query_expansion: true
    createChat:
      path: /chat
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Create Chat
      request:
        name: ChatCreate
        body:
          properties:
            title:
              type: optional<string>
            description:
              type: optional<string>
            summary:
              type: optional<string>
            collection_id:
              type: string
              validation:
                format: uuid
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Chat
        status-code: 200
      errors:
        - root.CreateChatChatPostRequestBadRequestError
        - root.CreateChatChatPostRequestForbiddenError
        - root.CreateChatChatPostRequestUnprocessableEntityError
      examples:
        - request:
            collection_id: collection_id
          response:
            body:
              title: title
              description: description
              summary: summary
              collection_id: collection_id
              created: '2024-01-15T09:30:00Z'
              created_by_user_id: created_by_user_id
              last_message: '2024-01-15T09:30:00Z'
              id: id
              documents_have_been_modified: true
    queryChat:
      path: /chat/{chat_id}/query
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
      display-name: Query Chat
      request:
        name: QueryChatChatChatIdQueryGetRequest
        query-parameters:
          query: string
      response:
        docs: Successful Response
        type: list<root.ChatDocumentQueryResult>
        status-code: 200
      errors:
        - root.QueryChatChatChatIdQueryGetRequestBadRequestError
        - root.QueryChatChatChatIdQueryGetRequestForbiddenError
        - root.QueryChatChatChatIdQueryGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
          query-parameters:
            query: query
          response:
            body:
              - chat_document_id: chat_document_id
                text: text
                score: 1.1
    iamListMembers:
      path: /chat/{chat_id}/iam/members
      method: GET
      auth: true
      docs: Lists all members that have been granted direct access to the chat.
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
      display-name: IAM - List Chat Members
      request:
        name: ChatIamListMembersRequest
        query-parameters:
          type: optional<ChatIamListMembersRequestType>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetIamMember
        status-code: 200
      errors:
        - root.ChatIamListMembersRequestBadRequestError
        - root.ChatIamListMembersRequestForbiddenError
        - root.ChatIamListMembersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - member: member
                  roles:
                    - roles
                  name: name
                  avatar_url: avatar_url
                  total_subjects: 1
    getMember:
      path: /chat/{chat_id}/iam/members/{member}
      method: GET
      auth: true
      docs: >-
        Retrieve a specific member that has been granted direct access to the
        chat.
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
        member: string
      display-name: IAM - Lookup Chat Member
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.ChatGetMemberRequestBadRequestError
        - root.ChatGetMemberRequestForbiddenError
        - root.ChatGetMemberRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
            member: member
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamUpdateMemberRoles:
      path: /chat/{chat_id}/iam/members/{member}
      method: POST
      auth: true
      docs: Update the roles that a member holds on the chat.
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
        member: string
      display-name: IAM - Update Chat Member
      request:
        name: ChatIAMMemberRoleUpdate
        body:
          properties:
            add:
              type: optional<list<ChatIamMemberRoleUpdateAddItem>>
              docs: >-
                A list of chat roles to grant to the member.


                Roles in this list are applied to the member AFTER any removals
                specified in `remove`.


                This may be combined with `remove_all` to replace the member's
                entire role list.
            remove:
              type: optional<list<ChatIamMemberRoleUpdateRemoveItem>>
              docs: A list of chat roles to revoke from the member.
            remove_all:
              type: optional<boolean>
              docs: >-
                Removes all existing roles from the member. This may be combined
                with `add` to replace all existing roles that the member holds.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.ChatIamUpdateMemberRolesRequestBadRequestError
        - root.ChatIamUpdateMemberRolesRequestForbiddenError
        - root.ChatIamUpdateMemberRolesRequestNotFoundError
        - root.ChatIamUpdateMemberRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
            member: member
          request: {}
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamTestPermissions:
      path: /chat/{chat_id}/iam/test
      method: POST
      auth: true
      docs: >-
        Test the permissions that the caller (or another subject) holds on the
        chat.
      source:
        openapi: ../openapi.yml
      path-parameters:
        chat_id: string
      display-name: IAM - Test Chat Permissions
      request:
        name: ChatIAMPermissionTest
        body:
          properties:
            permissions:
              docs: A list of permissions to test on the chat.
              type: list<ChatIamPermissionTestPermissionsItem>
            member:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMPermissionTest
        status-code: 200
      errors:
        - root.ChatIamTestPermissionsRequestBadRequestError
        - root.ChatIamTestPermissionsRequestForbiddenError
        - root.ChatIamTestPermissionsRequestNotFoundError
        - root.ChatIamTestPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            chat_id: chat_id
          request:
            permissions:
              - add_editor
          response:
            body:
              permissions:
                - permissions
              member: member
  source:
    openapi: ../openapi.yml
types:
  Llm:
    enum:
      - value: gpt-4o
        name: Gpt4O
      - value: gpt-3.5-turbo
        name: Gpt35Turbo
      - value: gpt-4
        name: Gpt4
      - value: gpt-4-turbo
        name: Gpt4Turbo
      - value: gpt-4-turbo-preview
        name: Gpt4TurboPreview
      - value: gpt-4-1106-preview
        name: Gpt41106Preview
      - value: claude-3-5-sonnet-20240620
        name: Claude35Sonnet20240620
      - value: claude-3-haiku-20240307
        name: Claude3Haiku20240307
      - value: claude-3-sonnet-20240229
        name: Claude3Sonnet20240229
      - value: claude-3-opus-20240229
        name: Claude3Opus20240229
      - value: gemini-1.5-pro-latest
        name: Gemini15ProLatest
      - value: gemini-pro
        name: GeminiPro
    default: gpt-3.5-turbo
    inline: true
    source:
      openapi: ../openapi.yml
  ChatIamListMembersRequestType:
    enum:
      - user
      - organization
      - project
    source:
      openapi: ../openapi.yml
  ChatIamMemberRoleUpdateAddItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  ChatIamMemberRoleUpdateRemoveItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  ChatIamPermissionTestPermissionsItem:
    enum:
      - add_editor
      - add_member
      - add_owner
      - edit
      - query
      - remove_editor
      - remove_member
      - remove_owner
      - view
      - view_members
    inline: true
    source:
      openapi: ../openapi.yml
",
    },
    "collection.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "collectionAdd": {
              "auth": true,
              "display-name": "Collection Add",
              "docs": "Add an embedding instance to the collection",
              "errors": [
                "root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestBadRequestError",
                "root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenError",
                "root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "embedding_instance_ids": [
                      "embedding_instance_ids",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "config": {
                            "key": "value",
                          },
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "project_id": "project_id",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/add",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.CollectionEmbeddingUpdate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Collection",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "collectionEdit": {
              "auth": true,
              "display-name": "Collection Edit",
              "docs": "Edit collection details",
              "errors": [
                "root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestBadRequestError",
                "root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenError",
                "root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "title": "title",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "config": {
                            "key": "value",
                          },
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "project_id": "project_id",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "title": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CollectionUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Collection",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "collectionRemove": {
              "auth": true,
              "display-name": "Collection Remove",
              "docs": "Remove an embedding instance from the collection",
              "errors": [
                "root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestBadRequestError",
                "root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenError",
                "root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "embedding_instance_ids": [
                      "embedding_instance_ids",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "config": {
                            "key": "value",
                          },
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "project_id": "project_id",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/remove",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.CollectionEmbeddingUpdate",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Collection",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "collectionStats": {
              "auth": true,
              "display-name": "Collection Stats",
              "docs": undefined,
              "errors": [
                "root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestBadRequestError",
                "root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenError",
                "root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "documents_by_source": [
                        {
                          "count": 1,
                          "source": "upload",
                        },
                      ],
                      "number_of_chats": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/stats",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.CollectionStatsResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "createCollection": {
              "auth": true,
              "display-name": "Create Collection",
              "docs": undefined,
              "errors": [
                "root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestBadRequestError",
                "root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenError",
                "root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "title": "title",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "config": {
                            "key": "value",
                          },
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "project_id": "project_id",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "document_embedding_instance_ids": {
                      "type": "optional<list<string>>",
                    },
                    "title": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CollectionCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Collection",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getCollection": {
              "auth": true,
              "display-name": "Get Collection",
              "docs": undefined,
              "errors": [
                "root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestBadRequestError",
                "root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenError",
                "root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "config": {
                            "key": "value",
                          },
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "project_id": "project_id",
                      "summary": "summary",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Collection",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getMember": {
              "auth": true,
              "display-name": "IAM - Lookup Collection Member",
              "docs": "Retrieve a specific member that has been granted direct access to the collection.",
              "errors": [
                "root.CollectionGetMemberRequestBadRequestError",
                "root.CollectionGetMemberRequestForbiddenError",
                "root.CollectionGetMemberRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}",
              "path-parameters": {
                "collection_id": "string",
                "member": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamListMembers": {
              "auth": true,
              "display-name": "IAM - List Collection Members",
              "docs": "Lists all members that have been granted direct access to the collection.",
              "errors": [
                "root.CollectionIamListMembersRequestBadRequestError",
                "root.CollectionIamListMembersRequestForbiddenError",
                "root.CollectionIamListMembersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "avatar_url": "avatar_url",
                          "member": "member",
                          "name": "name",
                          "roles": [
                            "roles",
                          ],
                          "total_subjects": 1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CollectionIamListMembersRequest",
                "query-parameters": {
                  "type": "optional<CollectionIamListMembersRequestType>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetIamMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamTestPermissions": {
              "auth": true,
              "display-name": "IAM - Test Collection Permissions",
              "docs": "Test the permissions that the caller (or another subject) holds on the collection.",
              "errors": [
                "root.CollectionIamTestPermissionsRequestBadRequestError",
                "root.CollectionIamTestPermissionsRequestForbiddenError",
                "root.CollectionIamTestPermissionsRequestNotFoundError",
                "root.CollectionIamTestPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "permissions": [
                      "add_document",
                    ],
                  },
                  "response": {
                    "body": {
                      "member": "member",
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/test",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "member": {
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "A list of permissions to test on the collection.",
                      "type": "list<CollectionIamPermissionTestPermissionsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CollectionIAMPermissionTest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMPermissionTest",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamUpdateMemberRoles": {
              "auth": true,
              "display-name": "IAM - Update Collection Member",
              "docs": "Update the roles that a member holds on the collection.",
              "errors": [
                "root.CollectionIamUpdateMemberRolesRequestBadRequestError",
                "root.CollectionIamUpdateMemberRolesRequestForbiddenError",
                "root.CollectionIamUpdateMemberRolesRequestNotFoundError",
                "root.CollectionIamUpdateMemberRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}",
              "path-parameters": {
                "collection_id": "string",
                "member": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "add": {
                      "docs": "A list of collection roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in `remove`.

This may be combined with `remove_all` to replace the member's entire role list.",
                      "type": "optional<list<CollectionIamMemberRoleUpdateAddItem>>",
                    },
                    "remove": {
                      "docs": "A list of collection roles to revoke from the member.",
                      "type": "optional<list<CollectionIamMemberRoleUpdateRemoveItem>>",
                    },
                    "remove_all": {
                      "docs": "Removes all existing roles from the member. This may be combined with `add` to replace all existing roles that the member holds.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CollectionIAMMemberRoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listChats": {
              "auth": true,
              "display-name": "List Chats",
              "docs": undefined,
              "errors": [
                "root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestBadRequestError",
                "root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenError",
                "root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "collection_id": "collection_id",
                          "created": "2024-01-15T09:30:00Z",
                          "created_by_user_id": "created_by_user_id",
                          "description": "description",
                          "documents_have_been_modified": true,
                          "id": "id",
                          "last_message": "2024-01-15T09:30:00Z",
                          "summary": "summary",
                          "title": "title",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/chat",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                  "show": "optional<root.CollectionChatShow>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetChat",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listCollections": {
              "auth": true,
              "display-name": "List Collections",
              "docs": undefined,
              "errors": [
                "root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestBadRequestError",
                "root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenError",
                "root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "embedding_instances": [
                            {
                              "chat_document_id": "chat_document_id",
                              "id": "id",
                              "is_active": true,
                            },
                          ],
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "project_id": "project_id",
                          "summary": "summary",
                          "title": "title",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                  "title": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetCollection",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "queryCollection": {
              "auth": true,
              "display-name": "Query Collection",
              "docs": undefined,
              "errors": [
                "root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestBadRequestError",
                "root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenError",
                "root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "query": "query",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/query",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "query": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "CollectionQuery",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "updateSummary": {
              "auth": true,
              "display-name": "Update Summary",
              "docs": "Generate and update the summary for a collection",
              "errors": [
                "root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestBadRequestError",
                "root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenError",
                "root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "collection_id": "collection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "status": "status",
                      "task_id": [
                        "task_id",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/collection/{collection_id}/update_summary",
              "path-parameters": {
                "collection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.AsyncJobResult",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "CollectionIamListMembersRequestType": {
            "enum": [
              "user",
              "organization",
              "project",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CollectionIamMemberRoleUpdateAddItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CollectionIamMemberRoleUpdateRemoveItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "CollectionIamPermissionTestPermissionsItem": {
            "enum": [
              "add_document",
              "add_editor",
              "add_member",
              "add_owner",
              "create_chat",
              "edit",
              "list_chats",
              "query",
              "remove_document",
              "remove_editor",
              "remove_member",
              "remove_owner",
              "view",
              "view_members",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listCollections:
      path: /org/{org_id}/project/{project_id}/collection
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: List Collections
      request:
        name: ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequest
        query-parameters:
          title: optional<string>
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetCollection
        status-code: 200
      errors:
        - >-
          root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestBadRequestError
        - >-
          root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestForbiddenError
        - >-
          root.ListCollectionsOrgOrgIdProjectProjectIdCollectionGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - title: title
                  project_id: project_id
                  id: id
                  summary: summary
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  embedding_instances:
                    - id: id
                      chat_document_id: chat_document_id
                      is_active: true
    createCollection:
      path: /org/{org_id}/project/{project_id}/collection
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Create Collection
      request:
        name: CollectionCreate
        body:
          properties:
            title: string
            document_embedding_instance_ids:
              type: optional<list<string>>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Collection
        status-code: 200
      errors:
        - >-
          root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestBadRequestError
        - >-
          root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestForbiddenError
        - >-
          root.CreateCollectionOrgOrgIdProjectProjectIdCollectionPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            title: title
          response:
            body:
              title: title
              project_id: project_id
              id: id
              summary: summary
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              embedding_instances:
                - config:
                    key: value
                  id: id
                  chat_document_id: chat_document_id
                  is_active: true
    getCollection:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: Get Collection
      response:
        docs: Successful Response
        type: root.Collection
        status-code: 200
      errors:
        - >-
          root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestBadRequestError
        - >-
          root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestForbiddenError
        - >-
          root.GetCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          response:
            body:
              title: title
              project_id: project_id
              id: id
              summary: summary
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              embedding_instances:
                - config:
                    key: value
                  id: id
                  chat_document_id: chat_document_id
                  is_active: true
    collectionEdit:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}
      method: POST
      auth: true
      docs: Edit collection details
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: Collection Edit
      request:
        name: CollectionUpdate
        body:
          properties:
            title: string
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Collection
        status-code: 200
      errors:
        - >-
          root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestBadRequestError
        - >-
          root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestForbiddenError
        - >-
          root.CollectionEditOrgOrgIdProjectProjectIdCollectionCollectionIdPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          request:
            title: title
          response:
            body:
              title: title
              project_id: project_id
              id: id
              summary: summary
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              embedding_instances:
                - config:
                    key: value
                  id: id
                  chat_document_id: chat_document_id
                  is_active: true
    collectionStats:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}/stats
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: Collection Stats
      response:
        docs: Successful Response
        type: root.CollectionStatsResponse
        status-code: 200
      errors:
        - >-
          root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestBadRequestError
        - >-
          root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestForbiddenError
        - >-
          root.CollectionStatsOrgOrgIdProjectProjectIdCollectionCollectionIdStatsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          response:
            body:
              documents_by_source:
                - source: upload
                  count: 1
              number_of_chats: 1
    listChats:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}/chat
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: List Chats
      request:
        name: ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequest
        query-parameters:
          show: optional<root.CollectionChatShow>
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetChat
        status-code: 200
      errors:
        - >-
          root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestBadRequestError
        - >-
          root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestForbiddenError
        - >-
          root.ListChatsOrgOrgIdProjectProjectIdCollectionCollectionIdChatGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - title: title
                  description: description
                  summary: summary
                  collection_id: collection_id
                  created: '2024-01-15T09:30:00Z'
                  created_by_user_id: created_by_user_id
                  last_message: '2024-01-15T09:30:00Z'
                  id: id
                  documents_have_been_modified: true
    queryCollection:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}/query
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: Query Collection
      request:
        name: CollectionQuery
        body:
          properties:
            query: string
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestBadRequestError
        - >-
          root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestForbiddenError
        - >-
          root.QueryCollectionOrgOrgIdProjectProjectIdCollectionCollectionIdQueryPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          request:
            query: query
          response:
            body:
              key: value
    updateSummary:
      path: >-
        /org/{org_id}/project/{project_id}/collection/{collection_id}/update_summary
      method: POST
      auth: true
      docs: Generate and update the summary for a collection
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: Update Summary
      response:
        docs: Successful Response
        type: root.AsyncJobResult
        status-code: 200
      errors:
        - >-
          root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestBadRequestError
        - >-
          root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestForbiddenError
        - >-
          root.UpdateSummaryOrgOrgIdProjectProjectIdCollectionCollectionIdUpdateSummaryPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          response:
            body:
              status: status
              task_id:
                - task_id
    collectionAdd:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}/add
      method: POST
      auth: true
      docs: Add an embedding instance to the collection
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: Collection Add
      request:
        body:
          type: root.CollectionEmbeddingUpdate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Collection
        status-code: 200
      errors:
        - >-
          root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestBadRequestError
        - >-
          root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestForbiddenError
        - >-
          root.CollectionAddOrgOrgIdProjectProjectIdCollectionCollectionIdAddPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          request:
            embedding_instance_ids:
              - embedding_instance_ids
          response:
            body:
              title: title
              project_id: project_id
              id: id
              summary: summary
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              embedding_instances:
                - config:
                    key: value
                  id: id
                  chat_document_id: chat_document_id
                  is_active: true
    collectionRemove:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}/remove
      method: POST
      auth: true
      docs: Remove an embedding instance from the collection
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: Collection Remove
      request:
        body:
          type: root.CollectionEmbeddingUpdate
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Collection
        status-code: 200
      errors:
        - >-
          root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestBadRequestError
        - >-
          root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestForbiddenError
        - >-
          root.CollectionRemoveOrgOrgIdProjectProjectIdCollectionCollectionIdRemovePostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          request:
            embedding_instance_ids:
              - embedding_instance_ids
          response:
            body:
              title: title
              project_id: project_id
              id: id
              summary: summary
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              embedding_instances:
                - config:
                    key: value
                  id: id
                  chat_document_id: chat_document_id
                  is_active: true
    iamListMembers:
      path: >-
        /org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members
      method: GET
      auth: true
      docs: >-
        Lists all members that have been granted direct access to the
        collection.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: IAM - List Collection Members
      request:
        name: CollectionIamListMembersRequest
        query-parameters:
          type: optional<CollectionIamListMembersRequestType>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetIamMember
        status-code: 200
      errors:
        - root.CollectionIamListMembersRequestBadRequestError
        - root.CollectionIamListMembersRequestForbiddenError
        - root.CollectionIamListMembersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - member: member
                  roles:
                    - roles
                  name: name
                  avatar_url: avatar_url
                  total_subjects: 1
    getMember:
      path: >-
        /org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}
      method: GET
      auth: true
      docs: >-
        Retrieve a specific member that has been granted direct access to the
        collection.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
        member: string
      display-name: IAM - Lookup Collection Member
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.CollectionGetMemberRequestBadRequestError
        - root.CollectionGetMemberRequestForbiddenError
        - root.CollectionGetMemberRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
            member: member
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamUpdateMemberRoles:
      path: >-
        /org/{org_id}/project/{project_id}/collection/{collection_id}/iam/members/{member}
      method: POST
      auth: true
      docs: Update the roles that a member holds on the collection.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
        member: string
      display-name: IAM - Update Collection Member
      request:
        name: CollectionIAMMemberRoleUpdate
        body:
          properties:
            add:
              type: optional<list<CollectionIamMemberRoleUpdateAddItem>>
              docs: >-
                A list of collection roles to grant to the member.


                Roles in this list are applied to the member AFTER any removals
                specified in `remove`.


                This may be combined with `remove_all` to replace the member's
                entire role list.
            remove:
              type: optional<list<CollectionIamMemberRoleUpdateRemoveItem>>
              docs: A list of collection roles to revoke from the member.
            remove_all:
              type: optional<boolean>
              docs: >-
                Removes all existing roles from the member. This may be combined
                with `add` to replace all existing roles that the member holds.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.CollectionIamUpdateMemberRolesRequestBadRequestError
        - root.CollectionIamUpdateMemberRolesRequestForbiddenError
        - root.CollectionIamUpdateMemberRolesRequestNotFoundError
        - root.CollectionIamUpdateMemberRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
            member: member
          request: {}
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamTestPermissions:
      path: /org/{org_id}/project/{project_id}/collection/{collection_id}/iam/test
      method: POST
      auth: true
      docs: >-
        Test the permissions that the caller (or another subject) holds on the
        collection.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        collection_id: string
      display-name: IAM - Test Collection Permissions
      request:
        name: CollectionIAMPermissionTest
        body:
          properties:
            permissions:
              docs: A list of permissions to test on the collection.
              type: list<CollectionIamPermissionTestPermissionsItem>
            member:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMPermissionTest
        status-code: 200
      errors:
        - root.CollectionIamTestPermissionsRequestBadRequestError
        - root.CollectionIamTestPermissionsRequestForbiddenError
        - root.CollectionIamTestPermissionsRequestNotFoundError
        - root.CollectionIamTestPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            collection_id: collection_id
          request:
            permissions:
              - add_document
          response:
            body:
              permissions:
                - permissions
              member: member
  source:
    openapi: ../openapi.yml
types:
  CollectionIamListMembersRequestType:
    enum:
      - user
      - organization
      - project
    source:
      openapi: ../openapi.yml
  CollectionIamMemberRoleUpdateAddItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  CollectionIamMemberRoleUpdateRemoveItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  CollectionIamPermissionTestPermissionsItem:
    enum:
      - add_document
      - add_editor
      - add_member
      - add_owner
      - create_chat
      - edit
      - list_chats
      - query
      - remove_document
      - remove_editor
      - remove_member
      - remove_owner
      - view
      - view_members
    inline: true
    source:
      openapi: ../openapi.yml
",
    },
    "compose.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "generate": {
              "auth": true,
              "display-name": "Generate",
              "docs": undefined,
              "errors": [
                "root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestBadRequestError",
                "root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenError",
                "root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "compose": {
                      "structure": [
                        {
                          "position": 1,
                          "title": "title",
                        },
                      ],
                    },
                    "context": {
                      "title": "title",
                    },
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/compose/generate",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "compose": {
                      "type": "root.ComposeGenerate",
                    },
                    "context": {
                      "type": "root.ComposeInit",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BodyGenerateOrgOrgIdProjectProjectIdComposeGeneratePost",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "initialise": {
              "auth": true,
              "display-name": "Initialise",
              "docs": undefined,
              "errors": [
                "root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestBadRequestError",
                "root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenError",
                "root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "title": "title",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/compose",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.ComposeInit",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "sectionTalkingPoints": {
              "auth": true,
              "display-name": "Section Talking Points",
              "docs": undefined,
              "errors": [
                "root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestBadRequestError",
                "root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenError",
                "root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "context": {
                      "title": "title",
                    },
                    "existing_content": {
                      "existing_content": "existing_content",
                    },
                    "update_instruction": {
                      "section_heading": "section_heading",
                    },
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/compose/section_talking_points",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "context": {
                      "type": "root.ComposeInit",
                    },
                    "existing_content": {
                      "type": "root.ComposeContent",
                    },
                    "update_instruction": {
                      "type": "root.ComposeSectionTalkingPoint",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BodySectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPost",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "topic": {
              "auth": true,
              "display-name": "Topic",
              "docs": undefined,
              "errors": [
                "root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestBadRequestError",
                "root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenError",
                "root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "title": "title",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/compose/topic",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "category": {
                      "default": "blog",
                      "type": "optional<string>",
                    },
                    "title": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ComposeTopicPoint",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "updateSection": {
              "auth": true,
              "display-name": "Update Section",
              "docs": undefined,
              "errors": [
                "root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestBadRequestError",
                "root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenError",
                "root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "context": {
                      "title": "title",
                    },
                    "existing_content": {
                      "existing_content": "existing_content",
                    },
                    "update_instruction": {
                      "instructions": [
                        "instructions",
                      ],
                      "position": 1,
                      "section_title": "section_title",
                    },
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/compose/update_section",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "context": {
                      "type": "root.ComposeInit",
                    },
                    "existing_content": {
                      "type": "root.ComposeContent",
                    },
                    "update_instruction": {
                      "type": "root.ComposeSectionUpdate",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "BodyUpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPost",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    initialise:
      path: /org/{org_id}/project/{project_id}/compose
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Initialise
      request:
        body:
          type: root.ComposeInit
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestBadRequestError
        - >-
          root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestForbiddenError
        - >-
          root.InitialiseOrgOrgIdProjectProjectIdComposePostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            title: title
          response:
            body:
              key: value
    generate:
      path: /org/{org_id}/project/{project_id}/compose/generate
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Generate
      request:
        name: BodyGenerateOrgOrgIdProjectProjectIdComposeGeneratePost
        body:
          properties:
            compose:
              type: root.ComposeGenerate
            context:
              type: root.ComposeInit
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestBadRequestError
        - >-
          root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestForbiddenError
        - >-
          root.GenerateOrgOrgIdProjectProjectIdComposeGeneratePostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            compose:
              structure:
                - position: 1
                  title: title
            context:
              title: title
          response:
            body:
              key: value
    updateSection:
      path: /org/{org_id}/project/{project_id}/compose/update_section
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Update Section
      request:
        name: BodyUpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPost
        body:
          properties:
            context:
              type: root.ComposeInit
            existing_content:
              type: root.ComposeContent
            update_instruction:
              type: root.ComposeSectionUpdate
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestBadRequestError
        - >-
          root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestForbiddenError
        - >-
          root.UpdateSectionOrgOrgIdProjectProjectIdComposeUpdateSectionPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            context:
              title: title
            existing_content:
              existing_content: existing_content
            update_instruction:
              position: 1
              section_title: section_title
              instructions:
                - instructions
          response:
            body:
              key: value
    sectionTalkingPoints:
      path: /org/{org_id}/project/{project_id}/compose/section_talking_points
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Section Talking Points
      request:
        name: >-
          BodySectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPost
        body:
          properties:
            context:
              type: root.ComposeInit
            existing_content:
              type: root.ComposeContent
            update_instruction:
              type: root.ComposeSectionTalkingPoint
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestBadRequestError
        - >-
          root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestForbiddenError
        - >-
          root.SectionTalkingPointsOrgOrgIdProjectProjectIdComposeSectionTalkingPointsPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            context:
              title: title
            existing_content:
              existing_content: existing_content
            update_instruction:
              section_heading: section_heading
          response:
            body:
              key: value
    topic:
      path: /org/{org_id}/project/{project_id}/compose/topic
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Topic
      request:
        name: ComposeTopicPoint
        body:
          properties:
            category:
              type: optional<string>
              default: blog
            title: string
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestBadRequestError
        - >-
          root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestForbiddenError
        - >-
          root.TopicOrgOrgIdProjectProjectIdComposeTopicPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            title: title
          response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "datasourceBox.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "authorize": {
              "auth": true,
              "display-name": "Authorize",
              "docs": undefined,
              "errors": [
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestBadRequestError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/authorize",
              "path-parameters": {
                "connection_id": "optional<string>",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequest",
                "query-parameters": {
                  "redirect_to": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "callback": {
              "auth": true,
              "display-name": "Callback",
              "docs": undefined,
              "errors": [
                "root.CallbackDatasourceBoxCallbackGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/datasource/box/callback",
              "request": {
                "name": "CallbackDatasourceBoxCallbackGetRequest",
                "query-parameters": {
                  "code": "optional<string>",
                  "state": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "checkStatus": {
              "auth": true,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestBadRequestError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/run",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequest",
                "query-parameters": {
                  "sync_run_id": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "Delete",
              "docs": undefined,
              "errors": [
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestBadRequestError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Fetch",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "id": [
                      "id",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/fetch",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.BodyFetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPost",
                },
                "content-type": "application/x-www-form-urlencoded",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getConfiguration": {
              "auth": true,
              "display-name": "Get Configuration",
              "docs": undefined,
              "errors": [
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestBadRequestError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "name": "name",
                      "private": true,
                      "root_folder_id": "root_folder_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceConfiguration",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listFiles": {
              "auth": true,
              "display-name": "List Files",
              "docs": undefined,
              "errors": [
                "root.ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "createdTime": "createdTime",
                        "id": "id",
                        "mimeType": "mimeType",
                        "modifiedTime": "modifiedTime",
                        "name": "name",
                        "size": "size",
                        "synced": true,
                        "tags": [
                          "no_size",
                        ],
                        "type": "file",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/list-files",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequest",
                "query-parameters": {
                  "parent_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ObjectList",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestBadRequestError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/runs",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setConfiguration": {
              "auth": true,
              "display-name": "Set Configuration",
              "docs": undefined,
              "errors": [
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestBadRequestError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "name": "name",
                    "private": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.DatasourceConfiguration",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFiles:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/box/{connection_id}/list-files
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Files
      request:
        name: >-
          ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequest
        query-parameters:
          parent_id: optional<string>
      response:
        docs: Successful Response
        type: root.ObjectList
        status-code: 200
      errors:
        - >-
          root.ListFilesOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdListFilesGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              - id: id
                name: name
                synced: true
                size: size
                mimeType: mimeType
                createdTime: createdTime
                modifiedTime: modifiedTime
                type: file
                tags:
                  - no_size
    fetch:
      path: /org/{org_id}/project/{project_id}/datasource/box/{connection_id}/fetch
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Fetch
      request:
        body:
          type: >-
            root.BodyFetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPost
        content-type: application/x-www-form-urlencoded
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdFetchPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            id:
              - id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    authorize:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/box/{connection_id}/authorize
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: optional<string>
      display-name: Authorize
      request:
        name: >-
          AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequest
        query-parameters:
          redirect_to: optional<string>
      errors:
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestBadRequestError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestForbiddenError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdAuthorizeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
    delete:
      path: /org/{org_id}/project/{project_id}/datasource/box/{connection_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestBadRequestError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestForbiddenError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              key: value
    listRuns:
      path: /org/{org_id}/project/{project_id}/datasource/box/{connection_id}/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Runs
      request:
        name: >-
          ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestBadRequestError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestForbiddenError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
    checkStatus:
      path: /org/{org_id}/project/{project_id}/datasource/box/{connection_id}/run
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Check Status
      request:
        name: >-
          CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequest
        query-parameters:
          sync_run_id: string
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestBadRequestError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestForbiddenError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdRunGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          query-parameters:
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    getConfiguration:
      path: /org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Get Configuration
      response:
        docs: Successful Response
        type: root.DatasourceConfiguration
        status-code: 200
      errors:
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestBadRequestError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestForbiddenError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              name: name
              private: true
              root_folder_id: root_folder_id
    setConfiguration:
      path: /org/{org_id}/project/{project_id}/datasource/box/{connection_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Set Configuration
      request:
        body:
          type: root.DatasourceConfiguration
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestBadRequestError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestForbiddenError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceBoxConnectionIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            name: name
            private: true
          response:
            body:
              key: value
    callback:
      path: /datasource/box/callback
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Callback
      request:
        name: CallbackDatasourceBoxCallbackGetRequest
        query-parameters:
          code: optional<string>
          state: optional<string>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - root.CallbackDatasourceBoxCallbackGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "datasourceConfluence.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "authorize": {
              "auth": true,
              "display-name": "Authorize",
              "docs": undefined,
              "errors": [
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestBadRequestError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/authorize",
              "path-parameters": {
                "connection_id": "optional<string>",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequest",
                "query-parameters": {
                  "redirect_to": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "callback": {
              "auth": true,
              "display-name": "Callback",
              "docs": undefined,
              "errors": [
                "root.CallbackDatasourceConfluenceCallbackGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/datasource/confluence/callback",
              "request": {
                "name": "CallbackDatasourceConfluenceCallbackGetRequest",
                "query-parameters": {
                  "code": "optional<string>",
                  "state": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "checkStatus": {
              "auth": true,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestBadRequestError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/run",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequest",
                "query-parameters": {
                  "sync_run_id": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "Delete",
              "docs": undefined,
              "errors": [
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestBadRequestError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Fetch",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "id": [
                      "id",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/fetch",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.BodyFetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPost",
                },
                "content-type": "application/x-www-form-urlencoded",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getConfiguration": {
              "auth": true,
              "display-name": "Get Configuration",
              "docs": undefined,
              "errors": [
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestBadRequestError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "name": "name",
                      "private": true,
                      "root_folder_id": "root_folder_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceConfiguration",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listFiles": {
              "auth": true,
              "display-name": "List Files",
              "docs": undefined,
              "errors": [
                "root.ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "createdTime": "createdTime",
                        "id": "id",
                        "mimeType": "mimeType",
                        "modifiedTime": "modifiedTime",
                        "name": "name",
                        "size": "size",
                        "synced": true,
                        "tags": [
                          "no_size",
                        ],
                        "type": "file",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/list-files",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequest",
                "query-parameters": {
                  "parent_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ObjectList",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestBadRequestError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/runs",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setConfiguration": {
              "auth": true,
              "display-name": "Set Configuration",
              "docs": undefined,
              "errors": [
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestBadRequestError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "name": "name",
                    "private": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.DatasourceConfiguration",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFiles:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/list-files
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Files
      request:
        name: >-
          ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequest
        query-parameters:
          parent_id: optional<string>
      response:
        docs: Successful Response
        type: root.ObjectList
        status-code: 200
      errors:
        - >-
          root.ListFilesOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdListFilesGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              - id: id
                name: name
                synced: true
                size: size
                mimeType: mimeType
                createdTime: createdTime
                modifiedTime: modifiedTime
                type: file
                tags:
                  - no_size
    fetch:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/fetch
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Fetch
      request:
        body:
          type: >-
            root.BodyFetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPost
        content-type: application/x-www-form-urlencoded
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdFetchPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            id:
              - id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    authorize:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/authorize
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: optional<string>
      display-name: Authorize
      request:
        name: >-
          AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequest
        query-parameters:
          redirect_to: optional<string>
      errors:
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestBadRequestError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestForbiddenError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdAuthorizeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
    delete:
      path: /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestBadRequestError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestForbiddenError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              key: value
    listRuns:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Runs
      request:
        name: >-
          ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestBadRequestError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestForbiddenError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
    checkStatus:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/run
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Check Status
      request:
        name: >-
          CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequest
        query-parameters:
          sync_run_id: string
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestBadRequestError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestForbiddenError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdRunGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          query-parameters:
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    getConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Get Configuration
      response:
        docs: Successful Response
        type: root.DatasourceConfiguration
        status-code: 200
      errors:
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestBadRequestError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestForbiddenError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              name: name
              private: true
              root_folder_id: root_folder_id
    setConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/confluence/{connection_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Set Configuration
      request:
        body:
          type: root.DatasourceConfiguration
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestBadRequestError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestForbiddenError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceConfluenceConnectionIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            name: name
            private: true
          response:
            body:
              key: value
    callback:
      path: /datasource/confluence/callback
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Callback
      request:
        name: CallbackDatasourceConfluenceCallbackGetRequest
        query-parameters:
          code: optional<string>
          state: optional<string>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.CallbackDatasourceConfluenceCallbackGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "datasourceDropbox.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "authorize": {
              "auth": true,
              "display-name": "Authorize",
              "docs": undefined,
              "errors": [
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestBadRequestError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/authorize",
              "path-parameters": {
                "connection_id": "optional<string>",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequest",
                "query-parameters": {
                  "redirect_to": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "callback": {
              "auth": true,
              "display-name": "Callback",
              "docs": undefined,
              "errors": [
                "root.CallbackDatasourceDropboxCallbackGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/datasource/dropbox/callback",
              "request": {
                "name": "CallbackDatasourceDropboxCallbackGetRequest",
                "query-parameters": {
                  "code": "optional<string>",
                  "state": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "checkStatus": {
              "auth": true,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestBadRequestError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/run",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequest",
                "query-parameters": {
                  "sync_run_id": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "Delete",
              "docs": undefined,
              "errors": [
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestBadRequestError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Fetch",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "id": [
                      "id",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/fetch",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.BodyFetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPost",
                },
                "content-type": "application/x-www-form-urlencoded",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getConfiguration": {
              "auth": true,
              "display-name": "Get Configuration",
              "docs": undefined,
              "errors": [
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestBadRequestError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "name": "name",
                      "private": true,
                      "root_folder_id": "root_folder_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceConfiguration",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listFiles": {
              "auth": true,
              "display-name": "List Files",
              "docs": undefined,
              "errors": [
                "root.ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "createdTime": "createdTime",
                        "id": "id",
                        "mimeType": "mimeType",
                        "modifiedTime": "modifiedTime",
                        "name": "name",
                        "size": "size",
                        "synced": true,
                        "tags": [
                          "no_size",
                        ],
                        "type": "file",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/list-files",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequest",
                "query-parameters": {
                  "parent_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ObjectList",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestBadRequestError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/runs",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setConfiguration": {
              "auth": true,
              "display-name": "Set Configuration",
              "docs": undefined,
              "errors": [
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestBadRequestError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "name": "name",
                    "private": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.DatasourceConfiguration",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFiles:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/list-files
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Files
      request:
        name: >-
          ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequest
        query-parameters:
          parent_id: optional<string>
      response:
        docs: Successful Response
        type: root.ObjectList
        status-code: 200
      errors:
        - >-
          root.ListFilesOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdListFilesGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              - id: id
                name: name
                synced: true
                size: size
                mimeType: mimeType
                createdTime: createdTime
                modifiedTime: modifiedTime
                type: file
                tags:
                  - no_size
    fetch:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/fetch
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Fetch
      request:
        body:
          type: >-
            root.BodyFetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPost
        content-type: application/x-www-form-urlencoded
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdFetchPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            id:
              - id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    authorize:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/authorize
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: optional<string>
      display-name: Authorize
      request:
        name: >-
          AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequest
        query-parameters:
          redirect_to: optional<string>
      errors:
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestBadRequestError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestForbiddenError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdAuthorizeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
    delete:
      path: /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestBadRequestError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestForbiddenError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              key: value
    listRuns:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Runs
      request:
        name: >-
          ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestBadRequestError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestForbiddenError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
    checkStatus:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/run
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Check Status
      request:
        name: >-
          CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequest
        query-parameters:
          sync_run_id: string
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestBadRequestError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestForbiddenError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdRunGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          query-parameters:
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    getConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Get Configuration
      response:
        docs: Successful Response
        type: root.DatasourceConfiguration
        status-code: 200
      errors:
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestBadRequestError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestForbiddenError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              name: name
              private: true
              root_folder_id: root_folder_id
    setConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/dropbox/{connection_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Set Configuration
      request:
        body:
          type: root.DatasourceConfiguration
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestBadRequestError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestForbiddenError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceDropboxConnectionIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            name: name
            private: true
          response:
            body:
              key: value
    callback:
      path: /datasource/dropbox/callback
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Callback
      request:
        name: CallbackDatasourceDropboxCallbackGetRequest
        query-parameters:
          code: optional<string>
          state: optional<string>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.CallbackDatasourceDropboxCallbackGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "datasourceGdrive.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "authorize": {
              "auth": true,
              "display-name": "Authorize",
              "docs": undefined,
              "errors": [
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestBadRequestError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/authorize",
              "path-parameters": {
                "connection_id": "optional<string>",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequest",
                "query-parameters": {
                  "redirect_to": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "callback": {
              "auth": true,
              "display-name": "Callback",
              "docs": undefined,
              "errors": [
                "root.CallbackDatasourceGdriveCallbackGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/datasource/gdrive/callback",
              "request": {
                "name": "CallbackDatasourceGdriveCallbackGetRequest",
                "query-parameters": {
                  "code": "optional<string>",
                  "state": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "checkStatus": {
              "auth": true,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestBadRequestError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/run",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequest",
                "query-parameters": {
                  "sync_run_id": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "Delete",
              "docs": undefined,
              "errors": [
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestBadRequestError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Fetch",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "id": [
                      "id",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/fetch",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.BodyFetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPost",
                },
                "content-type": "application/x-www-form-urlencoded",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getConfiguration": {
              "auth": true,
              "display-name": "Get Configuration",
              "docs": undefined,
              "errors": [
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestBadRequestError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "name": "name",
                      "private": true,
                      "root_folder_id": "root_folder_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceConfiguration",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listFiles": {
              "auth": true,
              "display-name": "List Files",
              "docs": undefined,
              "errors": [
                "root.ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "createdTime": "createdTime",
                        "id": "id",
                        "mimeType": "mimeType",
                        "modifiedTime": "modifiedTime",
                        "name": "name",
                        "size": "size",
                        "synced": true,
                        "tags": [
                          "no_size",
                        ],
                        "type": "file",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/list-files",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequest",
                "query-parameters": {
                  "parent_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ObjectList",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestBadRequestError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/runs",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setConfiguration": {
              "auth": true,
              "display-name": "Set Configuration",
              "docs": undefined,
              "errors": [
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestBadRequestError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "name": "name",
                    "private": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.DatasourceConfiguration",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFiles:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/list-files
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Files
      request:
        name: >-
          ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequest
        query-parameters:
          parent_id: optional<string>
      response:
        docs: Successful Response
        type: root.ObjectList
        status-code: 200
      errors:
        - >-
          root.ListFilesOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdListFilesGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              - id: id
                name: name
                synced: true
                size: size
                mimeType: mimeType
                createdTime: createdTime
                modifiedTime: modifiedTime
                type: file
                tags:
                  - no_size
    fetch:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/fetch
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Fetch
      request:
        body:
          type: >-
            root.BodyFetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPost
        content-type: application/x-www-form-urlencoded
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdFetchPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            id:
              - id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    authorize:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/authorize
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: optional<string>
      display-name: Authorize
      request:
        name: >-
          AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequest
        query-parameters:
          redirect_to: optional<string>
      errors:
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestBadRequestError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestForbiddenError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdAuthorizeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
    delete:
      path: /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestBadRequestError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestForbiddenError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              key: value
    listRuns:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Runs
      request:
        name: >-
          ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestBadRequestError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestForbiddenError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
    checkStatus:
      path: /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/run
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Check Status
      request:
        name: >-
          CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequest
        query-parameters:
          sync_run_id: string
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestBadRequestError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestForbiddenError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdRunGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          query-parameters:
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    getConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Get Configuration
      response:
        docs: Successful Response
        type: root.DatasourceConfiguration
        status-code: 200
      errors:
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestBadRequestError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestForbiddenError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              name: name
              private: true
              root_folder_id: root_folder_id
    setConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/gdrive/{connection_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Set Configuration
      request:
        body:
          type: root.DatasourceConfiguration
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestBadRequestError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestForbiddenError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceGdriveConnectionIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            name: name
            private: true
          response:
            body:
              key: value
    callback:
      path: /datasource/gdrive/callback
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Callback
      request:
        name: CallbackDatasourceGdriveCallbackGetRequest
        query-parameters:
          code: optional<string>
          state: optional<string>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.CallbackDatasourceGdriveCallbackGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "datasourceNotion.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "authorize": {
              "auth": true,
              "display-name": "Authorize",
              "docs": undefined,
              "errors": [
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestBadRequestError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/authorize",
              "path-parameters": {
                "connection_id": "optional<string>",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequest",
                "query-parameters": {
                  "redirect_to": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "callback": {
              "auth": true,
              "display-name": "Callback",
              "docs": undefined,
              "errors": [
                "root.CallbackDatasourceNotionCallbackGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/datasource/notion/callback",
              "request": {
                "name": "CallbackDatasourceNotionCallbackGetRequest",
                "query-parameters": {
                  "code": "optional<string>",
                  "state": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "checkStatus": {
              "auth": true,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestBadRequestError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/run",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequest",
                "query-parameters": {
                  "sync_run_id": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "Delete",
              "docs": undefined,
              "errors": [
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestBadRequestError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Fetch",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "id": [
                      "id",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/fetch",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.BodyFetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPost",
                },
                "content-type": "application/x-www-form-urlencoded",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getConfiguration": {
              "auth": true,
              "display-name": "Get Configuration",
              "docs": undefined,
              "errors": [
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestBadRequestError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "name": "name",
                      "private": true,
                      "root_folder_id": "root_folder_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceConfiguration",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listFiles": {
              "auth": true,
              "display-name": "List Files",
              "docs": undefined,
              "errors": [
                "root.ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "createdTime": "createdTime",
                        "id": "id",
                        "mimeType": "mimeType",
                        "modifiedTime": "modifiedTime",
                        "name": "name",
                        "size": "size",
                        "synced": true,
                        "tags": [
                          "no_size",
                        ],
                        "type": "file",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/list-files",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequest",
                "query-parameters": {
                  "parent_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ObjectList",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestBadRequestError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/runs",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setConfiguration": {
              "auth": true,
              "display-name": "Set Configuration",
              "docs": undefined,
              "errors": [
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestBadRequestError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "name": "name",
                    "private": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.DatasourceConfiguration",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFiles:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/list-files
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Files
      request:
        name: >-
          ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequest
        query-parameters:
          parent_id: optional<string>
      response:
        docs: Successful Response
        type: root.ObjectList
        status-code: 200
      errors:
        - >-
          root.ListFilesOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdListFilesGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              - id: id
                name: name
                synced: true
                size: size
                mimeType: mimeType
                createdTime: createdTime
                modifiedTime: modifiedTime
                type: file
                tags:
                  - no_size
    fetch:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/fetch
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Fetch
      request:
        body:
          type: >-
            root.BodyFetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPost
        content-type: application/x-www-form-urlencoded
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdFetchPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            id:
              - id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    authorize:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/authorize
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: optional<string>
      display-name: Authorize
      request:
        name: >-
          AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequest
        query-parameters:
          redirect_to: optional<string>
      errors:
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestBadRequestError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestForbiddenError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdAuthorizeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
    delete:
      path: /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestBadRequestError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestForbiddenError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              key: value
    listRuns:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Runs
      request:
        name: >-
          ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestBadRequestError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestForbiddenError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
    checkStatus:
      path: /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/run
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Check Status
      request:
        name: >-
          CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequest
        query-parameters:
          sync_run_id: string
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestBadRequestError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestForbiddenError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdRunGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          query-parameters:
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    getConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Get Configuration
      response:
        docs: Successful Response
        type: root.DatasourceConfiguration
        status-code: 200
      errors:
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestBadRequestError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestForbiddenError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              name: name
              private: true
              root_folder_id: root_folder_id
    setConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/notion/{connection_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Set Configuration
      request:
        body:
          type: root.DatasourceConfiguration
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestBadRequestError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestForbiddenError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceNotionConnectionIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            name: name
            private: true
          response:
            body:
              key: value
    callback:
      path: /datasource/notion/callback
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Callback
      request:
        name: CallbackDatasourceNotionCallbackGetRequest
        query-parameters:
          code: optional<string>
          state: optional<string>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.CallbackDatasourceNotionCallbackGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "datasourceOnedrive.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "authorize": {
              "auth": true,
              "display-name": "Authorize",
              "docs": undefined,
              "errors": [
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestBadRequestError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/authorize",
              "path-parameters": {
                "connection_id": "optional<string>",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequest",
                "query-parameters": {
                  "redirect_to": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "callback": {
              "auth": true,
              "display-name": "Callback",
              "docs": undefined,
              "errors": [
                "root.CallbackDatasourceOnedriveCallbackGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/datasource/onedrive/callback",
              "request": {
                "name": "CallbackDatasourceOnedriveCallbackGetRequest",
                "query-parameters": {
                  "code": "optional<string>",
                  "state": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "checkStatus": {
              "auth": true,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestBadRequestError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/run",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequest",
                "query-parameters": {
                  "sync_run_id": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "Delete",
              "docs": undefined,
              "errors": [
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestBadRequestError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Fetch",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "id": [
                      "id",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/fetch",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.BodyFetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPost",
                },
                "content-type": "application/x-www-form-urlencoded",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getConfiguration": {
              "auth": true,
              "display-name": "Get Configuration",
              "docs": undefined,
              "errors": [
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestBadRequestError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "name": "name",
                      "private": true,
                      "root_folder_id": "root_folder_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceConfiguration",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listFiles": {
              "auth": true,
              "display-name": "List Files",
              "docs": undefined,
              "errors": [
                "root.ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "createdTime": "createdTime",
                        "id": "id",
                        "mimeType": "mimeType",
                        "modifiedTime": "modifiedTime",
                        "name": "name",
                        "size": "size",
                        "synced": true,
                        "tags": [
                          "no_size",
                        ],
                        "type": "file",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/list-files",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequest",
                "query-parameters": {
                  "parent_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ObjectList",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestBadRequestError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/runs",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setConfiguration": {
              "auth": true,
              "display-name": "Set Configuration",
              "docs": undefined,
              "errors": [
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestBadRequestError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "name": "name",
                    "private": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.DatasourceConfiguration",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFiles:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/list-files
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Files
      request:
        name: >-
          ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequest
        query-parameters:
          parent_id: optional<string>
      response:
        docs: Successful Response
        type: root.ObjectList
        status-code: 200
      errors:
        - >-
          root.ListFilesOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdListFilesGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              - id: id
                name: name
                synced: true
                size: size
                mimeType: mimeType
                createdTime: createdTime
                modifiedTime: modifiedTime
                type: file
                tags:
                  - no_size
    fetch:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/fetch
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Fetch
      request:
        body:
          type: >-
            root.BodyFetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPost
        content-type: application/x-www-form-urlencoded
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdFetchPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            id:
              - id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    authorize:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/authorize
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: optional<string>
      display-name: Authorize
      request:
        name: >-
          AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequest
        query-parameters:
          redirect_to: optional<string>
      errors:
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestBadRequestError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestForbiddenError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdAuthorizeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
    delete:
      path: /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestBadRequestError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestForbiddenError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              key: value
    listRuns:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Runs
      request:
        name: >-
          ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestBadRequestError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestForbiddenError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
    checkStatus:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/run
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Check Status
      request:
        name: >-
          CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequest
        query-parameters:
          sync_run_id: string
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestBadRequestError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestForbiddenError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdRunGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          query-parameters:
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    getConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Get Configuration
      response:
        docs: Successful Response
        type: root.DatasourceConfiguration
        status-code: 200
      errors:
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestBadRequestError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestForbiddenError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              name: name
              private: true
              root_folder_id: root_folder_id
    setConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/onedrive/{connection_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Set Configuration
      request:
        body:
          type: root.DatasourceConfiguration
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestBadRequestError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestForbiddenError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceOnedriveConnectionIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            name: name
            private: true
          response:
            body:
              key: value
    callback:
      path: /datasource/onedrive/callback
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Callback
      request:
        name: CallbackDatasourceOnedriveCallbackGetRequest
        query-parameters:
          code: optional<string>
          state: optional<string>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.CallbackDatasourceOnedriveCallbackGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "datasourceSharepoint.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "authorize": {
              "auth": true,
              "display-name": "Authorize",
              "docs": undefined,
              "errors": [
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestBadRequestError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenError",
                "root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/authorize",
              "path-parameters": {
                "connection_id": "optional<string>",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequest",
                "query-parameters": {
                  "redirect_to": "optional<string>",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "callback": {
              "auth": true,
              "display-name": "Callback",
              "docs": undefined,
              "errors": [
                "root.CallbackDatasourceSharepointCallbackGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/datasource/sharepoint/callback",
              "request": {
                "name": "CallbackDatasourceSharepointCallbackGetRequest",
                "query-parameters": {
                  "code": "optional<string>",
                  "state": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "checkStatus": {
              "auth": true,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestBadRequestError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenError",
                "root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/run",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequest",
                "query-parameters": {
                  "sync_run_id": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "delete": {
              "auth": true,
              "display-name": "Delete",
              "docs": undefined,
              "errors": [
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestBadRequestError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenError",
                "root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Fetch",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "id": [
                      "id",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/fetch",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.BodyFetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPost",
                },
                "content-type": "application/x-www-form-urlencoded",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getConfiguration": {
              "auth": true,
              "display-name": "Get Configuration",
              "docs": undefined,
              "errors": [
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestBadRequestError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenError",
                "root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "name": "name",
                      "private": true,
                      "root_folder_id": "root_folder_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceConfiguration",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listFiles": {
              "auth": true,
              "display-name": "List Files",
              "docs": undefined,
              "errors": [
                "root.ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "createdTime": "createdTime",
                        "id": "id",
                        "mimeType": "mimeType",
                        "modifiedTime": "modifiedTime",
                        "name": "name",
                        "size": "size",
                        "synced": true,
                        "tags": [
                          "no_size",
                        ],
                        "type": "file",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/list-files",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequest",
                "query-parameters": {
                  "parent_id": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ObjectList",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestBadRequestError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenError",
                "root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/runs",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setConfiguration": {
              "auth": true,
              "display-name": "Set Configuration",
              "docs": undefined,
              "errors": [
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestBadRequestError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenError",
                "root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "connection_id": "connection_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "name": "name",
                    "private": true,
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config",
              "path-parameters": {
                "connection_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "type": "root.DatasourceConfiguration",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFiles:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/list-files
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Files
      request:
        name: >-
          ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequest
        query-parameters:
          parent_id: optional<string>
      response:
        docs: Successful Response
        type: root.ObjectList
        status-code: 200
      errors:
        - >-
          root.ListFilesOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdListFilesGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              - id: id
                name: name
                synced: true
                size: size
                mimeType: mimeType
                createdTime: createdTime
                modifiedTime: modifiedTime
                type: file
                tags:
                  - no_size
    fetch:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/fetch
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Fetch
      request:
        body:
          type: >-
            root.BodyFetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPost
        content-type: application/x-www-form-urlencoded
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdFetchPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            id:
              - id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    authorize:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/authorize
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: optional<string>
      display-name: Authorize
      request:
        name: >-
          AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequest
        query-parameters:
          redirect_to: optional<string>
      errors:
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestBadRequestError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestForbiddenError
        - >-
          root.AuthorizeOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdAuthorizeGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
    delete:
      path: /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestBadRequestError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestForbiddenError
        - >-
          root.DeleteOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              key: value
    listRuns:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: List Runs
      request:
        name: >-
          ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestBadRequestError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestForbiddenError
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
    checkStatus:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/run
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Check Status
      request:
        name: >-
          CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequest
        query-parameters:
          sync_run_id: string
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestBadRequestError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestForbiddenError
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdRunGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          query-parameters:
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    getConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Get Configuration
      response:
        docs: Successful Response
        type: root.DatasourceConfiguration
        status-code: 200
      errors:
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestBadRequestError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestForbiddenError
        - >-
          root.GetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          response:
            body:
              name: name
              private: true
              root_folder_id: root_folder_id
    setConfiguration:
      path: >-
        /org/{org_id}/project/{project_id}/datasource/sharepoint/{connection_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        connection_id: string
      display-name: Set Configuration
      request:
        body:
          type: root.DatasourceConfiguration
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestBadRequestError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestForbiddenError
        - >-
          root.SetConfigurationOrgOrgIdProjectProjectIdDatasourceSharepointConnectionIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            connection_id: connection_id
          request:
            name: name
            private: true
          response:
            body:
              key: value
    callback:
      path: /datasource/sharepoint/callback
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Callback
      request:
        name: CallbackDatasourceSharepointCallbackGetRequest
        query-parameters:
          code: optional<string>
          state: optional<string>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.CallbackDatasourceSharepointCallbackGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
  source:
    openapi: ../openapi.yml
",
    },
    "document.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "documentCreate": {
              "auth": true,
              "display-name": "Document Create",
              "docs": undefined,
              "errors": [
                "root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestBadRequestError",
                "root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenError",
                "root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "data": "data",
                  },
                  "response": {
                    "body": {
                      "group_id": "group_id",
                      "task_count": 1,
                      "tasks": [
                        {
                          "info": {
                            "key": "value",
                          },
                          "state": "PENDING",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "data": "string",
                    "files": "optional<list<file>>",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "Body_document_create_org__org_id__project__project_id__document_post",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DocumentStatusResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentDelete": {
              "auth": true,
              "display-name": "Document Delete",
              "docs": undefined,
              "errors": [
                "root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestBadRequestError",
                "root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenError",
                "root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
              "path-parameters": {
                "document_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentEmbeddingGet": {
              "auth": false,
              "display-name": "Document Embedding Get",
              "docs": "Fetch an individual embedding record by its ID. Useful for examining the source submitted to an LLM",
              "errors": [
                "root.DocumentEmbeddingGetOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingEmbeddingIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "embedding_id": "embedding_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "document": "document",
                      "id": "id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}/embedding/{embedding_id}",
              "path-parameters": {
                "document_id": "string",
                "embedding_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ChatDocumentEmbeddingRecord",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentEmbeddingQuery": {
              "auth": true,
              "display-name": "Document Embedding Query",
              "docs": undefined,
              "errors": [
                "root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestBadRequestError",
                "root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenError",
                "root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "document": "document",
                          "id": "id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}/embeddings",
              "path-parameters": {
                "document_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetChatDocumentEmbeddingRecord",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentFetch": {
              "auth": true,
              "display-name": "Document Fetch",
              "docs": undefined,
              "errors": [
                "root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestBadRequestError",
                "root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenError",
                "root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "chunks": 1,
                      "connection_id": "connection_id",
                      "description": "description",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "config": {
                            "key": "value",
                          },
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "original_mime": "original_mime",
                      "project_id": "project_id",
                      "source": "upload",
                      "source_meta": {
                        "key": "value",
                      },
                      "strategy": "strategy",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
              "path-parameters": {
                "document_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ChatDocument",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentList": {
              "auth": true,
              "display-name": "Document List",
              "docs": undefined,
              "errors": [
                "root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestBadRequestError",
                "root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenError",
                "root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "chunks": 1,
                          "connection_id": "connection_id",
                          "description": "description",
                          "embedding_instances": [
                            {
                              "chat_document_id": "chat_document_id",
                              "id": "id",
                              "is_active": true,
                            },
                          ],
                          "id": "id",
                          "original_mime": "original_mime",
                          "project_id": "project_id",
                          "source": "upload",
                          "source_meta": {
                            "key": "value",
                          },
                          "strategy": "strategy",
                          "title": "title",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequest",
                "query-parameters": {
                  "collection_id": "optional<string>",
                  "connection_id": "optional<string>",
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                  "source": "optional<DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource>",
                  "strategy": "optional<string>",
                  "title": "optional<string>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetChatDocument",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentQuery": {
              "auth": true,
              "display-name": "Document Query",
              "docs": undefined,
              "errors": [
                "root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestBadRequestError",
                "root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenError",
                "root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "query-parameters": {
                    "query": "query",
                  },
                  "response": {
                    "body": [
                      {
                        "chat_document_id": "chat_document_id",
                        "score": 1.1,
                        "text": "text",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}/query",
              "path-parameters": {
                "document_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequest",
                "query-parameters": {
                  "query": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ChatDocumentQueryResult>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentUpdate": {
              "auth": true,
              "display-name": "Document Update",
              "docs": undefined,
              "errors": [
                "root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestBadRequestError",
                "root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenError",
                "root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "title": "title",
                  },
                  "response": {
                    "body": {
                      "chunks": 1,
                      "connection_id": "connection_id",
                      "description": "description",
                      "embedding_instances": [
                        {
                          "chat_document_id": "chat_document_id",
                          "config": {
                            "key": "value",
                          },
                          "id": "id",
                          "is_active": true,
                        },
                      ],
                      "id": "id",
                      "original_mime": "original_mime",
                      "project_id": "project_id",
                      "source": "upload",
                      "source_meta": {
                        "key": "value",
                      },
                      "strategy": "strategy",
                      "title": "title",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}",
              "path-parameters": {
                "document_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "description": {
                      "type": "optional<string>",
                    },
                    "title": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ChatDocumentUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ChatDocument",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "documentUpload": {
              "auth": true,
              "availability": "deprecated",
              "display-name": "Document Upload",
              "docs": undefined,
              "errors": [
                "root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestBadRequestError",
                "root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenError",
                "root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "data": "data",
                  },
                  "response": {
                    "body": [
                      {
                        "chunks": 1,
                        "connection_id": "connection_id",
                        "description": "description",
                        "embedding_instances": [
                          {
                            "chat_document_id": "chat_document_id",
                            "id": "id",
                            "is_active": true,
                          },
                        ],
                        "id": "id",
                        "original_mime": "original_mime",
                        "project_id": "project_id",
                        "source": "upload",
                        "source_meta": {
                          "key": "value",
                        },
                        "strategy": "strategy",
                        "title": "title",
                      },
                    ],
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/upload",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "data": "string",
                    "files": "optional<list<file>>",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "Body_document_upload_org__org_id__project__project_id__document_upload_post",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ChatDocument>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getMember": {
              "auth": true,
              "display-name": "IAM - Lookup Document Member",
              "docs": "Retrieve a specific member that has been granted direct access to the document.",
              "errors": [
                "root.DocumentGetMemberRequestBadRequestError",
                "root.DocumentGetMemberRequestForbiddenError",
                "root.DocumentGetMemberRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}",
              "path-parameters": {
                "document_id": "string",
                "member": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamListMembers": {
              "auth": true,
              "display-name": "IAM - List Document Members",
              "docs": "Lists all members that have been granted direct access to the document.",
              "errors": [
                "root.DocumentIamListMembersRequestBadRequestError",
                "root.DocumentIamListMembersRequestForbiddenError",
                "root.DocumentIamListMembersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "avatar_url": "avatar_url",
                          "member": "member",
                          "name": "name",
                          "roles": [
                            "roles",
                          ],
                          "total_subjects": 1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members",
              "path-parameters": {
                "document_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "DocumentIamListMembersRequest",
                "query-parameters": {
                  "type": "optional<DocumentIamListMembersRequestType>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetIamMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamTestPermissions": {
              "auth": true,
              "display-name": "IAM - Test Document Permissions",
              "docs": "Test the permissions that the caller (or another subject) holds on the document.",
              "errors": [
                "root.DocumentIamTestPermissionsRequestBadRequestError",
                "root.DocumentIamTestPermissionsRequestForbiddenError",
                "root.DocumentIamTestPermissionsRequestNotFoundError",
                "root.DocumentIamTestPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "permissions": [
                      "add_editor",
                    ],
                  },
                  "response": {
                    "body": {
                      "member": "member",
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/test",
              "path-parameters": {
                "document_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "member": {
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "A list of permissions to test on the document.",
                      "type": "list<DocumentIamPermissionTestPermissionsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DocumentIAMPermissionTest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMPermissionTest",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamUpdateMemberRoles": {
              "auth": true,
              "display-name": "IAM - Update Document Member",
              "docs": "Update the roles that a member holds on the document.",
              "errors": [
                "root.DocumentIamUpdateMemberRolesRequestBadRequestError",
                "root.DocumentIamUpdateMemberRolesRequestForbiddenError",
                "root.DocumentIamUpdateMemberRolesRequestNotFoundError",
                "root.DocumentIamUpdateMemberRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "document_id": "document_id",
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}",
              "path-parameters": {
                "document_id": "string",
                "member": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "add": {
                      "docs": "A list of document roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in `remove`.

This may be combined with `remove_all` to replace the member's entire role list.",
                      "type": "optional<list<DocumentIamMemberRoleUpdateAddItem>>",
                    },
                    "remove": {
                      "docs": "A list of document roles to revoke from the member.",
                      "type": "optional<list<DocumentIamMemberRoleUpdateRemoveItem>>",
                    },
                    "remove_all": {
                      "docs": "Removes all existing roles from the member. This may be combined with `add` to replace all existing roles that the member holds.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "DocumentIAMMemberRoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "taskStatus": {
              "auth": true,
              "display-name": "Task Status",
              "docs": undefined,
              "errors": [
                "root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestBadRequestError",
                "root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenError",
                "root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "group_id": "group_id",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "group_id": "group_id",
                      "task_count": 1,
                      "tasks": [
                        {
                          "info": {
                            "key": "value",
                          },
                          "state": "PENDING",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/document/create/status/{group_id}",
              "path-parameters": {
                "group_id": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DocumentStatusResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "DocumentIamListMembersRequestType": {
            "enum": [
              "user",
              "organization",
              "project",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentIamMemberRoleUpdateAddItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentIamMemberRoleUpdateRemoveItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentIamPermissionTestPermissionsItem": {
            "enum": [
              "add_editor",
              "add_member",
              "add_owner",
              "edit",
              "query",
              "remove_editor",
              "remove_member",
              "remove_owner",
              "view",
              "view_members",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource": {
            "enum": [
              "upload",
              "gdrive",
              "onedrive",
              "web_scrape",
              "notion",
              "confluence",
              "box",
              "dropbox",
              "sharepoint",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "types:
  DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource:
    enum:
      - upload
      - gdrive
      - onedrive
      - web_scrape
      - notion
      - confluence
      - box
      - dropbox
      - sharepoint
    source:
      openapi: ../openapi.yml
  DocumentIamListMembersRequestType:
    enum:
      - user
      - organization
      - project
    source:
      openapi: ../openapi.yml
  DocumentIamMemberRoleUpdateAddItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  DocumentIamMemberRoleUpdateRemoveItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  DocumentIamPermissionTestPermissionsItem:
    enum:
      - add_editor
      - add_member
      - add_owner
      - edit
      - query
      - remove_editor
      - remove_member
      - remove_owner
      - view
      - view_members
    inline: true
    source:
      openapi: ../openapi.yml
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    documentList:
      path: /org/{org_id}/project/{project_id}/document
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Document List
      request:
        name: DocumentListOrgOrgIdProjectProjectIdDocumentGetRequest
        query-parameters:
          connection_id: optional<string>
          title: optional<string>
          cursor: optional<string>
          collection_id: optional<string>
          page_limit: optional<integer>
          source: >-
            optional<DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestSource>
          strategy: optional<string>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetChatDocument
        status-code: 200
      errors:
        - >-
          root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestBadRequestError
        - >-
          root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestForbiddenError
        - >-
          root.DocumentListOrgOrgIdProjectProjectIdDocumentGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - title: title
                  project_id: project_id
                  description: description
                  source: upload
                  strategy: strategy
                  source_meta:
                    key: value
                  connection_id: connection_id
                  id: id
                  chunks: 1
                  original_mime: original_mime
                  embedding_instances:
                    - id: id
                      chat_document_id: chat_document_id
                      is_active: true
    documentCreate:
      path: /org/{org_id}/project/{project_id}/document
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Document Create
      request:
        name: Body_document_create_org__org_id__project__project_id__document_post
        body:
          properties:
            data: string
            files: optional<list<file>>
        content-type: multipart/form-data
      response:
        docs: Successful Response
        type: root.DocumentStatusResponse
        status-code: 200
      errors:
        - >-
          root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestBadRequestError
        - >-
          root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestForbiddenError
        - >-
          root.DocumentCreateOrgOrgIdProjectProjectIdDocumentPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            data: data
          response:
            body:
              group_id: group_id
              task_count: 1
              tasks:
                - task_id: task_id
                  state: PENDING
                  info:
                    key: value
    documentUpload:
      path: /org/{org_id}/project/{project_id}/document/upload
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Document Upload
      request:
        name: >-
          Body_document_upload_org__org_id__project__project_id__document_upload_post
        body:
          properties:
            data: string
            files: optional<list<file>>
        content-type: multipart/form-data
      response:
        docs: Successful Response
        type: list<root.ChatDocument>
        status-code: 200
      availability: deprecated
      errors:
        - >-
          root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestBadRequestError
        - >-
          root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestForbiddenError
        - >-
          root.DocumentUploadOrgOrgIdProjectProjectIdDocumentUploadPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            data: data
          response:
            body:
              - title: title
                project_id: project_id
                description: description
                source: upload
                strategy: strategy
                source_meta:
                  key: value
                connection_id: connection_id
                id: id
                chunks: 1
                original_mime: original_mime
                embedding_instances:
                  - id: id
                    chat_document_id: chat_document_id
                    is_active: true
    taskStatus:
      path: /org/{org_id}/project/{project_id}/document/create/status/{group_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        group_id: string
      display-name: Task Status
      response:
        docs: Successful Response
        type: root.DocumentStatusResponse
        status-code: 200
      errors:
        - >-
          root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestBadRequestError
        - >-
          root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestForbiddenError
        - >-
          root.TaskStatusOrgOrgIdProjectProjectIdDocumentCreateStatusGroupIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            group_id: group_id
          response:
            body:
              group_id: group_id
              task_count: 1
              tasks:
                - task_id: task_id
                  state: PENDING
                  info:
                    key: value
    documentQuery:
      path: /org/{org_id}/project/{project_id}/document/{document_id}/query
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
      display-name: Document Query
      request:
        name: DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequest
        query-parameters:
          query: string
      response:
        docs: Successful Response
        type: list<root.ChatDocumentQueryResult>
        status-code: 200
      errors:
        - >-
          root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestBadRequestError
        - >-
          root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestForbiddenError
        - >-
          root.DocumentQueryOrgOrgIdProjectProjectIdDocumentDocumentIdQueryGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
          query-parameters:
            query: query
          response:
            body:
              - chat_document_id: chat_document_id
                text: text
                score: 1.1
    documentFetch:
      path: /org/{org_id}/project/{project_id}/document/{document_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
      display-name: Document Fetch
      response:
        docs: Successful Response
        type: root.ChatDocument
        status-code: 200
      errors:
        - >-
          root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestBadRequestError
        - >-
          root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestForbiddenError
        - >-
          root.DocumentFetchOrgOrgIdProjectProjectIdDocumentDocumentIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
          response:
            body:
              title: title
              project_id: project_id
              description: description
              source: upload
              strategy: strategy
              source_meta:
                key: value
              connection_id: connection_id
              id: id
              chunks: 1
              original_mime: original_mime
              embedding_instances:
                - config:
                    key: value
                  id: id
                  chat_document_id: chat_document_id
                  is_active: true
    documentUpdate:
      path: /org/{org_id}/project/{project_id}/document/{document_id}
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
      display-name: Document Update
      request:
        name: ChatDocumentUpdate
        body:
          properties:
            title: string
            description:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ChatDocument
        status-code: 200
      errors:
        - >-
          root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestBadRequestError
        - >-
          root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestForbiddenError
        - >-
          root.DocumentUpdateOrgOrgIdProjectProjectIdDocumentDocumentIdPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
          request:
            title: title
          response:
            body:
              title: title
              project_id: project_id
              description: description
              source: upload
              strategy: strategy
              source_meta:
                key: value
              connection_id: connection_id
              id: id
              chunks: 1
              original_mime: original_mime
              embedding_instances:
                - config:
                    key: value
                  id: id
                  chat_document_id: chat_document_id
                  is_active: true
    documentDelete:
      path: /org/{org_id}/project/{project_id}/document/{document_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
      display-name: Document Delete
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestBadRequestError
        - >-
          root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestForbiddenError
        - >-
          root.DocumentDeleteOrgOrgIdProjectProjectIdDocumentDocumentIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
          response:
            body:
              key: value
    documentEmbeddingQuery:
      path: /org/{org_id}/project/{project_id}/document/{document_id}/embeddings
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
      display-name: Document Embedding Query
      request:
        name: >-
          DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetChatDocumentEmbeddingRecord
        status-code: 200
      errors:
        - >-
          root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestBadRequestError
        - >-
          root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestForbiddenError
        - >-
          root.DocumentEmbeddingQueryOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - id: id
                  document: document
    documentEmbeddingGet:
      path: >-
        /org/{org_id}/project/{project_id}/document/{document_id}/embedding/{embedding_id}
      method: GET
      auth: false
      docs: >-
        Fetch an individual embedding record by its ID. Useful for examining the
        source submitted to an LLM
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
        embedding_id: string
      display-name: Document Embedding Get
      response:
        docs: Successful Response
        type: root.ChatDocumentEmbeddingRecord
        status-code: 200
      errors:
        - >-
          root.DocumentEmbeddingGetOrgOrgIdProjectProjectIdDocumentDocumentIdEmbeddingEmbeddingIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
            embedding_id: embedding_id
          response:
            body:
              id: id
              document: document
    iamListMembers:
      path: /org/{org_id}/project/{project_id}/document/{document_id}/iam/members
      method: GET
      auth: true
      docs: Lists all members that have been granted direct access to the document.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
      display-name: IAM - List Document Members
      request:
        name: DocumentIamListMembersRequest
        query-parameters:
          type: optional<DocumentIamListMembersRequestType>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetIamMember
        status-code: 200
      errors:
        - root.DocumentIamListMembersRequestBadRequestError
        - root.DocumentIamListMembersRequestForbiddenError
        - root.DocumentIamListMembersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - member: member
                  roles:
                    - roles
                  name: name
                  avatar_url: avatar_url
                  total_subjects: 1
    getMember:
      path: >-
        /org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}
      method: GET
      auth: true
      docs: >-
        Retrieve a specific member that has been granted direct access to the
        document.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
        member: string
      display-name: IAM - Lookup Document Member
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.DocumentGetMemberRequestBadRequestError
        - root.DocumentGetMemberRequestForbiddenError
        - root.DocumentGetMemberRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
            member: member
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamUpdateMemberRoles:
      path: >-
        /org/{org_id}/project/{project_id}/document/{document_id}/iam/members/{member}
      method: POST
      auth: true
      docs: Update the roles that a member holds on the document.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
        member: string
      display-name: IAM - Update Document Member
      request:
        name: DocumentIAMMemberRoleUpdate
        body:
          properties:
            add:
              type: optional<list<DocumentIamMemberRoleUpdateAddItem>>
              docs: >-
                A list of document roles to grant to the member.


                Roles in this list are applied to the member AFTER any removals
                specified in `remove`.


                This may be combined with `remove_all` to replace the member's
                entire role list.
            remove:
              type: optional<list<DocumentIamMemberRoleUpdateRemoveItem>>
              docs: A list of document roles to revoke from the member.
            remove_all:
              type: optional<boolean>
              docs: >-
                Removes all existing roles from the member. This may be combined
                with `add` to replace all existing roles that the member holds.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.DocumentIamUpdateMemberRolesRequestBadRequestError
        - root.DocumentIamUpdateMemberRolesRequestForbiddenError
        - root.DocumentIamUpdateMemberRolesRequestNotFoundError
        - root.DocumentIamUpdateMemberRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
            member: member
          request: {}
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamTestPermissions:
      path: /org/{org_id}/project/{project_id}/document/{document_id}/iam/test
      method: POST
      auth: true
      docs: >-
        Test the permissions that the caller (or another subject) holds on the
        document.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        document_id: string
      display-name: IAM - Test Document Permissions
      request:
        name: DocumentIAMPermissionTest
        body:
          properties:
            permissions:
              docs: A list of permissions to test on the document.
              type: list<DocumentIamPermissionTestPermissionsItem>
            member:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMPermissionTest
        status-code: 200
      errors:
        - root.DocumentIamTestPermissionsRequestBadRequestError
        - root.DocumentIamTestPermissionsRequestForbiddenError
        - root.DocumentIamTestPermissionsRequestNotFoundError
        - root.DocumentIamTestPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            document_id: document_id
          request:
            permissions:
              - add_editor
          response:
            body:
              permissions:
                - permissions
              member: member
  source:
    openapi: ../openapi.yml
",
    },
    "internal.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "registerOauthClient": {
              "auth": true,
              "display-name": "Register Oauth Client",
              "docs": undefined,
              "errors": [
                "root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestBadRequestError",
                "root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenError",
                "root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "project_id": "project_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "client_id": "client_id",
                      "client_secret": "client_secret",
                      "name": "name",
                      "redirect_uris": [
                        "redirect_uris",
                      ],
                      "scope": "scope",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/internal/project/{project_id}/register_oauth_client",
              "path-parameters": {
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "type": "optional<string>",
                      "validation": {
                        "format": undefined,
                        "maxLength": 255,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "profile": {
                      "type": "optional<root.OAuthClientProfile>",
                    },
                    "redirect_uris": {
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OAuthClientCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 201,
                "type": "root.OAuthClientCreateResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "webhookHydraTokenHook": {
              "auth": false,
              "display-name": "Webhook Hydra Token Hook",
              "docs": undefined,
              "errors": [
                "root.WebhookHydraTokenHookInternalWebhookHydraTokenHookPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {
                    "session": {
                      "client_id": "client_id",
                      "id_token": {
                        "id_token_claims": {
                          "key": "value",
                        },
                      },
                    },
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/internal/webhook/hydra/token_hook",
              "request": {
                "body": {
                  "properties": {
                    "session": {
                      "type": "root.HydraWebhookTokenHookSession",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "HydraWebhookTokenHook",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "webhookKratosSignupCheck": {
              "auth": false,
              "display-name": "Webhook Kratos Signup Check",
              "docs": undefined,
              "errors": [
                "root.WebhookKratosSignupCheckInternalWebhookKratosSignupCheckPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {
                    "identity_id": "identity_id",
                  },
                  "response": {
                    "body": {
                      "identity": {
                        "key": "value",
                      },
                      "messages": [
                        {
                          "instance_ptr": "instance_ptr",
                          "messages": [
                            {
                              "id": 1,
                              "text": "text",
                              "type": "info",
                            },
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/internal/webhook/kratos/signup_check",
              "request": {
                "body": {
                  "type": "root.KratosWebhook",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.KratosWebhookResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "webhookKratosSignupCommit": {
              "auth": false,
              "display-name": "Webhook Kratos Signup Commit",
              "docs": undefined,
              "errors": [
                "root.WebhookKratosSignupCommitInternalWebhookKratosSignupCommitPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {
                    "identity_id": "identity_id",
                  },
                  "response": {
                    "body": {
                      "identity": {
                        "key": "value",
                      },
                      "messages": [
                        {
                          "instance_ptr": "instance_ptr",
                          "messages": [
                            {
                              "id": 1,
                              "text": "text",
                              "type": "info",
                            },
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/internal/webhook/kratos/signup_commit",
              "request": {
                "body": {
                  "type": "root.KratosWebhook",
                },
                "content-type": "application/json",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.KratosWebhookResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    webhookHydraTokenHook:
      path: /internal/webhook/hydra/token_hook
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      display-name: Webhook Hydra Token Hook
      request:
        name: HydraWebhookTokenHook
        body:
          properties:
            session:
              type: root.HydraWebhookTokenHookSession
        content-type: application/json
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.WebhookHydraTokenHookInternalWebhookHydraTokenHookPostRequestUnprocessableEntityError
      examples:
        - request:
            session:
              client_id: client_id
              id_token:
                id_token_claims:
                  key: value
          response:
            body:
              key: value
    registerOauthClient:
      path: /internal/project/{project_id}/register_oauth_client
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        project_id: string
      display-name: Register Oauth Client
      request:
        name: OAuthClientCreate
        body:
          properties:
            name:
              type: optional<string>
              validation:
                minLength: 1
                maxLength: 255
            profile:
              type: optional<root.OAuthClientProfile>
            redirect_uris:
              type: optional<list<string>>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.OAuthClientCreateResponse
        status-code: 201
      errors:
        - >-
          root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestBadRequestError
        - >-
          root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestForbiddenError
        - >-
          root.RegisterOauthClientInternalProjectProjectIdRegisterOauthClientPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            project_id: project_id
          request: {}
          response:
            body:
              name: name
              redirect_uris:
                - redirect_uris
              client_id: client_id
              client_secret: client_secret
              scope: scope
    webhookKratosSignupCheck:
      path: /internal/webhook/kratos/signup_check
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      display-name: Webhook Kratos Signup Check
      request:
        body:
          type: root.KratosWebhook
        content-type: application/json
      response:
        docs: Successful Response
        type: root.KratosWebhookResponse
        status-code: 200
      errors:
        - >-
          root.WebhookKratosSignupCheckInternalWebhookKratosSignupCheckPostRequestUnprocessableEntityError
      examples:
        - request:
            identity_id: identity_id
          response:
            body:
              messages:
                - instance_ptr: instance_ptr
                  messages:
                    - id: 1
                      text: text
                      type: info
              identity:
                key: value
    webhookKratosSignupCommit:
      path: /internal/webhook/kratos/signup_commit
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      display-name: Webhook Kratos Signup Commit
      request:
        body:
          type: root.KratosWebhook
        content-type: application/json
      response:
        docs: Successful Response
        type: root.KratosWebhookResponse
        status-code: 200
      errors:
        - >-
          root.WebhookKratosSignupCommitInternalWebhookKratosSignupCommitPostRequestUnprocessableEntityError
      examples:
        - request:
            identity_id: identity_id
          response:
            body:
              messages:
                - instance_ptr: instance_ptr
                  messages:
                    - id: 1
                      text: text
                      type: info
              identity:
                key: value
  source:
    openapi: ../openapi.yml
",
    },
    "listings.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getAllModels": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "List available LLM's",
              "docs": "All supported LLM providers and models. Not all models have the same functionality.",
              "errors": [
                "root.GetAllModelsRequestBadRequestError",
                "root.GetAllModelsRequestForbiddenError",
                "root.GetAllModelsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "01902fbf-6de7-a1cc-fb86-b1230a7af301",
                    "project_id": "01902fc0-a119-26bc-827d-4138841301db",
                  },
                  "response": {
                    "body": [
                      {
                        "alias": "GPT 3.5 Turbo",
                        "description": "A fast and cost-effective model for a broad range of tasks. 16K context window with training cut off of Sep 2021.",
                        "name": "gpt-3.5-turbo",
                        "provider": "OpenAI",
                        "supports_vision": false,
                      },
                      {
                        "alias": "GPT 4",
                        "description": "The fourth-generation model with advanced reasoning and understanding. 8k context window with training cut off of Sep 2021.",
                        "name": "gpt-4",
                        "provider": "OpenAI",
                        "supports_vision": false,
                      },
                      {
                        "alias": "GPT 4 Turbo",
                        "description": "The latest GPT-4 Turbo model with vision capabilities. 128K context window with training cut off of Dec 2023.",
                        "name": "gpt-4-turbo",
                        "provider": "OpenAI",
                        "supports_vision": true,
                      },
                      {
                        "alias": "GPT 4 Turbo Preview",
                        "description": "GPT-4 Turbo preview model featuring improved instruction following, JSON mode. 128K context window with training cut off of April 2023. Returns a maximum of 4,096 output tokens. This is a preview model.",
                        "name": "gpt-4-turbo-preview",
                        "provider": "OpenAI",
                        "supports_vision": false,
                      },
                      {
                        "alias": "GPT 4o",
                        "description": "GPT-4o ("o" for "omni") is OpenAI's most advanced model. It is multimodal, it has the same high intelligence as GPT-4 Turbo but is much more efficient — it generates text 2x faster and is 50% cheaper.",
                        "name": "gpt-4o",
                        "provider": "OpenAI",
                        "supports_vision": true,
                      },
                      {
                        "alias": "Claude 3.5 Sonnet",
                        "description": "Anthropics most intelligent model. 200K context window with 4k max output with training cut off of June 2024.",
                        "name": "claude-3-5-sonnet-20240620",
                        "provider": "Anthropic",
                        "supports_vision": true,
                      },
                      {
                        "alias": "Claude 3 Haiku",
                        "description": "Anthropics fastest and most compact model. 200K context window with 4k max output with training cut off of Aug 2023.",
                        "name": "claude-3-haiku-20240307",
                        "provider": "Anthropic",
                        "supports_vision": true,
                      },
                      {
                        "alias": "Claude 3 Sonnet",
                        "description": "Balanced model between intelligence and speed. 200K context window with 4k max output with training cut off of Aug 2023.",
                        "name": "claude-3-sonnet-20240229",
                        "provider": "Anthropic",
                        "supports_vision": true,
                      },
                      {
                        "alias": "Claude 3 Opus",
                        "description": "Anthropics most powerful model. 200K context window with 4k max output with training cut off of Aug 2023.",
                        "name": "claude-3-opus-20240229",
                        "provider": "Anthropic",
                        "supports_vision": true,
                      },
                      {
                        "alias": "Gemini 1.5 Pro",
                        "description": "Googles latest gemini model. 100K context window and 8k max output with training cut off in late 2023.",
                        "name": "gemini-1.5-pro-latest",
                        "provider": "Google",
                        "supports_vision": true,
                      },
                      {
                        "alias": "Gemini 1.0 Pro",
                        "description": "Googles 1.0 version gemini model. 30K context window and 2k max output with training cut off in late 2023.",
                        "name": "gemini-pro",
                        "provider": "Google",
                        "supports_vision": false,
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/model",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ChatModel>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listAvailableGuardrails": {
              "auth": false,
              "display-name": "List Available Guardrails",
              "docs": undefined,
              "errors": [
                "root.ListAvailableGuardrailsOrgOrgIdProjectProjectIdGuardrailGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": [
                      {
                        "description": "description",
                        "id": "source_validation",
                        "name": "name",
                        "type": "input",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/guardrail",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "list<root.ChatGuardrail>",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAllModels:
      path: /org/{org_id}/project/{project_id}/model
      method: GET
      auth: true
      docs: >-
        All supported LLM providers and models. Not all models have the same
        functionality.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
      display-name: List available LLM's
      response:
        docs: Successful Response
        type: list<root.ChatModel>
        status-code: 200
      availability: generally-available
      errors:
        - root.GetAllModelsRequestBadRequestError
        - root.GetAllModelsRequestForbiddenError
        - root.GetAllModelsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 01902fbf-6de7-a1cc-fb86-b1230a7af301
            project_id: 01902fc0-a119-26bc-827d-4138841301db
          response:
            body:
              - name: gpt-3.5-turbo
                alias: GPT 3.5 Turbo
                provider: OpenAI
                description: >-
                  A fast and cost-effective model for a broad range of tasks.
                  16K context window with training cut off of Sep 2021.
                supports_vision: false
              - name: gpt-4
                alias: GPT 4
                provider: OpenAI
                description: >-
                  The fourth-generation model with advanced reasoning and
                  understanding. 8k context window with training cut off of Sep
                  2021.
                supports_vision: false
              - name: gpt-4-turbo
                alias: GPT 4 Turbo
                provider: OpenAI
                description: >-
                  The latest GPT-4 Turbo model with vision capabilities. 128K
                  context window with training cut off of Dec 2023.
                supports_vision: true
              - name: gpt-4-turbo-preview
                alias: GPT 4 Turbo Preview
                provider: OpenAI
                description: >-
                  GPT-4 Turbo preview model featuring improved instruction
                  following, JSON mode. 128K context window with training cut
                  off of April 2023. Returns a maximum of 4,096 output tokens.
                  This is a preview model.
                supports_vision: false
              - name: gpt-4o
                alias: GPT 4o
                provider: OpenAI
                description: >-
                  GPT-4o ("o" for "omni") is OpenAI's most advanced model. It is
                  multimodal, it has the same high intelligence as GPT-4 Turbo
                  but is much more efficient — it generates text 2x faster and
                  is 50% cheaper.
                supports_vision: true
              - name: claude-3-5-sonnet-20240620
                alias: Claude 3.5 Sonnet
                provider: Anthropic
                description: >-
                  Anthropics most intelligent model. 200K context window with 4k
                  max output with training cut off of June 2024.
                supports_vision: true
              - name: claude-3-haiku-20240307
                alias: Claude 3 Haiku
                provider: Anthropic
                description: >-
                  Anthropics fastest and most compact model. 200K context window
                  with 4k max output with training cut off of Aug 2023.
                supports_vision: true
              - name: claude-3-sonnet-20240229
                alias: Claude 3 Sonnet
                provider: Anthropic
                description: >-
                  Balanced model between intelligence and speed. 200K context
                  window with 4k max output with training cut off of Aug 2023.
                supports_vision: true
              - name: claude-3-opus-20240229
                alias: Claude 3 Opus
                provider: Anthropic
                description: >-
                  Anthropics most powerful model. 200K context window with 4k
                  max output with training cut off of Aug 2023.
                supports_vision: true
              - name: gemini-1.5-pro-latest
                alias: Gemini 1.5 Pro
                provider: Google
                description: >-
                  Googles latest gemini model. 100K context window and 8k max
                  output with training cut off in late 2023.
                supports_vision: true
              - name: gemini-pro
                alias: Gemini 1.0 Pro
                provider: Google
                description: >-
                  Googles 1.0 version gemini model. 30K context window and 2k
                  max output with training cut off in late 2023.
                supports_vision: false
      audiences:
        - free
        - paid
    listAvailableGuardrails:
      path: /org/{org_id}/project/{project_id}/guardrail
      method: GET
      auth: false
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: List Available Guardrails
      response:
        docs: Successful Response
        type: list<root.ChatGuardrail>
        status-code: 200
      errors:
        - >-
          root.ListAvailableGuardrailsOrgOrgIdProjectProjectIdGuardrailGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              - id: source_validation
                name: name
                description: description
                type: input
  source:
    openapi: ../openapi.yml
",
    },
    "org.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "orgCreate": {
              "auth": true,
              "display-name": "Org Create",
              "docs": undefined,
              "errors": [
                "root.OrgCreateOrgPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {
                    "contact_email": "contact_email",
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "contact_email": "contact_email",
                      "id": "id",
                      "name": "name",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org",
              "request": {
                "body": {
                  "properties": {
                    "contact_email": {
                      "type": "string",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "name": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrgCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Org",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgDomainDelete": {
              "auth": true,
              "display-name": "Org Domain Delete",
              "docs": undefined,
              "errors": [
                "root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestBadRequestError",
                "root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenError",
                "root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "domain_id": "domain_id",
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "domain": "domain",
                      "id": "id",
                      "status": "unverified",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/domains/{domain_id}",
              "path-parameters": {
                "domain_id": "string",
                "org_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.OrganizationDomain",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgDomainsList": {
              "auth": true,
              "display-name": "Org Domains List",
              "docs": undefined,
              "errors": [
                "root.OrgDomainsListOrgOrgIdDomainsGetRequestBadRequestError",
                "root.OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenError",
                "root.OrgDomainsListOrgOrgIdDomainsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "domain": "domain",
                          "id": "id",
                          "status": "unverified",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/domains",
              "path-parameters": {
                "org_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetOrganizationDomain",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgDomainsPost": {
              "auth": true,
              "display-name": "Org Domains Post",
              "docs": undefined,
              "errors": [
                "root.OrgDomainsPostOrgOrgIdDomainsPostRequestBadRequestError",
                "root.OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenError",
                "root.OrgDomainsPostOrgOrgIdDomainsPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "request": {
                    "domain": "domain",
                  },
                  "response": {
                    "body": {
                      "domain": "domain",
                      "id": "id",
                      "status": "unverified",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/domains",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "domain": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrganizationDomainCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.OrganizationDomain",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgGet": {
              "auth": true,
              "display-name": "Org Get",
              "docs": undefined,
              "errors": [
                "root.OrgGetOrgOrgIdGetRequestBadRequestError",
                "root.OrgGetOrgOrgIdGetRequestForbiddenError",
                "root.OrgGetOrgOrgIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "contact_email": "contact_email",
                      "id": "id",
                      "name": "name",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}",
              "path-parameters": {
                "org_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Org",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgInvitesCreate": {
              "auth": true,
              "display-name": "Org Invites Create",
              "docs": undefined,
              "errors": [
                "root.OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestError",
                "root.OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenError",
                "root.OrgInvitesCreateOrgOrgIdInvitePostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "request": {
                    "email_address": "email_address",
                  },
                  "response": {
                    "body": {
                      "email_address": "email_address",
                      "id": "id",
                      "roles": [
                        "roles",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/invite",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "email_address": {
                      "type": "string",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "roles": {
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrgInviteBase",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.OrganizationInvite",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgInvitesDelete": {
              "auth": true,
              "display-name": "Org Invites Delete",
              "docs": undefined,
              "errors": [
                "root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestBadRequestError",
                "root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenError",
                "root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "org_invite_id": "org_invite_id",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/org/{org_id}/invite/{org_invite_id}",
              "path-parameters": {
                "org_id": "string",
                "org_invite_id": "string",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgInvitesList": {
              "auth": true,
              "display-name": "Org Invites List",
              "docs": undefined,
              "errors": [
                "root.OrgInvitesListOrgOrgIdInviteGetRequestBadRequestError",
                "root.OrgInvitesListOrgOrgIdInviteGetRequestForbiddenError",
                "root.OrgInvitesListOrgOrgIdInviteGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "email_address": "email_address",
                          "id": "id",
                          "roles": [
                            "roles",
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/invite",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "name": "OrgInvitesListOrgOrgIdInviteGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                  "show": "optional<root.OrgInviteShow>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetOrganizationInvite",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgJoin": {
              "auth": true,
              "display-name": "Org Join",
              "docs": undefined,
              "errors": [
                "root.OrgJoinOrgOrgIdJoinPostRequestBadRequestError",
                "root.OrgJoinOrgOrgIdJoinPostRequestForbiddenError",
                "root.OrgJoinOrgOrgIdJoinPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/join",
              "path-parameters": {
                "org_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgList": {
              "auth": true,
              "display-name": "Org List",
              "docs": undefined,
              "errors": [
                "root.OrgListOrgGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org",
              "request": {
                "name": "OrgListOrgGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "membership": "optional<root.OrgMembership>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgUpdate": {
              "auth": true,
              "display-name": "Org Update",
              "docs": undefined,
              "errors": [
                "root.OrgUpdateOrgOrgIdPostRequestBadRequestError",
                "root.OrgUpdateOrgOrgIdPostRequestForbiddenError",
                "root.OrgUpdateOrgOrgIdPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "contact_email": "contact_email",
                      "id": "id",
                      "name": "name",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "contact_email": {
                      "type": "optional<string>",
                      "validation": {
                        "format": "email",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrgUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Org",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "orgUpdateAvatar": {
              "auth": true,
              "display-name": "Org Update Avatar",
              "docs": undefined,
              "errors": [
                "root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestBadRequestError",
                "root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenError",
                "root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "contact_email": "contact_email",
                      "id": "id",
                      "name": "name",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/avatar",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "file": "file",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "Body_org_update_avatar_org__org_id__avatar_post",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Org",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "organization_get_member": {
              "auth": true,
              "display-name": "IAM - Lookup Organization Member",
              "docs": "Retrieve a specific member that has been granted direct access to the organization.",
              "errors": [
                "root.OrganizationGetMemberRequestBadRequestError",
                "root.OrganizationGetMemberRequestForbiddenError",
                "root.OrganizationGetMemberRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "member": "member",
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/iam/members/{member}",
              "path-parameters": {
                "member": "string",
                "org_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "organization_iam_list_members": {
              "auth": true,
              "display-name": "IAM - List Organization Members",
              "docs": "Lists all members that have been granted direct access to the organization.",
              "errors": [
                "root.OrganizationIamListMembersRequestBadRequestError",
                "root.OrganizationIamListMembersRequestForbiddenError",
                "root.OrganizationIamListMembersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "avatar_url": "avatar_url",
                          "member": "member",
                          "name": "name",
                          "roles": [
                            "roles",
                          ],
                          "total_subjects": 1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/iam/members",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "name": "OrganizationIamListMembersRequest",
                "query-parameters": {
                  "type": "optional<OrganizationIamListMembersRequestType>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetIamMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "organization_iam_test_permissions": {
              "auth": true,
              "display-name": "IAM - Test Organization Permissions",
              "docs": "Test the permissions that the caller (or another subject) holds on the organization.",
              "errors": [
                "root.OrganizationIamTestPermissionsRequestBadRequestError",
                "root.OrganizationIamTestPermissionsRequestForbiddenError",
                "root.OrganizationIamTestPermissionsRequestNotFoundError",
                "root.OrganizationIamTestPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "request": {
                    "permissions": [
                      "add_editor",
                    ],
                  },
                  "response": {
                    "body": {
                      "member": "member",
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/iam/test",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "member": {
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "A list of permissions to test on the organization.",
                      "type": "list<OrganizationIamPermissionTestPermissionsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrganizationIAMPermissionTest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMPermissionTest",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "organization_iam_update_member_roles": {
              "auth": true,
              "display-name": "IAM - Update Organization Member",
              "docs": "Update the roles that a member holds on the organization.",
              "errors": [
                "root.OrganizationIamUpdateMemberRolesRequestBadRequestError",
                "root.OrganizationIamUpdateMemberRolesRequestForbiddenError",
                "root.OrganizationIamUpdateMemberRolesRequestNotFoundError",
                "root.OrganizationIamUpdateMemberRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "member": "member",
                    "org_id": "org_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/iam/members/{member}",
              "path-parameters": {
                "member": "string",
                "org_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "add": {
                      "docs": "A list of organization roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in `remove`.

This may be combined with `remove_all` to replace the member's entire role list.",
                      "type": "optional<list<OrganizationIamMemberRoleUpdateAddItem>>",
                    },
                    "remove": {
                      "docs": "A list of organization roles to revoke from the member.",
                      "type": "optional<list<OrganizationIamMemberRoleUpdateRemoveItem>>",
                    },
                    "remove_all": {
                      "docs": "Removes all existing roles from the member. This may be combined with `add` to replace all existing roles that the member holds.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "OrganizationIAMMemberRoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "OrganizationIamListMembersRequestType": {
            "enum": [
              "user",
              "organization",
              "project",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationIamMemberRoleUpdateAddItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationIamMemberRoleUpdateRemoveItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "OrganizationIamPermissionTestPermissionsItem": {
            "enum": [
              "add_editor",
              "add_member",
              "add_owner",
              "create_project",
              "edit",
              "remove_editor",
              "remove_member",
              "remove_owner",
              "view",
              "view_members",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "types:
  OrganizationIamListMembersRequestType:
    enum:
      - user
      - organization
      - project
    source:
      openapi: ../openapi.yml
  OrganizationIamMemberRoleUpdateAddItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  OrganizationIamMemberRoleUpdateRemoveItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  OrganizationIamPermissionTestPermissionsItem:
    enum:
      - add_editor
      - add_member
      - add_owner
      - create_project
      - edit
      - remove_editor
      - remove_member
      - remove_owner
      - view
      - view_members
    inline: true
    source:
      openapi: ../openapi.yml
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    organization_iam_list_members:
      path: /org/{org_id}/iam/members
      method: GET
      auth: true
      docs: >-
        Lists all members that have been granted direct access to the
        organization.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: IAM - List Organization Members
      request:
        name: OrganizationIamListMembersRequest
        query-parameters:
          type: optional<OrganizationIamListMembersRequestType>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetIamMember
        status-code: 200
      errors:
        - root.OrganizationIamListMembersRequestBadRequestError
        - root.OrganizationIamListMembersRequestForbiddenError
        - root.OrganizationIamListMembersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - member: member
                  roles:
                    - roles
                  name: name
                  avatar_url: avatar_url
                  total_subjects: 1
    organization_get_member:
      path: /org/{org_id}/iam/members/{member}
      method: GET
      auth: true
      docs: >-
        Retrieve a specific member that has been granted direct access to the
        organization.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        member: string
      display-name: IAM - Lookup Organization Member
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.OrganizationGetMemberRequestBadRequestError
        - root.OrganizationGetMemberRequestForbiddenError
        - root.OrganizationGetMemberRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            member: member
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    organization_iam_update_member_roles:
      path: /org/{org_id}/iam/members/{member}
      method: POST
      auth: true
      docs: Update the roles that a member holds on the organization.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        member: string
      display-name: IAM - Update Organization Member
      request:
        name: OrganizationIAMMemberRoleUpdate
        body:
          properties:
            add:
              type: optional<list<OrganizationIamMemberRoleUpdateAddItem>>
              docs: >-
                A list of organization roles to grant to the member.


                Roles in this list are applied to the member AFTER any removals
                specified in `remove`.


                This may be combined with `remove_all` to replace the member's
                entire role list.
            remove:
              type: optional<list<OrganizationIamMemberRoleUpdateRemoveItem>>
              docs: A list of organization roles to revoke from the member.
            remove_all:
              type: optional<boolean>
              docs: >-
                Removes all existing roles from the member. This may be combined
                with `add` to replace all existing roles that the member holds.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.OrganizationIamUpdateMemberRolesRequestBadRequestError
        - root.OrganizationIamUpdateMemberRolesRequestForbiddenError
        - root.OrganizationIamUpdateMemberRolesRequestNotFoundError
        - root.OrganizationIamUpdateMemberRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            member: member
          request: {}
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    organization_iam_test_permissions:
      path: /org/{org_id}/iam/test
      method: POST
      auth: true
      docs: >-
        Test the permissions that the caller (or another subject) holds on the
        organization.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: IAM - Test Organization Permissions
      request:
        name: OrganizationIAMPermissionTest
        body:
          properties:
            permissions:
              docs: A list of permissions to test on the organization.
              type: list<OrganizationIamPermissionTestPermissionsItem>
            member:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMPermissionTest
        status-code: 200
      errors:
        - root.OrganizationIamTestPermissionsRequestBadRequestError
        - root.OrganizationIamTestPermissionsRequestForbiddenError
        - root.OrganizationIamTestPermissionsRequestNotFoundError
        - root.OrganizationIamTestPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          request:
            permissions:
              - add_editor
          response:
            body:
              permissions:
                - permissions
              member: member
    orgList:
      path: /org
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Org List
      request:
        name: OrgListOrgGetRequest
        query-parameters:
          membership: optional<root.OrgMembership>
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - root.OrgListOrgGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              key: value
    orgCreate:
      path: /org
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: Org Create
      request:
        name: OrgCreate
        body:
          properties:
            name: string
            contact_email:
              type: string
              validation:
                format: email
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Org
        status-code: 200
      errors:
        - root.OrgCreateOrgPostRequestUnprocessableEntityError
      examples:
        - request:
            name: name
            contact_email: contact_email
          response:
            body:
              name: name
              contact_email: contact_email
              avatar_url: avatar_url
              id: id
    orgGet:
      path: /org/{org_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Get
      response:
        docs: Successful Response
        type: root.Org
        status-code: 200
      errors:
        - root.OrgGetOrgOrgIdGetRequestBadRequestError
        - root.OrgGetOrgOrgIdGetRequestForbiddenError
        - root.OrgGetOrgOrgIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          response:
            body:
              name: name
              contact_email: contact_email
              avatar_url: avatar_url
              id: id
    orgUpdate:
      path: /org/{org_id}
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Update
      request:
        name: OrgUpdate
        body:
          properties:
            contact_email:
              type: optional<string>
              validation:
                format: email
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Org
        status-code: 200
      errors:
        - root.OrgUpdateOrgOrgIdPostRequestBadRequestError
        - root.OrgUpdateOrgOrgIdPostRequestForbiddenError
        - root.OrgUpdateOrgOrgIdPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          request: {}
          response:
            body:
              name: name
              contact_email: contact_email
              avatar_url: avatar_url
              id: id
    orgJoin:
      path: /org/{org_id}/join
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Join
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.OrgJoinOrgOrgIdJoinPostRequestBadRequestError
        - root.OrgJoinOrgOrgIdJoinPostRequestForbiddenError
        - root.OrgJoinOrgOrgIdJoinPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    orgInvitesList:
      path: /org/{org_id}/invite
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Invites List
      request:
        name: OrgInvitesListOrgOrgIdInviteGetRequest
        query-parameters:
          show: optional<root.OrgInviteShow>
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetOrganizationInvite
        status-code: 200
      errors:
        - root.OrgInvitesListOrgOrgIdInviteGetRequestBadRequestError
        - root.OrgInvitesListOrgOrgIdInviteGetRequestForbiddenError
        - root.OrgInvitesListOrgOrgIdInviteGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - email_address: email_address
                  roles:
                    - roles
                  id: id
    orgInvitesCreate:
      path: /org/{org_id}/invite
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Invites Create
      request:
        name: OrgInviteBase
        body:
          properties:
            email_address:
              type: string
              validation:
                format: email
            roles:
              type: optional<list<string>>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.OrganizationInvite
        status-code: 200
      errors:
        - root.OrgInvitesCreateOrgOrgIdInvitePostRequestBadRequestError
        - root.OrgInvitesCreateOrgOrgIdInvitePostRequestForbiddenError
        - root.OrgInvitesCreateOrgOrgIdInvitePostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          request:
            email_address: email_address
          response:
            body:
              email_address: email_address
              roles:
                - roles
              id: id
    orgInvitesDelete:
      path: /org/{org_id}/invite/{org_invite_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        org_invite_id: string
      display-name: Org Invites Delete
      errors:
        - >-
          root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestBadRequestError
        - >-
          root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestForbiddenError
        - >-
          root.OrgInvitesDeleteOrgOrgIdInviteOrgInviteIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            org_invite_id: org_invite_id
    orgDomainsList:
      path: /org/{org_id}/domains
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Domains List
      response:
        docs: Successful Response
        type: root.PaginatedResultSetOrganizationDomain
        status-code: 200
      errors:
        - root.OrgDomainsListOrgOrgIdDomainsGetRequestBadRequestError
        - root.OrgDomainsListOrgOrgIdDomainsGetRequestForbiddenError
        - root.OrgDomainsListOrgOrgIdDomainsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - domain: domain
                  id: id
                  status: unverified
    orgDomainsPost:
      path: /org/{org_id}/domains
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Domains Post
      request:
        name: OrganizationDomainCreate
        body:
          properties:
            domain: string
        content-type: application/json
      response:
        docs: Successful Response
        type: root.OrganizationDomain
        status-code: 200
      errors:
        - root.OrgDomainsPostOrgOrgIdDomainsPostRequestBadRequestError
        - root.OrgDomainsPostOrgOrgIdDomainsPostRequestForbiddenError
        - root.OrgDomainsPostOrgOrgIdDomainsPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          request:
            domain: domain
          response:
            body:
              domain: domain
              id: id
              status: unverified
    orgDomainDelete:
      path: /org/{org_id}/domains/{domain_id}
      method: DELETE
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        domain_id: string
      display-name: Org Domain Delete
      response:
        docs: Successful Response
        type: root.OrganizationDomain
        status-code: 200
      errors:
        - >-
          root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestBadRequestError
        - root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestForbiddenError
        - >-
          root.OrgDomainDeleteOrgOrgIdDomainsDomainIdDeleteRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            domain_id: domain_id
          response:
            body:
              domain: domain
              id: id
              status: unverified
    orgUpdateAvatar:
      path: /org/{org_id}/avatar
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Org Update Avatar
      request:
        name: Body_org_update_avatar_org__org_id__avatar_post
        body:
          properties:
            file: file
        content-type: multipart/form-data
      response:
        docs: Successful Response
        type: root.Org
        status-code: 200
      errors:
        - root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestBadRequestError
        - root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestForbiddenError
        - root.OrgUpdateAvatarOrgOrgIdAvatarPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          request: {}
          response:
            body:
              name: name
              contact_email: contact_email
              avatar_url: avatar_url
              id: id
  source:
    openapi: ../openapi.yml
",
    },
    "project.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "createProject": {
              "auth": true,
              "display-name": "Create Project",
              "docs": undefined,
              "errors": [
                "root.CreateProjectOrgOrgIdProjectPostRequestBadRequestError",
                "root.CreateProjectOrgOrgIdProjectPostRequestForbiddenError",
                "root.CreateProjectOrgOrgIdProjectPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "request": {
                    "name": "name",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "id": "id",
                      "name": "name",
                      "org_id": "org_id",
                      "tasks_oauth_client_id": "tasks_oauth_client_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "name": "string",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProjectCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Project",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getMember": {
              "auth": true,
              "display-name": "IAM - Lookup Project Member",
              "docs": "Retrieve a specific member that has been granted direct access to the project.",
              "errors": [
                "root.ProjectGetMemberRequestBadRequestError",
                "root.ProjectGetMemberRequestForbiddenError",
                "root.ProjectGetMemberRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/iam/members/{member}",
              "path-parameters": {
                "member": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getProject": {
              "auth": true,
              "display-name": "Get Project",
              "docs": undefined,
              "errors": [
                "root.GetProjectOrgOrgIdProjectProjectIdGetRequestBadRequestError",
                "root.GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenError",
                "root.GetProjectOrgOrgIdProjectProjectIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "datasource_connections": [
                        {
                          "config": {
                            "key": "value",
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "datasource": {
                            "id": "id",
                            "name": "name",
                          },
                          "datasource_id": "datasource_id",
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "name": "name",
                          "private": true,
                          "project_id": "project_id",
                        },
                      ],
                      "id": "id",
                      "name": "name",
                      "org_id": "org_id",
                      "tasks_oauth_client_id": "tasks_oauth_client_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ProjectWithDatasources",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getProjectConfig": {
              "auth": false,
              "display-name": "Get Project Config",
              "docs": undefined,
              "errors": [
                "root.GetProjectConfigOrgOrgIdProjectProjectIdConfigGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "chat_guardrails": {
                        "input": [
                          {
                            "name": "prompt_policy",
                          },
                        ],
                        "output": [
                          {
                            "name": "source_validation",
                          },
                        ],
                      },
                      "chat_system_commands": [
                        "chat_system_commands",
                      ],
                      "knn": 1,
                      "llm": "gpt-4o",
                      "query_expansion": true,
                      "temperature": 1.1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/config",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ProjectConfig",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamListMembers": {
              "auth": true,
              "display-name": "IAM - List Project Members",
              "docs": "Lists all members that have been granted direct access to the project.",
              "errors": [
                "root.ProjectIamListMembersRequestBadRequestError",
                "root.ProjectIamListMembersRequestForbiddenError",
                "root.ProjectIamListMembersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "avatar_url": "avatar_url",
                          "member": "member",
                          "name": "name",
                          "roles": [
                            "roles",
                          ],
                          "total_subjects": 1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/iam/members",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ProjectIamListMembersRequest",
                "query-parameters": {
                  "type": "optional<ProjectIamListMembersRequestType>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetIamMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamTestPermissions": {
              "auth": true,
              "display-name": "IAM - Test Project Permissions",
              "docs": "Test the permissions that the caller (or another subject) holds on the project.",
              "errors": [
                "root.ProjectIamTestPermissionsRequestBadRequestError",
                "root.ProjectIamTestPermissionsRequestForbiddenError",
                "root.ProjectIamTestPermissionsRequestNotFoundError",
                "root.ProjectIamTestPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "permissions": [
                      "add_editor",
                    ],
                  },
                  "response": {
                    "body": {
                      "member": "member",
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/iam/test",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "member": {
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "A list of permissions to test on the project.",
                      "type": "list<ProjectIamPermissionTestPermissionsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProjectIAMPermissionTest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMPermissionTest",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "iamUpdateMemberRoles": {
              "auth": true,
              "display-name": "IAM - Update Project Member",
              "docs": "Update the roles that a member holds on the project.",
              "errors": [
                "root.ProjectIamUpdateMemberRolesRequestBadRequestError",
                "root.ProjectIamUpdateMemberRolesRequestForbiddenError",
                "root.ProjectIamUpdateMemberRolesRequestNotFoundError",
                "root.ProjectIamUpdateMemberRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/iam/members/{member}",
              "path-parameters": {
                "member": "string",
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "add": {
                      "docs": "A list of project roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in `remove`.

This may be combined with `remove_all` to replace the member's entire role list.",
                      "type": "optional<list<ProjectIamMemberRoleUpdateAddItem>>",
                    },
                    "remove": {
                      "docs": "A list of project roles to revoke from the member.",
                      "type": "optional<list<ProjectIamMemberRoleUpdateRemoveItem>>",
                    },
                    "remove_all": {
                      "docs": "Removes all existing roles from the member. This may be combined with `add` to replace all existing roles that the member holds.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProjectIAMMemberRoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listProject": {
              "auth": true,
              "display-name": "List Project",
              "docs": undefined,
              "errors": [
                "root.ListProjectOrgOrgIdProjectGetRequestBadRequestError",
                "root.ListProjectOrgOrgIdProjectGetRequestForbiddenError",
                "root.ListProjectOrgOrgIdProjectGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "avatar_url": "avatar_url",
                          "id": "id",
                          "name": "name",
                          "org_id": "org_id",
                          "tasks_oauth_client_id": "tasks_oauth_client_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project",
              "path-parameters": {
                "org_id": "string",
              },
              "request": {
                "name": "ListProjectOrgOrgIdProjectGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetProject",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "projectUpdateAvatar": {
              "auth": true,
              "display-name": "Project Update Avatar",
              "docs": undefined,
              "errors": [
                "root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestBadRequestError",
                "root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenError",
                "root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "id": "id",
                      "name": "name",
                      "org_id": "org_id",
                      "tasks_oauth_client_id": "tasks_oauth_client_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/avatar",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "file": "file",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "Body_project_update_avatar_org__org_id__project__project_id__avatar_post",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Project",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "setProjectConfig": {
              "auth": true,
              "display-name": "Set Project Config",
              "docs": undefined,
              "errors": [
                "root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestBadRequestError",
                "root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenError",
                "root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "chat_guardrails": {
                        "input": [
                          {
                            "name": "prompt_policy",
                          },
                        ],
                        "output": [
                          {
                            "name": "source_validation",
                          },
                        ],
                      },
                      "chat_system_commands": [
                        "chat_system_commands",
                      ],
                      "knn": 1,
                      "llm": "gpt-4o",
                      "query_expansion": true,
                      "temperature": 1.1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/config",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "chat_guardrails": {
                      "type": "optional<root.ConversationalGuardrails>",
                    },
                    "chat_system_commands": {
                      "type": "optional<list<string>>",
                    },
                    "knn": {
                      "default": 4,
                      "type": "optional<integer>",
                    },
                    "llm": {
                      "default": "gpt-3.5-turbo",
                      "type": "optional<Llm>",
                    },
                    "query_expansion": {
                      "default": false,
                      "docs": "Enable query expansion. Uses an LLM to generate multiple rephrasing of the original query for better broad spectrum vector retrieval",
                      "type": "optional<boolean>",
                    },
                    "temperature": {
                      "default": 0.5,
                      "type": "optional<double>",
                      "validation": {
                        "exclusiveMax": undefined,
                        "exclusiveMin": undefined,
                        "max": 1,
                        "min": 0,
                        "multipleOf": undefined,
                      },
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProjectConfig",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.ProjectConfig",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "updateProject": {
              "auth": true,
              "display-name": "Update Project",
              "docs": undefined,
              "errors": [
                "root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestBadRequestError",
                "root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenError",
                "root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "id": "id",
                      "name": "name",
                      "org_id": "org_id",
                      "tasks_oauth_client_id": "tasks_oauth_client_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProjectUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Project",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "Llm": {
            "default": "gpt-3.5-turbo",
            "enum": [
              {
                "name": "Gpt4O",
                "value": "gpt-4o",
              },
              {
                "name": "Gpt35Turbo",
                "value": "gpt-3.5-turbo",
              },
              {
                "name": "Gpt4",
                "value": "gpt-4",
              },
              {
                "name": "Gpt4Turbo",
                "value": "gpt-4-turbo",
              },
              {
                "name": "Gpt4TurboPreview",
                "value": "gpt-4-turbo-preview",
              },
              {
                "name": "Gpt41106Preview",
                "value": "gpt-4-1106-preview",
              },
              {
                "name": "Claude35Sonnet20240620",
                "value": "claude-3-5-sonnet-20240620",
              },
              {
                "name": "Claude3Haiku20240307",
                "value": "claude-3-haiku-20240307",
              },
              {
                "name": "Claude3Sonnet20240229",
                "value": "claude-3-sonnet-20240229",
              },
              {
                "name": "Claude3Opus20240229",
                "value": "claude-3-opus-20240229",
              },
              {
                "name": "Gemini15ProLatest",
                "value": "gemini-1.5-pro-latest",
              },
              {
                "name": "GeminiPro",
                "value": "gemini-pro",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProjectIamListMembersRequestType": {
            "enum": [
              "user",
              "organization",
              "project",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProjectIamMemberRoleUpdateAddItem": {
            "enum": [
              "data_creator",
              "data_editor",
              "data_viewer",
              "editor",
              "owner",
              "task_creator",
              "task_runner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProjectIamMemberRoleUpdateRemoveItem": {
            "enum": [
              "data_creator",
              "data_editor",
              "data_viewer",
              "editor",
              "owner",
              "task_creator",
              "task_runner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProjectIamPermissionTestPermissionsItem": {
            "enum": [
              "add_editor",
              "add_member",
              "add_owner",
              "collections_edit",
              "collections_view",
              "create_chat",
              "create_collection",
              "create_compose",
              "create_datasource_connection",
              "create_document",
              "create_task",
              "datasource_connections_edit",
              "datasource_connections_view",
              "documents_edit",
              "documents_view",
              "edit",
              "edit_data",
              "list_documents",
              "query_data",
              "remove_editor",
              "remove_member",
              "remove_owner",
              "run_task",
              "view",
              "view_data",
              "view_members",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listProject:
      path: /org/{org_id}/project
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: List Project
      request:
        name: ListProjectOrgOrgIdProjectGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetProject
        status-code: 200
      errors:
        - root.ListProjectOrgOrgIdProjectGetRequestBadRequestError
        - root.ListProjectOrgOrgIdProjectGetRequestForbiddenError
        - root.ListProjectOrgOrgIdProjectGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - name: name
                  avatar_url: avatar_url
                  id: id
                  org_id: org_id
                  tasks_oauth_client_id: tasks_oauth_client_id
    createProject:
      path: /org/{org_id}/project
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
      display-name: Create Project
      request:
        name: ProjectCreate
        body:
          properties:
            name: string
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Project
        status-code: 200
      errors:
        - root.CreateProjectOrgOrgIdProjectPostRequestBadRequestError
        - root.CreateProjectOrgOrgIdProjectPostRequestForbiddenError
        - root.CreateProjectOrgOrgIdProjectPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
          request:
            name: name
          response:
            body:
              name: name
              avatar_url: avatar_url
              id: id
              org_id: org_id
              tasks_oauth_client_id: tasks_oauth_client_id
    getProject:
      path: /org/{org_id}/project/{project_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Get Project
      response:
        docs: Successful Response
        type: root.ProjectWithDatasources
        status-code: 200
      errors:
        - root.GetProjectOrgOrgIdProjectProjectIdGetRequestBadRequestError
        - root.GetProjectOrgOrgIdProjectProjectIdGetRequestForbiddenError
        - >-
          root.GetProjectOrgOrgIdProjectProjectIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              name: name
              avatar_url: avatar_url
              id: id
              org_id: org_id
              tasks_oauth_client_id: tasks_oauth_client_id
              datasource_connections:
                - id: id
                  name: name
                  private: true
                  project_id: project_id
                  datasource_id: datasource_id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  config:
                    key: value
                  datasource:
                    name: name
                    id: id
    updateProject:
      path: /org/{org_id}/project/{project_id}
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Update Project
      request:
        name: ProjectUpdate
        body:
          properties:
            name:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Project
        status-code: 200
      errors:
        - root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestBadRequestError
        - root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestForbiddenError
        - >-
          root.UpdateProjectOrgOrgIdProjectProjectIdPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request: {}
          response:
            body:
              name: name
              avatar_url: avatar_url
              id: id
              org_id: org_id
              tasks_oauth_client_id: tasks_oauth_client_id
    getProjectConfig:
      path: /org/{org_id}/project/{project_id}/config
      method: GET
      auth: false
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Get Project Config
      response:
        docs: Successful Response
        type: root.ProjectConfig
        status-code: 200
      errors:
        - >-
          root.GetProjectConfigOrgOrgIdProjectProjectIdConfigGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              llm: gpt-4o
              temperature: 1.1
              knn: 1
              chat_system_commands:
                - chat_system_commands
              chat_guardrails:
                input:
                  - name: prompt_policy
                output:
                  - name: source_validation
              query_expansion: true
    setProjectConfig:
      path: /org/{org_id}/project/{project_id}/config
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Set Project Config
      request:
        name: ProjectConfig
        body:
          properties:
            llm:
              type: optional<Llm>
              default: gpt-3.5-turbo
            temperature:
              type: optional<double>
              default: 0.5
              validation:
                min: 0
                max: 1
            knn:
              type: optional<integer>
              default: 4
            chat_system_commands:
              type: optional<list<string>>
            chat_guardrails:
              type: optional<root.ConversationalGuardrails>
            query_expansion:
              type: optional<boolean>
              docs: >-
                Enable query expansion. Uses an LLM to generate multiple
                rephrasing of the original query for better broad spectrum
                vector retrieval
              default: false
        content-type: application/json
      response:
        docs: Successful Response
        type: root.ProjectConfig
        status-code: 200
      errors:
        - >-
          root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestBadRequestError
        - >-
          root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestForbiddenError
        - >-
          root.SetProjectConfigOrgOrgIdProjectProjectIdConfigPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request: {}
          response:
            body:
              llm: gpt-4o
              temperature: 1.1
              knn: 1
              chat_system_commands:
                - chat_system_commands
              chat_guardrails:
                input:
                  - name: prompt_policy
                output:
                  - name: source_validation
              query_expansion: true
    projectUpdateAvatar:
      path: /org/{org_id}/project/{project_id}/avatar
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Project Update Avatar
      request:
        name: >-
          Body_project_update_avatar_org__org_id__project__project_id__avatar_post
        body:
          properties:
            file: file
        content-type: multipart/form-data
      response:
        docs: Successful Response
        type: root.Project
        status-code: 200
      errors:
        - >-
          root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestBadRequestError
        - >-
          root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestForbiddenError
        - >-
          root.ProjectUpdateAvatarOrgOrgIdProjectProjectIdAvatarPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request: {}
          response:
            body:
              name: name
              avatar_url: avatar_url
              id: id
              org_id: org_id
              tasks_oauth_client_id: tasks_oauth_client_id
    iamListMembers:
      path: /org/{org_id}/project/{project_id}/iam/members
      method: GET
      auth: true
      docs: Lists all members that have been granted direct access to the project.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: IAM - List Project Members
      request:
        name: ProjectIamListMembersRequest
        query-parameters:
          type: optional<ProjectIamListMembersRequestType>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetIamMember
        status-code: 200
      errors:
        - root.ProjectIamListMembersRequestBadRequestError
        - root.ProjectIamListMembersRequestForbiddenError
        - root.ProjectIamListMembersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - member: member
                  roles:
                    - roles
                  name: name
                  avatar_url: avatar_url
                  total_subjects: 1
    getMember:
      path: /org/{org_id}/project/{project_id}/iam/members/{member}
      method: GET
      auth: true
      docs: >-
        Retrieve a specific member that has been granted direct access to the
        project.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        member: string
      display-name: IAM - Lookup Project Member
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.ProjectGetMemberRequestBadRequestError
        - root.ProjectGetMemberRequestForbiddenError
        - root.ProjectGetMemberRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            member: member
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamUpdateMemberRoles:
      path: /org/{org_id}/project/{project_id}/iam/members/{member}
      method: POST
      auth: true
      docs: Update the roles that a member holds on the project.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        member: string
      display-name: IAM - Update Project Member
      request:
        name: ProjectIAMMemberRoleUpdate
        body:
          properties:
            add:
              type: optional<list<ProjectIamMemberRoleUpdateAddItem>>
              docs: >-
                A list of project roles to grant to the member.


                Roles in this list are applied to the member AFTER any removals
                specified in `remove`.


                This may be combined with `remove_all` to replace the member's
                entire role list.
            remove:
              type: optional<list<ProjectIamMemberRoleUpdateRemoveItem>>
              docs: A list of project roles to revoke from the member.
            remove_all:
              type: optional<boolean>
              docs: >-
                Removes all existing roles from the member. This may be combined
                with `add` to replace all existing roles that the member holds.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.ProjectIamUpdateMemberRolesRequestBadRequestError
        - root.ProjectIamUpdateMemberRolesRequestForbiddenError
        - root.ProjectIamUpdateMemberRolesRequestNotFoundError
        - root.ProjectIamUpdateMemberRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            member: member
          request: {}
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    iamTestPermissions:
      path: /org/{org_id}/project/{project_id}/iam/test
      method: POST
      auth: true
      docs: >-
        Test the permissions that the caller (or another subject) holds on the
        project.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: IAM - Test Project Permissions
      request:
        name: ProjectIAMPermissionTest
        body:
          properties:
            permissions:
              docs: A list of permissions to test on the project.
              type: list<ProjectIamPermissionTestPermissionsItem>
            member:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMPermissionTest
        status-code: 200
      errors:
        - root.ProjectIamTestPermissionsRequestBadRequestError
        - root.ProjectIamTestPermissionsRequestForbiddenError
        - root.ProjectIamTestPermissionsRequestNotFoundError
        - root.ProjectIamTestPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            permissions:
              - add_editor
          response:
            body:
              permissions:
                - permissions
              member: member
  source:
    openapi: ../openapi.yml
types:
  Llm:
    enum:
      - value: gpt-4o
        name: Gpt4O
      - value: gpt-3.5-turbo
        name: Gpt35Turbo
      - value: gpt-4
        name: Gpt4
      - value: gpt-4-turbo
        name: Gpt4Turbo
      - value: gpt-4-turbo-preview
        name: Gpt4TurboPreview
      - value: gpt-4-1106-preview
        name: Gpt41106Preview
      - value: claude-3-5-sonnet-20240620
        name: Claude35Sonnet20240620
      - value: claude-3-haiku-20240307
        name: Claude3Haiku20240307
      - value: claude-3-sonnet-20240229
        name: Claude3Sonnet20240229
      - value: claude-3-opus-20240229
        name: Claude3Opus20240229
      - value: gemini-1.5-pro-latest
        name: Gemini15ProLatest
      - value: gemini-pro
        name: GeminiPro
    default: gpt-3.5-turbo
    inline: true
    source:
      openapi: ../openapi.yml
  ProjectIamListMembersRequestType:
    enum:
      - user
      - organization
      - project
    source:
      openapi: ../openapi.yml
  ProjectIamMemberRoleUpdateAddItem:
    enum:
      - data_creator
      - data_editor
      - data_viewer
      - editor
      - owner
      - task_creator
      - task_runner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  ProjectIamMemberRoleUpdateRemoveItem:
    enum:
      - data_creator
      - data_editor
      - data_viewer
      - editor
      - owner
      - task_creator
      - task_runner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  ProjectIamPermissionTestPermissionsItem:
    enum:
      - add_editor
      - add_member
      - add_owner
      - collections_edit
      - collections_view
      - create_chat
      - create_collection
      - create_compose
      - create_datasource_connection
      - create_document
      - create_task
      - datasource_connections_edit
      - datasource_connections_view
      - documents_edit
      - documents_view
      - edit
      - edit_data
      - list_documents
      - query_data
      - remove_editor
      - remove_member
      - remove_owner
      - run_task
      - view
      - view_data
      - view_members
    inline: true
    source:
      openapi: ../openapi.yml
",
    },
    "scrape.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "checkStatus": {
              "auth": false,
              "display-name": "Check Status",
              "docs": undefined,
              "errors": [
                "root.CheckStatusOrgOrgIdProjectProjectIdScrapeRunSyncRunIdGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                    "sync_run_id": "sync_run_id",
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/scrape/run/{sync_run_id}",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
                "sync_run_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "enable": {
              "auth": true,
              "display-name": "Enable Web Scrape",
              "docs": undefined,
              "errors": [
                "root.EnableOrgOrgIdProjectProjectIdScrapePostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/scrape",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "unknown",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "fetch": {
              "auth": true,
              "display-name": "Initialise Web Scrape",
              "docs": undefined,
              "errors": [
                "root.FetchOrgOrgIdProjectProjectIdScrapeStartPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "request": {
                    "urls": [
                      "urls",
                    ],
                  },
                  "response": {
                    "body": {
                      "created": "2024-01-15T09:30:00Z",
                      "datasource_connection": {
                        "config": {
                          "key": "value",
                        },
                        "created_by": "created_by",
                        "datasource_id": "datasource_id",
                        "id": "id",
                        "private": true,
                        "project_id": "project_id",
                        "token": "token",
                      },
                      "id": "id",
                      "modified": "2024-01-15T09:30:00Z",
                      "run_output": {
                        "key": "value",
                      },
                      "status": "pending",
                      "task_id": "task_id",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/scrape/start",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "max_crawl_depth": {
                      "default": 3,
                      "type": "optional<integer>",
                      "validation": {
                        "exclusiveMax": undefined,
                        "exclusiveMin": undefined,
                        "max": 7,
                        "min": undefined,
                        "multipleOf": undefined,
                      },
                    },
                    "urls": {
                      "type": "list<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SiteScrapeRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.DatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "listRuns": {
              "auth": true,
              "display-name": "List Runs",
              "docs": undefined,
              "errors": [
                "root.ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-01-15T09:30:00Z",
                          "datasource_connection": {
                            "id": "id",
                          },
                          "id": "id",
                          "modified": "2024-01-15T09:30:00Z",
                          "run_output": {
                            "key": "value",
                          },
                          "status": "pending",
                          "task_id": "task_id",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/scrape/runs",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
              },
              "request": {
                "name": "ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequest",
                "query-parameters": {
                  "cursor": "optional<string>",
                  "page_limit": "optional<integer>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetDatasourceSyncRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    enable:
      path: /org/{org_id}/project/{project_id}/scrape
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Enable Web Scrape
      response:
        docs: Successful Response
        type: unknown
        status-code: 200
      errors:
        - >-
          root.EnableOrgOrgIdProjectProjectIdScrapePostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              key: value
    fetch:
      path: /org/{org_id}/project/{project_id}/scrape/start
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: Initialise Web Scrape
      request:
        name: SiteScrapeRequest
        body:
          properties:
            urls:
              type: list<string>
            max_crawl_depth:
              type: optional<integer>
              default: 3
              validation:
                max: 7
        content-type: application/json
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.FetchOrgOrgIdProjectProjectIdScrapeStartPostRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          request:
            urls:
              - urls
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    checkStatus:
      path: /org/{org_id}/project/{project_id}/scrape/run/{sync_run_id}
      method: GET
      auth: false
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        sync_run_id: string
      display-name: Check Status
      response:
        docs: Successful Response
        type: root.DatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.CheckStatusOrgOrgIdProjectProjectIdScrapeRunSyncRunIdGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            sync_run_id: sync_run_id
          response:
            body:
              task_id: task_id
              status: pending
              run_output:
                key: value
              id: id
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
              datasource_connection:
                private: true
                project_id: project_id
                datasource_id: datasource_id
                config:
                  key: value
                token: token
                created_by: created_by
                id: id
    listRuns:
      path: /org/{org_id}/project/{project_id}/scrape/runs
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
      display-name: List Runs
      request:
        name: ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequest
        query-parameters:
          cursor: optional<string>
          page_limit: optional<integer>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetDatasourceSyncRun
        status-code: 200
      errors:
        - >-
          root.ListRunsOrgOrgIdProjectProjectIdScrapeRunsGetRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_id: task_id
                  status: pending
                  run_output:
                    key: value
                  id: id
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
                  datasource_connection:
                    id: id
  source:
    openapi: ../openapi.yml
",
    },
    "taskForwarders.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "createTaskForwarder": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Create a Task Forwarder",
              "docs": "A Task Forwarder will receive the output of a Task and forward it to the specified destination. This can be used to send data to external systems, or to trigger other actions based on the output of a Task.",
              "errors": [
                "root.CreateTaskForwarderRequestBadRequestError",
                "root.CreateTaskForwarderRequestForbiddenError",
                "root.CreateTaskForwarderRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  },
                  "request": {
                    "config": {
                      "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                    },
                    "config_sensitive": {
                      "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                    },
                    "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                    "name": "Webhook Endpoint",
                  },
                  "response": {
                    "body": {
                      "config": {
                        "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                      },
                      "config_sensitive": {
                        "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                      "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                      "modified": "2024-01-15T09:30:00Z",
                      "name": "Webhook Endpoint",
                      "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task_forwarder",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "config": {
                      "docs": "Configuration parameters for the Task Forwarder such as a `destination` URL.",
                      "type": "optional<root.TaskForwarderConfig>",
                    },
                    "config_sensitive": {
                      "docs": "Sensitive parameters for the Task Forwarder such as a `signing_key`.",
                      "type": "optional<root.TaskForwarderSensitiveConfig>",
                    },
                    "description": {
                      "docs": "Additional details about the Task Forwarder's purpose or configuration.",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "A descriptive name for the Task Forwarder.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaskForwarderCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TaskForwarder",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getAllTaskForwarders": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "List all Task Forwarders",
              "docs": undefined,
              "errors": [
                "root.GetAllTaskForwardersRequestBadRequestError",
                "root.GetAllTaskForwardersRequestForbiddenError",
                "root.GetAllTaskForwardersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "config": {
                            "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                          },
                          "config_sensitive": {
                            "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                          },
                          "created": "2024-01-15T09:30:00Z",
                          "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                          "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                          "modified": "2024-01-15T09:30:00Z",
                          "name": "Webhook Endpoint",
                          "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task_forwarder",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetAllTaskForwardersRequest",
                "query-parameters": {
                  "cursor": {
                    "docs": "A cursor for pagination. Use the `next_cursor` value from the previous response to get the next page of results.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "page_limit": {
                    "docs": "The maximum number of items to return per page. Defaults to `100` if not specified.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetTaskForwarder",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getTaskForwarder": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Fetch a Task Forwarder",
              "docs": undefined,
              "errors": [
                "root.GetTaskForwarderRequestBadRequestError",
                "root.GetTaskForwarderRequestForbiddenError",
                "root.GetTaskForwarderRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                    "task_forwarder_id": "01909843-3596-da54-4756-28af46917e74",
                  },
                  "response": {
                    "body": {
                      "config": {
                        "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                      },
                      "config_sensitive": {
                        "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                      "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                      "modified": "2024-01-15T09:30:00Z",
                      "name": "Webhook Endpoint",
                      "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
                "task_forwarder_id": {
                  "docs": "The specific Task to reference.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TaskForwarder",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "updateTaskForwarder": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Update a Task Forwarder",
              "docs": undefined,
              "errors": [
                "root.UpdateTaskForwarderRequestBadRequestError",
                "root.UpdateTaskForwarderRequestForbiddenError",
                "root.UpdateTaskForwarderRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                    "task_forwarder_id": "01909843-3596-da54-4756-28af46917e74",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "config": {
                        "destination_url": "https://eoalydnvgieppd9.m.pipedream.net",
                      },
                      "config_sensitive": {
                        "signing_key": "sdkjhsfd2sdfkj3223.23rh",
                      },
                      "created": "2024-01-15T09:30:00Z",
                      "description": "Send all Task output to this API endpoint to ensure real-time updates of all Task Runs.",
                      "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                      "modified": "2024-01-15T09:30:00Z",
                      "name": "Webhook Endpoint",
                      "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
                "task_forwarder_id": {
                  "docs": "The specific Task to reference.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "config": {
                      "docs": "Configuration parameters for the Task Forwarder such as a `destination` URL.",
                      "type": "optional<root.TaskForwarderConfig>",
                    },
                    "config_sensitive": {
                      "docs": "Sensitive parameters for the Task Forwarder such as a `signing_key`.",
                      "type": "optional<root.TaskForwarderSensitiveConfig>",
                    },
                    "description": {
                      "docs": "Additional details about the Task Forwarder's purpose or configuration.",
                      "type": "optional<string>",
                    },
                    "name": {
                      "docs": "A descriptive name for the Task Forwarder.",
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaskForwarderUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TaskForwarder",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAllTaskForwarders:
      path: /org/{org_id}/project/{project_id}/task_forwarder
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
      display-name: List all Task Forwarders
      request:
        name: GetAllTaskForwardersRequest
        query-parameters:
          page_limit:
            type: optional<integer>
            docs: >-
              The maximum number of items to return per page. Defaults to `100`
              if not specified.
            validation:
              min: 1
              max: 100
          cursor:
            type: optional<string>
            docs: >-
              A cursor for pagination. Use the `next_cursor` value from the
              previous response to get the next page of results.
            validation:
              format: uuid
      response:
        docs: Successful Response
        type: root.PaginatedResultSetTaskForwarder
        status-code: 200
      availability: generally-available
      errors:
        - root.GetAllTaskForwardersRequestBadRequestError
        - root.GetAllTaskForwardersRequestForbiddenError
        - root.GetAllTaskForwardersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - name: Webhook Endpoint
                  description: >-
                    Send all Task output to this API endpoint to ensure
                    real-time updates of all Task Runs.
                  config:
                    destination_url: https://eoalydnvgieppd9.m.pipedream.net
                  config_sensitive:
                    signing_key: sdkjhsfd2sdfkj3223.23rh
                  id: 019011e6-e530-3aca-6cf7-2973387c255d
                  project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
                  created: '2024-01-15T09:30:00Z'
                  modified: '2024-01-15T09:30:00Z'
      audiences:
        - free
        - paid
    createTaskForwarder:
      path: /org/{org_id}/project/{project_id}/task_forwarder
      method: POST
      auth: true
      docs: >-
        A Task Forwarder will receive the output of a Task and forward it to the
        specified destination. This can be used to send data to external
        systems, or to trigger other actions based on the output of a Task.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
      display-name: Create a Task Forwarder
      request:
        name: TaskForwarderCreate
        body:
          properties:
            name:
              type: string
              docs: A descriptive name for the Task Forwarder.
            description:
              type: optional<string>
              docs: >-
                Additional details about the Task Forwarder's purpose or
                configuration.
            config:
              type: optional<root.TaskForwarderConfig>
              docs: >-
                Configuration parameters for the Task Forwarder such as a
                `destination` URL.
            config_sensitive:
              type: optional<root.TaskForwarderSensitiveConfig>
              docs: >-
                Sensitive parameters for the Task Forwarder such as a
                `signing_key`.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.TaskForwarder
        status-code: 200
      availability: generally-available
      errors:
        - root.CreateTaskForwarderRequestBadRequestError
        - root.CreateTaskForwarderRequestForbiddenError
        - root.CreateTaskForwarderRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
          request:
            name: Webhook Endpoint
            description: >-
              Send all Task output to this API endpoint to ensure real-time
              updates of all Task Runs.
            config:
              destination_url: https://eoalydnvgieppd9.m.pipedream.net
            config_sensitive:
              signing_key: sdkjhsfd2sdfkj3223.23rh
          response:
            body:
              name: Webhook Endpoint
              description: >-
                Send all Task output to this API endpoint to ensure real-time
                updates of all Task Runs.
              config:
                destination_url: https://eoalydnvgieppd9.m.pipedream.net
              config_sensitive:
                signing_key: sdkjhsfd2sdfkj3223.23rh
              id: 019011e6-e530-3aca-6cf7-2973387c255d
              project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
      audiences:
        - free
        - paid
    getTaskForwarder:
      path: /org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
        task_forwarder_id:
          type: string
          docs: The specific Task to reference.
      display-name: Fetch a Task Forwarder
      response:
        docs: Successful Response
        type: root.TaskForwarder
        status-code: 200
      availability: generally-available
      errors:
        - root.GetTaskForwarderRequestBadRequestError
        - root.GetTaskForwarderRequestForbiddenError
        - root.GetTaskForwarderRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
            task_forwarder_id: 01909843-3596-da54-4756-28af46917e74
          response:
            body:
              name: Webhook Endpoint
              description: >-
                Send all Task output to this API endpoint to ensure real-time
                updates of all Task Runs.
              config:
                destination_url: https://eoalydnvgieppd9.m.pipedream.net
              config_sensitive:
                signing_key: sdkjhsfd2sdfkj3223.23rh
              id: 019011e6-e530-3aca-6cf7-2973387c255d
              project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
      audiences:
        - free
        - paid
    updateTaskForwarder:
      path: /org/{org_id}/project/{project_id}/task_forwarder/{task_forwarder_id}
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
        task_forwarder_id:
          type: string
          docs: The specific Task to reference.
      display-name: Update a Task Forwarder
      request:
        name: TaskForwarderUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: A descriptive name for the Task Forwarder.
            description:
              type: optional<string>
              docs: >-
                Additional details about the Task Forwarder's purpose or
                configuration.
            config:
              type: optional<root.TaskForwarderConfig>
              docs: >-
                Configuration parameters for the Task Forwarder such as a
                `destination` URL.
            config_sensitive:
              type: optional<root.TaskForwarderSensitiveConfig>
              docs: >-
                Sensitive parameters for the Task Forwarder such as a
                `signing_key`.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.TaskForwarder
        status-code: 200
      availability: generally-available
      errors:
        - root.UpdateTaskForwarderRequestBadRequestError
        - root.UpdateTaskForwarderRequestForbiddenError
        - root.UpdateTaskForwarderRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
            task_forwarder_id: 01909843-3596-da54-4756-28af46917e74
          request: {}
          response:
            body:
              name: Webhook Endpoint
              description: >-
                Send all Task output to this API endpoint to ensure real-time
                updates of all Task Runs.
              config:
                destination_url: https://eoalydnvgieppd9.m.pipedream.net
              config_sensitive:
                signing_key: sdkjhsfd2sdfkj3223.23rh
              id: 019011e6-e530-3aca-6cf7-2973387c255d
              project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
              created: '2024-01-15T09:30:00Z'
              modified: '2024-01-15T09:30:00Z'
      audiences:
        - free
        - paid
  source:
    openapi: ../openapi.yml
",
    },
    "tasks.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "createTask": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Create a Task",
              "docs": "Tasks are the core of the platform and define the prompts and models used to generate responses.",
              "errors": [
                "root.CreateTaskRequestBadRequestError",
                "root.CreateTaskRequestForbiddenError",
                "root.CreateTaskRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  },
                  "request": {
                    "description": "A task to pre-triage user onboarding before IDV.",
                    "enabled": true,
                    "image_required": true,
                    "llm_model": "gpt-4o",
                    "name": "Fintech Pre-Triage",
                    "output_format": {
                      "compliance": "bool",
                      "hint": "str",
                      "match": "str",
                      "rationale": "str",
                    },
                    "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                    "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                  },
                  "response": {
                    "body": {
                      "created": "2024-06-13T14:01:03Z",
                      "description": "A task to pre-triage user onboarding before IDV.",
                      "enabled": true,
                      "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                      "modified": "2024-06-13T14:01:03Z",
                      "name": "Fintech Pre-Triage",
                      "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                      "revisions": [
                        {
                          "active": true,
                          "created": "2024-06-13T14:01:03Z",
                          "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                          "image_required": true,
                          "llm_model": "gpt-4o",
                          "modified": "2024-06-13T14:01:03Z",
                          "output_format": {
                            "compliance": "bool",
                            "hint": "str",
                            "match": "str",
                            "rationale": "str",
                          },
                          "rag": {
                            "collection_id": "collection_id",
                            "rag_param": "rag_param",
                          },
                          "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                          "task_forwarder_id": "task_forwarder_id",
                          "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "description": {
                      "docs": "A longer description of the Task for internal reference.",
                      "type": "optional<string>",
                    },
                    "enabled": {
                      "docs": "When `true` the Task is active and callable. `false` denotes the Task is not yet operational.",
                      "type": "boolean",
                    },
                    "image_required": {
                      "default": false,
                      "docs": "When `true` it requires an image to be sent in the Task Run request.",
                      "type": "optional<boolean>",
                    },
                    "llm_config": {
                      "docs": "Specific configuration parameters for the LLM model.",
                      "type": "optional<root.TaskLLMConfig>",
                    },
                    "llm_model": {
                      "docs": "The LLM model to use for the Task.",
                      "type": "TaskCreateLlmModel",
                    },
                    "name": {
                      "docs": "A name or reference for the Task.",
                      "type": "string",
                    },
                    "output_format": {
                      "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with `type` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional `description` can be passed to provide it with additional context.",
                      "type": "map<string, TaskCreateOutputFormatValue>",
                    },
                    "rag": {
                      "audiences": [
                        "paid",
                      ],
                      "availability": "pre-release",
                      "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
                      "type": "optional<root.TaskRAG>",
                    },
                    "system_prompt": "unknown",
                    "task_forwarder_id": {
                      "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_prompt": "unknown",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaskCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Task",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "editTask": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Update a Task",
              "docs": undefined,
              "errors": [
                "root.EditTaskRequestBadRequestError",
                "root.EditTaskRequestForbiddenError",
                "root.EditTaskRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                    "task_id": "01909843-3596-da54-4756-28af46917e74",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "created": "2024-06-13T14:01:03Z",
                      "description": "A task to pre-triage user onboarding before IDV.",
                      "enabled": true,
                      "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                      "modified": "2024-06-13T14:01:03Z",
                      "name": "Fintech Pre-Triage",
                      "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                      "revisions": [
                        {
                          "active": true,
                          "created": "2024-06-13T14:01:03Z",
                          "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                          "image_required": true,
                          "llm_model": "gpt-4o",
                          "modified": "2024-06-13T14:01:03Z",
                          "output_format": {
                            "compliance": "bool",
                            "hint": "str",
                            "match": "str",
                            "rationale": "str",
                          },
                          "rag": {
                            "collection_id": "collection_id",
                            "rag_param": "rag_param",
                          },
                          "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                          "task_forwarder_id": "task_forwarder_id",
                          "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
                "task_id": {
                  "docs": "The specific Task to reference.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "description": {
                      "docs": "A longer description of the Task for internal reference.",
                      "type": "optional<string>",
                    },
                    "enabled": {
                      "docs": "When `true` the Task is active and callable. `false` denotes the Task is not yet operational.",
                      "type": "optional<boolean>",
                    },
                    "image_required": {
                      "docs": "When `true` it requires an image to be sent in the Task Run request.",
                      "type": "optional<boolean>",
                    },
                    "llm_config": {
                      "docs": "Specific configuration parameters for the LLM model.",
                      "type": "optional<root.TaskLLMConfig>",
                    },
                    "llm_model": {
                      "docs": "The LLM model to use for the Task.",
                      "type": "optional<TaskUpdateLlmModel>",
                    },
                    "name": {
                      "docs": "A name or reference for the Task.",
                      "type": "optional<string>",
                    },
                    "output_format": {
                      "docs": "This gives control over the structure of how the Task responds. Supports shorthand notation or an object with `type` can be specified for each attribute. In most instances, the LLM will be able to generate the desired output into the relevant property, but an optional `description` can be passed to provide it with additional context.",
                      "type": "optional<map<string, optional<TaskUpdateOutputFormatValue>>>",
                    },
                    "rag": {
                      "audiences": [
                        "paid",
                      ],
                      "availability": "pre-release",
                      "docs": "**Note: This is a Paid Tier feature.** Provide additional domain specific input to the LLM so that it is able to reference user specific information when executing the Task. Examples of this could be a product catalogue, terms and conditions or a user manual.",
                      "type": "optional<root.TaskRAG>",
                    },
                    "system_prompt": {
                      "type": "optional<unknown>",
                    },
                    "task_forwarder_id": {
                      "docs": "The unique identifier for a valid Task Forwarder. It is used to forward the Task output to another system or service.",
                      "type": "optional<string>",
                      "validation": {
                        "format": "uuid",
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    "user_prompt": {
                      "type": "optional<unknown>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaskUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Task",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getAllTasks": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "List all Tasks",
              "docs": undefined,
              "errors": [
                "root.GetAllTasksRequestBadRequestError",
                "root.GetAllTasksRequestForbiddenError",
                "root.GetAllTasksRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-06-13T14:01:03Z",
                          "description": "A task to pre-triage user onboarding before IDV.",
                          "enabled": true,
                          "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                          "modified": "2024-06-13T14:01:03Z",
                          "name": "Fintech Pre-Triage",
                          "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                          "revisions": [
                            {
                              "created": "2024-06-13T14:01:03Z",
                              "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                              "image_required": true,
                              "llm_model": "gpt-4o",
                              "modified": "2024-06-13T14:01:03Z",
                              "output_format": {
                                "compliance": "bool",
                                "hint": "str",
                                "match": "str",
                                "rationale": "str",
                              },
                              "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                              "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                            },
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetAllTasksRequest",
                "query-parameters": {
                  "cursor": {
                    "docs": "A cursor for pagination. Use the `next_cursor` value from the previous response to get the next page of results.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "name": {
                    "docs": "Filter tasks by name. Supports partial matches.",
                    "type": "optional<string>",
                  },
                  "page_limit": {
                    "docs": "The maximum number of items to return per page. Defaults to `100` if not specified.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetTask",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getTask": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Fetch a Task",
              "docs": undefined,
              "errors": [
                "root.GetTaskRequestBadRequestError",
                "root.GetTaskRequestForbiddenError",
                "root.GetTaskRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                    "task_id": "01909843-3596-da54-4756-28af46917e74",
                  },
                  "response": {
                    "body": {
                      "created": "2024-06-13T14:01:03Z",
                      "description": "A task to pre-triage user onboarding before IDV.",
                      "enabled": true,
                      "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                      "modified": "2024-06-13T14:01:03Z",
                      "name": "Fintech Pre-Triage",
                      "project_id": "019010a2-8327-2607-11d7-41bb0a8936d4",
                      "revisions": [
                        {
                          "active": true,
                          "created": "2024-06-13T14:01:03Z",
                          "id": "019011e6-e530-3aca-6cf7-2973387c255d",
                          "image_required": true,
                          "llm_model": "gpt-4o",
                          "modified": "2024-06-13T14:01:03Z",
                          "output_format": {
                            "compliance": "bool",
                            "hint": "str",
                            "match": "str",
                            "rationale": "str",
                          },
                          "rag": {
                            "collection_id": "collection_id",
                            "rag_param": "rag_param",
                          },
                          "system_prompt": "You are an expert software program specifically designed for the fintech industry that will be used for pre-triage tasks to ensure the best possible client UX and efficient 3rd party platform interoperability.",
                          "task_forwarder_id": "task_forwarder_id",
                          "user_prompt": "Your task is to validate the uploaded image and determine whether it will be suitable for authentication and onboarding checks. If the image of the person is clear and typical of a passport style photo then set the compliance field to true. Provide rationale for your decision in the rationale field. If the compliance result is false, then provide a helpful hint for the customer who has submitted the photo informing them why it is unacceptable and some steps to remedy it, place this into the hint field. Determine whether the following description matches the provided image: {description}",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
                "task_id": {
                  "docs": "The specific Task to reference.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.Task",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getTaskRun": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Fetch Task Run",
              "docs": "Fetch an individual Task Run.",
              "errors": [
                "root.GetTaskRunRequestBadRequestError",
                "root.GetTaskRunRequestForbiddenError",
                "root.GetTaskRunRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                    "task_id": "01909843-3596-da54-4756-28af46917e74",
                    "task_run_id": "129c78d7-2e1f-4a77-adf3-68d69b0a3c71",
                  },
                  "response": {
                    "body": {
                      "created": "2024-07-11T14:31:21Z",
                      "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                      "response": {
                        "compliance": false,
                        "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                        "match": false,
                        "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                      },
                      "run_data": {
                        "audit": {
                          "ip": "10.152.3.59",
                          "ua": "Vercel Edge Functions",
                        },
                        "submitted": {
                          "description": "brown hair, blue sweater",
                        },
                      },
                      "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run/{task_run_id}",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
                "task_id": {
                  "docs": "The specific Task to reference.",
                  "type": "string",
                },
                "task_run_id": {
                  "docs": "The specific Task Run to reference.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TaskRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getTaskRuns": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Fetch Task Runs",
              "docs": "Individual Task Runs provide an audit trail for all Task executions.",
              "errors": [
                "root.GetTaskRunsRequestBadRequestError",
                "root.GetTaskRunsRequestForbiddenError",
                "root.GetTaskRunsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "123e4567-e89b-12d3-a456-426614174000",
                    "project_id": "123e4567-e89b-12d3-a456-426614174001",
                    "task_id": "01909843-3596-da54-4756-28af46917e74",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "created": "2024-07-11T14:31:21Z",
                          "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                          "response": {
                            "compliance": false,
                            "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                            "match": false,
                            "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                          },
                          "run_data": {
                            "audit": {
                              "ip": "10.152.3.59",
                              "ua": "Vercel Edge Functions",
                            },
                            "submitted": {
                              "description": "brown hair, blue sweater",
                            },
                          },
                          "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
                "task_id": {
                  "docs": "The specific Task to reference.",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetTaskRunsRequest",
                "query-parameters": {
                  "cursor": {
                    "docs": "A cursor for pagination. Use the `next_cursor` value from the previous response to get the next page of results.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                  "page_limit": {
                    "docs": "The maximum number of items to return per page. Defaults to `100` if not specified.",
                    "type": "optional<integer>",
                    "validation": {
                      "exclusiveMax": undefined,
                      "exclusiveMin": undefined,
                      "max": 100,
                      "min": 1,
                      "multipleOf": undefined,
                    },
                  },
                  "task_revision_id": {
                    "docs": "The specific Task Revision to reference.",
                    "type": "optional<string>",
                    "validation": {
                      "format": "uuid",
                      "maxLength": undefined,
                      "minLength": undefined,
                      "pattern": undefined,
                    },
                  },
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetTaskRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "runTask": {
              "audiences": [
                "free",
                "paid",
              ],
              "auth": true,
              "availability": "generally-available",
              "display-name": "Run a Task",
              "docs": "Run a specified Task against provided text and/or image input. The response is controlled by the `output_format` of the Task. Note that a Task must be `enabled` to be run.",
              "errors": [
                "root.RunTaskRequestBadRequestError",
                "root.RunTaskRequestForbiddenError",
                "root.RunTaskRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                    "task_id": "task_id",
                  },
                  "request": {
                    "task_input": {
                      "description": "brown hair, blue sweater",
                    },
                  },
                  "response": {
                    "body": {
                      "created": "2024-07-11T14:31:21.989219",
                      "id": "0190a234-cb74-6342-dec6-4be8f73f0c9f",
                      "response": {
                        "compliance": false,
                        "hint": "The image is not suitable for authentication and onboarding checks. Please ensure the photo is a clear, passport-style image with a plain background, good lighting, and no accessories like sunglasses.",
                        "match": false,
                        "rationale": "The image does not meet the requirements for a passport-style photo. The person is wearing sunglasses, and the background is not plain.",
                      },
                      "run_data": {
                        "audit": {
                          "ip": "10.152.3.59",
                          "ua": "Vercel Edge Functions",
                        },
                        "submitted": {
                          "description": "brown hair, blue sweater",
                        },
                      },
                      "task_revision_id": "0190a234-8dc6-6d08-aea9-928fcecad8f1",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}/run",
              "path-parameters": {
                "org_id": {
                  "docs": "The unique identifier of the organization.",
                  "type": "string",
                },
                "project_id": {
                  "docs": "The unique identifier of the project.",
                  "type": "string",
                },
                "task_id": {
                  "docs": "The specific Task to reference.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "task_file": "optional<file>",
                    "task_input": {
                      "docs": "The data input to the Task. This should be relevant to the `user_prompt` and cover any dynamic `{...}` parameters that are referenced in the prompt. Not required if `image_required` is set to `true` and there are no dynamic parameters in the prompt.",
                      "type": "map<string, unknown>",
                    },
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "Body_Task_Run_Parameters",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.TaskRun",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "task_get_member": {
              "auth": true,
              "display-name": "IAM - Lookup Task Member",
              "docs": "Retrieve a specific member that has been granted direct access to the task.",
              "errors": [
                "root.TaskGetMemberRequestBadRequestError",
                "root.TaskGetMemberRequestForbiddenError",
                "root.TaskGetMemberRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                    "task_id": "task_id",
                  },
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}",
              "path-parameters": {
                "member": "string",
                "org_id": "string",
                "project_id": "string",
                "task_id": "string",
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "task_iam_list_members": {
              "auth": true,
              "display-name": "IAM - List Task Members",
              "docs": "Lists all members that have been granted direct access to the task.",
              "errors": [
                "root.TaskIamListMembersRequestBadRequestError",
                "root.TaskIamListMembersRequestForbiddenError",
                "root.TaskIamListMembersRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                    "task_id": "task_id",
                  },
                  "response": {
                    "body": {
                      "pagination": {
                        "has_next": true,
                        "next_cursor": "019097c5-5560-05b5-4a48-5197a269683b",
                        "page_limit": 100,
                      },
                      "results": [
                        {
                          "avatar_url": "avatar_url",
                          "member": "member",
                          "name": "name",
                          "roles": [
                            "roles",
                          ],
                          "total_subjects": 1,
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
                "task_id": "string",
              },
              "request": {
                "name": "TaskIamListMembersRequest",
                "query-parameters": {
                  "type": "optional<TaskIamListMembersRequestType>",
                },
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.PaginatedResultSetIamMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "task_iam_test_permissions": {
              "auth": true,
              "display-name": "IAM - Test Task Permissions",
              "docs": "Test the permissions that the caller (or another subject) holds on the task.",
              "errors": [
                "root.TaskIamTestPermissionsRequestBadRequestError",
                "root.TaskIamTestPermissionsRequestForbiddenError",
                "root.TaskIamTestPermissionsRequestNotFoundError",
                "root.TaskIamTestPermissionsRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "org_id": "org_id",
                    "project_id": "project_id",
                    "task_id": "task_id",
                  },
                  "request": {
                    "permissions": [
                      "add_editor",
                    ],
                  },
                  "response": {
                    "body": {
                      "member": "member",
                      "permissions": [
                        "permissions",
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/test",
              "path-parameters": {
                "org_id": "string",
                "project_id": "string",
                "task_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "member": {
                      "type": "optional<string>",
                    },
                    "permissions": {
                      "docs": "A list of permissions to test on the task.",
                      "type": "list<TaskIamPermissionTestPermissionsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaskIAMPermissionTest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMPermissionTest",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "task_iam_update_member_roles": {
              "auth": true,
              "display-name": "IAM - Update Task Member",
              "docs": "Update the roles that a member holds on the task.",
              "errors": [
                "root.TaskIamUpdateMemberRolesRequestBadRequestError",
                "root.TaskIamUpdateMemberRolesRequestForbiddenError",
                "root.TaskIamUpdateMemberRolesRequestNotFoundError",
                "root.TaskIamUpdateMemberRolesRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "member": "member",
                    "org_id": "org_id",
                    "project_id": "project_id",
                    "task_id": "task_id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "member": "member",
                      "name": "name",
                      "roles": [
                        "roles",
                      ],
                      "total_subjects": 1,
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}",
              "path-parameters": {
                "member": "string",
                "org_id": "string",
                "project_id": "string",
                "task_id": "string",
              },
              "request": {
                "body": {
                  "properties": {
                    "add": {
                      "docs": "A list of task roles to grant to the member.

Roles in this list are applied to the member AFTER any removals specified in `remove`.

This may be combined with `remove_all` to replace the member's entire role list.",
                      "type": "optional<list<TaskIamMemberRoleUpdateAddItem>>",
                    },
                    "remove": {
                      "docs": "A list of task roles to revoke from the member.",
                      "type": "optional<list<TaskIamMemberRoleUpdateRemoveItem>>",
                    },
                    "remove_all": {
                      "docs": "Removes all existing roles from the member. This may be combined with `add` to replace all existing roles that the member holds.",
                      "type": "optional<boolean>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "TaskIAMMemberRoleUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.IAMMember",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "TaskCreateLlmModel": {
            "docs": "The LLM model to use for the Task.",
            "enum": [
              {
                "name": "Gpt4O",
                "value": "gpt-4o",
              },
              {
                "name": "Gpt35Turbo",
                "value": "gpt-3.5-turbo",
              },
              {
                "name": "Gpt4",
                "value": "gpt-4",
              },
              {
                "name": "Gpt4Turbo",
                "value": "gpt-4-turbo",
              },
              {
                "name": "Gpt4TurboPreview",
                "value": "gpt-4-turbo-preview",
              },
              {
                "name": "Gpt41106Preview",
                "value": "gpt-4-1106-preview",
              },
              {
                "name": "Claude35Sonnet20240620",
                "value": "claude-3-5-sonnet-20240620",
              },
              {
                "name": "Claude3Haiku20240307",
                "value": "claude-3-haiku-20240307",
              },
              {
                "name": "Claude3Sonnet20240229",
                "value": "claude-3-sonnet-20240229",
              },
              {
                "name": "Claude3Opus20240229",
                "value": "claude-3-opus-20240229",
              },
              {
                "name": "Gemini15ProLatest",
                "value": "gemini-1.5-pro-latest",
              },
              {
                "name": "GeminiPro",
                "value": "gemini-pro",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskCreateOutputFormatValue": {
            "enum": [
              "str",
              "string",
              "boolean",
              "bool",
              "int",
              "integer",
              "list",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskIamListMembersRequestType": {
            "enum": [
              "user",
              "organization",
              "project",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskIamMemberRoleUpdateAddItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskIamMemberRoleUpdateRemoveItem": {
            "enum": [
              "editor",
              "owner",
              "viewer",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskIamPermissionTestPermissionsItem": {
            "enum": [
              "add_editor",
              "add_member",
              "add_owner",
              "edit",
              "remove_editor",
              "remove_member",
              "remove_owner",
              "run_task",
              "view",
              "view_members",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskUpdateLlmModel": {
            "enum": [
              {
                "name": "Gpt4O",
                "value": "gpt-4o",
              },
              {
                "name": "Gpt35Turbo",
                "value": "gpt-3.5-turbo",
              },
              {
                "name": "Gpt4",
                "value": "gpt-4",
              },
              {
                "name": "Gpt4Turbo",
                "value": "gpt-4-turbo",
              },
              {
                "name": "Gpt4TurboPreview",
                "value": "gpt-4-turbo-preview",
              },
              {
                "name": "Gpt41106Preview",
                "value": "gpt-4-1106-preview",
              },
              {
                "name": "Claude35Sonnet20240620",
                "value": "claude-3-5-sonnet-20240620",
              },
              {
                "name": "Claude3Haiku20240307",
                "value": "claude-3-haiku-20240307",
              },
              {
                "name": "Claude3Sonnet20240229",
                "value": "claude-3-sonnet-20240229",
              },
              {
                "name": "Claude3Opus20240229",
                "value": "claude-3-opus-20240229",
              },
              {
                "name": "Gemini15ProLatest",
                "value": "gemini-1.5-pro-latest",
              },
              {
                "name": "GeminiPro",
                "value": "gemini-pro",
              },
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "TaskUpdateOutputFormatValue": {
            "enum": [
              "str",
              "string",
              "boolean",
              "bool",
              "int",
              "integer",
              "list",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    getAllTasks:
      path: /org/{org_id}/project/{project_id}/task
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
      display-name: List all Tasks
      request:
        name: GetAllTasksRequest
        query-parameters:
          name:
            type: optional<string>
            docs: Filter tasks by name. Supports partial matches.
          page_limit:
            type: optional<integer>
            docs: >-
              The maximum number of items to return per page. Defaults to `100`
              if not specified.
            validation:
              min: 1
              max: 100
          cursor:
            type: optional<string>
            docs: >-
              A cursor for pagination. Use the `next_cursor` value from the
              previous response to get the next page of results.
            validation:
              format: uuid
      response:
        docs: Successful Response
        type: root.PaginatedResultSetTask
        status-code: 200
      availability: generally-available
      errors:
        - root.GetAllTasksRequestBadRequestError
        - root.GetAllTasksRequestForbiddenError
        - root.GetAllTasksRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - name: Fintech Pre-Triage
                  description: A task to pre-triage user onboarding before IDV.
                  enabled: true
                  id: 019011e6-e530-3aca-6cf7-2973387c255d
                  project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
                  created: '2024-06-13T14:01:03Z'
                  modified: '2024-06-13T14:01:03Z'
                  revisions:
                    - system_prompt: >-
                        You are an expert software program specifically designed
                        for the fintech industry that will be used for
                        pre-triage tasks to ensure the best possible client UX
                        and efficient 3rd party platform interoperability.
                      user_prompt: >-
                        Your task is to validate the uploaded image and
                        determine whether it will be suitable for authentication
                        and onboarding checks. If the image of the person is
                        clear and typical of a passport style photo then set the
                        compliance field to true. Provide rationale for your
                        decision in the rationale field. If the compliance
                        result is false, then provide a helpful hint for the
                        customer who has submitted the photo informing them why
                        it is unacceptable and some steps to remedy it, place
                        this into the hint field. Determine whether the
                        following description matches the provided image:
                        {description}
                      llm_model: gpt-4o
                      output_format:
                        compliance: bool
                        hint: str
                        match: str
                        rationale: str
                      image_required: true
                      id: 019011e6-e530-3aca-6cf7-2973387c255d
                      created: '2024-06-13T14:01:03Z'
                      modified: '2024-06-13T14:01:03Z'
      audiences:
        - free
        - paid
    createTask:
      path: /org/{org_id}/project/{project_id}/task
      method: POST
      auth: true
      docs: >-
        Tasks are the core of the platform and define the prompts and models
        used to generate responses.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
      display-name: Create a Task
      request:
        name: TaskCreate
        body:
          properties:
            system_prompt: unknown
            user_prompt: unknown
            llm_model:
              type: TaskCreateLlmModel
              docs: The LLM model to use for the Task.
            llm_config:
              type: optional<root.TaskLLMConfig>
              docs: Specific configuration parameters for the LLM model.
            output_format:
              type: map<string, TaskCreateOutputFormatValue>
              docs: >-
                This gives control over the structure of how the Task responds.
                Supports shorthand notation or an object with `type` can be
                specified for each attribute. In most instances, the LLM will be
                able to generate the desired output into the relevant property,
                but an optional `description` can be passed to provide it with
                additional context.
            task_forwarder_id:
              type: optional<string>
              docs: >-
                The unique identifier for a valid Task Forwarder. It is used to
                forward the Task output to another system or service.
              validation:
                format: uuid
            rag:
              type: optional<root.TaskRAG>
              docs: >-
                **Note: This is a Paid Tier feature.** Provide additional domain
                specific input to the LLM so that it is able to reference user
                specific information when executing the Task. Examples of this
                could be a product catalogue, terms and conditions or a user
                manual.
              audiences:
                - paid
              availability: pre-release
            image_required:
              type: optional<boolean>
              docs: >-
                When `true` it requires an image to be sent in the Task Run
                request.
              default: false
            name:
              type: string
              docs: A name or reference for the Task.
            description:
              type: optional<string>
              docs: A longer description of the Task for internal reference.
            enabled:
              type: boolean
              docs: >-
                When `true` the Task is active and callable. `false` denotes the
                Task is not yet operational.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Task
        status-code: 200
      availability: generally-available
      errors:
        - root.CreateTaskRequestBadRequestError
        - root.CreateTaskRequestForbiddenError
        - root.CreateTaskRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
          request:
            system_prompt: >-
              You are an expert software program specifically designed for the
              fintech industry that will be used for pre-triage tasks to ensure
              the best possible client UX and efficient 3rd party platform
              interoperability.
            user_prompt: >-
              Your task is to validate the uploaded image and determine whether
              it will be suitable for authentication and onboarding checks. If
              the image of the person is clear and typical of a passport style
              photo then set the compliance field to true. Provide rationale for
              your decision in the rationale field. If the compliance result is
              false, then provide a helpful hint for the customer who has
              submitted the photo informing them why it is unacceptable and some
              steps to remedy it, place this into the hint field. Determine
              whether the following description matches the provided image:
              {description}
            llm_model: gpt-4o
            output_format:
              compliance: bool
              hint: str
              match: str
              rationale: str
            image_required: true
            name: Fintech Pre-Triage
            description: A task to pre-triage user onboarding before IDV.
            enabled: true
          response:
            body:
              name: Fintech Pre-Triage
              description: A task to pre-triage user onboarding before IDV.
              enabled: true
              id: 019011e6-e530-3aca-6cf7-2973387c255d
              project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
              created: '2024-06-13T14:01:03Z'
              modified: '2024-06-13T14:01:03Z'
              revisions:
                - system_prompt: >-
                    You are an expert software program specifically designed for
                    the fintech industry that will be used for pre-triage tasks
                    to ensure the best possible client UX and efficient 3rd
                    party platform interoperability.
                  user_prompt: >-
                    Your task is to validate the uploaded image and determine
                    whether it will be suitable for authentication and
                    onboarding checks. If the image of the person is clear and
                    typical of a passport style photo then set the compliance
                    field to true. Provide rationale for your decision in the
                    rationale field. If the compliance result is false, then
                    provide a helpful hint for the customer who has submitted
                    the photo informing them why it is unacceptable and some
                    steps to remedy it, place this into the hint field.
                    Determine whether the following description matches the
                    provided image: {description}
                  llm_model: gpt-4o
                  output_format:
                    compliance: bool
                    hint: str
                    match: str
                    rationale: str
                  task_forwarder_id: task_forwarder_id
                  rag:
                    collection_id: collection_id
                    rag_param: rag_param
                  image_required: true
                  id: 019011e6-e530-3aca-6cf7-2973387c255d
                  created: '2024-06-13T14:01:03Z'
                  modified: '2024-06-13T14:01:03Z'
                  active: true
      audiences:
        - free
        - paid
    getTask:
      path: /org/{org_id}/project/{project_id}/task/{task_id}
      method: GET
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
        task_id:
          type: string
          docs: The specific Task to reference.
      display-name: Fetch a Task
      response:
        docs: Successful Response
        type: root.Task
        status-code: 200
      availability: generally-available
      errors:
        - root.GetTaskRequestBadRequestError
        - root.GetTaskRequestForbiddenError
        - root.GetTaskRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
            task_id: 01909843-3596-da54-4756-28af46917e74
          response:
            body:
              name: Fintech Pre-Triage
              description: A task to pre-triage user onboarding before IDV.
              enabled: true
              id: 019011e6-e530-3aca-6cf7-2973387c255d
              project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
              created: '2024-06-13T14:01:03Z'
              modified: '2024-06-13T14:01:03Z'
              revisions:
                - system_prompt: >-
                    You are an expert software program specifically designed for
                    the fintech industry that will be used for pre-triage tasks
                    to ensure the best possible client UX and efficient 3rd
                    party platform interoperability.
                  user_prompt: >-
                    Your task is to validate the uploaded image and determine
                    whether it will be suitable for authentication and
                    onboarding checks. If the image of the person is clear and
                    typical of a passport style photo then set the compliance
                    field to true. Provide rationale for your decision in the
                    rationale field. If the compliance result is false, then
                    provide a helpful hint for the customer who has submitted
                    the photo informing them why it is unacceptable and some
                    steps to remedy it, place this into the hint field.
                    Determine whether the following description matches the
                    provided image: {description}
                  llm_model: gpt-4o
                  output_format:
                    compliance: bool
                    hint: str
                    match: str
                    rationale: str
                  task_forwarder_id: task_forwarder_id
                  rag:
                    collection_id: collection_id
                    rag_param: rag_param
                  image_required: true
                  id: 019011e6-e530-3aca-6cf7-2973387c255d
                  created: '2024-06-13T14:01:03Z'
                  modified: '2024-06-13T14:01:03Z'
                  active: true
      audiences:
        - free
        - paid
    editTask:
      path: /org/{org_id}/project/{project_id}/task/{task_id}
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
        task_id:
          type: string
          docs: The specific Task to reference.
      display-name: Update a Task
      request:
        name: TaskUpdate
        body:
          properties:
            system_prompt:
              type: optional<unknown>
            user_prompt:
              type: optional<unknown>
            llm_model:
              type: optional<TaskUpdateLlmModel>
              docs: The LLM model to use for the Task.
            llm_config:
              type: optional<root.TaskLLMConfig>
              docs: Specific configuration parameters for the LLM model.
            output_format:
              type: optional<map<string, optional<TaskUpdateOutputFormatValue>>>
              docs: >-
                This gives control over the structure of how the Task responds.
                Supports shorthand notation or an object with `type` can be
                specified for each attribute. In most instances, the LLM will be
                able to generate the desired output into the relevant property,
                but an optional `description` can be passed to provide it with
                additional context.
            task_forwarder_id:
              type: optional<string>
              docs: >-
                The unique identifier for a valid Task Forwarder. It is used to
                forward the Task output to another system or service.
              validation:
                format: uuid
            rag:
              type: optional<root.TaskRAG>
              docs: >-
                **Note: This is a Paid Tier feature.** Provide additional domain
                specific input to the LLM so that it is able to reference user
                specific information when executing the Task. Examples of this
                could be a product catalogue, terms and conditions or a user
                manual.
              audiences:
                - paid
              availability: pre-release
            image_required:
              type: optional<boolean>
              docs: >-
                When `true` it requires an image to be sent in the Task Run
                request.
            name:
              type: optional<string>
              docs: A name or reference for the Task.
            description:
              type: optional<string>
              docs: A longer description of the Task for internal reference.
            enabled:
              type: optional<boolean>
              docs: >-
                When `true` the Task is active and callable. `false` denotes the
                Task is not yet operational.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.Task
        status-code: 200
      availability: generally-available
      errors:
        - root.EditTaskRequestBadRequestError
        - root.EditTaskRequestForbiddenError
        - root.EditTaskRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
            task_id: 01909843-3596-da54-4756-28af46917e74
          request: {}
          response:
            body:
              name: Fintech Pre-Triage
              description: A task to pre-triage user onboarding before IDV.
              enabled: true
              id: 019011e6-e530-3aca-6cf7-2973387c255d
              project_id: 019010a2-8327-2607-11d7-41bb0a8936d4
              created: '2024-06-13T14:01:03Z'
              modified: '2024-06-13T14:01:03Z'
              revisions:
                - system_prompt: >-
                    You are an expert software program specifically designed for
                    the fintech industry that will be used for pre-triage tasks
                    to ensure the best possible client UX and efficient 3rd
                    party platform interoperability.
                  user_prompt: >-
                    Your task is to validate the uploaded image and determine
                    whether it will be suitable for authentication and
                    onboarding checks. If the image of the person is clear and
                    typical of a passport style photo then set the compliance
                    field to true. Provide rationale for your decision in the
                    rationale field. If the compliance result is false, then
                    provide a helpful hint for the customer who has submitted
                    the photo informing them why it is unacceptable and some
                    steps to remedy it, place this into the hint field.
                    Determine whether the following description matches the
                    provided image: {description}
                  llm_model: gpt-4o
                  output_format:
                    compliance: bool
                    hint: str
                    match: str
                    rationale: str
                  task_forwarder_id: task_forwarder_id
                  rag:
                    collection_id: collection_id
                    rag_param: rag_param
                  image_required: true
                  id: 019011e6-e530-3aca-6cf7-2973387c255d
                  created: '2024-06-13T14:01:03Z'
                  modified: '2024-06-13T14:01:03Z'
                  active: true
      audiences:
        - free
        - paid
    getTaskRuns:
      path: /org/{org_id}/project/{project_id}/task/{task_id}/run
      method: GET
      auth: true
      docs: Individual Task Runs provide an audit trail for all Task executions.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
        task_id:
          type: string
          docs: The specific Task to reference.
      display-name: Fetch Task Runs
      request:
        name: GetTaskRunsRequest
        query-parameters:
          page_limit:
            type: optional<integer>
            docs: >-
              The maximum number of items to return per page. Defaults to `100`
              if not specified.
            validation:
              min: 1
              max: 100
          cursor:
            type: optional<string>
            docs: >-
              A cursor for pagination. Use the `next_cursor` value from the
              previous response to get the next page of results.
            validation:
              format: uuid
          task_revision_id:
            type: optional<string>
            docs: The specific Task Revision to reference.
            validation:
              format: uuid
      response:
        docs: Successful Response
        type: root.PaginatedResultSetTaskRun
        status-code: 200
      availability: generally-available
      errors:
        - root.GetTaskRunsRequestBadRequestError
        - root.GetTaskRunsRequestForbiddenError
        - root.GetTaskRunsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
            task_id: 01909843-3596-da54-4756-28af46917e74
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - task_revision_id: 0190a234-8dc6-6d08-aea9-928fcecad8f1
                  response:
                    compliance: false
                    hint: >-
                      The image is not suitable for authentication and
                      onboarding checks. Please ensure the photo is a clear,
                      passport-style image with a plain background, good
                      lighting, and no accessories like sunglasses.
                    match: false
                    rationale: >-
                      The image does not meet the requirements for a
                      passport-style photo. The person is wearing sunglasses,
                      and the background is not plain.
                  run_data:
                    audit:
                      ip: 10.152.3.59
                      ua: Vercel Edge Functions
                    submitted:
                      description: brown hair, blue sweater
                  id: 0190a234-cb74-6342-dec6-4be8f73f0c9f
                  created: '2024-07-11T14:31:21Z'
      audiences:
        - free
        - paid
    runTask:
      path: /org/{org_id}/project/{project_id}/task/{task_id}/run
      method: POST
      auth: true
      docs: >-
        Run a specified Task against provided text and/or image input. The
        response is controlled by the `output_format` of the Task. Note that a
        Task must be `enabled` to be run.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
        task_id:
          type: string
          docs: The specific Task to reference.
      display-name: Run a Task
      request:
        name: Body_Task_Run_Parameters
        body:
          properties:
            task_input:
              type: map<string, unknown>
              docs: >-
                The data input to the Task. This should be relevant to the
                `user_prompt` and cover any dynamic `{...}` parameters that are
                referenced in the prompt. Not required if `image_required` is
                set to `true` and there are no dynamic parameters in the prompt.
            task_file: optional<file>
        content-type: multipart/form-data
      response:
        docs: Successful Response
        type: root.TaskRun
        status-code: 200
      availability: generally-available
      errors:
        - root.RunTaskRequestBadRequestError
        - root.RunTaskRequestForbiddenError
        - root.RunTaskRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            task_id: task_id
          request:
            task_input:
              description: brown hair, blue sweater
          response:
            body:
              task_revision_id: 0190a234-8dc6-6d08-aea9-928fcecad8f1
              response:
                hint: >-
                  The image is not suitable for authentication and onboarding
                  checks. Please ensure the photo is a clear, passport-style
                  image with a plain background, good lighting, and no
                  accessories like sunglasses.
                match: false
                rationale: >-
                  The image does not meet the requirements for a passport-style
                  photo. The person is wearing sunglasses, and the background is
                  not plain.
                compliance: false
              run_data:
                audit:
                  ip: 10.152.3.59
                  ua: Vercel Edge Functions
                submitted:
                  description: brown hair, blue sweater
              id: 0190a234-cb74-6342-dec6-4be8f73f0c9f
              created: '2024-07-11T14:31:21.989219'
      audiences:
        - free
        - paid
    task_iam_list_members:
      path: /org/{org_id}/project/{project_id}/task/{task_id}/iam/members
      method: GET
      auth: true
      docs: Lists all members that have been granted direct access to the task.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        task_id: string
      display-name: IAM - List Task Members
      request:
        name: TaskIamListMembersRequest
        query-parameters:
          type: optional<TaskIamListMembersRequestType>
      response:
        docs: Successful Response
        type: root.PaginatedResultSetIamMember
        status-code: 200
      errors:
        - root.TaskIamListMembersRequestBadRequestError
        - root.TaskIamListMembersRequestForbiddenError
        - root.TaskIamListMembersRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            task_id: task_id
          response:
            body:
              pagination:
                next_cursor: 019097c5-5560-05b5-4a48-5197a269683b
                has_next: true
                page_limit: 100
              results:
                - member: member
                  roles:
                    - roles
                  name: name
                  avatar_url: avatar_url
                  total_subjects: 1
    task_get_member:
      path: /org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}
      method: GET
      auth: true
      docs: >-
        Retrieve a specific member that has been granted direct access to the
        task.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        task_id: string
        member: string
      display-name: IAM - Lookup Task Member
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.TaskGetMemberRequestBadRequestError
        - root.TaskGetMemberRequestForbiddenError
        - root.TaskGetMemberRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            task_id: task_id
            member: member
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    task_iam_update_member_roles:
      path: /org/{org_id}/project/{project_id}/task/{task_id}/iam/members/{member}
      method: POST
      auth: true
      docs: Update the roles that a member holds on the task.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        task_id: string
        member: string
      display-name: IAM - Update Task Member
      request:
        name: TaskIAMMemberRoleUpdate
        body:
          properties:
            add:
              type: optional<list<TaskIamMemberRoleUpdateAddItem>>
              docs: >-
                A list of task roles to grant to the member.


                Roles in this list are applied to the member AFTER any removals
                specified in `remove`.


                This may be combined with `remove_all` to replace the member's
                entire role list.
            remove:
              type: optional<list<TaskIamMemberRoleUpdateRemoveItem>>
              docs: A list of task roles to revoke from the member.
            remove_all:
              type: optional<boolean>
              docs: >-
                Removes all existing roles from the member. This may be combined
                with `add` to replace all existing roles that the member holds.
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMMember
        status-code: 200
      errors:
        - root.TaskIamUpdateMemberRolesRequestBadRequestError
        - root.TaskIamUpdateMemberRolesRequestForbiddenError
        - root.TaskIamUpdateMemberRolesRequestNotFoundError
        - root.TaskIamUpdateMemberRolesRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            task_id: task_id
            member: member
          request: {}
          response:
            body:
              member: member
              roles:
                - roles
              name: name
              avatar_url: avatar_url
              total_subjects: 1
    task_iam_test_permissions:
      path: /org/{org_id}/project/{project_id}/task/{task_id}/iam/test
      method: POST
      auth: true
      docs: >-
        Test the permissions that the caller (or another subject) holds on the
        task.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id: string
        project_id: string
        task_id: string
      display-name: IAM - Test Task Permissions
      request:
        name: TaskIAMPermissionTest
        body:
          properties:
            permissions:
              docs: A list of permissions to test on the task.
              type: list<TaskIamPermissionTestPermissionsItem>
            member:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.IAMPermissionTest
        status-code: 200
      errors:
        - root.TaskIamTestPermissionsRequestBadRequestError
        - root.TaskIamTestPermissionsRequestForbiddenError
        - root.TaskIamTestPermissionsRequestNotFoundError
        - root.TaskIamTestPermissionsRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: org_id
            project_id: project_id
            task_id: task_id
          request:
            permissions:
              - add_editor
          response:
            body:
              permissions:
                - permissions
              member: member
    getTaskRun:
      path: /org/{org_id}/project/{project_id}/task/{task_id}/run/{task_run_id}
      method: GET
      auth: true
      docs: Fetch an individual Task Run.
      source:
        openapi: ../openapi.yml
      path-parameters:
        org_id:
          type: string
          docs: The unique identifier of the organization.
        project_id:
          type: string
          docs: The unique identifier of the project.
        task_id:
          type: string
          docs: The specific Task to reference.
        task_run_id:
          type: string
          docs: The specific Task Run to reference.
      display-name: Fetch Task Run
      response:
        docs: Successful Response
        type: root.TaskRun
        status-code: 200
      availability: generally-available
      errors:
        - root.GetTaskRunRequestBadRequestError
        - root.GetTaskRunRequestForbiddenError
        - root.GetTaskRunRequestUnprocessableEntityError
      examples:
        - path-parameters:
            org_id: 123e4567-e89b-12d3-a456-426614174000
            project_id: 123e4567-e89b-12d3-a456-426614174001
            task_id: 01909843-3596-da54-4756-28af46917e74
            task_run_id: 129c78d7-2e1f-4a77-adf3-68d69b0a3c71
          response:
            body:
              task_revision_id: 0190a234-8dc6-6d08-aea9-928fcecad8f1
              response:
                compliance: false
                hint: >-
                  The image is not suitable for authentication and onboarding
                  checks. Please ensure the photo is a clear, passport-style
                  image with a plain background, good lighting, and no
                  accessories like sunglasses.
                match: false
                rationale: >-
                  The image does not meet the requirements for a passport-style
                  photo. The person is wearing sunglasses, and the background is
                  not plain.
              run_data:
                audit:
                  ip: 10.152.3.59
                  ua: Vercel Edge Functions
                submitted:
                  description: brown hair, blue sweater
              id: 0190a234-cb74-6342-dec6-4be8f73f0c9f
              created: '2024-07-11T14:31:21Z'
      audiences:
        - free
        - paid
  source:
    openapi: ../openapi.yml
types:
  TaskCreateLlmModel:
    enum:
      - value: gpt-4o
        name: Gpt4O
      - value: gpt-3.5-turbo
        name: Gpt35Turbo
      - value: gpt-4
        name: Gpt4
      - value: gpt-4-turbo
        name: Gpt4Turbo
      - value: gpt-4-turbo-preview
        name: Gpt4TurboPreview
      - value: gpt-4-1106-preview
        name: Gpt41106Preview
      - value: claude-3-5-sonnet-20240620
        name: Claude35Sonnet20240620
      - value: claude-3-haiku-20240307
        name: Claude3Haiku20240307
      - value: claude-3-sonnet-20240229
        name: Claude3Sonnet20240229
      - value: claude-3-opus-20240229
        name: Claude3Opus20240229
      - value: gemini-1.5-pro-latest
        name: Gemini15ProLatest
      - value: gemini-pro
        name: GeminiPro
    docs: The LLM model to use for the Task.
    inline: true
    source:
      openapi: ../openapi.yml
  TaskCreateOutputFormatValue:
    enum:
      - str
      - string
      - boolean
      - bool
      - int
      - integer
      - list
    inline: true
    source:
      openapi: ../openapi.yml
  TaskUpdateLlmModel:
    enum:
      - value: gpt-4o
        name: Gpt4O
      - value: gpt-3.5-turbo
        name: Gpt35Turbo
      - value: gpt-4
        name: Gpt4
      - value: gpt-4-turbo
        name: Gpt4Turbo
      - value: gpt-4-turbo-preview
        name: Gpt4TurboPreview
      - value: gpt-4-1106-preview
        name: Gpt41106Preview
      - value: claude-3-5-sonnet-20240620
        name: Claude35Sonnet20240620
      - value: claude-3-haiku-20240307
        name: Claude3Haiku20240307
      - value: claude-3-sonnet-20240229
        name: Claude3Sonnet20240229
      - value: claude-3-opus-20240229
        name: Claude3Opus20240229
      - value: gemini-1.5-pro-latest
        name: Gemini15ProLatest
      - value: gemini-pro
        name: GeminiPro
    inline: true
    source:
      openapi: ../openapi.yml
  TaskUpdateOutputFormatValue:
    enum:
      - str
      - string
      - boolean
      - bool
      - int
      - integer
      - list
    inline: true
    source:
      openapi: ../openapi.yml
  TaskIamListMembersRequestType:
    enum:
      - user
      - organization
      - project
    source:
      openapi: ../openapi.yml
  TaskIamMemberRoleUpdateAddItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  TaskIamMemberRoleUpdateRemoveItem:
    enum:
      - editor
      - owner
      - viewer
    inline: true
    source:
      openapi: ../openapi.yml
  TaskIamPermissionTestPermissionsItem:
    enum:
      - add_editor
      - add_member
      - add_owner
      - edit
      - remove_editor
      - remove_member
      - remove_owner
      - run_task
      - view
      - view_members
    inline: true
    source:
      openapi: ../openapi.yml
",
    },
    "user.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "userGet": {
              "auth": true,
              "display-name": "User Get",
              "docs": "Retrieve the profile of the current user.",
              "errors": [
                "root.UserGetUserGetRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "bio": "bio",
                      "email": "email",
                      "id": "id",
                      "name": "name",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/user",
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.User",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "userPost": {
              "auth": true,
              "display-name": "User Post",
              "docs": "Update the profile of the current user.",
              "errors": [
                "root.UserPostUserPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "bio": "bio",
                      "email": "email",
                      "id": "id",
                      "name": "name",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user",
              "request": {
                "body": {
                  "properties": {
                    "bio": {
                      "type": "optional<string>",
                    },
                    "name": {
                      "type": "optional<string>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "UserProfileUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.User",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "userUpdateAvatar": {
              "auth": true,
              "display-name": "User Update Avatar",
              "docs": undefined,
              "errors": [
                "root.UserUpdateAvatarUserAvatarPostRequestUnprocessableEntityError",
              ],
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "avatar_url": "avatar_url",
                      "bio": "bio",
                      "email": "email",
                      "id": "id",
                      "name": "name",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/user/avatar",
              "request": {
                "body": {
                  "properties": {
                    "file": "file",
                  },
                },
                "content-type": "multipart/form-data",
                "headers": undefined,
                "name": "Body_user_update_avatar_user_avatar_post",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Successful Response",
                "status-code": 200,
                "type": "root.User",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    userGet:
      path: /user
      method: GET
      auth: true
      docs: Retrieve the profile of the current user.
      source:
        openapi: ../openapi.yml
      display-name: User Get
      response:
        docs: Successful Response
        type: root.User
        status-code: 200
      errors:
        - root.UserGetUserGetRequestUnprocessableEntityError
      examples:
        - response:
            body:
              email: email
              name: name
              bio: bio
              avatar_url: avatar_url
              id: id
    userPost:
      path: /user
      method: POST
      auth: true
      docs: Update the profile of the current user.
      source:
        openapi: ../openapi.yml
      display-name: User Post
      request:
        name: UserProfileUpdate
        body:
          properties:
            name:
              type: optional<string>
            bio:
              type: optional<string>
        content-type: application/json
      response:
        docs: Successful Response
        type: root.User
        status-code: 200
      errors:
        - root.UserPostUserPostRequestUnprocessableEntityError
      examples:
        - request: {}
          response:
            body:
              email: email
              name: name
              bio: bio
              avatar_url: avatar_url
              id: id
    userUpdateAvatar:
      path: /user/avatar
      method: POST
      auth: true
      source:
        openapi: ../openapi.yml
      display-name: User Update Avatar
      request:
        name: Body_user_update_avatar_user_avatar_post
        body:
          properties:
            file: file
        content-type: multipart/form-data
      response:
        docs: Successful Response
        type: root.User
        status-code: 200
      errors:
        - root.UserUpdateAvatarUserAvatarPostRequestUnprocessableEntityError
      examples:
        - request: {}
          response:
            body:
              email: email
              name: name
              bio: bio
              avatar_url: avatar_url
              id: id
  source:
    openapi: ../openapi.yml
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerAuthScheme",
      "auth-schemes": {
        "BearerAuthScheme": {
          "scheme": "bearer",
        },
      },
      "display-name": "brain core api",
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: brain core api
auth-schemes:
  BearerAuthScheme:
    scheme: bearer
auth: BearerAuthScheme
",
  },
}