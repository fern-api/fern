{
  "type": "openapi",
  "value": {
    "openapi": "3.0.2",
    "info": {
      "title": "Belvo API Docs",
      "version": "1.36.0",
      "description": "# Introduction\n\nBelvo is an open banking API for Latin America that allows companies to access banking and fiscal information in a secure as well as agile way.\n\nThrough our API, you can access:\n\n\n- **Bank information** such as account information, real-time\nbalance, historical transactions, and account owner identification.\n\n- **Fiscal information** such as received and sent invoices and tax returns.\n\n\n<img src=\"https://files.readme.io/acf27d3-belvo_pipes.png\"\nalt=\"fiscal-endpoints\">\n\n\nIn this API reference you'll find all the information you need about each\n\nendpoint and resource.\n\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid\n#4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right:\n25px\">\n\n<strong>Tip: </strong> Make sure that you also check out our Developer\nPortal for guides on <a\nhref=\"https://developers.belvo.com/docs/get-started-in-5-minutes\"\ntarget=\"_blank\">how to get started</a>, using our <a\nhref=\"https://developers.belvo.com/docs/test-in-sandbox\"\ntarget=\"_blank\">Sandbox environment</a>, as well as how to <a\nhref=\"https://developers.belvo.com/docs/connect-widget\"\ntarget=\"_blank\">integrate the widget</a> or use our <a\nhref=\"https://developers.belvo.com/docs/quickstart-application\"\ntarget=\"_blank\">quickstart application</a>.\n\n</div>\n\n\n## Environment\n\nWe currently offer three environments: sandbox, development, and\nproduction.\n\n\nWhen using our SDKs, make sure to use the **Alias** (and not the Base URL).\n\n\n| Environment | Purpose | Access |\n|-----------|-------|-------|\n| **Sandbox** | The [Sandbox environment](https://developers.belvo.com/docs/test-in-sandbox) is dedicated for your testing and development phases. In this environment, you can create links without real credentials and you can pull test data from all endpoints. **⚠️The sandbox environment is refreshed frequently and your test data can be updated or deleted.** | Base URL (cURL): https://sandbox.belvo.com/ <br><br>Alias (SDKs): sandbox|\n|**Development**|The Development environment is dedicated for testing with real credentials and institutions with real-world institutions. You can create up to 25 links for free in this environment.| Base URL (cURL): https://development.belvo.com/ <br><br>Alias (SDKs): development |\n| **Production** | The Production environment is dedicated for live applications with real connections to institutions. In this environment, you\nwill need real credentials to create links and you will pull real data from the institutions.| Base URL (cURL): https://api.belvo.com/ <br><br>Alias\n(SDKs): production|\n\n\nFor each environment, you'll need to [generate separate API\nkeys](https://developers.belvo.com/docs/get-your-belvo-api-keys).\n\n\n## Response codes\n\n\nWe use the following HTTP status code in the response depending on the\nsuccess or failure:\n\n\n| Status Code | Description |\n|-----------|-------|\n| `200` | ✅ **Success** - The content is available in the response body. |\n| `201` | ✅ **Success** - The content was created successfully on Belvo. |\n| `204` | ✅ **Success** - No content to return. |\n| `400` | ❌ **Bad Request Error** - Request returned an error, detail in content.|\n| `401` | ❌ **Unauthorized** - The Belvo credentials provided are not valid.|\n| `404` | ❌ **Not Found** - The resource you try to access cannot be found.|\n| `405` | ❌ **Method Not Allowed** - The HTTP method you are using is not accepted for this resource.|\n| `408` | ❌ **Request Timeout** - The request timed out and was terminated by the server.|\n| `428` | ❌ **MFA Token Required** - MFA token was required by the institution to connect. |\n| `500` | ❌ **Internal Server Error** - The detail of the error is available in the response body.|\n\n\n## Error handling\n\n\n### Error messages\n\n\nBelvo API errors are returned in JSON format. For example, an error might\nlook like this:\n\n\n```json\n\n[\n    {\n      \"request_id\": \"a6e1c493d7a29d91aed4338e6fcf077d\",\n      \"message\": \"This field is required.\",\n      \"code\": \"required\",\n      \"field\": \"link\"\n    }\n]\n\n```\n\n\nTypically, an error response will have the following parameters:\n\n- `request_id`: a unique ID for the request, you should share it with the\nBelvo support team for investigations.\n\n- `message`: human-readable description of the error.\n\n- `code`: a unique code for the error. Check the table below to see how to\nhandle each error code.\n\n- `field` *(optional)*: The specific field in the request body that has an\nissue.\n\n\n\n### Request identifier\n\nWhen you need help with a specific error, add the request identifier\n(`request_id`) in your message to the Belvo support team. This will speed up\ninvestigations and get you back up and running in no time at all.\n\n\n### Error codes and troubleshooting\n\n\nFor a full list of errors and how to troubleshoot them, please see our\ndedicated [Error handling\narticles](https://developers.belvo.com/docs/integration-overview#error-handling)\nin our DevPortal.\n\n\n\n### Retry policy\n\n\nPlease see our recommended [retry\npolicies](https://developers.belvo.com/docs/integration-overview#error-retry-policy)\nin the DevPortal.\n",
      "contact": {
        "name": "Need help?",
        "url": "https://developers.belvo.com",
        "email": "support@belvo.com"
      },
      "x-logo": {
        "url": "https://files.readme.io/5111448-belvo-for-developers.svg",
        "altText": "Belvo logo"
      }
    },
    "servers": [
      {
        "url": "https://api.belvo.com",
        "description": "Production",
        "x-fern-server-name": "Production"
      },
      {
        "url": "https://sandbox.belvo.com",
        "description": "Sandbox",
        "x-fern-server-name": "Sandbox"
      },
      {
        "url": "https://development.belvo.com",
        "description": "Development",
        "x-fern-server-name": "Development"
      }
    ],
    "security": [
      {
        "basicAuth": []
      }
    ],
    "components": {
      "securitySchemes": {
        "basicAuth": {
          "type": "http",
          "scheme": "basic",
          "description": "Belvo employs **basic authentication** using your secret keys. Just use your secretId as the `username` and secretPassword as the `password`. For example:\n\n```text Authentication example\ncurl \\\n    -u =BASE64-SECRET_ID=:=BASE64-SECRET_PASSWORD=\n    https://sandbox.belvo.com/api/\n```\n\nFor information on how to get your API keys, check out our [Get Started in 5 Minutes](https://developers.belvo.com/docs/get-started-in-5-minutes) DevPortal article."
        }
      },
      "responses": {
        "BadRequestError": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/InvalidAccessMode"
                    },
                    {
                      "$ref": "#/components/schemas/TooManySessionsError"
                    },
                    {
                      "$ref": "#/components/schemas/LoginError"
                    },
                    {
                      "$ref": "#/components/schemas/SessionExpiredError"
                    },
                    {
                      "$ref": "#/components/schemas/ValidationError"
                    },
                    {
                      "$ref": "#/components/schemas/InstitutionDownError"
                    },
                    {
                      "$ref": "#/components/schemas/InstitutionUnavailableError"
                    },
                    {
                      "$ref": "#/components/schemas/InstitutionInactiveError"
                    },
                    {
                      "$ref": "#/components/schemas/UnsupportedOperationError"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidLinkError"
                    },
                    {
                      "$ref": "#/components/schemas/UnconfirmedLinkError"
                    }
                  ]
                }
              }
            }
          },
          "description": "400 Bad Request."
        }
      },
      "schemas": {
        "EnumLinkAccessModeResponse": {
          "type": "string",
          "nullable": true,
          "enum": [
            "single",
            "recurrent",
            null
          ],
          "description": "The link type.\nFor more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.\nWe return one of the following enum values:\n  - `single`\n  - `recurrent`\n  - `null`\n",
          "example": "recurrent"
        },
        "EnumLinkStatus": {
          "type": "string",
          "enum": [
            "valid",
            "invalid",
            "unconfirmed",
            "token_required"
          ],
          "description": "The current status of the link. For more information, see our [Link](https://developers.belvo.com/docs/links-and-institutions#links) article in the devportal.\nWe return one of the following values:\n  - `valid`\n  - `invalid`\n  - `unconfirmed`\n  - `token_required`\n",
          "example": "valid"
        },
        "EnumLinkRefreshRate": {
          "type": "string",
          "nullable": true,
          "default": "7d",
          "enum": [
            "6h",
            "12h",
            "24h",
            "7d",
            "30d",
            null
          ],
          "description": "The update refresh rate for the recurrent link. For more information, check out our [recurrent link documentation](https://developers.belvo.com/docs/links-and-institutions#recurrent-links) in our DevPortal.\nWe return one of the following enum values:\n  - `6h`\n  - `12h`\n  - `24h`\n  - `7d` (default)\n  - `30d` (once a month)\n  - `null` (for single links)\n",
          "example": "7d"
        },
        "Link": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current Link.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "institution": {
              "type": "string",
              "description": "Belvo's name for the institution.\n",
              "example": "erebor_mx_retail"
            },
            "access_mode": {
              "$ref": "#/components/schemas/EnumLinkAccessModeResponse"
            },
            "last_accessed_at": {
              "type": "string",
              "nullable": true,
              "format": "date-time",
              "description": "The ISO-8601 timestamp of Belvo's most recent successful access to the institution for the given link.",
              "example": "2019-09-27T13:02:03.584Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "external_id": {
              "type": "string",
              "minLength": 3,
              "nullable": true,
              "description": "The `external_id` you provided as an additional identifier for the link. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).",
              "example": "56ab5706-6e00-48a4-91c9-ca55968678d9"
            },
            "institution_user_id": {
              "type": "string",
              "pattern": "[A-Za-z0-9\\-=_]{44}",
              "description": "<div style=\"background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\"> <strong>Info:</strong> Only applicable for links created <b>after 08-02-2022</b>. </div>\n\nA unique 44-character string that can be used to identify a user at a given institution.\n\n📚 Check out our [Avoiding duplicated links](https://developers.belvo.com/docs/link-creation-best-practices#avoiding-duplicated-links) DevPortal article for more information and tips on how to use it.",
              "example": "sooE7XJWEKypZJR603ecaWYk-8Ap0oD8Nr1pBQ4eG9c="
            },
            "status": {
              "$ref": "#/components/schemas/EnumLinkStatus"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "The unique ID for the user that created this link.",
              "example": "bcef7f35-67f2-4b19-b009-cb38795faf09"
            },
            "refresh_rate": {
              "$ref": "#/components/schemas/EnumLinkRefreshRate"
            }
          }
        },
        "PaginatedResponseLink": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Link"
              }
            }
          }
        },
        "UnauthorizedError": {
          "x-fern-type-name": "UnauthorizedErrorBody",
          "type": "object",
          "title": "Unauthorized Error",
          "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`authentication_failed`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#401-authentication_failed\" target=\"_blank\">401 authentication_failed errors</a>.",
              "example": "authentication_failed"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `authentication_failed` errors, the description is:\n\n  - `Invalid Secret Keys`.",
              "example": "Invalid Secret Keys"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "EnumLinkAccessModeRequest": {
          "type": "string",
          "enum": [
            "single",
            "recurrent"
          ],
          "description": "The type of link to create.\n\n- Use `single` to do ad hoc one-time POST requests for accounts, owners, and transactions.\n- Use `recurrent` to have Belvo access information on a recurrent basis so you always have fresh account, owner, balance, and transaction data.\n\nFor more information, see our [Links](https://developers.belvo.com/docs/links-and-institutions#links) article.\n",
          "default": "recurrent"
        },
        "LinksRequest": {
          "type": "object",
          "required": [
            "institution",
            "username"
          ],
          "properties": {
            "institution": {
              "type": "string",
              "pattern": "[a-z]+_[a-z]{2}_[a-z]+",
              "description": "The Belvo name for the institution.",
              "example": "erebor_mx_retail"
            },
            "username": {
              "type": "string",
              "description": "The end-user's username (or ID) used to log in to the institution.",
              "example": "username"
            },
            "password": {
              "type": "string",
              "description": "The end-user's password used to log in to the institution.\n\nℹ️ **Note**: You must send through a password for all institutions except for IMSS (`imss_mx_employment`).\n",
              "example": "password"
            },
            "external_id": {
              "type": "string",
              "minLength": 3,
              "description": "An additional identifier for the link, provided by you, to store in the Belvo database. **Cannot** include any Personal Identifiable Information (PII). **Must** be at least three characters long.\n\nIf we identify that the identifier contains PII, we will force a `null` value. For more information, see our [Link creation article](https://developers.belvo.com/docs/link-creation-best-practices#adding-your-own-identifier).",
              "example": "56ab5706-6e00-48a4-91c9-ca55968678d9"
            },
            "username2": {
              "type": "string",
              "description": "The end-user's second username (or email address) used to log in to the institution.\n\nℹ️ This is only required by some institutions. To know which institutions require a second username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.\n",
              "example": "secondusername"
            },
            "username3": {
              "type": "string",
              "description": "The end-user's third username used to log in to the institution.\n\nℹ️ This is only required by some institutions. To know which institutions require a third username, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.\n",
              "example": "thirdusername"
            },
            "password2": {
              "type": "string",
              "description": "The end-user's second password used to log in to the institution.\n\nℹ️ This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.\n",
              "example": "pin"
            },
            "token": {
              "type": "string",
              "description": "The MFA token required by the bank to log in.\n\nWe do not recommend sending the authentication token in the same request as registering the user. See our [Handling multi-factor authentication](https://developers.belvo.com/docs/handling-2-factor-authentication) article for more information and best practices.\n",
              "example": "1234ab"
            },
            "access_mode": {
              "$ref": "#/components/schemas/EnumLinkAccessModeRequest"
            },
            "fetch_historical": {
              "type": "boolean",
              "description": "Indicates whether or not to retrieve historical information for the link or not. For links where `access_mode=single`, the default is `false`. For links where `access_mode=recurrent` this is hardcoded to `true`.\n",
              "example": true
            },
            "credentials_storage": {
              "type": "string",
              "description": "Indicates whether or not to store credentials (and the duration for which to store the credentials). By default, this is set to `store`. For links where `access_mode=recurrent`, this must be set to `store`.\n\nChoose either:\n  - `store` to store credentials\n  - `nostore` to not store credentials\n  - `30d` to store credentials only for 30 days\n",
              "example": "store"
            },
            "username_type": {
              "type": "string",
              "description": "Type of document to be used as a username.\n\nSome banking institutions accept different documents to be used as the `username` to login. For example, the *Cédula de Ciudadanía*, *Cédula de Extranjería*, *Pasaporte'*, and so on.\n\nFor banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.\n\nℹ️ To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.\n\nFor a list of standards codes, see the table below.\n\n| Code | Description |\n|-----------|-------|\n| `001` | Cédula de Ciudadanía |\n| `002` | Cédula de Extranjería |\n| `003` | Pasaporte |\n| `004` | Tarjeta de Identidad |\n| `005` | Registro Civil |\n| `006` | Número Identificación Personal |\n| `020` | NIT |\n| `021` | NIT Persona Natural |\n| `022` | NIT Persona Extranjera |\n| `023` | NIT Persona Jurídica |\n| `024` | NIT Menores |\n| `025` | NIT Desasociado |\n| `030` | Trj. Seguro Social Extranjero |\n| `031` | Sociedad Extranjera sin NIT en Colombia |\n| `032` | Fideicomiso |\n| `033` | RIF Venezuela |\n| `034` | CIF |\n| `035` | Número de Identidad |\n| `036` | RTN |\n| `037` | Cédula de Identidad |\n| `038` | DIMEX |\n| `039` | CED |\n| `040` | PAS |\n| `041` | Documento Único de Identidad |\n| `042` | NIT Salvadoreño |\n| `100` | Agência e conta |\n| `101` | Código do operador |\n| `102` | Cartão de crédito |\n| `103` | CPF |\n",
              "example": "001"
            },
            "certificate": {
              "type": "string",
              "description": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.\n\nBelvo supports a base64 encoded `certificate`. If the `certificate` parameter is used, you *must* also provide the `private_key` parameter.\n",
              "example": "1234567890abcd="
            },
            "private_key": {
              "type": "string",
              "description": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.\n\nBelvo supports a base64 encoded `private_key`. If the `private_key` parameter is used, you *must* also provide the `certificate` parameter.\n",
              "example": "1234567890abcd="
            }
          }
        },
        "TooManySessionsError": {
          "type": "object",
          "title": "Too Many Sessions",
          "description": "This error occurs when:\n\n  - a user is attempting to log in to their institution via Belvo while also already being logged in to their institution on a web browser or mobile app.\n  - you make a request for information while Belvo is scraping data from the institution for that user.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`too_many_sessions`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-too_many_sessions\" target=\"_blank\">400 too_many_sessions errors</a>.",
              "example": "too_many_sessions"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `too_many_sessions` errors, the description is:\n  \n  - `Impossible to login, a session is already opened with the institution for these credentials`.",
              "example": "Impossible to login, a session is already opened with the institution for these credentials"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "LoginError": {
          "type": "object",
          "title": "Login Error",
          "description": "This error can occur when:\n\n  - the credentials that your user provides are incorrect or missing.\n  - the MFA token your user provides is not supported by Belvo.\n  - there is an issue with the institution that prevents logins.\n  - the user's account is either locked or the user does not have permission to access their internet banking.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`login_error`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-login_error\" target=\"_blank\">400 login_error errors</a>.",
              "example": "login_error"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `login_error` errors, the description can be one of the following:\n\n  - `Invalid credentials provided to login to the institution`\n  - `A MFA token is required by the institution, but it's not supported yet by Belvo.`\n  - `Impossible to login, something unexpected happened while logging into the institution. Try again later.`\n  - `Login not attempted due to invalid credentials`\n  - `Missing credentials to login to the institution`\n  - `The user account access was forbidden by the institution`\n  - `The user account is locked, user needs to contact the institution to unlock it`",
              "example": "Invalid credentials provided to login to the institution"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "SessionExpiredError": {
          "type": "object",
          "title": "Session Expired",
          "description": "This error occurs when you try to resume a request session that has already expired. This is usually because the user took too long to provide their authentication token.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`session_expired`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-session_expired\" target=\"_blank\">400 session_expired errors</a>.",
              "example": "session_expired"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `session_expired` errors, the description is:\n  \n  - `The session you are trying to resume has expired, please start again from register/retrieve endpoint`.",
              "example": "The session you are trying to resume has expired, please start again from register/retrieve endpoint"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "ValidationError": {
          "type": "object",
          "title": "Validation Error",
          "description": "This error occurs when you try to resume a request session that has already expired. This is usually because the user took too long to provide their authentication token.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`null`, `does_not_exist`, `required`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle:\n  - <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-blank\" target=\"_blank\">400 blank errors</a>\n  - <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-null\" target=\"_blank\">400 null errors</a>\n  - <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-does_not_exist\" target=\"_blank\">400 does_not_exist errors</a>\n  - <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-required\" target=\"_blank\">400 required errors</a>",
              "example": "required"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `session_expired` errors, the description can be (among others):\n  \n  - `This field is required.`\n  - `Object with name=narnia does not exist.`\n  - `This field may not be null.`\n  - `This field may not be blank.`",
              "example": "This field is required."
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            },
            "field": {
              "type": "string",
              "nullable": true,
              "description": "Name of the field where the error was encountered.",
              "example": "link"
            }
          }
        },
        "InstitutionDownError": {
          "type": "object",
          "title": "Institution Down",
          "description": "This error occurs when the institution's website that you're trying to access is down due to maintenance or other issues, which means Belvo is unable to create new links or retrieve new data.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`institution_down`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-institution_down\" target=\"_blank\">400 institution_down errors</a>.",
              "example": "institution_down"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `institution_down` errors, the description is:\n  \n  - `The financial institution is down, try again later`.",
              "example": "The financial institution is down, try again later"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "InstitutionUnavailableError": {
          "type": "object",
          "title": "Institution Unavailable",
          "description": "This error occurs when the institution's website that you're trying to access is down due to maintenance or other issues, which means Belvo is unable to create new links or retrieve new data.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`institution_unavailable`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-institution_unavailable\" target=\"_blank\">400 institution_unavailable errors</a>.",
              "example": "institution_unavailable"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error.\n\nFor `institution_unavailable` errors, the description is:\n  \n  - `The financial institution is unavailable`.",
              "example": "The financial institution is unavailable"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "InstitutionInactiveError": {
          "type": "object",
          "title": "Institution Inactive",
          "description": "This error occurs when we (Belvo) have deactivated the institution in our API.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`institution_inactive`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-institution_inactive\" target=\"_blank\">400 institution_inactive errors</a>.",
              "example": "institution_inactive"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `institution_inactive` errors, the description is:\n  \n  - `The institution has been temporarily deactivated`.",
              "example": "The institution has been temporarily deactivated"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "UnsupportedOperationError": {
          "type": "object",
          "title": "Unsupported Operation",
          "description": "This error occurs when you try to access some data operation that Belvo does not support for an institution. For example, trying to access the Balances resource for fiscal institutions.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`unsupported_operation`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-unsupported_operation\" target=\"_blank\">400 unsupported_operation errors</a>.",
              "example": "unsupported_operation"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `unsupported_operation` errors, the description is:\n  \n  - `The resource you are trying to access is not supported by this institution`.",
              "example": "The resource you are trying to access is not supported by this institution"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "InvalidLinkError": {
          "type": "object",
          "title": "Invalid Link",
          "description": "This error occurs when you try to access an account but the user credentials are no longer valid, prompting an error from the institution.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`invalid_link`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-invalid_link\" target=\"_blank\">400 invalid_link errors</a>.",
              "example": "invalid_link"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `invalid_link` errors, the description is:\n  \n  - `The link has been invalidated. You may need to update link credentials`.",
              "example": "The link has been invalidated. You may need to update link credentials"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "UnconfirmedLinkError": {
          "type": "object",
          "title": "Unconfirmed Link",
          "description": "This error occurs when you try to access a link that was paused previously (and as such is not active now).\nA Link's status is set to `unconfirmed_link` when your user has not completed the Link creation process successfully (for example, they might not provide a valid MFA token).",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`unconfirmed_link`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-unconfirmed_link\" target=\"_blank\">400 unconfirmed_link errors</a>.",
              "example": "unconfirmed_link"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `unconfirmed_link` errors, the description is:\n  \n  - `The link creation has not been completed yet`.",
              "example": "The link creation has not been completed yet"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "TokenRequiredResponseTokenGenerationData": {
          "type": "object",
          "description": "Details on how to generate the token.",
          "properties": {
            "instructions": {
              "type": "string",
              "description": "Instructions for token generation.",
              "example": "Use this code to generate the token"
            },
            "type": {
              "type": "string",
              "description": "Type of the data to generate the token (QR code, numeric challenge).",
              "example": "numeric"
            },
            "value": {
              "type": "string",
              "description": "Value to use to generate the token.",
              "example": "12345"
            },
            "expects_user_input": {
              "type": "boolean",
              "description": "Indicates whether the user needs to provide input in order to complete the authentication.\nWhen set to `false`, your user may need to:\n- confirm the login on another device - scan a QR code\nYou will still need to make a PATCH call to complete the request.",
              "example": true,
              "default": true
            }
          }
        },
        "TokenRequiredResponse": {
          "type": "object",
          "description": "MFA Token Required",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`token_required`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#428-token_required\" target=\"_blank\">428 token_required errors</a>.",
              "example": "token_required"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `token_required` errors, the description is:\n  \n  - `A MFA token is required by the institution to login`.",
              "example": "A MFA token is required by the institution to login"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "8c7b283c6efa449c9c028a16b5c249fa"
            },
            "session": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the login session (matching a regex pattern of: `[a-f0-9]{32}`).",
              "example": "2675b703b9d4451f8d4861a3eee54449"
            },
            "expiry": {
              "type": "integer",
              "format": "int32",
              "description": "Session duration time in seconds.",
              "example": 9600
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo, used to reference the current Link.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "token_generation_data": {
              "$ref": "#/components/schemas/TokenRequiredResponseTokenGenerationData"
            }
          }
        },
        "UnexpectedError": {
          "type": "object",
          "title": "Unexpected Error",
          "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`unexpected_error`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#500-unexpected_error\" target=\"_blank\">500 unexpected_error errors</a>.",
              "example": "unexpected_error"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `unexpected_error` errors, the description is:\n  \n  - `Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution`.",
              "example": "Belvo is unable to process the request due to an internal system issue or to an unsupported response from an institution"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "PatchBodyWithoutSaveData": {
          "type": "object",
          "description": "A JSON object containing a session UUID and a MFA token",
          "required": [
            "session",
            "link"
          ],
          "properties": {
            "session": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "The session you want to resume. You need to use the `session` value that is provided in the 428 Token Required response that you receive after you make your POST request.",
              "example": "6e7b283c6efa449c9c028a16b5c249fa"
            },
            "token": {
              "type": "string",
              "description": "The MFA token generated by the institution and required to continue a session.",
              "example": "1234ab"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` you want to resume. Must be the same `link.id` as the one you receive in the 428 Token Required response that contains the `session` ID.",
              "example": "683005d6-f45c-4adb-b289-f1a12f50f80c"
            }
          }
        },
        "NotFoundError": {
          "type": "object",
          "title": "Not Found",
          "x-fern-type-name": "NotFoundErrorBody",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`not_found`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#404-not_found\" target=\"_blank\">404 not_found errors</a>.",
              "example": "not_found"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `not_found` errors, the description is:\n  \n  - `Not found`",
              "example": "Not found"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "LinksPutRequest": {
          "type": "object",
          "required": [
            "institution",
            "username",
            "password"
          ],
          "properties": {
            "password": {
              "type": "string",
              "description": "The end-user's password used to log in to the institution.",
              "example": "password"
            },
            "password2": {
              "type": "string",
              "description": "The end-user's second password used to log in to the institution.\n\nℹ️ This is only required by some institutions. To know which institutions require a second password, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.\n",
              "example": "pin"
            },
            "token": {
              "type": "string",
              "description": "The MFA token required by the bank to log in.\n",
              "example": "1234ab"
            },
            "username_type": {
              "type": "string",
              "description": "Type of document to be used as a username.\n\n  Some banking institutions accept different documents to be used as the `username` to login. For example, the *Cédula de Ciudadanía*, *Cédula de Extranjería*, *Pasaporte'*, and so on.\n\n  For banks that require a document to log in, you **must** provide the `username_type` parameter to specify which document is used when creating the link.\n\n  ℹ️ To know which institutions require the `username_type` parameter, get the [details](https://developers.belvo.com/reference/detailinstitution) for the institution and check the `form_fields` array in the response.\n\n  For a list of standards codes, see the table below.\n\n| Code | Description |\n|-----------|-------|\n| `001` | Cédula de Ciudadanía |\n| `002` | Cédula de Extranjería |\n| `003` | Pasaporte |\n| `004` | Tarjeta de Identidad |\n| `005` | Registro Civil |\n| `006` | Número Identificación Personal |\n| `020` | NIT |\n| `021` | NIT Persona Natural |\n| `022` | NIT Persona Extranjera |\n| `023` | NIT Persona Jurídica |\n| `024` | NIT Menores |\n| `025` | NIT Desasociado |\n| `030` | Trj. Seguro Social Extranjero |\n| `031` | Sociedad Extranjera sin NIT en Colombia |\n| `032` | Fideicomiso |\n| `033` | RIF Venezuela |\n| `034` | CIF |\n| `035` | Número de Identidad |\n| `036` | RTN |\n| `037` | Cédula de Identidad |\n| `038` | DIMEX |\n| `039` | CED |\n| `040` | PAS |\n| `041` | Documento Único de Identidad |\n| `042` | NIT Salvadoreño |\n| `100` | Agência e conta |\n| `101` | Código do operador |\n| `102` | Cartão de crédito |\n| `103` | CPF |\n",
              "example": "001"
            },
            "certificate": {
              "type": "string",
              "description": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.\n\nBelvo supports a base64 encoded `certificate`. If the `certificate` parameter is used, you *must* also provide the `private_key` parameter.\n",
              "example": "1234567890abcd="
            },
            "private_key": {
              "type": "string",
              "description": "For certain fiscal institutions, it is possible to log in using a certificate and a private key, which enables a faster connection to the institution.\n\nBelvo supports a base64 encoded `private_key`. If the `private_key` parameter is used, you *must* also provide the `certificate` parameter.\n",
              "example": "1234567890abcd="
            }
          }
        },
        "ChangeAccessMode": {
          "type": "object",
          "required": [
            "access_mode"
          ],
          "properties": {
            "access_mode": {
              "$ref": "#/components/schemas/EnumLinkAccessModeRequest"
            }
          }
        },
        "InvalidAccessMode": {
          "type": "object",
          "title": "Invalid Access Mode",
          "description": "This error occurs when you try to update a link from single to recurrent, but there are no login credentials stored for the user.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`invalid_access_mode_switch`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-invalid_access_mode_switch\" target=\"_blank\">400 invalid_access_mode_switch errors</a>.",
              "example": "invalid_link"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `invalid_access_mode_switch` errors, the description is:\n  \n  - `This link doesn't have stored credentials hence it can't be switched to recurrent mode\"`.",
              "example": "This link doesn't have stored credentials hence it can't be switched to recurrent mode\""
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "EnumInstitutionType": {
          "type": "string",
          "enum": [
            "bank",
            "fiscal",
            "employment"
          ],
          "description": "The type of institution. We return one of the following values:\n\n  - `bank`\n  - `fiscal`\n  - `employment`\n"
        },
        "InstitutionAccount": {
          "type": "object",
          "description": "Details regarding the institution.",
          "properties": {
            "name": {
              "type": "string",
              "example": "erebor_mx_retail",
              "description": "The name of the institution, as designated by Belvo.\nPlease see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names."
            },
            "type": {
              "$ref": "#/components/schemas/EnumInstitutionType"
            }
          }
        },
        "EnumAccountCategory": {
          "type": "string",
          "nullable": true,
          "enum": [
            "CHECKING_ACCOUNT",
            "CREDIT_CARD",
            "INVESTMENT_ACCOUNT",
            "LOAN_ACCOUNT",
            "PENSION_FUND_ACCOUNT",
            "RECEIVABLES_ACCOUNT",
            "SAVINGS_ACCOUNT",
            "UNCATEGORIZED",
            null
          ],
          "description": "The type of account.\nWe return one of the following enum values:\n  - `CHECKING_ACCOUNT`\n  - `CREDIT_CARD`\n  - `INVESTMENT_ACCOUNT`\n  - `LOAN_ACCOUNT`\n  - `PENSION_FUND_ACCOUNT`\n  - `RECEIVABLES_ACCOUNT`\n  - `SAVINGS_ACCOUNT`\n  - `UNCATEGORIZED`\n  - `null`\n",
          "example": "CHECKING_ACCOUNT"
        },
        "AccountsBalance": {
          "type": "object",
          "required": [
            "current"
          ],
          "description": "Details regarding the current and available balances for the account.\n",
          "properties": {
            "current": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The current balance is calculated differently according to the type of account.\n\n- **💰 Checking and saving accounts**:\n\nThe user's account balance at the `collected_at` timestamp.\n- **💳 Credit cards**:\n\nThe amount the user has spent in the current card billing period (see `credit_data.cutting_date` for information on when the current billing period finishes).\n- **🏡 Loan accounts**:\n\nThe amount remaining to pay on the users's loan (same as `loan_data.outstanding_balance`).",
              "example": 5874.13
            },
            "available": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The balance that the account owner can use.\n- **💰 Checking and saving accounts**:\n\nThe available balance may be different to the `current` balance due to pending transactions.\n- **💳 Credit cards**:\n\nThe credit amount the user still has available for the current period. The `available` balance may be different to the `current` balance due to pending transactions or future instalments.\n- **🏡 Loan accounts**:\n\nThe present value required to pay off the loan, as provided by the institution.\n\n**Note:** If the institution does not provide this value, we return `null`.",
              "example": 5621.12
            }
          }
        },
        "AccountsCreditData": {
          "type": "object",
          "required": [
            "credit_limit",
            "cutting_date",
            "next_payment_date",
            "minimum_payment",
            "no_interest_payment",
            "interest_rate",
            "collected_at"
          ],
          "nullable": true,
          "description": "The credit options associated with this account.",
          "properties": {
            "credit_limit": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 192000,
              "description": "The maximum amount of credit the owner can receive."
            },
            "collected_at": {
              "type": "string",
              "nullable": true,
              "example": "2019-09-27T13:01:41.941Z",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected."
            },
            "cutting_date": {
              "type": "string",
              "nullable": true,
              "example": "2019-12-11",
              "description": "The closing date of the credit period."
            },
            "next_payment_date": {
              "type": "string",
              "description": "The due date for the next payment (`YYYY-MM-DD`).",
              "example": "2019-12-13",
              "nullable": true
            },
            "minimum_payment": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 2400.3,
              "description": "The minimum amount to be paid on the `next_payment_date`."
            },
            "no_interest_payment": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 2690.83,
              "description": "The minimum amount required to pay to avoid generating interest."
            },
            "interest_rate": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The annualized interest rate of the credit.",
              "example": 4
            },
            "end_date": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "*This field has been deprecated.*\n",
              "example": null
            },
            "monthly_payment": {
              "type": "number",
              "deprecated": true,
              "nullable": true,
              "description": "*This field has been deprecated.*\n\n*The recurrent monthly payment, if applicable.*\n",
              "example": null
            },
            "last_payment_date": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "*This field has been deprecated.*\n\n\n*The date when the last credit payment was made.*\n",
              "example": null
            }
          }
        },
        "EnumLoanDataInterestRateType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "MONTHLY",
            "YEARLY"
          ],
          "description": "The period that the interest is applied to the loan. We return one of the following values:\n\n  - `MONTHLY`\n  - `YEARLY`\n",
          "example": "MONTHLY"
        },
        "AccountsLoanDataInterestRate": {
          "type": "object",
          "required": [
            "name",
            "type",
            "value"
          ],
          "description": "Breakdown of the interest applied to the loan.",
          "properties": {
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the type of interest rate applied to the loan.",
              "example": "jurosEfetivo"
            },
            "type": {
              "$ref": "#/components/schemas/EnumLoanDataInterestRateType"
            },
            "value": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The interest rate (in percent or currency value).",
              "example": 7.85
            }
          }
        },
        "EnumLoanDataFeeType": {
          "type": "string",
          "enum": [
            "OPERATION_FEE",
            "INSURANCE_FEE",
            "OTHERS"
          ],
          "description": "The type of fee. We return one of the following values:\n\n  - `OPERATION_FEE`\n  - `INSURANCE_FEE`\n  - `OTHERS`\n",
          "example": "OPERATION_FEE"
        },
        "AccountsLoanDataFees": {
          "type": "object",
          "nullable": true,
          "required": [
            "type",
            "value"
          ],
          "description": "Breakdown of the fees applied to the loan.",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/EnumLoanDataFeeType"
            },
            "value": {
              "type": "number",
              "format": "float",
              "description": "The total value of the fee. Same currency of the Loan.\n",
              "example": 5.6
            }
          }
        },
        "AccountsLoanData": {
          "type": "object",
          "nullable": true,
          "required": [
            "principal",
            "monthly_payment",
            "outstanding_balance",
            "interest_rates",
            "collected_at"
          ],
          "description": "The loan options associated with this account.",
          "properties": {
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "contract_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The initial total loan amount, calculated by the institution, when the contract was signed. This amount includes the principal + interest + taxes + fees.",
              "example": 202000
            },
            "principal": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Total amount of the loan (the amount the user receives).",
              "example": 192000
            },
            "loan_type": {
              "type": "string",
              "nullable": true,
              "description": "The type of the loan, according to the institution.",
              "example": "Consignado"
            },
            "payment_day": {
              "type": "string",
              "nullable": true,
              "description": "The day of the month by which the owner needs to pay the loan (`YYYY-MM-DD`).",
              "example": "27"
            },
            "outstanding_principal": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Outstanding loan amount, that is, how much remains to pay on the principal (not including interest).\n",
              "example": 142023
            },
            "outstanding_balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount remaining to pay in total, including interest.",
              "example": 182000
            },
            "monthly_payment": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The recurrent monthly payment, if applicable.",
              "example": 1000
            },
            "interest_rates": {
              "type": "array",
              "nullable": true,
              "description": "Breakdown of the interest applied to the loan.",
              "items": {
                "$ref": "#/components/schemas/AccountsLoanDataInterestRate"
              }
            },
            "fees": {
              "type": "array",
              "nullable": true,
              "description": "Breakdown of the fees applied to the loan.",
              "items": {
                "$ref": "#/components/schemas/AccountsLoanDataFees"
              }
            },
            "number_of_installments_total": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The total number of installments required to pay the loan.",
              "example": 60
            },
            "number_of_installments_outstanding": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of installments left to pay.",
              "example": 48
            },
            "contract_start_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date when the loan contract was signed (`YYYY-MM-DD`).",
              "example": "2020-03-01"
            },
            "contract_end_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the loan is expected to be completed.",
              "example": "2027-10-01"
            },
            "contract_number": {
              "type": "string",
              "nullable": true,
              "description": "The contract number of the loan, as given by the institution.",
              "example": "890ASLDJF87SD00"
            },
            "credit_limit": {
              "type": "number",
              "nullable": true,
              "deprecated": true,
              "description": "This field has been deprecated.\n\nPlease see `principal` instead.\n",
              "example": null
            },
            "last_period_balance": {
              "type": "number",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated.\n\nPlease see `outstanding_balance` instead.\n",
              "example": null
            },
            "interest_rate": {
              "type": "number",
              "nullable": true,
              "deprecated": true,
              "description": "This field has been deprecated.\n\nPlease see the `interest_rates` object instead.\n",
              "example": null
            },
            "limit_day": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated.\n\nPlease see `payment_day` instead.\n",
              "example": null
            },
            "cutting_day": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated.\n\nThe closing day of the month for the loan.\n",
              "example": null
            },
            "cutting_date": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated.\n\nThe closing date of the loan period.\n",
              "example": null
            },
            "last_payment_date": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated.\n\nThe date when the last loan payment was made.\n",
              "example": null
            },
            "no_interest_payment": {
              "type": "number",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated.\n\nThe minimum amount required to pay to avoid generating interest.\n",
              "example": null
            }
          }
        },
        "AccountsFundsDataPublicIdentifications": {
          "type": "object",
          "required": [
            "name",
            "value"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The type of identification number for the fund.",
              "example": "CNPJ"
            },
            "value": {
              "type": "string",
              "nullable": true,
              "description": "The fund's identification number.",
              "example": "05.954.445/0221-68"
            }
          }
        },
        "AccountsFundsData": {
          "type": "object",
          "properties": {
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "name": {
              "type": "string",
              "nullable": true,
              "example": "FIX X",
              "description": "The pension fund name."
            },
            "type": {
              "type": "string",
              "nullable": true,
              "example": "CNPJ",
              "description": "Type of pension fund."
            },
            "public_identifications": {
              "type": "array",
              "nullable": true,
              "description": "The fund's public IDs.",
              "items": {
                "$ref": "#/components/schemas/AccountsFundsDataPublicIdentifications"
              }
            },
            "balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 88427.94,
              "description": "The amount in the fund."
            },
            "percentage": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 100,
              "description": "How much this fund, as a percentage, contributes to the pension account's total."
            }
          }
        },
        "AccountsReceivablesData": {
          "type": "object",
          "required": [
            "current",
            "available",
            "anticipated",
            "collected_at"
          ],
          "nullable": true,
          "description": "Additional details regarding the receivables account, if applicable.",
          "properties": {
            "current": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 2193.83,
              "description": "The total sum of all receivables (`available` + `anticipated`)"
            },
            "available": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 800.37,
              "description": "The amount that the owner of the account will receive according to an established date."
            },
            "anticipated": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "example": 1393.46,
              "description": "The amount that the owner of the account received earlier than contracted."
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2022-02-09T08:45:50.406032Z"
            }
          }
        },
        "Account": {
          "type": "object",
          "nullable": true,
          "description": "Details regarding the account.\n\n**Note**: For our recurring expenses resource, this account relates to the account that was analyzed to generate the recurring expenses report.\n",
          "required": [
            "name",
            "number",
            "type",
            "category",
            "public_identification_name",
            "public_identification_value",
            "currency",
            "balance",
            "balance_type",
            "credit_data",
            "loan_data",
            "collected_at",
            "last_accessed_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier created by Belvo used to reference the current account.",
              "example": "0d3ffb69-f83b-456e-ad8e-208d0998d71d"
            },
            "link": {
              "type": "string",
              "nullable": true,
              "description": "The `link.id` the account belongs to.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "institution": {
              "$ref": "#/components/schemas/InstitutionAccount"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "category": {
              "$ref": "#/components/schemas/EnumAccountCategory"
            },
            "balance_type": {
              "type": "string",
              "nullable": true,
              "description": "Indicates whether this account is either an `ASSET` or a `LIABILITY`. You can consider the balance of an `ASSET` as being positive, while the balance of a `LIABILITY` as negative.\n",
              "example": "ASSET"
            },
            "type": {
              "type": "string",
              "nullable": true,
              "description": "The account type, as designated by the institution.",
              "example": "Cuentas de efectivo"
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The account name, as given by the institution.",
              "example": "Cuenta Perfiles- M.N. - MXN-666"
            },
            "number": {
              "type": "string",
              "nullable": true,
              "description": "The account number, as designated by the institution.",
              "example": "4057068115181"
            },
            "balance": {
              "$ref": "#/components/schemas/AccountsBalance"
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "description": "The currency of the account. For example:\n- 🇧🇷 BRL (Brazilian Real)\n- 🇨🇴 COP (Colombian Peso)\n- 🇲🇽 MXN (Mexican Peso)\n\n Please note that other currencies other than in the list above may be returned.",
              "example": "MXN"
            },
            "public_identification_name": {
              "type": "string",
              "nullable": true,
              "description": "The public name for the type of identification. For example: `\"CLABE\"`.\n\nℹ️ For 🇧🇷 Brazilian savings and checking accounts, this field will be `AGENCY/ACCOUNT`.\n",
              "example": "CLABE"
            },
            "public_identification_value": {
              "type": "string",
              "nullable": true,
              "description": "The value for the `public_identification_name`.\n\nℹ️ For 🇧🇷 Brazilian savings and checking accounts, this field will be the agency and bank account number, separated by a slash.\nFor example: `0444/45722-0`.\n",
              "example": "150194683119900273"
            },
            "last_accessed_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of Belvo's most recent successful access to the institution for the given link.",
              "example": "2021-03-09T10:28:40.000Z"
            },
            "credit_data": {
              "$ref": "#/components/schemas/AccountsCreditData"
            },
            "loan_data": {
              "$ref": "#/components/schemas/AccountsLoanData"
            },
            "funds_data": {
              "type": "array",
              "description": "One or more funds that contribute to the the pension account.",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/AccountsFundsData"
              }
            },
            "receivables_data": {
              "$ref": "#/components/schemas/AccountsReceivablesData"
            },
            "bank_product_id": {
              "deprecated": true,
              "type": "string",
              "nullable": true,
              "description": "*This field has been deprecated.*\n\n*The institution's product ID for the account type.*\n",
              "example": null
            },
            "internal_identification": {
              "deprecated": true,
              "type": "string",
              "nullable": true,
              "description": "*This field has been deprecated.*\n\n*The institution's internal identification for the account.*\n",
              "example": null
            }
          }
        },
        "AccountsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "An array of Account objects.",
              "items": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "StandardRequest": {
          "type": "object",
          "required": [
            "link"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that you want to get information for.",
              "example": "2ccd5e15-194a-4a19-a45a-e7223c7e6717"
            },
            "token": {
              "type": "string",
              "description": "The OTP token generated by the bank.",
              "example": "1234ab"
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            }
          }
        },
        "RequestTimeoutError": {
          "type": "object",
          "title": "Request Timeout",
          "x-fern-type-name": "RequestTimeoutErrorBody",
          "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`request_timeout`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#408-request_timeout\" target=\"_blank\">408 request_timeout errors</a>.",
              "example": "request_timeout"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `request_timeout` errors, the description is:\n  \n  - `The request timed out, you can retry asking for less data by changing your query parameters`.",
              "example": "The request timed out, you can retry asking for less data by changing your query parameters"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "PatchBody": {
          "type": "object",
          "description": "A JSON object containing a session UUID and a MFA token",
          "required": [
            "session",
            "link"
          ],
          "properties": {
            "session": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "The session you want to resume. You need to use the `session` value that is provided in the 428 Token Required response that you receive after you make your POST request.",
              "example": "6e7b283c6efa449c9c028a16b5c249fa"
            },
            "token": {
              "type": "string",
              "description": "The MFA token generated by the institution and required to continue a session.",
              "example": "1234ab"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` you want to resume. Must be the same `link.id` as the one you receive in the 428 Token Required response that contains the `session` ID.",
              "example": "683005d6-f45c-4adb-b289-f1a12f50f80c"
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response.",
              "example": true
            }
          }
        },
        "TransactionMerchantData": {
          "type": "object",
          "nullable": true,
          "description": "Additional data regarding the merchant involved in the transaction.\nWe only return merchant information for new transactions made from *checking* or *credit card* accounts.\n> **Get merchant information**\n We retrieve the merchant information for a transaction as part of our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) product, turning raw data into actionable insights. To enable this product, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.\n",
          "properties": {
            "logo": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the merchant's logo.",
              "example": "https://logo.clearbit.com/asesor-contable.es"
            },
            "website": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the merchant's website.",
              "example": "https://merchants-r-us.com"
            },
            "merchant_name": {
              "type": "string",
              "description": "The name of the merchant.",
              "example": "Merchants R Us Global"
            }
          }
        },
        "EnumTransactionCategory": {
          "type": "string",
          "nullable": true,
          "enum": [
            "Bills & Utilities",
            "Credits & Loans",
            "Deposits",
            "Fees & Charges",
            "Food & Groceries",
            "Home & Life",
            "Income & Payments",
            "Insurance",
            "Investments & Savings",
            "Online Platforms & Leisure",
            "Personal Shopping",
            "Taxes",
            "Transfers",
            "Transport & Travel",
            "Unknown",
            "Withdrawal & ATM",
            null
          ],
          "description": "The name of the category to which this transaction belongs.\n\n> **Get transaction categorization**\nWith [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we clean and categorize transactions for you, turning raw data into actionable insights. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.\n\nWe return one of the following enum values:\n\n  - `Bills & Utilities`\n  - `Credits & Loans`\n  - `Deposits`\n  - `Fees & Charges`\n  - `Food & Groceries`\n  - `Home & Life`\n  - `Income & Payments`\n  - `Insurance`\n  - `Investments & Savings`\n  - `Online Platforms & Leisure`\n  - `Personal Shopping`\n  - `Taxes`\n  - `Transfers`\n  - `Transport & Travel`\n  - `Unknown`*\n  - `Withdrawal & ATM`\n  - `null`\n\n\n  \\* For clients not using our Transaction Categorization product, we return `null` instead.\n",
          "example": "Income & Payments"
        },
        "EnumTransactionSubcategory": {
          "type": "string",
          "nullable": true,
          "enum": [
            "Electricity & Energy",
            "Rent",
            "Telecommunications",
            "Water",
            "Auto",
            "Credit Card",
            "Instalment",
            "Interest & Charges",
            "Mortgage",
            "Pay Advance",
            "Personal",
            "Adjustments",
            "Bank Fees",
            "Chargeback",
            "Refund",
            "Blocked Balances",
            "Alimony",
            "Alcohol & Tobacco",
            "Bakery & Coffee",
            "Bars & Nightclubs",
            "Convenience Store",
            "Delivery",
            "Groceries",
            "Restaurants",
            "Education",
            "Gyms & Fitness",
            "Hair & Beauty",
            "Health",
            "Home Decor & Appliances",
            "Laundry & Dry Cleaning",
            "Pharmacies",
            "Professional Services",
            "Veterinary Services",
            "Freelance",
            "Interest",
            "Retirement",
            "Salary",
            "Government",
            "Home Insurance",
            "Auto Insurance",
            "Health & Life Insurance",
            "Savings",
            "Fixed income",
            "Equity",
            "Investment Funds",
            "Derivatives",
            "Cryptocurrencies",
            "Apps, Software and Cloud Services",
            "Events, Parks and Museums",
            "Gambling",
            "Gaming",
            "Lottery",
            "Movie & Audio",
            "Books & News",
            "Clothing & Accessories",
            "Department Store",
            "Electronics",
            "E-commerce",
            "Gifts",
            "Office Supplies",
            "Pet Supplies",
            "Auto Tax & Fees",
            "Donation",
            "Government Fees",
            "Income Tax",
            "Real Estate Tax & Fees",
            "Tax Return",
            "Accommodation",
            "Auto Expenses",
            "Auto Rental",
            "Flights",
            "Gas",
            "Mileage Programs",
            "Parking & Tolls",
            "Public Transit",
            "Taxis & Rideshares",
            "Other",
            null
          ],
          "description": "The transactions subcategory.\n\n  > **Get transaction categorization**\n  For clients not using our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions), we return `null` instead. To enable this feature, just [reach out](https://belvo.com/contact/?utm_source=documentation) to us, and we'll get right to it.\n\n\nWe return one of the following enum values:\n\n  - `Electricity & Energy`\n  - `Rent`\n  - `Telecommunications`\n  - `Water`\n  - `Auto`\n  - `Credit Card`\n  - `Instalment`\n  - `Interest & Charges`\n  - `Mortgage`\n  - `Pay Advance`\n  - `Personal`\n  - `Adjustments`\n  - `Bank Fees`\n  - `Chargeback`\n  - `Refund`\n  - `Blocked Balances`\n  - `Alimony`\n  - `Alcohol & Tobacco`\n  - `Bakery & Coffee`\n  - `Bars & Nightclubs`\n  - `Convenience Store`\n  - `Delivery`\n  - `Groceries`\n  - `Restaurants`\n  - `Education`\n  - `Gyms & Fitness`\n  - `Hair & Beauty`\n  - `Health`\n  - `Home Decor & Appliances`\n  - `Laundry & Dry Cleaning`\n  - `Pharmacies`\n  - `Professional Services`\n  - `Veterinary Services`\n  - `Freelance`\n  - `Interest`\n  - `Retirement`\n  - `Salary`\n  - `Government`\n  - `Home Insurance`\n  - `Auto Insurance`\n  - `Health & Life Insurance`\n  - `Savings`\n  - `Fixed income`\n  - `Equity`\n  - `Investment Funds`\n  - `Derivatives`\n  - `Cryptocurrencies`\n  - `Apps, Software and Cloud Services`\n  - `Events, Parks and Museums`\n  - `Gambling`\n  - `Gaming`\n  - `Lottery`\n  - `Movie & Audio`\n  - `Books & News`\n  - `Clothing & Accessories`\n  - `Department Store`\n  - `Electronics`\n  - `E-commerce`\n  - `Gifts`\n  - `Office Supplies`\n  - `Pet Supplies`\n  - `Auto Tax & Fees`\n  - `Donation`\n  - `Government Fees`\n  - `Income Tax`\n  - `Real Estate Tax & Fees`\n  - `Tax Return`\n  - `Accommodation`\n  - `Auto Expenses`\n  - `Auto Rental`\n  - `Flights`\n  - `Gas`\n  - `Mileage Programs`\n  - `Parking & Tolls`\n  - `Public Transit`\n  - `Taxis & Rideshares`\n  - `Other`\n  - `null`",
          "example": "Freelance"
        },
        "EnumTransactionType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "OUTFLOW",
            "INFLOW",
            null
          ],
          "description": "The direction of the transaction:\n- `INFLOW` indicates money coming into the account.\n- `OUTFLOW` indicates money going out of the account.\n- `null` when no information was present regarding the direction of the transaction.\n",
          "example": "INFLOW"
        },
        "EnumTransactionStatus": {
          "type": "string",
          "enum": [
            "PENDING",
            "PROCESSED",
            "UNCATEGORIZED",
            null
          ],
          "nullable": true,
          "description": "The status of the transaction. We return one of the following values:\n\n  - `PENDING`\n  - `PROCESSED`\n  - `UNCATEGORIZED`\n  - `null`\n",
          "example": "PROCESSED"
        },
        "EnumTransactionBillStatus": {
          "type": "string",
          "nullable": true,
          "enum": [
            "PAID",
            "CLOSED",
            "OPEN",
            "FUTURE",
            null
          ],
          "description": "The status of the bill that the transaction appears on. Can be one of:\n\n  - `PAID`: The bill has been paid in full.\n  - `CLOSED`: The bill has been closed by the institution.\n  - `OPEN`: The bill is currently open. (Note: This is the main bill that Belvo retrieves balance data from).\n  - `FUTURE`: The bill is pending.\n  - `null`: No bill status was identified.\n  \nℹ️ Note: Some banks consider CLOSED as PAID.",
          "example": "PAID"
        },
        "TransactionCreditCardData": {
          "type": "object",
          "nullable": true,
          "description": "Additional data provided by the institution for credit card transactions.",
          "properties": {
            "collected_at": {
              "type": "string",
              "nullable": true,
              "example": "2019-09-27T13:01:41.941Z",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected."
            },
            "bill_name": {
              "type": "string",
              "nullable": true,
              "description": "The title of the monthly credit card bill the transaction belongs to. The format of the returned value is institution specific, however, some common examples are:\n\n- diciembre-2021\n- dec-2021\n- dec-21\n",
              "example": "apr-2020"
            },
            "bill_status": {
              "$ref": "#/components/schemas/EnumTransactionBillStatus"
            },
            "bill_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The aggregate bill amount, as of `collected_at`.",
              "example": 300
            },
            "previous_bill_total": {
              "type": "string",
              "nullable": true,
              "description": "The total amount of the previous month's bill, if available.",
              "example": "9614.30"
            }
          }
        },
        "Transaction": {
          "type": "object",
          "required": [
            "value_date",
            "accounting_date",
            "amount",
            "currency",
            "description",
            "reference",
            "observations",
            "balance",
            "status",
            "account",
            "type",
            "collected_at",
            "category",
            "merchant"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the transaction.",
              "example": "076c66e5-90f5-4e01-99c7-50e32f65ae42"
            },
            "internal_identification": {
              "type": "string",
              "nullable": true,
              "minLength": 1,
              "maxLength": 100,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]{0,99}$",
              "description": "The institution's internal identification for the transaction.\n",
              "example": "TXpRMU9UQTROMWhZV2xSU1FUazJSMDl"
            },
            "account": {
              "$ref": "#/components/schemas/Account"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-11-28T10:27:44.813Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "value_date": {
              "nullable": true,
              "type": "string",
              "format": "date",
              "pattern": "^(\\d{4})-(1[0-2]|0?[1-9])-(3[01]|[12][0-9]|0?[1-9])$",
              "description": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
              "example": "2019-10-23"
            },
            "accounting_date": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO timestamp when the transaction was processed and accounted for by the institution.",
              "example": "2019-10-23T13:01:41.941Z"
            },
            "amount": {
              "type": "number",
              "nullable": true,
              "format": "float",
              "pattern": "^\\d{1,15}\\.\\d{2,4}$",
              "description": "The transaction amount.\nℹ️ The amount displayed is always positive as we indicate the direction of the transaction in the `type` parameter.\n",
              "example": 2145.45
            },
            "balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The balance at the end of the transaction.",
              "example": 16907.96
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "maxLength": 3,
              "pattern": "^[A-Z]{3}$",
              "description": "The three-letter currency code (ISO-4217).\n",
              "example": "BRL"
            },
            "description": {
              "type": "string",
              "nullable": true,
              "description": "The description of transaction provided by the institution. Usually this is the text that the end user sees in the online platform.",
              "example": "SEVEN BUDDHAS RFC:XXXXXXXXXX"
            },
            "observations": {
              "type": "string",
              "nullable": true,
              "description": "Additional observations provided by the institution on the transaction.",
              "example": "OPTIONAL OBSERVATIONS"
            },
            "merchant": {
              "$ref": "#/components/schemas/TransactionMerchantData"
            },
            "category": {
              "$ref": "#/components/schemas/EnumTransactionCategory"
            },
            "subcategory": {
              "$ref": "#/components/schemas/EnumTransactionSubcategory"
            },
            "reference": {
              "type": "string",
              "nullable": true,
              "maxLength": 128,
              "description": "The reference number of the transaction, provided by the bank.",
              "example": "8703"
            },
            "type": {
              "$ref": "#/components/schemas/EnumTransactionType"
            },
            "status": {
              "$ref": "#/components/schemas/EnumTransactionStatus"
            },
            "credit_card_data": {
              "$ref": "#/components/schemas/TransactionCreditCardData"
            }
          }
        },
        "TransactionsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of transaction objects.",
              "items": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "TransactionsRequest": {
          "type": "object",
          "required": [
            "link",
            "date_from",
            "date_to"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that you want to get information for.",
              "example": "2ccd5e15-194a-4a19-a45a-e7223c7e6717"
            },
            "account": {
              "type": "string",
              "format": "uuid",
              "description": "If provided, we return transactions only from this account.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date from which you want to start getting transactions for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.",
              "example": "2020-08-05"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date you want to stop getting transactions for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
              "example": "2020-10-05"
            },
            "token": {
              "type": "string",
              "description": "The OTP token generated by the bank.",
              "example": "1234ab"
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            }
          }
        },
        "AsynchronousAccepted202": {
          "type": "object",
          "properties": {
            "request_id": {
              "type": "string",
              "description": "The unique ID for this request. We recommend you store this value to later identify which webhook event relates to an asynchronous request.",
              "example": "b5d0106ac9cc43d5b36199fe831f6bbe"
            }
          }
        },
        "Balance": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the balance request.",
              "example": "076c66e5-90f5-4e01-99c7-50e32f65ae42"
            },
            "account": {
              "$ref": "#/components/schemas/Account"
            },
            "value_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the `balance` was available, in `YYYY-MM-DD` format.",
              "example": "2019-10-23"
            },
            "balance": {
              "type": "number",
              "format": "float",
              "description": "The funds available in the account by the end of the `value_date`.",
              "example": 50000
            },
            "current_balance": {
              "deprecated": true,
              "type": "number",
              "nullable": true,
              "description": "*This field has been deprecated. Please use the `balance` field instead.*\n",
              "example": null
            },
            "statement": {
              "deprecated": true,
              "type": "string",
              "nullable": true,
              "description": "*This field has been deprecated.*\n\n*The ID of the banking statement used to extract the `balance`.*\n",
              "example": null
            },
            "collected_at": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "format": "date-time",
              "description": "This field has been deprecated.\n\nThe ISO-8601 timestamp when the data point was collected.\n",
              "example": null
            }
          }
        },
        "BalancesPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of balance objects.",
              "items": {
                "$ref": "#/components/schemas/Balance"
              }
            }
          }
        },
        "BalancesRequest": {
          "type": "object",
          "required": [
            "link",
            "date_from",
            "date_to"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that you want to get information for.",
              "example": "2ccd5e15-194a-4a19-a45a-e7223c7e6717"
            },
            "account": {
              "type": "string",
              "format": "uuid",
              "description": "If provided, only balances matching this `account.id` are returned.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "Date from which you want to start receiving balances, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.",
              "example": "2021-01-18"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "Date that you want to stop receiving balances, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
              "example": "2021-02-15"
            },
            "token": {
              "type": "string",
              "description": "The OTP token generated by the bank.",
              "example": "1234ab"
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            }
          }
        },
        "InstitutionsFormFieldValues": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "The code of the document.",
              "example": "001"
            },
            "label": {
              "type": "string",
              "description": "The label for the field. For example:\n- Cédula de Ciudadanía\n- Cédula de Extranjería\n- Pasaporte\n",
              "example": "Cédula de Ciudadanía"
            },
            "validation": {
              "type": "string",
              "description": "The type of input validation used for the field.",
              "example": "^.{1,}$"
            },
            "validation_message": {
              "type": "string",
              "description": "The message displayed when an invalid input is provided in the form field.",
              "example": "Invalid document number"
            },
            "placeholder": {
              "type": "string",
              "description": "The placeholder text in the form field.",
              "example": "DEF4444908M22"
            }
          }
        },
        "InstitutionsFormField": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username, password, or username type field.",
              "example": "username"
            },
            "type": {
              "type": "string",
              "description": "The input type for the form field. For example, string.",
              "example": "text"
            },
            "label": {
              "type": "string",
              "description": "The label of the form field. For example:\n- Client number\n- Key Bancanet\n- Document\n",
              "example": "Client number"
            },
            "validation": {
              "type": "string",
              "description": "The type of input validation used for the field.",
              "example": "^.{1,}$"
            },
            "placeholder": {
              "type": "string",
              "description": "The placeholder text in the form field.",
              "example": "ABC333333A33"
            },
            "validation_message": {
              "type": "string",
              "description": "The message displayed when an invalid input is provided in the form field.",
              "example": "Invalid client number"
            },
            "values": {
              "type": "array",
              "description": "If the form field is for documents, the institution may require additional input regarding the document type.",
              "items": {
                "$ref": "#/components/schemas/InstitutionsFormFieldValues"
              }
            }
          }
        },
        "InstitutionsFeature": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the feature.",
              "example": "token_required"
            },
            "description": {
              "type": "string",
              "description": "The description of the feature.",
              "example": "The institution may require a token during link creation or login"
            }
          }
        },
        "EnumInstitutionIntegrationType": {
          "type": "string",
          "enum": [
            "credentials",
            "openbanking"
          ],
          "description": "The type of technology used to access the institution. We return one of the following values:\n\n- `credentials`: Uses Belvo's scraping technology, combined with user credentials, to perform requests.\n- `openbanking`: Uses the bank's openbanking API to perform requests.\n",
          "example": "credentials"
        },
        "EnumInstitutionStatus": {
          "type": "string",
          "enum": [
            "healthy",
            "down"
          ],
          "description": "Indicates whether Belvo's integration with the institution is currently active (`healthy`) or undergoing maintenance (`down`).\n",
          "example": "healthy"
        },
        "Institution": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32",
              "description": "The ID of the institution as designated by Belvo.",
              "example": 1003
            },
            "name": {
              "type": "string",
              "example": "erebor_mx_retail",
              "description": "The name of the institution, as designated by Belvo.\nPlease see our [Institutions](https://developers.belvo.com/docs/institution) DevPortal article for a detailed list of institution names."
            },
            "type": {
              "$ref": "#/components/schemas/EnumInstitutionType"
            },
            "website": {
              "type": "string",
              "nullable": true,
              "example": "https://www.erebor.com/",
              "description": "The URL of the institution's website."
            },
            "display_name": {
              "type": "string",
              "example": "Erebor Mexico",
              "description": "The customer-facing name of the institution."
            },
            "country_codes": {
              "type": "array",
              "description": "The country codes where the institution is available, for example:\n- 🇧🇷 BR (Brazil)\n- 🇨🇴 CO (Colombia)\n- 🇲🇽 MX (Mexico)\n",
              "items": {
                "type": "string",
                "example": "MX"
              }
            },
            "primary_color": {
              "type": "string",
              "example": "#056dae",
              "description": "The primary color on the institution's website."
            },
            "logo": {
              "type": "string",
              "nullable": true,
              "example": "https://belvo-api-media.s3.amazonaws.com/logos/erebor_logo.png",
              "description": "The URL of the institution's logo."
            },
            "icon_logo": {
              "type": "string",
              "nullable": true,
              "example": "https://statics.belvo.io/widget/images/institutions/erebor.svg",
              "description": "The URL of the institution's icon logo."
            },
            "text_logo": {
              "type": "string",
              "nullable": true,
              "example": "https://statics.belvo.io/widget/images/institutions/erebor.svg",
              "description": "The URL of the institution's text logo."
            },
            "form_fields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InstitutionsFormField"
              }
            },
            "features": {
              "type": "array",
              "description": "The features that the institution supports. If the institution has no special features, then Belvo returns an empty array.\n\nHere is a list of the available features:\n- `token_required` indicates that the institution may require a token during link creation or when making any other requests.\n",
              "items": {
                "$ref": "#/components/schemas/InstitutionsFeature"
              }
            },
            "resources": {
              "type": "array",
              "description": "A list of Belvo resources that you can use with the institution. This list includes one or more of the following resources:\n\n  - `ACCOUNTS`\n  - `BALANCES`\n  - `INCOMES`\n  - `INVESTMENTS_PORTFOLIOS` \n  - `INVESTMENTS_TRANSACTIONS` *This field has been deprecated.*\n  - `INVOICES`\n  - `OWNERS`\n  - `RECURRING_EXPENSES`\n  - `RISK_INSIGHTS`\n  - `TRANSACTIONS`\n  - `TAX_COMPLIANCE_STATUS`\n  - `TAX_STATUS`\n  - `TAX_RETURNS`\n",
              "items": {
                "type": "string",
                "description": "A Belvo resource that the institution supports.",
                "example": "ACCOUNTS"
              },
              "example": [
                "ACCOUNTS",
                "BALANCES",
                "INCOMES",
                "OWNERS",
                "RECURRING_EXPENSES",
                "RISK_INSIGHTS",
                "TRANSACTIONS"
              ]
            },
            "integration_type": {
              "$ref": "#/components/schemas/EnumInstitutionIntegrationType"
            },
            "status": {
              "$ref": "#/components/schemas/EnumInstitutionStatus"
            }
          }
        },
        "InstitutionsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of institution objects.",
              "items": {
                "$ref": "#/components/schemas/Institution"
              }
            }
          }
        },
        "OwnerDocumentId": {
          "type": "object",
          "required": [
            "document_type",
            "document_number"
          ],
          "description": "Information regarding the identification document the owner provided to the bank.",
          "nullable": true,
          "properties": {
            "document_type": {
              "type": "string",
              "nullable": true,
              "description": "The type of document the owner provided to the institution to open the account. Common document types are:\n\n🇧🇷 Brazil\n- `CPF` (*Cadastro de Pessoas Físicas*)\n- `CNPJ`(*Cadastro Nacional de Pessoas Jurídicas*)\n\n🇨🇴 Colombia\n- `CC`(*Cédula de Ciudadanía*)\n- `NIT` (*Número de Identificación Tributaria*)\n\n🇲🇽 Mexico\n- `CURP` (*Clave Única de Registro de Población*)\n- `NISS` (*Número de Seguridad Social*)\n",
              "example": "CPF"
            },
            "document_number": {
              "type": "string",
              "nullable": true,
              "description": "The document's identification number.",
              "example": "235578435-S"
            }
          }
        },
        "Owner": {
          "type": "object",
          "required": [
            "internal_identification",
            "display_name",
            "email",
            "phone_number",
            "address",
            "collected_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier used to reference the current owner.",
              "example": "c749315b-eec2-435d-a458-06912878564f"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current Link.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "internal_identification": {
              "type": "string",
              "nullable": true,
              "description": "The institution's internal identifier for the owner.",
              "example": "7e5838e4"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "display_name": {
              "type": "string",
              "nullable": true,
              "maxLength": 128,
              "description": "The full name of the owner, as provided by the bank.",
              "example": "John Doe"
            },
            "email": {
              "type": "string",
              "description": "The account owner's registered email address.",
              "nullable": true,
              "format": "email",
              "maxLength": 256,
              "example": "johndoe@belvo.com"
            },
            "phone_number": {
              "type": "string",
              "nullable": true,
              "description": "The account owner's registered phone number.",
              "example": "+52-XXX-XXX-XXXX"
            },
            "address": {
              "type": "string",
              "description": "The accounts owners registered address.",
              "nullable": true,
              "example": "Carrer de la Llacuna, 162, 08018 Barcelona"
            },
            "document_id": {
              "$ref": "#/components/schemas/OwnerDocumentId"
            },
            "first_name": {
              "deprecated": true,
              "nullable": true,
              "type": "string",
              "description": "*This field has been deprecated.*\n\n*The first name of the account owner.*\n",
              "example": null
            },
            "last_name": {
              "deprecated": true,
              "nullable": true,
              "type": "string",
              "description": "*This field has been deprecated.*\n\n*The last name of the account owner.*\n",
              "example": null
            },
            "second_last_name": {
              "deprecated": true,
              "nullable": true,
              "type": "string",
              "description": "*This field has been deprecated.*\n\n*The second last name of the account owner.*\n",
              "example": null
            }
          }
        },
        "OwnersPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of owner objects.",
              "items": {
                "$ref": "#/components/schemas/Owner"
              }
            }
          }
        },
        "EnumInvoiceSatInvoiceType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "Egreso",
            "Ingreso",
            "Nómina",
            "Pago",
            "Traslado"
          ],
          "description": "The fiscal institution's classification of the invoice.\n\nFor Mexico's SAT, we return one of the following values:\n\n  - `Egreso`\n  - `Ingreso`\n  - `Nómina`\n  - `Pago`\n  - `Traslado`\n",
          "example": "Ingreso"
        },
        "EnumInvoiceType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "OUTFLOW",
            "INFLOW",
            null
          ],
          "description": "The direction of the invoice (from the perspective of the Link owner).\n- `OUTFLOW` indicates a sent invoice. - `INFLOW` indicates a received invoice.\n",
          "example": "INFLOW"
        },
        "EnumInvoiceSatPaymentMethod": {
          "type": "string",
          "nullable": true,
          "enum": [
            "PUE",
            "PIP",
            "PPD",
            null
          ],
          "description": "The payment method code used for this invoice, as defined by the legal entity of the country.\n\n- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-method). For Mexico, we return `PUE`, `PIP`, `PPD`, or `null`.\n",
          "example": "PUE"
        },
        "InvoiceDetailRetainedTaxSat": {
          "type": "object",
          "required": [
            "tax",
            "tax_percentage",
            "retained_tax_amount"
          ],
          "properties": {
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "tax_type": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for SAT Mexico and will return `null`.\n",
              "example": null
            },
            "tax": {
              "type": "string",
              "nullable": true,
              "description": "The type of retained tax (for example, ISR, IVA or IEPS).",
              "example": "ISR"
            },
            "tax_percentage": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The percentage of tax retained.",
              "example": 10
            },
            "retained_tax_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount of retained tax.",
              "example": 209.79
            }
          }
        },
        "InvoiceDetailSat": {
          "type": "object",
          "required": [
            "description",
            "product_identification",
            "quantity",
            "unit_amount",
            "unit_description",
            "unit_code",
            "pre_tax_amount",
            "tax_percentage",
            "tax_amount",
            "total_amount"
          ],
          "properties": {
            "description": {
              "type": "string",
              "nullable": true,
              "description": "The description of the invoice item (an invoice can have one or more items).",
              "example": "December 2019 accounting fees"
            },
            "product_identification": {
              "type": "string",
              "nullable": true,
              "description": "The identification code of the product or the service, as defined by the legal entity in the country.\n- 🇲🇽 [Mexico](http://200.57.3.89/Pys/catPyS.aspx)\n",
              "example": "84101600"
            },
            "quantity": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The quantity of this invoice item.",
              "example": 10
            },
            "unit_code": {
              "type": "string",
              "nullable": true,
              "description": "The unit of measure, as defined by the legal entity in the country. \n- 🇲🇽 Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)\n",
              "example": "E48"
            },
            "unit_description": {
              "type": "string",
              "nullable": true,
              "description": "The description of the item, as defined by the legal entity in the country.\n- 🇲🇽 Mexico [SAT catalog reference](https://developers.belvo.com/docs/sat-catalogs#unit-code)\n",
              "example": "Unidad de servicio"
            },
            "unit_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The price of one a singular item.",
              "example": 200
            },
            "tax_type": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "pre_tax_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total price for this item before tax is applied (`quantity` x `unit_amount`).",
              "example": 400
            },
            "tax_percentage": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The tax percentage to apply.",
              "example": 16
            },
            "tax_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount of tax for this invoice item (`pre_tax_amount` x `tax_percentage`).",
              "example": 64
            },
            "total_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total price for this invoice item (`pre_tax_amount` + `tax_amount`).",
              "example": 464
            },
            "retained_taxes": {
              "type": "array",
              "description": "The retained tax on the invoice item.",
              "items": {
                "$ref": "#/components/schemas/InvoiceDetailRetainedTaxSat"
              }
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            }
          }
        },
        "InvoicesPaymentsRelatedDocumentsSat": {
          "type": "object",
          "required": [
            "invoice_identification",
            "currency",
            "payment_method",
            "previous_balance",
            "amount_paid",
            "outstanding_balance"
          ],
          "description": "List of all the related deferred invoices affected by the payment.",
          "properties": {
            "invoice_identification": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal institution's unique ID for the related deferred invoice.\n",
              "example": "7EE015F3-6311-11EA-B02A-00155D014007"
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "description": "The currency of the related invoice. For example:\n    \n- 🇧🇷 BRL (Brazilian Real)\n- 🇨🇴 COP (Colombian Peso)\n- 🇲🇽 MXN (Mexican Peso)\n  \n  Please note that other currencies other than in the list above may be returned.\n",
              "example": "MXN"
            },
            "payment_method": {
              "type": "string",
              "nullable": true,
              "description": "The payment method of the related invoice.\n",
              "example": "PPD"
            },
            "partiality_number": {
              "type": "integer",
              "format": "int32",
              "description": "The payment installment number.\n",
              "example": 1
            },
            "previous_balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The invoice amount before the payment.\n",
              "example": 18877.84
            },
            "amount_paid": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount paid in this installment.\n",
              "example": 8000
            },
            "outstanding_balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount remaining to be paid.\n",
              "example": 10877.84
            }
          }
        },
        "InvoicesPaymentsSat": {
          "type": "object",
          "required": [
            "date",
            "payment_type",
            "currency",
            "exchange_rate",
            "amount",
            "operation_number",
            "beneficiary_account_number",
            "payer_rfc",
            "payer_account_number",
            "payer_bank_name",
            "related_documents"
          ],
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "ISO-8601 timestamp when the payment was made.\n",
              "example": "2020-03-17T12:00:00.000Z"
            },
            "payment_type": {
              "type": "string",
              "nullable": true,
              "description": "Payment type code used for this invoice, as defined by the country's legal entity.\n\n- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)\n",
              "example": "03"
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "description": "The currency of the payment. For example:\n\n- 🇧🇷 BRL (Brazilian Real)\n- 🇨🇴 COP (Colombian Peso)\n- 🇲🇽 MXN (Mexican Peso)\n\nPlease note that other currencies other than in the list above may be returned.\n",
              "example": "BRL"
            },
            "exchange_rate": {
              "type": "string",
              "nullable": true,
              "description": "The `currency` to MXN currency exchange rate when the payment was made.\n",
              "example": "3.75"
            },
            "amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The invoice amount, in the currency of the original invoice.\n",
              "example": 8000.5
            },
            "operation_number": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal institution's internal identifier for the operation.\n",
              "example": "831840"
            },
            "beneficiary_rfc": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the payment beneficiary.\n",
              "example": "BNM840515VB1"
            },
            "beneficiary_account_number": {
              "type": "string",
              "nullable": true,
              "description": "The bank account number of the payment beneficiary.\n",
              "example": "12343453245633"
            },
            "payer_rfc": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the payment issuer.\n",
              "example": "BKJM840515VB1"
            },
            "payer_account_number": {
              "type": "string",
              "nullable": true,
              "description": "The bank account number of the payment issuer.\n",
              "example": "13343663245699"
            },
            "payer_bank_name": {
              "type": "string",
              "nullable": true,
              "description": "The banking institution that was used by the payment issuer.\n",
              "example": "CITI BANAMEX"
            },
            "related_documents": {
              "type": "array",
              "description": "A list of all the related deferred invoices affected by the payment.\n",
              "items": {
                "$ref": "#/components/schemas/InvoicesPaymentsRelatedDocumentsSat"
              }
            }
          }
        },
        "InvoicesPayrollSat": {
          "type": "object",
          "nullable": true,
          "required": [
            "version",
            "type",
            "payment_date",
            "date_from",
            "date_to",
            "days",
            "amount"
          ],
          "description": "Details regarding the payroll payment. Only applicable for payroll invoices.\n",
          "properties": {
            "days": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of days covered by the payment.\n",
              "example": 30
            },
            "type": {
              "type": "string",
              "nullable": true,
              "description": "The payroll type, as defined by the legal entity of the country.\n\n- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payroll-type)\n",
              "example": "O"
            },
            "amount": {
              "type": "number",
              "format": "float",
              "description": "The total amount of the payroll payment.\n",
              "example": 20400.1
            },
            "version": {
              "type": "string",
              "description": "The version of the payroll object.\n",
              "example": "1.2"
            },
            "date_from": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The start date of the payment period.\n",
              "example": "2018-07-01"
            },
            "date_to": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The end date of the payment period.\n",
              "example": "2018-07-31"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "payment_date": {
              "type": "string",
              "format": "date",
              "description": "The payment date.\n"
            }
          }
        },
        "InvoiceWarningsSat": {
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "description": "Object containing information about any warnings related to this invoice.\n",
          "nullable": true,
          "properties": {
            "code": {
              "type": "string",
              "nullable": true,
              "description": "The warning code.\n",
              "example": "sat_xml_limit_reached"
            },
            "message": {
              "type": "string",
              "nullable": true,
              "description": "The description of the warning.\n",
              "example": "The daily limit for XML downloads set by SAT was reached so this invoice might be missing data. Please check https://tinyurl.com/yydzhy5d for more information on this error."
            }
          }
        },
        "InvoiceWithIdSat": {
          "type": "object",
          "title": "🇲🇽 SAT Mexico",
          "required": [
            "type",
            "invoice_identification",
            "invoice_date",
            "invoice_type",
            "subtotal_amount",
            "tax_amount",
            "discount_amount",
            "total_amount",
            "currency",
            "exchange_rate",
            "status",
            "sender_name",
            "sender_id",
            "receiver_name",
            "receiver_id",
            "certification_authority",
            "certification_date",
            "cancelation_status",
            "cancelation_update_date",
            "payment_type",
            "payment_type_description",
            "invoice_details",
            "payroll",
            "payments",
            "collected_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier used to reference the current invoice.",
              "example": "c749315b-eec2-435d-a458-06912878564f"
            },
            "link": {
              "type": "string",
              "description": "The `link.id` the invoice belongs to.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "invoice_identification": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal institution's unique ID for the invoice.",
              "example": "A1A1A1A1-2B2B-3C33-D44D-555555E55EE"
            },
            "invoice_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date of the invoice.",
              "example": "2019-12-01"
            },
            "status": {
              "type": "string",
              "nullable": true,
              "description": "The status of the invoice. Can be either *Vigente* (valid) or *Cancelado* (cancelled).",
              "example": "Vigente"
            },
            "invoice_type": {
              "$ref": "#/components/schemas/EnumInvoiceSatInvoiceType"
            },
            "type": {
              "$ref": "#/components/schemas/EnumInvoiceType"
            },
            "sender_id": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the invoice sender",
              "example": "AAA111111AA11"
            },
            "sender_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the invoice sender.",
              "example": "ACME CORP"
            },
            "sender_tax_fraud_status": {
              "type": "string",
              "nullable": true,
              "description": "Indicates whether or not the sender is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>\nSAT updates the tax fraud list every three months. <br><br>\nFor more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's Código Fiscal de la Federación. <br><br>\nPossible statuses are:\n- `INVESTIGATING` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - `DISMISSED` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - `OVERTURNED` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).",
              "example": "NO_TAX_FRAUD_STATUS"
            },
            "receiver_id": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the invoice receiver.",
              "example": "BBB222222BB22"
            },
            "receiver_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the invoice receiver.",
              "example": "BELVO CORP"
            },
            "receiver_tax_fraud_status": {
              "type": "string",
              "nullable": true,
              "description": "Indicates whether or not the receiver is on SAT's tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.<br><br>\nSAT updates the tax fraud list every three months. <br><br>\nFor more information regarding the reason's a taxpayer can be put on the tax fraud list, please see [Article 69](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69.html) and [Article 69-B](http://omawww.sat.gob.mx/cifras_sat/Paginas/datos/vinculo.html?page=ListCompleta69B.html) of Mexico's Código Fiscal de la Federación. <br><br>\nPossible statuses are:\n- `INVESTIGATING` <br> The fiscal institution has identified irregularities and open an investigation regarding the taxpayer. <br> - `DISMISSED` <br> The fiscal institution has investigated the taxpayer and declared them innocent. <br> - `CONFIRMED` <br> The fiscal institution has confirmed that the taxpayer is guilty. <br> - `OVERTURNED` <br> The fiscal institution has reassessed a previously confirmed taxpayer and, based on new evidence, has taken the taxpayer off the tax fraud list. <br> - `NO_TAX_FRAUD_STATUS` <br> The receiver or sender is not found in the list (in other words, they are complying with the fiscal institution's regulations).",
              "example": "NO_TAX_FRAUD_STATUS"
            },
            "cancelation_status": {
              "type": "string",
              "nullable": true,
              "description": "If the invoice is cancelled, this field indicates the status of the cancellation."
            },
            "cancelation_update_date": {
              "type": "string",
              "format": "date",
              "description": "The date of the invoice cancelation.\n",
              "example": "2019-12-02",
              "nullable": true
            },
            "certification_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date of the fiscal certification.\n",
              "example": "2019-12-01"
            },
            "certification_authority": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the certification provider.\n",
              "example": "CCC333333CC33"
            },
            "payment_type": {
              "type": "string",
              "nullable": true,
              "description": "The payment type code used for this invoice, as defined by the country legal entity.\n\n- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#payment-type)\n",
              "example": "99"
            },
            "payment_type_description": {
              "deprecated": true,
              "nullable": true,
              "type": "string",
              "description": "*This field has been deprecated.*\n",
              "example": null
            },
            "payment_method": {
              "$ref": "#/components/schemas/EnumInvoiceSatPaymentMethod"
            },
            "payment_method_description": {
              "deprecated": true,
              "nullable": true,
              "type": "string",
              "description": "*This field has been deprecated.*\n\n*The description of the payment method used for this invoice.*\n",
              "example": null
            },
            "usage": {
              "type": "string",
              "description": "The invoice's usage code, as defined by the legal entity of the country. \n\n- 🇲🇽 Mexico [SAT catalog reference article](https://developers.belvo.com/docs/sat-catalogs#usage)\n",
              "nullable": true,
              "example": "P01"
            },
            "version": {
              "type": "string",
              "description": "The CFDI version of the invoice.\n",
              "nullable": true,
              "example": "3.3"
            },
            "place_of_issue": {
              "type": "string",
              "description": "The postcode of where the invoice was issued.\n",
              "nullable": true,
              "example": "01165"
            },
            "invoice_details": {
              "type": "array",
              "description": "A list of descriptions for each item (purchased product or service provided) in the invoice.\n",
              "items": {
                "$ref": "#/components/schemas/InvoiceDetailSat"
              }
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "description": "The currency of the invoice. For example:\n \n - 🇧🇷 BRL (Brazilian Real)\n - 🇨🇴 COP (Colombian Peso)\n - 🇲🇽 MXN (Mexican Peso)\n - 🇺🇸 USD (United States Dollar)\n",
              "example": "MXN"
            },
            "subtotal_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The pretax amount of this invoice (sum of each item's `pre_tax_amount`).\n",
              "example": 400
            },
            "exchange_rate": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The exchange rate used in this invoice for the currency.\n",
              "example": 0.052
            },
            "tax_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount of tax for this invoice (sum of each item's `tax_amount`).\n",
              "example": 64
            },
            "discount_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total amount discounted in this invoice.\n",
              "example": 10
            },
            "total_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total amount of the invoice (`subtotal_amount` + `tax_amount` - `discount_amount`)",
              "example": 454
            },
            "payments": {
              "type": "array",
              "description": "A list detailing all the invoice payments.\n",
              "items": {
                "$ref": "#/components/schemas/InvoicesPaymentsSat"
              }
            },
            "payroll": {
              "$ref": "#/components/schemas/InvoicesPayrollSat"
            },
            "folio": {
              "type": "string",
              "nullable": true,
              "description": "The internal control number that the taxpayer assigns to the invoice.\n",
              "example": "26"
            },
            "xml": {
              "type": "string",
              "description": "XML of the invoice document.\n",
              "nullable": true
            },
            "warnings": {
              "$ref": "#/components/schemas/InvoiceWarningsSat"
            },
            "sender_blacklist_status": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated. Please use `sender_tax_fraud_status` instead.\n",
              "example": null
            },
            "receiver_blacklist_status": {
              "type": "string",
              "deprecated": true,
              "nullable": true,
              "description": "This field has been deprecated. Please use `receiver_tax_fraud_status` instead.\n",
              "example": null
            }
          }
        },
        "EnumInvoiceDianInvoiceType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "Factura Electrónica de Venta"
          ],
          "description": "The fiscal institution's classification of the invoice.\n\nFor Colombia's DIAN, we return one of the following values:\n\n  - `Factura Electrónica de Venta`\n",
          "example": "Factura Electrónica de Venta"
        },
        "InvoiceSenderDetailsDian": {
          "type": "object",
          "nullable": true,
          "description": "Details regarding the sender.\n",
          "properties": {
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "tax_payer_type": {
              "type": "string",
              "nullable": true,
              "description": "Indicates if the sender is a business or an individual. Can be either:\n  \n  - `Persona Jurídica`\n  - `Persona Natural`\n",
              "example": "Persona Natural"
            },
            "regimen": {
              "type": "string",
              "nullable": true,
              "description": "The sender's regimen type.\n\nFor detailed information regarding DIAN's regimens, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).\n",
              "example": "Régimen Simple de Tributación - SIMPLE"
            },
            "tax_scheme": {
              "type": "string",
              "nullable": true,
              "description": "The sender's fiscal responsibilities.\n\nFor detailed information regarding DIAN's tax schemes, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).\n",
              "example": "01-IVA"
            },
            "country": {
              "type": "string",
              "nullable": true,
              "description": "The country where the sender pays their taxes.\n",
              "example": "Colombia"
            },
            "address": {
              "type": "string",
              "nullable": true,
              "description": "The sender's address.\n",
              "example": "Calle 144 No. 12-09"
            },
            "phone_number": {
              "type": "string",
              "nullable": true,
              "description": "The sender's phone number.\n",
              "example": "576606522566"
            },
            "email": {
              "type": "string",
              "nullable": true,
              "description": "The sender's email address.\n",
              "example": "acme_colombia@gmail.com"
            }
          }
        },
        "InvoicesReceiverDetailsDian": {
          "type": "object",
          "nullable": true,
          "description": "Details regarding the receiver.\n",
          "properties": {
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "tax_payer_type": {
              "type": "string",
              "nullable": true,
              "description": "Indicates if the receiver is a business or an individual. Can be either:\n  \n  - `Persona Jurídica`\n  - `Persona Natural`\n",
              "example": "Persona Natural"
            },
            "regimen": {
              "type": "string",
              "nullable": true,
              "description": "The receiver's regimen type.\n\nFor detailed information regarding DIAN's regimens, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).\n",
              "example": "Régimen Simple de Tributación - SIMPLE"
            },
            "tax_scheme": {
              "type": "string",
              "nullable": true,
              "description": "The receiver's fiscal responsibilities.\n\nFor detailed information regarding DIAN's tax schemes, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).\n",
              "example": "01-IVA"
            },
            "country": {
              "type": "string",
              "nullable": true,
              "description": "The country where the receiver pays their taxes.\n",
              "example": "Colombia"
            },
            "address": {
              "type": "string",
              "nullable": true,
              "description": "The receiver's address.\n",
              "example": "Calle 144 No. 12-09"
            },
            "phone_number": {
              "type": "string",
              "nullable": true,
              "description": "The receiver's phone number.\n",
              "example": "576606522566|"
            },
            "email": {
              "type": "string",
              "nullable": true,
              "description": "The receiver's email address.\n",
              "example": "acme_colombia@gmail.com"
            }
          }
        },
        "EnumInvoiceDianPaymentMethod": {
          "type": "string",
          "nullable": true,
          "enum": [
            "Contado",
            "Crédito",
            null
          ],
          "description": "The payment method used for this invoice, as defined by the legal entity of the country.\n\nFor DIAN Colombia, we return one of the following values:\n\n  - `Contado`\n  - `Crédito`\n  - `null`\n",
          "example": "Contado"
        },
        "InvoiceDetailDian": {
          "type": "object",
          "required": [
            "description",
            "product_identification",
            "quantity",
            "unit_amount",
            "unit_description",
            "unit_code",
            "pre_tax_amount",
            "tax_percentage",
            "tax_amount",
            "total_amount"
          ],
          "properties": {
            "description": {
              "type": "string",
              "nullable": true,
              "description": "The description of the invoice item (an invoice can have one or more items).",
              "example": "December 2019 accounting fees"
            },
            "product_identification": {
              "type": "string",
              "nullable": true,
              "description": "The identification code of the product or the service, as defined by the legal entity in the country.\n",
              "example": "AE001"
            },
            "quantity": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The quantity of this invoice item.",
              "example": 1
            },
            "unit_code": {
              "type": "string",
              "nullable": true,
              "description": "The unit of measure, as defined by the legal entity in the country.\n",
              "example": "EA"
            },
            "unit_description": {
              "type": "string",
              "nullable": true,
              "description": "The description of the item, as defined by the legal entity in the country.\n",
              "example": "cada"
            },
            "unit_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The price of one singular item.",
              "example": 5900
            },
            "tax_type": {
              "type": "string",
              "nullable": true,
              "description": "The item's tax type.",
              "example": "IVA"
            },
            "pre_tax_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total price for this item before tax is applied (`quantity` x `unit_amount`).",
              "example": 5900
            },
            "tax_percentage": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The tax percentage to apply.",
              "example": 16
            },
            "tax_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount of tax for this invoice item (`pre_tax_amount` x `tax_percentage`).",
              "example": 64
            },
            "total_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total price for this invoice item (`pre_tax_amount` + `tax_amount`).",
              "example": 464
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            }
          }
        },
        "InvoicesPaymentsRelatedDocumentsDian": {
          "type": "object",
          "required": [
            "invoice_identification",
            "currency",
            "payment_method",
            "previous_balance",
            "amount_paid",
            "outstanding_balance"
          ],
          "description": "List of all the related deferred invoices affected by the payment.",
          "properties": {
            "invoice_identification": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "payment_method": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "partiality_number": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "previous_balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "amount_paid": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "outstanding_balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            }
          }
        },
        "InvoicesPaymentsDian": {
          "type": "object",
          "required": [
            "date",
            "payment_type",
            "currency",
            "exchange_rate",
            "amount",
            "operation_number",
            "beneficiary_account_number",
            "payer_rfc",
            "payer_account_number",
            "payer_bank_name",
            "related_documents"
          ],
          "properties": {
            "date": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "payment_type": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "exchange_rate": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "operation_number": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "beneficiary_rfc": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "beneficiary_account_number": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "payer_rfc": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "payer_account_number": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "payer_bank_name": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "related_documents": {
              "type": "array",
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "items": {
                "$ref": "#/components/schemas/InvoicesPaymentsRelatedDocumentsDian"
              }
            }
          }
        },
        "InvoicesPayrollDian": {
          "type": "object",
          "nullable": true,
          "required": [
            "version",
            "type",
            "payment_date",
            "date_from",
            "date_to",
            "days",
            "amount"
          ],
          "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
          "properties": {
            "days": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "type": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "version": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "date_from": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "date_to": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
              "example": null
            },
            "payment_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            }
          }
        },
        "InvoiceWarningsDian": {
          "type": "object",
          "required": [
            "code",
            "message"
          ],
          "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
          "nullable": true,
          "properties": {
            "code": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "message": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            }
          }
        },
        "InvoiceDian": {
          "type": "object",
          "title": "🇨🇴 DIAN Colombia",
          "required": [
            "type",
            "invoice_identification",
            "invoice_date",
            "invoice_type",
            "subtotal_amount",
            "tax_amount",
            "discount_amount",
            "total_amount",
            "currency",
            "exchange_rate",
            "status",
            "sender_name",
            "sender_id",
            "receiver_name",
            "receiver_id",
            "certification_authority",
            "certification_date",
            "cancelation_status",
            "cancelation_update_date",
            "payment_type",
            "payment_type_description",
            "invoice_details",
            "payroll",
            "payments",
            "collected_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier for the current invoice.",
              "example": "c749315b-eec2-435d-a458-06912878564f"
            },
            "link": {
              "type": "string",
              "description": "The `link.id` the invoice belongs to.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "invoice_identification": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal institution's unique ID for the invoice.",
              "example": "89868fda605e6250a7ecb910dc57ed6f8147c6dc39ec90805bb655a0646e6cc3f991f93463f62e03d236b9cc9c293edc"
            },
            "invoice_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date of the invoice.",
              "example": "2019-12-01"
            },
            "status": {
              "type": "string",
              "nullable": true,
              "description": "The status of the invoice. Can be one of:\n\n  - *Vigente* (valid)\n  - *Cancelado* (cancelled)\n  - *Aprobado* (approved)",
              "example": "Aprobado"
            },
            "expiration_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "Indicates when the invoice is set to expire.\n\nFor example: If the invoice is paid in installments, this field indicates the date when the installment is to be paid.\n",
              "example": "2022-08-19"
            },
            "invoice_type": {
              "$ref": "#/components/schemas/EnumInvoiceDianInvoiceType"
            },
            "type": {
              "$ref": "#/components/schemas/EnumInvoiceType"
            },
            "sender_id": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the invoice sender.",
              "example": "YHS922233648"
            },
            "sender_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the invoice sender.",
              "example": "ACME Corp Colombia"
            },
            "sender_details": {
              "$ref": "#/components/schemas/InvoiceSenderDetailsDian"
            },
            "sender_tax_fraud_status": {
              "type": "string",
              "nullable": true,
              "description": "Indicates whether or not the sender is on a tax fraud list for having submitted incorrect data, having outstanding payments, or having conducted business that is in violation of the fiscal institution's regulations.\n**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
              "example": null
            },
            "receiver_id": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the invoice receiver.",
              "example": "BBB222222BB22"
            },
            "receiver_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the invoice receiver.",
              "example": "Roadrunner Traps Colombia"
            },
            "receiver_details": {
              "$ref": "#/components/schemas/InvoicesReceiverDetailsDian"
            },
            "receiver_tax_fraud_status": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
              "example": null
            },
            "cancelation_status": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
              "example": null
            },
            "cancelation_update_date": {
              "type": "string",
              "format": "date",
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null,
              "nullable": true
            },
            "certification_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "certification_authority": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "payment_type": {
              "type": "string",
              "nullable": true,
              "description": "The payment type code used for this invoice, as defined by the country legal entity.\n\nFor detailed information regarding DIAN's payment types, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).\n",
              "example": "47"
            },
            "payment_type_description": {
              "nullable": true,
              "type": "string",
              "description": "The description of the payment method used for this invoice.\n",
              "example": null
            },
            "payment_method": {
              "$ref": "#/components/schemas/EnumInvoiceDianPaymentMethod"
            },
            "payment_method_description": {
              "deprecated": true,
              "nullable": true,
              "type": "string",
              "description": "The description of the payment method used for this invoice.\n",
              "example": null
            },
            "usage": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "version": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "place_of_issue": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "invoice_details": {
              "type": "array",
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "items": {
                "$ref": "#/components/schemas/InvoiceDetailDian"
              }
            },
            "currency": {
              "type": "string",
              "nullable": true,
              "description": "The currency of the invoice. For example:\n \n - 🇧🇷 BRL (Brazilian Real)\n - 🇨🇴 COP (Colombian Peso)\n - 🇲🇽 MXN (Mexican Peso)\n - 🇺🇸 USD (United States Dollar)\n",
              "example": "COP"
            },
            "subtotal_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The pretax amount of this invoice (sum of each item's `pre_tax_amount`).\n",
              "example": 400
            },
            "exchange_rate": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The exchange rate used in this invoice for the currency.\n",
              "example": 0.053
            },
            "tax_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount of tax for this invoice (sum of each item's `tax_amount`).\n",
              "example": 64
            },
            "discount_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total amount discounted in this invoice.\n",
              "example": 10
            },
            "total_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total amount of the invoice (`subtotal_amount` + `tax_amount` - `discount_amount`)",
              "example": 454
            },
            "payments": {
              "type": "array",
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "items": {
                "$ref": "#/components/schemas/InvoicesPaymentsDian"
              }
            },
            "payroll": {
              "$ref": "#/components/schemas/InvoicesPayrollDian"
            },
            "folio": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "xml": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "warnings": {
              "$ref": "#/components/schemas/InvoiceWarningsDian"
            }
          }
        },
        "InvoicesResponsePaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of invoice objects.",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InvoiceWithIdSat"
                  },
                  {
                    "$ref": "#/components/schemas/InvoiceDian"
                  }
                ]
              }
            }
          }
        },
        "InvoicesRequest": {
          "type": "object",
          "required": [
            "date_from",
            "date_to",
            "link",
            "type"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The fiscal `link.id` to use.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date from which you want to start getting invoices for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.\n",
              "example": "2020-01-01"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date you want to stop getting invoices for, in `YYYY-MM-DD` format.\n\n⚠️ The number of days between `date_from` and `date_to` cannot be over 365.\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).\n",
              "example": "2020-02-01"
            },
            "type": {
              "$ref": "#/components/schemas/EnumInvoiceType"
            },
            "attach_xml": {
              "type": "boolean",
              "default": false,
              "description": "When set to `true`, you will receive the XML invoice in the response."
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response.",
              "example": true
            }
          }
        },
        "TaxReturnPersonal": {
          "type": "object",
          "additionalProperties": true,
          "title": "Tax Return Personal",
          "required": [
            "informacion_general",
            "sueldos_salarios",
            "servicios_profesionales",
            "dividendos",
            "deducciones_personales",
            "retenciones",
            "determinacion_impuesto",
            "pdf",
            "receipt_pdf",
            "collected_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo used to reference the current Tax Return.",
              "example": "0d3ffb69-f83b-456e-ad8e-208d0998d71d"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` the statement belongs to",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "informacion_general": {
              "type": "object",
              "nullable": true,
              "description": "General information on the tax return (year, RFC, return type, person/company name, and so on)."
            },
            "sueldos_salarios": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding the income information together combined with withheld taxes."
            },
            "servicios_profesionales": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding the income and tax information from professional services provided."
            },
            "deducciones_personales": {
              "type": "object",
              "nullable": true,
              "description": "List of all personal tax deductions."
            },
            "determinacion_impuesto": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding the final tax return."
            },
            "retenciones": {
              "type": "object",
              "nullable": true,
              "description": "Details on the already withheld taxes."
            },
            "dividendos": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding dividends."
            },
            "datos_informativos": {
              "type": "object",
              "nullable": true,
              "description": "Extra informative data on the tax return."
            },
            "pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "Tax return PDF as a binary.",
              "example": "=PDF-STRING="
            },
            "receipt_pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
              "example": "=PDF-STRING="
            }
          }
        },
        "TaxReturnsPersonalPaginated": {
          "type": "object",
          "title": "Tax Return Personal",
          "additionalProperties": true,
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of Personal Tax Return objects.",
              "items": {
                "$ref": "#/components/schemas/TaxReturnPersonal"
              }
            }
          }
        },
        "TaxReturnPersonalMonthly": {
          "type": "object",
          "additionalProperties": true,
          "title": "Tax Return Personal Monthly",
          "required": [
            "informacion_general",
            "pdf",
            "type",
            "isr",
            "iva",
            "collected_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo used to reference the current Tax Return.",
              "example": "0d3ffb69-f83b-456e-ad8e-208d0998d71d"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "informacion_general": {
              "type": "object",
              "nullable": true,
              "description": "General information regarding the tax return (year, RFC, return type, person/company name, and so on)."
            },
            "isr": {
              "type": "object",
              "nullable": true,
              "description": "Information used to calculate the monthly provisional payments of the income tax."
            },
            "iva": {
              "type": "object",
              "nullable": true,
              "description": "Information used to calculate the monthly provisional payments of the VAT tax."
            },
            "pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "Tax return PDF as a binary.",
              "example": "=PDF-STRING="
            },
            "receipt_pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
              "example": "=PDF-STRING="
            },
            "type": {
              "type": "string",
              "description": "The type of tax return. Can be either monthly or annual.",
              "example": "monthly"
            }
          }
        },
        "TaxReturnsPersonalMonthlyPaginated": {
          "type": "object",
          "title": "Tax Return Personal Monthly",
          "additionalProperties": true,
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of Monthly Personal Tax Return objects.",
              "items": {
                "$ref": "#/components/schemas/TaxReturnPersonalMonthly"
              }
            }
          }
        },
        "TaxReturnBusiness": {
          "type": "object",
          "additionalProperties": true,
          "title": "Tax Return Business",
          "required": [
            "informacion_general",
            "estado_resultados",
            "pdf",
            "receipt_pdf",
            "collected_at",
            "estado_posicion_financiera_balance",
            "conciliacion_entre_resultado_contable_fiscal",
            "cifras_cierre_ejercicio",
            "determinacion_del_impuesto_sobre_la_renta",
            "detalle_pago_r1_isr_personas_morales"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo used to reference the current Tax Return.",
              "example": "0d3ffb69-f83b-456e-ad8e-208d0998d71d"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "informacion_general": {
              "type": "object",
              "nullable": true,
              "description": "General information regarding the tax return (year, RFC, return type, person/company name, and so on)."
            },
            "datos_adicionales": {
              "type": "object",
              "nullable": true,
              "description": "Additional data regarding the tax return."
            },
            "estado_resultados": {
              "type": "object",
              "nullable": true,
              "description": "Detailed information about the legal entity's yearly profit and loss."
            },
            "estado_posicion_financiera_balance": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding balance sheet of the legal entity."
            },
            "conciliacion_entre_resultado_contable_fiscal": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding the accounting reconciliation."
            },
            "deducciones_autorizadas": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding the legal entity's deductions."
            },
            "cifras_cierre_ejercicio": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding key numbers at the end of the fiscal exercise."
            },
            "determinacion_del_impuesto_sobre_la_renta": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding the final tax return."
            },
            "dividendos_o_utilidades_distribuidos": {
              "type": "object",
              "nullable": true,
              "description": "Details regarding distributed dividends."
            },
            "detalle_pago_r1_isr_personas_morales": {
              "type": "object",
              "nullable": true,
              "description": "Details of the tax payment."
            },
            "pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "Tax return PDF as a binary.",
              "example": "=PDF-STRING="
            },
            "receipt_pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
              "example": "=PDF-STRING="
            }
          }
        },
        "TaxReturnsBusinessPaginated": {
          "type": "object",
          "title": "Tax Return Personal Business",
          "additionalProperties": true,
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of Business Tax Return objects.",
              "items": {
                "$ref": "#/components/schemas/TaxReturnBusiness"
              }
            }
          }
        },
        "TaxReturnBusinessMonthly": {
          "type": "object",
          "additionalProperties": true,
          "title": "Tax Return Business Monthly",
          "required": [
            "informacion_general",
            "determinacion_isr",
            "pdf",
            "type",
            "collected_at",
            "detalle_pago_isr",
            "determinacion_iva",
            "detalle_pago_iva"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo used to reference the current Tax Return.",
              "example": "0d3ffb69-f83b-456e-ad8e-208d0998d71d"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2019-09-27T13:01:41.941Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "informacion_general": {
              "type": "object",
              "nullable": true,
              "description": "General information regarding the tax return (year, RFC, return type, person/company name, and so on)."
            },
            "determinacion_isr": {
              "type": "object",
              "nullable": true,
              "description": "Information used to calculate the provisional income tax for the period."
            },
            "detalle_pago_isr": {
              "type": "object",
              "nullable": true,
              "description": "Information on the monthly provisional payments for the income tax."
            },
            "determinacion_iva": {
              "type": "object",
              "nullable": true,
              "description": "Information used to calculate the provisional VAT tax for the period."
            },
            "detalle_pago_iva": {
              "type": "object",
              "nullable": true,
              "description": "Information on the monthly provisional payments for the VAT tax."
            },
            "pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "Tax return PDF as a binary.",
              "example": "=PDF-STRING="
            },
            "receipt_pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "The acknowledgement receipt from the fiscal institution confirming that they received the tax return.",
              "example": "=PDF-STRING="
            },
            "type": {
              "type": "string",
              "nullable": true,
              "description": "The type of tax return. Can be either monthly or annual.",
              "example": "monthly"
            }
          }
        },
        "TaxReturnsBusinessMonthlyPaginated": {
          "type": "object",
          "title": "Tax Return Personal Business Monthly",
          "additionalProperties": true,
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of Monthly Business Tax Return objects.",
              "items": {
                "$ref": "#/components/schemas/TaxReturnBusinessMonthly"
              }
            }
          }
        },
        "TaxReturnsMonthlyRequest": {
          "type": "object",
          "title": "Monthly Tax Returns",
          "description": "Request body for monthly tax returns",
          "required": [
            "link",
            "type",
            "date_from",
            "date_to"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The fiscal `link.id` you want specific tax return information for.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "attach_pdf": {
              "type": "boolean",
              "default": false,
              "description": "When this is set to `true`, you will receive the PDF as a binary string in the response.",
              "example": false
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response.",
              "example": true
            },
            "type": {
              "type": "string",
              "default": "monthly",
              "description": "The type of tax return to return. For monthly tax returns, this field must be set to `monthly`.\n"
            },
            "date_from": {
              "type": "string",
              "description": "The starting date you want to get tax returns for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.",
              "example": "2018-01-01"
            },
            "date_to": {
              "type": "string",
              "description": "The date you want to stop getting tax returns for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
              "example": "2019-01-01"
            }
          }
        },
        "TaxReturnsYearlyRequest": {
          "type": "object",
          "title": "Yearly Tax Returns",
          "description": "Request body for yearly tax returns",
          "required": [
            "link",
            "type",
            "year_to",
            "year_from"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The fiscal `link.id` you want specific tax return information for.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "attach_pdf": {
              "type": "boolean",
              "default": false,
              "description": "When this is set to `true`, you will receive the PDF as a binary string in the response.",
              "example": false
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response.",
              "example": true
            },
            "type": {
              "type": "string",
              "default": "yearly",
              "description": "The type of tax return to return. For yearly tax returns this must be set to `yearly`.\n\nBy default, Belvo returns the yearly (annual) tax returns.\n"
            },
            "year_from": {
              "type": "string",
              "description": "The starting year you want to get tax returns for, in `YYYY` format.\n",
              "example": "2018"
            },
            "year_to": {
              "type": "string",
              "description": "The year you want to stop getting tax returns for, in `YYYY` format.\n",
              "example": "2019"
            }
          }
        },
        "TaxStatusTaxPayerInformationSat": {
          "type": "object",
          "required": [
            "rfc",
            "start_operations_date",
            "status_padron",
            "last_status_change_date"
          ],
          "nullable": true,
          "description": "Details regarding the taxpayer.",
          "properties": {
            "rfc": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's identification number (For Mexico, this is the RFC).\n",
              "example": "BEMP12345G58"
            },
            "curp": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's *Clave Única de Registro de Población* (CURP) number.\n",
              "example": null
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's first name.",
              "example": "JOHN"
            },
            "first_last_name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's first last name.",
              "example": "DOE"
            },
            "second_last_name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's second last name.",
              "example": "SCHMOE"
            },
            "start_operations_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "Date when the tax payer commenced taxable commercial activities.\n",
              "example": null
            },
            "status_padron": {
              "type": "string",
              "nullable": true,
              "description": "Status of the taxpayer in the Federal Register of Taxpayers (RFC). Can be `ACTIVO` or `INACTIVO`.",
              "example": null
            },
            "last_status_change_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "Date when `status_padron` was most recently updated.\n",
              "example": null
            },
            "commercial_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the business designated for consumers and the general public.\n\n**Note**: Only applicable for businesses.\n",
              "example": "Jar Jar Transport"
            },
            "social_name": {
              "type": "string",
              "nullable": true,
              "description": "The unique and exclusive name within the national territory that companies receive for legal or administrative purposes.\n**Note**: Only applicable for businesses.",
              "example": "John Doe SA DE CV"
            },
            "email": {
              "type": "string",
              "nullable": true,
              "description": "Contact email address for the tax payer.",
              "example": "john_doe@gmail.com"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "Contact phone number for the tax payer.",
              "example": "1234567890"
            }
          }
        },
        "TaxStatusAddressBetweenStreetSat": {
          "type": "object",
          "properties": {
            "street_one": {
              "type": "string",
              "nullable": true,
              "description": "The first street that `street` is located between.",
              "example": "CALLE PRINCIPE"
            },
            "street_two": {
              "type": "string",
              "nullable": true,
              "description": "The second street that `street` is located between.",
              "example": "CALLE NUEVA ROMA"
            }
          }
        },
        "TaxStatusAddressSat": {
          "type": "object",
          "required": [
            "postal_code"
          ],
          "nullable": true,
          "description": "The tax payer's address details.",
          "properties": {
            "postal_code": {
              "type": "string",
              "nullable": true,
              "description": "The postcode of the address.\n",
              "example": "21255"
            },
            "street_type": {
              "type": "string",
              "nullable": true,
              "description": "The `street` type.",
              "example": "CALLE"
            },
            "street": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers street.",
              "example": "LA MALINCHE"
            },
            "exterior_number": {
              "type": "string",
              "nullable": true,
              "description": "The street number.",
              "example": "432"
            },
            "interior_number": {
              "type": "string",
              "nullable": true,
              "description": "Additional address information.",
              "example": "PLANTA BAJA"
            },
            "suburb": {
              "type": "string",
              "nullable": true,
              "description": "The suburb of the tax payer.\n",
              "example": "BUENAVENTURA"
            },
            "locality": {
              "type": "string",
              "nullable": true,
              "description": "The locality of the address.\n",
              "example": "none"
            },
            "municipality": {
              "type": "string",
              "nullable": true,
              "description": "The municipality of the address.",
              "example": "CDMX DC"
            },
            "state": {
              "type": "string",
              "nullable": true,
              "description": "The state that the address is in.",
              "example": "Federal"
            },
            "between_street": {
              "type": "array",
              "description": "Additional information about where the `street` is located.\n",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/TaxStatusAddressBetweenStreetSat"
              }
            }
          }
        },
        "TaxStatusEconomicActivitySat": {
          "type": "object",
          "properties": {
            "economic_activity": {
              "type": "string",
              "nullable": true,
              "description": "The description of the economic activity.",
              "example": "Asalariado"
            },
            "initial_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The start date of the economic activity.",
              "example": "2020-12-06"
            },
            "end_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The end date of the economic activity.\n",
              "example": null
            },
            "order": {
              "type": "string",
              "nullable": true,
              "description": "The order of the economic activity.",
              "example": "2"
            },
            "percentage": {
              "type": "string",
              "nullable": true,
              "description": "The percentage of the economic activity.\n",
              "example": "1"
            }
          }
        },
        "TaxStatusRegimensSat": {
          "type": "object",
          "required": [
            "regimen",
            "initial_date",
            "end_date"
          ],
          "properties": {
            "end_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The end date of the regimen.\n",
              "example": null
            },
            "initial_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The start date of the regimen.\n",
              "example": "2020-12-06"
            },
            "regimen": {
              "type": "string",
              "nullable": true,
              "description": "The description of the regimen.",
              "example": "Régimen de Ingresos por Dividendos (socios y accionistas)"
            }
          }
        },
        "TaxStatusObligationsSat": {
          "type": "object",
          "description": "Details regarding a business's obligations.\n\nℹ️ For non-business accounts, this field will return empty.\n",
          "properties": {
            "obligation": {
              "type": "string",
              "nullable": true,
              "description": "The description of the obligation.\n",
              "example": "Declaración informativa de IVA con la anual de ISR"
            },
            "expiration": {
              "type": "string",
              "nullable": true,
              "description": "The deadline to fulfill the obligation, as imposed by the tax authority.\n",
              "example": "Conjuntamente con la declaración anual del ejercicio."
            },
            "initial_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date when obligation started.\n",
              "example": "2020-12-06"
            },
            "end_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date when obligation ended.\n",
              "example": null
            }
          }
        },
        "TaxStatusSat": {
          "type": "object",
          "title": "SAT 🇲🇽 Mexico",
          "required": [
            "id",
            "link",
            "collected_at",
            "created_at",
            "place_and_date_of_issuance",
            "official_name",
            "id_cif",
            "tax_payer_information",
            "address",
            "economic_activity",
            "regimes",
            "obligations",
            "digital_stamp",
            "digital_stamp_chain",
            "pdf"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo used to reference the current Tax Status.",
              "example": "21e9e25b-10a8-48a5-9e6a-4072b364b53f"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that the tax status is associated with.",
              "example": "c2280c05-cbeb-4a29-ae53-8f837a77995b"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "place_and_date_of_issuance": {
              "type": "string",
              "nullable": true,
              "description": "The place and date of that the tax status was issued.",
              "example": "TLALPAN , CIUDAD DE MEXICO A 19 DE MARZO DE 2020"
            },
            "official_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the person or business.",
              "example": "John Doe"
            },
            "id_cif": {
              "type": "string",
              "nullable": true,
              "description": "The taxpayer's *Cédula de Identificación Fiscal* (CIF) ID.\n",
              "example": "12345678901"
            },
            "tax_payer_information": {
              "$ref": "#/components/schemas/TaxStatusTaxPayerInformationSat"
            },
            "address": {
              "$ref": "#/components/schemas/TaxStatusAddressSat"
            },
            "economic_activity": {
              "type": "array",
              "nullable": true,
              "description": "A list of economic activity objects.\n",
              "items": {
                "$ref": "#/components/schemas/TaxStatusEconomicActivitySat"
              }
            },
            "regimes": {
              "type": "array",
              "nullable": true,
              "description": "A list of regimen objects.\n",
              "items": {
                "$ref": "#/components/schemas/TaxStatusRegimensSat"
              }
            },
            "obligations": {
              "type": "array",
              "nullable": true,
              "description": "Details regarding a business's obligations.\n\nℹ️ For non-business accounts, this field will return empty.\n",
              "items": {
                "$ref": "#/components/schemas/TaxStatusObligationsSat"
              }
            },
            "digital_stamp": {
              "type": "string",
              "nullable": true,
              "description": "The validation certificate of the document.",
              "example": "||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||"
            },
            "digital_stamp_chain": {
              "type": "string",
              "nullable": true,
              "description": "A data chain containing the basic structure of a fiscal digital check. For Mexico, this is the *Comprobante Fiscal Digital por Internet* (CFDI).\n",
              "example": "EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow="
            },
            "pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "Tax status PDF as a binary string.",
              "example": "=PDF-STRING="
            }
          }
        },
        "TaxStatusTaxPayerInformationDian": {
          "type": "object",
          "required": [
            "rfc",
            "start_operations_date",
            "status_padron",
            "last_status_change_date"
          ],
          "nullable": true,
          "description": "Details regarding the taxpayer.",
          "properties": {
            "rfc": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's identification number (NIT).\n",
              "example": "BEMP12345G58"
            },
            "curp": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's first name.",
              "example": "JOHN"
            },
            "first_last_name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's first last name.",
              "example": "DOE"
            },
            "second_last_name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers's second last name.",
              "example": "SCHMOE"
            },
            "start_operations_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "status_padron": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.",
              "example": null
            },
            "last_status_change_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "commercial_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the business designated for consumers and the general public.\n\n**Note**: Only applicable for businesses.\n",
              "example": "Jar Jar Transport"
            },
            "social_name": {
              "type": "string",
              "nullable": true,
              "description": "The unique and exclusive name within the national territory that companies receive for legal or administrative purposes.\n**Note**: Only applicable for businesses.",
              "example": "John Doe SA DE CV"
            },
            "email": {
              "type": "string",
              "nullable": true,
              "description": "Contact email address for the tax payer.",
              "example": "john_doe@gmail.com"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "Contact phone number for the tax payer.",
              "example": "1234567890"
            }
          }
        },
        "TaxStatusAddressBetweenStreetDian": {
          "type": "object",
          "properties": {
            "street_one": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "street_two": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            }
          }
        },
        "TaxStatusAddressDian": {
          "type": "object",
          "required": [
            "postal_code"
          ],
          "nullable": true,
          "description": "The tax payer's address details.",
          "properties": {
            "postal_code": {
              "type": "string",
              "nullable": true,
              "description": "The postcode of the address.\n",
              "example": "332-55"
            },
            "street_type": {
              "type": "string",
              "nullable": true,
              "description": "The `street` type.",
              "example": "CALLE"
            },
            "street": {
              "type": "string",
              "nullable": true,
              "description": "The tax payers street.",
              "example": "LA MALINCHE"
            },
            "exterior_number": {
              "type": "string",
              "nullable": true,
              "description": "The street number.",
              "example": "432"
            },
            "interior_number": {
              "type": "string",
              "nullable": true,
              "description": "Additional address information.",
              "example": "AP 306"
            },
            "suburb": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "locality": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "municipality": {
              "type": "string",
              "nullable": true,
              "description": "The municipality of the address.",
              "example": "Bogota DC"
            },
            "state": {
              "type": "string",
              "nullable": true,
              "description": "The state that the address is in.",
              "example": "Bogota DC"
            },
            "between_street": {
              "type": "array",
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/TaxStatusAddressBetweenStreetDian"
              }
            }
          }
        },
        "TaxStatusEconomicActivityDian": {
          "type": "object",
          "properties": {
            "economic_activity": {
              "type": "string",
              "nullable": true,
              "description": "The economic activity code, according to the fiscal institution.\n\nFor detailed information regarding DIAN's economic activities, please see their [official PDF](https://www.dian.gov.co/impuestos/factura-electronica/Documents/Anexo_tecnico_factura_electronica_vr_1_7_2020.pdf).\n",
              "example": "112"
            },
            "initial_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The start date of the economic activity.",
              "example": "2020-12-06"
            },
            "end_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "order": {
              "type": "string",
              "nullable": true,
              "description": "The order of the economic activity.",
              "example": "1"
            },
            "percentage": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            }
          }
        },
        "TaxStatusRegimensDian": {
          "type": "object",
          "required": [
            "regimen",
            "initial_date",
            "end_date"
          ],
          "properties": {
            "end_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "initial_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "regimen": {
              "type": "string",
              "nullable": true,
              "description": "The description of the regimen.",
              "example": "49-No responsable de IVA"
            }
          }
        },
        "TaxStatusObligationsDian": {
          "type": "object",
          "description": "Details regarding a business's obligations.\n\nℹ️ For non-business accounts, this field will return empty.\n",
          "properties": {
            "obligation": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "expiration": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "initial_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "end_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            }
          }
        },
        "TaxStatusDian": {
          "type": "object",
          "title": "DIAN 🇨🇴 Colombia",
          "required": [
            "id",
            "link",
            "collected_at",
            "created_at",
            "place_and_date_of_issuance",
            "official_name",
            "id_cif",
            "tax_payer_information",
            "address",
            "economic_activity",
            "regimes",
            "obligations",
            "digital_stamp",
            "digital_stamp_chain",
            "pdf"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo used to reference the current Tax Status.",
              "example": "21e9e25b-10a8-48a5-9e6a-4072b364b53f"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that the tax status is associated with.",
              "example": "c2280c05-cbeb-4a29-ae53-8f837a77995b"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "place_and_date_of_issuance": {
              "type": "string",
              "nullable": true,
              "description": "The date when the tax status was issued. For example, `2020-08-05/18:55:16`.",
              "example": "2020-08-05/18:55:16"
            },
            "official_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the business.\n\nNote: For individuals in Colombia, this field will return `null`.\n",
              "example": "Jar Jar Transport"
            },
            "id_cif": {
              "type": "string",
              "nullable": true,
              "description": "The taxpayer's *Cédula de ciudadanía* (CC) ID. Only applicable for individuals.\n",
              "example": "12345678901"
            },
            "tax_payer_information": {
              "$ref": "#/components/schemas/TaxStatusTaxPayerInformationDian"
            },
            "address": {
              "$ref": "#/components/schemas/TaxStatusAddressDian"
            },
            "economic_activity": {
              "type": "array",
              "nullable": true,
              "description": "A list of economic activity objects.\n",
              "items": {
                "$ref": "#/components/schemas/TaxStatusEconomicActivityDian"
              }
            },
            "regimes": {
              "type": "array",
              "nullable": true,
              "description": "A list of regimen objects.\n",
              "items": {
                "$ref": "#/components/schemas/TaxStatusRegimensDian"
              }
            },
            "obligations": {
              "type": "array",
              "nullable": true,
              "description": "Details regarding a business's obligations.\n\nℹ️ For non-business accounts, this field will return empty.\n",
              "items": {
                "$ref": "#/components/schemas/TaxStatusObligationsDian"
              }
            },
            "digital_stamp": {
              "type": "string",
              "nullable": true,
              "description": "The validation certificate of the document.",
              "example": "\"44701362691\""
            },
            "digital_stamp_chain": {
              "type": "string",
              "nullable": true,
              "description": "**Note**: This field is not applicable for DIAN Colombia and will return `null`.\n",
              "example": null
            },
            "pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "Tax status PDF as a binary string.",
              "example": "=PDF-STRING="
            }
          }
        },
        "TaxStatusPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of tax status objects.",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaxStatusSat"
                  },
                  {
                    "$ref": "#/components/schemas/TaxStatusDian"
                  }
                ]
              }
            }
          }
        },
        "TaxStatusRequest": {
          "type": "object",
          "required": [
            "link"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The fiscal `link.id` to use.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "attach_pdf": {
              "type": "boolean",
              "default": false,
              "description": "When set to `true`, you will receive the PDF in binary format in the response."
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response.",
              "example": true
            }
          }
        },
        "EnumTaxComplianceStatusOutcome": {
          "type": "string",
          "nullable": true,
          "enum": [
            "POSITIVE",
            "NEGATIVE",
            "NO_OBLIGATIONS"
          ],
          "description": "Indicates whether the taxpayer is complying to all their tax obligations (`POSITIVE`), if they are not (`NEGATIVE`), or have none to comply to (`NO_OBLIGATIONS`).",
          "example": "NEGATIVE"
        },
        "TaxComplianceStatus": {
          "type": "object",
          "required": [
            "pdf",
            "collected_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier created by Belvo used to reference the current Tax Compliance Status.",
              "example": "91106968-1abd-4d64-85c1-4e73d96fb997"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "internal_identification": {
              "type": "string",
              "nullable": true,
              "description": "The institution’s internal identification number for the document.",
              "example": "20NE1234567"
            },
            "pdf": {
              "type": "string",
              "format": "binary",
              "nullable": true,
              "description": "Tax compliance status PDF as a binary.",
              "example": "=PDF-STRING="
            },
            "rfc": {
              "type": "string",
              "nullable": true,
              "description": "The account holder's RFC (Registro Federal de Contribuyentes) number.",
              "example": "KDFC211118IS0"
            },
            "outcome": {
              "$ref": "#/components/schemas/EnumTaxComplianceStatusOutcome"
            }
          }
        },
        "TaxComplianceStatusPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of tax compliance status objects.",
              "items": {
                "$ref": "#/components/schemas/TaxComplianceStatus"
              }
            }
          }
        },
        "TaxComplianceStatusRequest": {
          "type": "object",
          "required": [
            "link"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The fiscal `link.id` to use.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "attach_pdf": {
              "type": "boolean",
              "default": false,
              "description": "When set to `true`, you will receive the PDF in binary format in the response."
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response.",
              "example": true
            }
          }
        },
        "EnumIncomeStreamType": {
          "type": "string",
          "enum": [
            "SALARY",
            "GOVERNMENT",
            "INTEREST",
            "RENT",
            "RETIREMENT",
            "FREELANCE",
            "ALTERNATIVE_INCOME",
            "TRANSFER",
            "DEPOSIT",
            "UNKNOWN"
          ],
          "description": "The type of income used in the calculations.\n\nWe return one of the following enum values:\n\n  - `SALARY`\n  - `GOVERNMENT`\n  - `INTEREST`\n  - `RENT`\n  - `RETIREMENT`\n  - `FREELANCE`\n  - `ALTERNATIVE_INCOME`\n  - `TRANSFER`\n  - `DEPOSIT`\n  - `UNKNOWN`\n",
          "example": "ALTERNATIVE_INCOME"
        },
        "EnumIncomeStreamFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY",
            "FORTNIGHTLY",
            "WEEKLY",
            "IRREGULAR",
            "SINGLE"
          ],
          "description": "How often the income is received.\n\nWe return one of the following enum values:\n\n  - `MONTHLY` - For transactions that occur once per month.\n  - `FORTNIGHTLY` - For transactions that occur once every two weeks.\n  - `WEEKLY` - For transactions that occur once per week.\n  - `IRREGULAR` - For transactions that do not occur on a defined frequency pattern.\n  - `SINGLE` - For transactions that occur only once and do not repeat.\n",
          "example": "MONTHLY"
        },
        "EnumIncomeStreamConfidence": {
          "type": "string",
          "enum": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ],
          "description": "Belvo's level of confidence for future incomes.\n\nWe return one of the following enum values:\n\n  - `HIGH`\n  - `MEDIUM`\n  - `LOW`\n",
          "example": "MEDIUM"
        },
        "IncomeStreamsBody": {
          "type": "object",
          "required": [
            "account_id",
            "income_type",
            "frequency",
            "monthly_average",
            "average_income_amount",
            "last_income_amount",
            "currency",
            "last_income_description",
            "last_income_date",
            "stability",
            "regularity",
            "trend",
            "lookback_periods",
            "full_periods",
            "periods_with_income",
            "number_of_incomes",
            "confidence"
          ],
          "description": "A list of income streams for the account.\n\nFor each income stream, we provide additional insights such as:\n- Frequency, stability, and confidence level of the income transactions.\n- Key metrics about the transaction amounts.\nℹ️ If no income sources are found, we return an empty array.\n",
          "properties": {
            "account_id": {
              "type": "string",
              "description": "Unique ID for the bank account to be verified for income streams.",
              "example": "EBACA-89077589"
            },
            "income_type": {
              "$ref": "#/components/schemas/EnumIncomeStreamType"
            },
            "frequency": {
              "$ref": "#/components/schemas/EnumIncomeStreamFrequency"
            },
            "monthly_average": {
              "type": "number",
              "format": "float",
              "description": "The average amount of income received from the source over `lookback_periods`.\n",
              "example": 2500
            },
            "average_income_amount": {
              "type": "number",
              "format": "float",
              "description": "The average income transaction amount from the source.\n",
              "example": 2500
            },
            "last_income_amount": {
              "type": "number",
              "format": "float",
              "description": "The amount of the most recent income received from the source.\n",
              "example": 2500
            },
            "currency": {
              "type": "string",
              "description": "The three-letter currency code of the income. For example:\n\n  • 🇧🇷 BRL (Brazilian Real)\n  • 🇨🇴 COP (Colombian Peso)\n  • 🇲🇽 MXN (Mexican Peso)",
              "example": "BRL"
            },
            "last_income_description": {
              "format": "string",
              "description": "The description of the most recent income from the steam. ",
              "example": "Salário"
            },
            "last_income_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the most recent income from the stream was received, in `YYYY-MM-DD` format.\n",
              "example": "2022-02-09"
            },
            "stability": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The stability of the income based on its amount, with a range from 0 to 1, where 1 represents perfect stability.\n\n**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.\n",
              "example": 1
            },
            "regularity": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The regularity of the income basde in its frequency, with a range from 0 to 1, where 1 represents perfect regularity.\n\n**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.\n",
              "example": 0.75
            },
            "trend": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The income trend during a period of time calculated between last income and first income received, where:\n  - a negative float means that the income trend is decreasing during the time period.\n  - a positive float means that the income trend is increasing during the time period.\n\n**Note:** For transactions with `frequency`=`SINGLE`, this value returns `null`.\n",
              "example": 0
            },
            "lookback_periods": {
              "type": "integer",
              "format": "int32",
              "description": "Number of period units (based on *rolling months*) used to generate insights and calculations.\n\n**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.\n",
              "example": 4
            },
            "full_periods": {
              "type": "integer",
              "format": "int32",
              "description": "Number of period units (based on *rolling months*) with data to perform calculations.\n\n**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.\n",
              "example": 12
            },
            "periods_with_income": {
              "type": "integer",
              "format": "int32",
              "description": "Number of period units (based on *rolling months*) with at least one income available.\n\n**Note:** A *rolling month* is a period of 30 days. For example, 2023-01-15 to 2023-02-2023.\n",
              "example": 3
            },
            "number_of_incomes": {
              "type": "integer",
              "format": "int32",
              "description": "Number of income transactions over the `lookback_periods`.\n",
              "example": 4
            },
            "confidence": {
              "$ref": "#/components/schemas/EnumIncomeStreamConfidence"
            }
          }
        },
        "EnumIncomeSourceType": {
          "type": "string",
          "enum": [
            "BANK"
          ],
          "description": "The type of source we generate income insights from.\nWe return one of the following enum values:\n\n  - `BANK`\n",
          "example": "BANK"
        },
        "Income": {
          "type": "object",
          "description": "Income insights",
          "required": [
            "id",
            "link",
            "created_at",
            "income_streams",
            "income_source_type",
            "first_transaction_date",
            "last_transaction_date",
            "number_of_income_streams",
            "monthly_average",
            "monthly_average_regular",
            "monthly_average_irregular",
            "monthly_average_low_confidence",
            "monthly_average_medium_confidence",
            "monthly_average_high_confidence",
            "total_income_amount",
            "total_regular_income_amount",
            "total_low_confidence",
            "total_medium_confidence",
            "total_high_confidence"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier for the current income.",
              "example": "076c66e5-90f5-4e01-99c7-50e32f65ae42"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` the account belongs to.",
              "example": "f4621548-2f9e-440e-9ebd-ae8decac8c02"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was created in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "income_streams": {
              "type": "array",
              "description": "An array of enriched income stream objects.",
              "items": {
                "$ref": "#/components/schemas/IncomeStreamsBody"
              }
            },
            "income_source_type": {
              "$ref": "#/components/schemas/EnumIncomeSourceType"
            },
            "first_transaction_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date when the first transaction occurred, in `YYYY-MM-DD` format.\n",
              "example": "2022-06-09"
            },
            "last_transaction_date": {
              "type": "string",
              "format": "date",
              "description": "The date when when the last transaction occurred, in `YYYY-MM-DD` format.\n",
              "example": "2023-02-09"
            },
            "number_of_income_streams": {
              "type": "integer",
              "format": "int32",
              "description": "Number of total income streams analized.\n",
              "example": 12
            },
            "monthly_average": {
              "type": "number",
              "format": "float",
              "description": "Average amount of income received per month across all the accounts for the specific user.\n",
              "example": 1705.46
            },
            "monthly_average_regular": {
              "type": "number",
              "format": "float",
              "description": "Average amount of regular income (with a frequency of `MONTHLY`, `FORTNIGHTLY`, or `WEEKLY`) received per month for the specific user.\n",
              "example": 2500
            },
            "monthly_average_irregular": {
              "type": "number",
              "format": "float",
              "description": "Average amount of irregular income (with a frequency of `SINGLE` or `IRREGULAR`) received per month for the specific user.\n",
              "example": 1308.18
            },
            "monthly_average_low_confidence": {
              "type": "number",
              "format": "float",
              "description": "Average amount of income received per month for the specific user with `LOW` confidence.\n",
              "example": 1308.18
            },
            "monthly_average_medium_confidence": {
              "type": "number",
              "format": "float",
              "description": "Average amount of income received per month for the specific user with `MEDIUM` confidence.\n",
              "example": 2500
            },
            "monthly_average_high_confidence": {
              "type": "number",
              "format": "float",
              "description": "Average amount of income received per month for the specific user with `HIGH` confidence.\n",
              "example": 0
            },
            "total_income_amount": {
              "type": "number",
              "format": "float",
              "description": "Total amount of all income received for the specific user.\n",
              "example": 12616.37
            },
            "total_regular_income_amount": {
              "type": "number",
              "format": "float",
              "description": "Total amount of regular income (with a frequency of `MONTHLY`, `FORTNIGHTLY`, `WEEKLY`) for the specific user.\n",
              "example": 10000
            },
            "total_irregular_income_amount": {
              "type": "number",
              "format": "float",
              "description": "Total amount of irregular income (with a frequency of `SINGLE` or `IRREGULAR`) for the specific user.\n",
              "example": 2616.37
            },
            "total_low_confidence": {
              "type": "number",
              "format": "float",
              "description": "Total amount of income for the specific user with `LOW` confidence.\n",
              "example": 2616.37
            },
            "total_medium_confidence": {
              "type": "number",
              "format": "float",
              "description": "Total amount of income for the specific user with `MEDIUM` confidence.\n",
              "example": 10000
            },
            "total_high_confidence": {
              "type": "number",
              "format": "float",
              "description": "Total amount of income for the specific user with `HIGH` confidence.\n",
              "example": 0
            }
          }
        },
        "IncomesPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of income objects.",
              "items": {
                "$ref": "#/components/schemas/Income"
              }
            }
          }
        },
        "EnumInvoiceAllowedIncomeTypesRequest": {
          "type": "string",
          "enum": [
            "SALARY",
            "GOVERNMENT",
            "INTEREST",
            "RENT",
            "RETIREMENT",
            "FREELANCE",
            "ALTERNATIVE_INCOME",
            "TRANSFER",
            "DEPOSIT",
            "UNKNOWN"
          ],
          "description": "The categories of the incomes you want to get information for. \nYou can send through one or more of the following values:\n  - `SALARY`\n  - `GOVERNMENT`\n  - `INTEREST`\n  - `RENT`\n  - `RETIREMENT`\n  - `FREELANCE`\n  - `ALTERNATIVE_INCOME`\n  - `TRANSFER`\n  - `DEPOSIT`\n  - `UNKNOWN`",
          "example": "SALARY"
        },
        "EnumIncomeMinimumConfidenceLevelRequest": {
          "type": "string",
          "enum": [
            "HIGH",
            "MEDIUM",
            "LOW"
          ],
          "description": "The minimum confidence level of the incomes you want to get information for.\n\nYou can send through one of the following values:\n\n  - `HIGH`\n  - `MEDIUM`\n  - `LOW`\n",
          "example": "HIGH"
        },
        "IncomesRequest": {
          "type": "object",
          "required": [
            "link"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that you want to get information for.",
              "example": "2ccd5e15-194a-4a19-a45a-e7223c7e6717"
            },
            "allowed_income_types": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumInvoiceAllowedIncomeTypesRequest"
              }
            },
            "minimum_confidence_level": {
              "$ref": "#/components/schemas/EnumIncomeMinimumConfidenceLevelRequest"
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date from which you want to start getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_to`.\n\n⚠️ You must have at least 90 days between `date_from` and `date_to`.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.",
              "example": "2020-08-01"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date you want to stop getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_from`.\n\n⚠️ You must have at least 90 days between `date_from` and `date_to`.\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
              "example": "2020-12-30"
            },
            "token": {
              "type": "string",
              "description": "The OTP token generated by the bank.",
              "example": "1234ab"
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            }
          }
        },
        "InvalidPeriodError": {
          "type": "object",
          "title": "Invalid Period",
          "description": "This error occurs when you request incomes for a link within a given date range, however, the period between `date_from` and `date_to` is less than 90 days.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`invalid_period`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#400-invalid_period\" target=\"_blank\">400 invalid_period errors</a>.",
              "example": "invalid_period"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `invalid_period` errors, the description is:\n  \n  - `The number of days between date_from and date_to must be at least 90 days`.",
              "example": "The number of days between date_from and date_to must be at least 90 days"
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "RecurringExpenseSourceTransaction": {
          "type": "object",
          "nullable": true,
          "required": [
            "amount",
            "description",
            "value_date"
          ],
          "description": "An array of minified transaction objects used to evaluate the recurring expense. If no transactions were found, we return an empty array.",
          "properties": {
            "amount": {
              "type": "number",
              "format": "float",
              "description": "The transaction amount.",
              "example": 2145.45
            },
            "description": {
              "type": "string",
              "nullable": true,
              "description": "The description of the transaction provided by the institution. Usually, this is the text that the end user would see in the bank statement. The description can be an empty string.",
              "example": "Netflix.com/march"
            },
            "value_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
              "example": "2019-10-23"
            }
          }
        },
        "EnumRecurringExpenseFrequency": {
          "type": "string",
          "enum": [
            "MONTHLY"
          ],
          "default": "MONTHLY",
          "description": "The frequency at which this recurring expense occurs.\n\n\nℹ️ **Note:** Belvo only identifies `MONTHLY` frequencies.\n",
          "example": "MONTHLY"
        },
        "EnumRecurringExpenseCategory": {
          "type": "string",
          "enum": [
            "Bills & Utilities",
            "Credits & Loans",
            "Insurance",
            "Online Platforms & Leisure",
            "Transport & Travel",
            "Taxes"
          ],
          "description": "The transaction category for the recurring expense. For more information on the available categories, please see our [Transaction categorization documentation](https://developers.belvo.com/docs/banking#categorizing-transactions).\n\n- `Online Platforms & Leisure` (Netflix, Spotify, Gym Memberships)\n- `Bills & Utilities` (electricity, telephone, internet)\n- `Credits & Loans` (credit card cash advances, student loan, watercraft lease)\n- `Insurance` (home, car, and health & life insurance)\n- `Transport & Travel` (Uber trip, airbnb, parking)\n- `Taxes` (service fee, donation, court taxes)\n",
          "example": "Online Platforms & Leisure"
        },
        "EnumRecurringExpensePaymentType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "SUBSCRIPTION",
            "REGULAR"
          ],
          "description": "The type of recurring expense. We return one of the following values:\n\n  - `SUBSCRIPTION`\n  - `REGULAR`\n",
          "example": "SUBSCRIPTION"
        },
        "RecurringExpenses": {
          "type": "object",
          "required": [
            "account",
            "name",
            "transactions",
            "frequency",
            "average_transaction_amount",
            "median_transaction_amount",
            "days_since_last_transaction",
            "category",
            "payment_type"
          ],
          "description": "Recurring expense insights.\n\n\nℹ️ If no recurring expense insights are found, we return an empty array.\n",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier used to reference the current recurring expense.",
              "example": "076c66e5-90f5-4e01-99c7-50e32f65ae42"
            },
            "account": {
              "$ref": "#/components/schemas/Account"
            },
            "name": {
              "type": "string",
              "nullable": true,
              "default": null,
              "description": "The name for the recurring expense.\n\nℹ️ **Note**: This information is taken from the description section of a transaction and then normalized to provide you with an easy-to-read name. As such, sometimes the name will reflect the merchant the payment is made to (for example, Netflix.com), while for other recurring expenses, this could be something like \"Monthly payment to John\".\n",
              "example": "Netflix"
            },
            "transactions": {
              "type": "array",
              "description": "An array of minified transaction objects used to evaluate the recurring expense. If no transactions were found, we return an empty array.",
              "items": {
                "$ref": "#/components/schemas/RecurringExpenseSourceTransaction"
              }
            },
            "frequency": {
              "$ref": "#/components/schemas/EnumRecurringExpenseFrequency"
            },
            "average_transaction_amount": {
              "type": "number",
              "format": "float",
              "description": "The average transaction amount of the recurring expense.",
              "example": 32.9
            },
            "median_transaction_amount": {
              "type": "number",
              "format": "float",
              "description": "The median transaction amount of the recurring expense.",
              "example": 32.9
            },
            "days_since_last_transaction": {
              "type": "integer",
              "format": "int32",
              "description": "Number of days since the last recurring expense occurred.\n\nBased on the frequency, you can infer how many days until the next charge will occur.\n",
              "example": 5
            },
            "category": {
              "$ref": "#/components/schemas/EnumRecurringExpenseCategory"
            },
            "payment_type": {
              "$ref": "#/components/schemas/EnumRecurringExpensePaymentType"
            }
          }
        },
        "RecurringExpensesPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of recurring expense objects.",
              "items": {
                "$ref": "#/components/schemas/RecurringExpenses"
              }
            }
          }
        },
        "RecurringExpensesRequest": {
          "type": "object",
          "required": [
            "link"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that you want to get information for.",
              "example": "2ccd5e15-194a-4a19-a45a-e7223c7e6717"
            },
            "token": {
              "type": "string",
              "description": "The OTP token generated by the bank.",
              "example": "1234ab"
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date from which you want to start getting recurring expenses for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_to`.\n\n\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.",
              "example": "2022-08-01"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date you want to stop getting recurring expenses for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_from`.\n\n\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
              "example": "2022-12-30"
            }
          }
        },
        "EnumInvestmentPortfolioType": {
          "type": "string",
          "enum": [
            "FIXED_INCOME",
            "OTHER",
            "PENSION",
            "VARIABLE_INCOME"
          ],
          "description": "The portfolio type.\n\nWe return one of the following values:\n\n  - `FIXED_INCOME`\n  - `OTHER`\n  - `PENSION`\n  - `VARIABLE_INCOME`\n",
          "example": "FIXED_INCOME"
        },
        "InvestmentsPortfolioInstrumentPublicId": {
          "type": "object",
          "required": [
            "type",
            "value"
          ],
          "description": "The public identifiers for the instrument.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of public identifier for the instrument.",
              "example": "isin"
            },
            "value": {
              "type": "string",
              "description": "The value of the `public_id.type`.",
              "example": "435-3354.3333"
            }
          }
        },
        "EnumInvestmentPortfolioInstrumentType": {
          "type": "string",
          "enum": [
            "BOND",
            "DEPOSIT",
            "ETF",
            "FUND",
            "OTHER",
            "PENSION",
            "STOCK"
          ],
          "description": "The instrument type. For more information about instruments, please see our [Investments DevPortal article](https://developers.belvo.com/docs/investments#instruments).\n\nWe return one of the following values:\n\n  - `BOND`\n  - `DEPOSIT`\n  - `ETF`\n  - `FUND`\n  - `OTHER`\n  - `PENSION`\n  - `STOCK`\n",
          "example": "DEPOSIT"
        },
        "InvestmentsPortfolioInstrumentRedemptionConditions": {
          "type": "object",
          "nullable": true,
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The name of the redemption condition.",
              "example": "due_date"
            },
            "value": {
              "type": "string",
              "description": "The value of `redemption_conditions.type`.",
              "example": "12-02-2023"
            }
          }
        },
        "InvestmentsPortfolioInstrumentFees": {
          "type": "object",
          "nullable": true,
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "The fee type incurred when making the purchase of the instrument.",
              "example": "OPERATION_FEE"
            },
            "value": {
              "type": "number",
              "format": "float",
              "description": "The value of `fees.type`. The currency of the fee is the same as the currency of the instrument.",
              "example": 123.09
            }
          }
        },
        "InvestmentsPortfolioInstrumentInterestRate": {
          "type": "object",
          "nullable": true,
          "required": [
            "type",
            "value",
            "index"
          ],
          "properties": {
            "type": {
              "type": "string",
              "description": "How often the interest rate is calculated on the instrument.",
              "example": "yearly"
            },
            "value": {
              "type": "number",
              "format": "float",
              "description": "The interest rate for the instrument, in percent.\n\n\nℹ️  **Note:** If the `interest_rate.index` is present, this value is a percentage of the index. For example, if `interest_rate.index` = `CDI` and `interest_rate.value` = `90`, then the total interest rate applied is 90% of the CDI.\n",
              "example": 11.31
            },
            "index": {
              "type": "string",
              "nullable": true,
              "description": "If applicable, the index type that the `interest_rates.value` is calculated against.",
              "example": "CDI"
            }
          }
        },
        "InvestmentsPortfolioInstrument": {
          "type": "object",
          "nullable": true,
          "required": [
            "public_id",
            "type",
            "subtype",
            "name",
            "currency",
            "price",
            "quantity",
            "balance_gross",
            "balance_net",
            "average_acquisition_price",
            "profit",
            "open_date",
            "redemption_conditions",
            "fees",
            "interest_rates"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current instrument.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "public_id": {
              "type": "array",
              "nullable": true,
              "description": "The public identifiers for the instrument.",
              "items": {
                "$ref": "#/components/schemas/InvestmentsPortfolioInstrumentPublicId"
              }
            },
            "type": {
              "$ref": "#/components/schemas/EnumInvestmentPortfolioInstrumentType"
            },
            "subtype": {
              "type": "string",
              "nullable": true,
              "description": "The subtype for the instrument, as given by the institution.",
              "example": "CBD"
            },
            "name": {
              "type": "string",
              "description": "The name of the instrument, as given by the institution.",
              "example": "CBD DIGITAL ESPECIAL"
            },
            "currency": {
              "type": "string",
              "description": "The currency of the instrument. For example:\n\n- 🇧🇷 BRL (Brazilian Real)\n- 🇨🇴 COP (Colombian Peso)\n- 🇲🇽 MXN (Mexican Peso)\n- 🇺🇸 USD (US Dollar)\n\n\nPlease note that other currencies other than in the list above may be returned.\n",
              "example": "USD"
            },
            "price": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The current price of one share in the instrument.",
              "example": 10.41
            },
            "quantity": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total amount of shares owned in the instrument.",
              "example": 27.46
            },
            "balance_gross": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total gross value of the instrument (including taxes).",
              "example": 100.09
            },
            "balance_net": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total net value of the instrument (excluding taxes).",
              "example": 99.09
            },
            "average_acquisition_price": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The average price of each share acquired in the instrument.",
              "example": 10.01
            },
            "profit": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The current profit earned in the instrument.",
              "example": 3.08
            },
            "open_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The start date of the instrument. Only applicable for instruments of type `bond` or `savings`.",
              "example": "2021-08-10"
            },
            "redemption_conditions": {
              "type": "array",
              "nullable": true,
              "description": "An array of conditions that apply to the instrument in order to retrieve the final value.\n\nFor example, the due date, the liquidity date, the previdencia type, and so on.\n",
              "items": {
                "$ref": "#/components/schemas/InvestmentsPortfolioInstrumentRedemptionConditions"
              }
            },
            "fees": {
              "type": "array",
              "nullable": true,
              "description": "An array of fees that apply to the instrument.",
              "items": {
                "$ref": "#/components/schemas/InvestmentsPortfolioInstrumentFees"
              }
            },
            "interest_rates": {
              "type": "array",
              "nullable": true,
              "description": "An array of interest rates that apply to the instrument.",
              "items": {
                "$ref": "#/components/schemas/InvestmentsPortfolioInstrumentInterestRate"
              }
            }
          }
        },
        "InvestmentsPortfolio": {
          "type": "object",
          "required": [
            "name",
            "type",
            "balance_gross",
            "balance_net",
            "currency"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current portfolio.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "name": {
              "type": "string",
              "description": "The name of the portfolio, as given in the institution.\n",
              "example": "Investimento"
            },
            "type": {
              "$ref": "#/components/schemas/EnumInvestmentPortfolioType"
            },
            "balance_type": {
              "type": "string",
              "nullable": true,
              "description": "Indicates whether this account is either an `ASSET` or a `LIABILITY`. You can consider the balance of an `ASSET` as being positive, while the balance of a `LIABILITY` as negative.\n",
              "example": "ASSET"
            },
            "balance_gross": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The current gross total value of the entire portfolio and all its underlying instruments, as given by the institution.\n",
              "example": 76000
            },
            "balance_net": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total current value of the entire portfolio and all its underlying instruments, as given by the institution.\n\nℹ️ **Note:** In Brazil, this is usually calculated based on the net value (that is, not including tax).\n",
              "example": 77370.69
            },
            "currency": {
              "type": "string",
              "description": "The currency of the portfolio. For example:\n\n\n- 🇧🇷 BRL (Brazilian Real)\n- 🇨🇴 COP (Colombian Peso)\n- 🇲🇽 MXN (Mexican Peso)\n\n\nPlease note that other currencies other than in the list above may be returned.\n",
              "example": "BRL"
            },
            "instruments": {
              "type": "array",
              "nullable": true,
              "description": "An array of instruments that fall into the investment portfolio.",
              "items": {
                "$ref": "#/components/schemas/InvestmentsPortfolioInstrument"
              }
            }
          }
        },
        "InvestmentsPortfoliosPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of investment portfolio objects.",
              "items": {
                "$ref": "#/components/schemas/InvestmentsPortfolio"
              }
            }
          }
        },
        "ReceivablesTransactionAccount": {
          "type": "object",
          "description": "Basic information about the account associated with the transaction.",
          "required": [
            "id",
            "institution"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the account associated with the transaction.",
              "example": "a7a3104c-5a3c-4536-81e1-14523097f645"
            },
            "institution": {
              "$ref": "#/components/schemas/InstitutionAccount"
            }
          }
        },
        "EnumReceivableTransactionType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "VISA_CREDIT",
            "VISA_DEBIT",
            "MASTERCARD_CREDIT",
            "MASTERCARD_DEBIT",
            "ELO_CREDIT",
            "ELO_DEBIT",
            null
          ],
          "description": "The type of transaction. For example, whether the transaction was a `VISA_DEBIT` or a `MASTERCARD_CREDIT`.\n\nWe return one of the following values:\n\n  - `VISA_CREDIT`\n  - `VISA_DEBIT`\n  - `MASTERCARD_CREDIT`\n  - `MASTERCARD_DEBIT`\n  - `ELO_CREDIT`\n  - `ELO_DEBIT`\n  - `null`\n",
          "example": "MASTERCARD_CREDIT"
        },
        "EnumReceivableTransactionFeeType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "TRANSACTION_FEE"
          ],
          "description": "The type of fee applied to the transaction. We return one of the following values:\n\n  - `TRANSACTION_FEE`",
          "example": "TRANSACTION_FEE"
        },
        "RecevablesTransactionFees": {
          "type": "object",
          "description": "Details regarding the fees applied to the transaction.",
          "required": [
            "type",
            "value"
          ],
          "properties": {
            "type": {
              "$ref": "#/components/schemas/EnumReceivableTransactionFeeType"
            },
            "value": {
              "type": "number",
              "format": "float",
              "description": "The value of `fees.type`.",
              "example": 2.21
            }
          }
        },
        "EnumReceivableTransactionStatus": {
          "type": "string",
          "nullable": true,
          "enum": [
            "APPROVED",
            "CANCELLED",
            "REVERTED",
            "UNCATEGORIZED"
          ],
          "description": "The status of the transaction. Can be either:\n\n  - `APPROVED`\n  - `CANCELLED`\n  - `REVERTED`\n  - `UNCATEGORIZED`",
          "example": "APPROVED"
        },
        "ReceivablesTransactionNumberOfInstallments": {
          "type": "object",
          "description": "Details regarding the number of installments for the transaction, if applicable.",
          "required": [
            "paid",
            "total"
          ],
          "nullable": true,
          "properties": {
            "paid": {
              "type": "integer",
              "nullable": true,
              "format": "int32",
              "description": "The number of payments already made to pay the cost of the transaction.",
              "example": 1
            },
            "total": {
              "type": "integer",
              "nullable": true,
              "format": "int32",
              "description": "The number of payments required to pay the cost of the transaction.",
              "example": 2
            }
          }
        },
        "ReceivablesTransaction": {
          "type": "object",
          "required": [
            "id",
            "account",
            "created_at",
            "collected_at",
            "value_hour",
            "value_date",
            "institution_transaction_id",
            "currency",
            "type",
            "gross_amount",
            "net_amount",
            "fees",
            "status",
            "number_of_installments"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "readOnly": true,
              "description": "Belvo's unique ID for the current receivable transaction.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "account": {
              "$ref": "#/components/schemas/ReceivablesTransactionAccount"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO timestamp of when the data point was last updated in Belvo's database.",
              "example": "2020-04-23T21:30:20.336854+00:00"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "value_hour": {
              "type": "string",
              "description": "The time that the transaction occurred, according to the institution, in `HH:MM` format.",
              "example": "19:47"
            },
            "value_date": {
              "type": "string",
              "format": "date",
              "description": "The date that the transactions occurred, according to the institution, in `YYYY-MM-DD` format.",
              "example": "2022-01-16"
            },
            "institution_transaction_id": {
              "type": "string",
              "description": "Internal identification number that the acquirer uses to identify the transaction.\nℹ️ **Note**: For Brazil, this number is the NSU.",
              "example": "134532345"
            },
            "currency": {
              "type": "string",
              "description": "The currency of the transaction. For example:\n- 🇧🇷 BRL (Brazilian Real)\n- 🇨🇴 COP (Colombian Peso)\n- 🇲🇽 MXN (Mexican Peso)\n\n Please note that currencies other than those listed above may be returned.",
              "example": "BRL"
            },
            "type": {
              "$ref": "#/components/schemas/EnumReceivableTransactionType"
            },
            "gross_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total gross amount of the transaction.",
              "example": 106.7
            },
            "net_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The net amount of the transaction.",
              "example": 104.58
            },
            "fees": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RecevablesTransactionFees"
              }
            },
            "status": {
              "$ref": "#/components/schemas/EnumReceivableTransactionStatus"
            },
            "number_of_installments": {
              "$ref": "#/components/schemas/ReceivablesTransactionNumberOfInstallments"
            }
          }
        },
        "ReceivablesTransactionsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of receivables objects.",
              "items": {
                "$ref": "#/components/schemas/ReceivablesTransaction"
              }
            }
          }
        },
        "ReceivableTransactionRequest": {
          "type": "object",
          "required": [
            "link",
            "date_from",
            "date_to"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that you want to get information for.",
              "example": "2ccd5e15-194a-4a19-a45a-e7223c7e6717"
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date from which you want to start getting transactions for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.",
              "example": "2020-08-05"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date you want to stop getting transactions for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
              "example": "2020-10-05"
            },
            "token": {
              "type": "string",
              "description": "The OTP token generated by the bank.",
              "example": "1234ab"
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            }
          }
        },
        "RiskInsightsTransactionMetrics": {
          "type": "object",
          "nullable": true,
          "required": [
            "num_transactions_1w",
            "num_transactions_1m",
            "num_transactions_3m",
            "num_incoming_transactions_1w",
            "num_incoming_transactions_1m",
            "num_incoming_transactions_3m",
            "num_outgoing_transactions_1w",
            "num_outgoing_transactions_1m",
            "num_outgoing_transactions_3m",
            "sum_incoming_amount_1w",
            "sum_incoming_amount_1m",
            "sum_incoming_amount_3m",
            "sum_outgoing_amount_1w",
            "sum_outgoing_amount_1m",
            "sum_outgoing_amount_3m",
            "max_incoming_amount_1w",
            "max_incoming_amount_1m",
            "max_incoming_amount_3m",
            "max_outgoing_amount_1w",
            "max_outgoing_amount_1m",
            "max_outgoing_amount_3m",
            "mean_incoming_amount_1w",
            "mean_incoming_amount_1m",
            "mean_incoming_amount_3m",
            "mean_outgoing_amount_1w",
            "mean_outgoing_amount_1m",
            "mean_outgoing_amount_3m"
          ],
          "description": "Aggregated metrics calculated band on the user's transactions from checking, savings, credit card, and loan accounts.",
          "properties": {
            "num_transactions_1w": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "The total number of transactions analyzed to determine the risk insights for the last week (incoming and outgoing).\n",
              "example": 39
            },
            "num_transactions_1m": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "The total number of transactions analyzed to determine the risk insights for the last month (incoming and outgoing).\n",
              "example": 39
            },
            "num_transactions_3m": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "The total number of transactions analyzed to determine the risk insights for the last three months (incoming and outgoing).\n",
              "example": 39
            },
            "num_incoming_transactions_1w": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "The total number of inflow transactions for the last week.\n\nℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n\nIf the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n",
              "example": 20
            },
            "num_incoming_transactions_1m": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "The total number of inflow transactions for the last month.\n\nℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n\nIf the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n",
              "example": 20
            },
            "num_incoming_transactions_3m": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "The total number of inflow transactions for the last three months.\n\nℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n\nIf the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n",
              "example": 20
            },
            "num_outgoing_transactions_1w": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "To total number of outflow transactions in the last week.\n\nℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n\nIf the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n",
              "example": 19
            },
            "num_outgoing_transactions_1m": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "To total number of outflow transactions in the last month.\n\nℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n\nIf the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n",
              "example": 19
            },
            "num_outgoing_transactions_3m": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "description": "To total number of outflow transactions in the last three months.\n\nℹ️ **Note**: If there are no transactions between the request date and the last seven or thirty days, the value is `0`.\n\nIf the account has not been open long enough to have the transaction data for a given period, we return `null`. For example, if the account has only been open for five days, we return values for `_1w` and `_1m`, however, the value for `_3m` will be `null`.\n",
              "example": 19
            },
            "sum_incoming_amount_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total sum of all inflow transactions for the last week.\n",
              "example": 10022.01
            },
            "sum_incoming_amount_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total sum of all inflow transactions for the last month.\n",
              "example": 10022.01
            },
            "sum_incoming_amount_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total sum of all inflow transactions for the last three months.\n",
              "example": 10022.01
            },
            "sum_outgoing_amount_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total sum of all outflow transactions for the last week.\n",
              "example": 10237.03
            },
            "sum_outgoing_amount_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total sum of all outflow transactions for the last month.\n",
              "example": 10237.03
            },
            "sum_outgoing_amount_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total sum of all outflow transactions for the last three months.\n",
              "example": 10237.03
            },
            "max_incoming_amount_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The highest value inflow transaction in the last week.\n",
              "example": 3030
            },
            "max_incoming_amount_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The highest value inflow transaction in the last month.\n",
              "example": 3030
            },
            "max_incoming_amount_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The highest value inflow transaction in the last three months.\n",
              "example": 3030
            },
            "max_outgoing_amount_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The highest value outflow transaction in the last week.\n",
              "example": 3027.44
            },
            "max_outgoing_amount_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The highest value outflow transaction in the last month.\n",
              "example": 3027.44
            },
            "max_outgoing_amount_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The highest value outflow transaction in the last three months.\n",
              "example": 3027.44
            },
            "mean_incoming_amount_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The mean incoming value of all transactions in the last week.\n",
              "example": 3030
            },
            "mean_incoming_amount_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The mean incoming value of all transactions in the last month.\n",
              "example": 3030
            },
            "mean_incoming_amount_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The mean incoming value of all transactions in the last three months.\n",
              "example": 3030
            },
            "mean_outgoing_amount_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The mean outgoing value of all transaction in the last week.\n",
              "example": 3027.44
            },
            "mean_outgoing_amount_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The mean outgoing value of all transaction in the last month.\n",
              "example": 3027.44
            },
            "mean_outgoing_amount_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The mean outgoing value of all transaction in the last three months.\n",
              "example": 3027.44
            }
          }
        },
        "RiskInsightsBalanceMetrics": {
          "type": "object",
          "nullable": true,
          "required": [
            "min_balance_1w",
            "min_balance_1m",
            "min_balance_3m",
            "max_balance_1w",
            "max_balance_1m",
            "max_balance_3m",
            "days_balance_below_0_1w",
            "days_balance_below_0_1m",
            "days_balance_below_0_3m",
            "days_balance_below_x_1w",
            "days_balance_below_x_1m",
            "days_balance_below_x_3m",
            "closing_balance",
            "balance_threshold_x"
          ],
          "description": "Balance metrics calculated based on the user's balances from checking and savings accounts.",
          "properties": {
            "min_balance_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The minimum balance in the period (one week).\n",
              "example": 0.51
            },
            "min_balance_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The minimum balance in the period (one month).\n",
              "example": 0.51
            },
            "min_balance_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The minimum balance in the period (three months).\n",
              "example": 0.51
            },
            "max_balance_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The maximum balance in the period (one week).\n",
              "example": 3062.11
            },
            "max_balance_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The maximum balance in the period (one month).\n",
              "example": 3062.11
            },
            "max_balance_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The maximum balance in the period (three months).\n",
              "example": 3062.11
            },
            "closing_balance": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The balance of all the accounts at the `collected_at` time.\n",
              "example": 24.19
            },
            "days_balance_below_0_1w": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of days that the total balance of the account is less than or equal to 0 in the last week.\n",
              "example": 0
            },
            "days_balance_below_0_1m": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of days that the total balance of the account is less than or equal to 0 in the last month.\n",
              "example": 0
            },
            "days_balance_below_0_3m": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of days that the total balance of the account is less than or equal to 0 in the last three months.\n",
              "example": 0
            },
            "days_balance_below_x_1w": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last week.\n",
              "example": 3
            },
            "days_balance_below_x_1m": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last month.\n",
              "example": 3
            },
            "days_balance_below_x_3m": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The number of days that the total balance of the account is less than or equal to the amount specified in `balance_threshold_x` in the last three months.\n",
              "example": 3
            },
            "balance_threshold_x": {
              "type": "number",
              "format": "float",
              "description": "The threshold used to compute `days_balance_below_x_period`. Please note, this is value is country specific (both in terms of the amount and the currency).\n",
              "example": 267
            }
          }
        },
        "RiskInsightsCashflowMetrics": {
          "type": "object",
          "nullable": true,
          "required": [
            "sum_positive_1w",
            "sum_positive_1m",
            "sum_positive_3m",
            "sum_negative_1w",
            "sum_negative_1m",
            "sum_negative_3m",
            "positive_to_negative_ratio_1w",
            "positive_to_negative_ratio_1m",
            "positive_to_negative_ratio_3m"
          ],
          "description": "Aggregated metrics calculated based on the user's transactions from checking, savings, credit, and loan accounts.\n\nHowever, internal transfers (transfers between accounts belonging to the same link) are not used in the calculation.\n",
          "properties": {
            "sum_positive_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all transactions leading to a positive cashflow in the last week (counted from the time of the request).\n",
              "example": 10022.01
            },
            "sum_positive_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all transactions leading to a positive cashflow in the last month (counted from the time of the request).\n",
              "example": 10022.01
            },
            "sum_positive_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all transactions leading to a positive cashflow in the last three months (counted from the time of the request).\n",
              "example": 10022.01
            },
            "sum_negative_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all transactions leading to a negative cashflow in the last week (counted from the time of the request).\n",
              "example": 10237.03
            },
            "sum_negative_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all transactions leading to a negative cashflow in the last month (counted from the time of the request).\n",
              "example": 10237.03
            },
            "sum_negative_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all transactions leading to a negative cashflow in the last three months (counted from the time of the request).\n",
              "example": 10237.03
            },
            "positive_to_negative_ratio_1w": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The ratio between sum_positive / sum_negative  in the last week (counted from the time of the request).\n\nℹ️ If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n\n**Note**: In the case that there have been no outgoing transactions, the value will be `null`.\n",
              "example": 0.98
            },
            "positive_to_negative_ratio_1m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The ratio between sum_positive / sum_negative  in the last month (counted from the time of the request).\n\nℹ️ If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n",
              "example": 0.98
            },
            "positive_to_negative_ratio_3m": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The ratio between sum_positive / sum_negative  in the last three months (counted from the time of the request).\n\nℹ️ If the ratio is greater than `1`, it means that the user has more income than outgoing, indicating that they spend less than they earn.\n",
              "example": 0.98
            }
          }
        },
        "RiskInsightsCreditCardMetrics": {
          "type": "object",
          "nullable": true,
          "required": [
            "num_accounts",
            "sum_credit_limit",
            "sum_credit_used"
          ],
          "description": "Aggregated metrics calculated based on the link's credit card accounts.",
          "properties": {
            "num_accounts": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "description": "Number of credit cards accounts associated to the link.\n",
              "example": 2
            },
            "sum_credit_limit": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all credit cards' limits.\n",
              "example": 600.5
            },
            "sum_credit_used": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of all credit used.\n",
              "example": 200.5
            }
          }
        },
        "RiskInsightsLoansMetrics": {
          "type": "object",
          "nullable": true,
          "required": [
            "num_accounts",
            "sum_loans_principal",
            "sum_loans_outstanding_principal",
            "sum_loans_monthly_payment"
          ],
          "description": "Aggregated metrics calculated based on the user's loan accounts.",
          "properties": {
            "num_accounts": {
              "type": "integer",
              "format": "int32",
              "description": "Number of loan accounts associated with the link.\n",
              "example": 5
            },
            "sum_loans_principal": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of the principal for all of the link's loan accounts.\n",
              "example": 5000
            },
            "sum_loans_outstanding_principal": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of the outstanding principal for all the link's loan accounts.\n",
              "example": 2000
            },
            "sum_loans_monthly_payment": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Sum total of the monthly payments for all the link's loan accounts.\n",
              "example": 400
            }
          }
        },
        "RiskInsights": {
          "type": "object",
          "required": [
            "id",
            "link",
            "accounts",
            "created_at",
            "transactions_metrics",
            "balances_metrics",
            "cashflow_metrics",
            "credit_cards_metrics",
            "loans_metrics"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the risk insights request.",
              "example": "076c66e5-90f5-4e01-99c7-50e32f65ae42"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` the risk insights analysis belongs to.",
              "example": "30cb4806-6e00-48a4-91c9-ca55968576c8"
            },
            "accounts": {
              "type": "array",
              "nullable": true,
              "description": "An array of Belvo-generated account numbers (UUIDs) that were used during the risk insights analysis. If no accounts were found, we return an empty array.",
              "items": {
                "type": "string",
                "format": "uuid",
                "description": "The Belvo-generated ID for the account.",
                "example": "0d3ffb69-f83b-456e-ad8e-208d0998d71d"
              },
              "example": [
                "0d3ffb69-f83b-456e-ad8e-208d0998d71d",
                "00293c8e-1152-440b-9892-3c071fb88672",
                "cf638fba-ef45-4c10-bc6f-adecc4b2bf4e"
              ]
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-01T20:25:47.307911Z"
            },
            "transactions_metrics": {
              "$ref": "#/components/schemas/RiskInsightsTransactionMetrics"
            },
            "balances_metrics": {
              "$ref": "#/components/schemas/RiskInsightsBalanceMetrics"
            },
            "cashflow_metrics": {
              "$ref": "#/components/schemas/RiskInsightsCashflowMetrics"
            },
            "credit_cards_metrics": {
              "$ref": "#/components/schemas/RiskInsightsCreditCardMetrics"
            },
            "loans_metrics": {
              "$ref": "#/components/schemas/RiskInsightsLoansMetrics"
            }
          }
        },
        "RiskInsightsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of risk insights objects.",
              "items": {
                "$ref": "#/components/schemas/RiskInsights"
              }
            }
          }
        },
        "EnumTaxRetentionReceiverNationality": {
          "type": "string",
          "enum": [
            "NATIONAL",
            "FOREIGN"
          ],
          "nullable": true,
          "description": "Whether the invoice receiver is a Mexican national or not. If the receiver is not considered a Mexican national, the retained taxes can be calculated differently. Possible values:\n  - `NATIONAL`\n  - `FOREIGN`\n",
          "example": "NATIONAL"
        },
        "EnumTaxRetentionPaymentStatus": {
          "type": "string",
          "enum": [
            "PAID",
            "PROVISIONED"
          ],
          "nullable": true,
          "description": "Indicates whether or not the tax has been paid or not. Can be either:\n  - `PAID`\n  - `PROVISIONED`\n",
          "example": "PAID"
        },
        "RetentionBreakdown": {
          "type": "object",
          "required": [
            "base_amount",
            "tax_type",
            "retained_amount",
            "payment_status"
          ],
          "description": "A breakdown of the retained taxes",
          "properties": {
            "base_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The base amount that was used to calculate the tax retention.\n",
              "example": 0.03
            },
            "tax_type": {
              "type": "string",
              "nullable": true,
              "description": "Optional attribute to indicate the type of tax withheld for the period or year according to the [SAT catalog](https://developers.belvo.com/docs/sat-catalogs#retention-code).\n",
              "example": "01"
            },
            "retained_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The amount retained.\n",
              "example": 0
            },
            "payment_status": {
              "$ref": "#/components/schemas/EnumTaxRetentionPaymentStatus"
            }
          }
        },
        "TaxRetentions": {
          "type": "object",
          "required": [
            "collected_at",
            "invoice_identification",
            "version",
            "code",
            "issued_at",
            "certified_at",
            "cancelled_at",
            "sender_id",
            "sender_name",
            "receiver_nationality",
            "receiver_id",
            "receiver_name",
            "total_invoice_amount",
            "total_taxable_amount",
            "total_exempt_amount",
            "total_retained_amount",
            "retention_breakdown",
            "xml"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier used to reference the current tax retention statement.",
              "example": "c749315b-eec2-435d-a458-06912878564f"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` the tax retention belongs to.",
              "example": "19697249-01b8-443e-a451-76bfc5fbeebf"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the data point was collected.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.\n",
              "example": "2022-02-09T08:46:20.406032Z"
            },
            "invoice_identification": {
              "type": "string",
              "format": "uuid",
              "nullable": true,
              "description": "The fiscal institution's unique ID for the invoice that the tax retention relates to.\n",
              "example": "def404af-5eef-4112-aa99-d1ec8493b89a"
            },
            "version": {
              "type": "string",
              "nullable": true,
              "description": "The CFDI version of the tax retentions.\n",
              "example": "1.0"
            },
            "code": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The tax retention code. For more information, see our [SAT Catalogs DevPortal article](https://developers.belvo.com/docs/sat-catalogs#retention-code).\n",
              "example": 25
            },
            "issued_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the tax retention was issued.\n",
              "example": "2019-01-03T21:10:40.000Z"
            },
            "certified_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the tax retention was certified.\n",
              "example": "2019-01-03T21:10:41.000Z"
            },
            "cancelled_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the tax retention was canceled (if applicable).\n",
              "example": null
            },
            "sender_id": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the invoice sender.\n",
              "example": "JKUF980404P0"
            },
            "sender_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the invoice sender.\n",
              "example": "Roberto Nunez Batman"
            },
            "receiver_nationality": {
              "$ref": "#/components/schemas/EnumTaxRetentionReceiverNationality"
            },
            "receiver_id": {
              "type": "string",
              "nullable": true,
              "description": "The fiscal ID of the invoice receiver.\n",
              "example": "GYGK3207809L1"
            },
            "receiver_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the invoice receiver.\n",
              "example": "ACME LTD"
            },
            "total_invoice_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total amount of the invoice that the tax retention relates to.\n",
              "example": 53249.8
            },
            "total_exempt_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Total amount that is exempt from taxation.\n",
              "example": 1000.8
            },
            "total_retained_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "Total tax retained.\n",
              "example": 1550.7
            },
            "total_taxable_amount": {
              "type": "number",
              "format": "float",
              "nullable": true,
              "description": "The total amount that can be taxed. Calculated as `total_invoice_amount` - `total_exempt_amount`.\n",
              "example": 43249
            },
            "retention_breakdown": {
              "type": "array",
              "nullable": true,
              "description": "A breakdown of the retained taxes.",
              "items": {
                "$ref": "#/components/schemas/RetentionBreakdown"
              }
            },
            "xml": {
              "type": "string",
              "nullable": true,
              "description": "The tax retention document in XML form.\n",
              "example": "=XML-STRING="
            }
          }
        },
        "TaxRetentionsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of tax retentions objects.",
              "items": {
                "$ref": "#/components/schemas/TaxRetentions"
              }
            }
          }
        },
        "EnumTaxRetentionType": {
          "type": "string",
          "enum": [
            "OUTFLOW",
            "INFLOW"
          ],
          "description": "The type of tax retention in relation to the invoice (from the perspective of the Link owner).\n\n- `OUTFLOW` relates to a tax retention for a sent invoice.\n- `INFLOW` related to a tax retention for a received invoice.\n",
          "example": "INFLOW"
        },
        "TaxRetentionsRequest": {
          "type": "object",
          "required": [
            "link",
            "date_from",
            "date_to",
            "type"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` that you want to get information for.\n",
              "example": "9e432f18-36ca-4bd6-a3f3-1971e58dc1e8"
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date from which you want to start getting tax retentions for, in `YYYY-MM-DD` format.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.\n",
              "example": "2020-01-01"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date you want to stop getting tax retentions for, in `YYYY-MM-DD` format.\n\n⚠️ The number of days between `date_from` and `date_to` cannot be over 365.\n",
              "example": "2020-02-01"
            },
            "type": {
              "$ref": "#/components/schemas/EnumTaxRetentionType"
            },
            "attach_xml": {
              "type": "boolean",
              "default": true,
              "description": "When set to `true`, you will receive the XML tax retention in the response."
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            }
          }
        },
        "DocumentInformationIndividual": {
          "type": "object",
          "required": [
            "name",
            "type",
            "form_number",
            "year"
          ],
          "description": "Object containing detailed information about the fiscal document.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the tax document.",
              "example": "Declaracion de Renta y Complementario o de Ingresos y Patrimonio para Personas Juridicas y Asimiladas y Personas Naturales y Asimiladas no Residentes y Sucesiones Iliquidas de Causantes no Residentes"
            },
            "type": {
              "type": "string",
              "description": "The type of tax declaration form. For DIAN, this will be either `110` or `210`.",
              "example": "110"
            },
            "form_number": {
              "type": "string",
              "description": "Institution-provided identifier for the tax declaration.",
              "example": "2117680087604"
            },
            "year": {
              "type": "integer",
              "nullable": true,
              "description": "The year of this tax declaration.\n",
              "example": 2021
            }
          }
        },
        "DocumentIdIndividual": {
          "type": "object",
          "required": [
            "document_type",
            "document_number"
          ],
          "description": "Object containing information about the ID document of the tax payer.",
          "properties": {
            "document_type": {
              "type": "string",
              "description": "The type of ID document.",
              "example": "NIT"
            },
            "document_number": {
              "type": "string",
              "description": "The number of the ID document.",
              "example": "7113223466"
            }
          }
        },
        "ReportingId": {
          "type": "object",
          "required": [
            "reporting_type",
            "reporting_value"
          ],
          "description": "Object containing information about where the tax payer reports their income.",
          "properties": {
            "reporting_type": {
              "type": "string",
              "description": "The type of reporting ID. For DIAN, this is the sectional address code (*Codigo Dirrecion Seccional*)",
              "example": "sectional_address_code"
            },
            "reporting_value": {
              "type": "string",
              "description": "The value of the reporting ID.",
              "example": "32"
            }
          }
        },
        "TaxPayerInformationIndividual": {
          "type": "object",
          "required": [
            "first_last_name",
            "second_last_name",
            "first_name",
            "other_names",
            "main_economic_activity",
            "document_id",
            "reporting_id"
          ],
          "description": "Object containing information about the tax payer.",
          "properties": {
            "first_last_name": {
              "type": "string",
              "description": "The tax payer's first last name.",
              "example": "Restrepo"
            },
            "second_last_name": {
              "type": "string",
              "description": "The tax payer's second last name.",
              "example": "Vives"
            },
            "first_name": {
              "type": "string",
              "description": "The tax payer's first name.",
              "example": "Carlos"
            },
            "other_names": {
              "type": "string",
              "description": "Additional names of the tax payer.",
              "example": "Alberto"
            },
            "main_economic_activity": {
              "type": "string",
              "description": "The main economic activity the tax payer is involved in.",
              "example": "0010"
            },
            "document_id": {
              "$ref": "#/components/schemas/DocumentIdIndividual"
            },
            "reporting_id": {
              "$ref": "#/components/schemas/ReportingId"
            }
          }
        },
        "EquityStatementIndividual": {
          "type": "object",
          "required": [
            "total_gross_equity",
            "total_debts",
            "total_net_equity"
          ],
          "description": "Object containing the general fiscal situation of the taxpayer.",
          "properties": {
            "total_gross_equity": {
              "type": "number",
              "format": "float",
              "description": "The total gross equity of the tax payer.",
              "example": 4648000
            },
            "total_debts": {
              "type": "number",
              "format": "float",
              "description": "The total debts of the tax_payer",
              "example": 77626000
            },
            "total_net_equity": {
              "type": "number",
              "format": "float",
              "description": "The total net equity value of the taxpayer.",
              "example": 0
            }
          }
        },
        "GrossIncomeIndividual": {
          "type": "object",
          "required": [
            "earned_income",
            "fee_based_income",
            "capital_income",
            "non_labor_income"
          ],
          "description": "Object containing the declared gross income of the tax payer.",
          "properties": {
            "earned_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from employment.",
              "example": 115004000
            },
            "fee_based_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from emitted invoices (for example, income that independent contractors or freelancers receive).",
              "example": 0
            },
            "capital_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from an investment (such as dividends or from renting a property).",
              "example": 0
            },
            "non_labor_income": {
              "type": "number",
              "format": "float",
              "description": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
              "example": 0
            }
          }
        },
        "NonTaxableIncomeIndividual": {
          "type": "object",
          "required": [
            "earned_income",
            "fee_based_income",
            "capital_income",
            "non_labor_income"
          ],
          "description": "Object containing the declared non-taxable income of the tax payer.",
          "properties": {
            "earned_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from employment.",
              "example": 115004000
            },
            "fee_based_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from emitted invoices (for example, income independent contractors or freelancers receive).",
              "example": 0
            },
            "capital_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from an investment (such as dividends or from renting a property).",
              "example": 0
            },
            "non_labor_income": {
              "type": "number",
              "format": "float",
              "description": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
              "example": 0
            }
          }
        },
        "NetIncomeIndividual": {
          "type": "object",
          "required": [
            "earned_income",
            "fee_based_income",
            "capital_income",
            "non_labor_income"
          ],
          "description": "Object containing the declared net income of the tax payer. The values are calculated as the `gross_income` - `non_taxable_income`.",
          "properties": {
            "earned_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from employment.",
              "example": 115004000
            },
            "fee_based_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from emitted invoices (for example, income independent contractors or freelancers receive).",
              "example": 0
            },
            "capital_income": {
              "type": "number",
              "format": "float",
              "description": "Income received from an investment (such as dividends or from renting a property).",
              "example": 0
            },
            "non_labor_income": {
              "type": "number",
              "format": "float",
              "description": "Income that cannot be classified into the other three fields (such as income from cryptocurrencies or regular transfers from parents).",
              "example": 0
            }
          }
        },
        "AnnualTotalsIndividual": {
          "type": "object",
          "required": [
            "total_exempt_income",
            "total_applicable_deductions",
            "total_exemptions_and_deductions",
            "total_ordinary_net_income"
          ],
          "description": "Object containing the tax payers total exempt, deducted, and ordinary net incomes.",
          "properties": {
            "total_exempt_income": {
              "type": "number",
              "format": "float",
              "description": "Total income that is not taxable, according to the institution.",
              "example": 115004000
            },
            "total_applicable_deductions": {
              "type": "number",
              "format": "float",
              "description": "Total deductions that the taxpayer can apply to their income, according to the institution.",
              "example": 0
            },
            "total_exemptions_and_deductions": {
              "type": "number",
              "format": "float",
              "description": "Sum total of all exempt and deductions that can be applied to the taxpayer's income.",
              "example": 0
            },
            "total_ordinary_net_income": {
              "type": "number",
              "format": "float",
              "description": "Sum total of the taxpayer's income (gross income - exemptions - deductions).",
              "example": 0
            }
          }
        },
        "AnnualIncomeStatementIndividual": {
          "type": "object",
          "required": [
            "gross_income",
            "non_taxable_income",
            "net_income",
            "annual_totals"
          ],
          "description": "Object containing the reported annual incomes, deductions, and final balances of the tax payer.",
          "properties": {
            "gross_income": {
              "$ref": "#/components/schemas/GrossIncomeIndividual"
            },
            "non_taxable_income": {
              "$ref": "#/components/schemas/NonTaxableIncomeIndividual"
            },
            "net_income": {
              "$ref": "#/components/schemas/NetIncomeIndividual"
            },
            "annual_totals": {
              "$ref": "#/components/schemas/AnnualTotalsIndividual"
            }
          }
        },
        "PensionIncomeStatementIndividual": {
          "type": "object",
          "required": [
            "net_pension_income",
            "net_taxable_pension_income"
          ],
          "description": "Object containing the tax payer's total pension income.",
          "properties": {
            "net_pension_income": {
              "type": "number",
              "format": "float",
              "description": "The total net pension of the taxpayer.",
              "example": 0
            },
            "net_taxable_pension_income": {
              "type": "number",
              "format": "float",
              "description": "The total taxable pension income of the taxpayer.",
              "example": 0
            }
          }
        },
        "TaxAssessmentIndividual": {
          "type": "object",
          "required": [
            "fortuitous_profit_tax",
            "total_tax_on_taxable_net_income",
            "net_income_tax",
            "total_tax_due",
            "previous_year_balance",
            "total_withheld_tax",
            "balance_payable",
            "balance_refundable",
            "total_payment"
          ],
          "description": "Object containing the calculated tax assessment of the tax payer. This includes the total taxable income, the income tax applied, and taxes already withheld.",
          "properties": {
            "fortuitous_profit_tax": {
              "type": "number",
              "format": "float",
              "description": "The tax applied on your unexpected income (such as lottery wins or house sales).",
              "example": 0
            },
            "total_tax_on_taxable_net_income": {
              "type": "number",
              "format": "float",
              "description": "The calculated total tax that can be applied on the tax payer's taxable income (total income - exemptions - deductions).",
              "example": 9144000
            },
            "net_income_tax": {
              "type": "number",
              "format": "float",
              "description": "After additional deductions that you can apply, this will be the net income tax. If not further deduction are identified, this value will be the same as `total_tax_on_taxable_net_income`.",
              "example": 9144000
            },
            "total_tax_due": {
              "type": "number",
              "format": "float",
              "description": "After further deductions, this is the final calculated tax that the taxpayer is required to pay.",
              "example": 9144000
            },
            "previous_year_balance": {
              "type": "number",
              "format": "float",
              "description": "Only applicable for DIAN.\n\n\nThe amount the tax payer has as a \"credit\" fromt he previous year (this is equal to the `balance_refundable`) of the previous year.\n",
              "example": 1514000
            },
            "total_withheld_tax": {
              "type": "number",
              "format": "float",
              "description": "The total tax already withheld in the current fiscal year.",
              "example": 7714000
            },
            "balance_payable": {
              "type": "number",
              "format": "float",
              "description": "How much the tax payer is required to pay.",
              "example": 0
            },
            "balance_refundable": {
              "type": "number",
              "format": "float",
              "description": "How much the tax payer is expected to receive. For DIAN, this will count as credit for the next fiscal year (see `previous_year_balance`).",
              "example": 84000
            },
            "total_payment": {
              "type": "number",
              "format": "float",
              "description": "The total the tax payer is required to pay, taking into account deductions and fiscal credits.",
              "example": 0
            }
          }
        },
        "TaxDeclarationIndividual": {
          "type": "object",
          "title": "Individual Tax Declaration",
          "required": [
            "id",
            "link",
            "collected_at",
            "created_at",
            "document_information",
            "tax_payer_information",
            "equity_statement",
            "annual_income_statement",
            "pension_income_statement",
            "tax_assessment",
            "date_issued",
            "pdf"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current tax declaration.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID of the user that this tax declaration is associated with.",
              "example": "8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2020-04-23T21:30:20.336854+00:00"
            },
            "document_information": {
              "$ref": "#/components/schemas/DocumentInformationIndividual"
            },
            "tax_payer_information": {
              "$ref": "#/components/schemas/TaxPayerInformationIndividual"
            },
            "equity_statement": {
              "$ref": "#/components/schemas/EquityStatementIndividual"
            },
            "annual_income_statement": {
              "$ref": "#/components/schemas/AnnualIncomeStatementIndividual"
            },
            "pension_income_statement": {
              "$ref": "#/components/schemas/PensionIncomeStatementIndividual"
            },
            "tax_assessment": {
              "$ref": "#/components/schemas/TaxAssessmentIndividual"
            },
            "date_issued": {
              "type": "string",
              "format": "date",
              "description": "The date the tax declaration was issued by the fiscal institution.",
              "example": "2022-09-02"
            },
            "pdf": {
              "type": "string",
              "nullable": true,
              "description": "The PDF of the tax declaration, as a binary string.",
              "example": "==BINARY-STRING=="
            }
          }
        },
        "TaxDeclarationIndividualPaginated": {
          "type": "object",
          "title": "Tax Declaration Individual",
          "additionalProperties": false,
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of Individual Tax Declaration objects.",
              "items": {
                "$ref": "#/components/schemas/TaxDeclarationIndividual"
              }
            }
          }
        },
        "DocumentInformationBusiness": {
          "type": "object",
          "required": [
            "name",
            "type",
            "form_number",
            "year"
          ],
          "description": "Object containing detailed information about the fiscal document.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the tax document.",
              "example": "Declaracion de Renta y Complementario o de Ingresos y Patrimonio para Personas Juridicas y Asimiladas y Personas Naturales y Asimiladas no Residentes y Sucesiones Iliquidas de Causantes no Residentes"
            },
            "type": {
              "type": "string",
              "description": "The type of tax declaration form. For DIAN, this will be either `110` or `210`.",
              "example": "110"
            },
            "form_number": {
              "type": "string",
              "description": "The institution-provided identifier for the tax declaration.",
              "example": "2117680087604"
            },
            "year": {
              "type": "integer",
              "nullable": true,
              "description": "The year of this tax declaration.\n",
              "example": 2021
            }
          }
        },
        "DocumentIdBusiness": {
          "type": "object",
          "required": [
            "document_type",
            "document_number"
          ],
          "description": "Object containing information about the ID document of the tax payer.",
          "properties": {
            "document_type": {
              "type": "string",
              "description": "The type of ID document.",
              "example": "NIT"
            },
            "document_number": {
              "type": "string",
              "description": "The number of the ID document.",
              "example": "8312224477"
            }
          }
        },
        "TaxPayerInformationBusiness": {
          "type": "object",
          "required": [
            "first_last_name",
            "second_last_name",
            "first_name",
            "other_names",
            "company_name",
            "main_economic_activity",
            "document_id",
            "reporting_id"
          ],
          "description": "Object containing information about the tax payer.",
          "properties": {
            "first_last_name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payer's first last name.",
              "example": "Restrepo"
            },
            "second_last_name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payer's second last name.",
              "example": "Vives"
            },
            "first_name": {
              "type": "string",
              "nullable": true,
              "description": "The tax payer's first name.",
              "example": "Carlos"
            },
            "other_names": {
              "type": "string",
              "nullable": true,
              "description": "Additional names of the tax payer.",
              "example": "Alberto"
            },
            "company_name": {
              "type": "string",
              "description": "The name of the company, as registered at the institution.",
              "example": "Trusty Spanners"
            },
            "main_economic_activity": {
              "type": "string",
              "description": "The main economic activity the tax payer is involved in.",
              "example": "0032"
            },
            "document_id": {
              "$ref": "#/components/schemas/DocumentIdBusiness"
            },
            "reporting_id": {
              "$ref": "#/components/schemas/ReportingId"
            }
          }
        },
        "EquityStatementBusiness": {
          "type": "object",
          "required": [
            "cash_and_cash_equivalents",
            "investments_and_derivative_financial_instruments",
            "accounts_documents_and_finance_leases_receivable",
            "inventory",
            "property_plant_and_equipment_investment_properties",
            "total_gross_equity",
            "debts",
            "total_net_equity"
          ],
          "description": "Object containing the general fiscal situation of the taxpayer.",
          "properties": {
            "cash_and_cash_equivalents": {
              "type": "number",
              "format": "float",
              "description": "Total cash (or cash equivalents) that the business currently holds at the end of the fiscal year.",
              "example": 4648000
            },
            "investments_and_derivative_financial_instruments": {
              "type": "number",
              "format": "float",
              "description": "Total value of all investments, stocks, or similar, that the company has.",
              "example": 77626000
            },
            "accounts_documents_and_finance_leases_receivable": {
              "type": "number",
              "format": "float",
              "description": "Total of all payments the company expects to receive (for example, from partial invoices that have not been paid yet).",
              "example": 0
            },
            "inventory": {
              "type": "number",
              "format": "float",
              "description": "Total financial value of the company's sellable inventory.",
              "example": 0
            },
            "property_plant_and_equipment_investment_properties": {
              "type": "number",
              "format": "float",
              "description": "Total value of real estate, plant infrastructure, or equipment that has been purchased.",
              "example": 0
            },
            "total_gross_equity": {
              "type": "number",
              "format": "float",
              "description": "Total gross equity.",
              "example": 220860000
            },
            "debts": {
              "type": "number",
              "format": "float",
              "description": "Total debts that the company currently has.",
              "example": 207030000
            },
            "total_net_equity": {
              "type": "number",
              "format": "float",
              "description": "The total net equity of the company (`total_gross_equity` - `debts`).",
              "example": 13830000
            }
          }
        },
        "AnnualIncomeStatementBusiness": {
          "type": "object",
          "required": [
            "gross_income_from_ordinary_activities",
            "dividends",
            "other_income",
            "total_gross_income",
            "returns_rebates_and_discounts_on_sales",
            "total_net_income"
          ],
          "description": "Object containing the reported annual incomes, deductions, and final balances of the tax payer.",
          "properties": {
            "gross_income_from_ordinary_activities": {
              "type": "number",
              "format": "float",
              "description": "Total gross income that the company generated from their main economic activity.",
              "example": 210043000
            },
            "dividends": {
              "type": "number",
              "format": "float",
              "description": "Total income that the company generated from dividends.",
              "example": 0
            },
            "other_income": {
              "type": "number",
              "format": "float",
              "description": "Total income that the company generated from activities not associated with their main economic activity.",
              "example": 0
            },
            "total_gross_income": {
              "type": "number",
              "format": "float",
              "description": "Total gross income the company generated.",
              "example": 210043000
            },
            "returns_rebates_and_discounts_on_sales": {
              "type": "number",
              "format": "float",
              "description": "Total value of cancelled orders, corrected invoices, or similar, that can be discounted from the `total_gross_income`.",
              "example": 0
            },
            "total_net_income": {
              "type": "number",
              "format": "float",
              "description": "Total net income of the company, taking into account `returns_rebates_and_discounts_on_sales`.",
              "example": 210043000
            }
          }
        },
        "AnnualCostsAndDeductionsStatementBusiness": {
          "type": "object",
          "required": [
            "costs",
            "administration_expenses",
            "distribution_and_sales_expenses",
            "financial_expenses",
            "total_costs_and_deductible_expenses"
          ],
          "description": "Object containing the reported annual costs and applicable deductions.",
          "properties": {
            "costs": {
              "type": "number",
              "format": "float",
              "description": "Total costs for the company to operate.",
              "example": 1881843000
            },
            "administration_expenses": {
              "type": "number",
              "format": "float",
              "description": "Total costs of the company related to training, company offsites, or similar.",
              "example": 3266000
            },
            "distribution_and_sales_expenses": {
              "type": "number",
              "format": "float",
              "description": "Total costs the company incurred in order to distribute or sell their product.",
              "example": 0
            },
            "financial_expenses": {
              "type": "number",
              "format": "float",
              "description": "Total value of any fees incurred by the company to operate (such as bank fees).",
              "example": 0
            },
            "total_costs_and_deductible_expenses": {
              "type": "number",
              "format": "float",
              "description": "Total value of all costs and dedictible expenses.",
              "example": 191449000
            }
          }
        },
        "TaxAssessmentBusiness": {
          "type": "object",
          "required": [
            "net_income_taxable",
            "fortuitous_profit_tax",
            "total_tax_on_taxable_net_income",
            "net_income_tax",
            "total_tax_due",
            "total_withholdings_for_the_taxable_year_to_be_declared",
            "total_withheld_tax",
            "total_balance_payable",
            "total_balance_in_favor",
            "total_payment"
          ],
          "description": "Object containing the calculated tax assessment of the tax payer. This includes the total taxable income, the income tax applied, and taxes already withheld.",
          "properties": {
            "net_income_taxable": {
              "type": "number",
              "format": "float",
              "description": "The net income on which tax can be applied.",
              "example": 18594000
            },
            "fortuitous_profit_tax": {
              "type": "number",
              "format": "float",
              "description": "The tax applied on your unexpected income (such as lottery wins or house sales).",
              "example": 0
            },
            "total_tax_on_taxable_net_income": {
              "type": "number",
              "format": "float",
              "description": "The calculated total tax that can be applied on the tax payer's taxable income (total income - exemptions - deductions).",
              "example": 5764000
            },
            "net_income_tax": {
              "type": "number",
              "format": "float",
              "description": "After additional deductions that you can apply, this will be the net income tax. If no further deduction are identified, this value will be the same as `total_tax_on_taxable_net_income`.",
              "example": 5764000
            },
            "total_tax_due": {
              "type": "number",
              "format": "float",
              "description": "After further deductions, this is the final calculated tax that the taxpayer is required to pay.",
              "example": 5764000
            },
            "total_withholdings_for_the_taxable_year_to_be_declared": {
              "type": "number",
              "format": "float",
              "description": "How much the tax payer has already paid througout the fiscal year.",
              "example": 7361000
            },
            "total_balance_payable": {
              "type": "number",
              "format": "float",
              "description": "How much the tax payer is required to pay.",
              "example": 0
            },
            "total_balance_in_favor": {
              "type": "number",
              "format": "float",
              "description": "How much the tax payer is expected to receive.",
              "example": 1889000
            },
            "total_payment": {
              "type": "number",
              "format": "float",
              "description": "The total the tax payer is required to pay, taking into account deductions and fiscal credits.",
              "example": 0
            }
          }
        },
        "TaxDeclarationBusiness": {
          "type": "object",
          "title": "Business Tax Declaration",
          "required": [
            "id",
            "link",
            "collected_at",
            "created_at",
            "document_information",
            "tax_payer_information",
            "equity_statement",
            "annual_income_statement",
            "annual_costs_and_deductions_statement",
            "tax_assessment",
            "date_issued",
            "pdf"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current tax declaration.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID of the user that this tax declaration is associated with.",
              "example": "8a95ca1a-1a7a-4ce0-8599-f8ff1dc792ac"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2020-04-23T21:30:20.336854+00:00"
            },
            "document_information": {
              "$ref": "#/components/schemas/DocumentInformationBusiness"
            },
            "tax_payer_information": {
              "$ref": "#/components/schemas/TaxPayerInformationBusiness"
            },
            "equity_statement": {
              "$ref": "#/components/schemas/EquityStatementBusiness"
            },
            "annual_income_statement": {
              "$ref": "#/components/schemas/AnnualIncomeStatementBusiness"
            },
            "annual_costs_and_deductions_statement": {
              "$ref": "#/components/schemas/AnnualCostsAndDeductionsStatementBusiness"
            },
            "tax_assessment": {
              "$ref": "#/components/schemas/TaxAssessmentBusiness"
            },
            "date_issued": {
              "type": "string",
              "format": "date",
              "description": "The date the tax declaration was issued by the fiscal institution.",
              "example": "2022-09-02"
            },
            "pdf": {
              "type": "string",
              "nullable": true,
              "description": "The PDF of the tax declaration, as a binary string.",
              "example": "==BINARY-STRING=="
            }
          }
        },
        "TaxDeclarationBusinessPaginated": {
          "type": "object",
          "title": "Tax Declaration Business",
          "additionalProperties": false,
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of Business Tax Declaration objects.",
              "items": {
                "$ref": "#/components/schemas/TaxDeclarationBusiness"
              }
            }
          }
        },
        "TaxDeclarationsRequest": {
          "type": "object",
          "title": "Tax Declarations",
          "description": "Request body for tax declrarations",
          "required": [
            "link",
            "type",
            "year_to",
            "year_from"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The fiscal `link.id` you want specific tax declaration information for.",
              "example": "d4617561-1c01-4b2f-83b6-a594f7b3bc57"
            },
            "year_from": {
              "type": "string",
              "description": "The starting year you want to get tax declaration for, in `YYYY` format.\n",
              "example": "2018"
            },
            "year_to": {
              "type": "string",
              "description": "The year you want to stop getting tax declaration for, in `YYYY` format.\n",
              "example": "2019"
            },
            "attach_pdf": {
              "type": "boolean",
              "default": false,
              "description": "When this is set to `true`, you will receive the PDF as a binary string in the response.",
              "example": false
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response.",
              "example": true
            }
          }
        },
        "EnumEmploymentRecordStatus": {
          "type": "string",
          "nullable": true,
          "enum": [
            "EMPLOYED",
            "UNEMPLOYED"
          ],
          "description": "Indicates whether or not the individual is currently `EMPLOYED` or `UNEMPLOYED`.\n",
          "example": "EMPLOYED"
        },
        "EmploymentRecordEntitlement": {
          "type": "object",
          "description": "Details regarding the benefits the individual is entitled to.",
          "properties": {
            "entitled_to_health_insurance": {
              "type": "boolean",
              "description": "Indicated whether or not the individual is entitled to health insurance.\n",
              "example": true
            },
            "entitled_to_company_benefits": {
              "type": "boolean",
              "description": "Indicates whether or not the individual is entitled to company benefits.\n",
              "example": true
            },
            "valid_until": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "Date until when the individual is covered by health insurance and/or company benefits. If `null` the employee is currently working and no end date is required.\n",
              "example": null
            },
            "status": {
              "$ref": "#/components/schemas/EnumEmploymentRecordStatus"
            }
          }
        },
        "EnumEmploymentRecordDocumentType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "NSS",
            "CURP"
          ],
          "description": "The type of document related to the individual. We return one of the following values:\n\n  - `NSS`\n  - `CURP`\n",
          "example": "NSS"
        },
        "EmploymentRecordDocumentId": {
          "type": "object",
          "description": "Details regarding the individual's ID documents.",
          "properties": {
            "document_type": {
              "$ref": "#/components/schemas/EnumEmploymentRecordDocumentType"
            },
            "document_number": {
              "type": "string",
              "nullable": true,
              "description": "The ID document's number (as a string).\n",
              "example": "10277663582"
            }
          }
        },
        "EmploymentRecordPersonalData": {
          "type": "object",
          "description": "Details regarding the personal information of the individual.",
          "properties": {
            "official_name": {
              "type": "string",
              "nullable": true,
              "description": "The legal name of the individual\n",
              "example": "Bruce Banner del Torro"
            },
            "first_name": {
              "type": "string",
              "nullable": true,
              "description": "The first name of the individual.\n",
              "example": "Bruce"
            },
            "last_name": {
              "type": "string",
              "nullable": true,
              "description": "The last name of the individual.\n",
              "example": "Banner del Torro"
            },
            "email": {
              "type": "string",
              "nullable": true,
              "description": "The email address of the individual (as provided in the initial POST request).\n",
              "example": "bruce.banner@avengers.com"
            },
            "birth_date": {
              "type": "string",
              "format": "date",
              "nullable": true,
              "description": "The date of the birth of the individual, in `YYYY-MM-DD` format.\n",
              "example": "2022-02-09"
            },
            "entitlements": {
              "$ref": "#/components/schemas/EmploymentRecordEntitlement"
            },
            "document_ids": {
              "type": "array",
              "description": "Details regarding the individual's ID documents.",
              "items": {
                "$ref": "#/components/schemas/EmploymentRecordDocumentId"
              }
            }
          }
        },
        "EmploymentRecordSocialSecuritySummary": {
          "type": "object",
          "description": "Details regarding the individual's social security contributions.",
          "properties": {
            "weeks_redeemed": {
              "type": "integer",
              "nullable": true,
              "format": "int32",
              "description": "Number of weeks the individual needed to take out of their pension.\n",
              "example": 0
            },
            "weeks_reinstated": {
              "type": "integer",
              "nullable": true,
              "format": "int32",
              "description": "Number of weeks the individual has paid back into their pension (*AFORE*), after having redeemed them previously.\n",
              "example": 0
            },
            "weeks_contributed": {
              "type": "integer",
              "nullable": true,
              "format": "int32",
              "description": "Number of weeks the individual has contributed to their social security, based on the number of weeks the individual has worked according to IMSS.\n",
              "example": 188
            }
          }
        },
        "EnumEmploymentRecordStatusUpdateEvents": {
          "type": "string",
          "enum": [
            "DISMISSED_RESIGNED",
            "SALARY_MODIFICATION",
            "HIRED",
            "VOLUNTARY_CONTRIBUTION",
            "ABSENCE",
            "SICK_LEAVE"
          ],
          "description": "The event that caused the change in employment status or salary. We return one of the following values:\n  \n  - `DISMISSED_RESIGNED`\n  - `SALARY_MODIFICATION`\n  - `HIRED`\n  - `VOLUNTARY_CONTRIBUTION`\n  - `ABSENCE`\n  - `SICK_LEAVE`\n",
          "example": "HIRED"
        },
        "EmploymentRecordEmploymentStatusUpdates": {
          "type": "object",
          "description": "Details regarding any employment changes of the individual.",
          "properties": {
            "event": {
              "$ref": "#/components/schemas/EnumEmploymentRecordStatusUpdateEvents"
            },
            "base_salary": {
              "type": "number",
              "format": "float",
              "description": "The base salary of the individual, current as of the `update_date`.\n",
              "example": 1033.09
            },
            "update_date": {
              "type": "string",
              "format": "date",
              "description": "The date that the employment event occured, in `YYYY-MM-DD` format.\n",
              "example": "2021-09-01"
            }
          }
        },
        "EmploymentRecordDetail": {
          "type": "object",
          "description": "Details regarding the individual's employment history.",
          "properties": {
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "employer": {
              "type": "string",
              "description": "The official name of the employer.\n",
              "example": "Batman Enterprises CDMX"
            },
            "employer_id": {
              "type": "string",
              "description": "The official ID of the employer, according to the country.\n",
              "example": "780-BAT-88769-CDMX"
            },
            "start_date": {
              "type": "string",
              "format": "date",
              "description": "Date when employment started, in `YYYY-MM-DD` format.\n",
              "example": "2019-10-10"
            },
            "end_date": {
              "type": "string",
              "format": "date",
              "description": "Date when employment finished, in `YYYY-MM-DD` format.\n",
              "example": "2019-12-31"
            },
            "weeks_employed": {
              "type": "integer",
              "format": "int32",
              "description": "Number of weeks that the individual was employed.\n",
              "example": 12
            },
            "state": {
              "type": "string",
              "description": "In what geographical state the individual was employed, according to the country.\n",
              "example": "DISTRITO FEDERAL"
            },
            "most_recent_base_salary": {
              "type": "number",
              "format": "float",
              "description": "The most recent base salary the individual earned.\n\nFor Mexico, this is the *daily* rate that the individual earned, including the perks that the individual is entitled to throughout the year.\n",
              "example": 762.54
            },
            "monthly_salary": {
              "type": "number",
              "format": "float",
              "description": "The monthly salary of the individual, including any additional perks.\n"
            },
            "currency": {
              "type": "string",
              "description": "The three-letter currency code in which the salary is paid.\n",
              "example": "MXN"
            },
            "employment_status_updates": {
              "type": "array",
              "description": "Details regarding any employment changes of the individual.",
              "items": {
                "$ref": "#/components/schemas/EmploymentRecordEmploymentStatusUpdates"
              }
            }
          }
        },
        "EmploymentRecordFile": {
          "type": "object",
          "description": "Additional PDF binary files relating to the individual's employment.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The title of the document.\n",
              "example": "ReporteSemanasCotizadas_190123"
            },
            "value": {
              "type": "string",
              "description": "The PDF binary of the file (as a string).\n",
              "example": "=PDF_BINARY="
            }
          }
        },
        "EmploymentRecord": {
          "type": "object",
          "description": "Emploment record response payload",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier created by Belvo for the current IMSS statement.",
              "example": "fef05fc8-7357-4a4a-9d29-55038ea31a04"
            },
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The unique identifier created by Belvo for the current user.",
              "example": "27c1d5cf-e8fb-433a-a2f7-d246de199c01"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was initially created in Belvo's database.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "collected_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp when the data point was collected.",
              "example": "2020-04-23T21:32:55.336854+00:00"
            },
            "report_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the employment record report was generated, in `YYYY-MM-DD` format.",
              "example": "2023-01-19"
            },
            "internal_identification": {
              "type": "string",
              "description": "Unique ID for user according to the institution. For IMSS Mexico, this is the CURP.",
              "example": "BLPM951331IONVGR54"
            },
            "personal_data": {
              "$ref": "#/components/schemas/EmploymentRecordPersonalData"
            },
            "social_security_summary": {
              "$ref": "#/components/schemas/EmploymentRecordSocialSecuritySummary"
            },
            "employment_records": {
              "type": "array",
              "description": "Details regarding the individual's employment history.",
              "items": {
                "$ref": "#/components/schemas/EmploymentRecordDetail"
              }
            },
            "files": {
              "type": "array",
              "description": "Additional PDF binary files relating to the individual's employment.",
              "items": {
                "$ref": "#/components/schemas/EmploymentRecordFile"
              }
            }
          }
        },
        "EmploymentRecordsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `accounts` or `owners`).\n",
              "example": "https://sandbox.belvo.com/api/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of employment record objects.",
              "items": {
                "$ref": "#/components/schemas/EmploymentRecord"
              }
            }
          }
        },
        "EmploymentRecordRequest": {
          "type": "object",
          "required": [
            "link"
          ],
          "properties": {
            "link": {
              "type": "string",
              "format": "uuid",
              "description": "The `link.id` you want to retrieve employment records for.",
              "example": "d686c617-6d9e-4bc6-9801-5ac276ccb6a2"
            },
            "attach_pdf": {
              "type": "boolean",
              "default": false,
              "description": "When set to `true`, you will receive the PDF in binary format in the response."
            },
            "save_data": {
              "type": "boolean",
              "default": true,
              "description": "Indicates whether or not to persist the data in Belvo. By default, this is set to `true` and we return a 201 Created response.\nWhen set to `false`, the data won't be persisted and we return a 200 OK response."
            }
          }
        },
        "EnumIncomeVerificationAccountHolderType": {
          "type": "string",
          "enum": [
            "INDIVIDUAL"
          ],
          "description": "The type of account holder. Can be:\n\n  - `INDIVIDUAL`",
          "example": "INDIVIDUAL"
        },
        "EnumIncomeVerificationAccountCategory": {
          "type": "string",
          "enum": [
            "CHECKING_ACCOUNT",
            "SAVINGS_ACCOUNT"
          ],
          "description": "The type of account.\nCan be either:\n  - `CHECKING_ACCOUNT`\n  - `SAVINGS_ACCOUNT`",
          "example": "CHECKING_ACCOUNT"
        },
        "EnumIncomeVerificationType": {
          "type": "string",
          "nullable": true,
          "enum": [
            "INFLOW"
          ],
          "description": "The direction of the transaction:\n  \n- `INFLOW` indicates money coming into the account.\n",
          "example": "INFLOW"
        },
        "EyodIncomeVerificationBodyRequest": {
          "type": "object",
          "required": [
            "transaction_id",
            "account_holder_type",
            "account_holder_id",
            "account_id",
            "account_category",
            "value_date",
            "description",
            "type",
            "amount",
            "currency",
            "institution"
          ],
          "properties": {
            "transaction_id": {
              "type": "string",
              "description": "Your unique ID for the income.",
              "example": "3CWE4927CF15355"
            },
            "account_holder_type": {
              "$ref": "#/components/schemas/EnumIncomeVerificationAccountHolderType"
            },
            "account_holder_id": {
              "type": "string",
              "format": "uuid",
              "description": "Your unique ID for the account holder, in UUID format.",
              "example": "a61bc801-9fa5-457b-88ad-850c96eaca30"
            },
            "account_id": {
              "type": "string",
              "description": "Your unique ID for the account where the transaction occurred.",
              "example": "EBACA-89077589"
            },
            "account_category": {
              "$ref": "#/components/schemas/EnumIncomeVerificationAccountCategory"
            },
            "value_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the income transaction occurred, in `YYYY-MM-DD` format.",
              "example": "2022-11-18"
            },
            "description": {
              "type": "string",
              "description": "The description of the income.",
              "example": "SALÁRIO MENSAL"
            },
            "type": {
              "$ref": "#/components/schemas/EnumIncomeVerificationType"
            },
            "amount": {
              "type": "number",
              "format": "float",
              "description": "The income amount.",
              "example": 650.89
            },
            "currency": {
              "type": "string",
              "description": "The three-letter currency code of the income. For example:\n\n  • 🇧🇷 BRL (Brazilian Real)\n  • 🇨🇴 COP (Colombian Peso)\n  • 🇲🇽 MXN (Mexican Peso)",
              "example": "BRL"
            },
            "institution": {
              "type": "string",
              "description": "The institution where the account is registered.\n\n**Note:** This is the name that you use in your system to identify the institution. For example BBVA Retail.",
              "example": "Erebor Retail Brasil"
            }
          }
        },
        "EyodIncomeVerificationRequest": {
          "type": "object",
          "required": [
            "language",
            "transactions"
          ],
          "properties": {
            "language": {
              "type": "string",
              "description": "Two-letter ISO 639-1 code for the language of the transaction.",
              "example": "pt"
            },
            "transactions": {
              "type": "array",
              "description": "An array of transaction objects that you want enriched.\n\n**Note:** Each object corresponds to one, unique transaction and you can send through up to 10,000 transactions per request.",
              "items": {
                "$ref": "#/components/schemas/EyodIncomeVerificationBodyRequest"
              }
            },
            "date_from": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date from which you want to start getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_to`.\n\n⚠️ The value of `date_from` cannot be greater than `date_to`.",
              "example": "2022-08-01"
            },
            "date_to": {
              "type": "string",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
              "description": "The date you want to stop getting incomes for, in `YYYY-MM-DD` format, within the last 365 days. When you use this parameter, you must also send `date_from`.\n\n⚠️ The value of `date_to` cannot be greater than today's date (in other words, no future dates).",
              "example": "2022-12-30"
            },
            "allowed_income_types": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnumInvoiceAllowedIncomeTypesRequest"
              }
            },
            "minimum_confidence_level": {
              "$ref": "#/components/schemas/EnumIncomeMinimumConfidenceLevelRequest"
            }
          }
        },
        "AccessToResourceDenied": {
          "type": "object",
          "title": "Access to Belvo API denied",
          "description": "This error occurs when you try to access Belvo's resource without the correct permissions.",
          "properties": {
            "code": {
              "type": "string",
              "description": "A unique error code (`access_to_resource_denied`) that allows you to classify and handle the error programmatically.\n\nℹ️ Check our DevPortal for more information on how to handle <a href=\"https://developers.belvo.com/docs/belvo-api-errors#403-access_to_resource_denied\" target=\"_blank\">403 access_to_resource_denied</a>.",
              "example": "access_to_resource_denied"
            },
            "message": {
              "type": "string",
              "description": "A short description of the error. \n\nFor `access_to_resource_denied` errors, the description is:\n  \n  - `You don't have access to this resource.`.",
              "example": "You don't have access to this resource."
            },
            "request_id": {
              "type": "string",
              "pattern": "[a-f0-9]{32}",
              "description": "A 32-character unique ID of the request (matching a regex pattern of: `[a-f0-9]{32}`). Provide this ID when contacting the Belvo support team to accelerate investigations.",
              "example": "9e7b283c6efa449c9c028a16b5c249fb"
            }
          }
        },
        "EnumCategorizationAccountHolderType": {
          "type": "string",
          "enum": [
            "INDIVIDUAL",
            "BUSINESS"
          ],
          "description": "The type of account holder.\nCan be either:\n\n  - `INDIVIDUAL`\n  - `BUSINESS`",
          "example": "INDIVIDUAL"
        },
        "EnumCategorizationAccountCategory": {
          "type": "string",
          "enum": [
            "CHECKING_ACCOUNT",
            "CREDIT_CARD",
            "LOAN_ACCOUNT",
            "SAVINGS_ACCOUNT"
          ],
          "description": "The type of account.\nCan be either:\n  - `CHECKING_ACCOUNT`\n  - `CREDIT_CARD`\n  - `LOAN_ACCOUNT`\n  - `SAVINGS_ACCOUNT`",
          "example": "CREDIT_CARD"
        },
        "EnumCategorizationTransactionType": {
          "type": "string",
          "enum": [
            "INFLOW",
            "OUTFLOW"
          ],
          "description": "The direction of the transaction.\nCan be either:\n\n  - `INFLOW` indicates a received transaction.\n  - `OUTFLOW` indicates a sent transaction.",
          "example": "OUTFLOW"
        },
        "CategorizationBodyRequest": {
          "type": "object",
          "required": [
            "transaction_id",
            "account_holder_type",
            "account_holder_id",
            "account_id",
            "account_category",
            "value_date",
            "description",
            "type",
            "amount",
            "currency",
            "institution"
          ],
          "properties": {
            "transaction_id": {
              "type": "string",
              "description": "Your unique ID for the transaction.",
              "example": "3CWE4927CF15355"
            },
            "account_holder_type": {
              "$ref": "#/components/schemas/EnumCategorizationAccountHolderType"
            },
            "account_holder_id": {
              "type": "string",
              "description": "Your unique ID for the account holder.",
              "example": "7890098789087"
            },
            "account_id": {
              "type": "string",
              "description": "Your unique ID for the account where the transaction occurred.",
              "example": "BBVACA-89077589"
            },
            "account_category": {
              "$ref": "#/components/schemas/EnumCategorizationAccountCategory"
            },
            "value_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
              "example": "2022-11-18"
            },
            "description": {
              "type": "string",
              "description": "The description of the transaction.",
              "example": "APPL3STORE"
            },
            "type": {
              "$ref": "#/components/schemas/EnumCategorizationTransactionType"
            },
            "amount": {
              "type": "number",
              "format": "float",
              "description": "The transaction amount.",
              "example": 650.89
            },
            "currency": {
              "type": "string",
              "description": "The currency of the account, in ISO-4217 format. For example: - 🇧🇷 BRL (Brazilian Real) - 🇨🇴 COP (Colombian Peso) - 🇲🇽 MXN (Mexican Peso)",
              "example": "BRL"
            },
            "institution": {
              "type": "string",
              "description": "The institution where the account is registered.\n\n>**Note:** This is the name that you use in your system to identify an institution.",
              "example": "BBVA"
            },
            "mcc": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The four-digit ISO 18245 Merchant Category Code (MCC). Only required when `account_category` = `CREDIT_CARD`.",
              "example": 2345
            }
          }
        },
        "CategorizationRequest": {
          "type": "object",
          "required": [
            "language",
            "transactions"
          ],
          "properties": {
            "language": {
              "type": "string",
              "description": "Two-letter ISO 639-1 code for the language of the transaction.",
              "example": "pt"
            },
            "transactions": {
              "type": "array",
              "description": "An array of transaction objects that you want categorized.\n\n**Note:** Each object corresponds to one, unique transaction and you can send through up to 10,000 transactions per request.",
              "items": {
                "$ref": "#/components/schemas/CategorizationBodyRequest"
              }
            }
          }
        },
        "EnumCategorizationTransactionCategory": {
          "type": "string",
          "nullable": true,
          "enum": [
            "Bills & Utilities",
            "Credits & Loans",
            "Deposits",
            "Fees & Charges",
            "Food & Groceries",
            "Home & Life",
            "Income & Payments",
            "Insurance",
            "Investments & Savings",
            "Online Platforms & Leisure",
            "Personal Shopping",
            "Taxes",
            "Transfers",
            "Transport & Travel",
            "Unknown",
            "Withdrawal & ATM",
            null
          ],
          "description": "The name of the category to which this transaction belongs. For more info about this feature, check our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) article. \n\nWe return one of the following enum values:\n\n  - `Bills & Utilities`\n  - `Credits & Loans`\n  - `Deposits`\n  - `Fees & Charges`\n  - `Food & Groceries`\n  - `Home & Life`\n  - `Income & Payments`\n  - `Insurance`\n  - `Investments & Savings`\n  - `Online Platforms & Leisure`\n  - `Personal Shopping`\n  - `Taxes`\n  - `Transfers`\n  - `Transport & Travel`\n  - `Unknown`\n  - `Withdrawal & ATM`\n  - `null`\n",
          "example": "Income & Payments"
        },
        "EnumCategorizationTransactionSubcategory": {
          "type": "string",
          "nullable": true,
          "enum": [
            "Electricity & Energy",
            "Rent",
            "Telecommunications",
            "Water",
            "Auto",
            "Credit Card",
            "Instalment",
            "Interest & Charges",
            "Mortgage",
            "Pay Advance",
            "Personal",
            "Adjustments",
            "Bank Fees",
            "Chargeback",
            "Refund",
            "Blocked Balances",
            "Alimony",
            "Alcohol & Tobacco",
            "Bakery & Coffee",
            "Bars & Nightclubs",
            "Convenience Store",
            "Delivery",
            "Groceries",
            "Restaurants",
            "Education",
            "Gyms & Fitness",
            "Hair & Beauty",
            "Health",
            "Home Decor & Appliances",
            "Laundry & Dry Cleaning",
            "Pharmacies",
            "Professional Services",
            "Veterinary Services",
            "Freelance",
            "Interest",
            "Retirement",
            "Salary",
            "Government",
            "Home Insurance",
            "Auto Insurance",
            "Health & Life Insurance",
            "Savings",
            "Fixed income",
            "Equity",
            "Investment Funds",
            "Derivatives",
            "Cryptocurrencies",
            "Apps, Software and Cloud Services",
            "Events, Parks and Museums",
            "Gambling",
            "Gaming",
            "Lottery",
            "Movie & Audio",
            "Books & News",
            "Clothing & Accessories",
            "Department Store",
            "Electronics",
            "E-commerce",
            "Gifts",
            "Office Supplies",
            "Pet Supplies",
            "Auto Tax & Fees",
            "Donation",
            "Government Fees",
            "Income Tax",
            "Real Estate Tax & Fees",
            "Tax Return",
            "Accommodation",
            "Auto Expenses",
            "Auto Rental",
            "Flights",
            "Gas",
            "Mileage Programs",
            "Parking & Tolls",
            "Public Transit",
            "Taxis & Rideshares",
            "Other",
            null
          ],
          "description": "The transactions subcategory. For more info about this feature, check our [Transaction categorization](https://developers.belvo.com/docs/banking#categorizing-transactions) article. \n\nWe return one of the following enum values:\n\n  - `Electricity & Energy`\n  - `Rent`\n  - `Telecommunications`\n  - `Water`\n  - `Auto`\n  - `Credit Card`\n  - `Instalment`\n  - `Interest & Charges`\n  - `Mortgage`\n  - `Pay Advance`\n  - `Personal`\n  - `Adjustments`\n  - `Bank Fees`\n  - `Chargeback`\n  - `Refund`\n  - `Blocked Balances`\n  - `Alimony`\n  - `Alcohol & Tobacco`\n  - `Bakery & Coffee`\n  - `Bars & Nightclubs`\n  - `Convenience Store`\n  - `Delivery`\n  - `Groceries`\n  - `Restaurants`\n  - `Education`\n  - `Gyms & Fitness`\n  - `Hair & Beauty`\n  - `Health`\n  - `Home Decor & Appliances`\n  - `Laundry & Dry Cleaning`\n  - `Pharmacies`\n  - `Professional Services`\n  - `Veterinary Services`\n  - `Freelance`\n  - `Interest`\n  - `Retirement`\n  - `Salary`\n  - `Government`\n  - `Home Insurance`\n  - `Auto Insurance`\n  - `Health & Life Insurance`\n  - `Savings`\n  - `Fixed income`\n  - `Equity`\n  - `Investment Funds`\n  - `Derivatives`\n  - `Cryptocurrencies`\n  - `Apps, Software and Cloud Services`\n  - `Events, Parks and Museums`\n  - `Gambling`\n  - `Gaming`\n  - `Lottery`\n  - `Movie & Audio`\n  - `Books & News`\n  - `Clothing & Accessories`\n  - `Department Store`\n  - `Electronics`\n  - `E-commerce`\n  - `Gifts`\n  - `Office Supplies`\n  - `Pet Supplies`\n  - `Auto Tax & Fees`\n  - `Donation`\n  - `Government Fees`\n  - `Income Tax`\n  - `Real Estate Tax & Fees`\n  - `Tax Return`\n  - `Accommodation`\n  - `Auto Expenses`\n  - `Auto Rental`\n  - `Flights`\n  - `Gas`\n  - `Mileage Programs`\n  - `Parking & Tolls`\n  - `Public Transit`\n  - `Taxis & Rideshares`\n  - `Other`\n  - `null`",
          "example": "Freelance"
        },
        "CategorizationMerchantData": {
          "type": "object",
          "nullable": true,
          "description": "Additional data regarding the merchant involved in the transaction.\n",
          "properties": {
            "logo": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the merchant's logo.",
              "example": "https://www.apple.com/ac/structured-data/images/open_graph_logo.png?202110180743"
            },
            "website": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the merchant's website.",
              "example": "https://www.apple.com/br/"
            },
            "merchant_name": {
              "type": "string",
              "description": "The name of the merchant.",
              "example": "Apple, Inc"
            }
          }
        },
        "CategorizationBody": {
          "type": "object",
          "required": [
            "transaction_id",
            "account_holder_type",
            "account_holder_id",
            "account_id",
            "account_category",
            "value_date",
            "description",
            "type",
            "amount",
            "currency",
            "institution",
            "category",
            "merchant"
          ],
          "properties": {
            "transaction_id": {
              "type": "string",
              "description": "The unique ID for the transaction in your system.",
              "example": "3CWE4927CF15355"
            },
            "account_holder_type": {
              "$ref": "#/components/schemas/EnumCategorizationAccountHolderType"
            },
            "account_holder_id": {
              "type": "string",
              "description": "The unique ID for the account holder in your system.",
              "example": "7890098789087"
            },
            "account_id": {
              "type": "string",
              "description": "The unique ID for the account where the transaction occurred in your system.",
              "example": "BBVACA-89077589"
            },
            "account_category": {
              "$ref": "#/components/schemas/EnumCategorizationAccountCategory"
            },
            "value_date": {
              "type": "string",
              "format": "date",
              "description": "The date when the transaction occurred, in `YYYY-MM-DD` format.",
              "example": "2022-11-18"
            },
            "description": {
              "type": "string",
              "description": "The description of the transaction.",
              "example": "APPL3STORE"
            },
            "type": {
              "$ref": "#/components/schemas/EnumCategorizationTransactionType"
            },
            "amount": {
              "type": "number",
              "format": "float",
              "description": "The transaction amount.",
              "example": 650.89
            },
            "currency": {
              "type": "string",
              "description": "The currency of the account, in ISO-4217 format. For example:\n- 🇧🇷 BRL (Brazilian Real)\n- 🇨🇴 COP (Colombian Peso)\n- 🇲🇽 MXN (Mexican Peso)",
              "example": "BRL"
            },
            "institution": {
              "type": "string",
              "description": "The institution where the account is registered.\n\n>**Note:** This is the name that you use in your system to identify an institution.",
              "example": "BBVA"
            },
            "mcc": {
              "type": "integer",
              "format": "int32",
              "nullable": true,
              "description": "The four-digit ISO 18245 Merchant Category Code (MCC). We only return this value when `account_type` = `CREDIT_CARD`.",
              "example": 2345
            },
            "category": {
              "$ref": "#/components/schemas/EnumCategorizationTransactionCategory"
            },
            "subcategory": {
              "$ref": "#/components/schemas/EnumCategorizationTransactionSubcategory"
            },
            "merchant": {
              "$ref": "#/components/schemas/CategorizationMerchantData"
            }
          }
        },
        "Categorization": {
          "type": "object",
          "properties": {
            "transactions": {
              "type": "array",
              "description": "An array of enriched transaction objects.",
              "items": {
                "$ref": "#/components/schemas/CategorizationBody"
              }
            }
          }
        },
        "SecretKeys": {
          "type": "object",
          "required": [
            "id",
            "password",
            "created_at",
            "last_used"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the Payments API `secretId`.",
              "example": "fc6694b5-ced2-47db-8d14-f15c9e942f31"
            },
            "password": {
              "type": "string",
              "description": "Your Payments API `secretPassword`. This value is obfuscated.",
              "example": "******"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the secret key was created.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "last_used": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the secret key was last used.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            }
          }
        },
        "SecretKeysPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://api.belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of secret keys objects.",
              "items": {
                "$ref": "#/components/schemas/SecretKeys"
              }
            }
          }
        },
        "paymentWebhook": {
          "type": "object",
          "required": [
            "id",
            "name",
            "url",
            "created_at",
            "created_by"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the webhook.",
              "example": "32ab6809-6253-4fb0-be0f-94cce6ebb692"
            },
            "name": {
              "title": "string",
              "description": "The name you provided to identify the webhook.",
              "example": "Your webhook name"
            },
            "url": {
              "type": "string",
              "description": "The URL where webhook events should be sent to.",
              "example": "https://mycompany.com/security/webhook"
            },
            "auth_header": {
              "type": "string",
              "description": "The authentication header for the request. **Must** be set to `Authorization`.",
              "example": "Authorization"
            },
            "auth_token": {
              "type": "string",
              "description": "The authentication token you need to send webhook events. This value is obfuscated.",
              "example": "*******"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the webhook was created in our database.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID of the user that created the webhook.",
              "example": "38322582-7c76-4775-abe8-0fb2bdeb8204"
            }
          }
        },
        "PaymentsWebhooksPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://api.belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of webhook objects.",
              "items": {
                "$ref": "#/components/schemas/paymentWebhook"
              }
            }
          }
        },
        "PaymentWebhookRequest": {
          "type": "object",
          "required": [
            "name",
            "url"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The name you want to provide to identify the webhook.",
              "example": "Your webhook name"
            },
            "url": {
              "type": "string",
              "description": "The URL where webhook events should be sent to.",
              "example": "https://mycompany.com/security/webhook"
            },
            "auth_header": {
              "type": "string",
              "description": "The authentication header for the request. **Must** be set to `Authorization`.",
              "example": "Authorization"
            },
            "auth_token": {
              "type": "string",
              "description": "The authentication token you need to send webhook events. Can be either:\n\n\n  - `Bearer` and a token (for Bearer authentication). \n  - `Basic` and a base64-encoded username:password string (for Basic authentication).",
              "example": "Bearer hv7alD71j0dzXf09iKfg7u"
            }
          }
        },
        "EnumPaymentsCountry": {
          "type": "string",
          "enum": [
            "BRA",
            "COL"
          ],
          "maxLength": 3,
          "description": "The customer's country of residence.\n\n\n-  BRA (🇧🇷 Brazil)\n-  COL (🇨🇴 Colombia)\n",
          "example": "COL"
        },
        "InstitutionFormField": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The username, password, or username type field.",
              "example": "username"
            },
            "type": {
              "type": "string",
              "description": "The input type for the form field. For example, string.",
              "example": "text"
            },
            "label": {
              "type": "string",
              "description": "The label of the form field. For example:\n- Document\n- Clave\n- Token\n",
              "example": "Document"
            },
            "validation": {
              "type": "string",
              "description": "The type of input validation used for the field.",
              "example": "^.{1,}$"
            },
            "placeholder": {
              "type": "string",
              "description": "The placeholder text in the form field.",
              "example": "Username"
            },
            "validation_message": {
              "type": "string",
              "description": "The message displayed when an invalid input is provided in the form field.",
              "example": "Invalid client number"
            },
            "values": {
              "type": "array",
              "description": "Array of additional form field values.",
              "items": {
                "$ref": "#/components/schemas/InstitutionsFormFieldValues"
              }
            },
            "length": {
              "type": "integer",
              "description": "Number of digits allowed when the type is `token`.",
              "example": 6
            },
            "optional": {
              "type": "boolean",
              "description": "It indicates whether this form field is optional.",
              "example": false
            }
          }
        },
        "paymentInstitution": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID to reference the institution.",
              "example": "bbaceead-7b96-46d8-9354-38dec9707004"
            },
            "active": {
              "type": "boolean",
              "description": "Indicates whether this institution is available for use or not.",
              "example": true
            },
            "name": {
              "type": "string",
              "description": "The name of the institution, as designated by Belvo.",
              "example": "wakanda_national"
            },
            "display_name": {
              "type": "string",
              "description": "The customer-facing name of the institution.",
              "example": "Wakanda National Bank"
            },
            "legal_entity_name": {
              "type": "string",
              "nullable": true,
              "description": "The name of the legal entity of the institution, as registered with the relevant regulatory authority. Only applicable for 🇧🇷 Brazil OFPI.",
              "example": "Wakanda Bank, National Association"
            },
            "website": {
              "type": "string",
              "description": "The URL of the institution's website.",
              "example": "https://www.wakandanational.com"
            },
            "logo": {
              "type": "string",
              "description": "The URL of the institution's logo.",
              "example": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_logo.png"
            },
            "icon_logo": {
              "type": "string",
              "description": "The URL of the institution's icon logo.",
              "example": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_icon_logo.png"
            },
            "text_logo": {
              "type": "string",
              "description": "The URL of the institution's text logo.",
              "example": "https://belvo-api-media.s3.amazonaws.com/logos/wakandanational_text_logo.png"
            },
            "primary_color": {
              "type": "string",
              "description": "The primary color on the institution's website.",
              "example": "#fdbc24"
            },
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "form_fields": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InstitutionFormField"
              }
            }
          }
        },
        "PaymentsInstitutionsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of institution objects.",
              "items": {
                "$ref": "#/components/schemas/paymentInstitution"
              }
            }
          }
        },
        "EnumCustomerType": {
          "type": "string",
          "enum": [
            "INDIVIDUAL",
            "BUSINESS"
          ],
          "minLength": 8,
          "maxLength": 10,
          "description": "The type of customer. Can be either:\n\n  - `INDIVIDUAL`\n  - `BUSINESS`\n    \n\n**Notes:** For 🇨🇴 Colombia's PSE, you can only create customers of type `INDIVIDUAL`.\n",
          "example": "INDIVIDUAL"
        },
        "EnumCustomerIdentifierTypeOfpi": {
          "type": "string",
          "enum": [
            "CPF",
            "CNPJ"
          ],
          "maxLength": 64,
          "description": "The customer's ID document type.\n\n- 🇧🇷 Brazil options: `CPF` or `CNPJ`.\n",
          "example": "CPF"
        },
        "CustomerOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "id",
            "created_at",
            "created_by",
            "customer_type",
            "name",
            "country",
            "email",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current customer.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the customer.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "customer_type": {
              "$ref": "#/components/schemas/EnumCustomerType"
            },
            "name": {
              "type": "string",
              "minLength": 5,
              "maxLength": 200,
              "description": "The full name of the customer.\n",
              "example": "Caetano Veloso"
            },
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "email": {
              "type": "string",
              "description": "The customer's email address.\n",
              "example": "caetano.veloso@musicabrazil.br"
            },
            "identifier": {
              "type": "string",
              "description": "The document number of the customer's ID.\n",
              "example": "00.000.000/0001-91"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypeOfpi"
            },
            "address": {
              "type": "string",
              "nullable": true,
              "minLength": 5,
              "maxLength": 150,
              "description": "The customers physical address.\n",
              "example": "Rua de Caetano Veloso 432, 70200 Brasilia"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "The customer's phone number.\n",
              "example": "3210-9876"
            }
          }
        },
        "EnumCustomerIdentifierTypePse": {
          "type": "string",
          "enum": [
            "CC",
            "PP",
            "CE",
            "TI",
            "NIT"
          ],
          "maxLength": 64,
          "description": "The customer's ID document type.\n\n- 🇨🇴 Colombia options: `CC`, `PP`, `CE`, `TI`, or `NIT`.\n",
          "example": "CC"
        },
        "CustomerPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "id",
            "created_at",
            "created_by",
            "customer_type",
            "name",
            "country",
            "email",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current customer.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the customer.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "customer_type": {
              "$ref": "#/components/schemas/EnumCustomerType"
            },
            "name": {
              "type": "string",
              "minLength": 5,
              "maxLength": 200,
              "description": "The full name of the customer.\n",
              "example": "Carlos Vives"
            },
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "email": {
              "type": "string",
              "description": "The customer's email address.\n",
              "example": "carlos.vives@musicacolombia.co"
            },
            "identifier": {
              "type": "string",
              "description": "The document number of the customer's ID.\n",
              "example": "1018760936"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypePse"
            },
            "address": {
              "type": "string",
              "nullable": true,
              "minLength": 5,
              "maxLength": 150,
              "description": "The customers physical address.\n\n\n**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.\n",
              "example": "Calle Carlos Vives 432, 80300 Bogota"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "The customer's phone number.\n\n\n**Note:** Apart from the first two and last two characters, all the rest of the characters are masked.\n",
              "example": "3210-9876"
            }
          }
        },
        "CustomerPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://api.belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of customer objects.",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CustomerOfpi"
                  },
                  {
                    "$ref": "#/components/schemas/CustomerPse"
                  }
                ]
              }
            }
          }
        },
        "CreateCustomerOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "customer_type",
            "name",
            "country",
            "email",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "customer_type": {
              "$ref": "#/components/schemas/EnumCustomerType"
            },
            "name": {
              "type": "string",
              "minLength": 5,
              "maxLength": 200,
              "description": "The full name of the customer you want to create.\n",
              "example": "Caetano Veloso"
            },
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "email": {
              "type": "string",
              "description": "The customer's email address.\n",
              "example": "caetano.veloso@musicabrazil.br"
            },
            "identifier": {
              "type": "string",
              "minLength": 1,
              "maxLength": 25,
              "description": "The document number of the customer's ID.\n",
              "example": "1018760936"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypeOfpi"
            },
            "address": {
              "type": "string",
              "nullable": true,
              "description": "The customer's physical address.\n",
              "example": "Rua de Caetano Veloso 432, 70200 Brasilia"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "The customer's phone number.\n",
              "example": "231.002.999-00"
            }
          }
        },
        "CreateCustomerPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "customer_type",
            "name",
            "country",
            "email",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "customer_type": {
              "$ref": "#/components/schemas/EnumCustomerType"
            },
            "name": {
              "type": "string",
              "minLength": 5,
              "maxLength": 200,
              "description": "The full name of the customer you want to create.\n",
              "example": "Carlos Vives"
            },
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "email": {
              "type": "string",
              "description": "The customer's email address.\n",
              "example": "carlos.vives@musicacolombia.co"
            },
            "identifier": {
              "type": "string",
              "minLength": 1,
              "maxLength": 25,
              "description": "The document number of the customer's ID.\n",
              "example": "1018760936"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypePse"
            },
            "address": {
              "type": "string",
              "nullable": true,
              "description": "The customer's physical address.\n",
              "example": "Calle Carlos Vives 432, 80300 Bogota"
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "description": "The customer's phone number.\n",
              "example": "3210-9876"
            }
          }
        },
        "EnumBankAccountPixAccountTypeOfpi": {
          "type": "string",
          "enum": [
            "CHECKINGS",
            "SAVINGS",
            "SALARY"
          ],
          "description": "The type of bank account. Can be either:\n\n  - `CHECKINGS`\n  - `SAVINGS`\n  - `SALARY`",
          "example": "CHECKINGS"
        },
        "BankAccountDetailsOfpi": {
          "type": "object",
          "title": "OFPI (PIX Account Information)",
          "required": [
            "country",
            "account_type",
            "agency",
            "number"
          ],
          "properties": {
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "account_type": {
              "$ref": "#/components/schemas/EnumBankAccountPixAccountTypeOfpi"
            },
            "agency": {
              "type": "string",
              "description": "The agency (branch number) of the institution where the account was created.",
              "example": "0444"
            },
            "number": {
              "type": "string",
              "description": "The bank account number.",
              "example": "45722-0"
            }
          }
        },
        "BankAccountDetailsOfpiPix": {
          "type": "object",
          "title": "OFPI (PIX Keys)",
          "required": [
            "country",
            "pix_key"
          ],
          "properties": {
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "pix_key": {
              "type": "string",
              "description": "The PIX key identifier of the bank account.",
              "example": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab"
            }
          }
        },
        "EnumBankAccountHolderTypeOfpi": {
          "type": "string",
          "enum": [
            "INDIVIDUAL",
            "BUSINESS"
          ],
          "description": "The type of bank account. Can be either `INDIVIDUAL` or `BUSINESS`.",
          "example": "BUSINESS"
        },
        "HolderInformationBusinessOfpiResponse": {
          "type": "object",
          "title": "BUSINESS",
          "required": [
            "name",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The bank account holder's first name.",
              "example": "Caetano Veloso Entertainment Universe"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypeOfpi"
            },
            "identifier": {
              "type": "string",
              "description": "The document number of the company's ID.",
              "example": "231.002.999-00"
            }
          }
        },
        "HolderInformationIndividualOfpiResponse": {
          "type": "object",
          "title": "INDIVIDUAL",
          "required": [
            "first_name",
            "last_name",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "first_name": {
              "type": "string",
              "description": "The bank account holder's first name.",
              "example": "Dom"
            },
            "last_name": {
              "type": "string",
              "description": "The bank account holder's last name.",
              "example": "Mesa"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypeOfpi"
            },
            "identifier": {
              "type": "string",
              "description": "The document number of the customer's ID.",
              "example": "231.002.999-00"
            }
          }
        },
        "HolderResponseOfpi": {
          "type": "object",
          "title": "OFPI",
          "required": [
            "type",
            "information"
          ],
          "description": "Details regarding the bank account holder.",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/EnumBankAccountHolderTypeOfpi"
            },
            "information": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HolderInformationBusinessOfpiResponse"
                },
                {
                  "$ref": "#/components/schemas/HolderInformationIndividualOfpiResponse"
                }
              ]
            }
          }
        },
        "BankAccountOfpiResponse": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "id",
            "created_at",
            "institution",
            "created_by",
            "holder",
            "customer",
            "details"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current bank account.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the bank account.",
              "example": "62053a72-e2d5-4c95-a578-6b16616900ac"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "nullable": true,
              "description": "Belvo's unique ID for the customer associated with the bank account.\nFor `BUSINESS` bank accounts, this field is `null`.",
              "example": null
            },
            "institution": {
              "type": "string",
              "format": "uuid",
              "nullable": true,
              "description": "Belvo's unique ID for the institution that the bank account is created in.\nFor `BUSINESS` bank accounts that Belvo creates for organizations, this field is `null`.",
              "example": null
            },
            "details": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BankAccountDetailsOfpi"
                },
                {
                  "$ref": "#/components/schemas/BankAccountDetailsOfpiPix"
                }
              ]
            },
            "holder": {
              "$ref": "#/components/schemas/HolderResponseOfpi"
            }
          }
        },
        "EnumBankAccountHolderTypePse": {
          "type": "string",
          "default": "BUSINESS",
          "enum": [
            "BUSINESS"
          ],
          "description": "The type of bank account to create in Belvo. For business bank accounts, this field must the set to `BUSINESS`.",
          "example": "BUSINESS"
        },
        "HolderInformationBusinessPseResponse": {
          "type": "object",
          "title": "PSE",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The business name. This value is obfuscated.\n\nNote, this is only applicable if the `holder.type` is set to `BUSINESS`.",
              "example": "Tr******es"
            }
          }
        },
        "HolderBusinessResponsePse": {
          "type": "object",
          "title": "Business",
          "required": [
            "type",
            "information"
          ],
          "description": "Details regarding the business bank account holder.",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/EnumBankAccountHolderTypePse"
            },
            "Information": {
              "$ref": "#/components/schemas/HolderInformationBusinessPseResponse"
            }
          }
        },
        "BankAccountBusinessPse": {
          "type": "object",
          "title": "Business Bank Account",
          "required": [
            "id",
            "created_at",
            "created_by",
            "number",
            "customer",
            "institution",
            "holder",
            "details"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current bank account.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was first created in Belvo's database.",
              "example": "2023-02-15T07:52:31.998761Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the bank account.",
              "example": "62053a72-e2d5-4c95-a578-6b16616900ac"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "nullable": true,
              "description": "Belvo's unique ID for the customer associated with the bank account.\nFor `BUSINESS` bank accounts, this field is `null`.",
              "example": null
            },
            "institution": {
              "type": "string",
              "format": "uuid",
              "nullable": true,
              "description": "Belvo's unique ID for the institution that the bank account is created in.\nFor `BUSINESS` bank accounts that Belvo creates for organizations, this field is `null`.",
              "example": null
            },
            "number": {
              "type": "string",
              "description": "The bank account number of the payment beneficiary.\n",
              "example": "******5633"
            },
            "holder": {
              "$ref": "#/components/schemas/HolderBusinessResponsePse"
            },
            "details": {
              "type": "object",
              "description": "For PSE, this field will return an empty object.",
              "example": {}
            },
            "metadata": {
              "type": "object",
              "description": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.\n\n⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "example": {
                "internal_reference_id": "GGq73487w2"
              }
            }
          }
        },
        "BankAccountPseResponse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "oneOf": [
            {
              "$ref": "#/components/schemas/BankAccountBusinessPse"
            }
          ]
        },
        "BankAccountPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://api.belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of bank account objects.",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountOfpiResponse"
                  },
                  {
                    "$ref": "#/components/schemas/BankAccountPseResponse"
                  }
                ]
              }
            }
          }
        },
        "HolderInformationBusinessOfpi": {
          "type": "object",
          "description": "Additional information about the bank account holder required in order to create the account for OFPI.",
          "title": "BUSINESS",
          "required": [
            "name",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The bank account holder's first name.",
              "example": "Caetano Veloso Entertainment Universe"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypeOfpi"
            },
            "identifier": {
              "type": "string",
              "description": "The document number of the company's ID.",
              "example": "231.002.999-00"
            }
          }
        },
        "HolderInformationIndividualOfpi": {
          "type": "object",
          "description": "Additional information about the bank account holder required in order to create the account for OFPI.",
          "title": "INDIVIDUAL",
          "required": [
            "first_name",
            "last_name",
            "identifier",
            "identifier_type"
          ],
          "properties": {
            "first_name": {
              "type": "string",
              "description": "The bank account holder's first name.",
              "example": "Caetano"
            },
            "last_name": {
              "type": "string",
              "description": "The bank account holder's last name.",
              "example": "Veloso"
            },
            "identifier_type": {
              "$ref": "#/components/schemas/EnumCustomerIdentifierTypeOfpi"
            },
            "identifier": {
              "type": "string",
              "description": "The document number of the customer's ID.",
              "example": "231.002.999-00"
            }
          }
        },
        "BankAccountHolderRequestOfpi": {
          "type": "object",
          "title": "OFPI",
          "required": [
            "type",
            "information"
          ],
          "description": "Details regarding the business bank account holder.",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/EnumBankAccountHolderTypeOfpi"
            },
            "information": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HolderInformationBusinessOfpi"
                },
                {
                  "$ref": "#/components/schemas/HolderInformationIndividualOfpi"
                }
              ]
            }
          }
        },
        "CreateBankAccountOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "institution",
            "holder",
            "details"
          ],
          "properties": {
            "institution": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the institution that the bank account is created in.",
              "example": "f512d996-583a-4a91-8b5b-eba2e103b068"
            },
            "holder": {
              "description": "Information regarding the individual bank account holder.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BankAccountHolderRequestOfpi"
                }
              ]
            },
            "details": {
              "description": "Information regarding the bank account.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BankAccountDetailsOfpi"
                },
                {
                  "$ref": "#/components/schemas/BankAccountDetailsOfpiPix"
                }
              ]
            }
          }
        },
        "HolderInformationBusinessPse": {
          "type": "object",
          "title": "PSE",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "description": "The business name.\n\nNote, this is only applicable if the `holder.type` is set to `BUSINESS`.",
              "example": "Trusty documentation services"
            }
          }
        },
        "HolderBusinessPse": {
          "type": "object",
          "title": "PSE",
          "required": [
            "type",
            "information"
          ],
          "description": "Details regarding the business bank account holder.",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/EnumBankAccountHolderTypePse"
            },
            "information": {
              "$ref": "#/components/schemas/HolderInformationBusinessPse"
            }
          }
        },
        "PaymentsWay": {
          "type": "object",
          "title": "Payments Way",
          "required": [
            "terminal_id",
            "form_id"
          ],
          "properties": {
            "terminal_id": {
              "type": "integer",
              "format": "int32",
              "description": "Your unique Payments Way terminal ID.\n\n**Note:** Belvo provides you with the Payments Way terminal ID during your onboarding process. If you don't have one yet, just reach out to us at payments-info@belvo.com and we'll give you a hand with this. 🙂",
              "example": 123
            },
            "form_id": {
              "type": "integer",
              "format": "int32",
              "description": "Your unique Payments Way form ID.\n\n**Note:** Belvo provides you with the Payments Way form ID during your onboarding process. If you don't have one yet, just reach out to us at payments-info@belvo.com and we'll give you a hand with this. 🙂",
              "example": 321
            }
          }
        },
        "ProvidersPse": {
          "type": "object",
          "title": "PSE",
          "properties": {
            "payments_way": {
              "$ref": "#/components/schemas/PaymentsWay"
            }
          }
        },
        "CreateBankAccountPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "holder",
            "providers",
            "number"
          ],
          "properties": {
            "holder": {
              "description": "Information regarding the business bank account holder.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HolderBusinessPse"
                }
              ]
            },
            "providers": {
              "description": "Information about the payment service provider, required in order to establish a connection and process requests. For PSE, the value must be `payments_way`.",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ProvidersPse"
                }
              ]
            },
            "number": {
              "type": "string",
              "description": "The bank account number of the payment beneficiary.\n",
              "example": "12343453245633"
            },
            "metadata": {
              "type": "object",
              "description": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.\n\n⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "example": {
                "internal_reference_id": "GGq73487w2"
              }
            }
          }
        },
        "PaymentLinkCallbackUrlsResponse": {
          "type": "object",
          "title": "Payment Link Callback URLs",
          "description": "The URLs that the user should be redirected to.\n\n**Note:** This field will return an empty object if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
          "properties": {
            "cancel": {
              "type": "string",
              "description": "The URL that the user should be redirected to if they decide to cancel the payment process or if an error occurs.",
              "example": "https://www.acmecorp.com/checkout/3487548/cancel"
            },
            "success": {
              "type": "string",
              "description": "The URL that the user should be redirected to when they complete the payment process successfully.",
              "example": "https://www.acmecorp.com/checkout/3487548/success"
            }
          }
        },
        "EnumPaymentLinksStatus": {
          "type": "string",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ],
          "description": "The current status of the payment link. Can be either:\n\n  - `ACTIVE` meaning that the payment intent's status is either `REQUIRES_PAYMENT_METHOD`, `REQUIRES_ACTION`, or `PROCESSING`.\n  - `INACTIVE` meaning that the payment intent's status is either `SUCCEEDED` or `FAILED`.\n\n**Note:** You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
          "example": "ACTIVE"
        },
        "PaymentLinkListOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "id",
            "created_at",
            "created_by",
            "payment_url",
            "callback_urls",
            "status",
            "expires_in",
            "expires_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current payment link.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the payment link.",
              "example": "62053a72-e2d5-4c95-a578-6b16616900ac"
            },
            "payment_url": {
              "type": "string",
              "description": "The URL for the hosted-widget that will guide your user through the payments process.",
              "example": "https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "access_token": {
              "type": "string",
              "description": "The Belvo-generated access token for the payment link.\n\n**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "example": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "callback_urls": {
              "$ref": "#/components/schemas/PaymentLinkCallbackUrlsResponse"
            },
            "payment_intent": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the payment intent. You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
              "example": "b7dd85b1-671e-45c7-aba6-b4b37a8fc0c2"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the payment link was last updated.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "status": {
              "$ref": "#/components/schemas/EnumPaymentLinksStatus"
            },
            "expires_in": {
              "type": "string",
              "pattern": "\\d+([mhd])",
              "description": "The payment link expiration time.  ",
              "example": "7d"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the payment link is set to expire.\n",
              "example": "2023-02-09T08:45:50.406032Z"
            }
          }
        },
        "PaymentLinkListPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "id",
            "created_at",
            "created_by",
            "payment_url",
            "callback_urls",
            "status",
            "expires_in",
            "expires_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current payment link.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the payment link.",
              "example": "62053a72-e2d5-4c95-a578-6b16616900ac"
            },
            "payment_url": {
              "type": "string",
              "description": "The URL for the hosted-widget that will guide your user through the payments process.",
              "example": "https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "access_token": {
              "type": "string",
              "description": "The Belvo-generated access token for the payment link.\n\n**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "example": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "callback_urls": {
              "$ref": "#/components/schemas/PaymentLinkCallbackUrlsResponse"
            },
            "payment_intent": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the payment intent. You can retrieve the complete payment intent by using our [Get details of a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) request.",
              "example": "b7dd85b1-671e-45c7-aba6-b4b37a8fc0c2"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the payment link was last updated.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "status": {
              "$ref": "#/components/schemas/EnumPaymentLinksStatus"
            },
            "expires_in": {
              "type": "string",
              "pattern": "\\d+([mhd])",
              "description": "The payment link expiration time.  ",
              "example": "7d"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the payment link is set to expire.\n",
              "example": "2023-02-09T08:45:50.406032Z"
            }
          }
        },
        "PaymentLinkPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://api.belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of bank account objects.",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentLinkListOfpi"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentLinkListPse"
                  }
                ]
              }
            }
          }
        },
        "EnumPaymentLinkAllowedPaymentMethod": {
          "type": "string",
          "enum": [
            "open_finance",
            "pse"
          ],
          "description": "Selected payment method type.\n\n  - For 🇧🇷 Brazil's OFPI, the value must be `open_finance`.  \n  - For 🇨🇴 Colombia's PSE, the value must be `pse`.",
          "example": "open_finance"
        },
        "EnumPaymentLinkProvider": {
          "type": "string",
          "enum": [
            "belvo",
            "payments_way"
          ],
          "description": "The provider used for the payment link. \n\n\n- For 🇧🇷 Brazil's OFPI, the value must be `belvo`.  \n- For 🇨🇴 Colombia's PSE, the value must be `payments_way`.\n",
          "example": "belvo"
        },
        "PaymentLinksPaymentMethodDetailsBodyOfpi": {
          "type": "object",
          "title": "OFPB",
          "description": "Details about the organization's bank account that will receive the payment.",
          "required": [
            "beneficiary_bank_account"
          ],
          "properties": {
            "beneficiary_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "callback_url": {
              "type": "string",
              "description": "The URL to your application that your customer will be directed to once they confirm the payment in their bank application.",
              "example": "https://www.acmecorp.com/checkout/3487321"
            }
          }
        },
        "PaymentMethodDetailsOfpi": {
          "type": "object",
          "title": "OFPI",
          "description": "Object with information required by Open Finance Payments in Brazil to create a payment intent.",
          "required": [
            "open_finance"
          ],
          "properties": {
            "open_finance": {
              "$ref": "#/components/schemas/PaymentLinksPaymentMethodDetailsBodyOfpi"
            }
          }
        },
        "PaymentLinkCallbackUrls": {
          "type": "object",
          "title": "Payment Link Callback URLs",
          "properties": {
            "cancel": {
              "type": "string",
              "description": "The URL that the user should be redirected to if they decide to cancel the payment process or if an error occurs.\n\n**Note:** Not required if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
              "example": "https://www.acmecorp.com/checkout/3487548/cancel"
            },
            "success": {
              "type": "string",
              "description": "The URL that the user should be redirected to when they complete the payment process successfully.\n\n**Note:** Not required if your integration only generates payment links through the [Belvo Dashboard](https://dashboard.belvo.com/).",
              "example": "https://www.acmecorp.com/checkout/3487548/success"
            }
          }
        },
        "CreatePaymentLinkOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "amount",
            "customer",
            "description",
            "allowed_payment_method_types",
            "provider",
            "payment_method_details"
          ],
          "properties": {
            "amount": {
              "oneOf": [
                {
                  "type": "string",
                  "title": "string",
                  "pattern": "\\d+(?:\\.\\d{1,2})?",
                  "example": "1234.12"
                },
                {
                  "type": "number",
                  "format": "float",
                  "title": "float",
                  "minimum": 0.01,
                  "maximum": 9999999999.99,
                  "example": 1234.12
                }
              ],
              "description": "Amount to be paid by your customer. For OFPI, you can send through numbers with up to two decimal points, separated by a `.` period. For example: `1234.12`\n\n**Note:** You can send through this value either as a string or an float. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `1234.12`.\n"
            },
            "customer": {
              "type": "string",
              "description": "Belvo's unique ID to reference the customer.\n",
              "example": "06dc2f14-1217-4480-9b36-550a944a39d1"
            },
            "description": {
              "type": "string",
              "description": "The description of the payment.\n",
              "example": "Shoe payment"
            },
            "allowed_payment_method_types": {
              "type": "array",
              "description": "A list of payment method types allowed in this payment intent. For OFPI, this value must be set to `open_finance`.",
              "minItems": 1,
              "maxItems": 1,
              "items": {
                "$ref": "#/components/schemas/EnumPaymentLinkAllowedPaymentMethod"
              }
            },
            "provider": {
              "$ref": "#/components/schemas/EnumPaymentLinkProvider"
            },
            "payment_method_details": {
              "$ref": "#/components/schemas/PaymentMethodDetailsOfpi"
            },
            "callback_urls": {
              "$ref": "#/components/schemas/PaymentLinkCallbackUrls"
            },
            "expires_in": {
              "type": "string",
              "pattern": "\\d+([mhd])",
              "default": "7d",
              "description": "The payment link expiration time. It allows the following formats to be sent through:\n\n  - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.\n  - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.\n  - whole number + `d` for x amount of days. For example: `30d` for 30 days.\n\n  ℹ️ The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).",
              "example": "7d"
            }
          }
        },
        "PaymentLinksPaymentMethodDetailsBodyPse": {
          "type": "object",
          "title": "PSE",
          "description": "Details about the organization's bank account that will receive the payment.",
          "required": [
            "beneficiary_bank_account",
            "belvo_flow"
          ],
          "properties": {
            "beneficiary_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "callback_url": {
              "type": "string",
              "description": "The URL to your application that your customer will be directed to once they confirm the payment in their bank application.",
              "example": "https://www.acmecorp.com/checkout/3487321"
            },
            "belvo_flow": {
              "type": "boolean",
              "default": true,
              "description": "This parameter determines the payment flow of the payment intent. By default, this is set to `true` and the payment intent created is processed using the Belvo's payment flow and Belvo-integrated institutions. When set to `false`, the payment intent process uses institutions not integrated into Belvo's flow.",
              "example": true
            }
          }
        },
        "PaymentMethodDetailsPse": {
          "type": "object",
          "title": "PSE",
          "description": "Object with information required by PSE to create a payment intent.",
          "required": [
            "pse"
          ],
          "properties": {
            "pse": {
              "$ref": "#/components/schemas/PaymentLinksPaymentMethodDetailsBodyPse"
            }
          }
        },
        "CreatePaymentLinkPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "amount",
            "customer",
            "description",
            "provider",
            "payment_method_details"
          ],
          "properties": {
            "amount": {
              "oneOf": [
                {
                  "type": "string",
                  "title": "string",
                  "pattern": "[1-9]\\d{0,9}",
                  "example": "350000"
                },
                {
                  "type": "integer",
                  "format": "int64",
                  "title": "integer",
                  "maximum": 9999999999,
                  "minimum": 1,
                  "example": 350000
                }
              ],
              "description": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: `350000`.\n\n**Note:** You can send this value either as a string or an integer. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `350000.00`.\n"
            },
            "customer": {
              "type": "string",
              "description": "Belvo's unique ID to reference the customer.\n",
              "example": "06dc2f14-1217-4480-9b36-550a944a39d1"
            },
            "description": {
              "type": "string",
              "description": "The description of the payment.\n",
              "example": "Shoe payment"
            },
            "allowed_payment_method_types": {
              "type": "array",
              "description": "A list of payment method types allowed in this payment intent. For PSE, this value must be set to `pse`.",
              "minItems": 1,
              "maxItems": 1,
              "items": {
                "$ref": "#/components/schemas/EnumPaymentLinkAllowedPaymentMethod"
              }
            },
            "provider": {
              "$ref": "#/components/schemas/EnumPaymentLinkProvider"
            },
            "payment_method_details": {
              "$ref": "#/components/schemas/PaymentMethodDetailsPse"
            },
            "callback_urls": {
              "$ref": "#/components/schemas/PaymentLinkCallbackUrls"
            },
            "expires_in": {
              "type": "string",
              "pattern": "\\d+([mhd])",
              "default": "7d",
              "description": "The payment link expiration time. It allows the following formats to be sent through:\n\n  - whole number + `m` for x amount of minutes. For example: `15m` for 15 minutes.\n  - whole number + `h` for x amount of hours. For example: `12h` for 12 hours.\n  - whole number + `d` for x amount of days. For example: `30d` for 30 days.\n\n  ℹ️ The minimum expiration time allowed for a payment link is `1m` (1 minute) and the maximum is `90d` (90 days).",
              "example": "7d"
            }
          }
        },
        "EnumPaymentsCurrency": {
          "type": "string",
          "enum": [
            "BRL",
            "COP"
          ],
          "description": "The currency of the amount paid.\n\n\n  - 🇧🇷 BRL (Brazilian Real)\n  - 🇨🇴 COP (Colombian Peso)",
          "example": "COP"
        },
        "DisplayPaymentMethodInformationContentOfpi": {
          "type": "object",
          "title": "Display Open Finance Brazil payment method information",
          "description": "Object detailing what payment method information you need to display.",
          "properties": {
            "institutions": {
              "type": "array",
              "description": "An array of institution objects.",
              "items": {
                "$ref": "#/components/schemas/paymentInstitution"
              }
            }
          }
        },
        "NextStepDisplayPaymentMethodInformation": {
          "type": "object",
          "title": "OFPI -  Display Payment Method Information",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "open_finance_display_payment_method_information",
                "open_finance_display_confirmation_required",
                "open_finance_display_needs_redirect",
                "open_finance_display_payment_processing",
                "open_finance_display_payment_succeeded",
                "open_finance_display_payment_failed"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "open_finance_display_payment_method_information"
            },
            "open_finance_display_payment_method_information": {
              "$ref": "#/components/schemas/DisplayPaymentMethodInformationContentOfpi"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": false,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
              "example": false
            }
          }
        },
        "NeedsRedirectContent": {
          "type": "object",
          "description": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepNeedsRedirect": {
          "type": "object",
          "title": "OFPI - Needs Redirect",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "open_finance_display_payment_method_information",
                "open_finance_display_confirmation_required",
                "open_finance_display_needs_redirect",
                "open_finance_display_payment_processing",
                "open_finance_display_payment_succeeded",
                "open_finance_display_payment_failed"
              ],
              "description": "The type of `next_step` you need to follow.",
              "example": "open_finance_display_needs_redirect"
            },
            "open_finance_display_needs_redirect": {
              "$ref": "#/components/schemas/NeedsRedirectContent"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": false,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
              "example": false
            }
          }
        },
        "BankAccountDetailsOpenFinance": {
          "type": "object",
          "title": "OFPI (PIX Account Information)",
          "required": [
            "country",
            "account_type",
            "agency",
            "number"
          ],
          "properties": {
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "account_type": {
              "$ref": "#/components/schemas/EnumBankAccountPixAccountTypeOfpi"
            },
            "agency": {
              "type": "string",
              "description": "The agency (branch number) of the institution where the account was created.",
              "example": "0444"
            },
            "number": {
              "type": "string",
              "description": "The bank account number.",
              "example": "45722-0"
            }
          }
        },
        "BankAccountDetailsOpenFinancePix": {
          "type": "object",
          "title": "OFPI (PIX Keys)",
          "required": [
            "country",
            "pix_key"
          ],
          "properties": {
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "pix_key": {
              "type": "string",
              "description": "The PIX key identifier of the bank account.",
              "example": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab"
            }
          }
        },
        "BeneficiaryBankAccountOfpi": {
          "type": "object",
          "title": "Beneficiary Bank Account",
          "required": [
            "id",
            "created_at",
            "created_by",
            "customer",
            "institution",
            "number",
            "holder"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the beneficiary bank account.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the bank account.",
              "example": "62053a72-e2d5-4c95-a578-6b16616900ac"
            },
            "institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            },
            "details": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BankAccountDetailsOpenFinance"
                },
                {
                  "$ref": "#/components/schemas/BankAccountDetailsOpenFinancePix"
                }
              ]
            },
            "holder": {
              "$ref": "#/components/schemas/HolderResponseOfpi"
            }
          }
        },
        "DisplayConfirmationRequiredOfpi": {
          "type": "object",
          "title": "Display Open Finance Brazil confirmation required",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "beneficiary_bank_account": {
              "$ref": "#/components/schemas/BeneficiaryBankAccountOfpi"
            },
            "payer_name": {
              "type": "string",
              "description": "The name of the payer.",
              "example": "Caetano Veloso"
            },
            "payer_identifier": {
              "type": "string",
              "description": "The payer's ID.",
              "example": "LV890273900-23"
            },
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepDisplayConfirmationRequiredOfpi": {
          "type": "object",
          "title": "OFPI - Display Confirmation Required",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "open_finance_display_payment_method_information",
                "open_finance_display_confirmation_required",
                "open_finance_display_needs_redirect",
                "open_finance_display_payment_processing",
                "open_finance_display_payment_succeeded",
                "open_finance_display_payment_failed"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "open_finance_display_confirmation_required"
            },
            "open_finance_display_confirmation_required": {
              "$ref": "#/components/schemas/DisplayConfirmationRequiredOfpi"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": true,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
              "example": true
            }
          }
        },
        "DisplayPaymentProcessing": {
          "type": "object",
          "description": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepDisplayPaymentProcessing": {
          "type": "object",
          "title": "OFPI - Payment Processing",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "open_finance_display_payment_method_information",
                "open_finance_display_confirmation_required",
                "open_finance_display_needs_redirect",
                "open_finance_display_payment_processing",
                "open_finance_display_payment_succeeded",
                "open_finance_display_payment_failed"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "open_finance_display_payment_processing"
            },
            "open_finance_display_payment_processing": {
              "$ref": "#/components/schemas/DisplayPaymentProcessing"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": false,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
              "example": false
            }
          }
        },
        "DisplayPaymentSucceeded": {
          "type": "object",
          "description": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepDisplayPaymentSucceeded": {
          "type": "object",
          "title": "OFPI - Payment Succeeded",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "open_finance_display_payment_method_information",
                "open_finance_display_confirmation_required",
                "open_finance_display_needs_redirect",
                "open_finance_display_payment_processing",
                "open_finance_display_payment_succeeded",
                "open_finance_display_payment_failed"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "open_finance_display_payment_succeeded"
            },
            "open_finance_display_payment_succeeded": {
              "$ref": "#/components/schemas/DisplayPaymentSucceeded"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": false,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When set to `true`, you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
              "example": false
            }
          }
        },
        "DisplayPaymentFailed": {
          "type": "object",
          "description": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepDisplayPaymentFailed": {
          "type": "object",
          "title": "OFPI - Payment Failed",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "open_finance_display_payment_method_information",
                "open_finance_display_confirmation_required",
                "open_finance_display_needs_redirect",
                "open_finance_display_payment_processing",
                "open_finance_display_payment_succeeded",
                "open_finance_display_payment_failed"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "open_finance_display_payment_failed"
            },
            "open_finance_display_payment_failed": {
              "$ref": "#/components/schemas/DisplayPaymentFailed"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": false,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When set to `true`,you need to confirm the payment by making a PATCH request sending through `confirm: true`.",
              "example": false
            }
          }
        },
        "LastErrorPaymentError": {
          "type": "object",
          "title": "payment_error",
          "description": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened during the payment intent process.",
          "required": [
            "error_code",
            "error_message"
          ],
          "properties": {
            "error_code": {
              "type": "string",
              "description": "A unique error code (`payment_error`) that allows you to classify and handle the error programmatically.",
              "example": "payment_error"
            },
            "error_message": {
              "type": "string",
              "description": "A short description of the error.",
              "example": "Unexpected error to confirm the payment"
            }
          }
        },
        "PaymentIntentPaymentMethodDetailsBodyIndividualOfpi": {
          "type": "object",
          "description": "Payment method type selected.",
          "required": [
            "beneficiary_bank_account",
            "payer_institution",
            "callback_url"
          ],
          "properties": {
            "beneficiary_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "payer_institution": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID to reference the payer's institution.",
              "example": "600f1b4a-1ef9-4f89-b341-1a35f0c32cc0"
            },
            "callback_url": {
              "type": "string",
              "description": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
              "example": "https://www.acmecorp.com/checkout/3487321"
            },
            "cpf": {
              "type": "string",
              "nullable": true,
              "description": "The customer's CPF number. Only required when the `customer_type` is `BUSINESS`.\n\n**Note:** This value is obfuscated.",
              "example": "***444777**"
            }
          }
        },
        "PaymentIntentPaymentMethodDetailsIndividualOfpi": {
          "type": "object",
          "title": "INDIVIDUAL",
          "description": "Details about the OFPI payment method.",
          "required": [
            "open_finance"
          ],
          "properties": {
            "open_finance": {
              "$ref": "#/components/schemas/PaymentIntentPaymentMethodDetailsBodyIndividualOfpi"
            }
          }
        },
        "PaymentIntentPaymentMethodDetailsBodyBusinessOfpi": {
          "type": "object",
          "description": "Payment method type selected.",
          "required": [
            "beneficiary_bank_account",
            "payer_institution",
            "callback_url",
            "cpf"
          ],
          "properties": {
            "beneficiary_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "payer_institution": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID to reference the payer's institution.",
              "example": "600f1b4a-1ef9-4f89-b341-1a35f0c32cc0"
            },
            "callback_url": {
              "type": "string",
              "description": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
              "example": "https://www.acmecorp.com/checkout/3487321"
            },
            "cpf": {
              "type": "string",
              "nullable": true,
              "description": "The customer's CPF number. Only required when the `customer_type` is `BUSINESS`.\n\n**Note:** This value is obfuscated.",
              "example": "***444777**"
            }
          }
        },
        "PaymentIntentPaymentMethodDetailsBusinessOfpi": {
          "type": "object",
          "title": "BUSINESS",
          "description": "Details about the OFPI payment method.",
          "required": [
            "open_finance"
          ],
          "properties": {
            "open_finance": {
              "$ref": "#/components/schemas/PaymentIntentPaymentMethodDetailsBodyBusinessOfpi"
            }
          }
        },
        "PaymentMethodInformationBodyOfpi": {
          "type": "object",
          "description": "Payment method type selected.",
          "properties": {
            "provider_request_id": {
              "type": "string",
              "nullable": true,
              "description": "Unique ID for the payment, as sent by the provider.",
              "example": "978c0c97ea847e78e8849634473c1f1"
            },
            "redirect_url": {
              "type": "string",
              "nullable": true,
              "description": "URL that redirects the user to the institution's website.",
              "example": "https://wakandanational.com/"
            },
            "end_to_end_id": {
              "type": "string",
              "nullable": true,
              "description": "A unique ID for the transaction in the Brazil's PIX payment system.",
              "example": "F203262942022211117487a213b1d140"
            }
          }
        },
        "PaymentMethodInformationOfpi": {
          "type": "object",
          "title": "OFPI",
          "description": "Information about the payment method selected.",
          "properties": {
            "open_finance": {
              "$ref": "#/components/schemas/PaymentMethodInformationBodyOfpi"
            }
          }
        },
        "ChargePaymentMethodDetailsPseContent": {
          "type": "object",
          "description": "Information about the payer of a PSE payment.",
          "properties": {
            "payer_institution": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier for the payer’s institution.",
              "example": "db201c6a-e0ee-4caa-92d6-72b480d6d86f"
            },
            "payer_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the customer’s bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            }
          }
        },
        "ChargePaymentMethodDetailsPse": {
          "type": "object",
          "title": "PSE",
          "description": "Details about the payment method.",
          "properties": {
            "pse": {
              "$ref": "#/components/schemas/ChargePaymentMethodDetailsPseContent"
            }
          }
        },
        "ChargePaymentMethodDetailsOfpiContent": {
          "type": "object",
          "description": "Information about the payer of a PSE payment.",
          "properties": {
            "payer_institution": {
              "type": "string",
              "format": "uuid",
              "description": "Unique identifier for the payer’s institution.",
              "example": "db201c6a-e0ee-4caa-92d6-72b480d6d86f"
            },
            "beneficiary_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            }
          }
        },
        "ChargePaymentMethodDetailsOfpi": {
          "type": "object",
          "title": "OFPI",
          "description": "Details about the payment method.",
          "properties": {
            "open_finance": {
              "$ref": "#/components/schemas/ChargePaymentMethodDetailsOfpiContent"
            }
          }
        },
        "PaymentMethodInformationBodyPse": {
          "type": "object",
          "description": "Payment method type selected.",
          "properties": {
            "provider_request_id": {
              "type": "string",
              "nullable": true,
              "description": "Unique ID for the payment, as sent by the provider.",
              "example": "c978c0c97ea847e78e8849634473c1f1"
            },
            "redirect_url": {
              "type": "string",
              "nullable": true,
              "description": "URL that redirects the user to the institution's website.",
              "example": "https://wakandanational.com/"
            },
            "bank_payment_id": {
              "type": "string",
              "nullable": true,
              "description": "Unique payment ID provided the institution.",
              "example": "456213985641233659874512459842"
            },
            "end_to_end_id": {
              "type": "string",
              "nullable": true,
              "description": "A unique ID for the transaction in Colombia's Payments Way system.",
              "example": "2007300520"
            }
          }
        },
        "PaymentMethodInformationPse": {
          "type": "object",
          "title": "PSE",
          "description": "Information about the payment method selected.\n\n**Note**: If no payment method information is associated, we return an empty array.",
          "properties": {
            "pse": {
              "$ref": "#/components/schemas/PaymentMethodInformationBodyPse"
            }
          }
        },
        "EnumPaymentTransactionType": {
          "type": "string",
          "enum": [
            "INFLOW",
            "OUTFLOW"
          ],
          "description": "The direction of the transaction.\n\n  - `INFLOW` indicates money coming into the account.\n  - `OUTFLOW` indicates money coming out of the account.",
          "example": "INFLOW"
        },
        "TransactionBankAccountOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "description": "Object containing the payer's bank account information. For OFPI, this field will return an empty object."
        },
        "TransactionBankAccountBodyPse": {
          "type": "object",
          "title": "Bank account PSE",
          "description": "Information about the payer's bank account. Belvo returns the bank account ID when the account is already saved in the Belvo database.",
          "properties": {
            "bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier for the payer’s bank account.",
              "example": "db201c6a-e0ee-4caa-92d6-72b480d6d86f"
            }
          }
        },
        "BankAccountInformationContentPse": {
          "type": "object",
          "description": "Information about the payer's institution",
          "properties": {
            "payer_institution": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier for the payer’s institution.",
              "example": "db201c6a-e0ee-4caa-92d6-72b480d6d86f"
            }
          }
        },
        "BankAccountInformationPse": {
          "type": "object",
          "title": "Bank account information PSE",
          "description": "Information about the payer's bank account. Belvo returns this object when the payer's bank account information is not saved in the Belvo database.",
          "properties": {
            "bank_account_information": {
              "$ref": "#/components/schemas/BankAccountInformationContentPse"
            }
          }
        },
        "TransactionBankAccountPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "description": "Object containing the payer's bank account information.",
          "oneOf": [
            {
              "$ref": "#/components/schemas/TransactionBankAccountBodyPse"
            },
            {
              "$ref": "#/components/schemas/BankAccountInformationPse"
            }
          ]
        },
        "paymentTransaction": {
          "type": "object",
          "required": [
            "id",
            "created_at",
            "created_by",
            "amount",
            "currency",
            "description",
            "transaction_type",
            "beneficiary",
            "payer",
            "charge"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo’s unique ID to reference the transaction.",
              "example": "fd0f3303-cafb-47ea-9753-21155cb144ab"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the payment.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "amount": {
              "type": "string",
              "description": "The transaction amount.\n\n\n**Note**: The amount displayed is always positive as we indicate the direction of the transaction in `transaction_type` parameter.\n",
              "example": "1020.00"
            },
            "currency": {
              "$ref": "#/components/schemas/EnumPaymentsCurrency"
            },
            "description": {
              "type": "string",
              "description": "The description of the payment.\n",
              "example": "Training shoes"
            },
            "transaction_type": {
              "$ref": "#/components/schemas/EnumPaymentTransactionType"
            },
            "beneficiary": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "payer": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransactionBankAccountOfpi"
                },
                {
                  "$ref": "#/components/schemas/TransactionBankAccountPse"
                }
              ]
            },
            "payment_intent": {
              "type": "string",
              "format": "uuid",
              "description": "The unique ID of the payment intent associated with the transaction.",
              "example": "004a28bb-fac2-4172-884b-5b6ea15314ad"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the customer asscociated with this transaction.",
              "example": "9eebd63b-3339-44a9-8a5a-72bb6cb2f310"
            }
          }
        },
        "Charge": {
          "type": "object",
          "required": [
            "id",
            "created_at",
            "failure_code",
            "failure_message",
            "status",
            "updated_at",
            "amount",
            "beneficiary",
            "provider",
            "metadata",
            "payment_method_details",
            "payment_method_information"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current charge.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the charge.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the customer that the charge was created for.",
              "example": "531aa631-70a0-4eeb-ab97-51dea3e90c89"
            },
            "failure_code": {
              "type": "string",
              "nullable": true,
              "description": "Error code that explains the reason behind a payment being unsuccessful (if applicable).\n",
              "example": null
            },
            "failure_message": {
              "type": "string",
              "nullable": true,
              "description": "Further information regarding the `failure_code`.\n",
              "example": null
            },
            "status": {
              "type": "string",
              "enum": [
                "PENDING",
                "SUCCEEDED",
                "FAILED"
              ],
              "description": "The current status of the charge.\n",
              "example": "PENDING"
            },
            "amount": {
              "type": "string",
              "nullable": true,
              "description": "The amount of the charge.\n",
              "example": "100.12"
            },
            "currency": {
              "$ref": "#/components/schemas/EnumPaymentsCurrency"
            },
            "description": {
              "type": "string",
              "description": "The description of the payment.\n",
              "example": "Training shoes"
            },
            "metadata": {
              "type": "object",
              "description": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.\n\n⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "example": {
                "internal_reference_id": "GGq73487w2"
              }
            },
            "beneficiary": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary’s bank account.",
              "example": "58524ccc-89ac-4ab6-b62b-c3da3f19a722"
            },
            "provider": {
              "$ref": "#/components/schemas/EnumPaymentLinkProvider"
            },
            "payment_method_type": {
              "$ref": "#/components/schemas/EnumPaymentLinkAllowedPaymentMethod"
            },
            "payment_method_details": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChargePaymentMethodDetailsPse"
                },
                {
                  "$ref": "#/components/schemas/ChargePaymentMethodDetailsOfpi"
                }
              ]
            },
            "payment_method_information": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethodInformationPse"
                }
              ]
            },
            "payment_intent": {
              "type": "string",
              "format": "uuid",
              "description": "The `payment_intent.id` associated with this charge.",
              "example": "50c04229-7b1d-4a53-951c-8ad53e10c6ca"
            },
            "transactions": {
              "type": "array",
              "description": "An array of Transaction objects relating to the charge.",
              "items": {
                "$ref": "#/components/schemas/paymentTransaction"
              }
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the status of the charge was last updated.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            }
          }
        },
        "EnumPaymentIntentStatus": {
          "type": "string",
          "enum": [
            "REQUIRES_PAYMENT_METHOD",
            "REQUIRES_ACTION",
            "SUCCEEDED",
            "PROCESSING",
            "FAILED"
          ],
          "description": "The current status of the payment intent.\n",
          "example": "PROCESSING"
        },
        "PaymentIntentOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "id",
            "created_at",
            "created_by",
            "customer",
            "allowed_payment_method_types",
            "amount",
            "currency",
            "description",
            "failure_code",
            "failure_message",
            "next_step",
            "last_error",
            "payment_method_details",
            "payment_method_information",
            "provider",
            "status",
            "updated_at",
            "selected_payment_method_type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current payment intent.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created this payment intent.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the customer related to this payment intent.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "allowed_payment_method_types": {
              "type": "array",
              "description": "A list of payment method types allowed in this payment intent. For OFPI, the value will be `open_finance`.",
              "items": {
                "type": "string",
                "example": "open_finance"
              }
            },
            "amount": {
              "type": "string",
              "description": "Amount to be paid by your customer.\n",
              "example": "1234.12"
            },
            "currency": {
              "$ref": "#/components/schemas/EnumPaymentsCurrency"
            },
            "description": {
              "type": "string",
              "description": "The description of the payment.\n",
              "example": "Training shoes"
            },
            "failure_code": {
              "type": "string",
              "nullable": true,
              "description": "Error code that explains the reason behind a payment being unsuccessful (if applicable).\n",
              "example": null
            },
            "failure_message": {
              "type": "string",
              "nullable": true,
              "description": "Further information regarding the `failure_code`.\n",
              "example": null
            },
            "metadata": {
              "type": "object",
              "description": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.\n\n⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "example": {
                "internal_reference_id": "GGq73487w2"
              }
            },
            "next_step": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/NextStepDisplayPaymentMethodInformation"
                },
                {
                  "$ref": "#/components/schemas/NextStepNeedsRedirect"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayConfirmationRequiredOfpi"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayPaymentProcessing"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayPaymentSucceeded"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayPaymentFailed"
                }
              ]
            },
            "last_error": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LastErrorPaymentError"
                }
              ]
            },
            "payment_method_details": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PaymentIntentPaymentMethodDetailsIndividualOfpi"
                },
                {
                  "$ref": "#/components/schemas/PaymentIntentPaymentMethodDetailsBusinessOfpi"
                }
              ]
            },
            "payment_method_information": {
              "$ref": "#/components/schemas/PaymentMethodInformationOfpi"
            },
            "charges": {
              "type": "array",
              "deprecated": true,
              "description": "An array of charge objects related to this paymnet intent. If no charges are associated, we return an empty array.\n\n**Note**: The charges resource will be deprecated and removed from our API by end of Q1 2023. We recommend not using any data from this resource.",
              "items": {
                "$ref": "#/components/schemas/Charge"
              }
            },
            "provider": {
              "$ref": "#/components/schemas/EnumPaymentLinkProvider"
            },
            "selected_payment_method_type": {
              "$ref": "#/components/schemas/EnumPaymentLinkAllowedPaymentMethod"
            },
            "status": {
              "$ref": "#/components/schemas/EnumPaymentIntentStatus"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the payment intent was last updated.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            }
          }
        },
        "PaymentLinkOfpi": {
          "type": "object",
          "title": "Brazil 🇧🇷 OFPI",
          "required": [
            "id",
            "created_at",
            "created_by",
            "payment_url",
            "callback_urls",
            "status",
            "expires_in",
            "expires_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current payment link.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the payment link.",
              "example": "62053a72-e2d5-4c95-a578-6b16616900ac"
            },
            "payment_url": {
              "type": "string",
              "description": "The URL for the hosted-widget that will guide your user through the payments process.",
              "example": "https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "access_token": {
              "type": "string",
              "description": "The Belvo-generated access token for the payment link.\n\n**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "example": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "callback_urls": {
              "$ref": "#/components/schemas/PaymentLinkCallbackUrlsResponse"
            },
            "payment_intent": {
              "$ref": "#/components/schemas/PaymentIntentOfpi"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the payment link was last updated.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "status": {
              "$ref": "#/components/schemas/EnumPaymentLinksStatus"
            },
            "expires_in": {
              "type": "string",
              "pattern": "\\d+([mhd])",
              "description": "The payment link expiration time.  ",
              "example": "7d"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the payment link is set to expire.\n",
              "example": "2023-02-09T08:45:50.406032Z"
            }
          }
        },
        "EnumPaymentIntentHolderTypePse": {
          "type": "string",
          "enum": [
            "INDIVIDUAL",
            "BUSINESS"
          ],
          "description": "Type of bank account holder. For PSE, this value must be `INDIVIDUAL`.",
          "example": "INDIVIDUAL"
        },
        "HolderBankAccountInformationPse": {
          "type": "object",
          "description": "Object with additional information about the individual that holds the bank account.",
          "properties": {
            "first_name": {
              "type": "string",
              "description": "The account holder's first name.",
              "example": "Carlos"
            },
            "last_name": {
              "type": "string",
              "description": "The account holder's last name.",
              "example": "Vives"
            }
          }
        },
        "HolderBankAccountPse": {
          "type": "object",
          "description": "Details regarding the bank account holder.",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/EnumPaymentIntentHolderTypePse"
            },
            "information": {
              "$ref": "#/components/schemas/HolderBankAccountInformationPse"
            }
          }
        },
        "PaymentMethodInformationDetailsPse": {
          "type": "object",
          "properties": {
            "country": {
              "$ref": "#/components/schemas/EnumPaymentsCountry"
            },
            "account_type": {
              "type": "string",
              "description": "The type of bank account. For example, `Ahorros` or `Corriente`.",
              "example": "Ahorros"
            }
          }
        },
        "PaymentMethodInfoCustomerBankAccountsPse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the customer’s bank account.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current customer.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            },
            "number": {
              "type": "string",
              "description": "The customer's bank account number. This value is obfuscated.",
              "example": "******1234"
            },
            "holder": {
              "$ref": "#/components/schemas/HolderBankAccountPse"
            },
            "details": {
              "$ref": "#/components/schemas/PaymentMethodInformationDetailsPse"
            }
          }
        },
        "DisplayPaymentMethodInformationContentPse": {
          "type": "object",
          "title": "Display PSE payment method information",
          "description": "Object detailing what payment method information you need to display.",
          "properties": {
            "customer_bank_accounts": {
              "type": "array",
              "description": "Array of bank account objects.\n\n**Note**: If there are no customer accounts saved in the Belvo database, we return an empty array.",
              "items": {
                "$ref": "#/components/schemas/PaymentMethodInfoCustomerBankAccountsPse"
              }
            },
            "institutions": {
              "type": "array",
              "description": "An array of institution objects.",
              "items": {
                "$ref": "#/components/schemas/paymentInstitution"
              }
            }
          }
        },
        "NextStepDisplayPaymentMethodInformationPse": {
          "type": "object",
          "title": "Display PSE payment method information",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type. You'll need to send a PATCH request with the institution selected by the customer or their bank accounts (if there are accounts already saved in the Belvo database).",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "pse_display_payment_method_information",
                "pse_display_credentials_required",
                "pse_display_needs_redirect",
                "pse_display_token_required",
                "pse_display_customer_bank_accounts",
                "pse_display_confirmation_required",
                "pse_display_payment_processing",
                "pse_display_payment_failed",
                "pse_display_payment_succeeded"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "pse_display_payment_method_information"
            },
            "pse_display_payment_method_information": {
              "$ref": "#/components/schemas/DisplayPaymentMethodInformationContentPse"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": false,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
              "example": false
            }
          }
        },
        "DisplayCredentialsRequiredContentPse": {
          "type": "object",
          "title": "Display PSE confirmation required",
          "description": "Object containing form fields for the required credentials (for example, `username` or `password`) in this step.",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepDisplayCredentialsRequiredPse": {
          "type": "object",
          "title": "Display PSE credentials required",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "pse_display_payment_method_information",
                "pse_display_credentials_required",
                "pse_display_needs_redirect",
                "pse_display_token_required",
                "pse_display_customer_bank_accounts",
                "pse_display_confirmation_required",
                "pse_display_payment_processing",
                "pse_display_payment_failed",
                "pse_display_payment_succeeded"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "pse_display_credentials_required"
            },
            "pse_display_credentials_required": {
              "$ref": "#/components/schemas/DisplayCredentialsRequiredContentPse"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": false,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
              "example": false
            }
          }
        },
        "NeedsRedirectContentPse": {
          "type": "object",
          "description": "Details regarding the payer institution.",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/InstitutionFormField"
            }
          }
        },
        "NextStepDisplayNeedsRedirectPse": {
          "type": "object",
          "title": "Display PSE needs redirect",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "pse_display_payment_method_information",
                "pse_display_credentials_required",
                "pse_display_needs_redirect",
                "pse_display_token_required",
                "pse_display_customer_bank_accounts",
                "pse_display_confirmation_required",
                "pse_display_payment_processing",
                "pse_display_payment_failed",
                "pse_display_payment_succeeded"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "pse_display_needs_redirect"
            },
            "pse_display_needs_redirect": {
              "$ref": "#/components/schemas/NeedsRedirectContentPse"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": true,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
              "example": true
            }
          }
        },
        "DisplayTokenRequiredContentPse": {
          "type": "object",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepDisplayTokenRequiredPse": {
          "type": "object",
          "title": "Display PSE token required",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "pse_display_payment_method_information",
                "pse_display_credentials_required",
                "pse_display_needs_redirect",
                "pse_display_token_required",
                "pse_display_customer_bank_accounts",
                "pse_display_confirmation_required",
                "pse_display_payment_processing",
                "pse_display_payment_failed",
                "pse_display_payment_succeeded"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "pse_display_token_required"
            },
            "pse_display_token_required": {
              "$ref": "#/components/schemas/DisplayTokenRequiredContentPse"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. This value will return: \n\n  - `false` when a customer wants to pay for the very first time. This is so because you still need to input information about your customer in the following steps to process a payment successfully. \n  - `true` when a customer wants to pay and this is not their first time. This is so because the payment intent has all the information needed about the customer to process a payment. \n\n\n**Note:** When the value is `true`, you'll need to confirm the payment intent. You can do this by making a PATCH request sending through the parameter `confirm: true`.",
              "example": true
            }
          }
        },
        "BeneficiaryBankAccountPse": {
          "type": "object",
          "title": "Beneficiary Bank Account PSE",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the beneficiary bank account.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "institution": {
              "type": "string",
              "format": "uuid",
              "nullable": true,
              "description": "Belvo's unique ID for the institution that the bank account is created in.",
              "example": "f512d996-583a-4a91-8b5b-eba2e103b068"
            },
            "number": {
              "type": "string",
              "nullable": true,
              "description": "The bank account number.",
              "example": "******1213"
            },
            "holder": {
              "$ref": "#/components/schemas/HolderBusinessResponsePse"
            }
          }
        },
        "DisplayCustomerBankAccountsContentPse": {
          "type": "object",
          "title": "Display PSE payment method information",
          "description": "Object detailing what payment method information you need to display.",
          "properties": {
            "customer_bank_accounts": {
              "type": "array",
              "description": "Array of customer bank account objects.",
              "items": {
                "$ref": "#/components/schemas/PaymentMethodInfoCustomerBankAccountsPse"
              }
            },
            "beneficiary_bank_account": {
              "$ref": "#/components/schemas/BeneficiaryBankAccountPse"
            }
          }
        },
        "NextStepDisplayCustomerBankAccountsPse": {
          "type": "object",
          "title": "Display PSE customer bank accounts",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "pse_display_payment_method_information",
                "pse_display_credentials_required",
                "pse_display_needs_redirect",
                "pse_display_token_required",
                "pse_display_customer_bank_accounts",
                "pse_display_confirmation_required",
                "pse_display_payment_processing",
                "pse_display_payment_failed",
                "pse_display_payment_succeeded"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "pse_display_customer_bank_accounts"
            },
            "pse_display_customer_bank_accounts": {
              "$ref": "#/components/schemas/DisplayCustomerBankAccountsContentPse"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": true,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
              "example": true
            }
          }
        },
        "DisplayConfirmationRequiredContentPse": {
          "type": "object",
          "title": "Display PSE Colombia confirmation required.",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "payer_institution": {
              "$ref": "#/components/schemas/paymentInstitution"
            }
          }
        },
        "NextStepDisplayConfirmationRequiredPse": {
          "type": "object",
          "title": "Display PSE confirmation required",
          "description": "Object detailing the next steps you should follow for a specific `next_step` type.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "pse_display_payment_method_information",
                "pse_display_credentials_required",
                "pse_display_needs_redirect",
                "pse_display_token_required",
                "pse_display_customer_bank_accounts",
                "pse_display_confirmation_required",
                "pse_display_payment_processing",
                "pse_display_payment_failed",
                "pse_display_payment_succeeded"
              ],
              "description": "The type of `next_step` you need to follow.\n",
              "example": "pse_display_confirmation_required"
            },
            "pse_display_confirmation_required": {
              "$ref": "#/components/schemas/DisplayConfirmationRequiredContentPse"
            },
            "ready_to_confirm": {
              "type": "boolean",
              "default": true,
              "description": "Boolean that indicates whether the payment intent is ready to be confirmed. \n\n  **Note:** When the value is `true`, you'll need to make a PATCH request sending through `confirm: true` to confirm the payment.",
              "example": true
            }
          }
        },
        "LastErrorInvalidCredentials": {
          "type": "object",
          "title": "invalid_credentials",
          "description": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when the credentials that your customer provides are incorrect.",
          "required": [
            "error_code",
            "error_message"
          ],
          "properties": {
            "error_code": {
              "type": "string",
              "description": "A unique error code (`invalid_credentials`) that allows you to classify and handle the error programmatically.",
              "example": "invalid_credentials"
            },
            "error_message": {
              "type": "string",
              "description": "A short description of the error.",
              "example": "The credentials sent are incorrect, please try again."
            }
          }
        },
        "LastErrorInvalidToken": {
          "type": "object",
          "title": "invalid_token",
          "description": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when the MFA token your customer provides is invalid.",
          "required": [
            "error_code",
            "error_message"
          ],
          "properties": {
            "error_code": {
              "type": "string",
              "description": "A unique error code (`invalid_token`) that allows you to classify and handle the error programmatically.",
              "example": "invalid_token"
            },
            "error_message": {
              "type": "string",
              "description": "A short description of the error.",
              "example": "The token sent is incorrect or has expired, please try again."
            }
          }
        },
        "LastErrorLoginError": {
          "type": "object",
          "title": "login_error",
          "description": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened in the `pse_display_credentials_required` next step.",
          "required": [
            "error_code",
            "error_message"
          ],
          "properties": {
            "error_code": {
              "type": "string",
              "description": "A unique error code (`login_error`) that allows you to classify and handle the error programmatically.",
              "example": "login_error"
            },
            "error_message": {
              "type": "string",
              "description": "A short description of the error.",
              "example": "Provider login error"
            }
          }
        },
        "LastErrorTwoFactor": {
          "type": "object",
          "title": "login_two_factor_error",
          "description": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error can occur when something unexpected happened in the `pse_display_token_required` next step.",
          "required": [
            "error_code",
            "error_message"
          ],
          "properties": {
            "error_code": {
              "type": "string",
              "description": "A unique error code (`login_two_factor_error`) that allows you to classify and handle the error programmatically.",
              "example": "login_two_factor_error"
            },
            "error_message": {
              "type": "string",
              "description": "A short description of the error.",
              "example": "Provider login two factor error"
            }
          }
        },
        "LastErrorSessionExpired": {
          "type": "object",
          "title": "session_expired",
          "description": "Information about the error you ran into in the previous step of the payment intent, if applicable. This error occurs when you try to send a PATCH request after the session has already expired (the session expires after 10 minutes).",
          "required": [
            "error_code",
            "error_message"
          ],
          "properties": {
            "error_code": {
              "type": "string",
              "description": "A unique error code (`session_expired`) that allows you to classify and handle the error programmatically.",
              "example": "session_expired"
            },
            "error_message": {
              "type": "string",
              "description": "A short description of the error.",
              "example": "Bank session was not found."
            }
          }
        },
        "PaymentIntentPaymentMethodDetailsBodyPse": {
          "type": "object",
          "description": "Details about the payment method type selected.",
          "required": [
            "beneficiary_bank_account",
            "callback_url",
            "belvo_flow"
          ],
          "properties": {
            "payer_institution": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier for the payer’s institution.",
              "example": "db201c6a-e0ee-4caa-92d6-72b480d6d86f"
            },
            "payer_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the customer’s bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "beneficiary_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary’s bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "username": {
              "type": "string",
              "description": "The username used to log in to the institution. This value is obfuscated.",
              "example": "***"
            },
            "password": {
              "type": "string",
              "description": "The password used to log in to the institution. This value is obfuscated.",
              "example": "***"
            },
            "callback_url": {
              "type": "string",
              "description": "The callback URL that your user will be redirected to after confirming the payment in their banking application.",
              "example": "https://www.acmecorp.com/checkout/3487321"
            },
            "belvo_flow": {
              "type": "boolean",
              "default": true,
              "description": "This parameter determines the payment flow of the payment intent. By default, this is set to `true` and the payment intent created is processed using the Belvo's payment flow and Belvo-integrated institutions. When set to `false`, the payment intent process uses institutions not integrated into Belvo's flow.",
              "example": true
            }
          }
        },
        "PaymentIntentPaymentMethodDetailsPse": {
          "type": "object",
          "title": "PSE",
          "description": "Details about the PSE payment method.",
          "properties": {
            "pse": {
              "$ref": "#/components/schemas/PaymentIntentPaymentMethodDetailsBodyPse"
            }
          }
        },
        "PaymentIntentPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "id",
            "created_at",
            "created_by",
            "customer",
            "allowed_payment_method_types",
            "amount",
            "currency",
            "description",
            "failure_code",
            "failure_message",
            "next_step",
            "last_error",
            "payment_method_details",
            "payment_method_information",
            "provider",
            "status",
            "updated_at",
            "selected_payment_method_type"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current payment intent.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created this payment intent.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the customer related to this payment intent.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "allowed_payment_method_types": {
              "type": "array",
              "description": "A list of payment method types allowed in this payment intent. For PSE, the value will be `pse`.",
              "items": {
                "$ref": "#/components/schemas/EnumPaymentLinkAllowedPaymentMethod"
              }
            },
            "amount": {
              "type": "string",
              "description": "Amount to be paid by your customer.\n",
              "example": "350000.00"
            },
            "currency": {
              "$ref": "#/components/schemas/EnumPaymentsCurrency"
            },
            "description": {
              "type": "string",
              "description": "The description of the payment.\n",
              "example": "Training shoes"
            },
            "failure_code": {
              "type": "string",
              "nullable": true,
              "description": "Error code that explains the reason behind a payment being unsuccessful (if applicable).\n",
              "example": null
            },
            "failure_message": {
              "type": "string",
              "nullable": true,
              "description": "Further information regarding the `failure_code`.\n",
              "example": null
            },
            "metadata": {
              "type": "object",
              "description": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number.\n\n⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "example": {
                "internal_reference_id": "GGq73487w2"
              }
            },
            "next_step": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/NextStepDisplayPaymentMethodInformationPse"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayCredentialsRequiredPse"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayNeedsRedirectPse"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayTokenRequiredPse"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayCustomerBankAccountsPse"
                },
                {
                  "$ref": "#/components/schemas/NextStepDisplayConfirmationRequiredPse"
                }
              ]
            },
            "last_error": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/LastErrorInvalidCredentials"
                },
                {
                  "$ref": "#/components/schemas/LastErrorInvalidToken"
                },
                {
                  "$ref": "#/components/schemas/LastErrorLoginError"
                },
                {
                  "$ref": "#/components/schemas/LastErrorTwoFactor"
                },
                {
                  "$ref": "#/components/schemas/LastErrorPaymentError"
                },
                {
                  "$ref": "#/components/schemas/LastErrorSessionExpired"
                }
              ]
            },
            "payment_method_details": {
              "$ref": "#/components/schemas/PaymentIntentPaymentMethodDetailsPse"
            },
            "payment_method_information": {
              "$ref": "#/components/schemas/PaymentMethodInformationPse"
            },
            "charges": {
              "type": "array",
              "deprecated": true,
              "description": "An array of charge objects related to this paymnet intent. If no charges are associated, we return an empty array.\n\n**Note**: The charges resource will be deprecated and removed from our API by end of Q1 2023. We recommend not using any data from this resource.",
              "items": {
                "$ref": "#/components/schemas/Charge"
              }
            },
            "provider": {
              "$ref": "#/components/schemas/EnumPaymentLinkProvider"
            },
            "selected_payment_method_type": {
              "$ref": "#/components/schemas/EnumPaymentLinkAllowedPaymentMethod"
            },
            "status": {
              "$ref": "#/components/schemas/EnumPaymentIntentStatus"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the payment intent was last updated.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            }
          }
        },
        "PaymentLinkPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "id",
            "created_at",
            "created_by",
            "payment_url",
            "callback_urls",
            "status",
            "expires_in",
            "expires_at"
          ],
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the current payment link.",
              "example": "1c83ead8-6665-429c-a17a-ddc76cb3a95e"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the data point was last updated in Belvo's database.",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "created_by": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID for the user that created the payment link.",
              "example": "62053a72-e2d5-4c95-a578-6b16616900ac"
            },
            "payment_url": {
              "type": "string",
              "description": "The URL for the hosted-widget that will guide your user through the payments process.",
              "example": "https://pay.belvo.io/YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "access_token": {
              "type": "string",
              "description": "The Belvo-generated access token for the payment link.\n\n**Note:** You'll need the `access_token` to make [Get details for a payment link](https://developers.belvo.com/reference/detailcreatepaymentlink) requests.",
              "example": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
            },
            "callback_urls": {
              "$ref": "#/components/schemas/PaymentLinkCallbackUrlsResponse"
            },
            "payment_intent": {
              "$ref": "#/components/schemas/PaymentIntentPse"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "nullable": true,
              "description": "The ISO-8601 timestamp of when the payment link was last updated.\n",
              "example": "2022-02-09T08:45:50.406032Z"
            },
            "status": {
              "$ref": "#/components/schemas/EnumPaymentLinksStatus"
            },
            "expires_in": {
              "type": "string",
              "pattern": "\\d+([mhd])",
              "description": "The payment link expiration time. ",
              "example": "7d"
            },
            "expires_at": {
              "type": "string",
              "format": "date-time",
              "description": "The ISO-8601 timestamp of when the payment link is set to expire.\n",
              "example": "2023-02-09T08:45:50.406032Z"
            }
          }
        },
        "PaymentIntentPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://api.belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of payment intent objects.",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PaymentIntentPse"
                  }
                ]
              }
            }
          }
        },
        "PaymentIntentsPaymentMethodDetailsBodyPse": {
          "type": "object",
          "title": "PSE",
          "description": "Details about the organization's bank account that will receive the payment.",
          "required": [
            "beneficiary_bank_account",
            "belvo_flow"
          ],
          "properties": {
            "beneficiary_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID used to identify the beneficiary's bank account.",
              "example": "a80d5a9d-20ae-479a-8dd7-ff3443bcbbfc"
            },
            "callback_url": {
              "type": "string",
              "description": "The URL to your application that your customer will be directed to once they confirm the payment in their bank application.",
              "example": "https://www.acmecorp.com/checkout/3487321"
            },
            "belvo_flow": {
              "type": "boolean",
              "default": true,
              "description": "This parameter determines the payment flow of the payment intent. By default, this is set to `true` and the payment intent created is processed using Belvo's payment flow and Belvo-integrated institutions. When set to `false`, the payment intent process uses institutions not integrated into Belvo's flow.",
              "example": true
            }
          }
        },
        "PaymentIntentsPaymentMethodDetailsPse": {
          "type": "object",
          "title": "PSE",
          "description": "Object with payment method details to create a payment intent.",
          "required": [
            "pse"
          ],
          "properties": {
            "pse": {
              "$ref": "#/components/schemas/PaymentIntentsPaymentMethodDetailsBodyPse"
            }
          }
        },
        "CreatePaymentIntentPse": {
          "type": "object",
          "title": "Colombia 🇨🇴 PSE",
          "required": [
            "amount",
            "customer",
            "description",
            "allowed_payment_method_types",
            "payment_method_details",
            "provider"
          ],
          "properties": {
            "amount": {
              "oneOf": [
                {
                  "type": "string",
                  "title": "string",
                  "pattern": "[1-9]\\d{0,9}",
                  "example": "350000"
                },
                {
                  "type": "integer",
                  "format": "int64",
                  "title": "integer",
                  "maximum": 9999999999,
                  "minimum": 1,
                  "example": 350000
                }
              ],
              "description": "Amount to be paid by your customer. For PSE, you can only send whole numbers. For example: `350000`.\n\n**Note:** You can send through this value either as a string or an integer. Regardless of the type you choose to send the `amount` as, Belvo returns a string with two decimal points, separated by a period ( `.`). For example, `350000.00`.\n"
            },
            "customer": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique ID to reference the customer.\n",
              "example": "06dc2f14-1217-4480-9b36-550a944a39d1"
            },
            "description": {
              "type": "string",
              "description": "The description of the payment.\n",
              "example": "Training shoes"
            },
            "allowed_payment_method_types": {
              "type": "array",
              "description": "A list of payment method types allowed in this payment intent. For PSE, this value must be set to `pse`.",
              "minItems": 1,
              "maxItems": 1,
              "items": {
                "$ref": "#/components/schemas/EnumPaymentLinkAllowedPaymentMethod"
              }
            },
            "payment_method_details": {
              "$ref": "#/components/schemas/PaymentIntentsPaymentMethodDetailsPse"
            },
            "provider": {
              "$ref": "#/components/schemas/EnumPaymentLinkProvider"
            },
            "metadata": {
              "type": "object",
              "description": "Optional and customizable object where you can provide any additional key-value pairs for your internal purposes. For example, an internal reference number for the payment intent.\n\n⚠️ **Note**: You can only provide up to 50 keys (keys can have up to 50 characters each and each value can be up to 500 characters). We do not support nested objects, only ASCII values.",
              "example": {
                "internal_reference_id": "GGq73487w2"
              }
            }
          }
        },
        "PatchPaymentMethodDetailsPse": {
          "type": "object",
          "description": "Object with required fields to fill information in the payment intent object. The information you need to send through depends on the next step Belvo returns in the response.",
          "properties": {
            "payer_institution": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier for the payer’s institution.\n\n**Note**: You need to send through this information after you received the `pse_display_payment_method_information` next step in the payment intent.",
              "example": "db201c6a-e0ee-4caa-92d6-72b480d6d86f"
            },
            "username": {
              "type": "string",
              "description": "The username used to log in to the institution.\n\n**Note**: You need to send through this information after you received the `pse_display_credentials_required` next step in the payment intent.",
              "example": "username"
            },
            "password": {
              "type": "string",
              "description": "The password used to log in to the institution.\n\n**Note**: You need to send through this information after you received the `pse_display_credentials_required` next step in the payment intent.",
              "example": "123456"
            },
            "payer_token": {
              "type": "string",
              "description": "The MFA token generated by the institution and required to continue the payment flow.\n\n**Note**: You need to send through this information if you received the `pse_display_token_required` next step in the payment intent.",
              "example": "123456"
            },
            "payer_bank_account": {
              "type": "string",
              "format": "uuid",
              "description": "Belvo's unique identifier for the payer’s bank account.\n\n**Note**: You need to send through this information after you received the `pse_display_customer_bank_accounts` next step in the payment intent.",
              "example": "db201c6a-e0ee-4caa-92d6-72b480d6d86f"
            }
          }
        },
        "PatchPaymentIntentsBodyPse": {
          "type": "object",
          "title": "PATCH payment method details",
          "properties": {
            "pse": {
              "$ref": "#/components/schemas/PatchPaymentMethodDetailsPse"
            }
          }
        },
        "PatchPaymentIntentPse": {
          "type": "object",
          "required": [
            "payment_method_details"
          ],
          "properties": {
            "payment_method_details": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PatchPaymentIntentsBodyPse"
                }
              ]
            },
            "confirm": {
              "type": "boolean",
              "description": "Boolean that indicates whether this request confirms the payment intent. \n\n**Note:** You'll need to send this parameter set to `true` when the payment intent next_step returns `ready_to_confirm: true`, meaning the payment intent is ready to be confirmed.",
              "example": true
            }
          }
        },
        "PaymentsTransactionsPaginatedResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The total number of results in your Belvo account.",
              "example": 130
            },
            "next": {
              "type": "string",
              "nullable": true,
              "description": "The URL to next page of results. Each page consists of up to 100 items. If there are not enough results for an additional page, the value is `null`.\n\nIn our documentation example, we use `{endpoint}` as a placeholder value. In production, this value will be replaced by the actual endpoint you are currently using (for example, `customer` or `bank-accounts`).\n",
              "example": "https://api.belvo.com/payments/{endpoint}/?page=2"
            },
            "previous": {
              "type": "string",
              "nullable": true,
              "description": "The URL to the previous page of results. If there is no previous page, the value is `null`.",
              "example": null
            },
            "results": {
              "type": "array",
              "description": "Array of transaction objects.",
              "items": {
                "$ref": "#/components/schemas/paymentTransaction"
              }
            }
          }
        }
      },
      "examples": {
        "AccountsBankingChecking": {
          "summary": "Checking Account",
          "description": "Example of a checking account.",
          "value": [
            {
              "id": "c21f3914-bcbe-44c4-a2e8-a5e33f6888d4",
              "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
              "institution": {
                "name": "erebor_mx_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "category": "CHECKING_ACCOUNT",
              "balance_type": "ASSET",
              "type": "Cuentas de efectivo",
              "name": "Cuenta Perfiles- M.N.- - ERB-237",
              "number": "2180700688677950",
              "balance": {
                "available": 4523.48,
                "current": 4523.48
              },
              "currency": "MXN",
              "bank_product_id": null,
              "internal_identification": null,
              "public_identification_name": "CLABE",
              "public_identification_value": "2180700008677950",
              "last_accessed_at": "2022-02-01T20:25:47.307911Z",
              "credit_data": null,
              "loan_data": null,
              "funds_data": null
            }
          ]
        },
        "AccountsBankingCreditCard": {
          "summary": "Credit Card Account",
          "description": "Example of a credit card account.",
          "value": [
            {
              "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
              "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
              "institution": {
                "name": "erebor_mx_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "category": "CREDIT_CARD",
              "balance_type": "LIABILITY",
              "type": "Tarjetas de crédito",
              "name": "Erebor Gold",
              "number": null,
              "balance": {
                "available": 1550.15,
                "current": 4049.85
              },
              "currency": "MXN",
              "bank_product_id": null,
              "internal_identification": null,
              "public_identification_name": null,
              "public_identification_value": null,
              "last_accessed_at": "2022-02-01T20:25:47.307911Z",
              "credit_data": {
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "credit_limit": 15600,
                "cutting_date": "2021-04-11",
                "next_payment_date": "2021-03-31",
                "minimum_payment": 690,
                "no_interest_payment": 11550.15,
                "interest_rate": 4,
                "monthly_payment": null,
                "last_payment_date": null
              },
              "loan_data": null,
              "funds_data": null
            }
          ]
        },
        "AccountsBankingLoan": {
          "summary": "Loan Account",
          "description": "Example of a loan account.",
          "value": [
            {
              "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
              "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
              "institution": {
                "name": "erebor_mx_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "category": "LOAN_ACCOUNT",
              "balance_type": "LIABILITY",
              "type": "Créditos",
              "name": "Cuenta nómina",
              "number": "72964044",
              "balance": {
                "available": 34708.36,
                "current": 34708.36
              },
              "currency": "MXN",
              "bank_product_id": null,
              "internal_identification": null,
              "public_identification_name": "ACCOUNT_NUMBER",
              "public_identification_value": "217035843284091420",
              "last_accessed_at": "2022-02-01T20:25:47.307911Z",
              "credit_data": null,
              "loan_data": {
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "loan_type": "SFH",
                "contract_amount": 202000,
                "principal": 192000,
                "outstanding_principal": 142000,
                "outstanding_balance": 164000,
                "payment_day": "17",
                "interest_rates": [
                  {
                    "name": "jurosEfetivo",
                    "type": "MONTHLY",
                    "value": 7.85
                  }
                ],
                "fees": [
                  {
                    "type": "OPERATION_FEE",
                    "value": 5.6
                  }
                ],
                "monthly_payment": 1000,
                "number_of_installments_total": 50,
                "number_of_installments_outstanding": 41,
                "contract_start_date": "2018-01-01",
                "contract_end_date": "2027-10-01",
                "contract_number": "ER8072930097"
              },
              "funds_data": null
            }
          ]
        },
        "AccountsBankingPension": {
          "summary": "Pension Account",
          "description": "Example of a pension account.",
          "value": [
            {
              "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
              "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
              "institution": {
                "name": "erebor_br_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "category": "PENSION_FUND_ACCOUNT",
              "balance_type": "ASSET",
              "type": "Contas",
              "name": "Conta corrente",
              "number": "37903487",
              "balance": {
                "available": 26305.33,
                "current": 26305.33
              },
              "currency": "BRL",
              "bank_product_id": null,
              "internal_identification": null,
              "public_identification_name": "PENSION_PLAN_ID",
              "public_identification_value": "626249048387247512",
              "last_accessed_at": "2021-03-09T08:19:05.000Z",
              "credit_data": null,
              "loan_data": null,
              "funds_data": [
                {
                  "collected_at": "2022-02-09T08:45:50.406032Z",
                  "name": "CICLO DE VIDA 2040 I",
                  "type": "PGBL",
                  "balance": 94793,
                  "percentage": 9,
                  "public_identifications": [
                    {
                      "name": "CNPJ",
                      "value": "11.233.333/4424-01"
                    },
                    {
                      "name": "SUSEP",
                      "value": "13311.2333222/3333-44"
                    }
                  ]
                },
                {
                  "collected_at": "2022-02-09T08:45:50.406032Z",
                  "name": "CICLO DE VIDA 2020 I",
                  "type": "PGBL",
                  "balance": 50834,
                  "percentage": 91,
                  "public_identifications": [
                    {
                      "name": "CNPJ",
                      "value": "11.222.333/4444-02"
                    },
                    {
                      "name": "SUSEP",
                      "value": "11111.222222/3333-44"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "AccountsBankingSavings": {
          "summary": "Savings Account",
          "description": "Example of a savings account.",
          "value": [
            {
              "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
              "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
              "institution": {
                "name": "erebor_co_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "category": "SAVINGS_ACCOUNT",
              "balance_type": "ASSET",
              "type": "Cuenta de Ahorro",
              "name": "Cuenta de Ahorro",
              "number": "13166008",
              "balance": {
                "available": 4978436.05,
                "current": 4978436.05
              },
              "currency": "COP",
              "bank_product_id": null,
              "internal_identification": null,
              "public_identification_name": "ACCOUNT_NUMBER",
              "public_identification_value": "260825906",
              "last_accessed_at": "2021-03-09T10:28:40.000Z",
              "credit_data": null,
              "loan_data": null,
              "funds_data": null
            }
          ]
        },
        "AccountsBankingCheckingDetail": {
          "summary": "Checking Account",
          "description": "Example of a checking account.",
          "value": {
            "id": "c21f3914-bcbe-44c4-a2e8-a5e33f6888d4",
            "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
            "institution": {
              "name": "erebor_mx_retail",
              "type": "bank"
            },
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "category": "CHECKING_ACCOUNT",
            "balance_type": "ASSET",
            "type": "Cuentas de efectivo",
            "name": "Cuenta Perfiles- M.N.- - ERB-237",
            "number": "2180700688677950",
            "balance": {
              "available": 4523.48,
              "current": 4523.48
            },
            "currency": "MXN",
            "bank_product_id": null,
            "internal_identification": null,
            "public_identification_name": "CLABE",
            "public_identification_value": "2180700008677950",
            "last_accessed_at": "2022-02-01T20:25:47.307911Z",
            "credit_data": null,
            "loan_data": null,
            "funds_data": null
          }
        },
        "AccountsBankingCreditCardDetail": {
          "summary": "Credit Card Account",
          "description": "Example of a credit card account.",
          "value": {
            "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
            "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
            "institution": {
              "name": "erebor_mx_retail",
              "type": "bank"
            },
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "category": "CREDIT_CARD",
            "balance_type": "LIABILITY",
            "type": "Tarjetas de crédito",
            "name": "Erebor Gold",
            "number": null,
            "balance": {
              "available": 1550.15,
              "current": 4049.85
            },
            "currency": "MXN",
            "bank_product_id": null,
            "internal_identification": null,
            "public_identification_name": null,
            "public_identification_value": null,
            "last_accessed_at": "2022-02-01T20:25:47.307911Z",
            "credit_data": {
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "credit_limit": 15600,
              "cutting_date": "2021-04-11",
              "next_payment_date": "2021-03-31",
              "minimum_payment": 690,
              "no_interest_payment": 11550.15,
              "interest_rate": 4,
              "monthly_payment": null,
              "last_payment_date": null
            },
            "loan_data": null,
            "funds_data": null
          }
        },
        "AccountsBankingLoanDetail": {
          "summary": "Loan Account",
          "description": "Example of a loan account.",
          "value": {
            "id": "0f82c5db-13a2-43c7-a69a-e036160aba3a",
            "link": "57f212dc-1ba4-407f-b7f0-15a5e5ff17ae",
            "institution": {
              "name": "erebor_mx_retail",
              "type": "bank"
            },
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "category": "LOAN_ACCOUNT",
            "balance_type": "LIABILITY",
            "type": "Créditos",
            "name": "Cuenta nómina",
            "number": "72964044",
            "balance": {
              "available": 34708.36,
              "current": 34708.36
            },
            "currency": "MXN",
            "bank_product_id": null,
            "internal_identification": null,
            "public_identification_name": "ACCOUNT_NUMBER",
            "public_identification_value": "217035843284091420",
            "last_accessed_at": "2022-02-01T20:25:47.307911Z",
            "credit_data": null,
            "loan_data": {
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "loan_type": "SFH",
              "contract_amount": 202000,
              "principal": 192000,
              "outstanding_principal": 142000,
              "outstanding_balance": 164000,
              "payment_day": "17",
              "interest_rates": [
                {
                  "name": "jurosEfetivo",
                  "type": "MONTHLY",
                  "value": 7.85
                }
              ],
              "fees": [
                {
                  "type": "OPERATION_FEE",
                  "value": 5.6
                }
              ],
              "monthly_payment": 1000,
              "number_of_installments_total": 50,
              "number_of_installments_outstanding": 41,
              "contract_start_date": "2018-01-01",
              "contract_end_date": "2027-10-01",
              "contract_number": "ER8072930097"
            },
            "funds_data": null
          }
        },
        "AccountsBankingPensionDetail": {
          "summary": "Pension Account",
          "description": "Example of a pension account.",
          "value": {
            "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
            "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
            "institution": {
              "name": "erebor_br_retail",
              "type": "bank"
            },
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "category": "PENSION_FUND_ACCOUNT",
            "balance_type": "ASSET",
            "type": "Contas",
            "name": "Conta corrente",
            "number": "37903487",
            "balance": {
              "available": 26305.33,
              "current": 26305.33
            },
            "currency": "BRL",
            "bank_product_id": null,
            "internal_identification": null,
            "public_identification_name": "PENSION_PLAN_ID",
            "public_identification_value": "626249048387247512",
            "last_accessed_at": "2021-03-09T08:19:05.000Z",
            "credit_data": null,
            "loan_data": null,
            "funds_data": [
              {
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "name": "CICLO DE VIDA 2040 I",
                "type": "PGBL",
                "balance": 94793,
                "percentage": 9,
                "public_identifications": [
                  {
                    "name": "CNPJ",
                    "value": "11.233.333/4424-01"
                  },
                  {
                    "name": "SUSEP",
                    "value": "13311.2333222/3333-44"
                  }
                ]
              },
              {
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "name": "CICLO DE VIDA 2020 I",
                "type": "PGBL",
                "balance": 50834,
                "percentage": 91,
                "public_identifications": [
                  {
                    "name": "CNPJ",
                    "value": "11.222.333/4444-02"
                  },
                  {
                    "name": "SUSEP",
                    "value": "11111.222222/3333-44"
                  }
                ]
              }
            ]
          }
        },
        "AccountsBankingSavingsDetail": {
          "summary": "Savings Account",
          "description": "Example of a savings account.",
          "value": {
            "id": "3d5b0f90-90df-455d-a647-5b74feb746f6",
            "link": "fbbb5ea7-4605-437f-b5c5-667fd037a303",
            "institution": {
              "name": "erebor_co_retail",
              "type": "bank"
            },
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "category": "SAVINGS_ACCOUNT",
            "balance_type": "ASSET",
            "type": "Cuenta de Ahorro",
            "name": "Cuenta de Ahorro",
            "number": "13166008",
            "balance": {
              "available": 4978436.05,
              "current": 4978436.05
            },
            "currency": "COP",
            "bank_product_id": null,
            "internal_identification": null,
            "public_identification_name": "ACCOUNT_NUMBER",
            "public_identification_value": "260825906",
            "last_accessed_at": "2021-03-09T10:28:40.000Z",
            "credit_data": null,
            "loan_data": null,
            "funds_data": null
          }
        },
        "TransactionsCheckingPaginated": {
          "summary": "Checking Account Transaction",
          "description": "An example of a checking account transaction",
          "value": {
            "count": 198,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "e5588958-48f2-427c-9300-945207532f5d",
                "account": {
                  "id": "02589c41-ba22-4d44-8558-8111cc751318",
                  "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                  "institution": {
                    "name": "erebor_mx_retail",
                    "type": "bank"
                  },
                  "collected_at": "2022-02-09T08:45:50.406032Z",
                  "created_at": "2022-02-09T08:46:20.406032Z",
                  "internal_identification": "996685090015",
                  "name": "CUENTA NARANJA LITE +",
                  "number": "996685090015",
                  "type": "CUENTA NARANJA LITE +",
                  "category": "CHECKING_ACCOUNT",
                  "bank_product_id": "46",
                  "public_identification_name": "CLABE",
                  "public_identification_value": "058597000010485108",
                  "currency": "MXN",
                  "balance": {
                    "current": 0,
                    "available": 0
                  },
                  "loan_data": null,
                  "credit_data": null,
                  "last_accessed_at": null,
                  "balance_type": "ASSET"
                },
                "created_at": "2022-07-20T22:09:35.556519Z",
                "category": "Income & Payments",
                "subcategory": "Freelance",
                "merchant": {
                  "logo": "https://logo.clearbit.com/asesor-contable.es",
                  "website": "https://merchants-r-us.com",
                  "merchant_name": "Merchants R Us Global"
                },
                "type": "INFLOW",
                "amount": 932.5,
                "status": "UNCATEGORIZED",
                "balance": null,
                "currency": "MXN",
                "reference": "085904452810319225",
                "value_date": "2022-07-11",
                "description": "Transferencia interbancaria",
                "collected_at": "2022-07-20T22:09:33.767574Z",
                "observations": null,
                "accounting_date": null,
                "internal_identification": "LCzHexIyHi"
              }
            ]
          }
        },
        "TransactionsSavingsPaginated": {
          "summary": "Savings Account Transaction",
          "description": "An example of a savings account transaction",
          "value": {
            "count": 198,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "e5588958-48f2-427c-9300-945207532f5d",
                "account": {
                  "id": "02589c41-ba22-4d44-8558-8111cc751318",
                  "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                  "institution": {
                    "name": "erebor_mx_retail",
                    "type": "bank"
                  },
                  "collected_at": "2022-02-09T08:45:50.406032Z",
                  "created_at": "2022-02-09T08:46:20.406032Z",
                  "internal_identification": "996685090015",
                  "name": "Mi ahorro Erebor",
                  "number": "997468860036",
                  "type": null,
                  "category": "SAVINGS_ACCOUNT",
                  "bank_product_id": null,
                  "public_identification_name": "CLABE",
                  "public_identification_value": "058597000011543422",
                  "currency": "MXN",
                  "balance": {
                    "current": 4.09,
                    "available": 4.09
                  },
                  "loan_data": null,
                  "credit_data": null,
                  "last_accessed_at": null,
                  "balance_type": "ASSET"
                },
                "created_at": "2022-07-20T22:09:35.556519Z",
                "category": "Income & Payments",
                "subcategory": "Freelance",
                "merchant": {
                  "logo": "https://logo.clearbit.com/asesor-contable.es",
                  "website": "https://merchants-r-us.com",
                  "merchant_name": "Merchants R Us Global"
                },
                "type": "INFLOW",
                "amount": 4.09,
                "status": "UNCATEGORIZED",
                "balance": null,
                "currency": "MXN",
                "reference": null,
                "value_date": "2022-07-11",
                "description": "Interes",
                "collected_at": "2022-07-20T22:09:33.767574Z",
                "observations": null,
                "accounting_date": null,
                "internal_identification": "0089608418"
              }
            ]
          }
        },
        "TransactionsCreditCardPaginated": {
          "summary": "Credit Card Transaction",
          "description": "An example of a credit card transaction",
          "value": {
            "count": 198,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "account": {
                  "id": "02589c41-ba22-4d44-8558-8111cc751318",
                  "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                  "institution": {
                    "name": "erebor_mx_retail",
                    "type": "bank"
                  },
                  "collected_at": "2022-02-09T08:45:50.406032Z",
                  "created_at": "2022-02-09T08:46:20.406032Z",
                  "category": "CREDIT_CARD",
                  "type": "Tarjetas de crédito",
                  "name": "Erebor Gold",
                  "number": null,
                  "balance": {
                    "current": 5874.13,
                    "available": 5621.12
                  },
                  "currency": "MXN",
                  "bank_product_id": null,
                  "internal_identification": null,
                  "public_identification_name": null,
                  "public_identification_value": null,
                  "last_accessed_at": "2021-03-09T10:28:40.000Z",
                  "balance_type": "LIABILITY",
                  "credit_data": {
                    "credit_limit": 192000,
                    "collected_at": "2022-02-09T08:45:50.406032Z",
                    "cutting_date": "2019-12-11",
                    "next_payment_date": "2019-12-01",
                    "minimum_payment": 2400,
                    "no_interest_payment": 37390.83,
                    "monthly_payment": null,
                    "end_date": null,
                    "last_payment_date": null,
                    "interest_rate": 4
                  },
                  "loan_data": null,
                  "funds_data": null
                },
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "value_date": "2019-10-23",
                "accounting_date": "2019-10-23T13:01:41.941Z",
                "amount": 2145.45,
                "balance": 16907.96,
                "currency": "MXN",
                "description": "SEVEN BUDDHAS RFC:XXXXXXXXXX",
                "observations": "OPTIONAL OBSERVATIONS",
                "category": "Income & Payments",
                "subcategory": "Freelance",
                "merchant": {
                  "logo": "https://logo.clearbit.com/asesor-contable.es",
                  "website": "https://merchants-r-us.com",
                  "merchant_name": "Merchants R Us Global"
                },
                "reference": "8703",
                "type": "OUTFLOW",
                "status": "PROCESSED",
                "credit_card_data": {
                  "bill_name": "apr-2020",
                  "previous_bill_total": "2000.00",
                  "collected_at": "2022-02-09T08:45:50.406032Z"
                }
              }
            ]
          }
        },
        "TransactionsChecking": {
          "summary": "Checking Account Transaction",
          "description": "An example of a checking account transaction",
          "value": [
            {
              "id": "e5588958-48f2-427c-9300-945207532f5d",
              "account": {
                "id": "02589c41-ba22-4d44-8558-8111cc751318",
                "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                "institution": {
                  "name": "erebor_mx_retail",
                  "type": "bank"
                },
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "internal_identification": "996685090015",
                "name": "CUENTA NARANJA LITE +",
                "number": "996685090015",
                "type": "CUENTA NARANJA LITE +",
                "category": "CHECKING_ACCOUNT",
                "bank_product_id": "46",
                "public_identification_name": "CLABE",
                "public_identification_value": "058597000010485108",
                "currency": "MXN",
                "balance": {
                  "current": 0,
                  "available": 0
                },
                "loan_data": null,
                "credit_data": null,
                "last_accessed_at": null,
                "balance_type": "ASSET"
              },
              "created_at": "2022-07-20T22:09:35.556519Z",
              "category": "Income & Payments",
              "subcategory": "Freelance",
              "merchant": {
                "logo": "https://logo.clearbit.com/asesor-contable.es",
                "website": "https://merchants-r-us.com",
                "merchant_name": "Merchants R Us Global"
              },
              "type": "INFLOW",
              "amount": 932.5,
              "status": "UNCATEGORIZED",
              "balance": null,
              "currency": "MXN",
              "reference": "085904452810319225",
              "value_date": "2022-07-11",
              "description": "Transferencia interbancaria",
              "collected_at": "2022-07-20T22:09:33.767574Z",
              "observations": null,
              "accounting_date": null,
              "internal_identification": "LCzHexIyHi"
            }
          ]
        },
        "TransactionsSavings": {
          "summary": "Savings Account Transaction",
          "description": "An example of a savings account transaction",
          "value": [
            {
              "id": "e5588958-48f2-427c-9300-945207532f5d",
              "account": {
                "id": "02589c41-ba22-4d44-8558-8111cc751318",
                "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                "institution": {
                  "name": "erebor_mx_retail",
                  "type": "bank"
                },
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "internal_identification": "996685090015",
                "name": "Mi ahorro Erebor",
                "number": "997468860036",
                "type": null,
                "category": "SAVINGS_ACCOUNT",
                "bank_product_id": null,
                "public_identification_name": "CLABE",
                "public_identification_value": "058597000011543422",
                "currency": "MXN",
                "balance": {
                  "current": 4.09,
                  "available": 4.09
                },
                "loan_data": null,
                "credit_data": null,
                "last_accessed_at": null,
                "balance_type": "ASSET"
              },
              "created_at": "2022-07-20T22:09:35.556519Z",
              "category": "Income & Payments",
              "subcategory": "Freelance",
              "merchant": {
                "logo": "https://logo.clearbit.com/asesor-contable.es",
                "website": "https://merchants-r-us.com",
                "merchant_name": "Merchants R Us Global"
              },
              "type": "INFLOW",
              "amount": 4.09,
              "status": "UNCATEGORIZED",
              "balance": null,
              "currency": "MXN",
              "reference": null,
              "value_date": "2022-07-11",
              "description": "Interes",
              "collected_at": "2022-07-20T22:09:33.767574Z",
              "observations": null,
              "accounting_date": null,
              "internal_identification": "0089608418"
            }
          ]
        },
        "TransactionsCreditCard": {
          "summary": "Credit Card Transaction",
          "description": "An example of a credit card transaction",
          "value": [
            {
              "id": "9e432f18-36ca-4bd6-a3f3-1971e58dc1e8",
              "account": {
                "id": "02589c41-ba22-4d44-8558-8111cc751318",
                "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
                "institution": {
                  "name": "erebor_mx_retail",
                  "type": "bank"
                },
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "category": "CREDIT_CARD",
                "type": "Tarjetas de crédito",
                "name": "Erebor Gold",
                "number": null,
                "balance": {
                  "current": 5874.13,
                  "available": 5621.12
                },
                "currency": "MXN",
                "bank_product_id": null,
                "internal_identification": null,
                "public_identification_name": null,
                "public_identification_value": null,
                "last_accessed_at": "2021-03-09T10:28:40.000Z",
                "balance_type": "LIABILITY",
                "credit_data": {
                  "credit_limit": 192000,
                  "collected_at": "2022-02-09T08:45:50.406032Z",
                  "cutting_date": "2019-12-11",
                  "next_payment_date": "2019-12-01",
                  "minimum_payment": 2400,
                  "no_interest_payment": 37390.83,
                  "monthly_payment": null,
                  "end_date": null,
                  "last_payment_date": null,
                  "interest_rate": 4
                },
                "loan_data": null,
                "funds_data": null
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "value_date": "2019-10-23",
              "accounting_date": "2019-10-23T13:01:41.941Z",
              "amount": 2145.45,
              "balance": 16907.96,
              "currency": "MXN",
              "description": "SEVEN BUDDHAS RFC:XXXXXXXXXX",
              "observations": "OPTIONAL OBSERVATIONS",
              "category": "Income & Payments",
              "subcategory": "Freelance",
              "merchant": {
                "logo": "https://logo.clearbit.com/asesor-contable.es",
                "website": "https://merchants-r-us.com",
                "merchant_name": "Merchants R Us Global"
              },
              "reference": "8703",
              "type": "OUTFLOW",
              "status": "PROCESSED",
              "credit_card_data": {
                "bill_name": "apr-2020",
                "previous_bill_total": "2000.00",
                "collected_at": "2022-02-09T08:45:50.406032Z"
              }
            }
          ]
        },
        "TransactionsCheckingDetail": {
          "summary": "Checking Account Transaction",
          "description": "An example of a checking account transaction",
          "value": {
            "id": "e5588958-48f2-427c-9300-945207532f5d",
            "account": {
              "id": "02589c41-ba22-4d44-8558-8111cc751318",
              "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
              "institution": {
                "name": "erebor_mx_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "internal_identification": "996685090015",
              "name": "CUENTA NARANJA LITE +",
              "number": "996685090015",
              "type": "CUENTA NARANJA LITE +",
              "category": "CHECKING_ACCOUNT",
              "bank_product_id": "46",
              "public_identification_name": "CLABE",
              "public_identification_value": "058597000010485108",
              "currency": "MXN",
              "balance": {
                "current": 0,
                "available": 0
              },
              "loan_data": null,
              "credit_data": null,
              "last_accessed_at": null,
              "balance_type": "ASSET"
            },
            "created_at": "2022-07-20T22:09:35.556519Z",
            "category": "Income & Payments",
            "subcategory": "Freelance",
            "merchant": {
              "logo": "https://logo.clearbit.com/asesor-contable.es",
              "website": "https://merchants-r-us.com",
              "merchant_name": "Merchants R Us Global"
            },
            "type": "INFLOW",
            "amount": 932.5,
            "status": "UNCATEGORIZED",
            "balance": null,
            "currency": "MXN",
            "reference": "085904452810319225",
            "value_date": "2022-07-11",
            "description": "Transferencia interbancaria",
            "collected_at": "2022-07-20T22:09:33.767574Z",
            "observations": null,
            "accounting_date": null,
            "internal_identification": "LCzHexIyHi"
          }
        },
        "TransactionsSavingsDetail": {
          "summary": "Savings Account Transaction",
          "description": "An example of a savings account transaction",
          "value": {
            "id": "e5588958-48f2-427c-9300-945207532f5d",
            "account": {
              "id": "02589c41-ba22-4d44-8558-8111cc751318",
              "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
              "institution": {
                "name": "erebor_mx_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "internal_identification": "996685090015",
              "name": "Mi ahorro Erebor",
              "number": "997468860036",
              "type": null,
              "category": "SAVINGS_ACCOUNT",
              "bank_product_id": null,
              "public_identification_name": "CLABE",
              "public_identification_value": "058597000011543422",
              "currency": "MXN",
              "balance": {
                "current": 4.09,
                "available": 4.09
              },
              "loan_data": null,
              "credit_data": null,
              "last_accessed_at": null,
              "balance_type": "ASSET"
            },
            "created_at": "2022-07-20T22:09:35.556519Z",
            "category": "Income & Payments",
            "subcategory": "Freelance",
            "merchant": {
              "logo": "https://logo.clearbit.com/asesor-contable.es",
              "website": "https://merchants-r-us.com",
              "merchant_name": "Merchants R Us Global"
            },
            "type": "INFLOW",
            "amount": 4.09,
            "status": "UNCATEGORIZED",
            "balance": null,
            "currency": "MXN",
            "reference": null,
            "value_date": "2022-07-11",
            "description": "Interes",
            "collected_at": "2022-07-20T22:09:33.767574Z",
            "observations": null,
            "accounting_date": null,
            "internal_identification": "0089608418"
          }
        },
        "TransactionsCreditCardDetail": {
          "summary": "Credit Card Transaction",
          "description": "An example of a credit card transaction",
          "value": {
            "id": "9e432f18-36ca-4bd6-a3f3-1971e58dc1e8",
            "account": {
              "id": "02589c41-ba22-4d44-8558-8111cc751318",
              "link": "30cb4806-6e00-48a4-91c9-ca55968576c8",
              "institution": {
                "name": "erebor_mx_retail",
                "type": "bank"
              },
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "category": "CREDIT_CARD",
              "type": "Tarjetas de crédito",
              "name": "Erebor Gold",
              "number": null,
              "balance": {
                "current": 5874.13,
                "available": 5621.12
              },
              "currency": "MXN",
              "bank_product_id": null,
              "internal_identification": null,
              "public_identification_name": null,
              "public_identification_value": null,
              "last_accessed_at": "2021-03-09T10:28:40.000Z",
              "balance_type": "LIABILITY",
              "credit_data": {
                "credit_limit": 192000,
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "cutting_date": "2019-12-11",
                "next_payment_date": "2019-12-01",
                "minimum_payment": 2400,
                "no_interest_payment": 37390.83,
                "monthly_payment": null,
                "end_date": null,
                "last_payment_date": null,
                "interest_rate": 4
              },
              "loan_data": null,
              "funds_data": null
            },
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "value_date": "2019-10-23",
            "accounting_date": "2019-10-23T13:01:41.941Z",
            "amount": 2145.45,
            "balance": 16907.96,
            "currency": "MXN",
            "description": "SEVEN BUDDHAS RFC:XXXXXXXXXX",
            "observations": "OPTIONAL OBSERVATIONS",
            "merchant": {
              "logo": "https://logo.clearbit.com/asesor-contable.es",
              "website": "https://merchants-r-us.com",
              "merchant_name": "Merchants R Us Global"
            },
            "category": "Income & Payments",
            "subcategory": "Freelance",
            "reference": "8703",
            "type": "OUTFLOW",
            "status": "PROCESSED",
            "credit_card_data": {
              "bill_name": "apr-2020",
              "previous_bill_total": "2000.00",
              "collected_at": "2022-02-09T08:45:50.406032Z"
            }
          }
        },
        "BalancesExamplePaginated": {
          "summary": "Balance Example (Checking Account)",
          "description": "Example of a balance paginated response.",
          "value": {
            "count": 385,
            "next": "https://sandbox.belvo.com/api/balances/?page=2",
            "previous": null,
            "results": [
              {
                "id": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                "account": {
                  "id": "26428311-7108-40b8-a22b-c310187dd005",
                  "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                  "institution": {
                    "name": "erebor_br_retail",
                    "type": "bank"
                  },
                  "created_at": "2021-10-27T16:18:15.591647Z",
                  "name": "Erebor Gold",
                  "type": null,
                  "number": "7889044-1",
                  "balance": {
                    "current": 146.81,
                    "available": 146.81
                  },
                  "category": "CHECKING_ACCOUNT",
                  "currency": "BRL",
                  "loan_data": null,
                  "credit_data": null,
                  "balance_type": "ASSET",
                  "collected_at": "2022-06-17T03:20:41.300075Z",
                  "bank_product_id": null,
                  "last_accessed_at": null,
                  "internal_identification": "9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c",
                  "public_identification_name": "AGENCY/ACCOUNT",
                  "public_identification_value": "0009/7889044-1"
                },
                "collected_at": "2022-04-06T23:30:51.282174+00:00",
                "statement": null,
                "value_date": "2022-04-04",
                "current_balance": 4.25,
                "balance": 4.25
              }
            ]
          }
        },
        "BalancesExample": {
          "summary": "Balance Example (Checking Account)",
          "description": "Example of a balance response.",
          "value": [
            {
              "id": "b834e69b-1aa4-465d-969c-07c886a4fbed",
              "account": {
                "id": "26428311-7108-40b8-a22b-c310187dd005",
                "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
                "institution": {
                  "name": "erebor_br_retail",
                  "type": "bank"
                },
                "created_at": "2021-10-27T16:18:15.591647Z",
                "name": "Erebor Gold",
                "type": null,
                "number": "7889044-1",
                "balance": {
                  "current": 146.81,
                  "available": 146.81
                },
                "category": "CHECKING_ACCOUNT",
                "currency": "BRL",
                "loan_data": null,
                "credit_data": null,
                "balance_type": "ASSET",
                "collected_at": "2022-06-17T03:20:41.300075Z",
                "bank_product_id": null,
                "last_accessed_at": null,
                "internal_identification": "9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c",
                "public_identification_name": "AGENCY/ACCOUNT",
                "public_identification_value": "0009/7889044-1"
              },
              "collected_at": "2022-04-06T23:30:51.282174+00:00",
              "statement": null,
              "value_date": "2022-04-04",
              "current_balance": 4.25,
              "balance": 4.25
            }
          ]
        },
        "BalancesExampleDetail": {
          "summary": "Balance Example (Checking Account)",
          "description": "Example of a balance response.",
          "value": {
            "id": "b834e69b-1aa4-465d-969c-07c886a4fbed",
            "account": {
              "id": "26428311-7108-40b8-a22b-c310187dd005",
              "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
              "institution": {
                "name": "erebor_br_retail",
                "type": "bank"
              },
              "created_at": "2021-10-27T16:18:15.591647Z",
              "name": "Erebor Gold",
              "type": null,
              "number": "7889044-1",
              "balance": {
                "current": 146.81,
                "available": 146.81
              },
              "category": "CHECKING_ACCOUNT",
              "currency": "BRL",
              "loan_data": null,
              "credit_data": null,
              "balance_type": "ASSET",
              "collected_at": "2022-06-17T03:20:41.300075Z",
              "bank_product_id": null,
              "last_accessed_at": null,
              "internal_identification": "9fa5fab9-e2b7-4bd7-8413-71ed9bb94b4c",
              "public_identification_name": "AGENCY/ACCOUNT",
              "public_identification_value": "0009/7889044-1"
            },
            "collected_at": "2022-04-06T23:30:51.282174+00:00",
            "statement": null,
            "value_date": "2022-04-04",
            "current_balance": 4.25,
            "balance": 4.25
          }
        },
        "OwnerBankingAccountPaginated": {
          "summary": "Banking",
          "description": "An example of a banking account owner.",
          "value": {
            "count": 108,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "link": "c38fb126-fc98-4d6c-8c80-587a97dd56cf",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "display_name": "Maria Martinez Martin",
                "first_name": null,
                "last_name": null,
                "second_last_name": null,
                "email": "maria@acme.com",
                "phone_number": "90090508357",
                "address": "Retorno Gran Canaria 453 723\nCancun, COL 10447",
                "document_id": {
                  "document_type": "CPF",
                  "document_number": "235578435-S"
                },
                "internal_identification": null
              }
            ]
          }
        },
        "OwnerBankingAccount": {
          "summary": "Banking",
          "description": "An example of a banking account owner.",
          "value": [
            {
              "id": "2b22f123-7c3a-4518-9ac2-863eb5d4613c",
              "link": "c38fb126-fc98-4d6c-8c80-587a97dd56cf",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "display_name": "Maria Martinez Martin",
              "first_name": null,
              "last_name": null,
              "second_last_name": null,
              "email": "maria@acme.com",
              "phone_number": "90090508357",
              "address": "Retorno Gran Canaria 453 723\nCancun, COL 10447",
              "document_id": {
                "document_type": "CPF",
                "document_number": "235578435-S"
              },
              "internal_identification": null
            }
          ]
        },
        "OwnerBankingAccountDetail": {
          "summary": "Banking",
          "description": "An example of a banking account owner.",
          "value": {
            "id": "2b22f123-7c3a-4518-9ac2-863eb5d4613c",
            "link": "c38fb126-fc98-4d6c-8c80-587a97dd56cf",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "display_name": "Maria Martinez Martin",
            "first_name": null,
            "last_name": null,
            "second_last_name": null,
            "email": "maria@acme.com",
            "phone_number": "90090508357",
            "address": "Retorno Gran Canaria 453 723\nCancun, COL 10447",
            "document_id": {
              "document_type": "CPF",
              "document_number": "235578435-S"
            },
            "internal_identification": null
          }
        },
        "InvoiceIngresoPaginated": {
          "summary": "Invoice Ingreso",
          "description": "Example of an *Igreso* type invoice.",
          "value": {
            "count": 110,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                "invoice_date": "2020-12-24",
                "status": "Vigente",
                "invoice_type": "Ingreso",
                "type": "OUTFLOW",
                "sender_id": "GHTF980303F7",
                "sender_name": "Roberto Martinez Diaz",
                "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "receiver_id": "MNMK3203409H1",
                "receiver_name": "ACNE SA DE CV",
                "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "cancelation_status": null,
                "cancelation_update_date": null,
                "certification_date": "2020-12-24",
                "certification_authority": "FGV330542BG6",
                "payment_type": "04",
                "payment_type_description": null,
                "payment_method": "PUE",
                "usage": "G03",
                "place_of_issue": "11000",
                "version": "3.3",
                "invoice_details": [
                  {
                    "description": "Servicios de mensajería.",
                    "product_identification": "78102206",
                    "quantity": 1,
                    "unit_code": "E48",
                    "unit_description": "Unidad de servicio",
                    "unit_amount": 25,
                    "pre_tax_amount": 25,
                    "tax_percentage": 16,
                    "tax_amount": 4,
                    "total_amount": 29,
                    "retained_taxes": [],
                    "collected_at": "2022-02-09T08:45:50.406032Z"
                  }
                ],
                "currency": "MXN",
                "subtotal_amount": 25,
                "exchange_rate": 1,
                "tax_amount": 4,
                "discount_amount": 0,
                "total_amount": 29,
                "payments": [],
                "payroll": null,
                "folio": "28",
                "xml": "=XML-STRING=",
                "warnings": {
                  "code": "warning_code",
                  "message": "warning message"
                }
              }
            ]
          }
        },
        "InvoicePagoPaginated": {
          "summary": "Invoice Pago",
          "description": "Example of a *Pago* type invoice.",
          "value": {
            "count": 110,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                "invoice_date": "2020-12-24",
                "status": "Vigente",
                "invoice_type": "Pago",
                "type": "OUTFLOW",
                "sender_id": "GHTF980303F7",
                "sender_name": "Roberto Martinez Diaz",
                "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "receiver_id": "MNMK3203409H1",
                "receiver_name": "ACNE SA DE CV",
                "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "cancelation_status": null,
                "cancelation_update_date": null,
                "certification_date": "2020-12-24",
                "certification_authority": "FGV330542BG6",
                "payment_type": null,
                "payment_type_description": null,
                "payment_method": null,
                "usage": "P01",
                "place_of_issue": "11000",
                "version": "3.3",
                "invoice_details": [
                  {
                    "description": "Pago",
                    "product_identification": "84111506",
                    "quantity": 1,
                    "unit_amount": 0,
                    "unit_code": "ACT",
                    "unit_description": null,
                    "pre_tax_amount": 0,
                    "tax_percentage": 0,
                    "tax_amount": 0,
                    "total_amount": 0,
                    "retained_taxes": [],
                    "collected_at": "2022-02-09T08:45:50.406032Z"
                  }
                ],
                "currency": "MXN",
                "subtotal_amount": 0,
                "exchange_rate": null,
                "tax_amount": 0,
                "discount_amount": 0,
                "total_amount": 0,
                "payments": [
                  {
                    "date": "2020-03-17T12:00:00.000Z",
                    "payment_type": "03",
                    "currency": "BRL",
                    "exchange_rate": "3.75",
                    "amount": 8000.5,
                    "operation_number": "831840",
                    "beneficiary_rfc": "BNM840515VB1",
                    "beneficiary_account_number": "12343453245633",
                    "payer_rfc": "BKJM840515VB1",
                    "payer_account_number": "13343663245699",
                    "payer_bank_name": "CITI BANAMEX",
                    "related_documents": [
                      {
                        "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                        "currency": "MXN",
                        "payment_method": "PPD",
                        "previous_balance": 18877.84,
                        "amount_paid": 8000,
                        "outstanding_balance": 10877.84
                      }
                    ]
                  }
                ],
                "payroll": null,
                "folio": "28",
                "xml": "=XML-STRING=",
                "warnings": {
                  "code": "warning_code",
                  "message": "warning message"
                }
              }
            ]
          }
        },
        "InvoiceNominaPaginated": {
          "summary": "Invoice Nomina",
          "description": "Example of a *Nomina* type invoice.",
          "value": {
            "count": 110,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                "invoice_date": "2020-12-24",
                "status": "Vigente",
                "invoice_type": "Nómina",
                "type": "INFLOW",
                "sender_id": "GHTF980303F7",
                "sender_name": "ACNE SA DE CV",
                "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "receiver_id": "MNMK3203409H1",
                "receiver_name": "Roberto Martinez Diaz",
                "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "cancelation_status": null,
                "cancelation_update_date": null,
                "certification_date": "2020-12-24",
                "certification_authority": "FGV330542BG6",
                "payment_type": "99",
                "payment_type_description": null,
                "payment_method": "PUE",
                "usage": "P01",
                "place_of_issue": "11000",
                "version": "3.3",
                "invoice_details": [
                  {
                    "description": "Pago de nómina",
                    "product_identification": "84111505",
                    "quantity": 1,
                    "unit_code": "ACT",
                    "unit_description": null,
                    "unit_amount": 20400.1,
                    "total_amount": 20400.1,
                    "pre_tax_amount": 20400.1,
                    "tax_percentage": 0,
                    "tax_amount": 0,
                    "retained_taxes": [],
                    "collected_at": "2022-02-09T08:45:50.406032Z"
                  }
                ],
                "currency": "MXN",
                "subtotal_amount": 20400.1,
                "exchange_rate": 1,
                "tax_amount": 0,
                "discount_amount": 5000,
                "total_amount": 15400.1,
                "payments": [],
                "payroll": {
                  "days": 30,
                  "type": "O",
                  "amount": 20400.1,
                  "date_to": "2020-12-31",
                  "version": "1.2",
                  "date_from": "2020-12-01",
                  "collected_at": "2022-02-09T08:45:50.406032Z",
                  "payment_date": "2020-12-24"
                },
                "folio": "28",
                "xml": "=XML-STRING=",
                "warnings": {
                  "code": "warning_code",
                  "message": "warning message"
                }
              }
            ]
          }
        },
        "InvoiceEgresoPaginated": {
          "summary": "Invoice Egreso",
          "description": "Example of an *Egreso* type invoice.",
          "value": {
            "count": 110,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                "invoice_date": "2020-12-24",
                "status": "Vigente",
                "invoice_type": "Egreso",
                "type": "INFLOW",
                "sender_id": "GHTF980303F7",
                "sender_name": "Roberto Martinez Diaz",
                "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "receiver_id": "MNMK3203409H1",
                "receiver_name": "ACNE SA DE CV",
                "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "cancelation_status": null,
                "cancelation_update_date": null,
                "certification_date": "2020-12-24",
                "certification_authority": "FGV330542BG6",
                "payment_type": "04",
                "payment_type_description": null,
                "payment_method": "PUE",
                "usage": "G03",
                "place_of_issue": "11000",
                "version": "3.3",
                "invoice_details": [
                  {
                    "product_identification": "78111500",
                    "description": "Reembolso del servicio",
                    "unit_code": "E48",
                    "unit_description": "Unidad de servicio",
                    "quantity": 1,
                    "unit_amount": 25,
                    "pre_tax_amount": 25,
                    "tax_percentage": 16,
                    "tax_amount": 4,
                    "total_amount": 29,
                    "retained_taxes": [],
                    "collected_at": "2022-02-09T08:45:50.406032Z"
                  }
                ],
                "currency": "MXN",
                "subtotal_amount": 25,
                "exchange_rate": 1,
                "tax_amount": 4,
                "discount_amount": 0,
                "total_amount": 29,
                "payments": [],
                "payroll": null,
                "folio": "28",
                "xml": "=XML-STRING=",
                "warnings": {
                  "code": "warning_code",
                  "message": "warning message"
                }
              }
            ]
          }
        },
        "InvoiceTrasladoPaginated": {
          "summary": "Invoice Traslado",
          "description": "Example of a *Traslado* type invoice.",
          "value": {
            "count": 110,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                "link": "1bd948f7-245d-4313-b604-34d1044cb908",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
                "invoice_date": "2020-12-24",
                "status": "Vigente",
                "invoice_type": "Traslado",
                "type": "INFLOW",
                "sender_id": "GHTF980303F7",
                "sender_name": "ACNE SA DE CV",
                "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "receiver_id": "MNMK3203409H1",
                "receiver_name": "CARGOS S.A. DE C.V.",
                "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
                "cancelation_status": null,
                "cancelation_update_date": null,
                "certification_date": "2020-12-24",
                "certification_authority": "FGV330542BG6",
                "payment_type": null,
                "payment_type_description": null,
                "payment_method": null,
                "usage": "G03",
                "place_of_issue": "11000",
                "version": "3.3",
                "invoice_details": [
                  {
                    "description": "FLETE",
                    "product_identification": "78101802",
                    "quantity": 1,
                    "unit_code": "E48",
                    "unit_description": "Unidad de servicio",
                    "unit_amount": 21000,
                    "pre_tax_amount": 21000,
                    "tax_percentage": 16,
                    "tax_amount": 0,
                    "total_amount": 21000,
                    "retained_taxes": [],
                    "collected_at": "2022-02-09T08:45:50.406032Z"
                  }
                ],
                "currency": "MXN",
                "subtotal_amount": 0,
                "exchange_rate": 1,
                "tax_amount": 0,
                "discount_amount": 0,
                "total_amount": 0,
                "payments": [],
                "payroll": null,
                "folio": "28",
                "xml": "=XML-STRING=",
                "warnings": {
                  "code": "warning_code",
                  "message": "warning message"
                }
              }
            ]
          }
        },
        "InvoiceIngreso": {
          "summary": "Invoice Ingreso",
          "description": "Example of an *Igreso* type invoice.",
          "value": [
            {
              "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
              "link": "1bd948f7-245d-4313-b604-34d1044cb908",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
              "invoice_date": "2020-12-24",
              "status": "Vigente",
              "invoice_type": "Ingreso",
              "type": "OUTFLOW",
              "sender_id": "GHTF980303F7",
              "sender_name": "Roberto Martinez Diaz",
              "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "receiver_id": "MNMK3203409H1",
              "receiver_name": "ACNE SA DE CV",
              "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "cancelation_status": null,
              "cancelation_update_date": null,
              "certification_date": "2020-12-24",
              "certification_authority": "FGV330542BG6",
              "payment_type": "04",
              "payment_type_description": null,
              "payment_method": "PUE",
              "usage": "G03",
              "place_of_issue": "11000",
              "version": "3.3",
              "invoice_details": [
                {
                  "description": "Servicios de mensajería.",
                  "product_identification": "78102206",
                  "quantity": 1,
                  "unit_code": "E48",
                  "unit_description": "Unidad de servicio",
                  "unit_amount": 25,
                  "pre_tax_amount": 25,
                  "tax_percentage": 16,
                  "tax_amount": 4,
                  "total_amount": 29,
                  "retained_taxes": [],
                  "collected_at": "2022-02-09T08:45:50.406032Z"
                }
              ],
              "currency": "MXN",
              "subtotal_amount": 25,
              "exchange_rate": 1,
              "tax_amount": 4,
              "discount_amount": 0,
              "total_amount": 29,
              "payments": [],
              "payroll": null,
              "folio": "28",
              "xml": "=XML-STRING=",
              "warnings": {
                "code": "warning_code",
                "message": "warning message"
              }
            }
          ]
        },
        "InvoicePago": {
          "summary": "Invoice Pago",
          "description": "Example of a *Pago* type invoice.",
          "value": [
            {
              "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
              "link": "1bd948f7-245d-4313-b604-34d1044cb908",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
              "invoice_date": "2020-12-24",
              "status": "Vigente",
              "invoice_type": "Pago",
              "type": "OUTFLOW",
              "sender_id": "GHTF980303F7",
              "sender_name": "Roberto Martinez Diaz",
              "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "receiver_id": "MNMK3203409H1",
              "receiver_name": "ACNE SA DE CV",
              "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "cancelation_status": null,
              "cancelation_update_date": null,
              "certification_date": "2020-12-24",
              "certification_authority": "FGV330542BG6",
              "payment_type": null,
              "payment_type_description": null,
              "payment_method": null,
              "usage": "P01",
              "place_of_issue": "11000",
              "version": "3.3",
              "invoice_details": [
                {
                  "description": "Pago",
                  "product_identification": "84111506",
                  "quantity": 1,
                  "unit_amount": 0,
                  "unit_code": "ACT",
                  "unit_description": null,
                  "pre_tax_amount": 0,
                  "tax_percentage": 0,
                  "tax_amount": 0,
                  "total_amount": 0,
                  "retained_taxes": [],
                  "collected_at": "2022-02-09T08:45:50.406032Z"
                }
              ],
              "currency": "MXN",
              "subtotal_amount": 0,
              "exchange_rate": null,
              "tax_amount": 0,
              "discount_amount": 0,
              "total_amount": 0,
              "payments": [
                {
                  "date": "2020-03-17T12:00:00.000Z",
                  "payment_type": "03",
                  "currency": "BRL",
                  "exchange_rate": "3.75",
                  "amount": 8000.5,
                  "operation_number": "831840",
                  "beneficiary_rfc": "BNM840515VB1",
                  "beneficiary_account_number": "12343453245633",
                  "payer_rfc": "BKJM840515VB1",
                  "payer_account_number": "13343663245699",
                  "payer_bank_name": "CITI BANAMEX",
                  "related_documents": [
                    {
                      "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                      "currency": "MXN",
                      "payment_method": "PPD",
                      "previous_balance": 18877.84,
                      "amount_paid": 8000,
                      "outstanding_balance": 10877.84
                    }
                  ]
                }
              ],
              "payroll": null,
              "folio": "28",
              "xml": "=XML-STRING=",
              "warnings": {
                "code": "warning_code",
                "message": "warning message"
              }
            }
          ]
        },
        "InvoiceNomina": {
          "summary": "Invoice Nomina",
          "description": "Example of a *Nomina* type invoice.",
          "value": [
            {
              "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
              "link": "1bd948f7-245d-4313-b604-34d1044cb908",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
              "invoice_date": "2020-12-24",
              "status": "Vigente",
              "invoice_type": "Nómina",
              "type": "INFLOW",
              "sender_id": "GHTF980303F7",
              "sender_name": "ACNE SA DE CV",
              "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "receiver_id": "MNMK3203409H1",
              "receiver_name": "Roberto Martinez Diaz",
              "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "cancelation_status": null,
              "cancelation_update_date": null,
              "certification_date": "2020-12-24",
              "certification_authority": "FGV330542BG6",
              "payment_type": "99",
              "payment_type_description": null,
              "payment_method": "PUE",
              "usage": "P01",
              "place_of_issue": "11000",
              "version": "3.3",
              "invoice_details": [
                {
                  "description": "Pago de nómina",
                  "product_identification": "84111505",
                  "quantity": 1,
                  "unit_code": "ACT",
                  "unit_description": null,
                  "unit_amount": 20400.1,
                  "total_amount": 20400.1,
                  "pre_tax_amount": 20400.1,
                  "tax_percentage": 0,
                  "tax_amount": 0,
                  "retained_taxes": [],
                  "collected_at": "2022-02-09T08:45:50.406032Z"
                }
              ],
              "currency": "MXN",
              "subtotal_amount": 20400.1,
              "exchange_rate": 1,
              "tax_amount": 0,
              "discount_amount": 5000,
              "total_amount": 15400.1,
              "payments": [],
              "payroll": {
                "days": 30,
                "type": "O",
                "amount": 20400.1,
                "date_to": "2020-12-31",
                "version": "1.2",
                "date_from": "2020-12-01",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "payment_date": "2020-12-24"
              },
              "folio": "28",
              "xml": "=XML-STRING=",
              "warnings": {
                "code": "warning_code",
                "message": "warning message"
              }
            }
          ]
        },
        "InvoiceEgreso": {
          "summary": "Invoice Egreso",
          "description": "Example of an *Egreso* type invoice.",
          "value": [
            {
              "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
              "link": "1bd948f7-245d-4313-b604-34d1044cb908",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
              "invoice_date": "2020-12-24",
              "status": "Vigente",
              "invoice_type": "Egreso",
              "type": "INFLOW",
              "sender_id": "GHTF980303F7",
              "sender_name": "Roberto Martinez Diaz",
              "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "receiver_id": "MNMK3203409H1",
              "receiver_name": "ACNE SA DE CV",
              "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "cancelation_status": null,
              "cancelation_update_date": null,
              "certification_date": "2020-12-24",
              "certification_authority": "FGV330542BG6",
              "payment_type": "04",
              "payment_type_description": null,
              "payment_method": "PUE",
              "usage": "G03",
              "place_of_issue": "11000",
              "version": "3.3",
              "invoice_details": [
                {
                  "product_identification": "78111500",
                  "description": "Reembolso del servicio",
                  "unit_code": "E48",
                  "unit_description": "Unidad de servicio",
                  "quantity": 1,
                  "unit_amount": 25,
                  "pre_tax_amount": 25,
                  "tax_percentage": 16,
                  "tax_amount": 4,
                  "total_amount": 29,
                  "retained_taxes": [],
                  "collected_at": "2022-02-09T08:45:50.406032Z"
                }
              ],
              "currency": "MXN",
              "subtotal_amount": 25,
              "exchange_rate": 1,
              "tax_amount": 4,
              "discount_amount": 0,
              "total_amount": 29,
              "payments": [],
              "payroll": null,
              "folio": "28",
              "xml": "=XML-STRING=",
              "warnings": {
                "code": "warning_code",
                "message": "warning message"
              }
            }
          ]
        },
        "InvoiceTraslado": {
          "summary": "Invoice Traslado",
          "description": "Example of a *Traslado* type invoice.",
          "value": [
            {
              "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
              "link": "1bd948f7-245d-4313-b604-34d1044cb908",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
              "invoice_date": "2020-12-24",
              "status": "Vigente",
              "invoice_type": "Traslado",
              "type": "INFLOW",
              "sender_id": "GHTF980303F7",
              "sender_name": "ACNE SA DE CV",
              "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "receiver_id": "MNMK3203409H1",
              "receiver_name": "CARGOS S.A. DE C.V.",
              "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
              "cancelation_status": null,
              "cancelation_update_date": null,
              "certification_date": "2020-12-24",
              "certification_authority": "FGV330542BG6",
              "payment_type": null,
              "payment_type_description": null,
              "payment_method": null,
              "usage": "G03",
              "place_of_issue": "11000",
              "version": "3.3",
              "invoice_details": [
                {
                  "description": "FLETE",
                  "product_identification": "78101802",
                  "quantity": 1,
                  "unit_code": "E48",
                  "unit_description": "Unidad de servicio",
                  "unit_amount": 21000,
                  "pre_tax_amount": 21000,
                  "tax_percentage": 16,
                  "tax_amount": 0,
                  "total_amount": 21000,
                  "retained_taxes": [],
                  "collected_at": "2022-02-09T08:45:50.406032Z"
                }
              ],
              "currency": "MXN",
              "subtotal_amount": 0,
              "exchange_rate": 1,
              "tax_amount": 0,
              "discount_amount": 0,
              "total_amount": 0,
              "payments": [],
              "payroll": null,
              "folio": "28",
              "xml": "=XML-STRING=",
              "warnings": {
                "code": "warning_code",
                "message": "warning message"
              }
            }
          ]
        },
        "InvoiceIngresoDetail": {
          "summary": "Invoice Ingreso",
          "description": "Example of an *Igreso* type invoice.",
          "value": {
            "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
            "link": "1bd948f7-245d-4313-b604-34d1044cb908",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
            "invoice_date": "2020-12-24",
            "status": "Vigente",
            "invoice_type": "Ingreso",
            "type": "OUTFLOW",
            "sender_id": "GHTF980303F7",
            "sender_name": "Roberto Martinez Diaz",
            "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "receiver_id": "MNMK3203409H1",
            "receiver_name": "ACNE SA DE CV",
            "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "cancelation_status": null,
            "cancelation_update_date": null,
            "certification_date": "2020-12-24",
            "certification_authority": "FGV330542BG6",
            "payment_type": "04",
            "payment_type_description": null,
            "payment_method": "PUE",
            "usage": "G03",
            "place_of_issue": "11000",
            "version": "3.3",
            "invoice_details": [
              {
                "description": "Servicios de mensajería.",
                "product_identification": "78102206",
                "quantity": 1,
                "unit_code": "E48",
                "unit_description": "Unidad de servicio",
                "unit_amount": 25,
                "pre_tax_amount": 25,
                "tax_percentage": 16,
                "tax_amount": 4,
                "total_amount": 29,
                "retained_taxes": [],
                "collected_at": "2022-02-09T08:45:50.406032Z"
              }
            ],
            "currency": "MXN",
            "subtotal_amount": 25,
            "exchange_rate": 1,
            "tax_amount": 4,
            "discount_amount": 0,
            "total_amount": 29,
            "payments": [],
            "payroll": null,
            "folio": "28",
            "xml": "=XML-STRING=",
            "warnings": {
              "code": "warning_code",
              "message": "warning message"
            }
          }
        },
        "InvoicePagoDetail": {
          "summary": "Invoice Pago",
          "description": "Example of a *Pago* type invoice.",
          "value": {
            "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
            "link": "1bd948f7-245d-4313-b604-34d1044cb908",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
            "invoice_date": "2020-12-24",
            "status": "Vigente",
            "invoice_type": "Pago",
            "type": "OUTFLOW",
            "sender_id": "GHTF980303F7",
            "sender_name": "Roberto Martinez Diaz",
            "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "receiver_id": "MNMK3203409H1",
            "receiver_name": "ACNE SA DE CV",
            "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "cancelation_status": null,
            "cancelation_update_date": null,
            "certification_date": "2020-12-24",
            "certification_authority": "FGV330542BG6",
            "payment_type": null,
            "payment_type_description": null,
            "payment_method": null,
            "usage": "P01",
            "place_of_issue": "11000",
            "version": "3.3",
            "invoice_details": [
              {
                "description": "Pago",
                "product_identification": "84111506",
                "quantity": 1,
                "unit_amount": 0,
                "unit_code": "ACT",
                "unit_description": null,
                "pre_tax_amount": 0,
                "tax_percentage": 0,
                "tax_amount": 0,
                "total_amount": 0,
                "retained_taxes": [],
                "collected_at": "2022-02-09T08:45:50.406032Z"
              }
            ],
            "currency": "MXN",
            "subtotal_amount": 0,
            "exchange_rate": null,
            "tax_amount": 0,
            "discount_amount": 0,
            "total_amount": 0,
            "payments": [
              {
                "date": "2020-03-17T12:00:00.000Z",
                "payment_type": "03",
                "currency": "BRL",
                "exchange_rate": "3.75",
                "amount": 8000.5,
                "operation_number": "831840",
                "beneficiary_rfc": "BNM840515VB1",
                "beneficiary_account_number": "12343453245633",
                "payer_rfc": "BKJM840515VB1",
                "payer_account_number": "13343663245699",
                "payer_bank_name": "CITI BANAMEX",
                "related_documents": [
                  {
                    "invoice_identification": "7EE015F3-6311-11EA-B02A-00155D014007",
                    "currency": "MXN",
                    "payment_method": "PPD",
                    "previous_balance": 18877.84,
                    "amount_paid": 8000,
                    "outstanding_balance": 10877.84
                  }
                ]
              }
            ],
            "payroll": null,
            "folio": "28",
            "xml": "=XML-STRING=",
            "warnings": {
              "code": "warning_code",
              "message": "warning message"
            }
          }
        },
        "InvoiceNominaDetail": {
          "summary": "Invoice Nomina",
          "description": "Example of a *Nomina* type invoice.",
          "value": {
            "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
            "link": "1bd948f7-245d-4313-b604-34d1044cb908",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
            "invoice_date": "2020-12-24",
            "status": "Vigente",
            "invoice_type": "Nómina",
            "type": "INFLOW",
            "sender_id": "GHTF980303F7",
            "sender_name": "ACNE SA DE CV",
            "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "receiver_id": "MNMK3203409H1",
            "receiver_name": "Roberto Martinez Diaz",
            "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "cancelation_status": null,
            "cancelation_update_date": null,
            "certification_date": "2020-12-24",
            "certification_authority": "FGV330542BG6",
            "payment_type": "99",
            "payment_type_description": null,
            "payment_method": "PUE",
            "usage": "P01",
            "place_of_issue": "11000",
            "version": "3.3",
            "invoice_details": [
              {
                "description": "Pago de nómina",
                "product_identification": "84111505",
                "quantity": 1,
                "unit_code": "ACT",
                "unit_description": null,
                "unit_amount": 20400.1,
                "total_amount": 20400.1,
                "pre_tax_amount": 20400.1,
                "tax_percentage": 0,
                "tax_amount": 0,
                "retained_taxes": [],
                "collected_at": "2022-02-09T08:45:50.406032Z"
              }
            ],
            "currency": "MXN",
            "subtotal_amount": 20400.1,
            "exchange_rate": 1,
            "tax_amount": 0,
            "discount_amount": 5000,
            "total_amount": 15400.1,
            "payments": [],
            "payroll": {
              "days": 30,
              "type": "O",
              "amount": 20400.1,
              "date_to": "2020-12-31",
              "version": "1.2",
              "date_from": "2020-12-01",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "payment_date": "2020-12-24"
            },
            "folio": "28",
            "xml": "=XML-STRING=",
            "warnings": {
              "code": "warning_code",
              "message": "warning message"
            }
          }
        },
        "InvoiceEgresoDetail": {
          "summary": "Invoice Egreso",
          "description": "Example of an *Egreso* type invoice.",
          "value": {
            "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
            "link": "1bd948f7-245d-4313-b604-34d1044cb908",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
            "invoice_date": "2020-12-24",
            "status": "Vigente",
            "invoice_type": "Egreso",
            "type": "INFLOW",
            "sender_id": "GHTF980303F7",
            "sender_name": "Roberto Martinez Diaz",
            "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "receiver_id": "MNMK3203409H1",
            "receiver_name": "ACNE SA DE CV",
            "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "cancelation_status": null,
            "cancelation_update_date": null,
            "certification_date": "2020-12-24",
            "certification_authority": "FGV330542BG6",
            "payment_type": "04",
            "payment_type_description": null,
            "payment_method": "PUE",
            "usage": "G03",
            "place_of_issue": "11000",
            "version": "3.3",
            "invoice_details": [
              {
                "product_identification": "78111500",
                "description": "Reembolso del servicio",
                "unit_code": "E48",
                "unit_description": "Unidad de servicio",
                "quantity": 1,
                "unit_amount": 25,
                "pre_tax_amount": 25,
                "tax_percentage": 16,
                "tax_amount": 4,
                "total_amount": 29,
                "retained_taxes": [],
                "collected_at": "2022-02-09T08:45:50.406032Z"
              }
            ],
            "currency": "MXN",
            "subtotal_amount": 25,
            "exchange_rate": 1,
            "tax_amount": 4,
            "discount_amount": 0,
            "total_amount": 29,
            "payments": [],
            "payroll": null,
            "folio": "28",
            "xml": "=XML-STRING=",
            "warnings": {
              "code": "warning_code",
              "message": "warning message"
            }
          }
        },
        "InvoiceTrasladoDetail": {
          "summary": "Invoice Traslado",
          "description": "Example of a *Traslado* type invoice.",
          "value": {
            "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
            "link": "1bd948f7-245d-4313-b604-34d1044cb908",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "invoice_identification": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840",
            "invoice_date": "2020-12-24",
            "status": "Vigente",
            "invoice_type": "Traslado",
            "type": "INFLOW",
            "sender_id": "GHTF980303F7",
            "sender_name": "ACNE SA DE CV",
            "sender_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "receiver_id": "MNMK3203409H1",
            "receiver_name": "CARGOS S.A. DE C.V.",
            "receiver_tax_fraud_status": "NO_TAX_FRAUD_STATUS",
            "cancelation_status": null,
            "cancelation_update_date": null,
            "certification_date": "2020-12-24",
            "certification_authority": "FGV330542BG6",
            "payment_type": null,
            "payment_type_description": null,
            "payment_method": null,
            "usage": "G03",
            "place_of_issue": "11000",
            "version": "3.3",
            "invoice_details": [
              {
                "description": "FLETE",
                "product_identification": "78101802",
                "quantity": 1,
                "unit_code": "E48",
                "unit_description": "Unidad de servicio",
                "unit_amount": 21000,
                "pre_tax_amount": 21000,
                "tax_percentage": 16,
                "tax_amount": 0,
                "total_amount": 21000,
                "retained_taxes": [],
                "collected_at": "2022-02-09T08:45:50.406032Z"
              }
            ],
            "currency": "MXN",
            "subtotal_amount": 0,
            "exchange_rate": 1,
            "tax_amount": 0,
            "discount_amount": 0,
            "total_amount": 0,
            "payments": [],
            "payroll": null,
            "folio": "28",
            "xml": "=XML-STRING=",
            "warnings": {
              "code": "warning_code",
              "message": "warning message"
            }
          }
        },
        "TaxReturnPersonalListPaginated": {
          "summary": "Tax Return Personal",
          "description": "Example of a list of personal tax returns",
          "value": {
            "count": 101,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "02589c41-ba22-4d44-8558-8111cc751318",
                "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "informacion_general": {
                  "ejercicio": 2018,
                  "fecha_hora_presentacion": "2020-01-07T17:28:00-05:00",
                  "numero_operacion": "00000000001",
                  "periodo_declaracion": "Del Ejercicio",
                  "rfc": "ABCD111111A11",
                  "tipo_declaracion": "Normal",
                  "nombre": "JOHN DOE"
                },
                "sueldos_salarios": {
                  "retenedores": [
                    {
                      "rfc_retenedor": "ABCD222222A22",
                      "nombre_denominacion_razon_social": "ACME CORP",
                      "ingresos_exentos": 118263,
                      "ingreso_anual": 2265,
                      "subsidio_empleo": 0
                    }
                  ],
                  "impuesto_retenido": 19497,
                  "ingreso_anual": 118263,
                  "ingresos_acumulables": 115998,
                  "ingresos_exentos": 2265,
                  "subsidio_empleo": 0
                },
                "servicios_profesionales": {
                  "deducciones_autorizadas": {
                    "deducciones_autorizadas": 11870,
                    "otras_deducciones": null,
                    "detalle_deducciones": [
                      {
                        "tipo_deduccion": "GASTOS",
                        "concepto": "GASOLINA Y MANTENIMIENTO DE TRANSPORTE",
                        "monto_detallado": 9682
                      },
                      {
                        "tipo_deduccion": "GASTOS",
                        "concepto": "COMPRAS Y GASTOS GENERALES",
                        "monto_detallado": 2188
                      }
                    ],
                    "total_deducciones_autorizadas": 11870
                  },
                  "ingresos": {
                    "ingresos_acumulables": 46000,
                    "ingresos_exentos": null,
                    "otros_ingresos": null,
                    "total_ingresos": 46000
                  },
                  "resultado_fiscal": {
                    "utilidad_fiscal": 34130,
                    "ptu_pagada_ejercicio": 0,
                    "perdidas_fiscales_ejercicios_anteriores_aplicadas": 0,
                    "utilidad_gravable": 34130
                  },
                  "pagos_provisionales": {
                    "pagos_provisionales_efectuados_en_ejercicio": 0
                  },
                  "retenciones_isr": {
                    "isr_retenido_personas_morales": 4600
                  }
                },
                "deducciones_personales": {
                  "honorarios_medicos_dentales_hospitalarios": [
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC444444A44",
                      "monto_deducible": 1000
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC444444A44",
                      "monto_deducible": 502.34
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC333333A33",
                      "monto_deducible": 258.83
                    },
                    {
                      "rfc_emisor": "ABC444444A55",
                      "monto_deducible": 14183.1
                    },
                    {
                      "rfc_emisor": "ABC444444A66",
                      "monto_deducible": 1658
                    },
                    {
                      "rfc_emisor": "ABC444444A77",
                      "monto_deducible": 1600
                    },
                    {
                      "rfc_emisor": "ABC444444A88",
                      "monto_deducible": 1064
                    },
                    {
                      "rfc_emisor": "ABC444444A99",
                      "monto_deducible": 927.57
                    }
                  ],
                  "donativos": [
                    {
                      "rfc_emisor": "ABC555555A99",
                      "monto_deducible": 10.03
                    }
                  ],
                  "aportaciones_voluntarias_complementarias_al_sar": [
                    {
                      "rfc_emisor": "ABC666666A99",
                      "monto_deducible": 12.03
                    },
                    {
                      "rfc_emisor": "ABC777777A99",
                      "monto_deducible": 87.22
                    }
                  ],
                  "primas_por_seguros_de_gasto_medico": [
                    {
                      "rfc_emisor": "ABC777777A99",
                      "monto_deducible": 20.03
                    }
                  ]
                },
                "determinacion_impuesto": {
                  "base_gravable": 126864,
                  "deducciones_personales": 23264,
                  "ingresos_acumulables": 150128,
                  "isr_favorable": 10308,
                  "isr_conforme_tarifa_final": 13789,
                  "isr_retenido": 24097,
                  "num_clabe": "000000000000000001",
                  "nombre_banco": "BANCO SA",
                  "pagos_provisionales": 0,
                  "titular_clabe_permite_verificacion": "SÍ",
                  "accion_saldo_a_favor": "DEVOLUCIÓN"
                },
                "retenciones": {
                  "sueldos_salarios": [
                    {
                      "rfc_retenedor": "ABC444444A99",
                      "monto_retenciones": 118263,
                      "retenciones_isr": 19497
                    }
                  ],
                  "dividendos": [],
                  "servicios_profesionales": [
                    {
                      "rfc_retenedor": "ABC444444A00",
                      "monto_retenciones": 46000,
                      "retenciones_isr": 4600
                    }
                  ]
                },
                "dividendos": {
                  "monto_acumulable_dividendos_utilidades": null,
                  "monto_total_isr_pagado_sociedad": null
                },
                "datos_informativos": {
                  "credito_fiscal_autorizado_proyectos_investigacion_desarrollo": 0,
                  "credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento": 0,
                  "credito_fiscal_autorizado_proyectos_inversion_artes": 0,
                  "credito_fiscal_autorizado_inversion_equipos_fijos": 0,
                  "credito_fiscal_autorizado_produccion_distribucion_cinematografica": 0,
                  "saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo": 0,
                  "saldo_credito_fiscal_anteriores_proyectos_inversion_artes": 0,
                  "saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica": 0
                },
                "pdf": "=PDF-STRING=",
                "receipt_pdf": "=PDF-STRING=",
                "type": "yearly"
              }
            ]
          }
        },
        "TaxReturnPersonalListMonthlyPaginatedPFAE": {
          "summary": "Tax Return Personal Monthly (PFAe)",
          "description": "Example of a list of PFAE-type monthly personal tax returns",
          "value": {
            "count": 101,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "informacion_general": {
                  "rfc": null,
                  "nombre": null,
                  "tipo_declaracion": null,
                  "ejercicio": null,
                  "periodo_declaracion": null,
                  "fecha_hora_presentacion": null,
                  "numero_operacion": null
                },
                "isr": {
                  "tipo": "PFAE",
                  "determinacion": {
                    "ingresos_periodos_anteriores": 0,
                    "ingresos_periodo": 0,
                    "total_ingresos": 0,
                    "compras_gastos_periodos_anteriores": 1596,
                    "compra_gastos_periodo": 399,
                    "total_compras_gastos": 1995,
                    "base_gravable_pago_provisional": 0,
                    "isr_causado": 0,
                    "pagos_provisionales_efectuados_anterioridad": 0,
                    "isr_retenido_periodos_anteriores": 0,
                    "impuesto_retenido": 0,
                    "isr_cargo": 0
                  },
                  "detalle_del_pago": {
                    "a_cargo": 0,
                    "parte_actualizada": 0,
                    "recargos": 0,
                    "total_contribuciones": 0,
                    "total_aplicaciones": 0,
                    "cantidad_a_cargo": 0,
                    "cantidad_a_pagar": 0
                  }
                },
                "iva": {
                  "determinacion": {
                    "actividades_gravadas_tasa_16": 0,
                    "actividades_gravadas_tasa_0": 0,
                    "actividades_exentas": 0,
                    "iva_cobrado_periodo_tasa_16": 0,
                    "iva_acreditable_periodo": 0,
                    "iva_retenido": 0,
                    "saldo_a_favor": null,
                    "impuesto_a_favor": null
                  },
                  "detalle_del_pago": {
                    "total_contribuciones": 0,
                    "total_aplicaciones": 0,
                    "cantidad_a_cargo": 0,
                    "cantidad_a_pagar": 0,
                    "a_favor": null
                  }
                },
                "pdf": "===PDF_BINARY====",
                "receipt_pdf": "===PDF_BINARY====",
                "type": "monthly"
              }
            ]
          }
        },
        "TaxReturnPersonalListMonthlyPaginatedPFAI": {
          "summary": "Tax Return Personal Monthly (PFAI)",
          "description": "Example of a list of PFAI-type monthly personal tax returns",
          "value": {
            "count": 101,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "informacion_general": {
                  "rfc": null,
                  "nombre": null,
                  "tipo_declaracion": null,
                  "ejercicio": null,
                  "periodo_declaracion": null,
                  "fecha_hora_presentacion": null,
                  "numero_operacion": null
                },
                "isr": {
                  "tipo": "PFAE",
                  "determinacion": {
                    "ingresos_periodos_anteriores": 0,
                    "ingresos_periodo": 0,
                    "total_ingresos": 0,
                    "compras_gastos_periodos_anteriores": 1596,
                    "compra_gastos_periodo": 399,
                    "total_compras_gastos": 1995,
                    "base_gravable_pago_provisional": 0,
                    "isr_causado": 0,
                    "pagos_provisionales_efectuados_anterioridad": 0,
                    "isr_retenido_periodos_anteriores": 0,
                    "impuesto_retenido": 0,
                    "isr_cargo": 0,
                    "tipo_de_deduccíon": "dedduccíon opicional",
                    "optas_por_el_cálculo_acumulado": "NO",
                    "deduccíon_opcional": 700,
                    "impuesto_predial": 0,
                    "total_deducciones_autorizadas": 700,
                    "tienes_facilidades_administrativas_o_estímulos_deducibles": "NO"
                  },
                  "detalle_del_pago": {
                    "a_cargo": 0,
                    "parte_actualizada": 0,
                    "recargos": 0,
                    "total_contribuciones": 0,
                    "total_aplicaciones": 0,
                    "cantidad_a_cargo": 0,
                    "cantidad_a_pagar": 0
                  }
                },
                "iva": {
                  "determinacion": {
                    "actividades_gravadas_tasa_16": 0,
                    "actividades_gravadas_tasa_0": 0,
                    "actividades_exentas": 0,
                    "iva_cobrado_periodo_tasa_16": 0,
                    "iva_acreditable_periodo": 0,
                    "iva_retenido": 0,
                    "saldo_a_favor": null,
                    "impuesto_a_favor": null,
                    "impuesto_a_cargo": 54,
                    "cantidad_a_cargo": 54
                  },
                  "detalle_del_pago": {
                    "total_contribuciones": 0,
                    "total_aplicaciones": 0,
                    "cantidad_a_cargo": 0,
                    "cantidad_a_pagar": 0,
                    "a_favor": null
                  }
                },
                "pdf": "===PDF_BINARY====",
                "receipt_pdf": "===PDF_BINARY====",
                "type": "monthly"
              }
            ]
          }
        },
        "TaxReturnBusinessListPaginated": {
          "summary": "Tax Return Business",
          "description": "Example of a list of business tax returns",
          "value": {
            "count": 101,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "02589c41-ba22-4d44-8558-8111cc751318",
                "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "informacion_general": {
                  "ejercicio": 2018,
                  "fecha_hora_presentacion": "2020-01-07T16:55:00-06:00",
                  "numero_operacion": "000000000001",
                  "periodo_declaracion": "Del Ejercicio",
                  "rfc": "ABC1111111A1",
                  "tipo_declaracion": "Normal",
                  "tipo_complementaria": null,
                  "denominacion_razon_social": "ACME CORP"
                },
                "datos_adicionales": {
                  "indica_si_optas_por_dictaminar_tus_estados_financieros": "NO",
                  "estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal": "NO",
                  "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero": "SIN SELECCIÓN",
                  "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp": "SIN SELECCIÓN",
                  "optas_por_presentar_informacion_sobre_tu_situacion_fiscal": "SIN SELECCIÓN",
                  "indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente": "NO"
                },
                "estado_resultados": {
                  "ventas_servicios_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": 911165,
                    "total": 911165
                  },
                  "ventas_servicios_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "devoluciones_descuentos_bonificaciones_ventas_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "devoluciones_descuentos_bonificaciones_ventas_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "ingresos_netos": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": 911165,
                    "total": 911165
                  },
                  "inventario_inicial": null,
                  "compras_netas_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "compras_netas_importacion": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "inventario_final": null,
                  "costo_mercancias": null,
                  "mano_de_obra": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "maquilas": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "gastos_indirectos_fabricacion": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "costo_ventas_servicios": null,
                  "utilidad_bruta": 911165,
                  "perdida_bruta": null,
                  "gastos_operacion": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": 499540,
                    "total": 499540
                  },
                  "utilidad_operacion": 411625,
                  "perdida_operacion": null,
                  "intereses_devengados_a_favor_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "intereses_devengados_a_favor_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "intereses_moratorios_a_favor_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "intereses_moratorios_a_favor_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "ganancia_cambiaria": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "intereses_devengados_a_cargo_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "intereses_devengados_a_cargo_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "intereses_moratorios_a_cargo_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "intereses_moratorios_a_cargo_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "perdida_cambiaria": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "resultado_posicion_monetaria_favorable": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "resultado_posicion_monetaria_desfavorable": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "otras_operaciones_financieras_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "otras_operaciones_financieras_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "otras_operaciones_financieras": null,
                  "resultado_integral_financiamiento": null,
                  "otros_gastos_nacionales": null,
                  "otros_gastos_extranjero": null,
                  "otros_gastos": null,
                  "otros_productos_nacionales": null,
                  "otros_productos_extranjero": null,
                  "otros_productos": null,
                  "ingresos_partidas_discontinuas_extraordinarias": null,
                  "gastos_partidas_discontinuas_extraordinarias": null,
                  "utilidad_antes_impuesto": 411625,
                  "perdida_antes_impuesto": null,
                  "isr": 113002,
                  "ietu": null,
                  "impac": null,
                  "ptu": null,
                  "utilidad_participacion_subsidiaria": null,
                  "perdida_participacion_subsidiaria": null,
                  "efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria": null,
                  "efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria": null,
                  "utilidad_neta": 298623,
                  "perdida_neta": null
                },
                "estado_posicion_financiera_balance": {
                  "activo": {
                    "efectivo_caja_depositos_instituciones_credito_nacionales": 726644,
                    "efectivo_caja_depositos_instituciones_credito_extranjero": null,
                    "inversiones_valores_instituciones_nacionales_excepto_acciones": null,
                    "inversiones_valores_instituciones_extranjero_excepto_acciones": null,
                    "cuentas_documentos_por_cobrar_nacionales": {
                      "partes_relacionadas": null,
                      "partes_no_relacionadas": null,
                      "total": null
                    },
                    "cuentas_documentos_por_cobrar_extranjero": {
                      "partes_relacionadas": null,
                      "partes_no_relacionadas": null,
                      "total": null
                    },
                    "contribuciones_a_favor": null,
                    "inventarios": null,
                    "otros_activos_circulantes": 13277,
                    "inversiones_en_acciones_nacionales": null,
                    "inversiones_en_acciones_extranjero": null,
                    "inversiones_en_acciones_total": null,
                    "terrenos": null,
                    "construcciones": null,
                    "construcciones_en_proceso": null,
                    "maquinaria_y_equipo": null,
                    "mobiliario_y_equipo_oficina": null,
                    "equipo_de_computo": null,
                    "equipo_de_transporte": null,
                    "otros_activos_fijos": 12756,
                    "depreciacion_acumulada": -106,
                    "cargos_y_gastos_diferidos": 9319,
                    "amortizacion_acumulada": null,
                    "suma_activo": 761890
                  },
                  "pasivo": {
                    "cuentas_documentos_por_pagar_nacionales": {
                      "partes_relacionadas": null,
                      "partes_no_relacionadas": 268227,
                      "total": 268227
                    },
                    "cuentas_documentos_por_pagar_extranjero": {
                      "partes_relacionadas": null,
                      "partes_no_relacionadas": null,
                      "total": null
                    },
                    "contribuciones_por_pagar": 223490,
                    "anticipos_de_clientes": {
                      "partes_relacionadas": null,
                      "partes_no_relacionadas": null,
                      "total": null
                    },
                    "aportaciones_futuros_aumentos_de_capital": null,
                    "otros_pasivos": null,
                    "suma_pasivo": 491717
                  },
                  "capital_contable": {
                    "capital_social_proveniente_aportaciones": 10000,
                    "capital_social_proveniente_capitalizacion": null,
                    "reservas": null,
                    "otras_cuentas_capital": null,
                    "aportaciones_futuros_aumentos_de_capital": null,
                    "utilidades_acumuladas": null,
                    "utilidad_del_ejercicio": 298623,
                    "perdidas_acumuladas": -38450,
                    "perdida_del_ejercicio": null,
                    "exceso_en_actualizacion_capital": null,
                    "insuficiencia_en_actualizacion_capital": null,
                    "actualizacion_del_capital_contable": null,
                    "suma_capital_contable": 270173,
                    "suma_pasivo_mas_capital_contable": 761890
                  }
                },
                "conciliacion_entre_resultado_contable_fiscal": {
                  "utilidad_o_perdida_neta": 298623,
                  "efectos_reexpresion": null,
                  "resultado_posicion_monetaria": null,
                  "utilidad_o_perdida_neta_historica": 298623,
                  "ingresos_fiscales_no_contables": 95,
                  "ajuste_anual_inflacion_acumulable": 95,
                  "anticipos_de_clientes": null,
                  "intereses_moratorios_efectivamente_cobrados": null,
                  "ganancia_en_enajenacion_acciones_por_reembolso_capital": null,
                  "ganancia_en_enajenacion_de_terrenos_y_activo_fijo": null,
                  "inventario_acumulable_del_ejercicio": null,
                  "otros_ingresos_fiscales_no_contables": null,
                  "deducciones_contables_no_fiscales": 117415,
                  "costo_de_ventas_contable": null,
                  "depreciacion_y_amortizacion_contable": 106,
                  "gastos_que_no_reunen_requisitos_fiscales": 4307,
                  "isr_ietu_impac_ptu": 113002,
                  "perdida_contable_enajenacion_de_acciones": null,
                  "perdida_contable_enajenacion_de_activo_fijo": null,
                  "perdida_en_participacion_subsidiaria": null,
                  "intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no": 0,
                  "otras_deducciones_contables_no_fiscales": 0,
                  "deducciones_fiscales_no_contables": 0,
                  "ajuste_anual_inflacion_deducible": null,
                  "costo_vendido_fiscal": null,
                  "deduccion_inversiones": null,
                  "estimulo_fiscal_por_deduccion_inmediata_inversiones": null,
                  "donacion_bienes_basicos_subsistencia_humana": 0,
                  "estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores": 0,
                  "deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores": 0,
                  "perdida_fiscal_en_enajenacion_acciones": null,
                  "perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo": null,
                  "intereses_moratorios_efectivamente_pagados": null,
                  "otras_deducciones_fiscales_no_contables": null,
                  "ingresos_contables_no_fiscales": null,
                  "intereses_moratorios_devengados_a_favor_cobrados_o_no": null,
                  "anticipos_de_clientes_ejercicios_anteriores": null,
                  "saldos_a_favor_impuestos_y_su_actualizacion": null,
                  "utilidad_contable_enajenacion_de_activo_fijo": null,
                  "utilidad_contable_enajenacion_de_acciones": null,
                  "utilidad_en_participacion_subsidiaria": null,
                  "otros_ingresos_contables_no_fiscales": null,
                  "utilidad_o_perdida_fiscal_antes_de_ptu": 416133
                },
                "deducciones_autorizadas": {
                  "sueldos_salarios": null,
                  "honorarios_pagados_a_personas_fisicas": null,
                  "regalias_y_asistencia_tecnica": null,
                  "donativos_otorgados": null,
                  "uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas": null,
                  "fletes_y_acarreos_pagados_a_parsonas_fisicas": null,
                  "contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps": null,
                  "seguros_fianzas": null,
                  "perdida_por_creditos_incobrables": null,
                  "viaticos_y_gastos_viaje": 59527,
                  "combustible_y_lubricantes": null,
                  "credito_al_salario_no_disminuido_de_contribuciones": null,
                  "aportaciones_sar_infonavit_y_jubilaciones_vejez": null,
                  "aportaciones_para_fondos_de_pensiones_y_jubilaciones": null,
                  "cuotas_imss": null,
                  "consumos_en_restaurantes": 11254,
                  "perdida_por_operaciones_financieras_derivadas": null,
                  "deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores": null,
                  "monto_total_pagos_que_sean_ingresos_exentos_para_trabajador": null,
                  "monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador": null,
                  "monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador": null,
                  "uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno": null,
                  "otras_deducciones_autorizadas": 424346,
                  "total_deducciones_autorizadas": 495127
                },
                "cifras_cierre_ejercicio": {
                  "perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas": null,
                  "saldo_promedio_anual_de_creditos": 142795,
                  "saldo_promedio_anual_de_deudas": 144765,
                  "coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente": 0.4567,
                  "porcentaje_de_participacion_consolidable": null,
                  "isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar": null,
                  "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores": null,
                  "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores": null,
                  "saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida": null,
                  "saldo_actualizado_de_cuenta_de_capital_de_aportacion": null,
                  "saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables": null
                },
                "determinacion_del_impuesto_sobre_la_renta": {
                  "determinacion_del_impuesto_sobre_la_renta": {
                    "total_ingresos_acumulables": 911260,
                    "total_deducciones_autorizadas_y_deduccion_inmediata_inversiones": 495126,
                    "deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila": null,
                    "utilidad_o_perdida_fiscal_antes_de_ptu": 416134,
                    "ptu_pagada_en_el_ejercicio": null,
                    "utilidad_fiscal_del_ejercicio": 416134,
                    "perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio": 39462,
                    "resultado_fiscal": 376672,
                    "impuesto_causado_en_ejercicio": 113002,
                    "tienes_estimulos_fiscales_a_acreditar": "SIN SELECCIÓN",
                    "impuesto_sobre_la_renta_del_ejercicio": 113002,
                    "pagos_provisionales_efectuados_enterados_a_federacion": null,
                    "impuesto_retenido_al_contribuyente": null,
                    "impuesto_acreditable_pagado_en_extranjero": null,
                    "impuesto_acreditable_por_dividendos_o_utilidades_distribuidos": null,
                    "otras_cantidades_a_cargo": null,
                    "otras_cantidades_a_favor": null,
                    "diferencia_a_cargo": 113002,
                    "isr_a_cargo_del_ejercicio": 113002,
                    "isr_a_favor_del_ejercicio": null
                  },
                  "impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes": null,
                  "datos_informativos_ejercicio": {
                    "monto_aplicado_del_estimulo_fiscal_de_chatarrizacion": 0,
                    "monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles": 0,
                    "impac_recuperado_en_ejercicio_derivado_de_deconsolidacion": 0,
                    "ingresos_obtenidos_por_apoyos_gubernamentales": 0,
                    "gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico": 0,
                    "credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                    "credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar": 0,
                    "credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar": 0,
                    "saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos": 0,
                    "credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar": 0
                  },
                  "datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio": {
                    "total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio": null,
                    "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar": 0,
                    "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                    "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar": 0,
                    "saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar": 0
                  }
                },
                "dividendos_o_utilidades_distribuidos": {
                  "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores": null,
                  "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014": null,
                  "provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre": null,
                  "no_provenientes_de_cufin_ni_cufinre_en_efectivo": null,
                  "no_provenientes_de_cufin_ni_cufinre_en_acciones": null,
                  "monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre": null,
                  "monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre": null,
                  "provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente": null
                },
                "detalle_pago_r1_isr_personas_morales": {
                  "a_cargo": 113002,
                  "parte_actualizada": null,
                  "recargos": null,
                  "multa_por_correccion": null,
                  "total_contribuciones": 113002,
                  "desea_aplicar_alguna_compensacion_o_estimulo": "NO",
                  "cantidad_a_cargo": 113002,
                  "opta_por_pagar_parcialidades": "SIN SELECCIÓN",
                  "importe_de_primera_parcialidad": null,
                  "importe_sin_primera_parcialidad": null,
                  "cantidad_a_favor": null,
                  "cantidad_a_pagar": 113002
                },
                "pdf": "=PDF-STRING=",
                "receipt_pdf": "=PDF-STRING=",
                "type": "yearly"
              }
            ]
          }
        },
        "TaxReturnBusinessListMonthlyPaginated": {
          "summary": "Tax Return Business Monthly",
          "description": "Example of a list of monthly business tax returns",
          "value": {
            "count": 101,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "informacion_general": {
                  "rfc": "DPA950805RR2",
                  "denominacion_razon_social": "Aloha Mahalo SC",
                  "tipo_declaracion": "Normal",
                  "ejercicio": 2020,
                  "periodo_declaracion": "Diciembre",
                  "fecha_hora_presentacion": "2021-01-18T19:24:00-06:00",
                  "numero_operacion": "400475119",
                  "tipo_complementaria": null
                },
                "determinacion_isr": {
                  "personas_morales_regimen_general": {
                    "suma_ingresos_nominales_meses_anteriores_ejercicio": 69848414,
                    "estimulos_acreditables": null,
                    "ingresos_nominales_mes_que_declara": 6482479,
                    "reducciones": null,
                    "total_ingresos_nominales": 76330893,
                    "impuestos_del_periodo": 284098,
                    "coeficiente_utilidad": 0.2318,
                    "pagos_provisionales_efectuados_anterioridad": 303039,
                    "utilidad_fiscal_pago_provisional": 17693501,
                    "impuesto_retenido": 29925,
                    "ptu": null,
                    "otras_cantidades_a_cargo_contribuyente": null,
                    "iventario_acumulable": null,
                    "otras_cantidades_a_favor_contribuyente": null,
                    "anticipos_rendimientos_distribuidos_periodo": 16746509,
                    "diferencia_a_cargo": 0,
                    "perdidas_fiscales_ejercicios_anteriores_pendientes": null,
                    "estimulo_fiscal_deduccion_inmediata": null,
                    "impuesto_correspondiente_participacion_consolidable": null,
                    "deduccion_adicional_fomento_primer_empleo": null,
                    "porcentaje_participacion_consolidable": null,
                    "base_gravable_pago_provisional": 946992,
                    "impuesto_a_cargo": 0,
                    "isr_causado": 284098,
                    "ieps_alcohol": null
                  }
                },
                "detalle_pago_isr": {
                  "r1_isr_personas_morales": {
                    "a_cargo": 0,
                    "acreditamiento_sorteo_buen_fin": null,
                    "parte_actualizada": null,
                    "diesel_marino": null,
                    "recargos": null,
                    "total_aplicaciones": 0,
                    "multa_por_correccion": null,
                    "fecha_pago_realizado_anterioridad": null,
                    "total_de_contribuciones": 0,
                    "monto_pagado_anterioridad": null,
                    "credito_al_salario": null,
                    "importe_pagado_ultimas_48_hrs": null,
                    "subsidio_empleo": null,
                    "cantidad_a_cargo": 0,
                    "impuesto_a_depositos_efectivo_acreditable": null,
                    "aplica_primera_parcialidad": "NO",
                    "compensaciones": null,
                    "credito_ieps_diesel": null,
                    "diesel_automotriz_transporte": null,
                    "cantidad_a_favor": null,
                    "uso_infraestructura_carretera_cuota": null,
                    "cantidad_a_pagar": 0,
                    "otros_estimulos": null,
                    "importe_1ra_parcialidad": null,
                    "importe_sin_1ra_parcialidad": null
                  },
                  "r12_isr_retenciones_por_salarios": {
                    "a_cargo": 415945,
                    "acreditamiento_sorteos": null,
                    "parte_actualizada": 0,
                    "diesel_marino": null,
                    "recargos": 0,
                    "total_aplicaciones": 379,
                    "multa_por_correccion": null,
                    "fecha_pago_realizado_anterioridad": null,
                    "total_de_contribuciones": 415945,
                    "monto_pagado_anterioridad": null,
                    "credito_al_salario": null,
                    "importe_pagado_ultimas_48_hrs": null,
                    "subsidio_empleo": 379,
                    "cantidad_a_cargo": 415566,
                    "impuesto_a_depositos_efectivo_acreditable": null,
                    "aplica_primera_parcialidad": "NO",
                    "compensaciones": null,
                    "credito_ieps_diesel": null,
                    "diesel_automotriz_transporte": null,
                    "cantidad_a_favor": null,
                    "otros_estimulos": null,
                    "cantidad_a_pagar": 415566,
                    "importe_1ra_parcialidad": null,
                    "importe_sin_1ra_parcialidad": null
                  },
                  "r13_isr_retenciones_por_asimilados_a_salarios": {
                    "a_cargo": 254588,
                    "acreditamiento_sorteos": null,
                    "parte_actualizada": 0,
                    "diesel_marino": null,
                    "recargos": 0,
                    "total_aplicaciones": 0,
                    "multa_por_correccion": null,
                    "fecha_pago_realizado_anterioridad": null,
                    "total_de_contribuciones": 254588,
                    "monto_pagado_anterioridad": null,
                    "credito_al_salario": null,
                    "importe_pagado_ultimas_48_hrs": null,
                    "subsidio_empleo": null,
                    "cantidad_a_cargo": 254588,
                    "impuesto_a_depositos_efectivo_acreditable": null,
                    "aplica_primera_parcialidad": "NO",
                    "compensaciones": null,
                    "credito_ieps_diesel": null,
                    "diesel_automotriz_transporte": null,
                    "cantidad_a_favor": null,
                    "otros_estimulos": null,
                    "cantidad_a_pagar": 254588,
                    "importe_1ra_parcialidad": null,
                    "importe_sin_1ra_parcialidad": null
                  },
                  "r14_isr_retenciones_por_servicios_profesionales": {
                    "a_cargo": 104482,
                    "acreditamiento_sorteos": null,
                    "parte_actualizada": 0,
                    "diesel_marino": null,
                    "recargos": 0,
                    "total_aplicaciones": 0,
                    "multa_por_correccion": null,
                    "fecha_pago_realizado_anterioridad": null,
                    "total_de_contribuciones": 104482,
                    "monto_pagado_anterioridad": null,
                    "credito_al_salario": null,
                    "importe_pagado_ultimas_48_hrs": null,
                    "subsidio_empleo": null,
                    "cantidad_a_cargo": 104482,
                    "impuesto_a_depositos_efectivo_acreditable": null,
                    "aplica_primera_parcialidad": "NO",
                    "compensaciones": null,
                    "credito_ieps_diesel": null,
                    "diesel_automotriz_transporte": null,
                    "cantidad_a_favor": null,
                    "otros_estimulos": null,
                    "cantidad_a_pagar": 104482,
                    "importe_1ra_parcialidad": null,
                    "importe_sin_1ra_parcialidad": null
                  }
                },
                "determinacion_iva": {
                  "montos_actos_actividades_pagados": {
                    "total_actos_actividades_pagados_tasa_16": 2094706,
                    "total_actos_actividades_pagados_importacion_bienes_tasa_11": null,
                    "total_actos_actividades_sujetos_estimulo_rfn": 0,
                    "total_actos_actividades_pagados_tasa_0": 0,
                    "total_actos_actividades_pagados_importacion_bienes_tasa_16": null,
                    "total_actos_actividades_pagados_no_paga_iva": 0
                  },
                  "detalle_total_actos_actividades_pagados_tasa_16": {
                    "intereses_pagados_tasa_16": null,
                    "otros_actos_pagados_tasa_16": 2094706,
                    "regalias_pagadas_tasa_16": null,
                    "total_actos_pagados_tasa_16": 2094706
                  },
                  "determinacion_iva_acreditable": {
                    "total_iva_actos_actividades_pagados_tasa_16": 335153,
                    "iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto": null,
                    "iva_pagado_sujeto_estimulo_rfn": null,
                    "iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto": null,
                    "total_actos_actividades_pagados_importacion_bienes_tasa_16": 0,
                    "iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": 0,
                    "proporcion_utilizada_conforme_art_5": null,
                    "total_iva_trasladado_contribuyente": 335153,
                    "proporcion_utilizada_conforme_art_5_b": null,
                    "iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados": 335153,
                    "iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados": null,
                    "iva_acreditable": 335153,
                    "monto_acreditable_actualizado_a_incrementar_derivado_ajuste": null,
                    "iva_pagado_importacion_inversiones_actos_gravados": null,
                    "total_iva_acreditable_periodo": 335153,
                    "total_iva_actos_actividades_gravados": 335153,
                    "total_actos_actividades_pagados_importacion_bienes_tasa_11": null,
                    "iva_trasladado_adquisicion_inversiones_actos_gravados": null,
                    "iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": null
                  },
                  "determinacion_iva": {
                    "valor_actos_actividades_gravados_tasa_16": 6457950,
                    "otras_cantidades_a_favor_contribuyente": null,
                    "valor_actos_actividades_gravados_tasa_11": null,
                    "cantidad_a_cargo": 312421,
                    "valor_actos_actividades_gravados_tasa_0_exportacion": null,
                    "saldo_a_favor": null,
                    "valor_actos_actividades_gravados_tasa_9_otros": null,
                    "devolucion_inmediata_obtenida": null,
                    "suma_actos_actividades_gravados": 6457950,
                    "saldo_a_favor_periodo": 0,
                    "valor_actos_actividades_no_se_deba_pagar_impuesto_exentos": null,
                    "acreditamiento_saldo_favor_periodos_anteriores": null,
                    "impuesto_causado": 1033272,
                    "diferencia_a_cargo": 312421,
                    "cantidad_actualizada_a_reintegrarse_derivada_de_ajuste": null,
                    "ieps_acreditable_alcohol": null,
                    "iva_retenido_al_contribuyente": 385698,
                    "impuesto_a_cargo": 312421,
                    "total_iva_acreditable": 335153,
                    "remanente_saldo_favor_ieps_alcohol": null,
                    "otras_cantidades_a_cargo_contribuyente": null
                  },
                  "detalle_valor_actos_actividades_gravados_tasa_16": {
                    "intereses_cobrados_tasa_16": null,
                    "otros_actos_actividades_gravados_tasa_16": 6457950,
                    "regalias_entre_partes_relacionadas_tasa_16": null,
                    "total_actos_actividades_gravados_tasa_16": 6457950
                  }
                },
                "detalle_pago_iva": {
                  "r21_iva": {
                    "a_cargo": 312421,
                    "cretificados_tesofe": null,
                    "a_favor": null,
                    "diesel_marino": null,
                    "parte_actualizada": 0,
                    "total_aplicaciones": 0,
                    "recargos": 0,
                    "fecha_pago_realizado_anterioridad": null,
                    "multa_por_correccion": null,
                    "monto_pagado_anterioridad": null,
                    "total_de_contribuciones": 312421,
                    "importe_pagado_ultimas_48_hrs": null,
                    "credito_al_salario": null,
                    "cantidad_a_cargo": 312421,
                    "subsidio_empleo": null,
                    "aplica_primera_parcialidad": "NO",
                    "compensaciones": null,
                    "diesel_automotriz_transporte": null,
                    "uso_infraestructura_carretera_cuota": null,
                    "cantidad_a_favor": null,
                    "otros_estimulos": null,
                    "cantidad_a_pagar": 312421,
                    "importe_1ra_parcialidad": null,
                    "importe_sin_1ra_parcialidad": null
                  },
                  "r21_iva_retenciones": {
                    "a_cargo": 111448,
                    "diesel_marino": null,
                    "parte_actualizada": 0,
                    "total_aplicaciones": 0,
                    "recargos": 0,
                    "fecha_pago_realizado_anterioridad": null,
                    "multa_por_correccion": null,
                    "monto_pagado_anterioridad": null,
                    "total_de_contribuciones": 111448,
                    "importe_pagado_ultimas_48_hrs": null,
                    "credito_al_salario": null,
                    "cantidad_a_cargo": 111448,
                    "subsidio_empleo": null,
                    "aplica_primera_parcialidad": "NO",
                    "compensaciones": null,
                    "credito_ieps_diesel": null,
                    "otros_estimulos": null,
                    "cantidad_a_favor": null,
                    "cretificados_tesofe": null,
                    "cantidad_a_pagar": 111448,
                    "importe_1ra_parcialidad": null,
                    "importe_sin_1ra_parcialidad": null
                  }
                },
                "pdf": "===PDF_BINARY====",
                "receipt_pdf": "===PDF_BINARY====",
                "type": "monthly"
              }
            ]
          }
        },
        "TaxReturnPersonalList": {
          "summary": "Tax Return Personal",
          "description": "Example of a list of personal tax returns",
          "value": [
            {
              "id": "02589c41-ba22-4d44-8558-8111cc751318",
              "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "informacion_general": {
                "ejercicio": 2018,
                "fecha_hora_presentacion": "2020-01-07T17:28:00-05:00",
                "numero_operacion": "00000000001",
                "periodo_declaracion": "Del Ejercicio",
                "rfc": "ABCD111111A11",
                "tipo_declaracion": "Normal",
                "nombre": "JOHN DOE"
              },
              "sueldos_salarios": {
                "retenedores": [
                  {
                    "rfc_retenedor": "ABCD222222A22",
                    "nombre_denominacion_razon_social": "ACME CORP",
                    "ingresos_exentos": 118263,
                    "ingreso_anual": 2265,
                    "subsidio_empleo": 0
                  }
                ],
                "impuesto_retenido": 19497,
                "ingreso_anual": 118263,
                "ingresos_acumulables": 115998,
                "ingresos_exentos": 2265,
                "subsidio_empleo": 0
              },
              "servicios_profesionales": {
                "deducciones_autorizadas": {
                  "deducciones_autorizadas": 11870,
                  "otras_deducciones": null,
                  "detalle_deducciones": [
                    {
                      "tipo_deduccion": "GASTOS",
                      "concepto": "GASOLINA Y MANTENIMIENTO DE TRANSPORTE",
                      "monto_detallado": 9682
                    },
                    {
                      "tipo_deduccion": "GASTOS",
                      "concepto": "COMPRAS Y GASTOS GENERALES",
                      "monto_detallado": 2188
                    }
                  ],
                  "total_deducciones_autorizadas": 11870
                },
                "ingresos": {
                  "ingresos_acumulables": 46000,
                  "ingresos_exentos": null,
                  "otros_ingresos": null,
                  "total_ingresos": 46000
                },
                "resultado_fiscal": {
                  "utilidad_fiscal": 34130,
                  "ptu_pagada_ejercicio": 0,
                  "perdidas_fiscales_ejercicios_anteriores_aplicadas": 0,
                  "utilidad_gravable": 34130
                },
                "pagos_provisionales": {
                  "pagos_provisionales_efectuados_en_ejercicio": 0
                },
                "retenciones_isr": {
                  "isr_retenido_personas_morales": 4600
                }
              },
              "deducciones_personales": {
                "honorarios_medicos_dentales_hospitalarios": [
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC444444A44",
                    "monto_deducible": 1000
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC444444A44",
                    "monto_deducible": 502.34
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC333333A33",
                    "monto_deducible": 258.83
                  },
                  {
                    "rfc_emisor": "ABC444444A55",
                    "monto_deducible": 14183.1
                  },
                  {
                    "rfc_emisor": "ABC444444A66",
                    "monto_deducible": 1658
                  },
                  {
                    "rfc_emisor": "ABC444444A77",
                    "monto_deducible": 1600
                  },
                  {
                    "rfc_emisor": "ABC444444A88",
                    "monto_deducible": 1064
                  },
                  {
                    "rfc_emisor": "ABC444444A99",
                    "monto_deducible": 927.57
                  }
                ],
                "donativos": [
                  {
                    "rfc_emisor": "ABC555555A99",
                    "monto_deducible": 10.03
                  }
                ],
                "aportaciones_voluntarias_complementarias_al_sar": [
                  {
                    "rfc_emisor": "ABC666666A99",
                    "monto_deducible": 12.03
                  },
                  {
                    "rfc_emisor": "ABC777777A99",
                    "monto_deducible": 87.22
                  }
                ],
                "primas_por_seguros_de_gasto_medico": [
                  {
                    "rfc_emisor": "ABC777777A99",
                    "monto_deducible": 20.03
                  }
                ]
              },
              "determinacion_impuesto": {
                "base_gravable": 126864,
                "deducciones_personales": 23264,
                "ingresos_acumulables": 150128,
                "isr_favorable": 10308,
                "isr_conforme_tarifa_final": 13789,
                "isr_retenido": 24097,
                "num_clabe": "000000000000000001",
                "nombre_banco": "BANCO SA",
                "pagos_provisionales": 0,
                "titular_clabe_permite_verificacion": "SÍ",
                "accion_saldo_a_favor": "DEVOLUCIÓN"
              },
              "retenciones": {
                "sueldos_salarios": [
                  {
                    "rfc_retenedor": "ABC444444A99",
                    "monto_retenciones": 118263,
                    "retenciones_isr": 19497
                  }
                ],
                "dividendos": [],
                "servicios_profesionales": [
                  {
                    "rfc_retenedor": "ABC444444A00",
                    "monto_retenciones": 46000,
                    "retenciones_isr": 4600
                  }
                ]
              },
              "dividendos": {
                "monto_acumulable_dividendos_utilidades": null,
                "monto_total_isr_pagado_sociedad": null
              },
              "datos_informativos": {
                "credito_fiscal_autorizado_proyectos_investigacion_desarrollo": 0,
                "credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento": 0,
                "credito_fiscal_autorizado_proyectos_inversion_artes": 0,
                "credito_fiscal_autorizado_inversion_equipos_fijos": 0,
                "credito_fiscal_autorizado_produccion_distribucion_cinematografica": 0,
                "saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo": 0,
                "saldo_credito_fiscal_anteriores_proyectos_inversion_artes": 0,
                "saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica": 0
              },
              "pdf": "=PDF-STRING=",
              "receipt_pdf": "=PDF-STRING="
            }
          ]
        },
        "TaxReturnPersonalListMonthlyPFAE": {
          "summary": "Tax Return Personal Monthly (PFAE)",
          "description": "Example of a PFAE-type monthly personal tax return",
          "value": [
            {
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "informacion_general": {
                "rfc": null,
                "nombre": null,
                "tipo_declaracion": null,
                "ejercicio": null,
                "periodo_declaracion": null,
                "fecha_hora_presentacion": null,
                "numero_operacion": null
              },
              "isr": {
                "tipo": "PFAE",
                "determinacion": {
                  "ingresos_periodos_anteriores": 0,
                  "ingresos_periodo": 0,
                  "total_ingresos": 0,
                  "compras_gastos_periodos_anteriores": 1596,
                  "compra_gastos_periodo": 399,
                  "total_compras_gastos": 1995,
                  "base_gravable_pago_provisional": 0,
                  "isr_causado": 0,
                  "pagos_provisionales_efectuados_anterioridad": 0,
                  "isr_retenido_periodos_anteriores": 0,
                  "impuesto_retenido": 0,
                  "isr_cargo": 0
                },
                "detalle_del_pago": {
                  "a_cargo": 0,
                  "parte_actualizada": 0,
                  "recargos": 0,
                  "total_contribuciones": 0,
                  "total_aplicaciones": 0,
                  "cantidad_a_cargo": 0,
                  "cantidad_a_pagar": 0
                }
              },
              "iva": {
                "determinacion": {
                  "actividades_gravadas_tasa_16": 0,
                  "actividades_gravadas_tasa_0": 0,
                  "actividades_exentas": 0,
                  "iva_cobrado_periodo_tasa_16": 0,
                  "iva_acreditable_periodo": 0,
                  "iva_retenido": 0,
                  "saldo_a_favor": null,
                  "impuesto_a_favor": null
                },
                "detalle_del_pago": {
                  "total_contribuciones": 0,
                  "total_aplicaciones": 0,
                  "cantidad_a_cargo": 0,
                  "cantidad_a_pagar": 0,
                  "a_favor": null
                }
              },
              "pdf": "===PDF_BINARY====",
              "receipt_pdf": "===PDF_BINARY====",
              "type": "monthly"
            }
          ]
        },
        "TaxReturnPersonalListMonthlyPFAI": {
          "summary": "Tax Return Personal Monthly (PFAI)",
          "description": "Example of a PFAI-type monthly personal tax return",
          "value": [
            {
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "informacion_general": {
                "rfc": null,
                "nombre": null,
                "tipo_declaracion": null,
                "ejercicio": null,
                "periodo_declaracion": null,
                "fecha_hora_presentacion": null,
                "numero_operacion": null
              },
              "isr": {
                "tipo": "PFAE",
                "determinacion": {
                  "ingresos_periodos_anteriores": 0,
                  "ingresos_periodo": 0,
                  "total_ingresos": 0,
                  "compras_gastos_periodos_anteriores": 1596,
                  "compra_gastos_periodo": 399,
                  "total_compras_gastos": 1995,
                  "base_gravable_pago_provisional": 0,
                  "isr_causado": 0,
                  "pagos_provisionales_efectuados_anterioridad": 0,
                  "isr_retenido_periodos_anteriores": 0,
                  "impuesto_retenido": 0,
                  "isr_cargo": 0,
                  "tipo_de_deduccíon": "dedduccíon opicional",
                  "optas_por_el_cálculo_acumulado": "NO",
                  "deduccíon_opcional": 700,
                  "impuesto_predial": 0,
                  "total_deducciones_autorizadas": 700,
                  "tienes_facilidades_administrativas_o_estímulos_deducibles": "NO"
                },
                "detalle_del_pago": {
                  "a_cargo": 0,
                  "parte_actualizada": 0,
                  "recargos": 0,
                  "total_contribuciones": 0,
                  "total_aplicaciones": 0,
                  "cantidad_a_cargo": 0,
                  "cantidad_a_pagar": 0
                }
              },
              "iva": {
                "determinacion": {
                  "actividades_gravadas_tasa_16": 0,
                  "actividades_gravadas_tasa_0": 0,
                  "actividades_exentas": 0,
                  "iva_cobrado_periodo_tasa_16": 0,
                  "iva_acreditable_periodo": 0,
                  "iva_retenido": 0,
                  "saldo_a_favor": null,
                  "impuesto_a_favor": null,
                  "impuesto_a_cargo": 54,
                  "cantidad_a_cargo": 54
                },
                "detalle_del_pago": {
                  "total_contribuciones": 0,
                  "total_aplicaciones": 0,
                  "cantidad_a_cargo": 0,
                  "cantidad_a_pagar": 0,
                  "a_favor": null
                }
              },
              "pdf": "===PDF_BINARY====",
              "receipt_pdf": "===PDF_BINARY====",
              "type": "monthly"
            }
          ]
        },
        "TaxReturnBusinessList": {
          "summary": "Tax Return Business",
          "description": "Example of a list of business tax returns",
          "value": [
            {
              "id": "02589c41-ba22-4d44-8558-8111cc751318",
              "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "informacion_general": {
                "ejercicio": 2018,
                "fecha_hora_presentacion": "2020-01-07T16:55:00-06:00",
                "numero_operacion": "000000000001",
                "periodo_declaracion": "Del Ejercicio",
                "rfc": "ABC1111111A1",
                "tipo_declaracion": "Normal",
                "tipo_complementaria": null,
                "denominacion_razon_social": "ACME CORP"
              },
              "datos_adicionales": {
                "indica_si_optas_por_dictaminar_tus_estados_financieros": "NO",
                "estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal": "NO",
                "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero": "SIN SELECCIÓN",
                "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp": "SIN SELECCIÓN",
                "optas_por_presentar_informacion_sobre_tu_situacion_fiscal": "SIN SELECCIÓN",
                "indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente": "NO"
              },
              "estado_resultados": {
                "ventas_servicios_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": 911165,
                  "total": 911165
                },
                "ventas_servicios_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "devoluciones_descuentos_bonificaciones_ventas_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "devoluciones_descuentos_bonificaciones_ventas_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "ingresos_netos": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": 911165,
                  "total": 911165
                },
                "inventario_inicial": null,
                "compras_netas_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "compras_netas_importacion": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "inventario_final": null,
                "costo_mercancias": null,
                "mano_de_obra": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "maquilas": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "gastos_indirectos_fabricacion": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "costo_ventas_servicios": null,
                "utilidad_bruta": 911165,
                "perdida_bruta": null,
                "gastos_operacion": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": 499540,
                  "total": 499540
                },
                "utilidad_operacion": 411625,
                "perdida_operacion": null,
                "intereses_devengados_a_favor_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "intereses_devengados_a_favor_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "intereses_moratorios_a_favor_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "intereses_moratorios_a_favor_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "ganancia_cambiaria": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "intereses_devengados_a_cargo_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "intereses_devengados_a_cargo_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "intereses_moratorios_a_cargo_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "intereses_moratorios_a_cargo_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "perdida_cambiaria": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "resultado_posicion_monetaria_favorable": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "resultado_posicion_monetaria_desfavorable": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "otras_operaciones_financieras_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "otras_operaciones_financieras_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "otras_operaciones_financieras": null,
                "resultado_integral_financiamiento": null,
                "otros_gastos_nacionales": null,
                "otros_gastos_extranjero": null,
                "otros_gastos": null,
                "otros_productos_nacionales": null,
                "otros_productos_extranjero": null,
                "otros_productos": null,
                "ingresos_partidas_discontinuas_extraordinarias": null,
                "gastos_partidas_discontinuas_extraordinarias": null,
                "utilidad_antes_impuesto": 411625,
                "perdida_antes_impuesto": null,
                "isr": 113002,
                "ietu": null,
                "impac": null,
                "ptu": null,
                "utilidad_participacion_subsidiaria": null,
                "perdida_participacion_subsidiaria": null,
                "efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria": null,
                "efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria": null,
                "utilidad_neta": 298623,
                "perdida_neta": null
              },
              "estado_posicion_financiera_balance": {
                "activo": {
                  "efectivo_caja_depositos_instituciones_credito_nacionales": 726644,
                  "efectivo_caja_depositos_instituciones_credito_extranjero": null,
                  "inversiones_valores_instituciones_nacionales_excepto_acciones": null,
                  "inversiones_valores_instituciones_extranjero_excepto_acciones": null,
                  "cuentas_documentos_por_cobrar_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "cuentas_documentos_por_cobrar_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "contribuciones_a_favor": null,
                  "inventarios": null,
                  "otros_activos_circulantes": 13277,
                  "inversiones_en_acciones_nacionales": null,
                  "inversiones_en_acciones_extranjero": null,
                  "inversiones_en_acciones_total": null,
                  "terrenos": null,
                  "construcciones": null,
                  "construcciones_en_proceso": null,
                  "maquinaria_y_equipo": null,
                  "mobiliario_y_equipo_oficina": null,
                  "equipo_de_computo": null,
                  "equipo_de_transporte": null,
                  "otros_activos_fijos": 12756,
                  "depreciacion_acumulada": -106,
                  "cargos_y_gastos_diferidos": 9319,
                  "amortizacion_acumulada": null,
                  "suma_activo": 761890
                },
                "pasivo": {
                  "cuentas_documentos_por_pagar_nacionales": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": 268227,
                    "total": 268227
                  },
                  "cuentas_documentos_por_pagar_extranjero": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "contribuciones_por_pagar": 223490,
                  "anticipos_de_clientes": {
                    "partes_relacionadas": null,
                    "partes_no_relacionadas": null,
                    "total": null
                  },
                  "aportaciones_futuros_aumentos_de_capital": null,
                  "otros_pasivos": null,
                  "suma_pasivo": 491717
                },
                "capital_contable": {
                  "capital_social_proveniente_aportaciones": 10000,
                  "capital_social_proveniente_capitalizacion": null,
                  "reservas": null,
                  "otras_cuentas_capital": null,
                  "aportaciones_futuros_aumentos_de_capital": null,
                  "utilidades_acumuladas": null,
                  "utilidad_del_ejercicio": 298623,
                  "perdidas_acumuladas": -38450,
                  "perdida_del_ejercicio": null,
                  "exceso_en_actualizacion_capital": null,
                  "insuficiencia_en_actualizacion_capital": null,
                  "actualizacion_del_capital_contable": null,
                  "suma_capital_contable": 270173,
                  "suma_pasivo_mas_capital_contable": 761890
                }
              },
              "conciliacion_entre_resultado_contable_fiscal": {
                "utilidad_o_perdida_neta": 298623,
                "efectos_reexpresion": null,
                "resultado_posicion_monetaria": null,
                "utilidad_o_perdida_neta_historica": 298623,
                "ingresos_fiscales_no_contables": 95,
                "ajuste_anual_inflacion_acumulable": 95,
                "anticipos_de_clientes": null,
                "intereses_moratorios_efectivamente_cobrados": null,
                "ganancia_en_enajenacion_acciones_por_reembolso_capital": null,
                "ganancia_en_enajenacion_de_terrenos_y_activo_fijo": null,
                "inventario_acumulable_del_ejercicio": null,
                "otros_ingresos_fiscales_no_contables": null,
                "deducciones_contables_no_fiscales": 117415,
                "costo_de_ventas_contable": null,
                "depreciacion_y_amortizacion_contable": 106,
                "gastos_que_no_reunen_requisitos_fiscales": 4307,
                "isr_ietu_impac_ptu": 113002,
                "perdida_contable_enajenacion_de_acciones": null,
                "perdida_contable_enajenacion_de_activo_fijo": null,
                "perdida_en_participacion_subsidiaria": null,
                "intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no": 0,
                "otras_deducciones_contables_no_fiscales": 0,
                "deducciones_fiscales_no_contables": 0,
                "ajuste_anual_inflacion_deducible": null,
                "costo_vendido_fiscal": null,
                "deduccion_inversiones": null,
                "estimulo_fiscal_por_deduccion_inmediata_inversiones": null,
                "donacion_bienes_basicos_subsistencia_humana": 0,
                "estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores": 0,
                "deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores": 0,
                "perdida_fiscal_en_enajenacion_acciones": null,
                "perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo": null,
                "intereses_moratorios_efectivamente_pagados": null,
                "otras_deducciones_fiscales_no_contables": null,
                "ingresos_contables_no_fiscales": null,
                "intereses_moratorios_devengados_a_favor_cobrados_o_no": null,
                "anticipos_de_clientes_ejercicios_anteriores": null,
                "saldos_a_favor_impuestos_y_su_actualizacion": null,
                "utilidad_contable_enajenacion_de_activo_fijo": null,
                "utilidad_contable_enajenacion_de_acciones": null,
                "utilidad_en_participacion_subsidiaria": null,
                "otros_ingresos_contables_no_fiscales": null,
                "utilidad_o_perdida_fiscal_antes_de_ptu": 416133
              },
              "deducciones_autorizadas": {
                "sueldos_salarios": null,
                "honorarios_pagados_a_personas_fisicas": null,
                "regalias_y_asistencia_tecnica": null,
                "donativos_otorgados": null,
                "uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas": null,
                "fletes_y_acarreos_pagados_a_parsonas_fisicas": null,
                "contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps": null,
                "seguros_fianzas": null,
                "perdida_por_creditos_incobrables": null,
                "viaticos_y_gastos_viaje": 59527,
                "combustible_y_lubricantes": null,
                "credito_al_salario_no_disminuido_de_contribuciones": null,
                "aportaciones_sar_infonavit_y_jubilaciones_vejez": null,
                "aportaciones_para_fondos_de_pensiones_y_jubilaciones": null,
                "cuotas_imss": null,
                "consumos_en_restaurantes": 11254,
                "perdida_por_operaciones_financieras_derivadas": null,
                "deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores": null,
                "monto_total_pagos_que_sean_ingresos_exentos_para_trabajador": null,
                "monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador": null,
                "monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador": null,
                "uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno": null,
                "otras_deducciones_autorizadas": 424346,
                "total_deducciones_autorizadas": 495127
              },
              "cifras_cierre_ejercicio": {
                "perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas": null,
                "saldo_promedio_anual_de_creditos": 142795,
                "saldo_promedio_anual_de_deudas": 144765,
                "coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente": 0.4567,
                "porcentaje_de_participacion_consolidable": null,
                "isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar": null,
                "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores": null,
                "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores": null,
                "saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida": null,
                "saldo_actualizado_de_cuenta_de_capital_de_aportacion": null,
                "saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables": null
              },
              "determinacion_del_impuesto_sobre_la_renta": {
                "determinacion_del_impuesto_sobre_la_renta": {
                  "total_ingresos_acumulables": 911260,
                  "total_deducciones_autorizadas_y_deduccion_inmediata_inversiones": 495126,
                  "deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila": null,
                  "utilidad_o_perdida_fiscal_antes_de_ptu": 416134,
                  "ptu_pagada_en_el_ejercicio": null,
                  "utilidad_fiscal_del_ejercicio": 416134,
                  "perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio": 39462,
                  "resultado_fiscal": 376672,
                  "impuesto_causado_en_ejercicio": 113002,
                  "tienes_estimulos_fiscales_a_acreditar": "SIN SELECCIÓN",
                  "impuesto_sobre_la_renta_del_ejercicio": 113002,
                  "pagos_provisionales_efectuados_enterados_a_federacion": null,
                  "impuesto_retenido_al_contribuyente": null,
                  "impuesto_acreditable_pagado_en_extranjero": null,
                  "impuesto_acreditable_por_dividendos_o_utilidades_distribuidos": null,
                  "otras_cantidades_a_cargo": null,
                  "otras_cantidades_a_favor": null,
                  "diferencia_a_cargo": 113002,
                  "isr_a_cargo_del_ejercicio": 113002,
                  "isr_a_favor_del_ejercicio": null
                },
                "impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes": null,
                "datos_informativos_ejercicio": {
                  "monto_aplicado_del_estimulo_fiscal_de_chatarrizacion": 0,
                  "monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles": 0,
                  "impac_recuperado_en_ejercicio_derivado_de_deconsolidacion": 0,
                  "ingresos_obtenidos_por_apoyos_gubernamentales": 0,
                  "gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico": 0,
                  "credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                  "credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar": 0,
                  "credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar": 0,
                  "saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos": 0,
                  "credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar": 0
                },
                "datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio": {
                  "total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio": null,
                  "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar": 0,
                  "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                  "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar": 0,
                  "saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar": 0
                }
              },
              "dividendos_o_utilidades_distribuidos": {
                "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores": null,
                "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014": null,
                "provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre": null,
                "no_provenientes_de_cufin_ni_cufinre_en_efectivo": null,
                "no_provenientes_de_cufin_ni_cufinre_en_acciones": null,
                "monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre": null,
                "monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre": null,
                "provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente": null
              },
              "detalle_pago_r1_isr_personas_morales": {
                "a_cargo": 113002,
                "parte_actualizada": null,
                "recargos": null,
                "multa_por_correccion": null,
                "total_contribuciones": 113002,
                "desea_aplicar_alguna_compensacion_o_estimulo": "NO",
                "cantidad_a_cargo": 113002,
                "opta_por_pagar_parcialidades": "SIN SELECCIÓN",
                "importe_de_primera_parcialidad": null,
                "importe_sin_primera_parcialidad": null,
                "cantidad_a_favor": null,
                "cantidad_a_pagar": 113002
              },
              "pdf": "=PDF-STRING=",
              "receipt_pdf": "=PDF-STRING="
            }
          ]
        },
        "TaxReturnBusinessListMonthly": {
          "summary": "Tax Return Business Monthly",
          "description": "Example of a monthly business tax return",
          "value": [
            {
              "collected_at": "2022-02-09T08:45:50.406032Z",
              "created_at": "2022-02-09T08:46:20.406032Z",
              "informacion_general": {
                "rfc": "DPA950805RR2",
                "denominacion_razon_social": "Aloha Mahalo SC",
                "tipo_declaracion": "Normal",
                "ejercicio": 2020,
                "periodo_declaracion": "Diciembre",
                "fecha_hora_presentacion": "2021-01-18T19:24:00-06:00",
                "numero_operacion": "400475119",
                "tipo_complementaria": null
              },
              "determinacion_isr": {
                "personas_morales_regimen_general": {
                  "suma_ingresos_nominales_meses_anteriores_ejercicio": 69848414,
                  "estimulos_acreditables": null,
                  "ingresos_nominales_mes_que_declara": 6482479,
                  "reducciones": null,
                  "total_ingresos_nominales": 76330893,
                  "impuestos_del_periodo": 284098,
                  "coeficiente_utilidad": 0.2318,
                  "pagos_provisionales_efectuados_anterioridad": 303039,
                  "utilidad_fiscal_pago_provisional": 17693501,
                  "impuesto_retenido": 29925,
                  "ptu": null,
                  "otras_cantidades_a_cargo_contribuyente": null,
                  "iventario_acumulable": null,
                  "otras_cantidades_a_favor_contribuyente": null,
                  "anticipos_rendimientos_distribuidos_periodo": 16746509,
                  "diferencia_a_cargo": 0,
                  "perdidas_fiscales_ejercicios_anteriores_pendientes": null,
                  "estimulo_fiscal_deduccion_inmediata": null,
                  "impuesto_correspondiente_participacion_consolidable": null,
                  "deduccion_adicional_fomento_primer_empleo": null,
                  "porcentaje_participacion_consolidable": null,
                  "base_gravable_pago_provisional": 946992,
                  "impuesto_a_cargo": 0,
                  "isr_causado": 284098,
                  "ieps_alcohol": null
                }
              },
              "detalle_pago_isr": {
                "r1_isr_personas_morales": {
                  "a_cargo": 0,
                  "acreditamiento_sorteo_buen_fin": null,
                  "parte_actualizada": null,
                  "diesel_marino": null,
                  "recargos": null,
                  "total_aplicaciones": 0,
                  "multa_por_correccion": null,
                  "fecha_pago_realizado_anterioridad": null,
                  "total_de_contribuciones": 0,
                  "monto_pagado_anterioridad": null,
                  "credito_al_salario": null,
                  "importe_pagado_ultimas_48_hrs": null,
                  "subsidio_empleo": null,
                  "cantidad_a_cargo": 0,
                  "impuesto_a_depositos_efectivo_acreditable": null,
                  "aplica_primera_parcialidad": "NO",
                  "compensaciones": null,
                  "credito_ieps_diesel": null,
                  "diesel_automotriz_transporte": null,
                  "cantidad_a_favor": null,
                  "uso_infraestructura_carretera_cuota": null,
                  "cantidad_a_pagar": 0,
                  "otros_estimulos": null,
                  "importe_1ra_parcialidad": null,
                  "importe_sin_1ra_parcialidad": null
                },
                "r12_isr_retenciones_por_salarios": {
                  "a_cargo": 415945,
                  "acreditamiento_sorteos": null,
                  "parte_actualizada": 0,
                  "diesel_marino": null,
                  "recargos": 0,
                  "total_aplicaciones": 379,
                  "multa_por_correccion": null,
                  "fecha_pago_realizado_anterioridad": null,
                  "total_de_contribuciones": 415945,
                  "monto_pagado_anterioridad": null,
                  "credito_al_salario": null,
                  "importe_pagado_ultimas_48_hrs": null,
                  "subsidio_empleo": 379,
                  "cantidad_a_cargo": 415566,
                  "impuesto_a_depositos_efectivo_acreditable": null,
                  "aplica_primera_parcialidad": "NO",
                  "compensaciones": null,
                  "credito_ieps_diesel": null,
                  "diesel_automotriz_transporte": null,
                  "cantidad_a_favor": null,
                  "otros_estimulos": null,
                  "cantidad_a_pagar": 415566,
                  "importe_1ra_parcialidad": null,
                  "importe_sin_1ra_parcialidad": null
                },
                "r13_isr_retenciones_por_asimilados_a_salarios": {
                  "a_cargo": 254588,
                  "acreditamiento_sorteos": null,
                  "parte_actualizada": 0,
                  "diesel_marino": null,
                  "recargos": 0,
                  "total_aplicaciones": 0,
                  "multa_por_correccion": null,
                  "fecha_pago_realizado_anterioridad": null,
                  "total_de_contribuciones": 254588,
                  "monto_pagado_anterioridad": null,
                  "credito_al_salario": null,
                  "importe_pagado_ultimas_48_hrs": null,
                  "subsidio_empleo": null,
                  "cantidad_a_cargo": 254588,
                  "impuesto_a_depositos_efectivo_acreditable": null,
                  "aplica_primera_parcialidad": "NO",
                  "compensaciones": null,
                  "credito_ieps_diesel": null,
                  "diesel_automotriz_transporte": null,
                  "cantidad_a_favor": null,
                  "otros_estimulos": null,
                  "cantidad_a_pagar": 254588,
                  "importe_1ra_parcialidad": null,
                  "importe_sin_1ra_parcialidad": null
                },
                "r14_isr_retenciones_por_servicios_profesionales": {
                  "a_cargo": 104482,
                  "acreditamiento_sorteos": null,
                  "parte_actualizada": 0,
                  "diesel_marino": null,
                  "recargos": 0,
                  "total_aplicaciones": 0,
                  "multa_por_correccion": null,
                  "fecha_pago_realizado_anterioridad": null,
                  "total_de_contribuciones": 104482,
                  "monto_pagado_anterioridad": null,
                  "credito_al_salario": null,
                  "importe_pagado_ultimas_48_hrs": null,
                  "subsidio_empleo": null,
                  "cantidad_a_cargo": 104482,
                  "impuesto_a_depositos_efectivo_acreditable": null,
                  "aplica_primera_parcialidad": "NO",
                  "compensaciones": null,
                  "credito_ieps_diesel": null,
                  "diesel_automotriz_transporte": null,
                  "cantidad_a_favor": null,
                  "otros_estimulos": null,
                  "cantidad_a_pagar": 104482,
                  "importe_1ra_parcialidad": null,
                  "importe_sin_1ra_parcialidad": null
                }
              },
              "determinacion_iva": {
                "montos_actos_actividades_pagados": {
                  "total_actos_actividades_pagados_tasa_16": 2094706,
                  "total_actos_actividades_pagados_importacion_bienes_tasa_11": null,
                  "total_actos_actividades_sujetos_estimulo_rfn": 0,
                  "total_actos_actividades_pagados_tasa_0": 0,
                  "total_actos_actividades_pagados_importacion_bienes_tasa_16": null,
                  "total_actos_actividades_pagados_no_paga_iva": 0
                },
                "detalle_total_actos_actividades_pagados_tasa_16": {
                  "intereses_pagados_tasa_16": null,
                  "otros_actos_pagados_tasa_16": 2094706,
                  "regalias_pagadas_tasa_16": null,
                  "total_actos_pagados_tasa_16": 2094706
                },
                "determinacion_iva_acreditable": {
                  "total_iva_actos_actividades_pagados_tasa_16": 335153,
                  "iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto": null,
                  "iva_pagado_sujeto_estimulo_rfn": null,
                  "iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto": null,
                  "total_actos_actividades_pagados_importacion_bienes_tasa_16": 0,
                  "iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": 0,
                  "proporcion_utilizada_conforme_art_5": null,
                  "total_iva_trasladado_contribuyente": 335153,
                  "proporcion_utilizada_conforme_art_5_b": null,
                  "iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados": 335153,
                  "iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados": null,
                  "iva_acreditable": 335153,
                  "monto_acreditable_actualizado_a_incrementar_derivado_ajuste": null,
                  "iva_pagado_importacion_inversiones_actos_gravados": null,
                  "total_iva_acreditable_periodo": 335153,
                  "total_iva_actos_actividades_gravados": 335153,
                  "total_actos_actividades_pagados_importacion_bienes_tasa_11": null,
                  "iva_trasladado_adquisicion_inversiones_actos_gravados": null,
                  "iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": null
                },
                "determinacion_iva": {
                  "valor_actos_actividades_gravados_tasa_16": 6457950,
                  "otras_cantidades_a_favor_contribuyente": null,
                  "valor_actos_actividades_gravados_tasa_11": null,
                  "cantidad_a_cargo": 312421,
                  "valor_actos_actividades_gravados_tasa_0_exportacion": null,
                  "saldo_a_favor": null,
                  "valor_actos_actividades_gravados_tasa_9_otros": null,
                  "devolucion_inmediata_obtenida": null,
                  "suma_actos_actividades_gravados": 6457950,
                  "saldo_a_favor_periodo": 0,
                  "valor_actos_actividades_no_se_deba_pagar_impuesto_exentos": null,
                  "acreditamiento_saldo_favor_periodos_anteriores": null,
                  "impuesto_causado": 1033272,
                  "diferencia_a_cargo": 312421,
                  "cantidad_actualizada_a_reintegrarse_derivada_de_ajuste": null,
                  "ieps_acreditable_alcohol": null,
                  "iva_retenido_al_contribuyente": 385698,
                  "impuesto_a_cargo": 312421,
                  "total_iva_acreditable": 335153,
                  "remanente_saldo_favor_ieps_alcohol": null,
                  "otras_cantidades_a_cargo_contribuyente": null
                },
                "detalle_valor_actos_actividades_gravados_tasa_16": {
                  "intereses_cobrados_tasa_16": null,
                  "otros_actos_actividades_gravados_tasa_16": 6457950,
                  "regalias_entre_partes_relacionadas_tasa_16": null,
                  "total_actos_actividades_gravados_tasa_16": 6457950
                }
              },
              "detalle_pago_iva": {
                "r21_iva": {
                  "a_cargo": 312421,
                  "cretificados_tesofe": null,
                  "a_favor": null,
                  "diesel_marino": null,
                  "parte_actualizada": 0,
                  "total_aplicaciones": 0,
                  "recargos": 0,
                  "fecha_pago_realizado_anterioridad": null,
                  "multa_por_correccion": null,
                  "monto_pagado_anterioridad": null,
                  "total_de_contribuciones": 312421,
                  "importe_pagado_ultimas_48_hrs": null,
                  "credito_al_salario": null,
                  "cantidad_a_cargo": 312421,
                  "subsidio_empleo": null,
                  "aplica_primera_parcialidad": "NO",
                  "compensaciones": null,
                  "diesel_automotriz_transporte": null,
                  "uso_infraestructura_carretera_cuota": null,
                  "cantidad_a_favor": null,
                  "otros_estimulos": null,
                  "cantidad_a_pagar": 312421,
                  "importe_1ra_parcialidad": null,
                  "importe_sin_1ra_parcialidad": null
                },
                "r21_iva_retenciones": {
                  "a_cargo": 111448,
                  "diesel_marino": null,
                  "parte_actualizada": 0,
                  "total_aplicaciones": 0,
                  "recargos": 0,
                  "fecha_pago_realizado_anterioridad": null,
                  "multa_por_correccion": null,
                  "monto_pagado_anterioridad": null,
                  "total_de_contribuciones": 111448,
                  "importe_pagado_ultimas_48_hrs": null,
                  "credito_al_salario": null,
                  "cantidad_a_cargo": 111448,
                  "subsidio_empleo": null,
                  "aplica_primera_parcialidad": "NO",
                  "compensaciones": null,
                  "credito_ieps_diesel": null,
                  "otros_estimulos": null,
                  "cantidad_a_favor": null,
                  "cretificados_tesofe": null,
                  "cantidad_a_pagar": 111448,
                  "importe_1ra_parcialidad": null,
                  "importe_sin_1ra_parcialidad": null
                }
              },
              "pdf": "===PDF_BINARY====",
              "receipt_pdf": "===PDF_BINARY====",
              "type": "monthly"
            }
          ]
        },
        "TaxReturnPersonalListDetail": {
          "summary": "Tax Return Personal",
          "description": "Example of a list of personal tax returns",
          "value": {
            "id": "02589c41-ba22-4d44-8558-8111cc751318",
            "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "informacion_general": {
              "ejercicio": 2018,
              "fecha_hora_presentacion": "2020-01-07T17:28:00-05:00",
              "numero_operacion": "00000000001",
              "periodo_declaracion": "Del Ejercicio",
              "rfc": "ABCD111111A11",
              "tipo_declaracion": "Normal",
              "nombre": "JOHN DOE"
            },
            "sueldos_salarios": {
              "retenedores": [
                {
                  "rfc_retenedor": "ABCD222222A22",
                  "nombre_denominacion_razon_social": "ACME CORP",
                  "ingresos_exentos": 118263,
                  "ingreso_anual": 2265,
                  "subsidio_empleo": 0
                }
              ],
              "impuesto_retenido": 19497,
              "ingreso_anual": 118263,
              "ingresos_acumulables": 115998,
              "ingresos_exentos": 2265,
              "subsidio_empleo": 0
            },
            "servicios_profesionales": {
              "deducciones_autorizadas": {
                "deducciones_autorizadas": 11870,
                "otras_deducciones": null,
                "detalle_deducciones": [
                  {
                    "tipo_deduccion": "GASTOS",
                    "concepto": "GASOLINA Y MANTENIMIENTO DE TRANSPORTE",
                    "monto_detallado": 9682
                  },
                  {
                    "tipo_deduccion": "GASTOS",
                    "concepto": "COMPRAS Y GASTOS GENERALES",
                    "monto_detallado": 2188
                  }
                ],
                "total_deducciones_autorizadas": 11870
              },
              "ingresos": {
                "ingresos_acumulables": 46000,
                "ingresos_exentos": null,
                "otros_ingresos": null,
                "total_ingresos": 46000
              },
              "resultado_fiscal": {
                "utilidad_fiscal": 34130,
                "ptu_pagada_ejercicio": 0,
                "perdidas_fiscales_ejercicios_anteriores_aplicadas": 0,
                "utilidad_gravable": 34130
              },
              "pagos_provisionales": {
                "pagos_provisionales_efectuados_en_ejercicio": 0
              },
              "retenciones_isr": {
                "isr_retenido_personas_morales": 4600
              }
            },
            "deducciones_personales": {
              "honorarios_medicos_dentales_hospitalarios": [
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC444444A44",
                  "monto_deducible": 1000
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC444444A44",
                  "monto_deducible": 502.34
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC333333A33",
                  "monto_deducible": 258.83
                },
                {
                  "rfc_emisor": "ABC444444A55",
                  "monto_deducible": 14183.1
                },
                {
                  "rfc_emisor": "ABC444444A66",
                  "monto_deducible": 1658
                },
                {
                  "rfc_emisor": "ABC444444A77",
                  "monto_deducible": 1600
                },
                {
                  "rfc_emisor": "ABC444444A88",
                  "monto_deducible": 1064
                },
                {
                  "rfc_emisor": "ABC444444A99",
                  "monto_deducible": 927.57
                }
              ],
              "donativos": [
                {
                  "rfc_emisor": "ABC555555A99",
                  "monto_deducible": 10.03
                }
              ],
              "aportaciones_voluntarias_complementarias_al_sar": [
                {
                  "rfc_emisor": "ABC666666A99",
                  "monto_deducible": 12.03
                },
                {
                  "rfc_emisor": "ABC777777A99",
                  "monto_deducible": 87.22
                }
              ],
              "primas_por_seguros_de_gasto_medico": [
                {
                  "rfc_emisor": "ABC777777A99",
                  "monto_deducible": 20.03
                }
              ]
            },
            "determinacion_impuesto": {
              "base_gravable": 126864,
              "deducciones_personales": 23264,
              "ingresos_acumulables": 150128,
              "isr_favorable": 10308,
              "isr_conforme_tarifa_final": 13789,
              "isr_retenido": 24097,
              "num_clabe": "000000000000000001",
              "nombre_banco": "BANCO SA",
              "pagos_provisionales": 0,
              "titular_clabe_permite_verificacion": "SÍ",
              "accion_saldo_a_favor": "DEVOLUCIÓN"
            },
            "retenciones": {
              "sueldos_salarios": [
                {
                  "rfc_retenedor": "ABC444444A99",
                  "monto_retenciones": 118263,
                  "retenciones_isr": 19497
                }
              ],
              "dividendos": [],
              "servicios_profesionales": [
                {
                  "rfc_retenedor": "ABC444444A00",
                  "monto_retenciones": 46000,
                  "retenciones_isr": 4600
                }
              ]
            },
            "dividendos": {
              "monto_acumulable_dividendos_utilidades": null,
              "monto_total_isr_pagado_sociedad": null
            },
            "datos_informativos": {
              "credito_fiscal_autorizado_proyectos_investigacion_desarrollo": 0,
              "credito_fiscal_autorizado_proyectos_apoyo_deporte_alto_rendimiento": 0,
              "credito_fiscal_autorizado_proyectos_inversion_artes": 0,
              "credito_fiscal_autorizado_inversion_equipos_fijos": 0,
              "credito_fiscal_autorizado_produccion_distribucion_cinematografica": 0,
              "saldo_credito_fiscal_autorizado_anteriores_investigacion_desarrollo": 0,
              "saldo_credito_fiscal_anteriores_proyectos_inversion_artes": 0,
              "saldo_credito_fiscal_anteriores_produccion_distribucion_cinematografica": 0
            },
            "pdf": "=PDF-STRING=",
            "receipt_pdf": "=PDF-STRING="
          }
        },
        "TaxReturnPersonalListMonthlyPFAEDetail": {
          "summary": "Tax Return Personal Monthly (PFAE)",
          "description": "Example of a PFAE-type monthly personal tax return",
          "value": {
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "informacion_general": {
              "rfc": null,
              "nombre": null,
              "tipo_declaracion": null,
              "ejercicio": null,
              "periodo_declaracion": null,
              "fecha_hora_presentacion": null,
              "numero_operacion": null
            },
            "isr": {
              "tipo": "PFAE",
              "determinacion": {
                "ingresos_periodos_anteriores": 0,
                "ingresos_periodo": 0,
                "total_ingresos": 0,
                "compras_gastos_periodos_anteriores": 1596,
                "compra_gastos_periodo": 399,
                "total_compras_gastos": 1995,
                "base_gravable_pago_provisional": 0,
                "isr_causado": 0,
                "pagos_provisionales_efectuados_anterioridad": 0,
                "isr_retenido_periodos_anteriores": 0,
                "impuesto_retenido": 0,
                "isr_cargo": 0
              },
              "detalle_del_pago": {
                "a_cargo": 0,
                "parte_actualizada": 0,
                "recargos": 0,
                "total_contribuciones": 0,
                "total_aplicaciones": 0,
                "cantidad_a_cargo": 0,
                "cantidad_a_pagar": 0
              }
            },
            "iva": {
              "determinacion": {
                "actividades_gravadas_tasa_16": 0,
                "actividades_gravadas_tasa_0": 0,
                "actividades_exentas": 0,
                "iva_cobrado_periodo_tasa_16": 0,
                "iva_acreditable_periodo": 0,
                "iva_retenido": 0,
                "saldo_a_favor": null,
                "impuesto_a_favor": null
              },
              "detalle_del_pago": {
                "total_contribuciones": 0,
                "total_aplicaciones": 0,
                "cantidad_a_cargo": 0,
                "cantidad_a_pagar": 0,
                "a_favor": null
              }
            },
            "pdf": "===PDF_BINARY====",
            "receipt_pdf": "===PDF_BINARY====",
            "type": "monthly"
          }
        },
        "TaxReturnPersonalListMonthlyPFAIDetail": {
          "summary": "Tax Return Personal Monthly (PFAI)",
          "description": "Example of a PFAI-type monthly personal tax return",
          "value": {
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "informacion_general": {
              "rfc": null,
              "nombre": null,
              "tipo_declaracion": null,
              "ejercicio": null,
              "periodo_declaracion": null,
              "fecha_hora_presentacion": null,
              "numero_operacion": null
            },
            "isr": {
              "tipo": "PFAE",
              "determinacion": {
                "ingresos_periodos_anteriores": 0,
                "ingresos_periodo": 0,
                "total_ingresos": 0,
                "compras_gastos_periodos_anteriores": 1596,
                "compra_gastos_periodo": 399,
                "total_compras_gastos": 1995,
                "base_gravable_pago_provisional": 0,
                "isr_causado": 0,
                "pagos_provisionales_efectuados_anterioridad": 0,
                "isr_retenido_periodos_anteriores": 0,
                "impuesto_retenido": 0,
                "isr_cargo": 0,
                "tipo_de_deduccíon": "dedduccíon opicional",
                "optas_por_el_cálculo_acumulado": "NO",
                "deduccíon_opcional": 700,
                "impuesto_predial": 0,
                "total_deducciones_autorizadas": 700,
                "tienes_facilidades_administrativas_o_estímulos_deducibles": "NO"
              },
              "detalle_del_pago": {
                "a_cargo": 0,
                "parte_actualizada": 0,
                "recargos": 0,
                "total_contribuciones": 0,
                "total_aplicaciones": 0,
                "cantidad_a_cargo": 0,
                "cantidad_a_pagar": 0
              }
            },
            "iva": {
              "determinacion": {
                "actividades_gravadas_tasa_16": 0,
                "actividades_gravadas_tasa_0": 0,
                "actividades_exentas": 0,
                "iva_cobrado_periodo_tasa_16": 0,
                "iva_acreditable_periodo": 0,
                "iva_retenido": 0,
                "saldo_a_favor": null,
                "impuesto_a_favor": null,
                "impuesto_a_cargo": 54,
                "cantidad_a_cargo": 54
              },
              "detalle_del_pago": {
                "total_contribuciones": 0,
                "total_aplicaciones": 0,
                "cantidad_a_cargo": 0,
                "cantidad_a_pagar": 0,
                "a_favor": null
              }
            },
            "pdf": "===PDF_BINARY====",
            "receipt_pdf": "===PDF_BINARY====",
            "type": "monthly"
          }
        },
        "TaxReturnBusinessListDetail": {
          "summary": "Tax Return Business",
          "description": "Example of a list of business tax returns",
          "value": {
            "id": "02589c41-ba22-4d44-8558-8111cc751318",
            "link": "19697249-01b8-443e-a451-76bfc5fbeebf",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "informacion_general": {
              "ejercicio": 2018,
              "fecha_hora_presentacion": "2020-01-07T16:55:00-06:00",
              "numero_operacion": "000000000001",
              "periodo_declaracion": "Del Ejercicio",
              "rfc": "ABC1111111A1",
              "tipo_declaracion": "Normal",
              "tipo_complementaria": null,
              "denominacion_razon_social": "ACME CORP"
            },
            "datos_adicionales": {
              "indica_si_optas_por_dictaminar_tus_estados_financieros": "NO",
              "estas_obligado_a_presentar_la_informacion_sobre_tu_situacion_fiscal": "NO",
              "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero": "SIN SELECCIÓN",
              "estas_obligado_unicamente_por_supuesto_distinto_al_de_haber_realizado_operaciones_con_residentes_extranjero_inferiores_100mdp": "SIN SELECCIÓN",
              "optas_por_presentar_informacion_sobre_tu_situacion_fiscal": "SIN SELECCIÓN",
              "indica_si_te_dedicas_exclisivamente_a_generacion_energia_fuentes_renovables_o_cogeneracion_electricidad_eficiente": "NO"
            },
            "estado_resultados": {
              "ventas_servicios_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": 911165,
                "total": 911165
              },
              "ventas_servicios_extranjero": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "devoluciones_descuentos_bonificaciones_ventas_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "devoluciones_descuentos_bonificaciones_ventas_extranjero": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "ingresos_netos": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": 911165,
                "total": 911165
              },
              "inventario_inicial": null,
              "compras_netas_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "compras_netas_importacion": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "inventario_final": null,
              "costo_mercancias": null,
              "mano_de_obra": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "maquilas": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "gastos_indirectos_fabricacion": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "costo_ventas_servicios": null,
              "utilidad_bruta": 911165,
              "perdida_bruta": null,
              "gastos_operacion": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": 499540,
                "total": 499540
              },
              "utilidad_operacion": 411625,
              "perdida_operacion": null,
              "intereses_devengados_a_favor_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "intereses_devengados_a_favor_extranjero": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "intereses_moratorios_a_favor_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "intereses_moratorios_a_favor_extranjero": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "ganancia_cambiaria": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "intereses_devengados_a_cargo_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "intereses_devengados_a_cargo_extranjero": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "intereses_moratorios_a_cargo_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "intereses_moratorios_a_cargo_extranjero": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "perdida_cambiaria": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "resultado_posicion_monetaria_favorable": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "resultado_posicion_monetaria_desfavorable": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "otras_operaciones_financieras_nacionales": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "otras_operaciones_financieras_extranjero": {
                "partes_relacionadas": null,
                "partes_no_relacionadas": null,
                "total": null
              },
              "otras_operaciones_financieras": null,
              "resultado_integral_financiamiento": null,
              "otros_gastos_nacionales": null,
              "otros_gastos_extranjero": null,
              "otros_gastos": null,
              "otros_productos_nacionales": null,
              "otros_productos_extranjero": null,
              "otros_productos": null,
              "ingresos_partidas_discontinuas_extraordinarias": null,
              "gastos_partidas_discontinuas_extraordinarias": null,
              "utilidad_antes_impuesto": 411625,
              "perdida_antes_impuesto": null,
              "isr": 113002,
              "ietu": null,
              "impac": null,
              "ptu": null,
              "utilidad_participacion_subsidiaria": null,
              "perdida_participacion_subsidiaria": null,
              "efectos_reexpresion_favorables_excepto_resultado_posicion_monetaria": null,
              "efectos_reexpresion_desfavorables_excepto_resultado_posicion_monetaria": null,
              "utilidad_neta": 298623,
              "perdida_neta": null
            },
            "estado_posicion_financiera_balance": {
              "activo": {
                "efectivo_caja_depositos_instituciones_credito_nacionales": 726644,
                "efectivo_caja_depositos_instituciones_credito_extranjero": null,
                "inversiones_valores_instituciones_nacionales_excepto_acciones": null,
                "inversiones_valores_instituciones_extranjero_excepto_acciones": null,
                "cuentas_documentos_por_cobrar_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "cuentas_documentos_por_cobrar_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "contribuciones_a_favor": null,
                "inventarios": null,
                "otros_activos_circulantes": 13277,
                "inversiones_en_acciones_nacionales": null,
                "inversiones_en_acciones_extranjero": null,
                "inversiones_en_acciones_total": null,
                "terrenos": null,
                "construcciones": null,
                "construcciones_en_proceso": null,
                "maquinaria_y_equipo": null,
                "mobiliario_y_equipo_oficina": null,
                "equipo_de_computo": null,
                "equipo_de_transporte": null,
                "otros_activos_fijos": 12756,
                "depreciacion_acumulada": -106,
                "cargos_y_gastos_diferidos": 9319,
                "amortizacion_acumulada": null,
                "suma_activo": 761890
              },
              "pasivo": {
                "cuentas_documentos_por_pagar_nacionales": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": 268227,
                  "total": 268227
                },
                "cuentas_documentos_por_pagar_extranjero": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "contribuciones_por_pagar": 223490,
                "anticipos_de_clientes": {
                  "partes_relacionadas": null,
                  "partes_no_relacionadas": null,
                  "total": null
                },
                "aportaciones_futuros_aumentos_de_capital": null,
                "otros_pasivos": null,
                "suma_pasivo": 491717
              },
              "capital_contable": {
                "capital_social_proveniente_aportaciones": 10000,
                "capital_social_proveniente_capitalizacion": null,
                "reservas": null,
                "otras_cuentas_capital": null,
                "aportaciones_futuros_aumentos_de_capital": null,
                "utilidades_acumuladas": null,
                "utilidad_del_ejercicio": 298623,
                "perdidas_acumuladas": -38450,
                "perdida_del_ejercicio": null,
                "exceso_en_actualizacion_capital": null,
                "insuficiencia_en_actualizacion_capital": null,
                "actualizacion_del_capital_contable": null,
                "suma_capital_contable": 270173,
                "suma_pasivo_mas_capital_contable": 761890
              }
            },
            "conciliacion_entre_resultado_contable_fiscal": {
              "utilidad_o_perdida_neta": 298623,
              "efectos_reexpresion": null,
              "resultado_posicion_monetaria": null,
              "utilidad_o_perdida_neta_historica": 298623,
              "ingresos_fiscales_no_contables": 95,
              "ajuste_anual_inflacion_acumulable": 95,
              "anticipos_de_clientes": null,
              "intereses_moratorios_efectivamente_cobrados": null,
              "ganancia_en_enajenacion_acciones_por_reembolso_capital": null,
              "ganancia_en_enajenacion_de_terrenos_y_activo_fijo": null,
              "inventario_acumulable_del_ejercicio": null,
              "otros_ingresos_fiscales_no_contables": null,
              "deducciones_contables_no_fiscales": 117415,
              "costo_de_ventas_contable": null,
              "depreciacion_y_amortizacion_contable": 106,
              "gastos_que_no_reunen_requisitos_fiscales": 4307,
              "isr_ietu_impac_ptu": 113002,
              "perdida_contable_enajenacion_de_acciones": null,
              "perdida_contable_enajenacion_de_activo_fijo": null,
              "perdida_en_participacion_subsidiaria": null,
              "intereses_devengados_que_exceden_valor_mercado_y_moratorios_pagados_o_no": 0,
              "otras_deducciones_contables_no_fiscales": 0,
              "deducciones_fiscales_no_contables": 0,
              "ajuste_anual_inflacion_deducible": null,
              "costo_vendido_fiscal": null,
              "deduccion_inversiones": null,
              "estimulo_fiscal_por_deduccion_inmediata_inversiones": null,
              "donacion_bienes_basicos_subsistencia_humana": 0,
              "estimulo_fiscal_contratacion_personas_discapacidad_yo_mayores": 0,
              "deduccion_impuesto_sobre_renta_retenido_personas_discapacidad_yo_mayores": 0,
              "perdida_fiscal_en_enajenacion_acciones": null,
              "perdida_fiscal_en_enajenacion_de_terrenos_y_activo_fijo": null,
              "intereses_moratorios_efectivamente_pagados": null,
              "otras_deducciones_fiscales_no_contables": null,
              "ingresos_contables_no_fiscales": null,
              "intereses_moratorios_devengados_a_favor_cobrados_o_no": null,
              "anticipos_de_clientes_ejercicios_anteriores": null,
              "saldos_a_favor_impuestos_y_su_actualizacion": null,
              "utilidad_contable_enajenacion_de_activo_fijo": null,
              "utilidad_contable_enajenacion_de_acciones": null,
              "utilidad_en_participacion_subsidiaria": null,
              "otros_ingresos_contables_no_fiscales": null,
              "utilidad_o_perdida_fiscal_antes_de_ptu": 416133
            },
            "deducciones_autorizadas": {
              "sueldos_salarios": null,
              "honorarios_pagados_a_personas_fisicas": null,
              "regalias_y_asistencia_tecnica": null,
              "donativos_otorgados": null,
              "uso_o_goce_temporal_de_bienes_pagados_a_personas_fisicas": null,
              "fletes_y_acarreos_pagados_a_parsonas_fisicas": null,
              "contribuciones_pagadas_excepto_isr_ietu_impac_iva_ieps": null,
              "seguros_fianzas": null,
              "perdida_por_creditos_incobrables": null,
              "viaticos_y_gastos_viaje": 59527,
              "combustible_y_lubricantes": null,
              "credito_al_salario_no_disminuido_de_contribuciones": null,
              "aportaciones_sar_infonavit_y_jubilaciones_vejez": null,
              "aportaciones_para_fondos_de_pensiones_y_jubilaciones": null,
              "cuotas_imss": null,
              "consumos_en_restaurantes": 11254,
              "perdida_por_operaciones_financieras_derivadas": null,
              "deduccion_por_concepto_de_ayuda_alimentaria_para_trabajadores": null,
              "monto_total_pagos_que_sean_ingresos_exentos_para_trabajador": null,
              "monto_deducible_al_47_pagos_son_ingresos_exentos_para_trabajador": null,
              "monto_deducible_al_53_pagos_son_ingresos_exentos_para_trabajador": null,
              "uso_o_goce_temporal_de_automoviles_baterias_electricas_o_electricos_con_motor_combustion_o_hidrogeno": null,
              "otras_deducciones_autorizadas": 424346,
              "total_deducciones_autorizadas": 495127
            },
            "cifras_cierre_ejercicio": {
              "perdidas_fiscales_de_ejercicios_anteriores_pendientes_de_amortizar_actualiazadas": null,
              "saldo_promedio_anual_de_creditos": 142795,
              "saldo_promedio_anual_de_deudas": 144765,
              "coeficiente_de_utilidad_por_aplicar_en_ejercicio_siguiente": 0.4567,
              "porcentaje_de_participacion_consolidable": null,
              "isr_causado_en_exceso_del_impac_en_los_3_ejercicios_anteriores_pendientes_aplicar": null,
              "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_2013_y_anteriores": null,
              "saldo_actualizado_de_cuenta_de_utilidad_fiscal_neta_a_partir_2014_y_anteriores": null,
              "saldo_actualizado_de_cuenta_de_utilidad_fiscal_reinvertida": null,
              "saldo_actualizado_de_cuenta_de_capital_de_aportacion": null,
              "saldo_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_renovables": null
            },
            "determinacion_del_impuesto_sobre_la_renta": {
              "determinacion_del_impuesto_sobre_la_renta": {
                "total_ingresos_acumulables": 911260,
                "total_deducciones_autorizadas_y_deduccion_inmediata_inversiones": 495126,
                "deduccion_adicional_por_pago_servicios_personales_en_operacion_maquila": null,
                "utilidad_o_perdida_fiscal_antes_de_ptu": 416134,
                "ptu_pagada_en_el_ejercicio": null,
                "utilidad_fiscal_del_ejercicio": 416134,
                "perdidas_fiscales_de_ejercicios_anteriores_que_se_aplican_en_ejercicio": 39462,
                "resultado_fiscal": 376672,
                "impuesto_causado_en_ejercicio": 113002,
                "tienes_estimulos_fiscales_a_acreditar": "SIN SELECCIÓN",
                "impuesto_sobre_la_renta_del_ejercicio": 113002,
                "pagos_provisionales_efectuados_enterados_a_federacion": null,
                "impuesto_retenido_al_contribuyente": null,
                "impuesto_acreditable_pagado_en_extranjero": null,
                "impuesto_acreditable_por_dividendos_o_utilidades_distribuidos": null,
                "otras_cantidades_a_cargo": null,
                "otras_cantidades_a_favor": null,
                "diferencia_a_cargo": 113002,
                "isr_a_cargo_del_ejercicio": 113002,
                "isr_a_favor_del_ejercicio": null
              },
              "impuesto_sobre_ingresos_sujetos_a_regimenes_fiscales_preferentes": null,
              "datos_informativos_ejercicio": {
                "monto_aplicado_del_estimulo_fiscal_de_chatarrizacion": 0,
                "monto_deducible_de_pagos_efectuados_por_uso_o_goce_temporal_automoviles": 0,
                "impac_recuperado_en_ejercicio_derivado_de_deconsolidacion": 0,
                "ingresos_obtenidos_por_apoyos_gubernamentales": 0,
                "gastos_realidados_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico": 0,
                "credito_fiscal_autorizado_en_ejercicio_por_proyectos_en_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                "credito_fiscal_autorizado_en_ejercicio_por_proyectos_de_inversion_en_artes_pendiente_aplicar": 0,
                "credito_fiscal_autorizado_en_ejercicio_por_inversion_en_proyectos_programas_para_deporte_de_alto_rendimiento_pendiente_aplicar": 0,
                "saldo_pendiente_aplicar_por_inversion_en_equipos_de_alimentacion_vehiculos_electricos": 0,
                "credito_fiscal_autorizado_en_ejercicio_a_produccion_distribucion_cinematografica_nacional_pendiente_aplicar": 0
              },
              "datos_informativos_ejercicios_anteriores_aplicados_en_ejercicio": {
                "total_estimulo_produccion_y_distribucion_cinematografica_nacional_ejercicios_anteriores_aplicado_en_ejercicio": null,
                "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_inversion_en_proyectos_programas_para_deporte_alto_rendimiento_pendiente_aplicar": 0,
                "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_investigacion_desarrollo_tecnologico_pendiente_aplicar": 0,
                "saldo_credito_fiscal_autorizado_ejercicios_anteriores_por_proyectos_inversion_artes_pendiente_aplicar": 0,
                "saldo_credito_fiscal_autorizado_ejercicios_anteriores_a_produccion_distribucion_nacional_pendiente_aplicar": 0
              }
            },
            "dividendos_o_utilidades_distribuidos": {
              "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_en_2013_y_anteriores": null,
              "provenientes_de_cuenta_de_utilidad_fisica_neta_cufin_generada_a_partir_de_2014": null,
              "provenientes_de_cuenta_de_utilidad_fisica_neta_reinvertida_cufinre": null,
              "no_provenientes_de_cufin_ni_cufinre_en_efectivo": null,
              "no_provenientes_de_cufin_ni_cufinre_en_acciones": null,
              "monto_del_impuesto_pagado_no_proveniente_de_cufin_ni_cufinre": null,
              "monto_del_impuesto_pagado_de_utilidades_provenientes_de_cufinre": null,
              "provenientes_de_cuenta_de_utilidad_fiscal_neta_por_inversion_en_energia_de_fuentes_renovables_o_sistemas_cogeneracion_electricidad_eficiente": null
            },
            "detalle_pago_r1_isr_personas_morales": {
              "a_cargo": 113002,
              "parte_actualizada": null,
              "recargos": null,
              "multa_por_correccion": null,
              "total_contribuciones": 113002,
              "desea_aplicar_alguna_compensacion_o_estimulo": "NO",
              "cantidad_a_cargo": 113002,
              "opta_por_pagar_parcialidades": "SIN SELECCIÓN",
              "importe_de_primera_parcialidad": null,
              "importe_sin_primera_parcialidad": null,
              "cantidad_a_favor": null,
              "cantidad_a_pagar": 113002
            },
            "pdf": "=PDF-STRING=",
            "receipt_pdf": "=PDF-STRING="
          }
        },
        "TaxReturnBusinessListMonthlyDetail": {
          "summary": "Tax Return Business Monthly",
          "description": "Example of a monthly business tax return",
          "value": {
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "informacion_general": {
              "rfc": "DPA950805RR2",
              "denominacion_razon_social": "Aloha Mahalo SC",
              "tipo_declaracion": "Normal",
              "ejercicio": 2020,
              "periodo_declaracion": "Diciembre",
              "fecha_hora_presentacion": "2021-01-18T19:24:00-06:00",
              "numero_operacion": "400475119",
              "tipo_complementaria": null
            },
            "determinacion_isr": {
              "personas_morales_regimen_general": {
                "suma_ingresos_nominales_meses_anteriores_ejercicio": 69848414,
                "estimulos_acreditables": null,
                "ingresos_nominales_mes_que_declara": 6482479,
                "reducciones": null,
                "total_ingresos_nominales": 76330893,
                "impuestos_del_periodo": 284098,
                "coeficiente_utilidad": 0.2318,
                "pagos_provisionales_efectuados_anterioridad": 303039,
                "utilidad_fiscal_pago_provisional": 17693501,
                "impuesto_retenido": 29925,
                "ptu": null,
                "otras_cantidades_a_cargo_contribuyente": null,
                "iventario_acumulable": null,
                "otras_cantidades_a_favor_contribuyente": null,
                "anticipos_rendimientos_distribuidos_periodo": 16746509,
                "diferencia_a_cargo": 0,
                "perdidas_fiscales_ejercicios_anteriores_pendientes": null,
                "estimulo_fiscal_deduccion_inmediata": null,
                "impuesto_correspondiente_participacion_consolidable": null,
                "deduccion_adicional_fomento_primer_empleo": null,
                "porcentaje_participacion_consolidable": null,
                "base_gravable_pago_provisional": 946992,
                "impuesto_a_cargo": 0,
                "isr_causado": 284098,
                "ieps_alcohol": null
              }
            },
            "detalle_pago_isr": {
              "r1_isr_personas_morales": {
                "a_cargo": 0,
                "acreditamiento_sorteo_buen_fin": null,
                "parte_actualizada": null,
                "diesel_marino": null,
                "recargos": null,
                "total_aplicaciones": 0,
                "multa_por_correccion": null,
                "fecha_pago_realizado_anterioridad": null,
                "total_de_contribuciones": 0,
                "monto_pagado_anterioridad": null,
                "credito_al_salario": null,
                "importe_pagado_ultimas_48_hrs": null,
                "subsidio_empleo": null,
                "cantidad_a_cargo": 0,
                "impuesto_a_depositos_efectivo_acreditable": null,
                "aplica_primera_parcialidad": "NO",
                "compensaciones": null,
                "credito_ieps_diesel": null,
                "diesel_automotriz_transporte": null,
                "cantidad_a_favor": null,
                "uso_infraestructura_carretera_cuota": null,
                "cantidad_a_pagar": 0,
                "otros_estimulos": null,
                "importe_1ra_parcialidad": null,
                "importe_sin_1ra_parcialidad": null
              },
              "r12_isr_retenciones_por_salarios": {
                "a_cargo": 415945,
                "acreditamiento_sorteos": null,
                "parte_actualizada": 0,
                "diesel_marino": null,
                "recargos": 0,
                "total_aplicaciones": 379,
                "multa_por_correccion": null,
                "fecha_pago_realizado_anterioridad": null,
                "total_de_contribuciones": 415945,
                "monto_pagado_anterioridad": null,
                "credito_al_salario": null,
                "importe_pagado_ultimas_48_hrs": null,
                "subsidio_empleo": 379,
                "cantidad_a_cargo": 415566,
                "impuesto_a_depositos_efectivo_acreditable": null,
                "aplica_primera_parcialidad": "NO",
                "compensaciones": null,
                "credito_ieps_diesel": null,
                "diesel_automotriz_transporte": null,
                "cantidad_a_favor": null,
                "otros_estimulos": null,
                "cantidad_a_pagar": 415566,
                "importe_1ra_parcialidad": null,
                "importe_sin_1ra_parcialidad": null
              },
              "r13_isr_retenciones_por_asimilados_a_salarios": {
                "a_cargo": 254588,
                "acreditamiento_sorteos": null,
                "parte_actualizada": 0,
                "diesel_marino": null,
                "recargos": 0,
                "total_aplicaciones": 0,
                "multa_por_correccion": null,
                "fecha_pago_realizado_anterioridad": null,
                "total_de_contribuciones": 254588,
                "monto_pagado_anterioridad": null,
                "credito_al_salario": null,
                "importe_pagado_ultimas_48_hrs": null,
                "subsidio_empleo": null,
                "cantidad_a_cargo": 254588,
                "impuesto_a_depositos_efectivo_acreditable": null,
                "aplica_primera_parcialidad": "NO",
                "compensaciones": null,
                "credito_ieps_diesel": null,
                "diesel_automotriz_transporte": null,
                "cantidad_a_favor": null,
                "otros_estimulos": null,
                "cantidad_a_pagar": 254588,
                "importe_1ra_parcialidad": null,
                "importe_sin_1ra_parcialidad": null
              },
              "r14_isr_retenciones_por_servicios_profesionales": {
                "a_cargo": 104482,
                "acreditamiento_sorteos": null,
                "parte_actualizada": 0,
                "diesel_marino": null,
                "recargos": 0,
                "total_aplicaciones": 0,
                "multa_por_correccion": null,
                "fecha_pago_realizado_anterioridad": null,
                "total_de_contribuciones": 104482,
                "monto_pagado_anterioridad": null,
                "credito_al_salario": null,
                "importe_pagado_ultimas_48_hrs": null,
                "subsidio_empleo": null,
                "cantidad_a_cargo": 104482,
                "impuesto_a_depositos_efectivo_acreditable": null,
                "aplica_primera_parcialidad": "NO",
                "compensaciones": null,
                "credito_ieps_diesel": null,
                "diesel_automotriz_transporte": null,
                "cantidad_a_favor": null,
                "otros_estimulos": null,
                "cantidad_a_pagar": 104482,
                "importe_1ra_parcialidad": null,
                "importe_sin_1ra_parcialidad": null
              }
            },
            "determinacion_iva": {
              "montos_actos_actividades_pagados": {
                "total_actos_actividades_pagados_tasa_16": 2094706,
                "total_actos_actividades_pagados_importacion_bienes_tasa_11": null,
                "total_actos_actividades_sujetos_estimulo_rfn": 0,
                "total_actos_actividades_pagados_tasa_0": 0,
                "total_actos_actividades_pagados_importacion_bienes_tasa_16": null,
                "total_actos_actividades_pagados_no_paga_iva": 0
              },
              "detalle_total_actos_actividades_pagados_tasa_16": {
                "intereses_pagados_tasa_16": null,
                "otros_actos_pagados_tasa_16": 2094706,
                "regalias_pagadas_tasa_16": null,
                "total_actos_pagados_tasa_16": 2094706
              },
              "determinacion_iva_acreditable": {
                "total_iva_actos_actividades_pagados_tasa_16": 335153,
                "iva_trasladado_o_pagado_adquisicion_bienes_distintos_inversiones_actos_no_obligados_pago_impuesto": null,
                "iva_pagado_sujeto_estimulo_rfn": null,
                "iva_trasladado_o_pagado_importacion_inversiones_actos_no_obligados_pago_impuesto": null,
                "total_actos_actividades_pagados_importacion_bienes_tasa_16": 0,
                "iva_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": 0,
                "proporcion_utilizada_conforme_art_5": null,
                "total_iva_trasladado_contribuyente": 335153,
                "proporcion_utilizada_conforme_art_5_b": null,
                "iva_trasladado_adquisicion_bienes_distintos_inversiones_actos_gravados": 335153,
                "iva_pagado_importacion_adquisicion_bienes_distintos_inversiones_actos_gravados": null,
                "iva_acreditable": 335153,
                "monto_acreditable_actualizado_a_incrementar_derivado_ajuste": null,
                "iva_pagado_importacion_inversiones_actos_gravados": null,
                "total_iva_acreditable_periodo": 335153,
                "total_iva_actos_actividades_gravados": 335153,
                "total_actos_actividades_pagados_importacion_bienes_tasa_11": null,
                "iva_trasladado_adquisicion_inversiones_actos_gravados": null,
                "iva_acreditable_bienes_utilizados_indistintamente_actos_gravados_o_actos_no_obligados_pago_impuesto": null
              },
              "determinacion_iva": {
                "valor_actos_actividades_gravados_tasa_16": 6457950,
                "otras_cantidades_a_favor_contribuyente": null,
                "valor_actos_actividades_gravados_tasa_11": null,
                "cantidad_a_cargo": 312421,
                "valor_actos_actividades_gravados_tasa_0_exportacion": null,
                "saldo_a_favor": null,
                "valor_actos_actividades_gravados_tasa_9_otros": null,
                "devolucion_inmediata_obtenida": null,
                "suma_actos_actividades_gravados": 6457950,
                "saldo_a_favor_periodo": 0,
                "valor_actos_actividades_no_se_deba_pagar_impuesto_exentos": null,
                "acreditamiento_saldo_favor_periodos_anteriores": null,
                "impuesto_causado": 1033272,
                "diferencia_a_cargo": 312421,
                "cantidad_actualizada_a_reintegrarse_derivada_de_ajuste": null,
                "ieps_acreditable_alcohol": null,
                "iva_retenido_al_contribuyente": 385698,
                "impuesto_a_cargo": 312421,
                "total_iva_acreditable": 335153,
                "remanente_saldo_favor_ieps_alcohol": null,
                "otras_cantidades_a_cargo_contribuyente": null
              },
              "detalle_valor_actos_actividades_gravados_tasa_16": {
                "intereses_cobrados_tasa_16": null,
                "otros_actos_actividades_gravados_tasa_16": 6457950,
                "regalias_entre_partes_relacionadas_tasa_16": null,
                "total_actos_actividades_gravados_tasa_16": 6457950
              }
            },
            "detalle_pago_iva": {
              "r21_iva": {
                "a_cargo": 312421,
                "cretificados_tesofe": null,
                "a_favor": null,
                "diesel_marino": null,
                "parte_actualizada": 0,
                "total_aplicaciones": 0,
                "recargos": 0,
                "fecha_pago_realizado_anterioridad": null,
                "multa_por_correccion": null,
                "monto_pagado_anterioridad": null,
                "total_de_contribuciones": 312421,
                "importe_pagado_ultimas_48_hrs": null,
                "credito_al_salario": null,
                "cantidad_a_cargo": 312421,
                "subsidio_empleo": null,
                "aplica_primera_parcialidad": "NO",
                "compensaciones": null,
                "diesel_automotriz_transporte": null,
                "uso_infraestructura_carretera_cuota": null,
                "cantidad_a_favor": null,
                "otros_estimulos": null,
                "cantidad_a_pagar": 312421,
                "importe_1ra_parcialidad": null,
                "importe_sin_1ra_parcialidad": null
              },
              "r21_iva_retenciones": {
                "a_cargo": 111448,
                "diesel_marino": null,
                "parte_actualizada": 0,
                "total_aplicaciones": 0,
                "recargos": 0,
                "fecha_pago_realizado_anterioridad": null,
                "multa_por_correccion": null,
                "monto_pagado_anterioridad": null,
                "total_de_contribuciones": 111448,
                "importe_pagado_ultimas_48_hrs": null,
                "credito_al_salario": null,
                "cantidad_a_cargo": 111448,
                "subsidio_empleo": null,
                "aplica_primera_parcialidad": "NO",
                "compensaciones": null,
                "credito_ieps_diesel": null,
                "otros_estimulos": null,
                "cantidad_a_favor": null,
                "cretificados_tesofe": null,
                "cantidad_a_pagar": 111448,
                "importe_1ra_parcialidad": null,
                "importe_sin_1ra_parcialidad": null
              }
            },
            "pdf": "===PDF_BINARY====",
            "receipt_pdf": "===PDF_BINARY====",
            "type": "monthly"
          }
        },
        "TaxStatusPersonalListPaginated": {
          "summary": "Personal Tax Status",
          "description": "Example of a list of personal tax status",
          "value": {
            "count": 101,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "e88d29d1-3dc6-407f-825c-a9b50453e349",
                "link": "401d5a8e-79e2-472e-a1ca-8f4646f5cb24",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                "official_name": "Alfredo Gonzalo Robin",
                "id_cif": "2274235873432",
                "tax_payer_information": {
                  "rfc": "GGTF770303G7",
                  "curp": "BEMP930403HDFLLT00",
                  "name": "Alfredo",
                  "first_last_name": "Gonzalo",
                  "second_last_name": "Robin",
                  "start_operations_date": "2000-06-01",
                  "status_padron": "ACTIVO",
                  "last_status_change_date": "2000-06-01",
                  "commercial_name": "Alfredo Gonzalo Robin",
                  "social_name": null,
                  "email": "alfredo@robin.com",
                  "phone": "667507132"
                },
                "address": {
                  "postal_code": "21255",
                  "street_type": "BOULEVARD (BLVD.)",
                  "street": "GENERAL GIMENO",
                  "exterior_number": "4360",
                  "interior_number": "PLANTA BAJA",
                  "suburb": "BUENAVENTURA",
                  "locality": null,
                  "municipality": "ALTOS DE MIRAMAR",
                  "state": "CIUDAD DE MEXICO",
                  "between_street": [
                    {
                      "street_one": "CALLE PRINCIPE",
                      "street_two": "CALLE NUEVA ROMA"
                    }
                  ]
                },
                "economic_activity": [
                  {
                    "order": "1",
                    "economic_activity": "Asalariado",
                    "percentage": "100",
                    "initial_date": "2014-11-05",
                    "end_date": null
                  }
                ],
                "regimes": [
                  {
                    "regimen": "Régimen de Sueldos y Salarios e Ingresos Asimilados a Salarios",
                    "initial_date": "2003-01-01",
                    "end_date": null
                  }
                ],
                "obligations": [
                  {
                    "obligation": "Declaración informativa de IVA con la anual de ISR",
                    "expiration": "Conjuntamente con la declaración anual del ejercicio.",
                    "initial_date": "2004-03-31",
                    "end_date": null
                  },
                  {
                    "obligation": "Pago definitivo mensual de IVA.",
                    "expiration": "A más tardar el día 17 del mes inmediato posterior al periodo que corresponda.",
                    "initial_date": "2004-03-31",
                    "end_date": null
                  }
                ],
                "digital_stamp": "||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||",
                "digital_stamp_chain": "ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=",
                "pdf": "=PDF-STRING="
              }
            ]
          }
        },
        "TaxStatusBusinessListPaginated": {
          "summary": "Business Tax Status",
          "description": "Example of a list of business tax status",
          "value": {
            "count": 101,
            "next": "https://sandbox.belvo.com/api/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
                "link": "0b2edc42-7214-4c68-b22e-ae6885bf7c07",
                "collected_at": "2022-02-09T08:45:50.406032Z",
                "created_at": "2022-02-09T08:46:20.406032Z",
                "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
                "official_name": "ACNE SA DE CV",
                "id_cif": "2274235873432",
                "tax_payer_information": {
                  "rfc": "GHTF980303F7",
                  "curp": null,
                  "name": null,
                  "first_last_name": null,
                  "second_last_name": null,
                  "start_operations_date": "1995-08-01",
                  "status_padron": "ACTIVO",
                  "last_status_change_date": "1995-08-01",
                  "commercial_name": null,
                  "social_name": "ACNE SA DE CV",
                  "email": "contact@acne.com",
                  "phone": "555507122"
                },
                "address": {
                  "postal_code": "21255",
                  "street_type": "BOULEVARD (BLVD.)",
                  "street": "GENERAL GIMENO",
                  "exterior_number": "4360",
                  "interior_number": "PLANTA BAJA",
                  "suburb": "BUENAVENTURA",
                  "locality": null,
                  "municipality": "ALTOS DE MIRAMAR",
                  "state": "CIUDAD DE MEXICO",
                  "between_street": [
                    {
                      "street_one": "CALLE PRINCIPE",
                      "street_two": "CALLE NUEVA ROMA"
                    }
                  ]
                },
                "economic_activity": [
                  {
                    "order": "1",
                    "economic_activity": "Otros servicios profesionales, científicos y técnicos",
                    "percentage": "100",
                    "initial_date": "2014-11-05",
                    "end_date": null
                  }
                ],
                "regimes": [
                  {
                    "regimen": "Régimen General de Ley Personas Morales",
                    "initial_date": "2003-01-01",
                    "end_date": null
                  }
                ],
                "obligations": [
                  {
                    "obligation": "Declaración informativa de IVA con la anual de ISR",
                    "expiration": "Conjuntamente con la declaración anual del ejercicio.",
                    "initial_date": "2004-03-31",
                    "end_date": null
                  },
                  {
                    "obligation": "Pago definitivo mensual de IVA.",
                    "expiration": "A más tardar el día 17 del mes inmediato posterior al periodo que corresponda.",
                    "initial_date": "2004-03-31",
                    "end_date": null
                  }
                ],
                "digital_stamp": "||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||",
                "digital_stamp_chain": "EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=",
                "pdf": "=PDF-STRING="
              }
            ]
          }
        },
        "TaxStatusPersonalList": {
          "summary": "Personal Tax Status",
          "description": "Example of a list of personal tax status",
          "value": {
            "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
            "link": "401d5a8e-79e2-472e-a1ca-8f4646f5cb24",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
            "official_name": "Alfredo Gonzalo Robin",
            "id_cif": "2274235873432",
            "tax_payer_information": {
              "rfc": "GGTF770303G7",
              "curp": "BEMP930403HDFLLT00",
              "name": "Alfredo",
              "first_last_name": "Gonzalo",
              "second_last_name": "Robin",
              "start_operations_date": "2000-06-01",
              "status_padron": "ACTIVO",
              "last_status_change_date": "2000-06-01",
              "commercial_name": "Alfredo Gonzalo Robin",
              "social_name": null,
              "email": "alfredo@robin.com",
              "phone": "667507132"
            },
            "address": {
              "postal_code": "21255",
              "street_type": "BOULEVARD (BLVD.)",
              "street": "GENERAL GIMENO",
              "exterior_number": "4360",
              "interior_number": "PLANTA BAJA",
              "suburb": "BUENAVENTURA",
              "locality": null,
              "municipality": "ALTOS DE MIRAMAR",
              "state": "CIUDAD DE MEXICO",
              "between_street": [
                {
                  "street_one": "CALLE PRINCIPE",
                  "street_two": "CALLE NUEVA ROMA"
                }
              ]
            },
            "economic_activity": [
              {
                "order": "1",
                "economic_activity": "Asalariado",
                "percentage": "100",
                "initial_date": "2014-11-05",
                "end_date": null
              }
            ],
            "regimes": [
              {
                "regimen": "Régimen de Sueldos y Salarios e Ingresos Asimilados a Salarios",
                "initial_date": "2003-01-01",
                "end_date": null
              }
            ],
            "obligations": [
              {
                "obligation": "Declaración informativa de IVA con la anual de ISR",
                "expiration": "Conjuntamente con la declaración anual del ejercicio.",
                "initial_date": "2004-03-31",
                "end_date": null
              },
              {
                "obligation": "Pago definitivo mensual de IVA.",
                "expiration": "A más tardar el día 17 del mes inmediato posterior al periodo que corresponda.",
                "initial_date": "2004-03-31",
                "end_date": null
              }
            ],
            "digital_stamp": "||2020/09/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||",
            "digital_stamp_chain": "ExpsnSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjel=",
            "pdf": "=PDF-STRING="
          }
        },
        "TaxStatusBusinessList": {
          "summary": "Business Tax Status",
          "description": "Example of a list of business tax status",
          "value": {
            "id": "6de34cb3-bf0d-445d-b832-7ec7781e2c6f",
            "link": "0b2edc42-7214-4c68-b22e-ae6885bf7c07",
            "collected_at": "2022-02-09T08:45:50.406032Z",
            "created_at": "2022-02-09T08:46:20.406032Z",
            "place_and_date_of_issuance": "BUENAVENTURA, CIUDAD DE MEXICO A 22 DE FEBRERO DE 2021",
            "official_name": "ACNE SA DE CV",
            "id_cif": "2274235873432",
            "tax_payer_information": {
              "rfc": "GHTF980303F7",
              "curp": null,
              "name": null,
              "first_last_name": null,
              "second_last_name": null,
              "start_operations_date": "1995-08-01",
              "status_padron": "ACTIVO",
              "last_status_change_date": "1995-08-01",
              "commercial_name": null,
              "social_name": "ACNE SA DE CV",
              "email": "contact@acne.com",
              "phone": "555507122"
            },
            "address": {
              "postal_code": "21255",
              "street_type": "BOULEVARD (BLVD.)",
              "street": "GENERAL GIMENO",
              "exterior_number": "4360",
              "interior_number": "PLANTA BAJA",
              "suburb": "BUENAVENTURA",
              "locality": null,
              "municipality": "ALTOS DE MIRAMAR",
              "state": "CIUDAD DE MEXICO",
              "between_street": [
                {
                  "street_one": "CALLE PRINCIPE",
                  "street_two": "CALLE NUEVA ROMA"
                }
              ]
            },
            "economic_activity": [
              {
                "order": "1",
                "economic_activity": "Otros servicios profesionales, científicos y técnicos",
                "percentage": "100",
                "initial_date": "2014-11-05",
                "end_date": null
              }
            ],
            "regimes": [
              {
                "regimen": "Régimen General de Ley Personas Morales",
                "initial_date": "2003-01-01",
                "end_date": null
              }
            ],
            "obligations": [
              {
                "obligation": "Declaración informativa de IVA con la anual de ISR",
                "expiration": "Conjuntamente con la declaración anual del ejercicio.",
                "initial_date": "2004-03-31",
                "end_date": null
              },
              {
                "obligation": "Pago definitivo mensual de IVA.",
                "expiration": "A más tardar el día 17 del mes inmediato posterior al periodo que corresponda.",
                "initial_date": "2004-03-31",
                "end_date": null
              }
            ],
            "digital_stamp": "||2020/04/26|GHTF980303F7|CONSTANCIA DE SITUACIÓN FISCAL|2044441088666600000034||",
            "digital_stamp_chain": "EtenSA9t1adG7bn+Jj23kj43JK+XbMPxdOppwabhXD+pXseSqYowWWDna0mpUk3264lkj2345j23faNZB852dCDt9KAjow=",
            "pdf": null
          }
        },
        "IncomeVerificationEyod": {
          "summary": "Income Verfification",
          "description": "Example of an enriched income transactions.",
          "value": [
            {
              "id": "076c66e5-90f5-4e01-99c7-50e32f65ae42",
              "link": "b834e69b-1aa4-465d-969c-07c886a4fbed",
              "created_at": "2022-02-09T08:45:50.406032Z",
              "income_source_type": "BANK",
              "first_transaction_date": "2022-09-25",
              "last_transaction_date": "2023-03-25",
              "number_of_income_streams": 5,
              "monthly_average": 2000,
              "monthly_average_regular": 1800,
              "monthly_average_irregular": 200,
              "monthly_average_low_confidence": 200,
              "monthly_average_medium_confidence": 200,
              "monthly_average_high_confidence": 200,
              "total_income_amount": 12000,
              "total_regular_income_amount": 10800,
              "total_irregular_income_amount": 1200,
              "total_low_confidence": 200,
              "total_medium_confidence": 200,
              "total_high_confidence": 200,
              "income_streams": [
                {
                  "account_id": "EBUACA-89077589",
                  "income_type": "SALARY",
                  "frequency": "MONTHLY",
                  "monthly_average": 7500,
                  "average_income_amount": 7500,
                  "last_income_amount": 7500,
                  "currency": "BRL",
                  "last_income_description": "Salário",
                  "last_income_date": "2023-03-25",
                  "stability": 0.9,
                  "regularity": 0.8,
                  "trend": -0.1,
                  "lookback_periods": 10,
                  "full_periods": 5,
                  "periods_with_income": 5,
                  "number_of_incomes": 6,
                  "confidence": "HIGH"
                },
                {
                  "account_id": "EBUACA-890775324",
                  "income_type": "TRANSFER",
                  "frequency": "SINGLE",
                  "monthly_average": 3000,
                  "average_income_amount": 3000,
                  "last_income_amount": 3000,
                  "currency": "BRL",
                  "last_income_description": "Transferência da Gui",
                  "last_income_date": "2022-09-25",
                  "stability": null,
                  "regularity": null,
                  "trend": null,
                  "lookback_periods": 10,
                  "full_periods": 5,
                  "periods_with_income": 1,
                  "number_of_incomes": 1,
                  "confidence": "LOW"
                }
              ]
            }
          ]
        },
        "CategorizationExample": {
          "summary": "Categorization",
          "description": "Example of categorized transactions",
          "value": {
            "transactions": [
              {
                "transaction_id": "3CWE4927CF15355",
                "account_holder_type": "INDIVIDUAL",
                "account_holder_id": "7890098789087",
                "account_id": "BBVACA-89077589",
                "account_category": "CREDIT_CARD",
                "value_date": "2022-11-18",
                "description": "APPL3STORE",
                "type": "OUTFLOW",
                "amount": 650.89,
                "currency": "BRL",
                "institution": "BBVA",
                "mcc": 2345,
                "category": "Income & Payments",
                "subcategory": "Freelance",
                "merchant": {
                  "logo": "https://www.apple.com/ac/structured-data/images/open_graph_logo.png?202110180",
                  "website": "https://www.apple.com/br/",
                  "merchant_name": "Apple, Inc"
                }
              },
              {
                "transaction_id": "3CWE4927CF15996",
                "account_holder_type": "INDIVIDUAL",
                "account_holder_id": "996685090015",
                "account_id": "BDBACA-89077896",
                "account_category": "CHECKING_ACCOUNT",
                "value_date": "2022-12-02",
                "description": "OXXO SP",
                "type": "OUTFLOW",
                "amount": 999.9,
                "currency": "BRL",
                "institution": "BCO DO BRASIL",
                "mcc": null,
                "category": "Income & Payments",
                "subcategory": "Freelance",
                "merchant": {
                  "logo": "https://storage.googleapis.com/new-cdn.mercafacil.com/wl_assets/dynamic/65d84ba0-a2f3-11ed-8928-dd578f525074-MOBILE_1OCo1.png",
                  "website": "https://merchants-r-us.com",
                  "merchant_name": "Merchants R Us Global"
                }
              }
            ]
          }
        },
        "ResponseCustomerOfpiIndividualPaginated": {
          "summary": "OFPI Individual",
          "value": {
            "count": 110,
            "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2022-02-09T08:45:50.406032Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "customer_type": "INDIVIDUAL",
                "name": "Caetano Veloso",
                "country": "BRA",
                "email": "caetano.veloso@musicabrazil.br",
                "identifier": "23******00",
                "identifier_type": "CPF",
                "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                "phone": "3210-9876"
              },
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2022-02-09T08:45:50.406032Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "customer_type": "INDIVIDUAL",
                "name": "Caetano Veloso",
                "country": "BRA",
                "email": "caetano.veloso@musicabrazil.br",
                "identifier": "23******00",
                "identifier_type": "CPF",
                "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                "phone": "3210-9876"
              }
            ]
          }
        },
        "ResponseCustomerOfpiBusinessPaginated": {
          "summary": "OFPI Business",
          "value": {
            "count": 110,
            "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2022-02-09T08:45:50.406032Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "customer_type": "BUSINESS",
                "name": "Music Production Brazil",
                "country": "BRA",
                "email": "finance@musicabrazil.br",
                "identifier": "00.000.000/0001-91",
                "identifier_type": "CNPJ",
                "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                "phone": "3210-9876"
              },
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2022-02-09T08:45:50.406032Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "customer_type": "BUSINESS",
                "name": "Music Production Brazil",
                "country": "BRA",
                "email": "finance@musicabrazil.br",
                "identifier": "00.000.000/0001-91",
                "identifier_type": "CNPJ",
                "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
                "phone": "3210-9876"
              }
            ]
          }
        },
        "ResponseCustomerPseIndividualPaginated": {
          "summary": "PSE Individual",
          "value": {
            "count": 110,
            "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2022-02-09T08:45:50.406032Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "customer_type": "INDIVIDUAL",
                "name": "Carlos Vives",
                "country": "COL",
                "email": "carlos.vives@musicacolombia.co",
                "identifier": "1018760936",
                "identifier_type": "CC",
                "address": "Calle Carlos Vives 432, 80300 Bogota",
                "phone": "3210-9876"
              },
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2022-02-09T08:45:50.406032Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "customer_type": "INDIVIDUAL",
                "name": "Carlos Vives",
                "country": "COL",
                "email": "carlos.vives@musicacolombia.co",
                "identifier": "1018760936",
                "identifier_type": "CC",
                "address": "Calle Carlos Vives 432, 80300 Bogota",
                "phone": "3210-9876"
              }
            ]
          }
        },
        "CreateCustomerOfpiIndividual": {
          "summary": "OFPI Individual",
          "value": {
            "customer_type": "INDIVIDUAL",
            "name": "Caetano Veloso",
            "country": "BRA",
            "email": "caetano.veloso@musicabrazil.br",
            "identifier": "231.002.999-00",
            "identifier_type": "CPF"
          }
        },
        "CreateCustomerOfpiBusiness": {
          "summary": "OFPI Business",
          "value": {
            "customer_type": "BUSINESS",
            "name": "Music Production Brazil",
            "country": "BRA",
            "email": "finance@musicabrazil.br",
            "identifier": "00.000.000/0001-91",
            "identifier_type": "CNPJ"
          }
        },
        "CreateCustomerPseIndividual": {
          "summary": "PSE Individual",
          "value": {
            "customer_type": "INDIVIDUAL",
            "name": "Carlos Vives",
            "country": "COL",
            "email": "carlos.vives@musicacolombia.co",
            "identifier": "1018760936",
            "identifier_type": "CC",
            "address": "Calle Carlos Vives 432, 80300 Bogota",
            "phone": "3210-9876"
          }
        },
        "ResponseCustomerOfpiIndividual": {
          "summary": "OFPI Individual",
          "value": {
            "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
            "created_at": "2022-02-09T08:45:50.406032Z",
            "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
            "customer_type": "INDIVIDUAL",
            "name": "Caetano Veloso",
            "country": "BRA",
            "email": "caetano.veloso@musicabrazil.br",
            "identifier": "23******00",
            "identifier_type": "CPF",
            "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
            "phone": "3210-9876"
          }
        },
        "ResponseCustomerOfpiBusiness": {
          "summary": "OFPI Business",
          "value": {
            "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
            "created_at": "2022-02-09T08:45:50.406032Z",
            "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
            "customer_type": "BUSINESS",
            "name": "Music Production Brazil",
            "country": "BRA",
            "email": "finance@musicabrazil.br",
            "identifier": "00.000.000/0001-91",
            "identifier_type": "CNPJ",
            "address": "Rua de Caetano Veloso 432, 70200 Brasilia",
            "phone": "3210-9876"
          }
        },
        "ResponseCustomerPseIndividual": {
          "summary": "PSE Individual",
          "value": {
            "id": "0110c70a-5faf-4d72-94b6-307473e86af7",
            "created_at": "2022-02-09T08:45:50.406032Z",
            "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
            "customer_type": "INDIVIDUAL",
            "name": "Carlos Vives",
            "country": "COL",
            "email": "carlos.vives@musicacolombia.co",
            "identifier": "1018760936",
            "identifier_type": "CC",
            "address": "Calle Carlos Vives 432, 80300 Bogota",
            "phone": "3210-9876"
          }
        },
        "ResponseBankAccountOrganizationPixInfoPaginated": {
          "summary": "Organization (PIX Info)",
          "value": {
            "count": 110,
            "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "90d90e38-0087-4b6d-b6dc-94ea561bb9cb",
                "created_at": "2023-02-15T07:52:31.998761Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                "customer": null,
                "holder": {
                  "type": "BUSINESS",
                  "information": {
                    "name": "Music Production Brazil",
                    "identifier_type": "CNPJ",
                    "identifier": "00.000.000/0001-91"
                  }
                },
                "details": {
                  "country": "BRA",
                  "account_type": "CHECKINGS",
                  "agency": "0444",
                  "number": "45722-0"
                }
              }
            ]
          }
        },
        "ResponseBankAccountOrganizationPixKeyPaginated": {
          "summary": "Organization (PIX Key)",
          "value": {
            "count": 110,
            "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2023-02-15T07:52:31.998761Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
                "customer": null,
                "holder": {
                  "type": "BUSINESS",
                  "information": {
                    "name": "Music Production Brazil",
                    "identifier_type": "CNPJ",
                    "identifier": "00.000.000/0001-91"
                  }
                },
                "details": {
                  "country": "BRA",
                  "pix_key": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab"
                }
              }
            ]
          }
        },
        "ResponseBankAccountOrganizationPsePaginated": {
          "summary": "Organization (PSE)",
          "value": {
            "count": 110,
            "next": "https://api.belvo.com/payments/{endpoint}/?page=2",
            "previous": null,
            "results": [
              {
                "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
                "created_at": "2023-02-15T07:52:31.998761Z",
                "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
                "holder": {
                  "type": "BUSINESS",
                  "information": {
                    "name": "Tr******es"
                  }
                },
                "providers": {
                  "payments_way": {
                    "terminal_id": 123,
                    "form_id": 321
                  }
                },
                "metadata": {
                  "internal_reference_id": "GGq73487w2"
                },
                "details": {},
                "institution": null,
                "customer": null,
                "number": "******5633"
              }
            ]
          }
        },
        "CreateBankAccountOrganizationPixInfo": {
          "summary": "Organization (PIX Info)",
          "value": {
            "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
            "holder": {
              "type": "BUSINESS",
              "information": {
                "name": "Music Production Brazil",
                "identifier_type": "CNPJ",
                "identifier": "00.000.000/0001-91"
              }
            },
            "details": {
              "country": "BRA",
              "account_type": "CHECKINGS",
              "agency": "0444",
              "number": "45722-0"
            }
          }
        },
        "CreateBankAccountOrganizationPixKey": {
          "summary": "Organization (PIX Key)",
          "value": {
            "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
            "holder": {
              "type": "BUSINESS",
              "information": {
                "name": "Music Production Brazil",
                "identifier_type": "CNPJ",
                "identifier": "00.000.000/0001-91"
              }
            },
            "details": {
              "country": "BRA",
              "pix_key": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab"
            }
          }
        },
        "CreateBankAccountOrganizationPse": {
          "summary": "Organization (PSE)",
          "value": {
            "holder": {
              "type": "BUSINESS",
              "information": {
                "name": "Trusty documentation services"
              }
            },
            "providers": {
              "payments_way": {
                "terminal_id": 123,
                "form_id": 321
              }
            },
            "number": 12343453245633,
            "metadata": {
              "internal_reference_id": "GGq73487w2"
            }
          }
        },
        "ResponseBankAccountOrganizationPixInfo": {
          "summary": "Organization (PIX Info)",
          "value": {
            "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
            "created_at": "2023-02-15T07:52:31.998761Z",
            "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
            "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
            "customer": null,
            "holder": {
              "type": "BUSINESS",
              "information": {
                "name": "Music Production Brazil",
                "identifier_type": "CNPJ",
                "identifier": "00.000.000/0001-91"
              }
            },
            "details": {
              "country": "BRA",
              "account_type": "CHECKINGS",
              "agency": "0444",
              "number": "45722-0"
            }
          }
        },
        "ResponseBankAccountOrganizationPixKey": {
          "summary": "Organization (PIX Key)",
          "value": {
            "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
            "created_at": "2023-02-15T07:52:31.998761Z",
            "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
            "institution": "f512d996-583a-4a91-8b5b-eba2e103b068",
            "customer": null,
            "holder": {
              "type": "BUSINESS",
              "information": {
                "name": "Music Production Brazil",
                "identifier_type": "CNPJ",
                "identifier": "00.000.000/0001-91"
              }
            },
            "details": {
              "country": "BRA",
              "pix_key": "RANDOM://6c1c236c-a035-4b80-ab12-e38f88ce82ab"
            }
          }
        },
        "ResponseBankAccountOrganizationPse": {
          "summary": "Organization (PSE)",
          "value": {
            "id": "7c2be016-37e3-44e2-8643-db2eb1129a3f",
            "created_at": "2023-02-15T07:52:31.998761Z",
            "created_by": "417514fe-50f6-42e9-a3eb-c71da00f014c",
            "holder": {
              "type": "BUSINESS",
              "information": {
                "name": "Tr******es"
              }
            },
            "providers": {
              "payments_way": {
                "terminal_id": 123,
                "form_id": 321
              }
            },
            "metadata": {
              "internal_reference_id": "GGq73487w2"
            },
            "details": {},
            "institution": null,
            "customer": null,
            "number": "******5633"
          }
        }
      }
    },
    "tags": [
      {
        "name": "Institutions",
        "description": "An **institution** is an entity that Belvo can access information from. It can be a:\n\n- bank institution, such as Banamex retail banking or HSBC business banking.\n- fiscal institution, such as the Servicio de Administración Tributaria (SAT) in Mexico.\n\n![](https://files.readme.io/69a4676-Banking__Tax.png)\n\nYou can see a complete list of institutions by either consulting our [Institutions article](https://developers.belvo.com/docs/institution) or making a List request to this endpoint."
      },
      {
        "name": "Links",
        "description": "A **Link** is a set of credentials associated to an end-user's access to an **institution**.\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #808080;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n<strong>Example: </strong> The username and password combination used to log in to an online banking application would be a link.\n</div>\n\nYou will need to register a **Link** before accessing information from that specific end-user, such as account or transaction details.\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n<strong>Note: </strong> We recommend using our <a href=\"https://developers.belvo.com/docs/connect-widget\" target=\"_blank\">Connect Widget</a> to handle link creation and link status updates.\n</div>\n\nYou have the possibility to register two types of links:\n\n### Recurrent links (default)\n\nWith recurrent links, Belvo automatically refreshes information weekly and notifies you via [Webhooks](https://developers.belvo.com/docs/webhooks) so you always have up-to-date data. Then, when you receive the webhook, you can make GET requests to the List or Detail endpoints to instantly access up-to-date information, without needing to connect to the institution.\n\n<img src=\"https://files.readme.io/7b6c0d4-Recurrent_Link_FLow.png\" alt=\"fiscal-endpoints\" width=\"950\">\n\nYou can also make POST calls directly to the institution, as with single links, as soon as the link is created. However, we recommend you follow the flow described above (waiting for the webhook event) for a more optimal experience.\n\n### Single links\n\nSingle links are used to perform ad hoc data access to accounts, owners, transactions, and so on. For example, you can use it when you want to do an underwriting process to assess risk before lending money.\n\nFor single links, you have to perform POST calls to an institution **every time** you want to access fresh data.\n\n<img src=\"https://files.readme.io/eda7956-Single_Link_Flow.svg\" alt=\"fiscal-endpoints\" width=\"950\">"
      },
      {
        "name": "Banking API introduction",
        "description": "Use our Banking API product to access account, balance, owner, bank statement, as well as transaction data from banking institutions.<br>\n\n\n![](https://files.readme.io/894213c-Banking_and_Gig.png \"Banking and Gig.png\")\n\n\n| API Endpoint                | Description                                                               | Supported institutions |\n| --------------------------- | ------------------------------------------------------------------------- | ---------------------- |\n| `api/accounts/`             | Get information about your customer's bank accounts.                      | Banking        |\n| `api/balances/`             | Get the balance at the end of each day for your customer's bank accounts. | Banking                |\n| `api/owners/`               | Get the details of an account owner.                                      | Banking        |\n| `api/transactions/`         | Get a list of bank transactions with metadata.                            | Banking        |\n| `investments/portfolios/`   | Get information about your customer's investment portfolios.              | Banking                |\n"
      },
      {
        "name": "Accounts",
        "description": "An **account** is the representation of a bank account inside a financial institution. A user can have one or more accounts in an institution. \n\nFor example, one user (or link) can have a checking account, several credit cards, and a loan account.\n\nQuerying for a user's account information is useful as you can get information regarding:\n\n- what types of accounts the user has\n- the balance for each account (savings, checking, credit card, loan, and so on)\n\n\n> 🚧 Scheduled field deprecation\n> \n> Please note that we will soon be deprecating the following fields in our `loan_data` object:\n> \n> - `cutting_date`\n> - `cutting_day`\n> - `credit_limit`: replaced by the `principal` field.\n> - `interest_rate`: replaced by the `interest_rates` object.\n> - `last_payment_date`\n> - `last_period_balance`: replaced by the `outstanding_balance ` field.\n> - `limit_day`\n> - `limit_date`: replaced by the `payment_day ` field.\n> - `no_interest_payment`\n> - `payment_due_day`\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field                         | Available Filters                      |\n| ----------------------------- | -------------------------------------- |\n| `balance__available`          | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `balance__current`            | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `bank_product_id`             | `=`                                    |\n| `category`                    | `=`, `in`                              |\n| `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |\n| `currency`                    | `=`\\*, `in`                            |\n| `id`                          | `=`, `in`                              |\n| `institution`                 | `=`, `in`                              |\n| `internal_identification`     | `=`                                    |\n| `link`                        | `=`, `in`                              |\n| `name`                        | `=`, `icontains`                       |\n| `number`                      | `=`, `in`                              |\n| `public_identification_name`  | `=`                                    |\n| `public_identification_value` | `=`                                    |\n| `type`                        | `=`, `in`                              |\n\n```curl cURL\n## Filtering results to have savings accounts with a balance\n## between 5000 and 8000 Colombian pesos\nhttps://sandbox.belvo.com/api/accounts/?category=savings&balance__available__range=5000,8000&currency=COP\n```\n```javascript Node\n// Filtering results to have savings accounts with a balance\n// between 5000 and 8000 Colombian pesos\nclient.accounts.list({\n  filters: {\n    category: \"savings\",\n    balance__available__range: \"5000,8000\",\n    currency: \"COP\"\n  }\n})\n```\n```python Python\n## Filtering results to have savings accounts with a balance\n## between 5000 and 8000 Colombian pesos\nclient.Accounts.list(category=\"savings\",balance__available__range=\"5000,8000\",currency=\"COP\")\n```\n```ruby Ruby\n## Filtering results to have savings accounts with a balance\n## between 5000 and 8000 Colombian pesos\nclient.accounts.list(params: {\n  category: \"savings\",\n  balance__available__range: \"5000,8000\",\n  currency: \"COP\"\n})\n```"
      },
      {
        "name": "Transactions",
        "description": "A **transaction** contains the detailed information of each movement inside an account. For example, a purchase at a store or a restaurant.\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field                         | Available Filters                      |\n| ----------------------------- | -------------------------------------- |\n| `account`                     | `=`, `in`                              |\n| `account**balance**available` | `=`, `lt`, `lte`, `range`              |\n| `account**balance**current`   | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `account_type`                | `=`, `in`                              |\n| `accounting_date`             | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `amount`                      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `credit_card_data__bill_name` | `=`, `in`                              |\n| `created_at `                 | `gt`, `gte`, `lt`, `lte`, `range`      |\n| `currency`                    | `=`, `in`                              |\n| `id`                          | `=`, `in`                              |\n| `institution`                 | `=`, `in`                              |\n| `link`                        | `=`, `in`                              |\n| `reference`                   | `=`, `in`                              |\n| `status`                      | `=`, `in`                              |\n| `type`                        | `=`, `in`                              |\n| `value_date`                  | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n\n```curl cURL\n# Filtering results to have transactions just from one link\nhttps://api.belvo.com/api/transactions/?link=link_id\n\n# Filtering results to have transactions just form one link and between a date range\nhttps://api.belvo.com/api/transactions/?link=link_id&value_date__range=2020-10-01,2020-12-01\n\n```\n```javascript Node\n// Filtering results to have transactions just from one link\n\nclient.transactions.list({\n  filters: {\n    link: \"link_id\"\n  }\n})\n\n// Filtering results to have transactions just form one link and between a date range\nclient.transactions.list({\n  filters: {\n    link: \"link_id\",\n    value_date__range: \"2020-10-01,2020-12-01\"\n  }\n})\n\n```\n```python Python\n# Filtering results to have links just from two institutions\nclient.Transactions.list(link=\"link_id\")\n\n# Filtering results from one institution and a certain status\nclient.Transactions.list(link=\"link_id\", value_date__range=\"2020-10-01,2020-12-01\")\n\n```\n```ruby Ruby\n# Filtering results to have links just from two institutions\nclient.transactions.list(params: {\n  link: \"link_id\"\n})\n\n# Filtering results from one institution and a certain status\nclient.transactions.list(params: {\n  link: \"link_id\",\n  value_date__range: \"2020-10-01,2020-12-01\"\n})\n```"
      },
      {
        "name": "Balances",
        "description": "A **balance** represents the amount of funds available in a checking or savings account over a period of time.\n\n<ul>\n  <li>\n    If your Balance request is not for a checking or savings account, we return\n    an empty array.\n  </li>\n  <li>\n    If we cannot calculate the balance for a given day within your requested\n    period, the <code>balance</code> and <code>current_balance</code> fields\n    will return <code>null</code> for that day.\n  </li>\n</ul>\n\n> 📘 \n> \n> Savings accounts that do not have any associated transactions (for example, some _poupança_ accounts in Brazil) will not contain accurate Balance information. We do not recommend using the Balance endpoint for these types of accounts. \n> \n> Savings accounts vary from institution to institution, so we recommend that you first use our [Retrieve transactions for a link](https://developers.belvo.com/reference/retrievetransactions) request, adding the `account` in the request body, to see if the Savings account has any associated transactions.\n\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field             | Available Filters                      |\n| ----------------- | -------------------------------------- |\n| `account`         | `=`, `in`                              |\n| `account_type`    | `=`, `in`                              |\n| `balance`         | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `currency`        | `=`, `in`                              |\n| `current_balance` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `id`              | `=`, `in`                              |\n| `institution`     | `=`, `in`                              |\n| `link`            | `=`, `in`                              |\n| `value_date`      | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n\n```curl cURL\n# Filtering results to have balances greater than 5000\nhttps://api.belvo.com/api/balances/?balance__gt=5000 \n\n# Filtering results to have balances greater than 5000 and in Brazilian Reis\nhttps://api.belvo.com/api/balances/?balance__gt=5000&currency=BRL\n```\n```javascript Node\n//  Filtering results to have balances greater than 5000\nclient.balances.list({\n  filters: {\n    balance__gt: 5000\n  }\n})\n\n//  Filtering results to have balances greater than 5000 and in Brazilian Reis\n\nclient.balances.list({\n  filters: {\n    balance__gt: 5000,\n    currency: \"BRL\"\n  }\n})\n```\n```python Python\n# Filtering results to have balances greater than 5000\nclient.Balances.list(balance__gt=5000)\n\n# Filtering results to have balances greater than 5000 and in Brazilian Reis\nclient.Balances.list(balance__gt=5000, currency=\"BRL\")\n```\n```ruby Ruby\n# Filtering results to have balances greater than 5000\nclient.balances.list(params: {\n  balance__gt: 5000\n})\n\n# Filtering results to have balances greater than 5000 and in Brazilian Reis\nclient.balances.list(params: {\n  balance__gt: 5000,\n  currency: \"BRL\"\n})\n```"
      },
      {
        "name": "Owners",
        "description": "An **owner** represents the person who has access to a Link and is the owner of all the accounts inside the Link.\n\nYou can use this endpoint in order to get useful information about your client, such as:\n\n- their full name\n- key contact information\n- information about the ID document they used when opening the account\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field         | Available Filters                 |\n| ------------- | --------------------------------- |\n| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |\n| `email`       | `=`                               |\n| `id`          | `=`, `in`                         |\n| `link`        | `=`, `in`                         |\n\n```curl cURL\n# Filtering results so that you get the emails of one link:\nhttps://sandbox.belvo.com/api/owners/?email=filtering@belvo.com\n\n```\n```javascript Node\n// Filtering results so that you get the emails of one link:\nclient.owners.list({\n  filters: {\n    email: \"filtering@belvo.com\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the emails of one link:\nclient.Owners.list(email=\"filtering@belvo.com\")\n\n```\n```ruby Ruby\n# Filtering results so that you get the emails of one link:\nclient.owners.list(params: {\n  email: \"filtering@belvo.com\"\n})\n\n})\n```"
      },
      {
        "name": "Investment Portfolios",
        "description": "At the moment we only support the following institutions and investment products:\n\n| Institution                     | Portfolio                         | Instruments                 |\n| ------------------------------- | --------------------------------- | --------------------------- |\n| Banco de Brazil Retail (Brazil) | `FIXED_INCOME`                    | `DEPOSIT`                   |\n| Banco Inter Retail (Brazil)     | `FIXED_INCOME`                    | `DEPOSIT`                   |\n| Bradesco Retail (Brazil)        | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `FUND`           |\n| CaixaBank Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `FUND`           |\n| Itau Retail (Brazil)            | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `FUND`, `STOCKS` |\n| Santander Retail (Brazil)       | `FIXED_INCOME`, `VARIABLE_INCOME` | `DEPOSIT`, `BOND`, `FUND`   |\n\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field         | Available Filters                 |\n| ------------- | --------------------------------- |\n| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |\n| `link`        | `=`, `in`                         |\n\n```curl cURL\n# Filtering results so that you get the portfolios of one link:\nhttps://sandbox.belvo.com/investments/portfolios/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4\n\n```\n```javascript Node\n// Filtering results so that you get the portfolios of one link:\nclient. investmentsPortfolios.list({\n  filters: {\n    link: \"89c91f42-df34-4c5d-a4f1-6e1e40438af4\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the portfolios of one link:\nclient. InvestmentsPortfolios.list(link=\"89c91f42-df34-4c5d-a4f1-6e1e40438af4\")\n\n```\n```ruby Ruby\n# Filtering results so that you get the portfolios of one link:\nclient. investments_portfolio.list(params: {\n  link: \"89c91f42-df34-4c5d-a4f1-6e1e40438af4\"\n})\n```"
      },
      {
        "name": "Receivable Transactions",
        "description": "With our receivable transactions resource, you can gain access to every transaction processed by the end user (business) conducted through a POS terminal. For each transaction, we return the:\n\n- gross and net amounts\n- type of card used\n- fees applied to the transaction\n- and more!"
      },
      {
        "name": "Employment Records",
        "description": "# Employment Records\n\nOur employment records resource lets you get a comprehensive view of your user’s current social security contributions and employment history.\n\nWith Belvo's employment records resource, you can access information about your user's current social security contributions and employment history. For the each user, we return the:\n\n- personal data\n- work history\n- historical and current daily base salary\n- and more!\n\nAt the moment, the employment records resource is available for:\n\n- 🇲🇽 Mexico (IMSS)"
      },
      {
        "name": "Enrichment API introduction",
        "description": "Belvo's Enrichment API are a set of endpoints that return additional insights on your user's banking data. \n\n- **Incomes**: Use this endpoint to verify your user's income.\n- **Recurring Expenses**: Use this endpoint to identify the recurrent expenses (such as Netflix subscriptions) that your user pays.\n- **Risk Insights**: Use this endpoint to retrieve key data points to feed into your risk evaluation models."
      },
      {
        "name": "Incomes",
        "description": "Use the Incomes endpoint to gather insights on an account's income sources for the past 365 days. The endpoint is particularly useful when you want to verify a person's income.\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n    <strong>Info: </strong> The incomes resource is <b>only</b> available for Checking and Savings\naccounts associated with banking links.\n </div>\n\n\n ### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field        | Available Filters                 |\n| ------------ | --------------------------------- |\n| `account`    | `=`, `in`                         |\n| `created_at` | `gt`, `gte`, `lt`, `lte`, `range` |\n| `id`         | `=`, `in`                         |\n\n```curl cURL\n# Filtering results to have incomes from one link:\nhttps://sandbox.belvo.com/api/incomes/?link=link-id\n\n# Filtering results to have incomes from one link and from two of their accounts:\nhttps://sandbox.belvo.com/api/incomes/?link=link-id&account__in=account-id1,account-id2\n```\n```javascript Node\n// Filtering results to have incomes from one link:\nclient.incomes.list({\n  filters: {\n    link: \"link-id\"\n  }\n})\n\n// Filtering results to have incomes from one link and from two of their accounts:\n\nclient.incomes.list({\n  filters: {\n    link: \"link-id\",\n    account__in: \"account-id1,account-id2\"\n  }\n})\n```\n```python Python\n# Filtering results to have incomes from one link:\nclient.Incomes.list(link=\"link-id\")\n\n# Filtering results to have incomes from one link and from two of their accounts:\nclient.Incomes.list(link=\"link-id\", account__in=\"account-id1,account-id2\")\n```\n```ruby Ruby\n# Filtering results to have incomes from one link:\nclient.incomes.list(params: {\n  link: \"link-id\"\n})\n\n# Filtering results to have incomes from one link and from two of their accounts:\nclient.incomes.list(params: {\n  link: \"link-id\",\n  account__in: \"account-id1,account-id2\"\n})\n```"
      },
      {
        "name": "Recurring Expenses",
        "description": "Belvo's Recurring Expenses API allows you to identify a user's regular payments for subscription services, such as Netflix or gym memberships, as well as utility payments, such as electricity or phone bills. We return information for up to 365 days.\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n    <strong>Info: </strong> The recurring expenses resource is <b>only</b> available for Checking and Savings accounts associated with banking links.\n </div>\n\n ### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field     | Available Filters |\n| --------- | ----------------- |\n| `account` | `=`, `in`         |\n| `id`      | `=`, `in`         |\n| `link`    | `=`, `in`         |\n\n```curl cURL\n# Filtering results so that you get the recurring expenses of one account:\nhttps://sandbox.belvo.com/api/recurring-expenses/?account=89c91f42-df34-4c5d-a4f1-6e1e40438af4\n\n```\n```javascript Node\n// Filtering results so that you get the recurring expenses of one account:\nclient. recurringExpenses.list({\n  filters: {\n    account: \"89c91f42-df34-4c5d-a4f1-6e1e40438af4\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the recurring expenses of one account:\nclient. RecurringExpenses.list(account=\"89c91f42-df34-4c5d-a4f1-6e1e40438af4\")\n\n```\n```ruby Ruby\n# Filtering results so that you get the recurring expenses of one account:\nclient. recurring_expenses.list(params: {\n  account: \"89c91f42-df34-4c5d-a4f1-6e1e40438af4\"\n})\n```"
      },
      {
        "name": "Risk Insights",
        "description": "Belvo's Risk Insights endpoint exposes a set of features that can be used to improve your company's credit risk and opportunity decisions. This set of features can be used as building blocks to create or iterate on your credit score using transactional banking data to improve the predictive power of your models. You can use these components as you require and make the most sense for your specific use case. \n\nWe take up to 90 days of transactional data from the user's checking, savings, loans, and credit card accounts to calculate the risk insights.\n\nIf you need to know the currency of the account, do a GET Details to the Accounts endpoint (using the account ID you receive from in the accounts array of the response).\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field  | Available Filters |\n| ------ | ----------------- |\n| `id`   | `=`, `in`         |\n| `link` | `=`, `in`         |\n\n```curl cURL\n# Filtering results so that you get the risk insights of one link:\nhttps://sandbox.belvo.com/api/risk-insights/?link=89c91f42-df34-4c5d-a4f1-6e1e40438af4\n\n```\n```javascript Node\n// Filtering results so that you get the risk insights of one link:\nclient. riskInsights.list({\n  filters: {\n    account: \"89c91f42-df34-4c5d-a4f1-6e1e40438af4\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the risk insights of one link:\nclient. RiskInsights.list(link=\"89c91f42-df34-4c5d-a4f1-6e1e40438af4\")\n\n```\n```ruby Ruby\n# Filtering results so that you get the risk insights of one link:\nclient. risk_insights.list(params: {\n  link: \"89c91f42-df34-4c5d-a4f1-6e1e40438af4\"\n})\n```"
      },
      {
        "name": "EYOD API introduction",
        "description": "Our Enrich Your Own Data (EYOD) product provides you with enriched transaction information and easy-to-use insights about your users incomesfrom various sources, including open finance data or your own dataset.\n\n\n\n| API Endpoint                 | Description                                                                                                                           |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| `api/categorization/`              | Enrich transactions with category, subcategory, and merchant information. |\n| `api/enrich/incomes`              | Enrich transaction data from any source and gather insights on your user's income sources and asses their future income potential. |"
      },
      {
        "name": "Categorization",
        "description": "Our Categorization resource provides you with categorized information for a transaction. You’ll need to send a POST Categorize Transactions request with raw transactional information (such as amount, description, and holder information) to which Belvo:\n- assigns a standardized category to each transaction\n- provides additional information about the merchant involved in the transaction (name, logo, website URL)"
      },
      {
        "name": "Income Verification",
        "description": "Verify your users' income and forecast their future income potential with Belvo. Your only need to send trough a your raw transaction data and Belvo returns:\n\n- insights into your user’s multiple sources of income\n- a stability score that reflects the consistency and regularity of your user’s income history\n- a confidence level for future income"
      },
      {
        "name": "Fiscal API introduction",
        "description": "Use our **Fiscal API** product to access invoices, tax compliance statuses, tax returns, tax retentions, and tax statuses from the fiscal authority in a given country.\n\n<img src=\"https://files.readme.io/97c76a8-Fiscal_endpoints_horizontal.png\" alt=\"fiscal-endpoints\" width=\"750\">\n\n| API Endpoint                 | Description                                                                                                                           |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n| `api/invoices/`              | Get all the information about the invoices sent and received by a person or a business that have been certified by the tax authority. |\n| `api/tax-compliance-status/` | Get information about whether a person or business is complying to their tax obligations.                                             |\n| `api/tax-compliance-status/` | Get tax declaration information for your users. At the moment only available for 🇨🇴 DIAN Colombia.                                  |\n| `api/tax-returns/`           | Get all the information about the tax returns sent every year to the tax authority by a person or a business.                         |\n| `api/tax-retentions/`        | Get information about tax retention invoices sent and received by a business or a person.                                             |\n| `api/tax-status/`            | Get all the information about the tax situation of a person or a business.                                                            |\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n<strong>Note: </strong> You can only access this information with <b>fiscal</b> links.\n</div>"
      },
      {
        "name": "Invoices",
        "description": "An **invoice** is the representation of an electronic invoice, that can be received or sent, by a business or an individual and has been uploaded to the fiscal institution's website. Multiple INFLOW (invoice received) and OUTFLOW (invoice sent) invoices can be retrieved inside each link coming from a fiscal institution.\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field                    | Available Filters                      |\n| ------------------------ | -------------------------------------- |\n| `created_at `            | `gt`, `gte`, `lt`, `lte`, `range`      |\n| `id`                     | `=`, `in`                              |\n| `invoice_date`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `invoice_identification` | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `link`                   | `=`, `in`                              |\n| `status`                 | `=`, `in`                              |\n| `total_amount`           | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `type`                   | `=`, `in`                              |\n\n```curl cURL\n# Filtering results so that you get Tax Returns from one link:\nhttps://sandbox.belvo.com/api/invoices/?link=link-id\n\n# Filtering results so that you get Tax Returns from two links \n# and are of type normal and their status is vigente:\nhttps://sandbox.belvo.com/api/invoices/?link__in=link-id1,link-id2&informacion_general__tipo_declaracion=Normal&status=vigente\n```\n```javascript Node\n//  Filtering results so that you get the Tax Returns from one link:\nclient.invoices.list({\n  filters: {\n    link: \"link-id\"\n  }\n})\n\n//  Filtering results so that you get the Tax Returns from two links\n// and are of type normal and their status is vigente:\nclient.invoices.list({\n  filters: {\n    link__in: \"link-id-1, link-id-2\",\n    informacion_general__tipo_declaracion: \"Normal\",\n    status: \"vigente\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the Tax Return from one link:\nclient.invoices.list(link=\"link-id\")\n\n# Filtering results so that you get the Tax Returns from two links\n# # and are of type normal and their status is vigente:\nclient.invoices.list(link__in=\"link-id1,link-id2\", informacion_general__tipo_declaracion=\"Normal\", status=\"vigente\")\n```\n```ruby Ruby\n# Filtering results so that you get the Tax Return from one link:\nclient.invoices.list(params: {\n  link: \"link-id\"\n})\n\n\n# Filtering results so that you get the Tax Returns from two links\n# and are of type normal and their status is vigente:\nclient.invoices.list(params: {\n  link__in: \"link-id1, link-id1\",\n  informacion_general__tipo_declaracion: \"Normal\",\n  status: \"vigente\"\n})\n```"
      },
      {
        "name": "Tax declarations",
        "description": "Our Tax declarations endpoint lets you retrieve the electronic representation of the tax declaration document emitted by a country's tax authority.\n\nAt the moment, the Tax Declaration resource is available for:\n\n- 🇨🇴 Colombia (DIAN)"
      },
      {
        "name": "Tax returns",
        "description": "A **tax return** is the representation of the tax return document sent every year by a person or a business to the tax authority in the country.\n\nThe tax return data structure will be different depending on if it is related to a person or a business (you will find examples for both in the endpoints below).\n\n### **🔦 Filterable fields**\n\n| Field                                   | Available Filters                      |\n| --------------------------------------- | -------------------------------------- |\n| `created_at `                           | `gt`, `gte`, `lt`, `lte`, `range`      |\n| `id`                                    | `=`, `in`                              |\n| `ejercicio`                             | `=`, `gt`, `gte`, `lt`, `lte`, `range` |\n| `tipo_declaracion`                      | `=`, `in`                              |\n| `link`                                  | `=`, `in`                              |\n\n```curl cURL\n# Filtering results so that you get Tax Returns from one link:\nhttps://api.belvo.com/api/tax-returns/?link=link-id\n\n# Filtering results so that you get Tax Returns from two links and are of type normal:\nhttps://api.belvo.com/api/tax-returns/?link__in=link-id1,link-id2&tipo_declaracion=Normal,\n```\n```javascript Node\n//  Filtering results so that you get the Tax Returns from one link:\nclient.taxReturns.list({\n  filters: {\n    link: \"link-id\"\n  }\n})\n\n//  Filtering results so that you get the Tax Returns from two links and are of type normal:\nclient.taxReturns.list({\n  filters: {\n    link__in: \"link-id-1, link-id-2\",\n    tipo_declaracion: \"Normal\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the Tax Return from one link:\nclient.TaxReturns.list(link=\"link-id\")\n\n# Filtering results so that you get the Tax Returns from two links and are of type normal:\nclient.TaxReturns.list(link__in=\"link-id1,link-id2\", tipo_declaracion: \"Normal\")\n```\n```ruby Ruby\n# Filtering results so that you get the Tax Return from one link:\nclient.tax_returns.list(params: {\n  link: \"link-id\"\n})\n\n\n# Filtering results so that you get the Tax Returns from two links and are of type normal:\nclient.tax_returns.list(params: {\n  link__in: \"link-id1, link-id1\",\n  tipo_declaracion: \"Normal\"\n})\n```"
      },
      {
        "name": "Tax status",
        "description": "Our **Tax status** endpoint lets you retrieve information about a person's or business's tax situation, according to the country's tax authority. \n\n- For SAT (Mexico), this information is extracted from the _Constancia de situación fiscal_ document.\n- For DIAN (Colombia), this information is extracted from the _Registro Único Tributario_ document.\n\n\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field         | Available Filters                 |\n| ------------- | --------------------------------- |\n| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |\n| `id`          | `=`, `in`                         |\n| `link`        | `=`, `in`                         |\n\n```curl cURL\n# Filtering results so that you get institutions from just one link:\nhttps://api.belvo.com/api/institutions/?link=link\n```\n```javascript Node\n//  Filtering results so that you get institutions from just one link:\nclient.taxstatus.list({\n  filters: {\n    link: \"link_id\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get institutions from just one link:\nclient.TaxStatus.list(link=\"link\")\n```\n```ruby Ruby\n# Filtering results so that you get institutions from just one link:\nclient.tax_status.list(params: {\n  link: \"link\"\n})\n```"
      },
      {
        "name": "Tax retentions",
        "description": "A **tax retention** is the amount of money that the payer must deduct from the total amount of a purchase invoice, according to the fiscal institution’s regulations.\n\nWith Belvo’s Tax Retentions resource, you can quickly and easily consult information regarding a user’s tax retentions over a given period or for a specific invoice. This is particularly useful when you want to aid your user in their tax returns as for each invoice you receive the:\n\n- invoice amount\n- amount that is exempt from taxation\n- total amount that is taxed\n- breakdown of all the taxes applied to the invoice\n\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field         | Available Filters                 |\n| ------------- | --------------------------------- |\n| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |\n| `link`        | `=`, `in`                         |\n\n```curl cURL\n# Filtering results so that you get Tax Retentions from one link:\nhttps://sandbox.belvo.com/api/tax-retentions/?link=link-id\n\n# Filtering results so that you get Tax Retentions from two links \nhttps://api.belvo.com/api/tax-retentions/?link=link-id1,link-id2\n```\n```javascript Node\n//  Filtering results so that you get the Tax Retentions from one link:\nclient.taxRetentions.list({\n  filters: {\n    link: \"link-id\"\n  }\n})\n\n//  Filtering results so that you get the Tax Retentions from two links:\nclient.taxRetentions.list({\n  filters: {\n    link__in: \"link-id-1, link-id-2\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the Tax Retentions from one link:\nclient.TaxRetentions.list(link=\"link-id\")\n\n# Filtering results so that you get the Tax Retentions from two links:\nclient.TaxRetentions.list(link__in=\"link-id1,link-id2\")\n```\n```ruby Ruby\n# Filtering results so that you get the Tax Retentions from one link:\nclient.tax_retentions.list(params: {\n  link: \"link-id\"\n})\n\n\n# Filtering results so that you get the Tax Retentions from two link:\nclient.tax_retentions.list(params: {\n  link__in: \"link-id1, link-id1\"\n})\n```"
      },
      {
        "name": "Tax compliance status",
        "description": "A **tax compliance status** indicates about whether a person or business is complying with their tax obligations at the moment of the request. The information is extracted from SAT's _Opinion de cumplimiento de Obligaciones Fiscales_ document.\n\n### **🔦 Filterable fields**\n\nPlease see the table below for an alphabetized list of fields that you can filter your responses by. For more information on how to use filters, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) article.\n\n| Field         | Available Filters                 |\n| ------------- | --------------------------------- |\n| `created_at ` | `gt`, `gte`, `lt`, `lte`, `range` |\n| `id`          | `=`, `in`                         |\n| `link`        | `=`, `in`                         |\n\n```curl cURL\n# Filtering results so that you get Tax Compliance Status from one link:\nhttps://api.belvo.com/api/tax-compliance-status/?link=link-id\n\n# Filtering results so that you get Tax Compliance Status from one link:\nhttps://api.belvo.com/api/tax-compliance-status/?link=link-id1,link-id2\n```\n```javascript Node\n//  Filtering results so that you get the Tax Compliance Status from one link:\nclient.taxComplianceStatus.list({\n  filters: {\n    link: \"link-id\"\n  }\n})\n\n//  Filtering results so that you get the Tax Compliance Status from two links:\nclient.taxComplianceStatus.list({\n  filters: {\n    link__in: \"link-id-1, link-id-2\"\n  }\n})\n\n```\n```python Python\n# Filtering results so that you get the Tax Compliance Status from one link:\nclient.TaxComplianceStatus.list(link=\"link-id\")\n\n# Filtering results so that you get the Tax Compliance Status from two links:\nclient.TaxComplianceStatus.list(link__in=\"link-id1,link-id2\")\n```\n```ruby Ruby\n# Filtering results so that you get the Tax Compliance Status from one link:\nclient.tax_compliance_status.list(params: {\n  link: \"link-id\"\n})\n\n\n# Filtering results so that you get the Tax Compliance Status from two link:\nclient.tax_compliance_status.list(params: {\n  link__in: \"link-id1, link-id1\"\n})\n```"
      },
      {
        "name": "Payment Initiation introduction",
        "description": "# Introduction\n\nThis is Belvo's Payment Initiation API - the easiest way to make payments in Latin America. Our solutions are designed to minimize the friction between your app and your customers, making payments effortless and secure. You can make payments in:\n\n# 🇧🇷 Brazil (OFPI)\n\nBelvo's Open Finance Payment Initiation (OFPI) in Brazil allows you to collect payments from your customers while optimizing their payment experience.\n\n- Check out our [OFPI guides](https://developers.belvo.com/docs/ofpi-prerequisites) and start collecting payments in Brazil.\n# 🇨🇴 Colombia (PSE)\n\nBelvo's Payment Initiation API makes use of Colombia's Pagos Seguros en Línea (PSE) system to make payments securely while also building upon PSE to optimize your user's experience.\n\n- Check out our [PSE guides](https://developers.belvo.com/docs/pse-prerequisites) and start collecting payments in Colombia.\n"
      },
      {
        "name": "Secret Keys",
        "description": "# Get your Payments API keys\n\nIn order to use Belvo's Payments API, you need to first request your secret keys (see the code example below):\n\n\n```curl\nPOST https://api.belvo.com/payments/secret-keys/\nAuthorization: Basic username:password\n```\n\nWhere:\n\n- `username` is the username you use to log in to the Belvo dashboard (in plain text).\n- `password` is the password you use to log in to the Belvo dashboard (in plain text).\n\n\nIf you have entered your credentials correctly, you will receive a **201 Response** with your secret keys:\n\n\n```json\n{\n    \"id\": \"Your Belvo secretID\",\n    \"password\": \"Your Belvo secretPassword\"\n}\n\n```\n"
      },
      {
        "name": "Payment Webhooks",
        "description": "Registering a webhook will let you know about any relevant updates that occur during the payment process. To set up a webhook, you need to make a [POST Register a new payment webhook](https://api.belvo.com/payments/webhooks/) request, providing some key details such as the name of the webhook and a URL where webhook events should be sent to.\n\n"
      },
      {
        "name": "Payment Institutions",
        "description": "A **payment institution** is an entity that Belvo can access information from. You can see a complete list of institutions available for payments by making a List request to this endpoint.\n"
      },
      {
        "name": "Customers",
        "description": "A **customer** is the payer that's going to push funds into your bank account. You need to create a customer in order to receive inflow payments to your organization's bank account.\n"
      },
      {
        "name": "Bank Accounts",
        "description": "To receive inflow payments to your organization's bank account, you must register the bank accounts (individual and business) using Belvo's Payments API.\n\n- **Individual** bank accounts must be created for each payer (your customer).\n- **Business** bank accounts need to be created for the beneficiary of the payment (your organization).\n"
      },
      {
        "name": "Payment Links",
        "description": "This is a Payment link.\n"
      },
      {
        "name": "Payment Intents",
        "description": "\nA **payment intent** is a single point of access to create payments using any payment method offered by Belvo.\n\nA payment intent captures all payment information (such as the amount to be charged, the description of the payment, the provider, and so on) and guides your customers through the payment flow.\n"
      },
      {
        "name": "Payment Transactions",
        "description": "Each time you receive an inflow payment from your customer, a **transaction** is created in the Belvo database.\n\nYou can use the Payment Transactions resource in order to get useful information about a transaction as well as the specific charge associated with it.\n"
      }
    ],
    "paths": {
      "/api/links/": {
        "get": {
          "tags": [
            "Links"
          ],
          "operationId": "ListLinks",
          "summary": "List all links",
          "description": "Get a paginated list of all the existing links in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "access_mode",
              "in": "query",
              "description": "Return links only with this access mode. Can be either `single` or `recurrent`.",
              "schema": {
                "type": "string",
                "example": "single"
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return links that were last updated in Belvo's database on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-01"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return links that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return links that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return links that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return links that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return links that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "created_by__not_in",
              "in": "query",
              "description": "Return links that were not created by these Belvo users.",
              "schema": {
                "type": "string",
                "example": "578947e2-3c9a-4401-bbad-59b2f2d2b91b,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e"
              }
            },
            {
              "name": "external_id",
              "in": "query",
              "description": "Return links with this external ID.",
              "schema": {
                "type": "string",
                "example": "InternalUser4000"
              }
            },
            {
              "name": "external_id__in",
              "in": "query",
              "description": "Return links with these external IDs.",
              "schema": {
                "type": "string",
                "example": "InternalUser4000,InternalUser4001"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information only for this `link.id`.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information only for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e"
              }
            },
            {
              "name": "institution",
              "in": "query",
              "description": "Return links created for this institution (use the Belvo-designated name, such as `erebor_mx_retail`).",
              "schema": {
                "type": "string",
                "example": "erebor_mx_retail"
              }
            },
            {
              "name": "institution__in",
              "in": "query",
              "description": "Return links created for these institutions (use the Belvo-designated name, such as `erebor_mx_retail` and `gringotts_co_retail`).",
              "schema": {
                "type": "string",
                "example": "erebor_mx_retail,gringotts_co_retail"
              }
            },
            {
              "name": "institution_user_id",
              "in": "query",
              "description": "Return links with this specific institution user ID.",
              "schema": {
                "type": "string",
                "example": "ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0="
              }
            },
            {
              "name": "institution_user_id__in",
              "in": "query",
              "description": "Return links with these institution user IDs.",
              "schema": {
                "type": "string",
                "example": "ezFoxjPDr7YnASnOaft5F3zt7D0kurgDNlLtZFjxUo0=,YwuTM0uEEh1BbVgDZBcNpa_-Tm3l2q8ZkZNrlhp-pNA="
              }
            },
            {
              "name": "refresh_rate",
              "in": "query",
              "description": "Return links with this refresh rate. Choose between `6h`, `12h`, `24h`, `7d`, or `30d`.",
              "schema": {
                "type": "string",
                "example": "24h"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Return links with this status. Choose between `valid`, `invalid`, `unconfirmed`, or `token_required`.",
              "schema": {
                "type": "string",
                "example": "invalid"
              }
            },
            {
              "name": "status__in",
              "in": "query",
              "description": "Return links with these statuses. Choose between `valid`, `invalid`, `unconfirmed`, or `token_required`.",
              "schema": {
                "type": "string",
                "example": "invalid,unconfirmed"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaginatedResponseLink"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/links/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List links\nfor link in client.Links.list():\n    pprint(link)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.links.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.links.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Links"
          ],
          "operationId": "RegisterLink",
          "summary": "Register a new link",
          "description": "Register a new link with your Belvo account.\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n<strong>Note: </strong> We recommend using our <a href=\"https://developers.belvo.com/docs/connect-widget\" target=\"_blank\">Connect Widget</a> to handle link creation and link status updates.\n</div>\n",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/links/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"institution\": \"\",\n    \"username\": \"\",\n    \"password\": \"\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Register a link\nlink = client.Links.create(\n    institution=\"erebor_mx_retail\",\n    username=\"johndoe\",\n    password=\"supersecret\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.links.register(\n  institution: 'erebor_mx_retail',\n  username: 'johndoe',\n  password: 'supersecret'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.links.register('erebor_mx_retail', 'johndoe', 'supersecret')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Links"
          ],
          "operationId": "PatchLinks",
          "summary": "Complete a links request",
          "description": "Used to resume a Link register session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBodyWithoutSaveData"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PATCH \\\n  https://sandbox.belvo.com/api/links/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"session\": \"\",\n      \"token\": \"\",\n      \"link\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume a link\nlink = client.Links.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.links.resume(\n  session_id: 'your-session-id',\n  token: 'otp-token',\n  link: 'link-id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.links.resume('yourSessionId', 'yourOTPToken', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/links/{id}/": {
        "get": {
          "tags": [
            "Links"
          ],
          "operationId": "DetailLink",
          "summary": "Get a link's details",
          "description": "Get the details of a specific link.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              },
              "description": "The `link.id` you want to get detailed information about."
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/links/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get a link\nlink = client.Links.get(id=\"link_id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.links.detail id: 'link-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.links.detail('linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Links"
          ],
          "operationId": "ChangeLinkAccessMode",
          "summary": "Change a link's access mode",
          "description": "Change a link's access mode from `single` to `recurrent` or from `recurrent` to single.\nℹ️ **Note**: When you change a link from `single`` to `recurrent`, they will only be updated the next day at the scheduled interval.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "e4bb1afb-4a4f-4dd6-8be0-e615d233185b"
              },
              "description": "The `link.id` you want to change the `access_mode` for."
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangeAccessMode"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/InvalidAccessMode"
                        },
                        {
                          "$ref": "#/components/schemas/TooManySessionsError"
                        },
                        {
                          "$ref": "#/components/schemas/LoginError"
                        },
                        {
                          "$ref": "#/components/schemas/SessionExpiredError"
                        },
                        {
                          "$ref": "#/components/schemas/ValidationError"
                        },
                        {
                          "$ref": "#/components/schemas/InstitutionDownError"
                        },
                        {
                          "$ref": "#/components/schemas/InstitutionUnavailableError"
                        },
                        {
                          "$ref": "#/components/schemas/InstitutionInactiveError"
                        },
                        {
                          "$ref": "#/components/schemas/UnsupportedOperationError"
                        },
                        {
                          "$ref": "#/components/schemas/InvalidLinkError"
                        },
                        {
                          "$ref": "#/components/schemas/UnconfirmedLinkError"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Links"
          ],
          "operationId": "UpdateLink",
          "summary": "Update a link's credentials",
          "description": "Update the credentials of a specific link. If the successfully updated link is a recurrent one, we automatically trigger an update of the link. If we find fresh data, you'll [receive historical update](https://developers.belvo.com/docs/webhooks) webhooks.\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #4CAF50;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\"> <strong>Note: </strong> We recommend using our <a href=\"https://developers.belvo.com/docs/connect-widget\" target=\"_blank\">Connect Widget</a> to handle updating <code>invalid</code> or <code>token_required</code> links. </div>\n",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              },
              "description": "The `link.id` you want to update."
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinksPutRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PUT https://sandbox.belvo.com/api/links/{id} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"password\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Update a link\nlink = client.Links.put(link=\"link_id\", password=\"password\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.links.update(link: 'link-id', password: 'new-password')\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.links.update('linkID', 'newSuperSecret')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Links"
          ],
          "operationId": "DestroyLink",
          "summary": "Delete a link",
          "description": "Delete a specific link and all associated accounts, transactions, and owners from your Belvo account.\n# Deleting links in batches\nTo delete links in bulk, we recommend looping through the list of links you want to delete and making the delete request.\n\n  > 🚧 **Rate limiting and IP blocking**\n  > \n  > An important technical note for performing operations in batches is to take into consideration our rate-limiting: up to 80 requests every 30 seconds. If you exceed this limit, you run the risk of Belvo blocking your IP from making further requests.\n  > \n  > For more information, or if your IP address has been blocked, please contact our [support team](https://support.belvo.com/hc/en-us/requests/new).",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              },
              "description": "The `link.id` that you want to delete."
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/links/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\nclient.Links.delete(\"link_id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.links.delete id: 'link-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.links.delete('linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/accounts/": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "operationId": "ListAccounts",
          "summary": "List all accounts",
          "description": "Get a paginated list of all existing accounts in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "balance__available",
              "in": "query",
              "description": "Return accounts that have a `balance.available` matching exactly this value.",
              "schema": {
                "type": "string",
                "example": "4000.00"
              }
            },
            {
              "name": "balance__available__lt",
              "in": "query",
              "description": "Return accounts that have a `balance.available` less than this value.",
              "schema": {
                "type": "string",
                "example": "6000.00"
              }
            },
            {
              "name": "balance__available__lte",
              "in": "query",
              "description": "Return accounts that have a `balance.available` less than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "5999.00"
              }
            },
            {
              "name": "balance__available__gt",
              "in": "query",
              "description": "Return accounts that have a `balance.available` greater than this value.",
              "schema": {
                "type": "string",
                "example": "2000.00"
              }
            },
            {
              "name": "balance__available__gte",
              "in": "query",
              "description": "Return accounts that have a `balance.available` greater than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "1999.00"
              }
            },
            {
              "name": "balance__available__range",
              "in": "query",
              "description": "Return accounts that have a `balance.available` within a range of two values.",
              "schema": {
                "type": "string",
                "example": "3000.00,4350.00"
              }
            },
            {
              "name": "balance__current",
              "in": "query",
              "description": "Return accounts that have a `balance.current` matching exactly this value.",
              "schema": {
                "type": "string",
                "example": "4000.00"
              }
            },
            {
              "name": "balance__current__lt",
              "in": "query",
              "description": "Return accounts that have a `balance.current` less than this value.",
              "schema": {
                "type": "string",
                "example": "6000.00"
              }
            },
            {
              "name": "balance__current__lte",
              "in": "query",
              "description": "Return accounts that have a `balance.available` less than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "5999.00"
              }
            },
            {
              "name": "balance__current__gt",
              "in": "query",
              "description": "Return accounts that have a `balance.current` greater than this value.",
              "schema": {
                "type": "string",
                "example": "2000.00"
              }
            },
            {
              "name": "balance__current__gte",
              "in": "query",
              "description": "Return accounts that have a `balance.available` greater than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "1999.00"
              }
            },
            {
              "name": "balance__current__range",
              "in": "query",
              "description": "Return accounts that have a `balance.available` within a range of two values.",
              "schema": {
                "type": "string",
                "example": "3000.00,4350.00"
              }
            },
            {
              "name": "category",
              "in": "query",
              "description": "Return accounts only for the given category (for example, `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).",
              "schema": {
                "type": "string",
                "example": "CREDIT_ACCOUNT"
              }
            },
            {
              "name": "category__in",
              "in": "query",
              "description": "Return accounts only for the given categories (for example, `CHECKING_ACCOUNT` and `SAVINGS_ACCOUNT`).",
              "schema": {
                "type": "string",
                "example": "CHECKING_ACCOUNT,SAVINGS_ACCOUNT"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return accounts that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return accounts that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return accounts that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return accounts that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return accounts that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "currency",
              "in": "query",
              "description": "Return accounts that hold finances in only this three-letter currency code.",
              "schema": {
                "type": "string",
                "example": "COP"
              }
            },
            {
              "name": "currency__in",
              "in": "query",
              "description": "Return accounts that hold finances in one of these three-letter currency codes.",
              "schema": {
                "type": "string",
                "example": "COP,MXN"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information only for this `account.id`.",
              "schema": {
                "type": "string",
                "example": "24ccab1d-3a86-4136-a6eb-e04bf52b356f"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information for these `account.id`s.",
              "schema": {
                "type": "string",
                "example": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509"
              }
            },
            {
              "name": "institution",
              "in": "query",
              "description": "Return accounts only for this institution (use the Belvo-designated name, such as `erebor_mx_retail`).",
              "schema": {
                "type": "string",
                "example": "erebor_mx_retail"
              }
            },
            {
              "name": "institution__in",
              "in": "query",
              "description": "Return accounts only for these institutions (use the Belvo-designated names, such as `erebor_mx_retail` and `gringotts_mx_retail`).",
              "schema": {
                "type": "string",
                "example": "erebor_mx_retail,gringotts_mx_retail"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return accounts only for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            },
            {
              "name": "name",
              "in": "query",
              "description": "Return accounts with exactly this internal (specified by the institution) name.",
              "schema": {
                "type": "string",
                "example": "Cuenta Perfiles- M.N. - MXN-666"
              }
            },
            {
              "name": "name__icontains",
              "in": "query",
              "description": "Return accounts partially matching this internal (specified by the institution) name.",
              "schema": {
                "type": "string",
                "example": "Perfiles"
              }
            },
            {
              "name": "number",
              "in": "query",
              "description": "Return information only for this account number (as specified by the institution).",
              "schema": {
                "type": "string",
                "example": "4057068115181"
              }
            },
            {
              "name": "number__in",
              "in": "query",
              "description": "Return information for these account numbers (as specified by the institution).",
              "schema": {
                "type": "string",
                "example": "4057068115181,7809346821648"
              }
            },
            {
              "name": "public_identification_name",
              "in": "query",
              "description": "Return information only for this type of account ID. For example, CLABE accounts.",
              "schema": {
                "type": "string",
                "example": "CLABE"
              }
            },
            {
              "name": "public_identification_value",
              "in": "query",
              "description": "Return information only for this account ID. For example, the account number for a CLABE account.",
              "schema": {
                "type": "string",
                "example": "150194683119900273"
              }
            },
            {
              "name": "type",
              "in": "query",
              "description": "Return information only for accounts matching this account type, as designated by the institution.",
              "schema": {
                "type": "string",
                "example": "Cuentas de efectivo"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/accounts/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List Accounts\nfor account in client.Accounts.list():\n    pprint(account)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.accounts.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.accounts.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Accounts"
          ],
          "operationId": "RetrieveAccounts",
          "summary": "Retrieve accounts for a link",
          "description": "Retrieve accounts from an existing link.\n\n  > 🚧 Scheduled field deprecation\n  > \n  > Please note that we will soon be deprecating the following fields in our `loan_data` object:\n  > - `cutting_date`\n  > - `cutting_day`\n  > - `credit_limit`: replaced by the `principal` field.\n  > - `interest_rate`: replaced by the `interest_rates` object.\n  > - `last_payment_date`\n  > - `last_period_balance`: replaced by the `outstanding_balance ` field.\n  > - `limit_day`\n  > - `limit_date`: replaced by the `payment_day ` field.\n  > - `no_interest_payment`\n  > - `payment_due_day`",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "examples": {
                    "AccountsBankingChecking": {
                      "$ref": "#/components/examples/AccountsBankingChecking"
                    },
                    "AccountsBankingCreditCard": {
                      "$ref": "#/components/examples/AccountsBankingCreditCard"
                    },
                    "AcccountsBankingLoan": {
                      "$ref": "#/components/examples/AccountsBankingLoan"
                    },
                    "AccountsBankingPension": {
                      "$ref": "#/components/examples/AccountsBankingPension"
                    },
                    "AccountsBankingSavings": {
                      "$ref": "#/components/examples/AccountsBankingSavings"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "examples": {
                    "AccountsBankingChecking": {
                      "$ref": "#/components/examples/AccountsBankingChecking"
                    },
                    "AccountsBankingCreditCard": {
                      "$ref": "#/components/examples/AccountsBankingCreditCard"
                    },
                    "AcccountsBankingLoan": {
                      "$ref": "#/components/examples/AccountsBankingLoan"
                    },
                    "AccountsBankingPension": {
                      "$ref": "#/components/examples/AccountsBankingPension"
                    },
                    "AccountsBankingSavings": {
                      "$ref": "#/components/examples/AccountsBankingSavings"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/accounts/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"link_id\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve accounts\naccounts = client.Accounts.create(\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.accounts.retrieve link: 'link-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.accounts.retrieve('link-id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Accounts"
          ],
          "operationId": "PatchAccounts",
          "summary": "Complete an accounts request",
          "description": "Used to resume an Account retrieve session that was paused because an MFA token was required by the institution.\n\n  > 🚧 Scheduled field deprecation\n  > \n  > Please note that we will soon be deprecating the following fields in our `loan_data` object:\n  > - `cutting_date`\n  > - `cutting_day`\n  > - `credit_limit`: replaced by the `principal` field.\n  > - `interest_rate`: replaced by the `interest_rates` object.\n  > - `last_payment_date`\n  > - `last_period_balance`: replaced by the `outstanding_balance ` field.\n  > - `limit_day`\n  > - `limit_date`: replaced by the `payment_day ` field.\n  > - `no_interest_payment`\n  > - `payment_due_day`",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "examples": {
                    "AccountsBankingChecking": {
                      "$ref": "#/components/examples/AccountsBankingChecking"
                    },
                    "AccountsBankingCreditCard": {
                      "$ref": "#/components/examples/AccountsBankingCreditCard"
                    },
                    "AcccountsBankingLoan": {
                      "$ref": "#/components/examples/AccountsBankingLoan"
                    },
                    "AccountsBankingPension": {
                      "$ref": "#/components/examples/AccountsBankingPension"
                    },
                    "AccountsBankingSavings": {
                      "$ref": "#/components/examples/AccountsBankingSavings"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Account"
                    }
                  },
                  "examples": {
                    "AccountsBankingChecking": {
                      "$ref": "#/components/examples/AccountsBankingChecking"
                    },
                    "AccountsBankingCreditCard": {
                      "$ref": "#/components/examples/AccountsBankingCreditCard"
                    },
                    "AcccountsBankingLoan": {
                      "$ref": "#/components/examples/AccountsBankingLoan"
                    },
                    "AccountsBankingPension": {
                      "$ref": "#/components/examples/AccountsBankingPension"
                    },
                    "AccountsBankingSavings": {
                      "$ref": "#/components/examples/AccountsBankingSavings"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PATCH \\\n  https://sandbox.belvo.com/api/accounts/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"session\": \"\",\n      \"token\": \"\",\n      \"link\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume accounts\naccounts = client.Accounts.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.accounts.resume(\n  session: 'session_id',\n  token: 'token',\n  link: 'link_id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.accounts.resume('sessionId', 'token', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/accounts/{id}/": {
        "get": {
          "tags": [
            "Accounts"
          ],
          "operationId": "DetailAccount",
          "summary": "Get an account's details",
          "description": "Get the details of a specific account.\n\n  > 🚧 Scheduled field deprecation\n  >\n  > Please note that we will soon be deprecating the following fields in our `loan_data` object:\n  > - `cutting_date`\n  > - `cutting_day`\n  > - `credit_limit`: replaced by the `principal` field.\n  > - `interest_rate`: replaced by the `interest_rates` object.\n  > - `last_payment_date`\n  > - `last_period_balance`: replaced by the `outstanding_balance ` field.\n  > - `limit_day`\n  > - `limit_date`: replaced by the `payment_day ` field.\n  > - `no_interest_payment`\n  > - `payment_due_day`",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `account.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Account"
                  },
                  "examples": {
                    "AccountsBankingChecking": {
                      "$ref": "#/components/examples/AccountsBankingCheckingDetail"
                    },
                    "AccountsBankingCreditCard": {
                      "$ref": "#/components/examples/AccountsBankingCreditCardDetail"
                    },
                    "AcccountsBankingLoan": {
                      "$ref": "#/components/examples/AccountsBankingLoanDetail"
                    },
                    "AccountsBankingPension": {
                      "$ref": "#/components/examples/AccountsBankingPensionDetail"
                    },
                    "AccountsBankingSavings": {
                      "$ref": "#/components/examples/AccountsBankingSavingsDetail"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/accounts/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get an account\naccount = client.Accounts.get(id=\"account-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.accounts.detail id: 'account-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.accounts.detail('accountId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Accounts"
          ],
          "operationId": "DestroyAccount",
          "summary": "Delete an account",
          "description": "Delete a specific account and all associated transactions, as well as owners, from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `account.id` you want to delete",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/accounts/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete an account\nclient.Accounts.delete(\"account-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.accounts.delete id: 'account-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.accounts.delete('accountId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/transactions/": {
        "get": {
          "tags": [
            "Transactions"
          ],
          "operationId": "ListTransactions",
          "summary": "List all transactions",
          "description": "Get a paginated list of all existing transactions in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page.\n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "required": true,
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `account.id` filter as well in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "account",
              "in": "query",
              "description": "The `account.id` you want to filter by.\n\nℹ️ We highly recommend adding the `account.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "d979df3a-5d0f-4cc9-9bd4-b75c28b45963"
              }
            },
            {
              "name": "account__balance__available",
              "in": "query",
              "description": "Return transactions that have a `account.balance.available` matching exactly this value.",
              "schema": {
                "type": "string",
                "example": "4000.00"
              }
            },
            {
              "name": "account__balance__available__lt",
              "in": "query",
              "description": "Return transactions that have a `account.balance.available` less than this value.",
              "schema": {
                "type": "string",
                "example": "6000.00"
              }
            },
            {
              "name": "account__balance__available__lte",
              "in": "query",
              "description": "Return transactions that have a `account.balance.available` less than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "5999.00"
              }
            },
            {
              "name": "account__balance__available__range",
              "in": "query",
              "description": "Return transactions that have a `account.balance.available` within a range of two values.",
              "schema": {
                "type": "string",
                "example": "3000.00,4350.00"
              }
            },
            {
              "name": "account__balance__current",
              "in": "query",
              "description": "Return transactions that have a `account.balance.current` matching exactly this value.",
              "schema": {
                "type": "string",
                "example": "4000.00"
              }
            },
            {
              "name": "account__balance__current__gt",
              "in": "query",
              "description": "Return transactions that have a `account.balance.current` greater than this value.",
              "schema": {
                "type": "string",
                "example": "4020.00"
              }
            },
            {
              "name": "account__balance__current__gte",
              "in": "query",
              "description": "Return transactions that have a `account.balance.current` greater than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "4019.00"
              }
            },
            {
              "name": "account__balance__current__lt",
              "in": "query",
              "description": "Return transactions that have a `account.balance.current` less than this value.",
              "schema": {
                "type": "string",
                "example": "3000.00"
              }
            },
            {
              "name": "account__balance__current__lte",
              "in": "query",
              "description": "Return transactions that have a `account.balance.current` less than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "2999.00"
              }
            },
            {
              "name": "account__balance__current__range",
              "in": "query",
              "description": "Return transactions that have a `account.balance.current` within a range of two values.",
              "schema": {
                "type": "string",
                "example": "2999.00,4000.00"
              }
            },
            {
              "name": "account__in",
              "in": "query",
              "description": "Return transactions only for these `account.id`s.",
              "schema": {
                "type": "string",
                "example": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509"
              }
            },
            {
              "name": "account_type",
              "in": "query",
              "description": "Return information only for transactions matching this account type, as designated by the institution.",
              "schema": {
                "type": "string",
                "example": "Cuentas de efectivo"
              }
            },
            {
              "name": "account_type__in",
              "in": "query",
              "description": "Return information only for transactions matching these account types, as designated by the institution.",
              "schema": {
                "type": "string",
                "example": "Cuentas de efectivo,Depositos Ahorro"
              }
            },
            {
              "name": "accounting_date",
              "in": "query",
              "description": "Return transactions that were processed by the institution on exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "accounting_date__gt",
              "in": "query",
              "description": "Return transactions that were processed by the institution after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-06"
              }
            },
            {
              "name": "accounting_date__gte",
              "in": "query",
              "description": "Return transactions that were processed by the institution on this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "accounting_date__lt",
              "in": "query",
              "description": "Return transactions that were processed by the institution before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-02"
              }
            },
            {
              "name": "accounting_date__lte",
              "in": "query",
              "description": "Return transactions that were processed by the institution on this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01"
              }
            },
            {
              "name": "accounting_date__range",
              "in": "query",
              "description": "Return transactions that were processed by the institution in this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01,2022-05-06"
              }
            },
            {
              "name": "amount",
              "in": "query",
              "description": "Return transactions matching exactly this value.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__gt",
              "in": "query",
              "description": "Return transactions greater than this value.",
              "schema": {
                "type": "string",
                "example": "520.00"
              }
            },
            {
              "name": "amount__gte",
              "in": "query",
              "description": "Return transactions greater than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "519.00"
              }
            },
            {
              "name": "amount__lt",
              "in": "query",
              "description": "Return transactions less than this value.",
              "schema": {
                "type": "string",
                "example": "540.00"
              }
            },
            {
              "name": "amount__lte",
              "in": "query",
              "description": "Return transactions less than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "541.00"
              }
            },
            {
              "name": "amount__range",
              "in": "query",
              "description": "Return transactions between these two values.",
              "schema": {
                "type": "string",
                "example": "519.00,541.00"
              }
            },
            {
              "name": "collected_at",
              "in": "query",
              "description": "Return transactions that were retrieved from the institution on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-01"
              }
            },
            {
              "name": "collected_at__gt",
              "in": "query",
              "description": "Return transactions that were retrieved from the institution after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "collected_at__gte",
              "in": "query",
              "description": "Return transactions that were retrieved from the institution after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "collected_at__lt",
              "in": "query",
              "description": "Return transactions that were retrieved from the institution before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "collected_at__lte",
              "in": "query",
              "description": "Return transactions that were retrieved from the institution before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "collected_at__range",
              "in": "query",
              "description": "Return transactions that were retrieved from the institution between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return transactions that were last updated in Belvo's database on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-01"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return transactions that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return transactions that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return transactions that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return transactions that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return transactions that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "credit_card_data__bill_name__in",
              "in": "query",
              "description": "Return transactions for one of these bill names.",
              "schema": {
                "type": "string",
                "example": "maio-2022,feb-2022"
              }
            },
            {
              "name": "currency",
              "in": "query",
              "description": "Return transactions in only this three-letter currency code.",
              "schema": {
                "type": "string",
                "example": "COP"
              }
            },
            {
              "name": "currency__in",
              "in": "query",
              "description": "Return transactions in one of these three-letter currency codes.",
              "schema": {
                "type": "string",
                "example": "COP,MXN"
              }
            },
            {
              "name": "reference",
              "in": "query",
              "description": "Returns transactions with this institution-assigned reference number.",
              "schema": {
                "type": "string",
                "example": "085904452810319225"
              }
            },
            {
              "name": "reference__in",
              "in": "query",
              "description": "Returns transactions with these institution-assigned reference numbers.",
              "schema": {
                "type": "string",
                "example": "085904452810319225,8703"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Return transactions with this status. Can be either `PENDING`, `PROCESSED`, or `UNCATEGORIZED`.",
              "schema": {
                "type": "string",
                "example": "PENDING"
              }
            },
            {
              "name": "status__in",
              "in": "query",
              "description": "Return transactions with these statuses. Can be either `PENDING`, `PROCESSED`, or `UNCATEGORIZED`.",
              "schema": {
                "type": "string",
                "example": "PENDING,PROCESSED"
              }
            },
            {
              "name": "type",
              "in": "query",
              "description": "Return transactions with this type. Can be either `INFLOW` or `OUTFLOW`.",
              "schema": {
                "type": "string",
                "example": "OUTFLOW"
              }
            },
            {
              "name": "type__in",
              "in": "query",
              "description": "Return transactions with this types. Can be either `INFLOW` or `OUTFLOW`.",
              "schema": {
                "type": "string",
                "example": "INFLOW,OUTFLOW"
              }
            },
            {
              "name": "value_date",
              "in": "query",
              "description": "Return transactions that occurred on exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "value_date__gt",
              "in": "query",
              "description": "Return transactions that occurred after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-06"
              }
            },
            {
              "name": "value_date__gte",
              "in": "query",
              "description": "Return transactions that occurred on this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "value_date__lt",
              "in": "query",
              "description": "Return transactions that occurred before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-02"
              }
            },
            {
              "name": "value_date__lte",
              "in": "query",
              "description": "Return transactions that occurred on this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01"
              }
            },
            {
              "name": "value_date__range",
              "in": "query",
              "description": "Return transactions for this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01,2022-05-06"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TransactionsPaginatedResponse"
                  },
                  "examples": {
                    "TransactionsCheckingPaginated": {
                      "$ref": "#/components/examples/TransactionsCheckingPaginated"
                    },
                    "TransactionsSavingsPaginated": {
                      "$ref": "#/components/examples/TransactionsSavingsPaginated"
                    },
                    "TransactionsCreditCardPaginated": {
                      "$ref": "#/components/examples/TransactionsCreditCardPaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/transactions/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List transactions\nfor transaction in client.Transactions.list():\n    pprint(transaction)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.transactions.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.transactions.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Transactions"
          ],
          "operationId": "RetrieveTransactions",
          "summary": "Retrieve transactions for a link",
          "description": "Retrieve transactions for one or more accounts from a specific link.\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\"> <strong>Info: </strong> When retrieving transactions, it is important to understand that the available transaction data ranges depend on each institution. <br><br>\nIf you try to access older information than what we can access, we will return all the data we can read within that date range. For example, if you request transactions for the last year and we can only access the last six months, we will return the information corresponding to these six months of data. </div>\n",
          "parameters": [
            {
              "in": "header",
              "name": "X-Belvo-Request-Mode",
              "schema": {
                "type": "string",
                "enum": [
                  "async"
                ],
                "description": "Recommended header parameter to make your POST request to retrieve transactions asynchronous (thus preventing timeouts).\n\nWhen you make a asynchronous request, Belvo responds with a `202 - Accepted` payload, including the `request_id`. Once we have retrieved the transaction information, you will receive a `new_transactions_available` webhook with the link and request IDs.\n\n\n**Note**: This parameter is case sensitive (in other words, if you write `ASYNC`, then Belvo will default to a synchronous call).\n",
                "example": "async"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "x-fern-async-config": {
            "discriminant": {
              "type": "header",
              "name": "X-Belvo-Request-Mode",
              "value": "async"
            },
            "response-status-code": 202
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  },
                  "examples": {
                    "TransactionsChecking": {
                      "$ref": "#/components/examples/TransactionsChecking"
                    },
                    "TransactionsSavings": {
                      "$ref": "#/components/examples/TransactionsSavings"
                    },
                    "TransactionsCreditCard": {
                      "$ref": "#/components/examples/TransactionsCreditCard"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  },
                  "examples": {
                    "TransactionsChecking": {
                      "$ref": "#/components/examples/TransactionsChecking"
                    },
                    "TransactionsSavings": {
                      "$ref": "#/components/examples/TransactionsSavings"
                    },
                    "TransactionsCreditCard": {
                      "$ref": "#/components/examples/TransactionsCreditCard"
                    }
                  }
                }
              }
            },
            "202": {
              "description": "Accepted (when `X-Belvo-Request-Mode` is `async`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsynchronousAccepted202"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/transactions/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\",\n    \"account\": \"\",\n    \"date_from\": \"\",\n    \"date_to\": \"\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve transactions\ntransactions = client.Transactions.create(\n  \"link_id\",\n  \"2019-07-01\",\n  date_to=\"2019-07-31\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\ntransactions = sandbox.transactions.retrieve(\n  link: 'link_id',\n  date_from: '2022-01-01',\n  options: {\n    account: account, //optional\n    date_to: '2022-01-24'\n  }\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.transactions.retrieve('linkId', '2019-01-01', { 'dateTo': '2019-07-31' })\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Transactions"
          ],
          "operationId": "PatchTransactions",
          "summary": "Complete a transactions request",
          "description": "Used to resume a Transaction retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  },
                  "examples": {
                    "TransactionsChecking": {
                      "$ref": "#/components/examples/TransactionsChecking"
                    },
                    "TransactionsSavings": {
                      "$ref": "#/components/examples/TransactionsSavings"
                    },
                    "TransactionsCreditCard": {
                      "$ref": "#/components/examples/TransactionsCreditCard"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Transaction"
                    }
                  },
                  "examples": {
                    "TransactionsChecking": {
                      "$ref": "#/components/examples/TransactionsChecking"
                    },
                    "TransactionsSavings": {
                      "$ref": "#/components/examples/TransactionsSavings"
                    },
                    "TransactionsCreditCard": {
                      "$ref": "#/components/examples/TransactionsCreditCard"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PATCH \\\n  https://sandbox.belvo.com/api/transactions/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"session\": \"\",\n      \"token\": \"\",\n      \"link\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume transactions\ntransactions = client.Transactions.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.transactions.resume(\n  session: 'session-id',\n  token: 'token',\n  link: 'link-id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.transactions.resume('yourSessionId', 'yourOTPToken', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/transactions/{id}/": {
        "get": {
          "tags": [
            "Transactions"
          ],
          "operationId": "DetailTransaction",
          "summary": "Get a transaction's details",
          "description": "Get the details of a specific transaction.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `transaction.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Transaction"
                  },
                  "examples": {
                    "TransactionsChecking": {
                      "$ref": "#/components/examples/TransactionsCheckingDetail"
                    },
                    "TransactionsSavings": {
                      "$ref": "#/components/examples/TransactionsSavingsDetail"
                    },
                    "TransactionsCreditCard": {
                      "$ref": "#/components/examples/TransactionsCreditCardDetail"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/transactions/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get a transaction\ntransaction = client.Transactions.get(id=\"transaction-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.transactions.detail id: 'transaction-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.transactions.detail('transactionId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Transactions"
          ],
          "operationId": "DestroyTransaction",
          "summary": "Delete a transaction",
          "description": "Delete a specific transaction from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `transaction.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/transactions/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete a transaction\nclient.Transactions.delete(\"transaction-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.transactions.delete id: 'transaction-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.transactions.delete('transactionId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/balances/": {
        "get": {
          "tags": [
            "Balances"
          ],
          "operationId": "ListBalances",
          "summary": "List all balances",
          "description": "Get a paginated list of all existing balances in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "account",
              "in": "query",
              "description": "The `account.id` you want to filter by.\n\nℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "account__in",
              "in": "query",
              "description": "Return balances only for these `account.id`s.",
              "schema": {
                "type": "string",
                "example": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509"
              }
            },
            {
              "name": "account__type",
              "in": "query",
              "description": "Return information only for accounts matching this account type, as designated by the institution.",
              "schema": {
                "type": "string",
                "example": "Cuentas de efectivo"
              }
            },
            {
              "name": "account__type__in",
              "in": "query",
              "description": "Return information only for accounts matching these account types, as designated by the institution.",
              "schema": {
                "type": "string",
                "example": "Cuentas de efectivo,Credito"
              }
            },
            {
              "name": "balance",
              "in": "query",
              "description": "Return balances matching exactly this value.",
              "schema": {
                "type": "string",
                "example": "530.00"
              }
            },
            {
              "name": "balance__lt",
              "in": "query",
              "description": "Return balances less than this value.",
              "schema": {
                "type": "string",
                "example": "540.00"
              }
            },
            {
              "name": "balance__lte",
              "in": "query",
              "description": "Return balances less than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "541.00"
              }
            },
            {
              "name": "balance__gt",
              "in": "query",
              "description": "Return balances greater than this value.",
              "schema": {
                "type": "string",
                "example": "520.00"
              }
            },
            {
              "name": "balance__gte",
              "in": "query",
              "description": "Return balances greater than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "519.00"
              }
            },
            {
              "name": "balance__range",
              "in": "query",
              "description": "Return balances between these two values.",
              "schema": {
                "type": "string",
                "example": "519.00,541.00"
              }
            },
            {
              "name": "currency",
              "in": "query",
              "description": "Return balances that are in this three-letter currency code.",
              "schema": {
                "type": "string",
                "example": "COP"
              }
            },
            {
              "name": "currency__in",
              "in": "query",
              "description": "Return balances that are in these three-letter currency codes.",
              "schema": {
                "type": "string",
                "example": "COP,MXN"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information only for this `balance.id`.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information only for these `balance.id`s.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e"
              }
            },
            {
              "name": "institution",
              "in": "query",
              "description": "Return balances only for this institution (use the Belvo-designated name, such as `erebor_mx_retail`).",
              "schema": {
                "type": "string",
                "example": "erebor_mx_retail"
              }
            },
            {
              "name": "institution__in",
              "in": "query",
              "description": "Return balances only for these institutions (use the Belvo-designated names, such as `erebor_mx_retail` and `gringotts_mx_retail`).",
              "schema": {
                "type": "string",
                "example": "erebor_mx_retail,gringotts_mx_retail"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return balances only for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            },
            {
              "name": "value_date",
              "in": "query",
              "description": "Return balances for exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "value_date__gt",
              "in": "query",
              "description": "Return balances for after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-06"
              }
            },
            {
              "name": "value_date__gte",
              "in": "query",
              "description": "Return balances for this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "value_date__lt",
              "in": "query",
              "description": "Return balances for before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-02"
              }
            },
            {
              "name": "value_date__lte",
              "in": "query",
              "description": "Return balances for this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01"
              }
            },
            {
              "name": "value_date__range",
              "in": "query",
              "description": "Return balances for this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01,2022-05-06"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BalancesPaginatedResponse"
                  },
                  "examples": {
                    "BalancesExamplePaginated": {
                      "$ref": "#/components/examples/BalancesExamplePaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/balances/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List balances\nfor balance in client.Balances.list():\n    pprint(balance)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.balances.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.balances.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Balances"
          ],
          "operationId": "RetrieveBalances",
          "summary": "Retrieve balances for a link",
          "description": "Retrieve balances from one or more accounts for a specific link within a specified date range.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BalancesRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  },
                  "examples": {
                    "BalancesExamplePaginated": {
                      "$ref": "#/components/examples/BalancesExample"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  },
                  "examples": {
                    "BalancesExamplePaginated": {
                      "$ref": "#/components/examples/BalancesExample"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/balances/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\",\n    \"account\": \"\",\n    \"date_from\": \"\",\n    \"date_to\": \"\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve balances\nbalances = client.Balances.create(\n  \"link_id\",\n  \"2019-07-01\",\n  date_to=\"2019-07-31\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.balances.retrieve(\n  link: 'link-id',\n  date_from: '2019-07-01',\n  date_to: '2019-07-31'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.balances.retrieve('linkId', '2019-07-01', { 'dateTo': '2019-07-31' })\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Balances"
          ],
          "operationId": "PatchBalances",
          "summary": "Complete a balances request",
          "description": "Used to resume a Balance retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  },
                  "examples": {
                    "BalancesExamplePaginated": {
                      "$ref": "#/components/examples/BalancesExample"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Balance"
                    }
                  },
                  "examples": {
                    "BalancesExamplePaginated": {
                      "$ref": "#/components/examples/BalancesExample"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PATCH \\\n  https://sandbox.belvo.com/api/balances/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"session\": \"\",\n      \"token\": \"\",\n      \"link\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume balances\nbalances = client.Balances.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.balances.resume(\n  session: 'session-id',\n  token: 'token',\n  link: 'link-id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.balances.resume('sessionId', 'token', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/balances/{id}/": {
        "get": {
          "tags": [
            "Balances"
          ],
          "operationId": "DetailBalance",
          "summary": "Get a balance's details",
          "description": "Get the details of a specific balance.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `balance.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Balance"
                  },
                  "examples": {
                    "BalancesExamplePaginated": {
                      "$ref": "#/components/examples/BalancesExampleDetail"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/balances/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get a balance\nbalance = client.Balances.get(id=\"balance-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.balances.detail id: 'balance-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.balances.detail('balanceId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Balances"
          ],
          "operationId": "DestroyBalance",
          "summary": "Delete a balance",
          "description": "Delete a specific balance from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `balance.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/balance/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete a balance\nclient.Balances.delete(\"balance-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.balances.delete id: 'balance-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.balances.delete('balanceId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/institutions/": {
        "get": {
          "tags": [
            "Institutions"
          ],
          "operationId": "ListInstitutions",
          "summary": "List all institutions",
          "description": "Get a paginated list of all the institutions currently supported by Belvo. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "country_code",
              "in": "query",
              "description": "Return institutions only for this two-letter country code.",
              "schema": {
                "type": "string",
                "example": "MX"
              }
            },
            {
              "name": "country_code__in",
              "in": "query",
              "description": "Return institutions only for these two-letter country codes.",
              "schema": {
                "type": "string",
                "example": "CO,BR"
              }
            },
            {
              "name": "display_name",
              "in": "query",
              "description": "Return institutions that partially match this display name.",
              "schema": {
                "type": "string",
                "example": "Erebor Bank"
              }
            },
            {
              "name": "name",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "name__in",
              "in": "query",
              "description": "Return institutions with one or more of these Belvo-designated names.",
              "schema": {
                "type": "string",
                "example": "erebor_br_retail,gotham_co_business"
              }
            },
            {
              "name": "resources__allin",
              "in": "query",
              "description": "Return institutions that support these resources.",
              "schema": {
                "type": "string",
                "example": "ACCOUNTS,OWNERS,TRANSACTIONS"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Return institutions with the given status. You can choose between `healthy` or `down`.",
              "schema": {
                "type": "string",
                "example": "healthy"
              }
            },
            {
              "name": "status__in",
              "in": "query",
              "description": "Return institutions with one of the given statuses. You can choose between `healthy` or `down`.",
              "schema": {
                "type": "string",
                "example": "healthy,down"
              }
            },
            {
              "name": "type",
              "in": "query",
              "description": "Return institutions of this type. You can choose between `bank` or `fiscal`.",
              "schema": {
                "type": "string",
                "example": "fiscal"
              }
            },
            {
              "name": "type__in",
              "in": "query",
              "description": "Return institutions of one of these types. You can choose between `bank` or `fiscal`.",
              "schema": {
                "type": "string",
                "example": "fiscal,bank"
              }
            },
            {
              "name": "website",
              "in": "query",
              "description": "Return institutions with this website URL.",
              "schema": {
                "type": "string",
                "example": "https://www.erebor.mx"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InstitutionsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/institutions/  \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List institutions\nfor institution in client.Institutions.list():\n    pprint(institution)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.institutions.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.institutions.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/institutions/{id}/": {
        "get": {
          "tags": [
            "Institutions"
          ],
          "operationId": "DetailInstitution",
          "summary": "Get an institution's details",
          "description": "Get the details of a specific institution.",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The `institution.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "pattern": "[0-9]+"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/institutions/{id}  \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get a institution\ninstitution = client.Institutions.get(id=\"institution_id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.institutions.detail id: 'institution-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.institutions.detail('institution_id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/owners/": {
        "get": {
          "tags": [
            "Owners"
          ],
          "operationId": "ListOwners",
          "summary": "List all owners",
          "description": "Get a paginated list of all existing owners in your Belvo account. We return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return owners that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return owners that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return owners that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return owners that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return owners that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "display_name__icontains",
              "in": "query",
              "description": "Return owners whose full display name partially matches your query. For example, `mar` will return results for Mark, Maria, Neymar, Remarque, and so on.",
              "schema": {
                "type": "string",
                "example": "Daniela"
              }
            },
            {
              "name": "email",
              "in": "query",
              "description": "Returns owners whose email address match your query.",
              "schema": {
                "type": "string",
                "example": "lopes.d@gmail.com"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information only for this `owner.id`.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information only for these `owner.id`s.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "Return information only for this `link.id`.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return balances only for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OwnersPaginatedResponse"
                  },
                  "examples": {
                    "OwnerBankingAccountPaginated": {
                      "$ref": "#/components/examples/OwnerBankingAccountPaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/owners/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List owners\nfor owner in client.Owners.list():\n    pprint(owner)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.owners.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.owners.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Owners"
          ],
          "operationId": "RetrieveOwners",
          "summary": "Retrieve owners for a link",
          "description": "Retrieve owner information from a specific link.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Owner"
                    }
                  },
                  "examples": {
                    "OwnerBankingAccount": {
                      "$ref": "#/components/examples/OwnerBankingAccount"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Owner"
                    }
                  },
                  "examples": {
                    "OwnerBankingAccount": {
                      "$ref": "#/components/examples/OwnerBankingAccount"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/owners/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve owners\nowners = client.Owners.create(\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.owners.retrieve(link: 'link-id')\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.owners.retrieve('linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Owners"
          ],
          "operationId": "PatchOwners",
          "summary": "Complete an owners request",
          "description": "Used to resume an Owner retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Owner"
                    }
                  },
                  "examples": {
                    "OwnerBankingAccount": {
                      "$ref": "#/components/examples/OwnerBankingAccount"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Owner"
                    }
                  },
                  "examples": {
                    "OwnerBankingAccount": {
                      "$ref": "#/components/examples/OwnerBankingAccount"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PATCH \\\n  https://sandbox.belvo.com/api/owners/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"session\": \"\",\n      \"token\": \"\",\n      \"link\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume owners\nowners = client.Owners.resume(\n  session=\"session-id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.owners.resume(\n  session: 'session-id',\n  token: 'token',\n  link: 'link-id',\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.owners.resume('yourSessionId', 'yourOTPToken', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/owners/{id}/": {
        "get": {
          "tags": [
            "Owners"
          ],
          "operationId": "DetailOwner",
          "summary": "Get an owner's details",
          "description": "Get the details of a specific owner.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `owner.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/owners/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get a owner\nowner = client.Owners.get(id=\"owner-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.owners.detail id: 'owner-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.owners.detail('ownerId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Owner"
                  },
                  "examples": {
                    "OwnerBankingAccount": {
                      "$ref": "#/components/examples/OwnerBankingAccountDetail"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Owners"
          ],
          "operationId": "DestroyOwner",
          "summary": "Delete an owner",
          "description": "Delete a specific owner from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `owner.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/owners/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete a owner\nclient.Owners.delete(\"owner-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.owners.delete id: 'owner-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.owners.delete('ownerId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/invoices/": {
        "get": {
          "tags": [
            "Invoices"
          ],
          "operationId": "ListInvoices",
          "description": "Get a paginated list of all existing invoices in your Belvo account. By default, we return 100 results per page.",
          "summary": "List all invoices",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return invoices that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return invoices that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return invoices that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return invoices that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return invoices that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information only for this `invoice.id`.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information only for these `invoice.id`s.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e"
              }
            },
            {
              "name": "invoice_date",
              "in": "query",
              "description": "Return invoices issued exactly on this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "invoice_date__lt",
              "in": "query",
              "description": "Return balances issued before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-02"
              }
            },
            {
              "name": "invoice_date__lte",
              "in": "query",
              "description": "Return balances issued on this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01"
              }
            },
            {
              "name": "invoice_date__gt",
              "in": "query",
              "description": "Return invoices issued after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-06"
              }
            },
            {
              "name": "invoice_date__gte",
              "in": "query",
              "description": "Return invoices issued on this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "invoice_date__range",
              "in": "query",
              "description": "Return invoices issued within this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01,2022-05-06"
              }
            },
            {
              "name": "invoice_identification",
              "in": "query",
              "description": "Return an invoice with this ID (as provided by the insitution).",
              "schema": {
                "type": "string",
                "example": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840"
              }
            },
            {
              "name": "invoice_identification__in",
              "in": "query",
              "description": "Return invoices with these IDs (as provided by the institution).",
              "schema": {
                "type": "string",
                "example": "862B9918-3K6H-4E0B-NAI9-2BE2D833B840,992B9918-3G6H-4E0B-DAI9-2BE2D833B833"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return invoices only for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Return invoices with this status. Can be either `Vigente` (valid) or `Cancelado` (cancelled).",
              "schema": {
                "type": "string",
                "example": "Vigente"
              }
            },
            {
              "name": "status__in",
              "in": "query",
              "description": "Return invoices with these statuses. Can be either `Vigente` (valid) or `Cancelado` (cancelled).",
              "schema": {
                "type": "string",
                "example": "Vigente,Cancelado"
              }
            },
            {
              "name": "total_amount",
              "in": "query",
              "description": "Return invoices matching exactly this value.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "total_amount__lt",
              "in": "query",
              "description": "Return invoices less than this value.",
              "schema": {
                "type": "string",
                "example": "540.00"
              }
            },
            {
              "name": "total_amount__lte",
              "in": "query",
              "description": "Return invoices less than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "541.00"
              }
            },
            {
              "name": "total_amount__gt",
              "in": "query",
              "description": "Return invoices greater than this value.",
              "schema": {
                "type": "string",
                "example": "520.00"
              }
            },
            {
              "name": "total_amount__gte",
              "in": "query",
              "description": "Return invoices greater than or equal to this value.",
              "schema": {
                "type": "string",
                "example": "519.00"
              }
            },
            {
              "name": "total_amount__range",
              "in": "query",
              "description": "Return invoices between these two values.",
              "schema": {
                "type": "string",
                "example": "519.00,541.00"
              }
            },
            {
              "name": "type",
              "in": "query",
              "description": "Return invoices of this type. Can be either `OUTFLOW` or `INFLOW`.",
              "schema": {
                "type": "string",
                "example": "OUTFLOW"
              }
            },
            {
              "name": "type__in",
              "in": "query",
              "description": "Return invoices of these types. Can be either `OUTFLOW` or `INFLOW`.",
              "schema": {
                "type": "string",
                "example": "OUTFLOW,INFLOW"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvoicesResponsePaginatedResponse"
                  },
                  "examples": {
                    "InvoiceIngresso": {
                      "$ref": "#/components/examples/InvoiceIngresoPaginated"
                    },
                    "InvoicePago": {
                      "$ref": "#/components/examples/InvoicePagoPaginated"
                    },
                    "InvoiceNomina": {
                      "$ref": "#/components/examples/InvoiceNominaPaginated"
                    },
                    "InvoiceEgreso": {
                      "$ref": "#/components/examples/InvoiceEgresoPaginated"
                    },
                    "InvoiceTraslado": {
                      "$ref": "#/components/examples/InvoiceTrasladoPaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/invoices/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List Invoices\nfor invoice in client.Invoices.list():\n    pprint(invoice)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.invoices.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.invoices.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  });\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Invoices"
          ],
          "operationId": "RetrieveInvoices",
          "summary": "Retrieve invoices for a link",
          "description": "Retrieve invoice information from a specific fiscal link.\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #0663F9;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\"> <strong>Info: </strong> You can ask for up to **one** year (365 days) of invoices per request. If you need invoices for more than one year, just make another request. </div>\n",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvoiceWithIdSat"
                        },
                        {
                          "$ref": "#/components/schemas/InvoiceDian"
                        }
                      ]
                    }
                  },
                  "examples": {
                    "InvoiceIngresso": {
                      "$ref": "#/components/examples/InvoiceIngreso"
                    },
                    "InvoicePago": {
                      "$ref": "#/components/examples/InvoicePago"
                    },
                    "InvoiceNomina": {
                      "$ref": "#/components/examples/InvoiceNomina"
                    },
                    "InvoiceEgreso": {
                      "$ref": "#/components/examples/InvoiceEgreso"
                    },
                    "InvoiceTraslado": {
                      "$ref": "#/components/examples/InvoiceTraslado"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvoiceWithIdSat"
                        },
                        {
                          "$ref": "#/components/schemas/InvoiceDian"
                        }
                      ]
                    }
                  },
                  "examples": {
                    "InvoiceIngresso": {
                      "$ref": "#/components/examples/InvoiceIngreso"
                    },
                    "InvoicePago": {
                      "$ref": "#/components/examples/InvoicePago"
                    },
                    "InvoiceNomina": {
                      "$ref": "#/components/examples/InvoiceNomina"
                    },
                    "InvoiceEgreso": {
                      "$ref": "#/components/examples/InvoiceEgreso"
                    },
                    "InvoiceTraslado": {
                      "$ref": "#/components/examples/InvoiceTraslado"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/invoices/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\",\n    \"date_from\": \"YYYY-MM-DD\",\n    \"date_to\": \"YYYY-MM-DD\",\n    \"type\": \"OUTFLOW\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List Invoices\nfor invoice in client.Invoices.create('link-id', '2019-07-01', '2019-07-31', 'OUTFLOW'):\n    pprint(invoice)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.invoices.retrieve(\n  link: 'link-id',\n  date_from: '2019-07-01',\n  date_to: '2019-07-31',\n  type: 'OUTFLOW'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.invoices.retrieve('linkId', '2019-07-01', '2019-07-31', 'OUTFLOW')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  });\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Invoices"
          ],
          "operationId": "PatchInvoices",
          "summary": "Complete an invoices request",
          "description": "Used to resume an Invoice retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvoiceWithIdSat"
                        },
                        {
                          "$ref": "#/components/schemas/InvoiceDian"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/InvoiceWithIdSat"
                        },
                        {
                          "$ref": "#/components/schemas/InvoiceDian"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PATCH \\\n  https://api.belvo.com/api/invoices/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: api.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"session\": \"\",\n      \"token\": \"\",\n      \"link\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"https://api.belvo.com\")\n\n# Resume incomes\nincomes = client.Invoices.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n)\n\nclient.invoices.resume(\n  session: 'session_id',\n  token: 'token',\n  link: 'link_id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n);\n\nclient.connect()\n  .then(function () {\n    client.invoices.resume('sessionId', 'token', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/invoices/{id}/": {
        "get": {
          "tags": [
            "Invoices"
          ],
          "operationId": "DetailInvoice",
          "summary": "Get an invoice's details",
          "description": "Get the details of a specific invoice.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `invoice.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/invoices/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\ninvoice = client.Invoices.detail('invoice-id'):\npprint(invoice)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.invoices.detail id: 'invoice-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.invoices.detail('invoiceId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  });\n"
              }
            ]
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/InvoiceWithIdSat"
                      },
                      {
                        "$ref": "#/components/schemas/InvoiceDian"
                      }
                    ]
                  },
                  "examples": {
                    "InvoiceIngresso": {
                      "$ref": "#/components/examples/InvoiceIngresoDetail"
                    },
                    "InvoicePago": {
                      "$ref": "#/components/examples/InvoicePagoDetail"
                    },
                    "InvoiceNomina": {
                      "$ref": "#/components/examples/InvoiceNominaDetail"
                    },
                    "InvoiceEgreso": {
                      "$ref": "#/components/examples/InvoiceEgresoDetail"
                    },
                    "InvoiceTraslado": {
                      "$ref": "#/components/examples/InvoiceTrasladoDetail"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Invoices"
          ],
          "operationId": "DestroyInvoice",
          "summary": "Delete an invoice",
          "description": "Delete a specific invoice from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `invoice.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/invoices/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete Invoice\nclient.Invoices.delete('invoice-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.invoices.delete id: 'invoice-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.invoices.delete('invoiceId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  });\n"
              }
            ]
          }
        }
      },
      "/api/tax-returns/": {
        "get": {
          "tags": [
            "Tax returns"
          ],
          "operationId": "ListTaxReturns",
          "summary": "List all tax returns",
          "description": "Get a paginated list of all existing tax returns in your Belvo account. By default, we return up to 100 results per page. The results will include a mix of both monthly and yearly tax returns.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return tax returns that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return tax returns that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return tax returns that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return tax returns that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return tax returns that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information for this `tax-return.id`.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information for these `tax-return.id`s.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c"
              }
            },
            {
              "name": "ejercicio",
              "in": "query",
              "description": "Return tax returns for exactly this year (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2018"
              }
            },
            {
              "name": "ejercicio__lt",
              "in": "query",
              "description": "Return tax returns for before this year (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2020"
              }
            },
            {
              "name": "ejercicio__lte",
              "in": "query",
              "description": "Return tax returns for this year and earlier (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2021"
              }
            },
            {
              "name": "ejercicio__gt",
              "in": "query",
              "description": "Return tax returns for after this year (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2019"
              }
            },
            {
              "name": "ejercicio__gte",
              "in": "query",
              "description": "Return tax returns for this year or later (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2017"
              }
            },
            {
              "name": "ejercicio__range",
              "in": "query",
              "description": "Return tax returns for this range of years (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2015,2021"
              }
            },
            {
              "name": "tipo_declaracion",
              "in": "query",
              "description": "Return tax returns with this declaration type.",
              "schema": {
                "type": "string",
                "example": "Normal"
              }
            },
            {
              "name": "tipo_declaracion__in",
              "in": "query",
              "description": "Return tax returns with these declaration types.",
              "schema": {
                "type": "string",
                "example": "Normal,Commercial"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TaxReturnsPersonalPaginated"
                      },
                      {
                        "$ref": "#/components/schemas/TaxReturnsPersonalMonthlyPaginated"
                      },
                      {
                        "$ref": "#/components/schemas/TaxReturnsBusinessPaginated"
                      },
                      {
                        "$ref": "#/components/schemas/TaxReturnsBusinessMonthlyPaginated"
                      }
                    ]
                  },
                  "examples": {
                    "TaxReturnPersonal": {
                      "$ref": "#/components/examples/TaxReturnPersonalListPaginated"
                    },
                    "TaxReturnPersonalMonthlyPFAE": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPaginatedPFAE"
                    },
                    "TaxReturnPersonalMonthlyPFAI": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPaginatedPFAI"
                    },
                    "TaxReturnBusiness": {
                      "$ref": "#/components/examples/TaxReturnBusinessListPaginated"
                    },
                    "TaxReturnBusinessMonthly": {
                      "$ref": "#/components/examples/TaxReturnBusinessListMonthlyPaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-returns/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List tax returns\nfor tax_return in client.TaxReturns.list()\n  pprint(tax_return)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_returns.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxReturns.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Tax returns"
          ],
          "operationId": "RetrieveTaxReturns",
          "summary": "Retrieve tax returns for a link",
          "description": "Retrieve tax return information for a specific fiscal link.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TaxReturnsMonthlyRequest"
                    },
                    {
                      "$ref": "#/components/schemas/TaxReturnsYearlyRequest"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TaxReturnPersonal"
                        },
                        {
                          "$ref": "#/components/schemas/TaxReturnPersonalMonthly"
                        },
                        {
                          "$ref": "#/components/schemas/TaxReturnBusiness"
                        },
                        {
                          "$ref": "#/components/schemas/TaxReturnBusinessMonthly"
                        }
                      ]
                    }
                  },
                  "examples": {
                    "TaxReturnPersonal": {
                      "$ref": "#/components/examples/TaxReturnPersonalList"
                    },
                    "TaxReturnPersonalMonthlyPFAE": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPFAE"
                    },
                    "TaxReturnPersonalMonthlyPFAI": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPFAI"
                    },
                    "TaxReturnBusiness": {
                      "$ref": "#/components/examples/TaxReturnBusinessList"
                    },
                    "TaxReturnBusinessMonthly": {
                      "$ref": "#/components/examples/TaxReturnBusinessListMonthly"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TaxReturnPersonal"
                        },
                        {
                          "$ref": "#/components/schemas/TaxReturnPersonalMonthly"
                        },
                        {
                          "$ref": "#/components/schemas/TaxReturnBusiness"
                        },
                        {
                          "$ref": "#/components/schemas/TaxReturnBusinessMonthly"
                        }
                      ]
                    }
                  },
                  "examples": {
                    "TaxReturnPersonal": {
                      "$ref": "#/components/examples/TaxReturnPersonalList"
                    },
                    "TaxReturnPersonalMonthlyPFAE": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPFAE"
                    },
                    "TaxReturnPersonalMonthlyPFAI": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPFAI"
                    },
                    "TaxReturnBusiness": {
                      "$ref": "#/components/examples/TaxReturnBusinessList"
                    },
                    "TaxReturnBusinessMonthly": {
                      "$ref": "#/components/examples/TaxReturnBusinessListMonthly"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "### Yearly Tax Returns\ncurl -X POST \\\n  https://sandbox.belvo.com/api/tax-returns/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\",\n    \"year_from\": YYYY,\n    \"year_to\": YYYY,\n    \"attach_pdf\": false\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n\n### Monthly Tax Returns\ncurl -X POST \\\n  https://sandbox.belvo.com/api/tax-returns/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\",\n    \"date_from\": \"2019-01-01\",\n    \"date_to\": \"2019-04-01\",\n    \"type\": \"monthly\",\n    \"attach_pdf\": false\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Yearly Tax Returns\ntax_returns = client.TaxReturns.create(\n  link=\"link_id\",\n  year_from=\"2019\",\n  year_to=\"2020\",\n  attach_pdf=True\n)\n\n# Monthly Tax Returns\ntax_returns = client.TaxReturns.create(\n  link=\"link_id\",\n  date_from=\"2019-01-01\",\n  date_to=\"2019-04-01\",\n  attach_pdf=True,\n  type_=\"monthly\"\n)"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\n# Yearly Tax Returns\nsandbox.tax_returns.retrieve(\n  link: 'link-id',\n  year_from: \"2019\",\n  year_to: \"2020\"\n)\n\n# Monthly Tax Returns\nsandbox.tax_returns.retrieve(\n  link: 'some-link-uuid',\n  options: {\n    type: TaxReturnType::MONTHLY,\n    date_from: '2019-01-01',\n    date_to: '2019-04-01',\n  }\n      )\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\n// Yearly Tax Returns\nclient.connect()\n  .then(function () {\n    client.taxReturns.retrieve('linkID', \"2019\", \"2020\")\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n\n// Monthly Tax Returns\n\nclient.connect()\n  .then(function () {\n    client.taxReturns.retrieve('linkID', \"2019-01-01\", \"2019-04-01\", {type: 'monthly'})\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});"
              }
            ]
          }
        }
      },
      "/api/tax-returns/{id}/": {
        "get": {
          "tags": [
            "Tax returns"
          ],
          "operationId": "DetailTaxReturn",
          "summary": "Get a tax return's details",
          "description": "Get the details of a specific tax return.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-return.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-returns/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get a tax return\ntax_return = client.TaxReturns.get(id=\"tax-return-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_returns.detail id: 'tax-return-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxReturns.detail('taxReturnId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TaxReturnPersonal"
                      },
                      {
                        "$ref": "#/components/schemas/TaxReturnPersonalMonthly"
                      },
                      {
                        "$ref": "#/components/schemas/TaxReturnBusiness"
                      },
                      {
                        "$ref": "#/components/schemas/TaxReturnBusinessMonthly"
                      }
                    ]
                  },
                  "examples": {
                    "TaxReturnPersonal": {
                      "$ref": "#/components/examples/TaxReturnPersonalListDetail"
                    },
                    "TaxReturnPersonalMonthlyPFAE": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPFAEDetail"
                    },
                    "TaxReturnPersonalMonthlyPFAI": {
                      "$ref": "#/components/examples/TaxReturnPersonalListMonthlyPFAIDetail"
                    },
                    "TaxReturnBusiness": {
                      "$ref": "#/components/examples/TaxReturnBusinessListDetail"
                    },
                    "TaxReturnBusinessMonthly": {
                      "$ref": "#/components/examples/TaxReturnBusinessListMonthlyDetail"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Tax returns"
          ],
          "operationId": "DestroyTaxReturn",
          "summary": "Delete a tax return",
          "description": "Delete a specific tax return from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The ID of the tax return you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/tax-returns/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete a tax return\nclient.TaxReturns.delete(\"tax-return-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_returns.delete id: 'tax-return-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxReturns.delete('taxReturnId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/tax-status/": {
        "get": {
          "tags": [
            "Tax status"
          ],
          "operationId": "ListTaxStatus",
          "summary": "List all tax statuses",
          "description": "Get a paginated list of all existing tax status in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return tax statuses that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return tax statuses that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return tax statuses that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return tax statuses that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return tax statuses that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information for this `tax-status.id`.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information for these `tax-status.id`s.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaxStatusPaginatedResponse"
                  },
                  "examples": {
                    "TaxStatusPersonalListPaginated": {
                      "$ref": "#/components/examples/TaxStatusPersonalListPaginated"
                    },
                    "TaxStatusBusinessListPaginated": {
                      "$ref": "#/components/examples/TaxStatusBusinessListPaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-status/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List tax status\nclient.TaxStatus.list()\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_status.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxStatus.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Tax status"
          ],
          "operationId": "RetrieveTaxStatus",
          "summary": "Retrieve tax statuses for a link",
          "description": "Retrieve tax status information for a specific fiscal link.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxStatusRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/TaxStatusSat"
                      },
                      {
                        "$ref": "#/components/schemas/TaxStatusDian"
                      }
                    ]
                  },
                  "examples": {
                    "TaxStatusPersonal": {
                      "$ref": "#/components/examples/TaxStatusPersonalList"
                    },
                    "TaxStatusBusiness": {
                      "$ref": "#/components/examples/TaxStatusBusinessList"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/TaxStatusSat"
                      },
                      {
                        "$ref": "#/components/schemas/TaxStatusDian"
                      }
                    ]
                  },
                  "examples": {
                    "TaxStatusPersonal": {
                      "$ref": "#/components/examples/TaxStatusPersonalList"
                    },
                    "TaxStatusBusiness": {
                      "$ref": "#/components/examples/TaxStatusBusinessList"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/tax-status/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"link-id\",\n    \"attach_pdf\": false\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve tax status\nclient.TaxStatus.create('link-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_status.retrieve(\n  link: 'link-id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxStatus.retrieve('linkID')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/tax-status/{id}/": {
        "get": {
          "tags": [
            "Tax status"
          ],
          "operationId": "DetailTaxStatus",
          "summary": "Get a tax status's details",
          "description": "Get the details of a specific tax status.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-status.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-status/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get tax status\nclient.TaxStatus.get('tax-status-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_status.detail id: 'tax-status-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxStatus.detail('taxStatusId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/TaxStatusSat"
                      },
                      {
                        "$ref": "#/components/schemas/TaxStatusDian"
                      }
                    ]
                  },
                  "examples": {
                    "TaxStatusPersonal": {
                      "$ref": "#/components/examples/TaxStatusPersonalList"
                    },
                    "TaxStatusBusiness": {
                      "$ref": "#/components/examples/TaxStatusBusinessList"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Tax status"
          ],
          "operationId": "DestroyTaxStatus",
          "summary": "Delete a tax status",
          "description": "Delete a specific tax status from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "the `tax-status.id` that you want to delete",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/tax-status/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete tax status\nclient.TaxStatus.delete('tax-status-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_status.delete id: 'tax-status-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxStatus.delete('taxStatusId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/tax-compliance-status/": {
        "get": {
          "tags": [
            "Tax compliance status"
          ],
          "operationId": "ListTaxComplianceStatus",
          "summary": "List all tax compliance statuses",
          "description": "Get a paginated list of all existing Tax compliance statuses in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return tax compliance statuses that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return tax compliance statuses that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return tax compliance statuses that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return tax compliance statuses that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return tax compliance statuses that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information for this `tax-compliance-status.id`.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information for these `tax-compliance-status.id`s.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaxComplianceStatusPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-compliance-status/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List Tax compliance status\nclient.TaxComplianceStatus.list()\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.tax_compliance_status.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxComplianceStatus.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Tax compliance status"
          ],
          "operationId": "RetrieveTaxComplianceStatus",
          "summary": "Retrieve tax compliance statuses for a link",
          "description": "Retrieve the Tax compliance status information for a specific fiscal link.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxComplianceStatusRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaxComplianceStatus"
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaxComplianceStatus"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://sandbox.belvo.com/api/tax-compliance-status/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"link-id\",\n    \"attach_pdf\": false\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve Tax compliance status\nclient.TaxComplianceStatus.create('link-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.tax_compliance_status.retrieve(\n  link: 'link-id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxComplianceStatus.retrieve('linkID')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/tax-compliance-status/{id}/": {
        "get": {
          "tags": [
            "Tax compliance status"
          ],
          "operationId": "DetailTaxComplianceStatus",
          "summary": "Get a tax compliance status's details",
          "description": "Get the details of a specific Tax compliance status.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-compliance-status.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaxComplianceStatus"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get Tax compliance status\nclient.TaxComplianceStatus.get('tax-compliance-status-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_status.detail id: 'tax-compliance-status-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxComplianceStatus.detail('taxComplianceStatusId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Tax compliance status"
          ],
          "operationId": "DestroyTaxComplianceStatus",
          "summary": "Delete a tax compliance status",
          "description": "Delete a specific Tax compliance status from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-compliance-status.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete Tax compliance status\nclient.TaxComplianceStatus.delete('tax-compliance-status-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.tax_compliance_status.delete id: 'tax-compliance-status-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxComplianceStatus.delete('taxComplianceStatusId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/incomes/": {
        "get": {
          "tags": [
            "Incomes"
          ],
          "operationId": "ListIncomes",
          "summary": "List all incomes",
          "description": "Get a paginated list of all incomes in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "account",
              "in": "query",
              "description": "The `account.id` you want to filter by.\n\nℹ️ We highly recommend adding the `account.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "account__in",
              "in": "query",
              "description": "Return incomes for these `account.id`s.",
              "schema": {
                "type": "string",
                "example": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return incomes only for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "73694155-b871-41ec-94e3-37d17ff62b5d,40968d42-7d89-49e3-9931-78baa8e0544e"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IncomesPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://api.belvo.com/api/incomes/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"https://api.belvo.com\")\n\n# List incomes\nfor income in client.Incomes.list():\n    pprint(income)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n)\n\nclient.incomes.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n);\n\nclient.connect()\n  .then(function () {\n    client.incomes.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Incomes"
          ],
          "operationId": "RetrieveIncome",
          "summary": "Retrieve incomes for a link",
          "description": "Retrieve income insights for <b>checking and savings accounts</b> from a specific link. You can receive insights for a period of up to 365 days, depending on the transaction history available for each [bank](https://developers.belvo.com/docs/institution).",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomesRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Income"
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Income"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X POST \\\n  https://api.belvo.com/api/incomes/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: api.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"https://api.belvo.com\")\n\n# Retrieve incomes\nincomes = client.Incomes.create(\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n)\n\nclient.incomes.retrieve link: 'link-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n);\n\nclient.connect()\n  .then(function () {\n    client.incomes.retrieve('link-id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Incomes"
          ],
          "operationId": "PatchIncomes",
          "summary": "Complete an incomes request",
          "description": "Used to resume an Income retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Income"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Income"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X PATCH \\\n  https://api.belvo.com/api/incomes/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: api.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n      \"session\": \"\",\n      \"token\": \"\",\n      \"link\": \"\"\n  }' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"https://api.belvo.com\")\n\n# Resume incomes\nincomes = client.Incomes.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n)\n\nclient.incomes.resume(\n  session: 'session_id',\n  token: 'token',\n  link: 'link_id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n);\n\nclient.connect()\n  .then(function () {\n    client.incomes.resume('sessionId', 'token', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/incomes/{id}/": {
        "get": {
          "tags": [
            "Incomes"
          ],
          "operationId": "DetailIncome",
          "summary": "Get an income's details",
          "description": "Get the details of a specific income.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `income.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Income"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://api.belvo.com/api/incomes/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"https://api.belvo.com\")\n\n# Get an income\nincome = client.Incomes.get(id=\"income-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n)\n\nclient.incomes.detail id: 'income-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n);\n\nclient.connect()\n  .then(function () {\n    client.incomes.detail('incomeId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Incomes"
          ],
          "operationId": "DestroyIncomes",
          "summary": "Delete an income",
          "description": "Delete a specific income from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "the `income.id` that you want to delete",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://api.belvo.com/api/incomes/{id}/ \\\n  -H 'Host: api.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"https://api.belvo.com\")\n\n# Delete an income\nclient.Incomes.delete(\"income-id\")\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n)\n\nclient.incomes.delete id: 'income-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'https://api.belvo.com'\n);\n\nclient.connect()\n  .then(function () {\n    client.incomes.delete('incomeId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/recurring-expenses/": {
        "get": {
          "tags": [
            "Recurring Expenses"
          ],
          "operationId": "ListRecurringExpenses",
          "summary": "List all recurring expenses",
          "description": "Get a paginated list of all recurring expenses in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "account",
              "in": "query",
              "description": "The `account.id` you want to filter by.\n\nℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "account_in",
              "in": "query",
              "description": "Return recurring expenses for these `accound.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,d3d941ab-4ca5-43c1-8b23-db329ee4cb7e"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information for this `recurring-expense.id`.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information for these `recurring-expense.id`s.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecurringExpensesPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List Recurring Expenses\nfor income in client.RecurringExpenses.list():\npprint(income)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.recurring_expenses.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.recurringExpenses.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Recurring Expenses"
          ],
          "operationId": "RetrieveRecurringExpenses",
          "summary": "Retrieve recurring expenses for a link",
          "description": "Retrieve recurring expense insights for <b>checking and savings accounts</b> from a specific link. You can receive insights for a period of up to 365 days, depending on the transaction history available for each [bank](https://developers.belvo.com/docs/institution).",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringExpensesRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when save_data=false)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RecurringExpenses"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when save_data=true)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RecurringExpenses"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve Recurring Expense\nclient.RecurringExpenses.create('link-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.recurring_expenses.retrieve(\n  link: 'link-id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.recurringExpenses.retrieve('linkID')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Recurring Expenses"
          ],
          "operationId": "PatchRecurringExpenses",
          "summary": "Complete a recurring expenses request",
          "description": "Used to resume an Recurring Expenses retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when save_data=false)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RecurringExpenses"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when save_data=true)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RecurringExpenses"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume Recurring Expenses\nincomes = client.RecurringExpenses.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.recurring_expenses.resume(\n  session: 'session_id',\n  token: 'token',\n  link: 'link_id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.recurringExpenses.resume('sessionId', 'token', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/recurring-expenses/{id}/": {
        "get": {
          "tags": [
            "Recurring Expenses"
          ],
          "operationId": "DetailRecurringExpense",
          "summary": "Get a recurring expense's details",
          "description": "Get the details of a specific recurring expense.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `recurring-expenses.id` you want to get detailed information about.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RecurringExpenses"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get Recurring Expense\nclient.RecurringExpenses.get('recurring-expenses.id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.recurring_expenses.detail id: 'recurring-expenses.id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.recurringExpenses.detail('recurring-expenses.id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Recurring Expenses"
          ],
          "operationId": "DestroyRecurringExpense",
          "summary": "Delete a recurring expense",
          "description": "Delete a specific recurring expense from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `recurring-expenses.id` that you want to delete",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete Tax compliance status\nclient.RecurringExpenses.delete('recurring-expenses.id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.recurring_expenses.delete id: 'recurring-expenses.id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.recurringExpenses.delete('recurring-expenses.id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/investments/portfolios/": {
        "get": {
          "tags": [
            "Investment Portfolios"
          ],
          "operationId": "ListPortfolio",
          "description": "Get a paginated list of all the existing portfolios (and their instruments) in your Belvo account. By default, we return up to 100 results per page.",
          "summary": "List all portfolios",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvestmentsPortfoliosPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List Investment Portfolios\nfor portfolio in client.InvestmentsPortfolios.list():\npprint(portfolio)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.investments_portfolio.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.investmentsPortfolios.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Investment Portfolios"
          ],
          "operationId": "RetrievePortfolio",
          "summary": "Retrieve portfolios for a link",
          "description": "Retrieve all portfolios for an existing link.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvestmentsPortfolio"
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvestmentsPortfolio"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve Investment Portfolios\nclient.InvestmentsPortfolios.create('link-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.investments_portfolio.retrieve(\n  link: 'link-id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.investmentsPortfolios.retrieve('linkID')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "patch": {
          "tags": [
            "Investment Portfolios"
          ],
          "operationId": "PatchPortfolio",
          "summary": "Complete a portfolios request",
          "description": "Used to resume a portfolio retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBodyWithoutSaveData"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvestmentsPortfolio"
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvestmentsPortfolio"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume Investment Portfolios\ninvestments_portfolios = client.InvestmentsPortfolios.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.investments_portfolio.resume(\n  session: 'session_id',\n  token: 'token',\n  link: 'link_id'\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.investmentsPortfolios.resume('sessionId', 'token', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/investments/portfolios/{id}/": {
        "get": {
          "tags": [
            "Investment Portfolios"
          ],
          "operationId": "DetailPortfolio",
          "summary": "Get a portfolio's details",
          "description": "Get the details of a specific portfolio.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              },
              "description": "The `portfolio.id` you want to get detailed information about."
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/InvestmentsPortfolio"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get Investment Portfolio\nclient.InvestmentsPortfolios.get('investments-portfolios.id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.investments_portfolio.detail id: 'investments-portfolios.id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.investmentsPortfolios.detail('investments-portfolios.id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Investment Portfolios"
          ],
          "operationId": "DestroyPortfolio",
          "summary": "Delete a portfolio",
          "description": "Delete a specific investment portfolio and all associated instruments, transactions, and owners from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              },
              "description": "The `portfolio.id` that you want to delete."
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete Investment Portfolio\nclient.InvestmentsPortfolios.delete('investment-portfolio.id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.investments_portfolio.delete id: 'investment-portfolio.id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.investmentsPortfolios.delete('investment-portfolio.id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/receivables/transactions/": {
        "get": {
          "tags": [
            "Receivable Transactions"
          ],
          "operationId": "ListReceivableTransactions",
          "description": "Get a paginated list of all the existing receivable transactions in your Belvo account. We return up to 100 results per page.",
          "summary": "List all receivable transactions",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "account",
              "in": "query",
              "description": "The `account.id` you want to filter by.\n\nℹ️ We highly recommend adding either the `link.id` or the `account.id` filters in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "d979df3a-5d0f-4cc9-9bd4-b75c28b45963"
              }
            },
            {
              "name": "account__in",
              "in": "query",
              "description": "Return receivable transactions only for these `account.id`s.",
              "schema": {
                "type": "string",
                "example": "24ccab1d-3a86-4136-a6eb-e04bf52b356f,beb2b197-3cf7-428d-bef3-f415c0d57509"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return receivable transactions that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return receivable transactions that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return receivable transactions that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return receivable transactions that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return receivable transactions that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            },
            {
              "name": "value_date",
              "in": "query",
              "description": "Return receivable transactions for exactly this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "value_date__gt",
              "in": "query",
              "description": "Return receivable transactions for after this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-06"
              }
            },
            {
              "name": "value_date__gte",
              "in": "query",
              "description": "Return receivable transactions for this date or later (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "value_date__lt",
              "in": "query",
              "description": "Return receivable transactions for before this date (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-02"
              }
            },
            {
              "name": "value_date__lte",
              "in": "query",
              "description": "Return receivable transactions for this date or earlier (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01"
              }
            },
            {
              "name": "value_date__range",
              "in": "query",
              "description": "Return receivable transactions for this date range (`YYYY-MM-DD` or full ISO-8601 timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-01,2022-05-06"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReceivablesTransactionsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Receivable Transactions"
          ],
          "operationId": "RetrieveReceivableTransactions",
          "summary": "Retrieve receivable transactions for a link",
          "description": "Retrieve all receivable transactions for an existing link.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceivableTransactionRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReceivablesTransaction"
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReceivablesTransaction"
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/receivables/transactions/{id}/": {
        "get": {
          "tags": [
            "Receivable Transactions"
          ],
          "operationId": "DetailReceivableTransaction",
          "summary": "Get a receivable transaction's details",
          "description": "Get the details of a specific receivable transaction.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              },
              "description": "The `transaction.id` you want to get detailed information about."
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReceivablesTransaction"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Receivable Transactions"
          ],
          "operationId": "DestroyReceivableTransaction",
          "summary": "Delete a receivable transaction",
          "description": "Delete a specific receivable transaction from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              },
              "description": "The `transaction.id` that you want to delete."
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/risk-insights/": {
        "get": {
          "tags": [
            "Risk Insights"
          ],
          "operationId": "ListRiskInsights",
          "summary": "List all risk insights",
          "description": "Get a paginated list of all risk insight analyses in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information for this `risk-insight.id`.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information for these `risk-insight.id`s.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RiskInsightsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "cURL",
              "source": "curl https://sandbox.belvo.com/api/risk-insights/ \\\n-u [Secret Key ID]:[Secret Key PASSWORD]\n"
            },
            {
              "lang": "python",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List Risk insights\nfor risk_insight in client.RiskInsights.list():\npprint(income)\n"
            },
            {
              "lang": "ruby",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.risk_insights.list\n"
            },
            {
              "lang": "javascript",
              "source": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.riskInsights.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
            }
          ]
        },
        "post": {
          "tags": [
            "Risk Insights"
          ],
          "operationId": "RetrieveRiskInsights",
          "summary": "Retrieve risk insights for a link",
          "description": "Request the risk insights for a given link ID.\n\nIf you need to know the currency of the account, just do a GET Details to the accounts endpoint (using the ID you receive from the accounts response).",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when save_data=false)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RiskInsights"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when save_data=true)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RiskInsights"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "cURL",
              "source": "curl -X POST \\\n  https://sandbox.belvo.com/api/risk-insights/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"link_id\"\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
            },
            {
              "lang": "python",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve Risk insights\nclient.RiskInsights.create('link-id')\n"
            },
            {
              "lang": "ruby",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.risk_insights.retrieve(\n  link: 'link-id'\n)\n"
            },
            {
              "lang": "javascript",
              "source": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.riskInsights.retrieve('linkID')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
            }
          ]
        },
        "patch": {
          "tags": [
            "Risk Insights"
          ],
          "operationId": "PatchRiskInsights",
          "summary": "Complete a risk insights request",
          "description": "Used to resume an Risk insights retrieve session that was paused because an MFA token was required by the institution.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when save_data=false)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RiskInsights"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when save_data=true)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RiskInsights"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "cURL",
              "source": "curl -X PATCH \\\nhttps://sandbox.belvo.com/api/risk-insights/ \\\n-H 'Content-Type: application/json' \\\n-H 'Host: sandbox.belvo.com' \\\n-H 'cache-control: no-cache' \\\n-d '{\n    \"session\": \"\",\n    \"token\": \"\",\n    \"link\": \"\"\n}' \\\n-u [Secret Key ID]:[Secret Key PASSWORD]\n"
            },
            {
              "lang": "python",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Resume Risk insights\nrisk_insights = client.RiskInsights.resume(\n  session=\"session_id\",\n  token=\"token\",\n  link=\"link_id\"\n)\n"
            },
            {
              "lang": "ruby",
              "source": "# For more information about our SDKs go to:\n    # https://developers.belvo.com/docs/belvo-sdks\n\n    require 'belvo'\n\n    client = Belvo::Client.new(\n      'Secret Key ID',\n      'Secret Key PASSWORD',\n      'sandbox'\n    )\n\n    client.risk_insights.resume(\n      session: 'session_id',\n      token: 'token',\n      link: 'link_id'\n    )\n"
            },
            {
              "lang": "javascript",
              "source": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.riskInsights.resume('sessionId', 'token', 'linkId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
            }
          ]
        }
      },
      "/api/risk-insights/{id}/": {
        "get": {
          "tags": [
            "Risk Insights"
          ],
          "operationId": "DetailRiskInsights",
          "summary": "Get a risk insight's details",
          "description": "Get the details of a specific risk insight.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `risk-insights.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RiskInsights"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "cURL",
              "source": "curl https://sandbox.belvo.com/api/risk-insights/{id} \\\n-u [Secret Key ID]:[Secret Key PASSWORD]\n"
            },
            {
              "lang": "python",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get Risk insight\nclient.RiskInsights.get('risk-insights.id')\n"
            },
            {
              "lang": "ruby",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.risk_insights.detail id: 'risk-insights.id'\n"
            },
            {
              "lang": "javascript",
              "source": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.riskInsights.detail('risk-insights.id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
            }
          ]
        },
        "delete": {
          "tags": [
            "Risk Insights"
          ],
          "operationId": "DestroyRiskInsights",
          "summary": "Delete a risk insight",
          "description": "Delete a specific risk insight from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `risk-insights.id` that you want to delete",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-code-samples": [
            {
              "lang": "cURL",
              "source": "curl -X DELETE \\\nhttps://sandbox.belvo.com/api/risk-insights/{id}/ \\\n-H 'Host: sandbox.belvo.com' \\\n-u [Secret Key ID]:[Secret Key PASSWORD]\n"
            },
            {
              "lang": "python",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete Risk insight\nclient.RiskInsights.delete('risk-insights.id')\n"
            },
            {
              "lang": "ruby",
              "source": "# For more information about our SDKs go to:\n# https://developers.belvo.com/docs/belvo-sdks\n\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.risk_insights.delete id: 'risk-insights.id'\n"
            },
            {
              "lang": "javascript",
              "source": "// For more information about our SDKs go to:\n// https://developers.belvo.com/docs/belvo-sdks\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.riskInsights.delete('risk-insights.id')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
            }
          ]
        }
      },
      "/api/tax-retentions/": {
        "get": {
          "tags": [
            "Tax retentions"
          ],
          "operationId": "ListTaxRetentions",
          "summary": "List all tax retentions",
          "description": "Get a paginated list of all existing tax retentions in your Belvo account. We return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return tax retentions that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return tax retentions that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return tax retentions that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return tax retentions that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return tax retentions that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaxRetentionsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Tax retentions"
          ],
          "operationId": "RetrieveTaxRetentions",
          "summary": "Retrieve tax retentions for a link",
          "description": "Retrieve tax retention information from a specific link. The maximum number of tax retentions that can be returned for a period is 500.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxRetentionsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TaxRetentions"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TaxRetentions"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/tax-retentions/{id}/": {
        "get": {
          "tags": [
            "Tax retentions"
          ],
          "operationId": "DetailTaxRetentions",
          "summary": "Get a tax retention's details",
          "description": "Get the details of a specific tax retention.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-retention.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaxRetentions"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Tax retentions"
          ],
          "operationId": "DestroyTaxRetention",
          "summary": "Delete a tax retention",
          "description": "Delete a specific tax retention from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-retention.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/tax-declarations/": {
        "get": {
          "tags": [
            "Tax declarations"
          ],
          "operationId": "ListTaxDeclarations",
          "summary": "List all tax declarations",
          "description": "Get a paginated list of all existing tax declarations in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            },
            {
              "name": "link",
              "in": "query",
              "description": "The `link.id` you want to filter by.\n\nℹ️ We highly recommend adding the `link.id` filter in order to improve your performance.\n",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4"
              }
            },
            {
              "name": "link__in",
              "in": "query",
              "description": "Return information for these `link.id`s.",
              "schema": {
                "type": "string",
                "example": "8848bd0c-9c7e-4f53-a732-ec896b11d4c4,cc2b13cf-336e-497c-9fad-e074b580df65"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return tax declarations that were last updated in Belvo's database after this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-05"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return tax declarations that were last updated in Belvo's database after or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-05-04"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return tax declarations that were last updated in Belvo's database before this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-04-01"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return tax declarations that were last updated in Belvo's database before or on this date (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-30"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return tax declarations that were last updated in Belvo's database between two dates (`YYYY-MM-DD` or full `ISO-8601` timestamp).",
              "schema": {
                "type": "string",
                "example": "2022-03-03,2022-05-04"
              }
            },
            {
              "name": "id",
              "in": "query",
              "description": "Return information for this `tax-declaration.id`.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73"
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "Return information for these `tax-declaration.id`s.",
              "schema": {
                "type": "string",
                "example": "eb42c21c-2d9e-4dc1-89b8-9401d4beca73,82b3f18c-055b-4f82-9fae-d2201815ab0c"
              }
            },
            {
              "name": "year",
              "in": "query",
              "description": "Return tax declarations for this year (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2021"
              }
            },
            {
              "name": "year__gt",
              "in": "query",
              "description": "Return tax declarations for after this year (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2020"
              }
            },
            {
              "name": "year__gte",
              "in": "query",
              "description": "Return tax declarations for this year or after (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2019"
              }
            },
            {
              "name": "year__lt",
              "in": "query",
              "description": "Return tax declarations for before this year (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2018"
              }
            },
            {
              "name": "year__lte",
              "in": "query",
              "description": "Return tax declarations for this year or earlier (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2017"
              }
            },
            {
              "name": "year__range",
              "in": "query",
              "description": "Return tax declarations between these two years (`YYYY`).",
              "schema": {
                "type": "string",
                "example": "2017,2021"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TaxDeclarationIndividualPaginated"
                      },
                      {
                        "$ref": "#/components/schemas/TaxDeclarationBusinessPaginated"
                      }
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-declarations/ \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom pprint import pprint\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# List tax declarations\nfor tax_declaration in client.TaxDeclarations.list()\n  pprint(tax_declaration)\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_declarations.list\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxDeclarations.list()\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "post": {
          "tags": [
            "Tax declarations"
          ],
          "operationId": "RetrieveTaxDeclarations",
          "summary": "Retrieve tax declarations for a link",
          "description": "Retrieve tax declaration information for a specific fiscal link.",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxDeclarationsRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok (when `save_data=false`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TaxDeclarationBusiness"
                        },
                        {
                          "$ref": "#/components/schemas/TaxDeclarationIndividual"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/TaxDeclarationBusiness"
                        },
                        {
                          "$ref": "#/components/schemas/TaxDeclarationIndividual"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "### Retrieve Tax Declarations\ncurl -X POST \\\n  https://sandbox.belvo.com/api/tax-declarations/ \\\n  -H 'Content-Type: application/json' \\\n  -H 'Host: sandbox.belvo.com' \\\n  -H 'cache-control: no-cache' \\\n  -d '{\n    \"link\": \"\",\n    \"year_from\": YYYY,\n    \"year_to\": YYYY,\n    \"attach_pdf\": false\n}' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Retrieve Tax Declarations\ntax_declarations = client.TaxDeclarations.create(\n  link=\"link_id\",\n  year_from=\"2019\",\n  year_to=\"2020\",\n  attach_pdf=True\n)"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nsandbox = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\n# Retrieve Tax Declarations\nsandbox.tax_declarations.retrieve(\n  link: 'link-id',\n  year_from: \"2019\",\n  year_to: \"2020\"\n)\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\n// Retrieve Tax Declarations\nclient.connect()\n  .then(function () {\n    client.taxDeclarations.retrieve('linkID', \"2019\", \"2020\")\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});"
              }
            ]
          }
        }
      },
      "/api/tax-declarations/{id}/": {
        "get": {
          "tags": [
            "Tax declarations"
          ],
          "operationId": "DetailTaxDeclaration",
          "summary": "Get a tax declaration's details",
          "description": "Get the details of a specific Tax declaration.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-declaration.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/TaxDeclarationIndividual"
                      },
                      {
                        "$ref": "#/components/schemas/TaxDeclarationBusiness"
                      }
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl https://sandbox.belvo.com/api/tax-compliance-status/{id} \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Get Tax declaration\nclient.TaxDeclaration.get('tax-declaration-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nsandbox.tax_declaration.detail id: 'tax-declaration-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxDeclaration.detail('taxDeclarationId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        },
        "delete": {
          "tags": [
            "Tax declarations"
          ],
          "operationId": "DestroyTaxDeclaration",
          "summary": "Delete a tax declration",
          "description": "Delete a specific Tax declaration from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `tax-declration.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          },
          "x-readme": {
            "code-samples": [
              {
                "language": "cURL",
                "code": "curl -X DELETE \\\n  https://sandbox.belvo.com/api/tax-compliance-status/{id}/ \\\n  -H 'Host: sandbox.belvo.com' \\\n  -u [Secret Key ID]:[Secret Key PASSWORD]\n"
              },
              {
                "language": "python",
                "name": "Belvo Python SDK",
                "code": "# check our python-client library on github\n# https://github.com/belvo-finance/belvo-python\nfrom belvo.client import Client\n\n# Login to Belvo API\nclient = Client(\"Secret Key ID\", \"Secret Key PASSWORD\", \"sandbox\")\n\n# Delete Tax declaration\nclient.TaxDeclaration.delete('tax-declaration-id')\n"
              },
              {
                "language": "ruby",
                "name": "Belvo Ruby SDK",
                "code": "# check our Ruby gem on github\n# https://github.com/belvo-finance/belvo-ruby\nrequire 'belvo'\n\nclient = Belvo::Client.new(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n)\n\nclient.tax_declarations.delete id: 'tax-declaration-id'\n"
              },
              {
                "language": "node",
                "name": "Belvo Node SDK",
                "code": "// check our node package on github\n// https://github.com/belvo-finance/belvo-js\n\nvar belvo = require('belvo').default;\n\nvar client = new belvo(\n  'Secret Key ID',\n  'Secret Key PASSWORD',\n  'sandbox'\n);\n\nclient.connect()\n  .then(function () {\n    client.taxDeclaration.delete('taxDeclarationId')\n      .then(function (res) {\n        console.log(res);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n});\n"
              }
            ]
          }
        }
      },
      "/api/employment-records/": {
        "get": {
          "tags": [
            "Employment Records"
          ],
          "operationId": "ListEmploymentRecords",
          "summary": "List all employment records",
          "description": "Get a paginated list of all existing employment records in your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "required": false,
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page. \n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 1000. If you enter a value greater than 1000, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 1000,
                "example": 100
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmploymentRecordsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Employment Records"
          ],
          "operationId": "RetrieveEmploymentRecordDetails",
          "summary": "Retrieve employment record details",
          "description": "Retrieve employment record details for an individual.\n",
          "parameters": [
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmploymentRecordRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EmploymentRecord"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created (when `save_data=true`)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/EmploymentRecord"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Request Timeout",
                    "description": "Belvo has a limit regarding the time it takes to log in, retrieve account data, and log out. A timeout occurs when there is a very high amount of data and everything could not be obtained within the allotted time.",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "428": {
              "description": "MFA Token Required",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TokenRequiredResponse"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/employment-records/{id}/": {
        "get": {
          "tags": [
            "Employment Records"
          ],
          "operationId": "DetailEmploymentRecord",
          "summary": "Get an employment record's details",
          "description": "Get the details of a specific employment record.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `employment-record.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "omit",
              "required": false,
              "in": "query",
              "description": "Omit certain fields from being returned in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance"
              }
            },
            {
              "name": "fields",
              "required": false,
              "in": "query",
              "description": "Return only the specified fields in the response. For more information, see our [Filtering responses](https://developers.belvo.com/docs/searching-and-filtering) DevPortal article.",
              "schema": {
                "type": "string",
                "example": "link,balance,account"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmploymentRecord"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Employment Records"
          ],
          "operationId": "DestroyEmploymentRecord",
          "summary": "Delete an employment record",
          "description": "Delete a specific employment record from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `employment-record.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "You made a request where you:\n\n  - provided the wrong URL.\n  - used an ID (for a link, account, transaction, and so on) that is not associated with your Belvo account.",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/enrich/incomes/": {
        "post": {
          "tags": [
            "Income Verification"
          ],
          "operationId": "VerifyIncome",
          "summary": "Verify incomes",
          "description": "Send through your raw data and receive enriched information for each of your user's income streams.\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n<strong>Note: </strong> Belvo can process up to 10,000 unique transactions per request.\n</div>",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EyodIncomeVerificationRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Income"
                    }
                  },
                  "examples": {
                    "EnrichedIncome": {
                      "$ref": "#/components/examples/IncomeVerificationEyod"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Access to Belvo API denied",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to access Belvo's resource without the correct permissions.",
                    "items": {
                      "$ref": "#/components/schemas/AccessToResourceDenied"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/categorization/": {
        "post": {
          "tags": [
            "Categorization"
          ],
          "operationId": "CategorizeTransactions",
          "summary": "Categorize transactions",
          "description": "Send through your raw transaction data and receive enriched information for each of your transactions.\n\n<div style=\"background-color:#f4f6f8; border-left: 6px solid #5bc0de;padding: 12px;margin-left: 25px; border-radius: 4px; margin-right: 25px\">\n<strong>Note: </strong> Belvo can process up to 10,000 unique transactions per request.\n</div>",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizationRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Categorization"
                  },
                  "examples": {
                    "CategorizeTransactions": {
                      "$ref": "#/components/examples/CategorizationExample"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Access to Belvo API denied",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to access Belvo's resource without the correct permissions.",
                    "items": {
                      "$ref": "#/components/schemas/AccessToResourceDenied"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/secret-keys/": {
        "post": {
          "tags": [
            "Secret Keys"
          ],
          "operationId": "CreateSecretKeys",
          "summary": "Request API keys",
          "description": "Request API keys to use with Belvo's Payments API.\n\nYou will need to send through the username and password (in plain text) you use to login to the Belvo dashboard in the Authorization header.\n\nFor example:\n\n  ```curl\n  POST https://api.belvo.com/payments/secret-keys/\n  Authorization: Basic username:password\n  ```\n",
          "parameters": [],
          "responses": {
            "201": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SecretKeys"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "408": {
              "description": "Request Timeout Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Secret Keys"
          ],
          "operationId": "ListSecretKeys",
          "summary": "List all secret keys",
          "description": "Get a paginated list of all existing secret keys in your Belvo account. We return up to 100 results per page.\n\n\n  **Note**: We only return the ID of the secret keys.",
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SecretKeysPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/webhooks/": {
        "post": {
          "tags": [
            "Payment Webhooks"
          ],
          "operationId": "RegisterPaymentWebhook",
          "summary": "Register a new payment webhook",
          "description": "Register a new payments webhook for your Belvo account.\n",
          "parameters": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentWebhookRequest"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/paymentWebhook"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "description": "This error occurs when you try to make an API call using incorrect Belvo API credentials (either your secret key or secret password, or both, are incorrect).",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "title": "Unexpected Error",
                    "description": "This error occurs when we (Belvo) have encountered an internal system error (sorry about that) or due to an unsupported response from the institution.",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Payment Webhooks"
          ],
          "operationId": "ListPaymentWebhooks",
          "summary": "List all payment webhooks",
          "description": "List all payment webhooks associated with your Belvo account.",
          "parameters": [],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentsWebhooksPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/webhooks/{id}/": {
        "get": {
          "tags": [
            "Payment Webhooks"
          ],
          "operationId": "DetailPaymentWebhooks",
          "summary": "Get details about a payment webhook",
          "description": "Get the details about a specific payment webhook.",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The `webhook.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "a3b92311-1888-449f-acaa-49ae28d68fcd"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/paymentWebhook"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Payment Webhooks"
          ],
          "operationId": "DeletePaymentWebhooks",
          "summary": "Delete a payment webhook",
          "description": "Delete a specific payment webhook from your Belvo account.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "The `webhook.id` that you want to delete.",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No content"
            },
            "401": {
              "description": "Authentication to Belvo API failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/institutions/": {
        "get": {
          "tags": [
            "Payment Institutions"
          ],
          "operationId": "ListPaymentInstitutions",
          "summary": "List all payment institutions",
          "description": "List all available payment institutions.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "country",
              "in": "query",
              "description": "Return institutions only for this country.",
              "schema": {
                "type": "string",
                "example": "COL"
              }
            },
            {
              "name": "country__in",
              "in": "query",
              "description": "Return institutions only for one of these countries.",
              "schema": {
                "type": "string",
                "example": "COL,BRA"
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return results only for this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return results only after this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return results only for this date and after (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return results only before this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return results only for this date and before (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return results between this date range (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15,2022-09-20"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentsInstitutionsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/institutions/{id}/": {
        "get": {
          "tags": [
            "Payment Institutions"
          ],
          "operationId": "DetailPaymentInstitution",
          "summary": "Get details about a payment institution",
          "description": "Get the details about a specific payment institution",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The payment `institution.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "a3b92311-1888-449f-acaa-49ae28d68fcd"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/paymentInstitution"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/customers/": {
        "post": {
          "tags": [
            "Customers"
          ],
          "operationId": "CreateCustomer",
          "summary": "Create a new customer",
          "description": "Create a new customer to send or request funds.",
          "parameters": [],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CreateCustomerOfpi"
                    },
                    {
                      "$ref": "#/components/schemas/CreateCustomerPse"
                    }
                  ]
                },
                "examples": {
                  "OfpiPixIndividual": {
                    "$ref": "#/components/examples/CreateCustomerOfpiIndividual"
                  },
                  "OfpiPixBusiness": {
                    "$ref": "#/components/examples/CreateCustomerOfpiBusiness"
                  },
                  "PseIndividual": {
                    "$ref": "#/components/examples/CreateCustomerPseIndividual"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "OK (Created)",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CustomerOfpi"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerPse"
                      }
                    ]
                  },
                  "examples": {
                    "OfpiPixIndividual": {
                      "$ref": "#/components/examples/ResponseCustomerOfpiIndividual"
                    },
                    "OfpiPixBusiness": {
                      "$ref": "#/components/examples/ResponseCustomerOfpiBusiness"
                    },
                    "PseIndividual": {
                      "$ref": "#/components/examples/ResponseCustomerPseIndividual"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Customers"
          ],
          "operationId": "ListCustomers",
          "summary": "List all customers",
          "description": "List all customers associated with your Belvo account.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "One or more `customer.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return results only for this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return results only after this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return results only for this date and after (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return results only before this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return results only for this date and before (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return results between this date range (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15,2022-09-20"
              }
            },
            {
              "name": "customer__type",
              "in": "query",
              "description": "Return results only for this customer type (either `INDIVIDUAL` or `BUSINESS`).",
              "schema": {
                "type": "string",
                "example": "INDIVIDUAL"
              }
            },
            {
              "name": "search",
              "in": "query",
              "description": "Return results for one or more customers that match either the name or email you searched for. \n\n**Note:** This filter supports both full and partial search queries, with a minimum of three characters required. For example, searching for `car` may match the following values:\n\n  - `Carlos Vives`\n  - `Carmen Domínguez` \n  - `carlos.vives@musicacolombia.co`",
              "schema": {
                "type": "string",
                "example": "car"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerPaginatedResponse"
                  },
                  "examples": {
                    "OfpiPixIndividual": {
                      "$ref": "#/components/examples/ResponseCustomerOfpiIndividualPaginated"
                    },
                    "OfpiPixBusiness": {
                      "$ref": "#/components/examples/ResponseCustomerOfpiBusinessPaginated"
                    },
                    "PseIndividual": {
                      "$ref": "#/components/examples/ResponseCustomerPseIndividualPaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/customers/{id}/": {
        "get": {
          "tags": [
            "Customers"
          ],
          "operationId": "DetailCustomer",
          "summary": "Get details about a customer",
          "description": "Get the details about a specific customer",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The `customer.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "a3b92311-1888-449f-acaa-49ae28d68fcd"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/CustomerOfpi"
                      },
                      {
                        "$ref": "#/components/schemas/CustomerPse"
                      }
                    ]
                  },
                  "examples": {
                    "OfpiPixIndividual": {
                      "$ref": "#/components/examples/ResponseCustomerOfpiIndividual"
                    },
                    "OfpiPixBusiness": {
                      "$ref": "#/components/examples/ResponseCustomerOfpiBusiness"
                    },
                    "PseIndividual": {
                      "$ref": "#/components/examples/ResponseCustomerPseIndividual"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/bank-accounts/": {
        "post": {
          "tags": [
            "Bank Accounts"
          ],
          "operationId": "CreateBankAccount",
          "summary": "Create a new bank account",
          "description": "Create a new bank account from which to send or request funds.",
          "parameters": [],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CreateBankAccountOfpi"
                    },
                    {
                      "$ref": "#/components/schemas/CreateBankAccountPse"
                    }
                  ]
                },
                "examples": {
                  "OfpiPixInfo": {
                    "$ref": "#/components/examples/CreateBankAccountOrganizationPixInfo"
                  },
                  "OfpiPixKey": {
                    "$ref": "#/components/examples/CreateBankAccountOrganizationPixKey"
                  },
                  "PseInfo": {
                    "$ref": "#/components/examples/CreateBankAccountOrganizationPse"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "OK (Created)",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BankAccountOfpiResponse"
                      },
                      {
                        "$ref": "#/components/schemas/BankAccountPseResponse"
                      }
                    ]
                  },
                  "examples": {
                    "OfpiPixInfo": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPixInfo"
                    },
                    "OfpiPixKey": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPixKey"
                    },
                    "PseInfo": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPse"
                    }
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Bank Accounts"
          ],
          "operationId": "ListBankAccount",
          "summary": "List all bank accounts",
          "description": "List all bank accounts associated with your Belvo account.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "One or more `bank-account.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return results only for this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return results only after this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return results only for this date and after (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return results only before this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return results only for this date and before (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return results between this date range (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15,2022-09-20"
              }
            },
            {
              "name": "number",
              "in": "query",
              "description": "Return results that exactly match a value.",
              "schema": {
                "type": "string",
                "example": "1231564526"
              }
            },
            {
              "name": "number__in",
              "in": "query",
              "description": "Return results for listed numbers.",
              "schema": {
                "type": "string",
                "example": "1231564526,15648325"
              }
            },
            {
              "name": "customer",
              "in": "query",
              "description": "The `customer.id` you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d"
              }
            },
            {
              "name": "institution",
              "in": "query",
              "description": "The `institution.id` you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d"
              }
            },
            {
              "name": "holder__type",
              "in": "query",
              "description": "Return results for a matched value type.",
              "schema": {
                "type": "string",
                "example": "INDIVIDUAL"
              }
            },
            {
              "name": "holder__type__in",
              "in": "query",
              "description": "Return results for listed holder types.",
              "schema": {
                "type": "string",
                "example": "INDIVIDUAL,BUSINESS"
              }
            },
            {
              "name": "providers",
              "in": "query",
              "description": "Return results only for this value.",
              "schema": {
                "type": "string",
                "example": "payments_way"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccountPaginatedResponse"
                  },
                  "examples": {
                    "OfpiPixInfo": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPixInfoPaginated"
                    },
                    "OfpiPixKey": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPixKeyPaginated"
                    },
                    "PseInfo": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPsePaginated"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/bank-accounts/{id}/": {
        "get": {
          "tags": [
            "Bank Accounts"
          ],
          "operationId": "DetailBankAccount",
          "summary": "Get details about a bank account",
          "description": "Get the details about a specific bank account",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The `bank-account.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "a3b92311-1888-449f-acaa-49ae28d68fcd"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/BankAccountOfpiResponse"
                      },
                      {
                        "$ref": "#/components/schemas/BankAccountPseResponse"
                      }
                    ]
                  },
                  "examples": {
                    "OfpiPixInfo": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPixInfo"
                    },
                    "OfpiPixKey": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPixKey"
                    },
                    "PseInfo": {
                      "$ref": "#/components/examples/ResponseBankAccountOrganizationPse"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/payment-links/": {
        "post": {
          "tags": [
            "Payment Links"
          ],
          "operationId": "CreatePaymentlink",
          "summary": "Create a payment link",
          "description": "Create a new payment link to start a hosted-widget payment.",
          "parameters": [],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CreatePaymentLinkOfpi"
                    },
                    {
                      "$ref": "#/components/schemas/CreatePaymentLinkPse"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "OK (Created)",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PaymentLinkOfpi"
                      },
                      {
                        "$ref": "#/components/schemas/PaymentLinkPse"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Payment Links"
          ],
          "operationId": "ListPaymentLinks",
          "summary": "List all payment links",
          "description": "List all payment links associated with your Belvo account. By default, we return up to 100 results per page.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "page_size",
              "required": false,
              "in": "query",
              "description": "Indicates how many results to return per page. By default we return 100 results per page.\n\nℹ️ The minimum number of results returned per page is 1 and the maximum is 100. If you enter a value greater than 100, our API will default to the maximum value (1000).\n",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "minimum": 1,
                "maximum": 100,
                "example": 100
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return results only for this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return results only after this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return results only for this date and after (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return results only before this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return results only for this date and before (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return results between this date range (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15,2022-09-20"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Return payment links with this status. Can be either `ACTIVE` or `INACTIVE`.",
              "schema": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE"
                ],
                "example": "ACTIVE"
              }
            },
            {
              "name": "ordering",
              "in": "query",
              "description": "Return results in a specified time order. Can be either:\n\n  - `created_at` returns payment links from newest to oldest (in ascending order).\n  - `-created_at` returns payment links from oldest to newest (in descending order).",
              "schema": {
                "type": "string",
                "enum": [
                  "created_at",
                  "-created_at"
                ],
                "x-fern-enum": {
                  "created_at": {
                    "name": "Ascending"
                  },
                  "-created_at": {
                    "name": "Descending"
                  }
                },
                "example": "-created_at"
              }
            },
            {
              "name": "search",
              "in": "query",
              "description": "Return results for one or more payment links that match the description you searched for. \n\n**Note:** This filter supports both full and partial search queries, with a minimum of three characters required. For example, searching for `trai` may match the following values:\n\n  - `Awesome training sneakers` \n  - `Training equipment`",
              "schema": {
                "type": "string",
                "example": "trai"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentLinkPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/payment-links/{access_token}/": {
        "get": {
          "tags": [
            "Payment Links"
          ],
          "operationId": "DetailCreatePaymentlink",
          "summary": "Get details about a payment link",
          "description": "Get the details about a payment link.",
          "parameters": [
            {
              "name": "access_token",
              "required": true,
              "in": "path",
              "description": "The `access_token` of the payment link you want to get detailed information about. \n\n**Note:** You can retrieve the `access_token` for a payment link by making a [GET List all payment links](https://developers.belvo.com/reference/listpaymentlinks) request.",
              "schema": {
                "type": "string",
                "example": "YggaKvPbM5aJhksu1BEwDI5FKTcUc5wZqNB-wH7MFGU"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK (Created)",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PaymentLinkOfpi"
                      },
                      {
                        "$ref": "#/components/schemas/PaymentLinkPse"
                      }
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/payment-intents/": {
        "post": {
          "tags": [
            "Payment Intents"
          ],
          "operationId": "CreatePaymentIntent",
          "summary": "Create a new payment intent",
          "description": "Create a payment intent.",
          "parameters": [],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CreatePaymentIntentPse"
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "OK (Created)",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PaymentIntentPse"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "408": {
              "description": "Request Timeout Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RequestTimeoutError"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Unexpected Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnexpectedError"
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Payment Intents"
          ],
          "operationId": "ListPaymentIntents",
          "summary": "List all payment intents",
          "description": "List all payment intents associated with your Belvo account.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "One or more `payment-intent.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return results only for this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return results only after this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return results only for this date and after (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return results only before this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return results only for this date and before (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return results between this date range (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15,2022-09-20"
              }
            },
            {
              "name": "provider",
              "in": "query",
              "description": "Return results only for this value.",
              "schema": {
                "type": "string",
                "example": "payments_way"
              }
            },
            {
              "name": "payment_method_type",
              "in": "query",
              "description": "Return results only for this value.",
              "schema": {
                "type": "string",
                "example": "pse"
              }
            },
            {
              "name": "customer",
              "in": "query",
              "description": "The `customer.id` you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d"
              }
            },
            {
              "name": "customer__in",
              "in": "query",
              "description": "One or more `customer.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "amount",
              "in": "query",
              "description": "Return results only for this value.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__gt",
              "in": "query",
              "description": "Return results only for more than this amount.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__gte",
              "in": "query",
              "description": "Return results only for and more than this amount.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__lt",
              "in": "query",
              "description": "Return results only for less than this amount.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__lte",
              "in": "query",
              "description": "Return results only for this amount or less.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "status",
              "in": "query",
              "description": "Return results only for this value.",
              "schema": {
                "type": "string",
                "example": "SUCCEEDED"
              }
            },
            {
              "name": "status__in",
              "in": "query",
              "description": "Return results for listed status.",
              "schema": {
                "type": "string",
                "example": "PROCESSING,SUCCEEDED"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentIntentPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/payment-intents/{id}/": {
        "patch": {
          "tags": [
            "Payment Intents"
          ],
          "operationId": "PatchPaymentIntent",
          "summary": "Complete a payment intent",
          "description": "Complete a new payment intent.\n\nDuring the payment intent flow, you need to fill in the payment intent with required information about your customer (their institution, bank account, and login credentials). This is done by sending PATCH requests with the information that Belvo asked you display in each `next_step` object. If you need more information on how to complete a payment intent, check our <a href=\"https://developers.belvo.com/docs/colombia-pse#payment-intents\" target=\"_blank\">PSE payment initiation</a> guides for  🇨🇴 Colombia.",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The `payment-intent.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "a3b92311-1888-449f-acaa-49ae28d68fcd"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchPaymentIntentPse"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK (Created)",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PaymentIntentPse"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "$ref": "#/components/responses/BadRequestError"
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Payment Intents"
          ],
          "operationId": "DetailPaymentIntent",
          "summary": "Get details about a payment intent",
          "description": "Get the details about a specific payment intent.",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The `payment-intent.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "a3b92311-1888-449f-acaa-49ae28d68fcd"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PaymentIntentPse"
                      }
                    ]
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/transactions/": {
        "get": {
          "tags": [
            "Payment Transactions"
          ],
          "operationId": "ListPaymentTransactions",
          "summary": "List all payment transactions",
          "description": "List all payment transactions associated with your Belvo account.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "description": "A page number within the paginated result set.",
              "schema": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            },
            {
              "name": "id__in",
              "in": "query",
              "description": "One or more payment `transaction.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "created_at",
              "in": "query",
              "description": "Return results only for this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gt",
              "in": "query",
              "description": "Return results only after this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__gte",
              "in": "query",
              "description": "Return results only for this date and after (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lt",
              "in": "query",
              "description": "Return results only before this date (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__lte",
              "in": "query",
              "description": "Return results only for this date and before (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15"
              }
            },
            {
              "name": "created_at__range",
              "in": "query",
              "description": "Return results between this date range (in `YYYY-MM-DD` format).",
              "schema": {
                "type": "string",
                "example": "2022-09-15,2022-09-20"
              }
            },
            {
              "name": "charge",
              "in": "query",
              "description": "The `charge.id` you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d"
              }
            },
            {
              "name": "charge__in",
              "in": "query",
              "description": "One or more `charge.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "beneficiary",
              "in": "query",
              "description": "The `beneficiary.id` you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d"
              }
            },
            {
              "name": "beneficiary__in",
              "in": "query",
              "description": "One or more `beneficiary.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "payer",
              "in": "query",
              "description": "The payer's `bank-account.id` you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d"
              }
            },
            {
              "name": "payer__in",
              "in": "query",
              "description": "One or more payer `bank-account.id`s (comma separated) that you want to get results for.",
              "schema": {
                "type": "string",
                "example": "24e5b3a5-19aa-40fe-91e5-4db7f22ecc2d,bfe57b64-f033-4a00-97f8-83ec88440264"
              }
            },
            {
              "name": "transaction__type",
              "in": "query",
              "description": "Return results for a matched value type.",
              "schema": {
                "type": "string",
                "example": "INFLOW"
              }
            },
            {
              "name": "currency",
              "in": "query",
              "description": "Return results for a matched value type.",
              "schema": {
                "type": "string",
                "example": "COP"
              }
            },
            {
              "name": "description",
              "in": "query",
              "description": "Return results for a matched value type.",
              "schema": {
                "type": "string",
                "example": "Training shoes"
              }
            },
            {
              "name": "amount",
              "in": "query",
              "description": "Return results only for this value.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__gt",
              "in": "query",
              "description": "Return results only for more than this amount.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__gte",
              "in": "query",
              "description": "Return results only for and more than this amount.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__lt",
              "in": "query",
              "description": "Return results only for less than this amount.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__lte",
              "in": "query",
              "description": "Return results only for this amount or less.",
              "schema": {
                "type": "string",
                "example": "1000.00"
              }
            },
            {
              "name": "amount__range",
              "in": "query",
              "description": "Return results between this amount range",
              "schema": {
                "type": "string",
                "example": "1001.00,2000.00"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentsTransactionsPaginatedResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/payments/transactions/{id}/": {
        "get": {
          "tags": [
            "Payment Transactions"
          ],
          "operationId": "DetailPaymentTransactions",
          "summary": "Get details about a payment transaction",
          "description": "Get the details about a specific payment transaction.",
          "parameters": [
            {
              "name": "id",
              "required": true,
              "in": "path",
              "description": "The `transaction.id` you want to get detailed information about.",
              "schema": {
                "type": "string",
                "format": "uuid",
                "example": "a3b92311-1888-449f-acaa-49ae28d68fcd"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/paymentTransaction"
                  }
                }
              }
            },
            "401": {
              "description": "Authentication Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/UnauthorizedError"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Not Found Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/NotFoundError"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "x-readme": {
      "explorer-enabled": true,
      "proxy-enabled": true,
      "samples-enabled": true,
      "samples-languages": [
        "curl",
        "node",
        "ruby",
        "python"
      ]
    }
  }
}