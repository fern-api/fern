{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "BadGatewayError": {
            "docs": "RFC9457",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 502,
            "type": "ErrorResponse",
          },
          "BadRequestError": {
            "docs": "RFC9457",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 400,
            "type": "ErrorResponse",
          },
          "ForbiddenError": {
            "docs": "RFC9457",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 403,
            "type": "ErrorResponse",
          },
          "GatewayTimeoutError": {
            "docs": "RFC9457",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 504,
            "type": "ErrorResponse",
          },
          "InternalServerError": {
            "docs": "RFC9457",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 500,
            "type": "ErrorResponse",
          },
          "NotFoundError": {
            "docs": "RFC9457",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 404,
            "type": "ErrorResponse",
          },
          "UnauthorizedError": {
            "docs": "RFC9457",
            "examples": [
              {
                "docs": undefined,
                "name": undefined,
                "value": {},
              },
            ],
            "status-code": 401,
            "type": "ErrorResponse",
          },
        },
        "navigation": [
          "interactions",
          "facts",
          "documents",
          "codes",
          "recordings",
          "transcripts",
        ],
        "types": {
          "AdditionalCode": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "The additional code",
                "type": "optional<string>",
              },
              "description": {
                "docs": "Description of the additional code",
                "type": "optional<string>",
              },
              "state": {
                "docs": "State of the additional code",
                "type": "optional<CodesState>",
              },
              "subsetName": {
                "docs": "Category or subset of the additional code",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AlignedSegment": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "alignmentPercentage": {
                "docs": "Alignment percentage between the target and source segment.",
                "type": "optional<double>",
              },
              "sourceReference": "optional<list<AlignedSegmentSourceReferenceItem>>",
              "targetSegment": "optional<TargetSegment>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "AlignedSegmentSourceReferenceItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "range": {
                "docs": "Start and end indices of the segment in the source document.",
                "type": "optional<list<integer>>",
              },
              "text": {
                "docs": "The content of the matching segment in the source document.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ClassificationResult": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "prediction": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "CodesContext": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "string",
              "metadata": "optional<string>",
              "type": "CodesContextTypeEnum",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "CodesContextType": "string",
          "CodesContextTypeEnum": {
            "enum": [
              "string",
              "documentId",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "CodesState": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isSelected": {
                "docs": "Indicates whether the code is selected",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "Source of the predicted code",
                "type": "optional<V2SourceEnum>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "CommonErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "details": "optional<string>",
              "instance": "optional<string>",
              "requestid": "optional<string>",
              "status": "optional<integer>",
              "title": "optional<string>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "CommonHeaders": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "Tenant-Name": {
                "docs": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "CopilotCommonErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "details": "optional<string>",
              "instance": "optional<string>",
              "requestid": "optional<string>",
              "status": "optional<integer>",
              "title": "optional<string>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "CopilotModelsV2EncounterStatus": "string",
          "CopilotModelsV2EncounterType": "string",
          "CopilotModelsV2Gender": "string",
          "CopilotModelsV2Source": "string",
          "CopilotModelsV2TranscriptParticipantRole": "string",
          "CortiCommonErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "details": "optional<string>",
              "instance": "optional<string>",
              "requestid": "optional<string>",
              "status": "optional<integer>",
              "title": "optional<string>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DirectusFactGroupFiltered": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": "optional<Uuid>",
              "key": "optional<string>",
              "translations": "optional<list<DirectusFactGroupFilteredTranslationsItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DirectusFactGroupFilteredTranslationsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "id": "optional<integer>",
              "languages_id": "optional<string>",
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DirectusFactGroupTranslationFiltered": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": "optional<integer>",
              "languages_id": "optional<string>",
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DocumentContext": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "The actual data, which can be an array of facts, a transcript, or a string.",
                "type": "DocumentContextData",
              },
              "type": {
                "docs": "The type of context data.",
                "type": "V2DocumentContextTypeEnum",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DocumentContextData": {
            "discriminated": false,
            "docs": undefined,
            "encoding": undefined,
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
            "union": [
              {
                "docs": "Facts",
                "type": "list<FactContext>",
              },
              {
                "docs": "Transcript",
                "type": "Transcript",
              },
              {
                "docs": "Text",
                "type": "string",
              },
            ],
          },
          "DocumentSection": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdAt": {
                "docs": "The original timestamp when the document section was created.",
                "type": "optional<datetime>",
              },
              "key": {
                "docs": "Document section key",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name or heading of the document section within the generated document",
                "type": "optional<string>",
              },
              "sort": {
                "docs": "Order of the document section within the generated document",
                "type": "optional<integer>",
              },
              "text": {
                "docs": "Contents of the document section within the generated document",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the document section was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DocumentTemplate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "additionalInstructions": {
                "docs": "Any additional instructions to be considered during document generation.",
                "type": "optional<string>",
              },
              "documentName": {
                "docs": "The name of the document.",
                "type": "optional<string>",
              },
              "sectionIds": {
                "docs": "An array of section IDs.",
                "type": "optional<list<Uuid>>",
              },
              "sectionKeys": {
                "docs": "An array of section keys.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "DocumentationEvidence": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "evidenceId": "optional<Uuid>",
              "quote": "optional<string>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "Encounter": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "identifier": {
                "docs": "A unique identifier for the encounter, essential for tracking and referencing specific patient interactions.",
                "type": "string",
              },
              "period": {
                "docs": "The time period during which the encounter takes place.",
                "type": "EncounterPeriod",
              },
              "status": {
                "docs": "Indicates the current state of the encounter, crucial for understanding the progression and current state of care.",
                "type": "V2EncounterStatusEnum",
              },
              "title": {
                "docs": "A readable name for the interaction",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The specific type of encounter, providing context about the nature and setting of the patient interaction.",
                "type": "V2EncounterTypeEnum",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "EncounterPeriod": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "endedAt": {
                "docs": "The end date/time of the encounter. (UTC)",
                "type": "optional<datetime>",
              },
              "startedAt": {
                "docs": "The start date/time of the encounter. (UTC)",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ErrorResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "details": "optional<string>",
              "instance": "optional<string>",
              "requestid": "optional<string>",
              "status": "optional<integer>",
              "title": "optional<string>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "FactContext": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "group": {
                "docs": "The group to which the fact belongs.",
                "type": "optional<string>",
              },
              "source": {
                "docs": "The source of the fact. 'USER' refers to facts provided by the user, while 'SYSTEM' refers to system-generated facts (e.g., EHR).",
                "type": "V2SourceEnum",
              },
              "text": {
                "docs": "The text of the fact.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "MentionData": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "documentId": {
                "docs": "The document ID if applicable.",
                "type": "optional<Uuid>",
              },
              "range": {
                "docs": "Character range for document type.",
                "type": "optional<list<integer>>",
              },
              "snippet": {
                "docs": "Text snippet for the mention.",
                "type": "optional<string>",
              },
              "time": {
                "docs": "Time range in seconds for transcript type.",
                "type": "optional<list<integer>>",
              },
              "timestamp": {
                "docs": "The timestamp for transcript mentions.",
                "type": "optional<datetime>",
              },
              "utteranceId": {
                "docs": "The utterance ID if applicable.",
                "type": "optional<Uuid>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "NoContent": "map<string, unknown>",
          "Patient": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "birthDate": {
                "docs": "FHIR reference to patient birth date.",
                "type": "optional<datetime>",
              },
              "gender": {
                "docs": "FHIR reference to patient gender.",
                "type": "optional<V2GenderEnum>",
              },
              "identifier": {
                "docs": "FHIR reference to patient identifier.",
                "type": "string",
              },
              "name": {
                "docs": "FHIR reference to Text representation of the full name.",
                "type": "optional<string>",
              },
              "pronouns": {
                "docs": "FHIR reference to patient extension Individual Pronouns.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "QueryData": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "mentions": "optional<list<QueryDataMentionsItem>>",
              "queries": {
                "docs": "Related or follow-up queries.",
                "type": "optional<list<string>>",
              },
              "response": {
                "docs": "General chat response in markdown format.",
                "type": "optional<string>",
              },
              "rewrittenText": {
                "docs": "For document rewrites, the rewritten text in markdown format.",
                "type": "optional<string>",
              },
              "sources": "optional<list<QueryDataSourcesItem>>",
              "summary": {
                "docs": "For guidelines, a summary of the response.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "QueryDataMentionsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "data": "optional<MentionData>",
              "type": {
                "docs": "The type of mention (e.g., transcript, document).",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "QueryDataSourcesItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "description": {
                "docs": "A brief description of the source.",
                "type": "optional<string>",
              },
              "favicon": {
                "docs": "The favicon URL of the source.",
                "type": "optional<string>",
              },
              "title": {
                "docs": "The title of the source.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The type of the source (e.g., PDF, Web).",
                "type": "optional<string>",
              },
              "url": {
                "docs": "The URL of the source.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "QueryMention": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "optional<MentionData>",
              "type": {
                "docs": "The type of mention (e.g., transcript, document).",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "QuerySource": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "A brief description of the source.",
                "type": "optional<string>",
              },
              "favicon": {
                "docs": "The favicon URL of the source.",
                "type": "optional<string>",
              },
              "title": {
                "docs": "The title of the source.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The type of the source (e.g., PDF, Web).",
                "type": "optional<string>",
              },
              "url": {
                "docs": "The URL of the source.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestAlign": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "compareSegments": {
                "docs": "Indicates if segments from the source should be compared with the target.",
                "type": "optional<boolean>",
              },
              "sourceDocument": {
                "docs": "The content of the source document.",
                "type": "string",
              },
              "targetDocument": {
                "docs": "The content of the target document.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestClassificationCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "inputs": "optional<list<string>>",
              "taskId": "optional<Uuid>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestCodeUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "additionalCodes": {
                "docs": "List of additional codes",
                "type": "optional<list<string>>",
              },
              "code": {
                "docs": "The medical code to update",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestDocumentSectionUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "key": "string",
              "name": "optional<string>",
              "sort": "optional<integer>",
              "text": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestEncounterPeriodUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "endedAt": {
                "docs": "The UTC timestamp indicating when the encounter ended.",
                "type": "optional<datetime>",
              },
              "startedAt": {
                "docs": "The UTC timestamp indicating when the encounter started.",
                "type": "datetime",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestEncounterUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "identifier": {
                "docs": "A unique identifier for the encounter.",
                "type": "optional<string>",
              },
              "period": {
                "docs": "Details of when the encounter took place, including start and optional end timestamps with timezone offsets.",
                "type": "optional<RequestEncounterPeriodUpdate>",
              },
              "status": {
                "docs": "The current status of the encounter.",
                "type": "optional<V2EncounterStatusEnum>",
              },
              "title": {
                "docs": "A title providing context about the encounter.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The type of encounter.",
                "type": "optional<V2EncounterTypeEnum>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestFactCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "group": {
                "docs": "The key identifying the group to which the fact belongs.",
                "type": "string",
              },
              "source": {
                "docs": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The text content of the fact.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestFactsUpdateSingle": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "factId": {
                "docs": "The unique identifier of the fact to be updated.",
                "type": "Uuid",
              },
              "group": {
                "docs": "The updated group key for the fact.",
                "type": "optional<string>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact should be discarded.",
                "type": "optional<boolean>",
              },
              "text": {
                "docs": "The updated text content of the fact.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestGuidelines": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "context": {
                "docs": "An array of contexts, such as documents or relevant segments.",
                "type": "list<string>",
              },
              "query": {
                "docs": "The text-based query from the user.",
                "type": "string",
              },
              "sourceIds": {
                "docs": "An array of source IDs to narrow down the search.",
                "type": "list<Uuid>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestMention": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "query": {
                "docs": "The text-based query from the user.",
                "type": "string",
              },
              "referenceTexts": {
                "docs": "An array of reference texts where the mentions will be searched.",
                "type": "list<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestParticipantCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "channel": {
                "docs": "The audio channel to associate with a participant role.",
                "type": "integer",
              },
              "role": "V2TranscriptParticipantRoleEnum",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestPatientUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "birthDate": {
                "docs": "FHIR reference to patient birth date.",
                "type": "optional<datetime>",
              },
              "gender": {
                "docs": "FHIR reference to patient gender.",
                "type": "optional<V2GenderEnum>",
              },
              "identifier": {
                "docs": "FHIR reference to patient identifier.",
                "type": "optional<string>",
              },
              "name": {
                "docs": "FHIR reference to Text representation of the full name.",
                "type": "optional<string>",
              },
              "pronouns": {
                "docs": "FHIR reference to patient extension Individual Pronouns.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestQuery": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "focusContexts": {
                "docs": "A list of additional focus contexts or documents.",
                "type": "optional<list<string>>",
              },
              "query": {
                "docs": "The text-based query from the user.",
                "type": "string",
              },
              "queryContext": {
                "docs": "A specific document or focus context for the query.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestQuestionPrompts": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "context": {
                "docs": "The context in which the query is being made.",
                "type": "list<string>",
              },
              "query": {
                "docs": "The query for which the questions are being generated (optional).",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestTranscriptAnonymize": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "inputLanguage": "optional<string>",
              "transcript": "optional<list<RequestTranscriptAnonymizeTranscriptItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestTranscriptAnonymizeTranscriptItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "role": "optional<string>",
              "value": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAlign": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "alignedSegments": "optional<list<ResponseAlignAlignedSegmentsItem>>",
              "alignmentPercentage": {
                "docs": "Alignment percentage between the source and target documents.",
                "type": "optional<double>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAlignAlignedSegmentsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "alignmentPercentage": {
                "docs": "Alignment percentage between the target and source segment.",
                "type": "optional<double>",
              },
              "sourceReference": "optional<list<ResponseAlignAlignedSegmentsItemSourceReferenceItem>>",
              "targetSegment": "optional<TargetSegment>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAlignAlignedSegmentsItemSourceReferenceItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "range": {
                "docs": "Start and end indices of the segment in the source document.",
                "type": "optional<list<integer>>",
              },
              "text": {
                "docs": "The content of the matching segment in the source document.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAllTemplateSections": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of filtered template sections",
                "type": "optional<list<Section>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAllTemplates": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "List of filtered templates",
                "type": "optional<list<ResponseAllTemplatesDataItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAllTemplatesDataItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "date_updated": {
                "docs": "The timestamp when the template was updated.",
                "type": "optional<datetime>",
              },
              "description": {
                "docs": "Description of the template",
                "type": "optional<string>",
              },
              "key": {
                "docs": "Unique key for the template",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name of the template",
                "type": "optional<string>",
              },
              "status": {
                "docs": "Status of the template.",
                "type": "optional<string>",
              },
              "template_sections": {
                "docs": "List of sections included in the template",
                "type": "optional<list<ResponseAllTemplatesDataItemTemplateSectionsItem>>",
              },
              "translations": {
                "docs": "Available translations for the template",
                "type": "optional<list<ResponseAllTemplatesDataItemTranslationsItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAllTemplatesDataItemTemplateSectionsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "sections_id": {
                "docs": "The section details",
                "type": "optional<Section>",
              },
              "sort": {
                "docs": "Sort order of the section within the template",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseAllTemplatesDataItemTranslationsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "description": {
                "docs": "Localized description of the template",
                "type": "optional<string>",
              },
              "languages_id": {
                "docs": "Language identifier",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Localized name of the template",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseClassificationCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "result": "optional<ClassificationResult>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseCodesList": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "codes": {
                "docs": "List of medical codes",
                "type": "optional<list<ResponseCodesListCodesItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseCodesListCodesItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "additionalCodes": {
                "docs": "List of additional codes",
                "type": "optional<list<ResponseCodesListCodesItemAdditionalCodesItem>>",
              },
              "code": {
                "docs": "The medical code",
                "type": "optional<string>",
              },
              "description": {
                "docs": "Description of the medical code",
                "type": "optional<string>",
              },
              "state": {
                "docs": "State of the code",
                "type": "optional<CodesState>",
              },
              "system": {
                "docs": "The coding system used",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseCodesListCodesItemAdditionalCodesItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "code": {
                "docs": "The additional code",
                "type": "optional<string>",
              },
              "description": {
                "docs": "Description of the additional code",
                "type": "optional<string>",
              },
              "state": {
                "docs": "State of the additional code",
                "type": "optional<CodesState>",
              },
              "subsetName": {
                "docs": "Category or subset of the additional code",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseCodesRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "additionalCodes": {
                "docs": "List of additional codes",
                "type": "optional<list<ResponseCodesReadAdditionalCodesItem>>",
              },
              "code": {
                "docs": "The medical code",
                "type": "optional<string>",
              },
              "description": {
                "docs": "Description of the medical code",
                "type": "optional<string>",
              },
              "state": {
                "docs": "State of the code",
                "type": "optional<CodesState>",
              },
              "system": {
                "docs": "The coding system used",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseCodesReadAdditionalCodesItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "code": {
                "docs": "The additional code",
                "type": "optional<string>",
              },
              "description": {
                "docs": "Description of the additional code",
                "type": "optional<string>",
              },
              "state": {
                "docs": "State of the additional code",
                "type": "optional<CodesState>",
              },
              "subsetName": {
                "docs": "Category or subset of the additional code",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseDirectusFactGroupsFiltered": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "optional<list<ResponseDirectusFactGroupsFilteredDataItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseDirectusFactGroupsFilteredDataItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "id": "optional<Uuid>",
              "key": "optional<string>",
              "translations": "optional<list<ResponseDirectusFactGroupsFilteredDataItemTranslationsItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseDirectusFactGroupsFilteredDataItemTranslationsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "id": "optional<integer>",
              "languages_id": "optional<string>",
              "name": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseDocumentList": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "optional<list<ResponseDocumentRead>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseDocumentRead": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdAt": {
                "docs": "The original timestamp when the document was created.",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "Unique ID of the generated document",
                "type": "optional<Uuid>",
              },
              "isStream": "optional<boolean>",
              "name": {
                "docs": "Name of the generated document",
                "type": "optional<string>",
              },
              "outputLanguage": {
                "docs": "The language in which the document will be generated. Check https://docs.corti.ai/about/languages for more.",
                "type": "optional<string>",
              },
              "sections": {
                "docs": "Individual document sections",
                "type": "optional<list<ResponseDocumentReadSectionsItem>>",
              },
              "templateRef": {
                "docs": "Reference for the used template",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the document was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseDocumentReadSectionsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "createdAt": {
                "docs": "The original timestamp when the document section was created.",
                "type": "optional<datetime>",
              },
              "key": {
                "docs": "Document section key",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name or heading of the document section within the generated document",
                "type": "optional<string>",
              },
              "sort": {
                "docs": "Order of the document section within the generated document",
                "type": "optional<integer>",
              },
              "text": {
                "docs": "Contents of the document section within the generated document",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the document section was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseDocumentation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "evidence": "optional<DocumentationEvidence>",
              "id": "optional<Uuid>",
              "sectionId": "optional<Uuid>",
              "sectionTitle": "optional<string>",
              "text": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFact": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdAt": {
                "docs": "The timestamp when the fact was created.",
                "type": "optional<datetime>",
              },
              "evidence": "optional<list<ResponseFactEvidenceItem>>",
              "group": {
                "docs": "The key identifying the group to which the fact belongs.",
                "type": "optional<string>",
              },
              "groupId": {
                "docs": "The unique identifier of the group to which the fact belongs.",
                "type": "optional<Uuid>",
              },
              "id": {
                "docs": "The unique identifier of the fact.",
                "type": "optional<Uuid>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact has been marked as discarded.",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "The origin of the fact.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The text content of the fact.",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the fact was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "group": {
                "docs": "The group key categorizing the fact.",
                "type": "optional<string>",
              },
              "groupId": {
                "docs": "The unique identifier of the group to which the fact belongs.",
                "type": "optional<Uuid>",
              },
              "id": {
                "docs": "The unique identifier of the newly created fact.",
                "type": "optional<Uuid>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact has been marked as discarded.",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The textual content of the created fact.",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the fact was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactEvidence": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "quote": {
                "docs": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                "type": "optional<string>",
              },
              "reference": {
                "docs": "A reference that supports the fact.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The category of evidence.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactEvidenceItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "quote": {
                "docs": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                "type": "optional<string>",
              },
              "reference": {
                "docs": "A reference that supports the fact.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The category of evidence.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdAt": {
                "docs": "The original timestamp when the fact was created.",
                "type": "optional<datetime>",
              },
              "group": {
                "docs": "The updated group key to which the fact belongs.",
                "type": "optional<string>",
              },
              "groupId": {
                "docs": "The unique identifier of the associated group.",
                "type": "optional<Uuid>",
              },
              "id": {
                "docs": "The unique identifier of the fact.",
                "type": "optional<Uuid>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact is marked as discarded.",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "The updated origin of the fact.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The updated text content of the fact.",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the fact was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "facts": {
                "docs": "A list of successfully created facts.",
                "type": "optional<list<ResponseFactsCreateFactsItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsCreateFactsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "group": {
                "docs": "The group key categorizing the fact.",
                "type": "optional<string>",
              },
              "groupId": {
                "docs": "The unique identifier of the group to which the fact belongs.",
                "type": "optional<Uuid>",
              },
              "id": {
                "docs": "The unique identifier of the newly created fact.",
                "type": "optional<Uuid>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact has been marked as discarded.",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The textual content of the created fact.",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the fact was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsList": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "facts": {
                "docs": "A list of facts associated with the interaction.",
                "type": "optional<list<ResponseFactsListFactsItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsListFactsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "createdAt": {
                "docs": "The timestamp when the fact was created.",
                "type": "optional<datetime>",
              },
              "evidence": "optional<list<ResponseFactsListFactsItemEvidenceItem>>",
              "group": {
                "docs": "The key identifying the group to which the fact belongs.",
                "type": "optional<string>",
              },
              "groupId": {
                "docs": "The unique identifier of the group to which the fact belongs.",
                "type": "optional<Uuid>",
              },
              "id": {
                "docs": "The unique identifier of the fact.",
                "type": "optional<Uuid>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact has been marked as discarded.",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "The origin of the fact.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The text content of the fact.",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the fact was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsListFactsItemEvidenceItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "quote": {
                "docs": "A direct excerpt or phrase extracted from the reference source that justifies the fact.",
                "type": "optional<string>",
              },
              "reference": {
                "docs": "A reference that supports the fact.",
                "type": "optional<string>",
              },
              "type": {
                "docs": "The category of evidence.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsUpdate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "facts": {
                "docs": "A list of updated facts.",
                "type": "optional<list<ResponseFactsUpdateFactsItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsUpdateFactsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "createdAt": {
                "docs": "The original timestamp when the fact was created.",
                "type": "optional<datetime>",
              },
              "group": {
                "docs": "The updated group key to which the fact belongs.",
                "type": "optional<string>",
              },
              "groupId": {
                "docs": "The unique identifier of the associated group.",
                "type": "optional<Uuid>",
              },
              "id": {
                "docs": "The unique identifier of the updated fact.",
                "type": "optional<Uuid>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact is marked as discarded.",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "The updated origin of the fact.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The updated text content of the fact.",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the fact was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseFactsUpdateSingle": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdAt": {
                "docs": "The original timestamp when the fact was created.",
                "type": "optional<datetime>",
              },
              "group": {
                "docs": "The updated group key to which the fact belongs.",
                "type": "optional<string>",
              },
              "groupId": {
                "docs": "The unique identifier of the associated group.",
                "type": "optional<Uuid>",
              },
              "id": {
                "docs": "The unique identifier of the updated fact.",
                "type": "optional<Uuid>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact is marked as discarded.",
                "type": "optional<boolean>",
              },
              "source": {
                "docs": "The updated origin of the fact.",
                "type": "optional<V2SourceEnum>",
              },
              "text": {
                "docs": "The updated text content of the fact.",
                "type": "optional<string>",
              },
              "updatedAt": {
                "docs": "The timestamp when the fact was last updated.",
                "type": "optional<datetime>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseGuidelines": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "sources": "optional<list<QuerySource>>",
              "summary": {
                "docs": "A summary of the response.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseInteraction": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "assignedUserId": {
                "docs": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
                "type": "optional<Uuid>",
              },
              "createdAt": {
                "docs": "The timestamp when the interaction was started (UTC).",
                "type": "optional<datetime>",
              },
              "encounter": {
                "docs": "Information about the encounter, including type, status, and timing.",
                "type": "optional<Encounter>",
              },
              "endedAt": {
                "docs": "The timestamp when the interaction concluded (UTC).",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "Unique identifier for the interaction.",
                "type": "optional<Uuid>",
              },
              "lastUpdated": {
                "docs": "The timestamp indicating the last recorded update for this interaction.",
                "type": "optional<datetime>",
              },
              "patient": {
                "docs": "Details about the patient involved in the interaction, if applicable.",
                "type": "optional<Patient>",
              },
              "updatedAt": {
                "docs": "The timestamp when the interaction was last modified (UTC).",
                "type": "optional<datetime>",
              },
              "websocketUrl": {
                "docs": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseInteractionCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "interactionId": {
                "docs": "Unique identifier for the interaction.",
                "type": "optional<Uuid>",
              },
              "websocketUrl": {
                "docs": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseInteractions": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "interactions": "optional<list<ResponseInteractionsInteractionsItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseInteractionsInteractionsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "assignedUserId": {
                "docs": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
                "type": "optional<Uuid>",
              },
              "createdAt": {
                "docs": "The timestamp when the interaction was started (UTC).",
                "type": "optional<datetime>",
              },
              "encounter": {
                "docs": "Information about the encounter, including type, status, and timing.",
                "type": "optional<Encounter>",
              },
              "endedAt": {
                "docs": "The timestamp when the interaction concluded (UTC).",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "Unique identifier for the interaction.",
                "type": "optional<Uuid>",
              },
              "lastUpdated": {
                "docs": "The timestamp indicating the last recorded update for this interaction.",
                "type": "optional<datetime>",
              },
              "patient": {
                "docs": "Details about the patient involved in the interaction, if applicable.",
                "type": "optional<Patient>",
              },
              "updatedAt": {
                "docs": "The timestamp when the interaction was last modified (UTC).",
                "type": "optional<datetime>",
              },
              "websocketUrl": {
                "docs": "WebSocket URL for streaming real-time interactions. Append a token in the format: /interactions/{interactionID}/streams?token=Bearer token-value-here",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseMention": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "documentId": {
                "docs": "The document ID if applicable.",
                "type": "optional<Uuid>",
              },
              "properties": {
                "docs": "The type of mention (e.g., transcript, document).",
                "type": "optional<string>",
              },
              "range": {
                "docs": "Character range for document type.",
                "type": "optional<list<integer>>",
              },
              "snippet": {
                "docs": "Text snippet for the mention.",
                "type": "optional<string>",
              },
              "time": {
                "docs": "Time range in seconds for transcript type.",
                "type": "optional<list<integer>>",
              },
              "timestamp": {
                "docs": "The timestamp for transcript mentions.",
                "type": "optional<datetime>",
              },
              "utteranceId": {
                "docs": "The utterance ID if applicable.",
                "type": "optional<Uuid>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseMetadataCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "participantsRoles": "optional<list<ResponseMetadataCreateParticipantsRolesItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseMetadataCreateParticipantsRolesItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "channel": {
                "docs": "The audio channel associated with the participant.",
                "type": "optional<integer>",
              },
              "role": {
                "docs": "The role of the participant.",
                "type": "optional<V2TranscriptParticipantRoleEnum>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseParticipantCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "channel": {
                "docs": "The audio channel associated with the participant.",
                "type": "optional<integer>",
              },
              "role": {
                "docs": "The role of the participant.",
                "type": "optional<V2TranscriptParticipantRoleEnum>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseQuery": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "docs": "The response data specific to the tool.",
                "type": "optional<QueryData>",
              },
              "tool": {
                "docs": "The tool providing the response (e.g., guidelines, mentions, general_chat, etc.)",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseQuestionPrompts": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "prompts": {
                "docs": "An array of suggested questions.",
                "type": "optional<list<string>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseRecordingCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "recordingId": {
                "docs": "The unique identifier for the created recording.",
                "type": "optional<Uuid>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseRecordingList": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "recordings": {
                "docs": "A list of recordings for the interaction.",
                "type": "optional<list<Uuid>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscript": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "duration": "optional<double>",
              "id": "optional<Uuid>",
              "isFinal": "optional<boolean>",
              "participant": "optional<RequestParticipantCreate>",
              "start": "optional<double>",
              "time": "optional<ResponseTranscriptTime>",
              "transcript": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscriptAnonymize": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "anonymized": "optional<list<Utterance>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscriptCreate": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The unique identifier of the transcript.",
                "type": "optional<Uuid>",
              },
              "metadata": {
                "docs": "Additional information about the participants involved in the transcript.",
                "type": "optional<ResponseMetadataCreate>",
              },
              "transcripts": {
                "docs": "An array of transcripts.",
                "type": "optional<list<ResponseTranscriptCreateTranscriptsItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscriptCreateTranscriptsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "channel": {
                "docs": "The channel associated with this phrase/utterance.",
                "type": "optional<integer>",
              },
              "end": {
                "docs": "End time in milliseconds for phrase/utterance.",
                "type": "optional<integer>",
              },
              "participant": {
                "docs": "The identifier of the participant.",
                "type": "optional<integer>",
              },
              "speakerId": {
                "docs": "Id to tag an identified speaker. Auto-increments.",
                "type": "optional<integer>",
              },
              "start": {
                "docs": "Start time in milliseconds for phrase/utterance.",
                "type": "optional<integer>",
              },
              "text": {
                "docs": "The spoken phrase or utterance extracted from the audio.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscriptListAll": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "transcripts": "optional<list<ResponseTranscriptListAllTranscriptsItem>>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscriptListAllSingle": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "id": {
                "docs": "The unique identifier of the transcript.",
                "type": "optional<Uuid>",
              },
              "transcriptSample": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscriptListAllTranscriptsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "id": {
                "docs": "The unique identifier of the transcript.",
                "type": "optional<Uuid>",
              },
              "transcriptSample": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "ResponseTranscriptTime": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "end": "optional<double>",
              "start": "optional<double>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "Section": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "alternate_names": {
                "docs": "Alternate names for the section",
                "type": "optional<list<string>>",
              },
              "date_updated": {
                "docs": "The timestamp when the section was updated.",
                "type": "optional<datetime>",
              },
              "default_writing_style": {
                "docs": "Default writing style for the section",
                "type": "optional<WritingStyle>",
              },
              "description": {
                "docs": "Description of the section",
                "type": "optional<string>",
              },
              "key": {
                "docs": "Unique key for the section",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name of the section",
                "type": "optional<string>",
              },
              "section_type": {
                "docs": "Type of section",
                "type": "optional<string>",
              },
              "translations": {
                "docs": "Available translations for the section",
                "type": "optional<list<SectionTranslationsItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SectionTranslation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "Localized description of the section",
                "type": "optional<string>",
              },
              "languages_id": {
                "docs": "Language identifier",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Localized name of the section",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SectionTranslationsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "description": {
                "docs": "Localized description of the section",
                "type": "optional<string>",
              },
              "languages_id": {
                "docs": "Language identifier",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Localized name of the section",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "SourceReference": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "range": {
                "docs": "Start and end indices of the segment in the source document.",
                "type": "optional<list<integer>>",
              },
              "text": {
                "docs": "The content of the matching segment in the source document.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TargetSegment": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "range": {
                "docs": "Start and end indices of the segment in the target document.",
                "type": "optional<list<integer>>",
              },
              "text": {
                "docs": "The content of the target document segment.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TemplateFiltered": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "date_updated": {
                "docs": "The timestamp when the template was updated.",
                "type": "optional<datetime>",
              },
              "description": {
                "docs": "Description of the template",
                "type": "optional<string>",
              },
              "key": {
                "docs": "Unique key for the template",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Name of the template",
                "type": "optional<string>",
              },
              "status": {
                "docs": "Status of the template.",
                "type": "optional<string>",
              },
              "template_sections": {
                "docs": "List of sections included in the template",
                "type": "optional<list<TemplateFilteredTemplateSectionsItem>>",
              },
              "translations": {
                "docs": "Available translations for the template",
                "type": "optional<list<TemplateFilteredTranslationsItem>>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TemplateFilteredTemplateSectionsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "sections_id": {
                "docs": "The section details",
                "type": "optional<Section>",
              },
              "sort": {
                "docs": "Sort order of the section within the template",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TemplateFilteredTranslationsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "description": {
                "docs": "Localized description of the template",
                "type": "optional<string>",
              },
              "languages_id": {
                "docs": "Language identifier",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Localized name of the template",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TemplateSection": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "sections_id": {
                "docs": "The section details",
                "type": "optional<Section>",
              },
              "sort": {
                "docs": "Sort order of the section within the template",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TemplateTranslation": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "description": {
                "docs": "Localized description of the template",
                "type": "optional<string>",
              },
              "languages_id": {
                "docs": "Language identifier",
                "type": "optional<string>",
              },
              "name": {
                "docs": "Localized name of the template",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "Transcript": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "channel": {
                "docs": "The channel associated with this phrase/utterance.",
                "type": "optional<integer>",
              },
              "end": {
                "docs": "End time in milliseconds for phrase/utterance.",
                "type": "optional<integer>",
              },
              "participant": {
                "docs": "The identifier of the participant.",
                "type": "optional<integer>",
              },
              "speakerId": {
                "docs": "Id to tag an identified speaker. Auto-increments.",
                "type": "optional<integer>",
              },
              "start": {
                "docs": "Start time in milliseconds for phrase/utterance.",
                "type": "optional<integer>",
              },
              "text": {
                "docs": "The spoken phrase or utterance extracted from the audio.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "TypeNoContent": "map<string, unknown>",
          "Utterance": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "role": "optional<string>",
              "value": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "Uuid": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "UuidUuid": {
            "type": "string",
            "validation": {
              "format": "uuid",
              "maxLength": undefined,
              "minLength": undefined,
              "pattern": undefined,
            },
          },
          "V2DocumentContextType": "string",
          "V2DocumentContextTypeEnum": {
            "enum": [
              "facts",
              "transcript",
              "string",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "V2EncounterStatus": "string",
          "V2EncounterStatusEnum": {
            "enum": [
              "planned",
              {
                "name": "InProgress",
                "value": "in-progress",
              },
              {
                "name": "OnHold",
                "value": "on-hold",
              },
              "completed",
              "cancelled",
              "deleted",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "V2EncounterType": "string",
          "V2EncounterTypeEnum": {
            "enum": [
              "first_consultation",
              "consultation",
              "emergency",
              "inpatient",
              "outpatient",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "V2Gender": "string",
          "V2GenderEnum": {
            "enum": [
              "male",
              "female",
              "unknown",
              "other",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "V2ParticipantRoleEnum": {
            "enum": [
              "doctor",
              "patient",
              "multiple",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "V2Source": "string",
          "V2SourceEnum": {
            "enum": [
              "core",
              "system",
              "user",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "V2TranscriptParticipantRole": "string",
          "V2TranscriptParticipantRoleEnum": {
            "enum": [
              "doctor",
              "patient",
              "multiple",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "WritingStyle": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "Name of the writing style",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "errors:
  ForbiddenError:
    status-code: 403
    type: ErrorResponse
    docs: RFC9457
    examples:
      - value: {}
  GatewayTimeoutError:
    status-code: 504
    type: ErrorResponse
    docs: RFC9457
    examples:
      - value: {}
  BadRequestError:
    status-code: 400
    type: ErrorResponse
    docs: RFC9457
    examples:
      - value: {}
  InternalServerError:
    status-code: 500
    type: ErrorResponse
    docs: RFC9457
    examples:
      - value: {}
  NotFoundError:
    status-code: 404
    type: ErrorResponse
    docs: RFC9457
    examples:
      - value: {}
  UnauthorizedError:
    status-code: 401
    type: ErrorResponse
    docs: RFC9457
    examples:
      - value: {}
  BadGatewayError:
    status-code: 502
    type: ErrorResponse
    docs: RFC9457
    examples:
      - value: {}
types:
  AdditionalCode:
    properties:
      subsetName:
        type: optional<string>
        docs: Category or subset of the additional code
      code:
        type: optional<string>
        docs: The additional code
      description:
        type: optional<string>
        docs: Description of the additional code
      state:
        type: optional<CodesState>
        docs: State of the additional code
    source:
      openapi: ../swagger.json
  AlignedSegmentSourceReferenceItem:
    properties:
      text:
        type: optional<string>
        docs: The content of the matching segment in the source document.
      range:
        type: optional<list<integer>>
        docs: Start and end indices of the segment in the source document.
    source:
      openapi: ../swagger.json
    inline: true
  AlignedSegment:
    properties:
      targetSegment: optional<TargetSegment>
      sourceReference: optional<list<AlignedSegmentSourceReferenceItem>>
      alignmentPercentage:
        type: optional<double>
        docs: Alignment percentage between the target and source segment.
    source:
      openapi: ../swagger.json
  ClassificationResult:
    properties:
      prediction: optional<string>
    source:
      openapi: ../swagger.json
  CodesContext:
    properties:
      type: CodesContextTypeEnum
      data: string
      metadata: optional<string>
    source:
      openapi: ../swagger.json
  CodesContextType: string
  CodesContextTypeEnum:
    enum:
      - string
      - documentId
    source:
      openapi: ../swagger.json
  CodesState:
    properties:
      isSelected:
        type: optional<boolean>
        docs: Indicates whether the code is selected
      source:
        type: optional<V2SourceEnum>
        docs: Source of the predicted code
    source:
      openapi: ../swagger.json
  CommonHeaders:
    properties:
      Tenant-Name:
        type: optional<string>
        docs: >-
          Identifies a distinct entity within Corti's multi-tenant system.
          Ensures correct routing and authentication of the request.
    source:
      openapi: ../swagger.json
  DirectusFactGroupFilteredTranslationsItem:
    properties:
      id: optional<integer>
      languages_id: optional<string>
      name: optional<string>
    source:
      openapi: ../swagger.json
    inline: true
  DirectusFactGroupFiltered:
    properties:
      id: optional<Uuid>
      key: optional<string>
      translations: optional<list<DirectusFactGroupFilteredTranslationsItem>>
    source:
      openapi: ../swagger.json
  DirectusFactGroupTranslationFiltered:
    properties:
      id: optional<integer>
      languages_id: optional<string>
      name: optional<string>
    source:
      openapi: ../swagger.json
  DocumentContext:
    properties:
      type:
        type: V2DocumentContextTypeEnum
        docs: The type of context data.
      data:
        type: DocumentContextData
        docs: >-
          The actual data, which can be an array of facts, a transcript, or a
          string.
    source:
      openapi: ../swagger.json
  DocumentContextData:
    discriminated: false
    union:
      - docs: Facts
        type: list<FactContext>
      - type: Transcript
        docs: Transcript
      - type: string
        docs: Text
    source:
      openapi: ../swagger.json
  DocumentSection:
    properties:
      key:
        type: optional<string>
        docs: Document section key
      name:
        type: optional<string>
        docs: Name or heading of the document section within the generated document
      text:
        type: optional<string>
        docs: Contents of the document section within the generated document
      sort:
        type: optional<integer>
        docs: Order of the document section within the generated document
      createdAt:
        type: optional<datetime>
        docs: The original timestamp when the document section was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the document section was last updated.
    source:
      openapi: ../swagger.json
  DocumentTemplate:
    properties:
      sectionIds:
        type: optional<list<Uuid>>
        docs: An array of section IDs.
      sectionKeys:
        type: optional<list<string>>
        docs: An array of section keys.
      documentName:
        type: optional<string>
        docs: The name of the document.
      additionalInstructions:
        type: optional<string>
        docs: >-
          Any additional instructions to be considered during document
          generation.
    source:
      openapi: ../swagger.json
  Encounter:
    properties:
      identifier:
        type: string
        docs: >-
          A unique identifier for the encounter, essential for tracking and
          referencing specific patient interactions.
      status:
        type: V2EncounterStatusEnum
        docs: >-
          Indicates the current state of the encounter, crucial for
          understanding the progression and current state of care.
      type:
        type: V2EncounterTypeEnum
        docs: >-
          The specific type of encounter, providing context about the nature and
          setting of the patient interaction.
      period:
        type: EncounterPeriod
        docs: The time period during which the encounter takes place.
      title:
        type: optional<string>
        docs: A readable name for the interaction
    source:
      openapi: ../swagger.json
  EncounterPeriod:
    properties:
      startedAt:
        type: datetime
        docs: The start date/time of the encounter. (UTC)
      endedAt:
        type: optional<datetime>
        docs: The end date/time of the encounter. (UTC)
    source:
      openapi: ../swagger.json
  ErrorResponse:
    properties:
      requestid: optional<string>
      type: optional<string>
      status: optional<integer>
      title: optional<string>
      details: optional<string>
      instance: optional<string>
    source:
      openapi: ../swagger.json
  FactContext:
    properties:
      text:
        type: string
        docs: The text of the fact.
      group:
        type: optional<string>
        docs: The group to which the fact belongs.
      source:
        type: V2SourceEnum
        docs: >-
          The source of the fact. 'USER' refers to facts provided by the user,
          while 'SYSTEM' refers to system-generated facts (e.g., EHR).
    source:
      openapi: ../swagger.json
  MentionData:
    properties:
      range:
        type: optional<list<integer>>
        docs: Character range for document type.
      time:
        type: optional<list<integer>>
        docs: Time range in seconds for transcript type.
      snippet:
        type: optional<string>
        docs: Text snippet for the mention.
      documentId:
        type: optional<Uuid>
        docs: The document ID if applicable.
      utteranceId:
        type: optional<Uuid>
        docs: The utterance ID if applicable.
      timestamp:
        type: optional<datetime>
        docs: The timestamp for transcript mentions.
    source:
      openapi: ../swagger.json
  NoContent: map<string, unknown>
  Patient:
    properties:
      identifier:
        type: string
        docs: FHIR reference to patient identifier.
      name:
        type: optional<string>
        docs: FHIR reference to Text representation of the full name.
      gender:
        type: optional<V2GenderEnum>
        docs: FHIR reference to patient gender.
      birthDate:
        type: optional<datetime>
        docs: FHIR reference to patient birth date.
      pronouns:
        type: optional<string>
        docs: FHIR reference to patient extension Individual Pronouns.
    source:
      openapi: ../swagger.json
  QueryDataSourcesItem:
    properties:
      favicon:
        type: optional<string>
        docs: The favicon URL of the source.
      title:
        type: optional<string>
        docs: The title of the source.
      url:
        type: optional<string>
        docs: The URL of the source.
      type:
        type: optional<string>
        docs: The type of the source (e.g., PDF, Web).
      description:
        type: optional<string>
        docs: A brief description of the source.
    source:
      openapi: ../swagger.json
    inline: true
  QueryDataMentionsItem:
    properties:
      type:
        type: optional<string>
        docs: The type of mention (e.g., transcript, document).
      data: optional<MentionData>
    source:
      openapi: ../swagger.json
    inline: true
  QueryData:
    properties:
      summary:
        type: optional<string>
        docs: For guidelines, a summary of the response.
      sources: optional<list<QueryDataSourcesItem>>
      mentions: optional<list<QueryDataMentionsItem>>
      response:
        type: optional<string>
        docs: General chat response in markdown format.
      rewrittenText:
        type: optional<string>
        docs: For document rewrites, the rewritten text in markdown format.
      queries:
        type: optional<list<string>>
        docs: Related or follow-up queries.
    source:
      openapi: ../swagger.json
  QueryMention:
    properties:
      type:
        type: optional<string>
        docs: The type of mention (e.g., transcript, document).
      data: optional<MentionData>
    source:
      openapi: ../swagger.json
  QuerySource:
    properties:
      favicon:
        type: optional<string>
        docs: The favicon URL of the source.
      title:
        type: optional<string>
        docs: The title of the source.
      url:
        type: optional<string>
        docs: The URL of the source.
      type:
        type: optional<string>
        docs: The type of the source (e.g., PDF, Web).
      description:
        type: optional<string>
        docs: A brief description of the source.
    source:
      openapi: ../swagger.json
  RequestAlign:
    properties:
      sourceDocument:
        type: string
        docs: The content of the source document.
      targetDocument:
        type: string
        docs: The content of the target document.
      compareSegments:
        type: optional<boolean>
        docs: >-
          Indicates if segments from the source should be compared with the
          target.
    source:
      openapi: ../swagger.json
  RequestClassificationCreate:
    properties:
      inputs: optional<list<string>>
      taskId: optional<Uuid>
    source:
      openapi: ../swagger.json
  RequestCodeUpdate:
    properties:
      code:
        type: optional<string>
        docs: The medical code to update
      additionalCodes:
        type: optional<list<string>>
        docs: List of additional codes
    source:
      openapi: ../swagger.json
  RequestDocumentSectionUpdate:
    properties:
      key: string
      name: optional<string>
      text: optional<string>
      sort: optional<integer>
    source:
      openapi: ../swagger.json
  RequestEncounterPeriodUpdate:
    properties:
      startedAt:
        type: datetime
        docs: The UTC timestamp indicating when the encounter started.
      endedAt:
        type: optional<datetime>
        docs: The UTC timestamp indicating when the encounter ended.
    source:
      openapi: ../swagger.json
  RequestEncounterUpdate:
    properties:
      identifier:
        type: optional<string>
        docs: A unique identifier for the encounter.
      status:
        type: optional<V2EncounterStatusEnum>
        docs: The current status of the encounter.
      type:
        type: optional<V2EncounterTypeEnum>
        docs: The type of encounter.
      period:
        type: optional<RequestEncounterPeriodUpdate>
        docs: >-
          Details of when the encounter took place, including start and optional
          end timestamps with timezone offsets.
      title:
        type: optional<string>
        docs: A title providing context about the encounter.
    source:
      openapi: ../swagger.json
  RequestFactCreate:
    properties:
      text:
        type: string
        docs: The text content of the fact.
      group:
        type: string
        docs: The key identifying the group to which the fact belongs.
      source:
        type: optional<V2SourceEnum>
        docs: The origin of the fact, such as 'USER' or 'SYSTEM'.
    source:
      openapi: ../swagger.json
  RequestFactsUpdateSingle:
    properties:
      factId:
        type: Uuid
        docs: The unique identifier of the fact to be updated.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact should be discarded.
      text:
        type: optional<string>
        docs: The updated text content of the fact.
      group:
        type: optional<string>
        docs: The updated group key for the fact.
    source:
      openapi: ../swagger.json
  RequestGuidelines:
    properties:
      query:
        type: string
        docs: The text-based query from the user.
      context:
        docs: An array of contexts, such as documents or relevant segments.
        type: list<string>
      sourceIds:
        docs: An array of source IDs to narrow down the search.
        type: list<Uuid>
    source:
      openapi: ../swagger.json
  RequestMention:
    properties:
      query:
        type: string
        docs: The text-based query from the user.
      referenceTexts:
        docs: An array of reference texts where the mentions will be searched.
        type: list<string>
    source:
      openapi: ../swagger.json
  RequestParticipantCreate:
    properties:
      channel:
        type: integer
        docs: The audio channel to associate with a participant role.
      role: V2TranscriptParticipantRoleEnum
    source:
      openapi: ../swagger.json
  RequestPatientUpdate:
    properties:
      identifier:
        type: optional<string>
        docs: FHIR reference to patient identifier.
      name:
        type: optional<string>
        docs: FHIR reference to Text representation of the full name.
      gender:
        type: optional<V2GenderEnum>
        docs: FHIR reference to patient gender.
      birthDate:
        type: optional<datetime>
        docs: FHIR reference to patient birth date.
      pronouns:
        type: optional<string>
        docs: FHIR reference to patient extension Individual Pronouns.
    source:
      openapi: ../swagger.json
  RequestQuery:
    properties:
      query:
        type: string
        docs: The text-based query from the user.
      queryContext:
        type: optional<string>
        docs: A specific document or focus context for the query.
      focusContexts:
        type: optional<list<string>>
        docs: A list of additional focus contexts or documents.
    source:
      openapi: ../swagger.json
  RequestQuestionPrompts:
    properties:
      context:
        docs: The context in which the query is being made.
        type: list<string>
      query:
        type: optional<string>
        docs: The query for which the questions are being generated (optional).
    source:
      openapi: ../swagger.json
  RequestTranscriptAnonymizeTranscriptItem:
    properties:
      value: optional<string>
      role: optional<string>
    source:
      openapi: ../swagger.json
    inline: true
  RequestTranscriptAnonymize:
    properties:
      inputLanguage: optional<string>
      transcript: optional<list<RequestTranscriptAnonymizeTranscriptItem>>
    source:
      openapi: ../swagger.json
  ResponseAlignAlignedSegmentsItemSourceReferenceItem:
    properties:
      text:
        type: optional<string>
        docs: The content of the matching segment in the source document.
      range:
        type: optional<list<integer>>
        docs: Start and end indices of the segment in the source document.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseAlignAlignedSegmentsItem:
    properties:
      targetSegment: optional<TargetSegment>
      sourceReference: optional<list<ResponseAlignAlignedSegmentsItemSourceReferenceItem>>
      alignmentPercentage:
        type: optional<double>
        docs: Alignment percentage between the target and source segment.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseAlign:
    properties:
      alignmentPercentage:
        type: optional<double>
        docs: Alignment percentage between the source and target documents.
      alignedSegments: optional<list<ResponseAlignAlignedSegmentsItem>>
    source:
      openapi: ../swagger.json
  ResponseAllTemplateSections:
    properties:
      data:
        type: optional<list<Section>>
        docs: List of filtered template sections
    source:
      openapi: ../swagger.json
  ResponseAllTemplatesDataItemTemplateSectionsItem:
    properties:
      sort:
        type: optional<integer>
        docs: Sort order of the section within the template
      sections_id:
        type: optional<Section>
        docs: The section details
    source:
      openapi: ../swagger.json
    inline: true
  ResponseAllTemplatesDataItemTranslationsItem:
    properties:
      languages_id:
        type: optional<string>
        docs: Language identifier
      name:
        type: optional<string>
        docs: Localized name of the template
      description:
        type: optional<string>
        docs: Localized description of the template
    source:
      openapi: ../swagger.json
    inline: true
  ResponseAllTemplatesDataItem:
    properties:
      date_updated:
        type: optional<datetime>
        docs: The timestamp when the template was updated.
      name:
        type: optional<string>
        docs: Name of the template
      description:
        type: optional<string>
        docs: Description of the template
      key:
        type: optional<string>
        docs: Unique key for the template
      status:
        type: optional<string>
        docs: Status of the template.
      template_sections:
        type: optional<list<ResponseAllTemplatesDataItemTemplateSectionsItem>>
        docs: List of sections included in the template
      translations:
        type: optional<list<ResponseAllTemplatesDataItemTranslationsItem>>
        docs: Available translations for the template
    source:
      openapi: ../swagger.json
    inline: true
  ResponseAllTemplates:
    properties:
      data:
        type: optional<list<ResponseAllTemplatesDataItem>>
        docs: List of filtered templates
    source:
      openapi: ../swagger.json
  ResponseClassificationCreate:
    properties:
      result: optional<ClassificationResult>
    source:
      openapi: ../swagger.json
  ResponseCodesListCodesItemAdditionalCodesItem:
    properties:
      subsetName:
        type: optional<string>
        docs: Category or subset of the additional code
      code:
        type: optional<string>
        docs: The additional code
      description:
        type: optional<string>
        docs: Description of the additional code
      state:
        type: optional<CodesState>
        docs: State of the additional code
    source:
      openapi: ../swagger.json
    inline: true
  ResponseCodesListCodesItem:
    properties:
      system:
        type: optional<string>
        docs: The coding system used
      code:
        type: optional<string>
        docs: The medical code
      description:
        type: optional<string>
        docs: Description of the medical code
      state:
        type: optional<CodesState>
        docs: State of the code
      additionalCodes:
        type: optional<list<ResponseCodesListCodesItemAdditionalCodesItem>>
        docs: List of additional codes
    source:
      openapi: ../swagger.json
    inline: true
  ResponseCodesList:
    properties:
      codes:
        type: optional<list<ResponseCodesListCodesItem>>
        docs: List of medical codes
    source:
      openapi: ../swagger.json
  ResponseCodesReadAdditionalCodesItem:
    properties:
      subsetName:
        type: optional<string>
        docs: Category or subset of the additional code
      code:
        type: optional<string>
        docs: The additional code
      description:
        type: optional<string>
        docs: Description of the additional code
      state:
        type: optional<CodesState>
        docs: State of the additional code
    source:
      openapi: ../swagger.json
    inline: true
  ResponseCodesRead:
    properties:
      system:
        type: optional<string>
        docs: The coding system used
      code:
        type: optional<string>
        docs: The medical code
      description:
        type: optional<string>
        docs: Description of the medical code
      state:
        type: optional<CodesState>
        docs: State of the code
      additionalCodes:
        type: optional<list<ResponseCodesReadAdditionalCodesItem>>
        docs: List of additional codes
    source:
      openapi: ../swagger.json
  ResponseDirectusFactGroupsFilteredDataItemTranslationsItem:
    properties:
      id: optional<integer>
      languages_id: optional<string>
      name: optional<string>
    source:
      openapi: ../swagger.json
    inline: true
  ResponseDirectusFactGroupsFilteredDataItem:
    properties:
      id: optional<Uuid>
      key: optional<string>
      translations: >-
        optional<list<ResponseDirectusFactGroupsFilteredDataItemTranslationsItem>>
    source:
      openapi: ../swagger.json
    inline: true
  ResponseDirectusFactGroupsFiltered:
    properties:
      data: optional<list<ResponseDirectusFactGroupsFilteredDataItem>>
    source:
      openapi: ../swagger.json
  ResponseDocumentList:
    properties:
      data: optional<list<ResponseDocumentRead>>
    source:
      openapi: ../swagger.json
  ResponseDocumentReadSectionsItem:
    properties:
      key:
        type: optional<string>
        docs: Document section key
      name:
        type: optional<string>
        docs: Name or heading of the document section within the generated document
      text:
        type: optional<string>
        docs: Contents of the document section within the generated document
      sort:
        type: optional<integer>
        docs: Order of the document section within the generated document
      createdAt:
        type: optional<datetime>
        docs: The original timestamp when the document section was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the document section was last updated.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseDocumentRead:
    properties:
      id:
        type: optional<Uuid>
        docs: Unique ID of the generated document
      name:
        type: optional<string>
        docs: Name of the generated document
      templateRef:
        type: optional<string>
        docs: Reference for the used template
      isStream: optional<boolean>
      sections:
        type: optional<list<ResponseDocumentReadSectionsItem>>
        docs: Individual document sections
      createdAt:
        type: optional<datetime>
        docs: The original timestamp when the document was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the document was last updated.
      outputLanguage:
        type: optional<string>
        docs: >-
          The language in which the document will be generated. Check
          https://docs.corti.ai/about/languages for more.
    source:
      openapi: ../swagger.json
  ResponseFactEvidenceItem:
    properties:
      type:
        type: optional<string>
        docs: The category of evidence.
      reference:
        type: optional<string>
        docs: A reference that supports the fact.
      quote:
        type: optional<string>
        docs: >-
          A direct excerpt or phrase extracted from the reference source that
          justifies the fact.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseFact:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the fact.
      text:
        type: optional<string>
        docs: The text content of the fact.
      group:
        type: optional<string>
        docs: The key identifying the group to which the fact belongs.
      groupId:
        type: optional<Uuid>
        docs: The unique identifier of the group to which the fact belongs.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact has been marked as discarded.
      source:
        type: optional<V2SourceEnum>
        docs: The origin of the fact.
      createdAt:
        type: optional<datetime>
        docs: The timestamp when the fact was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the fact was last updated.
      evidence: optional<list<ResponseFactEvidenceItem>>
    source:
      openapi: ../swagger.json
  ResponseFactCreate:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the newly created fact.
      text:
        type: optional<string>
        docs: The textual content of the created fact.
      group:
        type: optional<string>
        docs: The group key categorizing the fact.
      groupId:
        type: optional<Uuid>
        docs: The unique identifier of the group to which the fact belongs.
      source:
        type: optional<V2SourceEnum>
        docs: The origin of the fact, such as 'USER' or 'SYSTEM'.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact has been marked as discarded.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the fact was last updated.
    source:
      openapi: ../swagger.json
  ResponseFactEvidence:
    properties:
      type:
        type: optional<string>
        docs: The category of evidence.
      reference:
        type: optional<string>
        docs: A reference that supports the fact.
      quote:
        type: optional<string>
        docs: >-
          A direct excerpt or phrase extracted from the reference source that
          justifies the fact.
    source:
      openapi: ../swagger.json
  ResponseFactUpdate:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the fact.
      text:
        type: optional<string>
        docs: The updated text content of the fact.
      group:
        type: optional<string>
        docs: The updated group key to which the fact belongs.
      groupId:
        type: optional<Uuid>
        docs: The unique identifier of the associated group.
      source:
        type: optional<V2SourceEnum>
        docs: The updated origin of the fact.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact is marked as discarded.
      createdAt:
        type: optional<datetime>
        docs: The original timestamp when the fact was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the fact was last updated.
    source:
      openapi: ../swagger.json
  ResponseFactsCreateFactsItem:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the newly created fact.
      text:
        type: optional<string>
        docs: The textual content of the created fact.
      group:
        type: optional<string>
        docs: The group key categorizing the fact.
      groupId:
        type: optional<Uuid>
        docs: The unique identifier of the group to which the fact belongs.
      source:
        type: optional<V2SourceEnum>
        docs: The origin of the fact, such as 'USER' or 'SYSTEM'.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact has been marked as discarded.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the fact was last updated.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseFactsCreate:
    properties:
      facts:
        type: optional<list<ResponseFactsCreateFactsItem>>
        docs: A list of successfully created facts.
    source:
      openapi: ../swagger.json
  ResponseFactsListFactsItemEvidenceItem:
    properties:
      type:
        type: optional<string>
        docs: The category of evidence.
      reference:
        type: optional<string>
        docs: A reference that supports the fact.
      quote:
        type: optional<string>
        docs: >-
          A direct excerpt or phrase extracted from the reference source that
          justifies the fact.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseFactsListFactsItem:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the fact.
      text:
        type: optional<string>
        docs: The text content of the fact.
      group:
        type: optional<string>
        docs: The key identifying the group to which the fact belongs.
      groupId:
        type: optional<Uuid>
        docs: The unique identifier of the group to which the fact belongs.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact has been marked as discarded.
      source:
        type: optional<V2SourceEnum>
        docs: The origin of the fact.
      createdAt:
        type: optional<datetime>
        docs: The timestamp when the fact was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the fact was last updated.
      evidence: optional<list<ResponseFactsListFactsItemEvidenceItem>>
    source:
      openapi: ../swagger.json
    inline: true
  ResponseFactsList:
    properties:
      facts:
        type: optional<list<ResponseFactsListFactsItem>>
        docs: A list of facts associated with the interaction.
    source:
      openapi: ../swagger.json
  ResponseFactsUpdateFactsItem:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the updated fact.
      text:
        type: optional<string>
        docs: The updated text content of the fact.
      group:
        type: optional<string>
        docs: The updated group key to which the fact belongs.
      groupId:
        type: optional<Uuid>
        docs: The unique identifier of the associated group.
      source:
        type: optional<V2SourceEnum>
        docs: The updated origin of the fact.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact is marked as discarded.
      createdAt:
        type: optional<datetime>
        docs: The original timestamp when the fact was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the fact was last updated.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseFactsUpdate:
    properties:
      facts:
        type: optional<list<ResponseFactsUpdateFactsItem>>
        docs: A list of updated facts.
    source:
      openapi: ../swagger.json
  ResponseFactsUpdateSingle:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the updated fact.
      text:
        type: optional<string>
        docs: The updated text content of the fact.
      group:
        type: optional<string>
        docs: The updated group key to which the fact belongs.
      groupId:
        type: optional<Uuid>
        docs: The unique identifier of the associated group.
      source:
        type: optional<V2SourceEnum>
        docs: The updated origin of the fact.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact is marked as discarded.
      createdAt:
        type: optional<datetime>
        docs: The original timestamp when the fact was created.
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the fact was last updated.
    source:
      openapi: ../swagger.json
  ResponseGuidelines:
    properties:
      summary:
        type: optional<string>
        docs: A summary of the response.
      sources: optional<list<QuerySource>>
    source:
      openapi: ../swagger.json
  ResponseInteraction:
    properties:
      id:
        type: optional<Uuid>
        docs: Unique identifier for the interaction.
      assignedUserId:
        type: optional<Uuid>
        docs: >-
          A unique identifier for the medical professional responsible for this
          interaction. If nulled, automatically set to a uuid.
      encounter:
        type: optional<Encounter>
        docs: Information about the encounter, including type, status, and timing.
      patient:
        type: optional<Patient>
        docs: Details about the patient involved in the interaction, if applicable.
      endedAt:
        type: optional<datetime>
        docs: The timestamp when the interaction concluded (UTC).
      createdAt:
        type: optional<datetime>
        docs: The timestamp when the interaction was started (UTC).
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the interaction was last modified (UTC).
      websocketUrl:
        type: optional<string>
        docs: >-
          WebSocket URL for streaming real-time interactions. Append a token in
          the format: /interactions/{interactionID}/streams?token=Bearer
          token-value-here
      lastUpdated:
        type: optional<datetime>
        docs: >-
          The timestamp indicating the last recorded update for this
          interaction.
    source:
      openapi: ../swagger.json
  ResponseInteractionCreate:
    properties:
      interactionId:
        type: optional<Uuid>
        docs: Unique identifier for the interaction.
      websocketUrl:
        type: optional<string>
        docs: >-
          WebSocket URL for streaming real-time interactions. Append a token in
          the format: /interactions/{interactionID}/streams?token=Bearer
          token-value-here
    source:
      openapi: ../swagger.json
  ResponseInteractionsInteractionsItem:
    properties:
      id:
        type: optional<Uuid>
        docs: Unique identifier for the interaction.
      assignedUserId:
        type: optional<Uuid>
        docs: >-
          A unique identifier for the medical professional responsible for this
          interaction. If nulled, automatically set to a uuid.
      encounter:
        type: optional<Encounter>
        docs: Information about the encounter, including type, status, and timing.
      patient:
        type: optional<Patient>
        docs: Details about the patient involved in the interaction, if applicable.
      endedAt:
        type: optional<datetime>
        docs: The timestamp when the interaction concluded (UTC).
      createdAt:
        type: optional<datetime>
        docs: The timestamp when the interaction was started (UTC).
      updatedAt:
        type: optional<datetime>
        docs: The timestamp when the interaction was last modified (UTC).
      websocketUrl:
        type: optional<string>
        docs: >-
          WebSocket URL for streaming real-time interactions. Append a token in
          the format: /interactions/{interactionID}/streams?token=Bearer
          token-value-here
      lastUpdated:
        type: optional<datetime>
        docs: >-
          The timestamp indicating the last recorded update for this
          interaction.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseInteractions:
    properties:
      interactions: optional<list<ResponseInteractionsInteractionsItem>>
    source:
      openapi: ../swagger.json
  ResponseMention:
    properties:
      properties:
        type: optional<string>
        docs: The type of mention (e.g., transcript, document).
      range:
        type: optional<list<integer>>
        docs: Character range for document type.
      time:
        type: optional<list<integer>>
        docs: Time range in seconds for transcript type.
      snippet:
        type: optional<string>
        docs: Text snippet for the mention.
      documentId:
        type: optional<Uuid>
        docs: The document ID if applicable.
      utteranceId:
        type: optional<Uuid>
        docs: The utterance ID if applicable.
      timestamp:
        type: optional<datetime>
        docs: The timestamp for transcript mentions.
    source:
      openapi: ../swagger.json
  ResponseMetadataCreateParticipantsRolesItem:
    properties:
      channel:
        type: optional<integer>
        docs: The audio channel associated with the participant.
      role:
        type: optional<V2TranscriptParticipantRoleEnum>
        docs: The role of the participant.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseMetadataCreate:
    properties:
      participantsRoles: optional<list<ResponseMetadataCreateParticipantsRolesItem>>
    source:
      openapi: ../swagger.json
  ResponseParticipantCreate:
    properties:
      channel:
        type: optional<integer>
        docs: The audio channel associated with the participant.
      role:
        type: optional<V2TranscriptParticipantRoleEnum>
        docs: The role of the participant.
    source:
      openapi: ../swagger.json
  ResponseQuery:
    properties:
      tool:
        type: optional<string>
        docs: >-
          The tool providing the response (e.g., guidelines, mentions,
          general_chat, etc.)
      data:
        type: optional<QueryData>
        docs: The response data specific to the tool.
    source:
      openapi: ../swagger.json
  ResponseQuestionPrompts:
    properties:
      prompts:
        type: optional<list<string>>
        docs: An array of suggested questions.
    source:
      openapi: ../swagger.json
  ResponseRecordingCreate:
    properties:
      recordingId:
        type: optional<Uuid>
        docs: The unique identifier for the created recording.
    source:
      openapi: ../swagger.json
  ResponseRecordingList:
    properties:
      recordings:
        type: optional<list<Uuid>>
        docs: A list of recordings for the interaction.
    source:
      openapi: ../swagger.json
  ResponseTranscriptAnonymize:
    properties:
      anonymized: optional<list<Utterance>>
    source:
      openapi: ../swagger.json
  ResponseTranscriptCreateTranscriptsItem:
    properties:
      channel:
        type: optional<integer>
        docs: The channel associated with this phrase/utterance.
      participant:
        type: optional<integer>
        docs: The identifier of the participant.
      speakerId:
        type: optional<integer>
        docs: Id to tag an identified speaker. Auto-increments.
      text:
        type: optional<string>
        docs: The spoken phrase or utterance extracted from the audio.
      start:
        type: optional<integer>
        docs: Start time in milliseconds for phrase/utterance.
      end:
        type: optional<integer>
        docs: End time in milliseconds for phrase/utterance.
    source:
      openapi: ../swagger.json
    inline: true
  ResponseTranscriptCreate:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the transcript.
      metadata:
        type: optional<ResponseMetadataCreate>
        docs: >-
          Additional information about the participants involved in the
          transcript.
      transcripts:
        type: optional<list<ResponseTranscriptCreateTranscriptsItem>>
        docs: An array of transcripts.
    source:
      openapi: ../swagger.json
  ResponseTranscriptListAllTranscriptsItem:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the transcript.
      transcriptSample: optional<string>
    source:
      openapi: ../swagger.json
    inline: true
  ResponseTranscriptListAll:
    properties:
      transcripts: optional<list<ResponseTranscriptListAllTranscriptsItem>>
    source:
      openapi: ../swagger.json
  ResponseTranscriptListAllSingle:
    properties:
      id:
        type: optional<Uuid>
        docs: The unique identifier of the transcript.
      transcriptSample: optional<string>
    source:
      openapi: ../swagger.json
  SectionTranslationsItem:
    properties:
      languages_id:
        type: optional<string>
        docs: Language identifier
      name:
        type: optional<string>
        docs: Localized name of the section
      description:
        type: optional<string>
        docs: Localized description of the section
    source:
      openapi: ../swagger.json
    inline: true
  Section:
    properties:
      date_updated:
        type: optional<datetime>
        docs: The timestamp when the section was updated.
      name:
        type: optional<string>
        docs: Name of the section
      alternate_names:
        type: optional<list<string>>
        docs: Alternate names for the section
      key:
        type: optional<string>
        docs: Unique key for the section
      description:
        type: optional<string>
        docs: Description of the section
      default_writing_style:
        type: optional<WritingStyle>
        docs: Default writing style for the section
      section_type:
        type: optional<string>
        docs: Type of section
      translations:
        type: optional<list<SectionTranslationsItem>>
        docs: Available translations for the section
    source:
      openapi: ../swagger.json
  SectionTranslation:
    properties:
      languages_id:
        type: optional<string>
        docs: Language identifier
      name:
        type: optional<string>
        docs: Localized name of the section
      description:
        type: optional<string>
        docs: Localized description of the section
    source:
      openapi: ../swagger.json
  SourceReference:
    properties:
      text:
        type: optional<string>
        docs: The content of the matching segment in the source document.
      range:
        type: optional<list<integer>>
        docs: Start and end indices of the segment in the source document.
    source:
      openapi: ../swagger.json
  TargetSegment:
    properties:
      text:
        type: optional<string>
        docs: The content of the target document segment.
      range:
        type: optional<list<integer>>
        docs: Start and end indices of the segment in the target document.
    source:
      openapi: ../swagger.json
  TemplateFilteredTemplateSectionsItem:
    properties:
      sort:
        type: optional<integer>
        docs: Sort order of the section within the template
      sections_id:
        type: optional<Section>
        docs: The section details
    source:
      openapi: ../swagger.json
    inline: true
  TemplateFilteredTranslationsItem:
    properties:
      languages_id:
        type: optional<string>
        docs: Language identifier
      name:
        type: optional<string>
        docs: Localized name of the template
      description:
        type: optional<string>
        docs: Localized description of the template
    source:
      openapi: ../swagger.json
    inline: true
  TemplateFiltered:
    properties:
      date_updated:
        type: optional<datetime>
        docs: The timestamp when the template was updated.
      name:
        type: optional<string>
        docs: Name of the template
      description:
        type: optional<string>
        docs: Description of the template
      key:
        type: optional<string>
        docs: Unique key for the template
      status:
        type: optional<string>
        docs: Status of the template.
      template_sections:
        type: optional<list<TemplateFilteredTemplateSectionsItem>>
        docs: List of sections included in the template
      translations:
        type: optional<list<TemplateFilteredTranslationsItem>>
        docs: Available translations for the template
    source:
      openapi: ../swagger.json
  TemplateSection:
    properties:
      sort:
        type: optional<integer>
        docs: Sort order of the section within the template
      sections_id:
        type: optional<Section>
        docs: The section details
    source:
      openapi: ../swagger.json
  TemplateTranslation:
    properties:
      languages_id:
        type: optional<string>
        docs: Language identifier
      name:
        type: optional<string>
        docs: Localized name of the template
      description:
        type: optional<string>
        docs: Localized description of the template
    source:
      openapi: ../swagger.json
  Transcript:
    properties:
      channel:
        type: optional<integer>
        docs: The channel associated with this phrase/utterance.
      participant:
        type: optional<integer>
        docs: The identifier of the participant.
      speakerId:
        type: optional<integer>
        docs: Id to tag an identified speaker. Auto-increments.
      text:
        type: optional<string>
        docs: The spoken phrase or utterance extracted from the audio.
      start:
        type: optional<integer>
        docs: Start time in milliseconds for phrase/utterance.
      end:
        type: optional<integer>
        docs: End time in milliseconds for phrase/utterance.
    source:
      openapi: ../swagger.json
  Uuid:
    type: string
    validation:
      format: uuid
  Utterance:
    properties:
      value: optional<string>
      role: optional<string>
    source:
      openapi: ../swagger.json
  V2DocumentContextType: string
  V2DocumentContextTypeEnum:
    enum:
      - facts
      - transcript
      - string
    source:
      openapi: ../swagger.json
  V2EncounterStatus: string
  V2EncounterStatusEnum:
    enum:
      - planned
      - value: in-progress
        name: InProgress
      - value: on-hold
        name: OnHold
      - completed
      - cancelled
      - deleted
    source:
      openapi: ../swagger.json
  V2EncounterType: string
  V2EncounterTypeEnum:
    enum:
      - first_consultation
      - consultation
      - emergency
      - inpatient
      - outpatient
    source:
      openapi: ../swagger.json
  V2Gender: string
  V2GenderEnum:
    enum:
      - male
      - female
      - unknown
      - other
    source:
      openapi: ../swagger.json
  V2ParticipantRoleEnum:
    enum:
      - doctor
      - patient
      - multiple
    source:
      openapi: ../swagger.json
  V2Source: string
  V2SourceEnum:
    enum:
      - core
      - system
      - user
    source:
      openapi: ../swagger.json
  V2TranscriptParticipantRole: string
  V2TranscriptParticipantRoleEnum:
    enum:
      - doctor
      - patient
      - multiple
    source:
      openapi: ../swagger.json
  WritingStyle:
    properties:
      name:
        type: optional<string>
        docs: Name of the writing style
    source:
      openapi: ../swagger.json
  CommonErrorResponse:
    properties:
      requestid: optional<string>
      type: optional<string>
      status: optional<integer>
      title: optional<string>
      details: optional<string>
      instance: optional<string>
    source:
      openapi: ../swagger.json
  CopilotCommonErrorResponse:
    properties:
      requestid: optional<string>
      type: optional<string>
      status: optional<integer>
      title: optional<string>
      details: optional<string>
      instance: optional<string>
    source:
      openapi: ../swagger.json
  CopilotModelsV2EncounterStatus: string
  CopilotModelsV2EncounterType: string
  CopilotModelsV2Gender: string
  CopilotModelsV2Source: string
  CopilotModelsV2TranscriptParticipantRole: string
  CortiCommonErrorResponse:
    properties:
      requestid: optional<string>
      type: optional<string>
      status: optional<integer>
      title: optional<string>
      details: optional<string>
      instance: optional<string>
    source:
      openapi: ../swagger.json
  TypeNoContent: map<string, unknown>
  UuidUuid:
    type: string
    validation:
      format: uuid
  ResponseTranscriptTime:
    properties:
      start: optional<double>
      end: optional<double>
    source:
      openapi: ../swagger.json
  ResponseTranscript:
    properties:
      id: optional<Uuid>
      start: optional<double>
      duration: optional<double>
      transcript: optional<string>
      isFinal: optional<boolean>
      participant: optional<RequestParticipantCreate>
      time: optional<ResponseTranscriptTime>
    source:
      openapi: ../swagger.json
  DocumentationEvidence:
    properties:
      evidenceId: optional<Uuid>
      type: optional<string>
      quote: optional<string>
    source:
      openapi: ../swagger.json
  ResponseDocumentation:
    properties:
      id: optional<Uuid>
      text: optional<string>
      sectionId: optional<Uuid>
      sectionTitle: optional<string>
      evidence: optional<DocumentationEvidence>
    source:
      openapi: ../swagger.json
navigation:
  - interactions
  - facts
  - documents
  - codes
  - recordings
  - transcripts
",
    },
    "codes.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "generateCodes": {
              "auth": false,
              "display-name": "Generate Codes",
              "docs": " Generate Codes.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.BadGatewayError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {
                    "context": {
                      "data": "data",
                      "type": "string",
                    },
                    "modelName": ""geography_modelName (Latest)" | "geography_modelName_version"",
                  },
                  "response": {
                    "body": {
                      "codes": [
                        {
                          "additionalCodes": [
                            {
                              "code": "W0231",
                              "subsetName": "orsakskoder",
                            },
                          ],
                          "code": "T933",
                          "description": "description",
                          "system": "ICD-10",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/interactions/{id}/codes/",
              "path-parameters": {
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "context": {
                      "docs": "Context object containing type and data",
                      "type": "root.CodesContext",
                    },
                    "existingCodes": {
                      "docs": "List of pre-selected codes before interaction",
                      "type": "optional<list<string>>",
                    },
                    "modelName": {
                      "docs": "The model name used for code predictions",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestCodesPredict",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "List of predicted codes.",
                "status-code": 200,
                "type": "root.ResponseCodesList",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listCodes": {
              "auth": false,
              "display-name": "List Codes",
              "docs": " Get all codes associated with an interaction.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "codes": [
                        {
                          "additionalCodes": [
                            {
                              "code": "W0231",
                              "subsetName": "orsakskoder",
                            },
                          ],
                          "code": "T933",
                          "description": "description",
                          "system": "ICD-10",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/codes/",
              "path-parameters": {
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "List of associated codes.",
                "status-code": 200,
                "type": "root.ResponseCodesList",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "selectCodes": {
              "auth": false,
              "display-name": "Select Codes",
              "docs": " Mark provided codes as selected.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "codes": [
                        {
                          "additionalCodes": [
                            {
                              "code": "W0231",
                              "subsetName": "orsakskoder",
                            },
                          ],
                          "code": "T933",
                          "description": "description",
                          "system": "ICD-10",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PUT",
              "pagination": undefined,
              "path": "/interactions/{id}/codes/",
              "path-parameters": {
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "finalCodes": {
                      "docs": "List of final codes",
                      "type": "optional<list<RequestCodesUpdateFinalCodesItem>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestCodesUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Updated list of selected codes.",
                "status-code": 200,
                "type": "root.ResponseCodesList",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "RequestCodesUpdateFinalCodesItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "additionalCodes": {
                "docs": "List of additional codes",
                "type": "optional<list<string>>",
              },
              "code": {
                "docs": "The medical code to update",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listCodes:
      path: /interactions/{id}/codes/
      method: GET
      auth: false
      docs: ' Get all codes associated with an interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
      display-name: List Codes
      response:
        docs: List of associated codes.
        type: root.ResponseCodesList
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              codes:
                - system: ICD-10
                  code: T933
                  description: description
                  additionalCodes:
                    - subsetName: orsakskoder
                      code: W0231
    generateCodes:
      path: /interactions/{id}/codes/
      method: POST
      auth: false
      docs: ' Generate Codes.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
      display-name: Generate Codes
      request:
        name: RequestCodesPredict
        body:
          properties:
            modelName:
              type: string
              docs: The model name used for code predictions
            context:
              type: root.CodesContext
              docs: Context object containing type and data
            existingCodes:
              type: optional<list<string>>
              docs: List of pre-selected codes before interaction
        content-type: application/json
      response:
        docs: List of predicted codes.
        type: root.ResponseCodesList
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.BadGatewayError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          request:
            modelName: '"geography_modelName (Latest)" | "geography_modelName_version"'
            context:
              type: string
              data: data
          response:
            body:
              codes:
                - system: ICD-10
                  code: T933
                  description: description
                  additionalCodes:
                    - subsetName: orsakskoder
                      code: W0231
    selectCodes:
      path: /interactions/{id}/codes/
      method: PUT
      auth: false
      docs: ' Mark provided codes as selected.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
      display-name: Select Codes
      request:
        name: RequestCodesUpdate
        body:
          properties:
            finalCodes:
              type: optional<list<RequestCodesUpdateFinalCodesItem>>
              docs: List of final codes
        content-type: application/json
      response:
        docs: Updated list of selected codes.
        type: root.ResponseCodesList
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          request: {}
          response:
            body:
              codes:
                - system: ICD-10
                  code: T933
                  description: description
                  additionalCodes:
                    - subsetName: orsakskoder
                      code: W0231
  source:
    openapi: ../swagger.json
types:
  RequestCodesUpdateFinalCodesItem:
    properties:
      code:
        type: optional<string>
        docs: The medical code to update
      additionalCodes:
        type: optional<list<string>>
        docs: List of additional codes
    source:
      openapi: ../swagger.json
    inline: true
",
    },
    "documents.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteDocument": {
              "auth": false,
              "display-name": "Delete Document",
              "docs": undefined,
              "errors": [
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "documentId": "documentId",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/interactions/{id}/documents/{documentId}",
              "path-parameters": {
                "documentId": {
                  "docs": "The document ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "",
                "status-code": 204,
                "type": "root.NoContent",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "generateDocument": {
              "auth": false,
              "display-name": "Generate Document",
              "docs": " Generate Document.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "code-samples": [
                    {
                      "code": "curl --request POST \
  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
  --header 'Content-Type: application/json' \
  --data '{
  "context": [
    {
      "type": "facts",
      "data": [
        {
          "text": "<string>",
          "group": "other",
          "source": "core"
        }
      ]
    }
  ],
  "templateKey": "<string>",
  "name": "<string>",
  "outputLanguage": "<string>"
}'",
                      "docs": undefined,
                      "install": undefined,
                      "language": "text",
                      "name": "from Facts",
                    },
                    {
                      "code": "curl --request POST \
  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
  --header 'Content-Type: application/json' \
  --data '{
  "context": [
    {
      "type": "transcript",
      "data": {
        "channel": 1,
        "end": 129,
        "participant": 123,
        "start": 20,
        "text": "<string>"
      }
    }
  ],
  "templateKey": "<string>",
  "name": "<string>",
  "outputLanguage": "<string>"
}'",
                      "docs": undefined,
                      "install": undefined,
                      "language": "text",
                      "name": "from Transcript",
                    },
                    {
                      "code": "curl --request POST \
  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
  --header 'Content-Type: application/json' \
  --data '{
  "context": [
    {
      "type": "string",
      "data": "<string>"
      }
  ],
  "templateKey": "<string>",
  "template": {
   "sectionKeys": [
      "<string>"
    ],
  "name": "<string>",
  "outputLanguage": "<string>"
}'",
                      "docs": undefined,
                      "install": undefined,
                      "language": "text",
                      "name": "assemble Template",
                    },
                    {
                      "code": "curl --request POST \
  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
  --header 'Content-Type: application/json' \
  --data '{
  "context": [
    {
      "type": "string",
      "data": "<string>"
    }
  ],
  "templateKey": "<string>",
  "name": "<string>",
  "outputLanguage": "<string>"
}'",
                      "docs": undefined,
                      "install": undefined,
                      "language": "text",
                      "name": "from string",
                    },
                  ],
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {
                    "context": [
                      {
                        "data": [
                          {
                            "source": "core",
                            "text": "text",
                          },
                        ],
                        "type": "facts",
                      },
                    ],
                    "outputLanguage": "outputLanguage",
                    "templateKey": "templateKey",
                  },
                  "response": {
                    "body": {
                      "createdAt": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "isStream": true,
                      "name": "name",
                      "outputLanguage": "outputLanguage",
                      "sections": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "key": "key",
                          "name": "name",
                          "sort": 1,
                          "text": "text",
                          "updatedAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                      "templateRef": "templateRef",
                      "updatedAt": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/interactions/{id}/documents/",
              "path-parameters": {
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "context": {
                      "docs": "An array of context objects.",
                      "type": "list<RequestDocumentCreateContextItem>",
                    },
                    "modelName": "optional<string>",
                    "name": {
                      "docs": "An optional name for the document.",
                      "type": "optional<string>",
                    },
                    "outputLanguage": {
                      "docs": "The language in which the document will be generated. Check https://docs.corti.ai/about/languages for more.",
                      "type": "string",
                    },
                    "template": {
                      "docs": "Template details if the template should be generated during the request.",
                      "type": "optional<root.DocumentTemplate>",
                    },
                    "templateKey": {
                      "docs": "The key of the template that informs on what kind of document is to be generated.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestDocumentCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": " ",
                "status-code": 201,
                "type": "root.ResponseDocumentRead",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "getDocument": {
              "auth": false,
              "display-name": "Get Document",
              "docs": " Get Document.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "documentId": "documentId",
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "createdAt": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "isStream": true,
                      "name": "name",
                      "outputLanguage": "outputLanguage",
                      "sections": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "key": "key",
                          "name": "name",
                          "sort": 1,
                          "text": "text",
                          "updatedAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                      "templateRef": "templateRef",
                      "updatedAt": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/documents/{documentId}",
              "path-parameters": {
                "documentId": {
                  "docs": "The document ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetInteractionsIdDocumentsDocumentIdRequest",
                "query-parameters": {
                  "context": {
                    "docs": "If true the response contains the context used to generated the document, such as fact, transcript or string.",
                    "type": "optional<boolean>",
                  },
                },
              },
              "response": {
                "docs": " ",
                "status-code": 200,
                "type": "root.ResponseDocumentRead",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listDocuments": {
              "auth": false,
              "display-name": "List Documents",
              "docs": " List Documents",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "isStream": true,
                          "name": "name",
                          "outputLanguage": "outputLanguage",
                          "sections": [
                            {},
                          ],
                          "templateRef": "templateRef",
                          "updatedAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/documents/",
              "path-parameters": {
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": " ",
                "status-code": 200,
                "type": "root.ResponseDocumentList",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "updateDocument": {
              "auth": false,
              "display-name": "Update Document",
              "docs": undefined,
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "documentId": "documentId",
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "createdAt": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "isStream": true,
                      "name": "name",
                      "outputLanguage": "outputLanguage",
                      "sections": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "key": "key",
                          "name": "name",
                          "sort": 1,
                          "text": "text",
                          "updatedAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                      "templateRef": "templateRef",
                      "updatedAt": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/interactions/{id}/documents/{documentId}",
              "path-parameters": {
                "documentId": {
                  "docs": "The document ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
                "id": {
                  "docs": "The interaction ID representing the context for the request. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "An optional name for the document.",
                      "type": "optional<string>",
                    },
                    "sections": "optional<list<RequestDocumentUpdateSectionsItem>>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestDocumentUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": " ",
                "status-code": 200,
                "type": "root.ResponseDocumentRead",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "RequestDocumentCreateContextItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "data": {
                "docs": "The actual data, which can be an array of facts, a transcript, or a string.",
                "type": "root.DocumentContextData",
              },
              "type": {
                "docs": "The type of context data.",
                "type": "root.V2DocumentContextTypeEnum",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestDocumentUpdateSectionsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "key": "string",
              "name": "optional<string>",
              "sort": "optional<integer>",
              "text": "optional<string>",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listDocuments:
      path: /interactions/{id}/documents/
      method: GET
      auth: false
      docs: ' List Documents'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
      display-name: List Documents
      response:
        docs: ' '
        type: root.ResponseDocumentList
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              data:
                - id: id
                  name: name
                  templateRef: templateRef
                  isStream: true
                  sections:
                    - {}
                  createdAt: '2024-01-15T09:30:00Z'
                  updatedAt: '2024-01-15T09:30:00Z'
                  outputLanguage: outputLanguage
    generateDocument:
      path: /interactions/{id}/documents/
      method: POST
      auth: false
      docs: ' Generate Document.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
      display-name: Generate Document
      request:
        name: RequestDocumentCreate
        body:
          properties:
            context:
              docs: An array of context objects.
              type: list<RequestDocumentCreateContextItem>
            templateKey:
              type: string
              docs: >-
                The key of the template that informs on what kind of document is
                to be generated.
            template:
              type: optional<root.DocumentTemplate>
              docs: >-
                Template details if the template should be generated during the
                request.
            name:
              type: optional<string>
              docs: An optional name for the document.
            modelName: optional<string>
            outputLanguage:
              type: string
              docs: >-
                The language in which the document will be generated. Check
                https://docs.corti.ai/about/languages for more.
        content-type: application/json
      response:
        docs: ' '
        type: root.ResponseDocumentRead
        status-code: 201
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          request:
            context:
              - type: facts
                data:
                  - text: text
                    source: core
            templateKey: templateKey
            outputLanguage: outputLanguage
          response:
            body:
              id: id
              name: name
              templateRef: templateRef
              isStream: true
              sections:
                - key: key
                  name: name
                  text: text
                  sort: 1
                  createdAt: '2024-01-15T09:30:00Z'
                  updatedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              updatedAt: '2024-01-15T09:30:00Z'
              outputLanguage: outputLanguage
          code-samples:
            - name: from Facts
              language: text
              code: |-
                curl --request POST \
                  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
                  --header 'Content-Type: application/json' \
                  --data '{
                  "context": [
                    {
                      "type": "facts",
                      "data": [
                        {
                          "text": "<string>",
                          "group": "other",
                          "source": "core"
                        }
                      ]
                    }
                  ],
                  "templateKey": "<string>",
                  "name": "<string>",
                  "outputLanguage": "<string>"
                }'
            - name: from Transcript
              language: text
              code: |-
                curl --request POST \
                  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
                  --header 'Content-Type: application/json' \
                  --data '{
                  "context": [
                    {
                      "type": "transcript",
                      "data": {
                        "channel": 1,
                        "end": 129,
                        "participant": 123,
                        "start": 20,
                        "text": "<string>"
                      }
                    }
                  ],
                  "templateKey": "<string>",
                  "name": "<string>",
                  "outputLanguage": "<string>"
                }'
            - name: assemble Template
              language: text
              code: |-
                curl --request POST \
                  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
                  --header 'Content-Type: application/json' \
                  --data '{
                  "context": [
                    {
                      "type": "string",
                      "data": "<string>"
                      }
                  ],
                  "templateKey": "<string>",
                  "template": {
                   "sectionKeys": [
                      "<string>"
                    ],
                  "name": "<string>",
                  "outputLanguage": "<string>"
                }'
            - name: from string
              language: text
              code: |-
                curl --request POST \
                  --url https://api.{environment}.corti.app/v2/interactions/{id}/documents \
                  --header 'Content-Type: application/json' \
                  --data '{
                  "context": [
                    {
                      "type": "string",
                      "data": "<string>"
                    }
                  ],
                  "templateKey": "<string>",
                  "name": "<string>",
                  "outputLanguage": "<string>"
                }'
    getDocument:
      path: /interactions/{id}/documents/{documentId}
      method: GET
      auth: false
      docs: ' Get Document.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
        documentId:
          type: string
          docs: >-
            The document ID representing the context for the request. Must be a
            valid UUID.
      display-name: Get Document
      request:
        name: GetInteractionsIdDocumentsDocumentIdRequest
        query-parameters:
          context:
            type: optional<boolean>
            docs: >-
              If true the response contains the context used to generated the
              document, such as fact, transcript or string.
      response:
        docs: ' '
        type: root.ResponseDocumentRead
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
            documentId: documentId
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              id: id
              name: name
              templateRef: templateRef
              isStream: true
              sections:
                - key: key
                  name: name
                  text: text
                  sort: 1
                  createdAt: '2024-01-15T09:30:00Z'
                  updatedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              updatedAt: '2024-01-15T09:30:00Z'
              outputLanguage: outputLanguage
    deleteDocument:
      path: /interactions/{id}/documents/{documentId}
      method: DELETE
      auth: false
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
        documentId:
          type: string
          docs: >-
            The document ID representing the context for the request. Must be a
            valid UUID.
      display-name: Delete Document
      response:
        docs: ''
        type: root.NoContent
        status-code: 204
      errors:
        - root.ForbiddenError
        - root.NotFoundError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
            documentId: documentId
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              key: value
    updateDocument:
      path: /interactions/{id}/documents/{documentId}
      method: PATCH
      auth: false
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The interaction ID representing the context for the request. Must be
            a valid UUID.
        documentId:
          type: string
          docs: >-
            The document ID representing the context for the request. Must be a
            valid UUID.
      display-name: Update Document
      request:
        name: RequestDocumentUpdate
        body:
          properties:
            name:
              type: optional<string>
              docs: An optional name for the document.
            sections: optional<list<RequestDocumentUpdateSectionsItem>>
        content-type: application/json
      response:
        docs: ' '
        type: root.ResponseDocumentRead
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
            documentId: documentId
          headers:
            Tenant-Name: copiloteu
          request: {}
          response:
            body:
              id: id
              name: name
              templateRef: templateRef
              isStream: true
              sections:
                - key: key
                  name: name
                  text: text
                  sort: 1
                  createdAt: '2024-01-15T09:30:00Z'
                  updatedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              updatedAt: '2024-01-15T09:30:00Z'
              outputLanguage: outputLanguage
  source:
    openapi: ../swagger.json
types:
  RequestDocumentCreateContextItem:
    properties:
      type:
        type: root.V2DocumentContextTypeEnum
        docs: The type of context data.
      data:
        type: root.DocumentContextData
        docs: >-
          The actual data, which can be an array of facts, a transcript, or a
          string.
    source:
      openapi: ../swagger.json
    inline: true
  RequestDocumentUpdateSectionsItem:
    properties:
      key: string
      name: optional<string>
      text: optional<string>
      sort: optional<integer>
    source:
      openapi: ../swagger.json
    inline: true
",
    },
    "facts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "addFacts": {
              "auth": false,
              "display-name": "Add Facts",
              "docs": " Adds new facts to an interaction.",
              "errors": [
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {
                    "facts": [
                      {
                        "group": "other",
                        "text": "text",
                      },
                    ],
                  },
                  "response": {
                    "body": {
                      "facts": [
                        {
                          "group": "other",
                          "groupId": "groupId",
                          "id": "id",
                          "isDiscarded": true,
                          "source": "core",
                          "text": "text",
                          "updatedAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/interactions/{id}/facts/",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction to which the facts belong. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "facts": {
                      "docs": "A list of facts to be created.",
                      "type": "list<RequestFactsCreateFactsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestFactsCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Returns the created facts, including their unique identifiers and associated metadata.",
                "status-code": 200,
                "type": "root.ResponseFactsCreate",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listFactGroups": {
              "auth": false,
              "display-name": "List Fact Groups",
              "docs": undefined,
              "errors": [
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "id": "id",
                          "key": "key",
                          "translations": [
                            {},
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/factgroups/",
              "response": {
                "docs": " ",
                "status-code": 200,
                "type": "root.ResponseDirectusFactGroupsFiltered",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listFacts": {
              "auth": false,
              "display-name": "List Facts",
              "docs": " Retrieves a list of facts for a given interaction.",
              "errors": [
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "facts": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "evidence": [
                            {},
                          ],
                          "group": "other",
                          "groupId": "groupId",
                          "id": "id",
                          "isDiscarded": true,
                          "source": "core",
                          "text": "text",
                          "updatedAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/facts/",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which facts should be retrieved. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Returns a list of facts associated with the specified interaction.",
                "status-code": 200,
                "type": "root.ResponseFactsList",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "updateFact": {
              "auth": false,
              "display-name": "Update Fact",
              "docs": " Updates an existing fact within a specific interaction. If the interaction `status = "in progress"`, the updated fact will be sent to the client via WebSocket. To discard a fact, simply set `discarded = true`.",
              "errors": [
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "factId": "factId",
                    "id": "id",
                  },
                  "request": {
                    "source": "core",
                    "text": "text",
                  },
                  "response": {
                    "body": {
                      "createdAt": "2024-01-15T09:30:00Z",
                      "group": "other",
                      "groupId": "groupId",
                      "id": "id",
                      "isDiscarded": true,
                      "source": "core",
                      "text": "text",
                      "updatedAt": "2024-01-15T09:30:00Z",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/interactions/{id}/facts/{factId}",
              "path-parameters": {
                "factId": {
                  "docs": "The unique identifier of the fact to update. Must be a valid UUID.",
                  "type": "string",
                },
                "id": {
                  "docs": "The unique identifier of the interaction to which the fact belongs. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "group": {
                      "docs": "The updated group key for the fact.",
                      "type": "optional<string>",
                    },
                    "isDiscarded": {
                      "docs": "Indicates whether the fact should be marked as discarded.",
                      "type": "optional<boolean>",
                    },
                    "source": {
                      "docs": "The updated origin of the fact.",
                      "type": "root.V2SourceEnum",
                    },
                    "text": {
                      "docs": "The updated text of the fact.",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestFactUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Returns the updated fact, including updated fields.",
                "status-code": 200,
                "type": "root.ResponseFactUpdate",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "updateFacts": {
              "auth": false,
              "display-name": "Update Facts",
              "docs": " Updates multiple facts associated with an interaction. If the interaction `status = "in progress"`, the updated facts will be sent to the client over WebSocket.",
              "errors": [
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {
                    "facts": [
                      {
                        "factId": "factId",
                      },
                    ],
                  },
                  "response": {
                    "body": {
                      "facts": [
                        {
                          "createdAt": "2024-01-15T09:30:00Z",
                          "group": "other",
                          "groupId": "groupId",
                          "id": "id",
                          "isDiscarded": true,
                          "source": "core",
                          "text": "text",
                          "updatedAt": "2024-01-15T09:30:00Z",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/interactions/{id}/facts/",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which facts are being updated. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "facts": {
                      "docs": "A list of facts to be updated.",
                      "type": "list<RequestFactsUpdateFactsItem>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestFactsUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Returns the list of successfully updated facts.",
                "status-code": 200,
                "type": "root.ResponseFactsUpdate",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "RequestFactsCreateFactsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "group": {
                "docs": "The key identifying the group to which the fact belongs.",
                "type": "string",
              },
              "source": {
                "docs": "The origin of the fact, such as 'USER' or 'SYSTEM'.",
                "type": "optional<root.V2SourceEnum>",
              },
              "text": {
                "docs": "The text content of the fact.",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
          "RequestFactsUpdateFactsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "factId": {
                "docs": "The unique identifier of the fact to be updated.",
                "type": "root.Uuid",
              },
              "group": {
                "docs": "The updated group key for the fact.",
                "type": "optional<string>",
              },
              "isDiscarded": {
                "docs": "Indicates whether the fact should be discarded.",
                "type": "optional<boolean>",
              },
              "text": {
                "docs": "The updated text content of the fact.",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listFactGroups:
      path: /factgroups/
      method: GET
      auth: false
      source:
        openapi: ../swagger.json
      display-name: List Fact Groups
      response:
        docs: ' '
        type: root.ResponseDirectusFactGroupsFiltered
        status-code: 200
      errors:
        - root.InternalServerError
      examples:
        - headers:
            Tenant-Name: copiloteu
          response:
            body:
              data:
                - id: id
                  key: key
                  translations:
                    - {}
    listFacts:
      path: /interactions/{id}/facts/
      method: GET
      auth: false
      docs: ' Retrieves a list of facts for a given interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which facts should be
            retrieved. Must be a valid UUID.
      display-name: List Facts
      response:
        docs: Returns a list of facts associated with the specified interaction.
        type: root.ResponseFactsList
        status-code: 200
      errors:
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              facts:
                - id: id
                  text: text
                  group: other
                  groupId: groupId
                  isDiscarded: true
                  source: core
                  createdAt: '2024-01-15T09:30:00Z'
                  updatedAt: '2024-01-15T09:30:00Z'
                  evidence:
                    - {}
    addFacts:
      path: /interactions/{id}/facts/
      method: POST
      auth: false
      docs: ' Adds new facts to an interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction to which the facts belong.
            Must be a valid UUID.
      display-name: Add Facts
      request:
        name: RequestFactsCreate
        body:
          properties:
            facts:
              docs: A list of facts to be created.
              type: list<RequestFactsCreateFactsItem>
        content-type: application/json
      response:
        docs: >-
          Returns the created facts, including their unique identifiers and
          associated metadata.
        type: root.ResponseFactsCreate
        status-code: 200
      errors:
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          request:
            facts:
              - text: text
                group: other
          response:
            body:
              facts:
                - id: id
                  text: text
                  group: other
                  groupId: groupId
                  source: core
                  isDiscarded: true
                  updatedAt: '2024-01-15T09:30:00Z'
    updateFacts:
      path: /interactions/{id}/facts/
      method: PATCH
      auth: false
      docs: ' Updates multiple facts associated with an interaction. If the interaction `status = "in progress"`, the updated facts will be sent to the client over WebSocket.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which facts are being
            updated. Must be a valid UUID.
      display-name: Update Facts
      request:
        name: RequestFactsUpdate
        body:
          properties:
            facts:
              docs: A list of facts to be updated.
              type: list<RequestFactsUpdateFactsItem>
        content-type: application/json
      response:
        docs: Returns the list of successfully updated facts.
        type: root.ResponseFactsUpdate
        status-code: 200
      errors:
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          request:
            facts:
              - factId: factId
          response:
            body:
              facts:
                - id: id
                  text: text
                  group: other
                  groupId: groupId
                  source: core
                  isDiscarded: true
                  createdAt: '2024-01-15T09:30:00Z'
                  updatedAt: '2024-01-15T09:30:00Z'
    updateFact:
      path: /interactions/{id}/facts/{factId}
      method: PATCH
      auth: false
      docs: ' Updates an existing fact within a specific interaction. If the interaction `status = "in progress"`, the updated fact will be sent to the client via WebSocket. To discard a fact, simply set `discarded = true`.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction to which the fact belongs.
            Must be a valid UUID.
        factId:
          type: string
          docs: The unique identifier of the fact to update. Must be a valid UUID.
      display-name: Update Fact
      request:
        name: RequestFactUpdate
        body:
          properties:
            text:
              type: string
              docs: The updated text of the fact.
            group:
              type: optional<string>
              docs: The updated group key for the fact.
            source:
              type: root.V2SourceEnum
              docs: The updated origin of the fact.
            isDiscarded:
              type: optional<boolean>
              docs: Indicates whether the fact should be marked as discarded.
        content-type: application/json
      response:
        docs: Returns the updated fact, including updated fields.
        type: root.ResponseFactUpdate
        status-code: 200
      errors:
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
            factId: factId
          headers:
            Tenant-Name: copiloteu
          request:
            text: text
            source: core
          response:
            body:
              id: id
              text: text
              group: other
              groupId: groupId
              source: core
              isDiscarded: true
              createdAt: '2024-01-15T09:30:00Z'
              updatedAt: '2024-01-15T09:30:00Z'
  source:
    openapi: ../swagger.json
types:
  RequestFactsCreateFactsItem:
    properties:
      text:
        type: string
        docs: The text content of the fact.
      group:
        type: string
        docs: The key identifying the group to which the fact belongs.
      source:
        type: optional<root.V2SourceEnum>
        docs: The origin of the fact, such as 'USER' or 'SYSTEM'.
    source:
      openapi: ../swagger.json
    inline: true
  RequestFactsUpdateFactsItem:
    properties:
      factId:
        type: root.Uuid
        docs: The unique identifier of the fact to be updated.
      isDiscarded:
        type: optional<boolean>
        docs: Indicates whether the fact should be discarded.
      text:
        type: optional<string>
        docs: The updated text content of the fact.
      group:
        type: optional<string>
        docs: The updated group key for the fact.
    source:
      openapi: ../swagger.json
    inline: true
",
    },
    "interactions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "createInteraction": {
              "auth": false,
              "display-name": "Create Interaction",
              "docs": " Creates a new interaction.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "request": {
                    "encounter": {
                      "identifier": "identifier",
                      "period": {
                        "startedAt": "2024-01-15T09:30:00Z",
                      },
                      "status": "planned",
                      "type": "first_consultation",
                    },
                  },
                  "response": {
                    "body": {
                      "interactionId": "interactionId",
                      "websocketUrl": "websocketUrl",
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/interactions/",
              "request": {
                "body": {
                  "properties": {
                    "assignedUserId": {
                      "docs": "A unique identifier for the medical professional responsible for this interaction. If nulled, automatically set to a uuid.",
                      "type": "optional<root.Uuid>",
                    },
                    "encounter": {
                      "docs": "Details about the encounter.",
                      "type": "root.Encounter",
                    },
                    "patient": {
                      "docs": "Optional patient details.",
                      "type": "optional<root.Patient>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestInteractionCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Returns the newly created interaction with its assigned ID and WebSocket URL for real-time data streaming.",
                "status-code": 201,
                "type": "root.ResponseInteractionCreate",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "deleteInteraction": {
              "auth": false,
              "display-name": "Delete Interaction",
              "docs": " Deletes an existing interaction.",
              "errors": [
                "root.ForbiddenError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/interactions/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction to delete. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "The interaction was successfully deleted. No response body is returned.",
                "status-code": 204,
                "type": "root.NoContent",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "getExistingInteraction": {
              "auth": false,
              "display-name": "Get Existing Interaction",
              "docs": " Retrieves a previously recorded interaction by its unique identifier (interaction ID).",
              "errors": [
                "root.ForbiddenError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "assignedUserId": "assignedUserId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "encounter": {
                        "identifier": "identifier",
                        "period": {
                          "endedAt": "2024-01-15T09:30:00Z",
                          "startedAt": "2024-01-15T09:30:00Z",
                        },
                        "status": "planned",
                        "title": "title",
                        "type": "first_consultation",
                      },
                      "endedAt": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "lastUpdated": "2024-01-15T09:30:00Z",
                      "patient": {
                        "birthDate": "2024-01-15T09:30:00Z",
                        "gender": "male",
                        "identifier": "identifier",
                        "name": "name",
                        "pronouns": "pronouns",
                      },
                      "updatedAt": "2024-01-15T09:30:00Z",
                      "websocketUrl": "websocketUrl",
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction to retrieve. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Returns the requested interaction with all associated details.",
                "status-code": 200,
                "type": "root.ResponseInteraction",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listAllInteractions": {
              "auth": false,
              "display-name": "List All Interactions",
              "docs": " Lists all existing interactions. Results can be filtered by encounter status and patient identifier.",
              "errors": [
                "root.ForbiddenError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "response": {
                    "body": {
                      "interactions": [
                        {
                          "assignedUserId": "assignedUserId",
                          "createdAt": "2024-01-15T09:30:00Z",
                          "encounter": {
                            "identifier": "identifier",
                            "period": {
                              "startedAt": "2024-01-15T09:30:00Z",
                            },
                            "status": "planned",
                            "type": "first_consultation",
                          },
                          "endedAt": "2024-01-15T09:30:00Z",
                          "id": "id",
                          "lastUpdated": "2024-01-15T09:30:00Z",
                          "patient": {
                            "identifier": "identifier",
                          },
                          "updatedAt": "2024-01-15T09:30:00Z",
                          "websocketUrl": "websocketUrl",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/",
              "request": {
                "name": "GetInteractionsRequest",
                "query-parameters": {
                  "direction": {
                    "docs": "Sorting order. Allowed values: [asc, desc]. Default is desc.",
                    "type": "optional<string>",
                  },
                  "encounterStatus": {
                    "docs": "The status of the encounter. To filter on multiple statuses, pass the same parameter again.",
                    "type": "optional<string>",
                  },
                  "index": {
                    "docs": "Page number to retrieve. Starts at 1. For example, index=2 with pageSize=10 will return interactions 11–20. Must be greater than 0. Default is 1.",
                    "type": "optional<long>",
                  },
                  "pageSize": {
                    "docs": "Number of interactions to return per page. Must be greater than 0. Default is 10.",
                    "type": "optional<long>",
                  },
                  "patient": {
                    "docs": "A unique identifier for the patient. Must be a valid UUID.",
                    "type": "optional<string>",
                  },
                  "sort": {
                    "docs": "Field used to sort interactions. Allowed values: [startedAt, endedAt, updatedAt, lastUpdated]. Default is startedAt.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": " ",
                "status-code": 200,
                "type": "root.ResponseInteractions",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "updateInteraction": {
              "auth": false,
              "display-name": "Update Interaction",
              "docs": " Modifies an existing interaction by updating specific fields without overwriting the entire record.",
              "errors": [
                "root.ForbiddenError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "assignedUserId": "assignedUserId",
                      "createdAt": "2024-01-15T09:30:00Z",
                      "encounter": {
                        "identifier": "identifier",
                        "period": {
                          "endedAt": "2024-01-15T09:30:00Z",
                          "startedAt": "2024-01-15T09:30:00Z",
                        },
                        "status": "planned",
                        "title": "title",
                        "type": "first_consultation",
                      },
                      "endedAt": "2024-01-15T09:30:00Z",
                      "id": "id",
                      "lastUpdated": "2024-01-15T09:30:00Z",
                      "patient": {
                        "birthDate": "2024-01-15T09:30:00Z",
                        "gender": "male",
                        "identifier": "identifier",
                        "name": "name",
                        "pronouns": "pronouns",
                      },
                      "updatedAt": "2024-01-15T09:30:00Z",
                      "websocketUrl": "websocketUrl",
                    },
                  },
                },
              ],
              "method": "PATCH",
              "pagination": undefined,
              "path": "/interactions/{id}",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction to update. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "assignedUserId": {
                      "docs": "The unique identifier of the medical professional responsible for this interaction.  If nulled, automatically set to a uuid.",
                      "type": "optional<root.Uuid>",
                    },
                    "encounter": {
                      "docs": "Details of the encounter being updated.",
                      "type": "optional<root.RequestEncounterUpdate>",
                    },
                    "patient": {
                      "docs": "Patient-related updates.",
                      "type": "optional<root.RequestPatientUpdate>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestInteractionUpdate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "A request body containing the fields to update within the interaction.",
                "status-code": 200,
                "type": "root.ResponseInteraction",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listAllInteractions:
      path: /interactions/
      method: GET
      auth: false
      docs: ' Lists all existing interactions. Results can be filtered by encounter status and patient identifier.'
      source:
        openapi: ../swagger.json
      display-name: List All Interactions
      request:
        name: GetInteractionsRequest
        query-parameters:
          sort:
            type: optional<string>
            docs: >-
              Field used to sort interactions. Allowed values: [startedAt,
              endedAt, updatedAt, lastUpdated]. Default is startedAt.
          direction:
            type: optional<string>
            docs: 'Sorting order. Allowed values: [asc, desc]. Default is desc.'
          pageSize:
            type: optional<long>
            docs: >-
              Number of interactions to return per page. Must be greater than 0.
              Default is 10.
          index:
            type: optional<long>
            docs: >-
              Page number to retrieve. Starts at 1. For example, index=2 with
              pageSize=10 will return interactions 11–20. Must be greater than
              0. Default is 1.
          encounterStatus:
            type: optional<string>
            docs: >-
              The status of the encounter. To filter on multiple statuses, pass
              the same parameter again.
          patient:
            type: optional<string>
            docs: A unique identifier for the patient. Must be a valid UUID.
      response:
        docs: ' '
        type: root.ResponseInteractions
        status-code: 200
      errors:
        - root.ForbiddenError
        - root.GatewayTimeoutError
      examples:
        - headers:
            Tenant-Name: copiloteu
          response:
            body:
              interactions:
                - id: id
                  assignedUserId: assignedUserId
                  encounter:
                    identifier: identifier
                    status: planned
                    type: first_consultation
                    period:
                      startedAt: '2024-01-15T09:30:00Z'
                  patient:
                    identifier: identifier
                  endedAt: '2024-01-15T09:30:00Z'
                  createdAt: '2024-01-15T09:30:00Z'
                  updatedAt: '2024-01-15T09:30:00Z'
                  websocketUrl: websocketUrl
                  lastUpdated: '2024-01-15T09:30:00Z'
    createInteraction:
      path: /interactions/
      method: POST
      auth: false
      docs: ' Creates a new interaction.'
      source:
        openapi: ../swagger.json
      display-name: Create Interaction
      request:
        name: RequestInteractionCreate
        body:
          properties:
            assignedUserId:
              type: optional<root.Uuid>
              docs: >-
                A unique identifier for the medical professional responsible for
                this interaction. If nulled, automatically set to a uuid.
            encounter:
              type: root.Encounter
              docs: Details about the encounter.
            patient:
              type: optional<root.Patient>
              docs: Optional patient details.
        content-type: application/json
      response:
        docs: >-
          Returns the newly created interaction with its assigned ID and
          WebSocket URL for real-time data streaming.
        type: root.ResponseInteractionCreate
        status-code: 201
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - headers:
            Tenant-Name: copiloteu
          request:
            encounter:
              identifier: identifier
              status: planned
              type: first_consultation
              period:
                startedAt: '2024-01-15T09:30:00Z'
          response:
            body:
              interactionId: interactionId
              websocketUrl: websocketUrl
    getExistingInteraction:
      path: /interactions/{id}
      method: GET
      auth: false
      docs: ' Retrieves a previously recorded interaction by its unique identifier (interaction ID).'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction to retrieve. Must be a
            valid UUID.
      display-name: Get Existing Interaction
      response:
        docs: Returns the requested interaction with all associated details.
        type: root.ResponseInteraction
        status-code: 200
      errors:
        - root.ForbiddenError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              id: id
              assignedUserId: assignedUserId
              encounter:
                identifier: identifier
                status: planned
                type: first_consultation
                period:
                  startedAt: '2024-01-15T09:30:00Z'
                  endedAt: '2024-01-15T09:30:00Z'
                title: title
              patient:
                identifier: identifier
                name: name
                gender: male
                birthDate: '2024-01-15T09:30:00Z'
                pronouns: pronouns
              endedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              updatedAt: '2024-01-15T09:30:00Z'
              websocketUrl: websocketUrl
              lastUpdated: '2024-01-15T09:30:00Z'
    deleteInteraction:
      path: /interactions/{id}
      method: DELETE
      auth: false
      docs: ' Deletes an existing interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction to delete. Must be a valid
            UUID.
      display-name: Delete Interaction
      response:
        docs: >-
          The interaction was successfully deleted. No response body is
          returned.
        type: root.NoContent
        status-code: 204
      errors:
        - root.ForbiddenError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              key: value
    updateInteraction:
      path: /interactions/{id}
      method: PATCH
      auth: false
      docs: ' Modifies an existing interaction by updating specific fields without overwriting the entire record.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction to update. Must be a valid
            UUID.
      display-name: Update Interaction
      request:
        name: RequestInteractionUpdate
        body:
          properties:
            assignedUserId:
              type: optional<root.Uuid>
              docs: >-
                The unique identifier of the medical professional responsible
                for this interaction.  If nulled, automatically set to a uuid.
            encounter:
              type: optional<root.RequestEncounterUpdate>
              docs: Details of the encounter being updated.
            patient:
              type: optional<root.RequestPatientUpdate>
              docs: Patient-related updates.
        content-type: application/json
      response:
        docs: A request body containing the fields to update within the interaction.
        type: root.ResponseInteraction
        status-code: 200
      errors:
        - root.ForbiddenError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          request: {}
          response:
            body:
              id: id
              assignedUserId: assignedUserId
              encounter:
                identifier: identifier
                status: planned
                type: first_consultation
                period:
                  startedAt: '2024-01-15T09:30:00Z'
                  endedAt: '2024-01-15T09:30:00Z'
                title: title
              patient:
                identifier: identifier
                name: name
                gender: male
                birthDate: '2024-01-15T09:30:00Z'
                pronouns: pronouns
              endedAt: '2024-01-15T09:30:00Z'
              createdAt: '2024-01-15T09:30:00Z'
              updatedAt: '2024-01-15T09:30:00Z'
              websocketUrl: websocketUrl
              lastUpdated: '2024-01-15T09:30:00Z'
  source:
    openapi: ../swagger.json
",
    },
    "recordings.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "deleteRecording": {
              "auth": false,
              "display-name": "Delete Recording",
              "docs": " Delete a specific recording for a given interaction.",
              "errors": [
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                    "recordingId": "recordingId",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/interactions/{id}/recordings/{recordingId}",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which the recording should be deleted from. Must be a valid UUID.",
                  "type": "string",
                },
                "recordingId": {
                  "docs": "The unique identifier of the recording to be deleted. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "",
                "status-code": 204,
                "type": "root.NoContent",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "getRecording": {
              "auth": false,
              "display-name": "Get Recording",
              "docs": " Retrieve a specific recording for a given interaction.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.NotFoundError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/recordings/{recordingId}",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which the recording should be retrieved. Must be a valid UUID.",
                  "type": "string",
                },
                "recordingId": {
                  "docs": "The unique identifier of the recording to be retrieved. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Binary content of the recording file.",
                "status-code": 200,
                "type": "text",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listRecordings": {
              "auth": false,
              "display-name": "List Recordings",
              "docs": " Retrieve a list of recordings for a given interaction.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "recordings": [
                        "recordings",
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/recordings/",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which recordings should be retrieved. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Returns a list of recording IDs for the interaction.",
                "status-code": 200,
                "type": "root.ResponseRecordingList",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "uploadRecording": {
              "auth": false,
              "display-name": "Upload Recording",
              "docs": " Upload a recording for a given interaction. There is a maximum limit of 60 minutes in length and 150MB in size for recordings.",
              "errors": [
                "root.BadRequestError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/interactions/{id}/recordings/",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which recording should be attributed. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": "bytes",
                "content-type": "application/octet-stream",
              },
              "response": {
                "docs": "Returns the recording ID in the response.",
                "status-code": 201,
                "type": "root.ResponseRecordingCreate",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listRecordings:
      path: /interactions/{id}/recordings/
      method: GET
      auth: false
      docs: ' Retrieve a list of recordings for a given interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which recordings should
            be retrieved. Must be a valid UUID.
      display-name: List Recordings
      response:
        docs: Returns a list of recording IDs for the interaction.
        type: root.ResponseRecordingList
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              recordings:
                - recordings
    uploadRecording:
      path: /interactions/{id}/recordings/
      method: POST
      auth: false
      docs: ' Upload a recording for a given interaction. There is a maximum limit of 60 minutes in length and 150MB in size for recordings.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which recording should
            be attributed. Must be a valid UUID.
      display-name: Upload Recording
      request:
        body: bytes
        content-type: application/octet-stream
      response:
        docs: Returns the recording ID in the response.
        type: root.ResponseRecordingCreate
        status-code: 201
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
    getRecording:
      path: /interactions/{id}/recordings/{recordingId}
      method: GET
      auth: false
      docs: ' Retrieve a specific recording for a given interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which the recording
            should be retrieved. Must be a valid UUID.
        recordingId:
          type: string
          docs: >-
            The unique identifier of the recording to be retrieved. Must be a
            valid UUID.
      display-name: Get Recording
      response:
        docs: Binary content of the recording file.
        type: text
        status-code: 200
      errors:
        - root.BadRequestError
        - root.ForbiddenError
        - root.NotFoundError
        - root.InternalServerError
        - root.GatewayTimeoutError
    deleteRecording:
      path: /interactions/{id}/recordings/{recordingId}
      method: DELETE
      auth: false
      docs: ' Delete a specific recording for a given interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which the recording
            should be deleted from. Must be a valid UUID.
        recordingId:
          type: string
          docs: >-
            The unique identifier of the recording to be deleted. Must be a
            valid UUID.
      display-name: Delete Recording
      response:
        docs: ''
        type: root.NoContent
        status-code: 204
      errors:
        - root.ForbiddenError
        - root.NotFoundError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
            recordingId: recordingId
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              key: value
  source:
    openapi: ../swagger.json
",
    },
    "stream/__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "types": {
          "AudioPacket": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": {
                "type": "optional<string>",
                "validation": {
                  "format": "binary",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "timestamp": "optional<datetime>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "ConfigData": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "mode": "optional<ConfigMode>",
              "transcription": "optional<ConfigTranscription>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "ConfigMode": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "outputLocale": "optional<string>",
              "templateId": "optional<string>",
              "type": "optional<ConfigModeType>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "ConfigModeType": {
            "enum": [
              "facts",
              "documentation",
              "transcription",
            ],
            "inline": true,
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "ConfigParticipant": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "channel": "optional<integer>",
              "role": "optional<ConfigParticipantRole>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "ConfigParticipantRole": {
            "enum": [
              "patient",
              "doctor",
              "multiple",
            ],
            "inline": true,
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "ConfigTranscription": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "isDiarization": "optional<boolean>",
              "isMultichannel": "optional<boolean>",
              "model": "optional<literal<"model1">>",
              "participants": "optional<list<ConfigParticipant>>",
              "primaryLanguage": "optional<ConfigTranscriptionPrimaryLanguage>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "ConfigTranscriptionPrimaryLanguage": {
            "enum": [
              "en",
              {
                "name": "EnUs",
                "value": "en-us",
              },
              {
                "name": "EnGb",
                "value": "en-gb",
              },
              "da",
              "se",
              "no",
              "de",
              "nl",
              "es",
              "it",
              "fr",
              "pt",
              {
                "name": "DeCh",
                "value": "de-ch",
              },
              "sv",
            ],
            "inline": true,
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Configuration": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "configuration": "optional<ConfigData>",
              "type": "optional<literal<"config">>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Document": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "content": "optional<string>",
              "documentId": "optional<string>",
              "language": "optional<string>",
              "templateKey": "optional<string>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "EndStream": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "type": "optional<literal<"end">>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Evidence": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "quote": "optional<string>",
              "reference": "optional<string>",
              "type": "optional<string>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Fact": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "createdAt": "optional<datetime>",
              "evidence": "optional<list<Evidence>>",
              "group": "optional<string>",
              "groupId": "optional<string>",
              "id": "optional<string>",
              "isDiscarded": "optional<boolean>",
              "source": "optional<string>",
              "text": "optional<string>",
              "updatedAt": "optional<datetime>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Facts": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "optional<list<Fact>>",
              "type": "optional<literal<"facts">>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Status": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "reason": "optional<string>",
              "type": "optional<StatusType>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "StatusType": {
            "enum": [
              "CONFIG_ACCEPTED",
              "CONFIG_DENIED",
              "CONFIG_MISSING",
              "CONFIG_NOT_PROVIDED",
              "CONFIG_ALREADY_RECEIVED",
            ],
            "inline": true,
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Transcript": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "final": "optional<boolean>",
              "id": "optional<string>",
              "participant": "optional<TranscriptParticipant>",
              "speakerId": "optional<integer>",
              "time": "optional<TranscriptTime>",
              "transcript": "optional<string>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "TranscriptParticipant": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "channel": "optional<integer>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "TranscriptTime": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "end": "optional<double>",
              "start": "optional<double>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
          "Transcripts": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "optional<list<Transcript>>",
              "type": "optional<literal<"transcript">>",
            },
            "source": {
              "openapi": "../asyncapi-original.json",
            },
          },
        },
      },
      "rawContents": "types:
  Transcripts:
    properties:
      type: optional<literal<"transcript">>
      data: optional<list<Transcript>>
    source:
      openapi: ../asyncapi-original.json
  EndStream:
    properties:
      type: optional<literal<"end">>
    source:
      openapi: ../asyncapi-original.json
  ConfigParticipantRole:
    enum:
      - patient
      - doctor
      - multiple
    inline: true
    source:
      openapi: ../asyncapi-original.json
  ConfigParticipant:
    properties:
      channel: optional<integer>
      role: optional<ConfigParticipantRole>
    source:
      openapi: ../asyncapi-original.json
  Transcript:
    properties:
      id: optional<string>
      transcript: optional<string>
      final: optional<boolean>
      speakerId: optional<integer>
      participant: optional<TranscriptParticipant>
      time: optional<TranscriptTime>
    source:
      openapi: ../asyncapi-original.json
  TranscriptParticipant:
    properties:
      channel: optional<integer>
    source:
      openapi: ../asyncapi-original.json
  TranscriptTime:
    properties:
      start: optional<double>
      end: optional<double>
    source:
      openapi: ../asyncapi-original.json
  Facts:
    properties:
      type: optional<literal<"facts">>
      data: optional<list<Fact>>
    source:
      openapi: ../asyncapi-original.json
  Fact:
    properties:
      id: optional<string>
      text: optional<string>
      group: optional<string>
      groupId: optional<string>
      isDiscarded: optional<boolean>
      source: optional<string>
      createdAt: optional<datetime>
      updatedAt: optional<datetime>
      evidence: optional<list<Evidence>>
    source:
      openapi: ../asyncapi-original.json
  Evidence:
    properties:
      type: optional<string>
      reference: optional<string>
      quote: optional<string>
    source:
      openapi: ../asyncapi-original.json
  Document:
    properties:
      documentId: optional<string>
      content: optional<string>
      templateKey: optional<string>
      language: optional<string>
    source:
      openapi: ../asyncapi-original.json
  AudioPacket:
    properties:
      timestamp: optional<datetime>
      data:
        type: optional<string>
        validation:
          format: binary
    source:
      openapi: ../asyncapi-original.json
  StatusType:
    enum:
      - CONFIG_ACCEPTED
      - CONFIG_DENIED
      - CONFIG_MISSING
      - CONFIG_NOT_PROVIDED
      - CONFIG_ALREADY_RECEIVED
    inline: true
    source:
      openapi: ../asyncapi-original.json
  Status:
    properties:
      type: optional<StatusType>
      reason: optional<string>
    source:
      openapi: ../asyncapi-original.json
  ConfigModeType:
    enum:
      - facts
      - documentation
      - transcription
    inline: true
    source:
      openapi: ../asyncapi-original.json
  ConfigMode:
    properties:
      type: optional<ConfigModeType>
      outputLocale: optional<string>
      templateId: optional<string>
    source:
      openapi: ../asyncapi-original.json
  ConfigTranscriptionPrimaryLanguage:
    enum:
      - en
      - value: en-us
        name: EnUs
      - value: en-gb
        name: EnGb
      - da
      - se
      - 'no'
      - de
      - nl
      - es
      - it
      - fr
      - pt
      - value: de-ch
        name: DeCh
      - sv
    inline: true
    source:
      openapi: ../asyncapi-original.json
  ConfigTranscription:
    properties:
      primaryLanguage: optional<ConfigTranscriptionPrimaryLanguage>
      isMultichannel: optional<boolean>
      isDiarization: optional<boolean>
      participants: optional<list<ConfigParticipant>>
      model: optional<literal<"model1">>
    source:
      openapi: ../asyncapi-original.json
  ConfigData:
    properties:
      transcription: optional<ConfigTranscription>
      mode: optional<ConfigMode>
    source:
      openapi: ../asyncapi-original.json
  Configuration:
    properties:
      type: optional<literal<"config">>
      configuration: optional<ConfigData>
    source:
      openapi: ../asyncapi-original.json
",
    },
    "stream/stream.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "channel": {
          "auth": false,
          "docs": "Channel for streaming real-time audio, transcripts, and fact updates during medical interactions.",
          "examples": [
            {
              "messages": [],
            },
          ],
          "messages": {
            "audioPacket": {
              "body": "streamRoot.AudioPacket",
              "origin": "server",
            },
            "configuration": {
              "body": "streamRoot.Configuration",
              "origin": "server",
            },
            "facts": {
              "body": "streamRoot.Facts",
              "origin": "client",
            },
            "status": {
              "body": "streamRoot.Status",
              "origin": "client",
            },
            "transcripts": {
              "body": "streamRoot.Transcripts",
              "origin": "client",
            },
          },
          "path": "/audio-bridge/v2/interactions/{id}/streams",
          "path-parameters": {
            "id": {
              "docs": "Unique identifier for the interaction session.",
              "type": "string",
            },
          },
          "query-parameters": {
            "tenantName": {
              "docs": "Unique identifier for the interaction session.",
              "type": "string",
            },
            "token": {
              "docs": "Short-term token as per RFC 7519 (https://jwt.io).",
              "type": "string",
            },
          },
          "url": "beta-eu",
        },
        "imports": {
          "streamRoot": "__package__.yml",
        },
      },
      "rawContents": "channel:
  path: /audio-bridge/v2/interactions/{id}/streams
  url: beta-eu
  auth: false
  docs: >-
    Channel for streaming real-time audio, transcripts, and fact updates during
    medical interactions.
  path-parameters:
    id:
      type: string
      docs: Unique identifier for the interaction session.
  query-parameters:
    token:
      type: string
      docs: Short-term token as per RFC 7519 (https://jwt.io).
    tenantName:
      type: string
      docs: Unique identifier for the interaction session.
  messages:
    configuration:
      origin: server
      body: streamRoot.Configuration
    audioPacket:
      origin: server
      body: streamRoot.AudioPacket
    status:
      origin: client
      body: streamRoot.Status
    transcripts:
      origin: client
      body: streamRoot.Transcripts
    facts:
      origin: client
      body: streamRoot.Facts
  examples:
    - messages: []
imports:
  streamRoot: __package__.yml
",
    },
    "templates.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "getTemplate": {
              "auth": false,
              "display-name": "Get Template",
              "docs": " Retrieves template by key.",
              "errors": [
                "root.UnauthorizedError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "key": "key",
                  },
                  "response": {
                    "body": {
                      "date_updated": "2024-01-15T09:30:00Z",
                      "description": "description",
                      "key": "key",
                      "name": "name",
                      "status": "status",
                      "template_sections": [
                        {
                          "sort": 1,
                        },
                      ],
                      "translations": [
                        {
                          "description": "description",
                          "languages_id": "languages_id",
                          "name": "name",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/templates/{key}",
              "path-parameters": {
                "key": {
                  "docs": "The key of the template",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Template by key",
                "status-code": 200,
                "type": "root.TemplateFiltered",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listTemplateSections": {
              "auth": false,
              "display-name": "List Template Sections",
              "docs": " Retrieves a list of template sections with optional filters for organization and language.",
              "errors": [
                "root.UnauthorizedError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "alternate_names": [
                            "alternate_names",
                          ],
                          "date_updated": "2024-01-15T09:30:00Z",
                          "description": "description",
                          "key": "key",
                          "name": "name",
                          "section_type": "section_type",
                          "translations": [
                            {},
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/templateSections/",
              "request": {
                "name": "GetTemplateSectionsRequest",
                "query-parameters": {
                  "lang": {
                    "docs": "Filter template sections by language.",
                    "type": "optional<string>",
                  },
                  "org": {
                    "docs": "Filter template sections by organization.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "List of Template Sections",
                "status-code": 200,
                "type": "root.ResponseAllTemplateSections",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listTemplates": {
              "auth": false,
              "display-name": "List Templates",
              "docs": " Retrieves a list of templates with optional filters for organization, language, and status.",
              "errors": [
                "root.UnauthorizedError",
                "root.InternalServerError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "date_updated": "2024-01-15T09:30:00Z",
                          "description": "description",
                          "key": "key",
                          "name": "name",
                          "status": "status",
                          "template_sections": [
                            {},
                          ],
                          "translations": [
                            {},
                          ],
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/templates/",
              "request": {
                "name": "GetTemplatesRequest",
                "query-parameters": {
                  "lang": {
                    "docs": "Filter templates by language.",
                    "type": "optional<string>",
                  },
                  "org": {
                    "docs": "Filter templates by organization.",
                    "type": "optional<string>",
                  },
                  "templateStatus": {
                    "docs": "Filter templates by their status.",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "List of Templates",
                "status-code": 200,
                "type": "root.ResponseAllTemplates",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listTemplateSections:
      path: /templateSections/
      method: GET
      auth: false
      docs: ' Retrieves a list of template sections with optional filters for organization and language.'
      source:
        openapi: ../swagger.json
      display-name: List Template Sections
      request:
        name: GetTemplateSectionsRequest
        query-parameters:
          org:
            type: optional<string>
            docs: Filter template sections by organization.
          lang:
            type: optional<string>
            docs: Filter template sections by language.
      response:
        docs: List of Template Sections
        type: root.ResponseAllTemplateSections
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.InternalServerError
      examples:
        - headers:
            Tenant-Name: copiloteu
          response:
            body:
              data:
                - date_updated: '2024-01-15T09:30:00Z'
                  name: name
                  alternate_names:
                    - alternate_names
                  key: key
                  description: description
                  section_type: section_type
                  translations:
                    - {}
    listTemplates:
      path: /templates/
      method: GET
      auth: false
      docs: ' Retrieves a list of templates with optional filters for organization, language, and status.'
      source:
        openapi: ../swagger.json
      display-name: List Templates
      request:
        name: GetTemplatesRequest
        query-parameters:
          org:
            type: optional<string>
            docs: Filter templates by organization.
          lang:
            type: optional<string>
            docs: Filter templates by language.
          templateStatus:
            type: optional<string>
            docs: Filter templates by their status.
      response:
        docs: List of Templates
        type: root.ResponseAllTemplates
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.InternalServerError
      examples:
        - headers:
            Tenant-Name: copiloteu
          response:
            body:
              data:
                - date_updated: '2024-01-15T09:30:00Z'
                  name: name
                  description: description
                  key: key
                  status: status
                  template_sections:
                    - {}
                  translations:
                    - {}
    getTemplate:
      path: /templates/{key}
      method: GET
      auth: false
      docs: ' Retrieves template by key.'
      source:
        openapi: ../swagger.json
      path-parameters:
        key:
          type: string
          docs: The key of the template
      display-name: Get Template
      response:
        docs: Template by key
        type: root.TemplateFiltered
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.InternalServerError
      examples:
        - path-parameters:
            key: key
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              date_updated: '2024-01-15T09:30:00Z'
              name: name
              description: description
              key: key
              status: status
              template_sections:
                - sort: 1
              translations:
                - languages_id: languages_id
                  name: name
                  description: description
  source:
    openapi: ../swagger.json
",
    },
    "transcripts.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "createTranscript": {
              "auth": false,
              "display-name": "Create Transcript",
              "docs": " Creates a new transcript for an interaction.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "request": {
                    "modelName": "modelName",
                    "primaryLanguage": "primaryLanguage",
                    "recordingId": "recordingId",
                  },
                  "response": {
                    "body": {
                      "id": "id",
                      "metadata": {
                        "participantsRoles": [
                          {},
                        ],
                      },
                      "transcripts": [
                        {
                          "channel": 1,
                          "end": 1,
                          "participant": 1,
                          "speakerId": 1,
                          "start": 1,
                          "text": "text",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/interactions/{id}/transcripts/",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which the transcript is created. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "diarize": {
                      "docs": "If true, separates speakers within an audio channel returning incrementing ids for transcript segments.",
                      "type": "optional<boolean>",
                    },
                    "isDictation": {
                      "docs": "Indicates whether spoken dictation commands should be converted to punctuation (e.g., 'comma' → ',').",
                      "type": "optional<boolean>",
                    },
                    "isMultichannel": {
                      "docs": "If true, each audio channel is transcribed separately.",
                      "type": "optional<boolean>",
                    },
                    "modelName": {
                      "docs": "Can be "base", "enhanced", "premier". By default, only the highest tier is accessible. Check https://docs.corti.ai/about/languages for more.",
                      "type": "string",
                    },
                    "participants": {
                      "docs": "An array of participants, each specifying a role and an assigned audio channel in the recording. Leave empty when shouldDiarize: true",
                      "type": "optional<list<RequestTranscriptCreateParticipantsItem>>",
                    },
                    "primaryLanguage": {
                      "docs": "The primary spoken language of the recording. Check https://docs.corti.ai/about/languages for more.",
                      "type": "string",
                    },
                    "recordingId": {
                      "docs": "The unique identifier for the recording.",
                      "type": "root.Uuid",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "RequestTranscriptCreate",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Returns the generated transcript, including participant roles and timestamps for each utterance.",
                "status-code": 201,
                "type": "root.ResponseTranscriptCreate",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "deleteTranscript": {
              "auth": false,
              "display-name": "Delete Transcript",
              "docs": " Deletes a specific transcript associated with an interaction.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                    "transcriptId": "transcriptId",
                  },
                  "response": {
                    "body": {
                      "key": "value",
                    },
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/interactions/{id}/transcripts/{transcriptId}",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction to which the transcript belongs. Must be a valid UUID.",
                  "type": "string",
                },
                "transcriptId": {
                  "docs": "The unique identifier of the transcript to delete. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "",
                "status-code": 204,
                "type": "root.NoContent",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "getTranscript": {
              "auth": false,
              "display-name": "Get Transcript",
              "docs": " Retrieves the transcript for a specific interaction.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                    "transcriptId": "transcriptId",
                  },
                  "response": {
                    "body": {
                      "id": "id",
                      "metadata": {
                        "participantsRoles": [
                          {},
                        ],
                      },
                      "transcripts": [
                        {
                          "channel": 1,
                          "end": 1,
                          "participant": 1,
                          "speakerId": 1,
                          "start": 1,
                          "text": "text",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/transcripts/{transcriptId}",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction containing the transcript. Must be a valid UUID.",
                  "type": "string",
                },
                "transcriptId": {
                  "docs": "The unique identifier of the transcript to retrieve. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "response": {
                "docs": "",
                "status-code": 200,
                "type": "root.ResponseTranscriptCreate",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
            "listTranscripts": {
              "auth": false,
              "display-name": "List Transcripts",
              "docs": " Retrieves a list of transcripts for a given interaction.",
              "errors": [
                "root.BadRequestError",
                "root.UnauthorizedError",
                "root.ForbiddenError",
                "root.InternalServerError",
                "root.GatewayTimeoutError",
              ],
              "examples": [
                {
                  "headers": {
                    "Tenant-Name": "copiloteu",
                  },
                  "path-parameters": {
                    "id": "id",
                  },
                  "response": {
                    "body": {
                      "transcripts": [
                        {
                          "id": "id",
                          "transcriptSample": "transcriptSample",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/interactions/{id}/transcripts/",
              "path-parameters": {
                "id": {
                  "docs": "The unique identifier of the interaction for which transcripts should be retrieved. Must be a valid UUID.",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetInteractionsIdTranscriptsRequest",
                "query-parameters": {
                  "direction": {
                    "docs": "Describes sorting direction",
                    "type": "optional<string>",
                  },
                  "full": {
                    "docs": "Display full transcripts in listing",
                    "type": "optional<boolean>",
                  },
                  "index": {
                    "docs": "The number of transcripts to skip. For example, index=2 with pageSize=10 will skip the first 10 interactions and return 11-20.",
                    "type": "optional<long>",
                  },
                  "pageSize": {
                    "docs": "The number of transcripts to return. For example, a pageSize of 10 will return a maximum of 10 interactions.",
                    "type": "optional<long>",
                  },
                  "sort": {
                    "docs": "Describes transcript attribute for sorting",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "Returns a list of transcripts associated with the interaction.",
                "status-code": 200,
                "type": "root.ResponseTranscriptListAll",
              },
              "source": {
                "openapi": "../swagger.json",
              },
            },
          },
          "source": {
            "openapi": "../swagger.json",
          },
        },
        "types": {
          "RequestTranscriptCreateParticipantsItem": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "channel": {
                "docs": "The audio channel to associate with a participant role.",
                "type": "integer",
              },
              "role": "root.V2TranscriptParticipantRoleEnum",
            },
            "source": {
              "openapi": "../swagger.json",
            },
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listTranscripts:
      path: /interactions/{id}/transcripts/
      method: GET
      auth: false
      docs: ' Retrieves a list of transcripts for a given interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which transcripts
            should be retrieved. Must be a valid UUID.
      display-name: List Transcripts
      request:
        name: GetInteractionsIdTranscriptsRequest
        query-parameters:
          sort:
            type: optional<string>
            docs: Describes transcript attribute for sorting
          direction:
            type: optional<string>
            docs: Describes sorting direction
          pageSize:
            type: optional<long>
            docs: >-
              The number of transcripts to return. For example, a pageSize of 10
              will return a maximum of 10 interactions.
          index:
            type: optional<long>
            docs: >-
              The number of transcripts to skip. For example, index=2 with
              pageSize=10 will skip the first 10 interactions and return 11-20.
          full:
            type: optional<boolean>
            docs: Display full transcripts in listing
      response:
        docs: Returns a list of transcripts associated with the interaction.
        type: root.ResponseTranscriptListAll
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              transcripts:
                - id: id
                  transcriptSample: transcriptSample
    createTranscript:
      path: /interactions/{id}/transcripts/
      method: POST
      auth: false
      docs: ' Creates a new transcript for an interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction for which the transcript is
            created. Must be a valid UUID.
      display-name: Create Transcript
      request:
        name: RequestTranscriptCreate
        body:
          properties:
            recordingId:
              type: root.Uuid
              docs: The unique identifier for the recording.
            primaryLanguage:
              type: string
              docs: >-
                The primary spoken language of the recording. Check
                https://docs.corti.ai/about/languages for more.
            isDictation:
              type: optional<boolean>
              docs: >-
                Indicates whether spoken dictation commands should be converted
                to punctuation (e.g., 'comma' → ',').
            isMultichannel:
              type: optional<boolean>
              docs: If true, each audio channel is transcribed separately.
            diarize:
              type: optional<boolean>
              docs: >-
                If true, separates speakers within an audio channel returning
                incrementing ids for transcript segments.
            participants:
              type: optional<list<RequestTranscriptCreateParticipantsItem>>
              docs: >-
                An array of participants, each specifying a role and an assigned
                audio channel in the recording. Leave empty when shouldDiarize:
                true
            modelName:
              type: string
              docs: >-
                Can be "base", "enhanced", "premier". By default, only the
                highest tier is accessible. Check
                https://docs.corti.ai/about/languages for more.
        content-type: application/json
      response:
        docs: >-
          Returns the generated transcript, including participant roles and
          timestamps for each utterance.
        type: root.ResponseTranscriptCreate
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
          headers:
            Tenant-Name: copiloteu
          request:
            recordingId: recordingId
            primaryLanguage: primaryLanguage
            modelName: modelName
          response:
            body:
              id: id
              metadata:
                participantsRoles:
                  - {}
              transcripts:
                - channel: 1
                  participant: 1
                  speakerId: 1
                  text: text
                  start: 1
                  end: 1
    getTranscript:
      path: /interactions/{id}/transcripts/{transcriptId}
      method: GET
      auth: false
      docs: ' Retrieves the transcript for a specific interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction containing the transcript.
            Must be a valid UUID.
        transcriptId:
          type: string
          docs: >-
            The unique identifier of the transcript to retrieve. Must be a valid
            UUID.
      display-name: Get Transcript
      response:
        docs: ''
        type: root.ResponseTranscriptCreate
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
            transcriptId: transcriptId
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              id: id
              metadata:
                participantsRoles:
                  - {}
              transcripts:
                - channel: 1
                  participant: 1
                  speakerId: 1
                  text: text
                  start: 1
                  end: 1
    deleteTranscript:
      path: /interactions/{id}/transcripts/{transcriptId}
      method: DELETE
      auth: false
      docs: ' Deletes a specific transcript associated with an interaction.'
      source:
        openapi: ../swagger.json
      path-parameters:
        id:
          type: string
          docs: >-
            The unique identifier of the interaction to which the transcript
            belongs. Must be a valid UUID.
        transcriptId:
          type: string
          docs: >-
            The unique identifier of the transcript to delete. Must be a valid
            UUID.
      display-name: Delete Transcript
      response:
        docs: ''
        type: root.NoContent
        status-code: 204
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.InternalServerError
        - root.GatewayTimeoutError
      examples:
        - path-parameters:
            id: id
            transcriptId: transcriptId
          headers:
            Tenant-Name: copiloteu
          response:
            body:
              key: value
  source:
    openapi: ../swagger.json
types:
  RequestTranscriptCreateParticipantsItem:
    properties:
      channel:
        type: integer
        docs: The audio channel to associate with a participant role.
      role: root.V2TranscriptParticipantRoleEnum
    source:
      openapi: ../swagger.json
    inline: true
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "display-name": "Corti API",
      "environments": {
        "EU": "https://api.eu.corti.app/v2/",
        "EU_BETA": "https://api.beta-eu.corti.app/v2/",
        "US": "https://api.us.corti.app/v2/",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "headers": {
        "Tenant-Name": {
          "docs": "Identifies a distinct entity within Corti's multi-tenant system. Ensures correct routing and authentication of the request.",
          "name": "tenantName",
          "type": "optional<string>",
        },
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Corti API
environments:
  EU: https://api.eu.corti.app/v2/
  US: https://api.us.corti.app/v2/
  EU_BETA: https://api.beta-eu.corti.app/v2/
headers:
  Tenant-Name:
    type: optional<string>
    name: tenantName
    docs: >-
      Identifies a distinct entity within Corti's multi-tenant system. Ensures
      correct routing and authentication of the request.
",
  },
}