{
  "absoluteFilePath": "/DUMMY_PATH",
  "importedDefinitions": {},
  "namedDefinitionFiles": {
    "__package__.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "errors": {
          "ExtensionsGetByIdRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "ErrorEnvelope",
          },
          "ExtensionsGetByIdRequestNotFoundError": {
            "docs": "Not Found",
            "status-code": 404,
            "type": "ErrorEnvelope",
          },
          "ExtensionsGetByIdRequestUnprocessableEntityError": {
            "docs": "Unprocessable Entity",
            "status-code": 422,
            "type": "ErrorEnvelope",
          },
          "ProfilesGetByIdRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "ErrorEnvelope",
          },
          "ProfilesGetByIdRequestNotFoundError": {
            "docs": "Not Found",
            "status-code": 404,
            "type": "ErrorEnvelope",
          },
          "ProfilesGetByIdRequestUnprocessableEntityError": {
            "docs": "Unprocessable Entity",
            "status-code": 422,
            "type": "ErrorEnvelope",
          },
          "SessionsEventsRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "ErrorEnvelope",
          },
          "SessionsEventsRequestNotFoundError": {
            "docs": "Not Found",
            "status-code": 404,
            "type": "ErrorEnvelope",
          },
          "SessionsEventsRequestUnprocessableEntityError": {
            "docs": "Unprocessable Entity",
            "status-code": 422,
            "type": "ErrorEnvelope",
          },
          "SessionsGetInfoRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "ErrorEnvelope",
          },
          "SessionsGetInfoRequestNotFoundError": {
            "docs": "Not Found",
            "status-code": 404,
            "type": "ErrorEnvelope",
          },
          "SessionsGetInfoRequestUnprocessableEntityError": {
            "docs": "Unprocessable Entity",
            "status-code": 422,
            "type": "ErrorEnvelope",
          },
          "SessionsListRequestInternalServerError": {
            "docs": "Internal Server Error",
            "status-code": 500,
            "type": "ErrorEnvelope",
          },
          "SessionsListRequestNotFoundError": {
            "docs": "Not Found",
            "status-code": 404,
            "type": "ErrorEnvelope",
          },
          "SessionsListRequestUnprocessableEntityError": {
            "docs": "Unprocessable Entity",
            "status-code": 422,
            "type": "ErrorEnvelope",
          },
        },
        "types": {
          "ClientProvidedResponseMetadata": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "clientRequestId": "optional<string>",
              "timeThresholdMs": "optional<long>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "DefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "requestId": "optional<string>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorEnvelope": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "HttpStatus": "long",
              "Message": "string",
              "data": "unknown",
              "errors": "optional<list<Issue>>",
              "meta": "unknown",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ErrorMessage": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "Error code",
                "type": "string",
              },
              "event": {
                "docs": "Event name",
                "type": "string",
              },
              "message": {
                "docs": "Error message",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ExtensionV1": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "date_created": {
                "docs": "Date the extension was created",
                "type": "datetime",
              },
              "id": {
                "docs": "Unique identifier for the extension",
                "type": "string",
              },
              "name": {
                "docs": "Name of the extension",
                "type": "string",
              },
              "upload_uri": {
                "docs": "URI to upload profile data to",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ExtensionV1EnvelopeDefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "ExtensionV1",
              "errors": "optional<list<Issue>>",
              "meta": "DefaultMetaWrapper",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ExternalSessionAiResponseMetadata": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "clientProvided": "optional<ClientProvidedResponseMetadata>",
              "requestId": "optional<string>",
              "status": "ExternalSessionAiResponseMetadataStatus",
              "usage": "ExternalSessionAiResponseMetadataUsage",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ExternalSessionAiResponseMetadataStatus": {
            "enum": [
              "success",
              "partial_success",
              "failure",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ExternalSessionAiResponseMetadataUsage": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "credits": {
                "docs": "The credit usage for this request",
                "type": "long",
              },
              "id": {
                "docs": "The id of the request",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Issue": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "code": {
                "docs": "Issue code",
                "type": "optional<string>",
              },
              "details": {
                "docs": "Any associated details",
                "type": "optional<map<string, unknown>>",
              },
              "message": {
                "docs": "Message describing the issue",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListExtensionV1EnvelopeDefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "optional<list<ExtensionV1>>",
              "errors": "optional<list<Issue>>",
              "meta": "DefaultMetaWrapper",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ListProfileV1EnvelopeDefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "optional<list<ProfileV1>>",
              "errors": "optional<list<Issue>>",
              "meta": "DefaultMetaWrapper",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "LiveViewConnectionInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "airtop_browser_url": {
                "docs": "Websocket url to connect to the airtop browser",
                "type": "string",
              },
              "token": {
                "docs": "Token to connect to the airtop browser, use as a header: 'Authorization: Bearer <token>' ",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModelResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "modelResponse": "string",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ModelResponseExternalSessionAiResponseMetadataWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "ModelResponse",
              "errors": "optional<list<Issue>>",
              "meta": "ExternalSessionAiResponseMetadata",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Pagination": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "currentLimit": "long",
              "currentPage": "long",
              "finalCount": "long",
              "hasMore": "boolean",
              "initialCount": "long",
              "nextOffset": "long",
              "numberOfPages": "long",
              "totalItems": "long",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProfileV1": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "name": {
                "docs": "Name of the profile",
                "type": "string",
                "validation": {
                  "format": undefined,
                  "maxLength": 100,
                  "minLength": 1,
                  "pattern": undefined,
                },
              },
              "status": {
                "docs": "Status of the profile",
                "type": "optional<string>",
              },
              "tags": {
                "docs": "a comma separated list of tags for this profile",
                "type": "optional<list<string>>",
              },
              "upload_uri": {
                "docs": "URI to upload profile data to",
                "type": "optional<string>",
                "validation": {
                  "format": "uri",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ProfileV1EnvelopeDefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "ProfileV1",
              "errors": "optional<list<Issue>>",
              "meta": "DefaultMetaWrapper",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ScrapeModelResponse": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "modelResponse": "ScrapeResponseOutput",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ScrapeModelResponseExternalSessionAiResponseMetadataWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "ScrapeModelResponse",
              "errors": "optional<list<Issue>>",
              "meta": "ExternalSessionAiResponseMetadata",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ScrapeResponseContent": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "contentType": {
                "docs": "The mime type of content extracted from the browser window",
                "type": "string",
              },
              "text": {
                "docs": "The text content of the browser window",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "ScrapeResponseOutput": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "scrapedContent": {
                "docs": "The scraped content of the browser window",
                "type": "ScrapeResponseContent",
              },
              "selectedText": {
                "docs": "Any text that was highlighted in the browser window",
                "type": "optional<string>",
              },
              "title": {
                "docs": "The title of the browser page",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionConfig": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "persist_profile": {
                "docs": "Persist the profile",
                "type": "optional<boolean>",
              },
              "persist_profile_name": {
                "docs": "Profile name to persist resulting profile (required when persist_profile is true). Must contain A-Za-z0-9 only",
                "type": "optional<string>",
              },
              "persist_profile_tags": {
                "docs": "Profile tags",
                "type": "optional<list<string>>",
              },
              "profile_id": {
                "docs": "Id of a profile to use with this session",
                "type": "optional<string>",
              },
              "timeoutMinutes": {
                "default": 10,
                "docs": "Max length of session in minutes, after which it will terminate if not already deleted",
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1440,
                  "min": 1,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionConfigV1": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "persist_profile": {
                "docs": "Persist the profile",
                "type": "optional<boolean>",
              },
              "persist_profile_name": {
                "docs": "Profile name to persist resulting profile (required when persist_profile is true). Must contain A-Za-z0-9 only",
                "type": "optional<string>",
              },
              "persist_profile_tags": {
                "docs": "Profile tags",
                "type": "optional<list<string>>",
              },
              "profile_id": {
                "docs": "Id of a profile to use with this session",
                "type": "optional<string>",
              },
              "timeoutMinutes": {
                "default": 10,
                "docs": "Max length of session in minutes, after which it will terminate if not already deleted",
                "type": "optional<integer>",
                "validation": {
                  "exclusiveMax": undefined,
                  "exclusiveMin": undefined,
                  "max": 1440,
                  "min": 1,
                  "multipleOf": undefined,
                },
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionWithConnectionInfo": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "cdp_url": {
                "docs": "Url to connect to chrome devtools protocol port on the airtop browser. Include the header 'Authorization: Bearer <api-key>.'",
                "type": "optional<string>",
              },
              "cdp_ws_url": {
                "docs": "Websocket url to connect to CDP webSocketDebuggerUrl on the airtop browser. Include the header 'Authorization: Bearer <api-key>.'",
                "type": "optional<string>",
              },
              "chromedriver_url": {
                "docs": "Websocket url to connect to the chromedriver on the airtop browser. Include the header 'Authorization: Bearer <api-key>.'",
                "type": "optional<string>",
              },
              "configuration": {
                "docs": "Session configuration",
                "type": "SessionConfig",
              },
              "current_usage": {
                "docs": "Current usage in minutes",
                "type": "optional<long>",
              },
              "date_created": {
                "docs": "Date the session was created",
                "type": "optional<datetime>",
              },
              "id": {
                "docs": "UUID of the session",
                "type": "string",
                "validation": {
                  "format": "uuid",
                  "maxLength": undefined,
                  "minLength": undefined,
                  "pattern": undefined,
                },
              },
              "last_activity": {
                "docs": "Date of the last activity",
                "type": "optional<datetime>",
              },
              "live_view": {
                "docs": "Connection info for the live view",
                "type": "optional<LiveViewConnectionInfo>",
              },
              "status": {
                "docs": "Session status",
                "type": "string",
              },
              "url": {
                "docs": "URL of the session",
                "type": "optional<string>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionWithConnectionInfoEnvelopeDefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "SessionWithConnectionInfo",
              "errors": "optional<list<Issue>>",
              "meta": "DefaultMetaWrapper",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionsWithPagination": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "pagination": {
                "docs": "Pagination info",
                "type": "Pagination",
              },
              "sessions": {
                "docs": "List of sessions",
                "type": "optional<list<SessionWithConnectionInfo>>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionsWithPaginationEnvelopeDefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "SessionsWithPagination",
              "errors": "optional<list<Issue>>",
              "meta": "DefaultMetaWrapper",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "StatusMessage": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "event": {
                "docs": "Event name",
                "type": "string",
              },
              "eventTimeMillis": {
                "docs": "Time of the event in milliseconds since epoch",
                "type": "long",
              },
              "id": {
                "docs": "ID of the session",
                "type": "string",
              },
              "status": {
                "docs": "Status of the session",
                "type": "StatusMessageStatus",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "StatusMessageStatus": {
            "docs": "Status of the session",
            "enum": [
              "awaiting_capacity",
              "initializing",
              "running",
              "ended",
            ],
            "inline": true,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "Window": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "liveViewUrl": {
                "docs": "Url for live view session",
                "type": "string",
              },
              "token": {
                "docs": "Token for authenticating to a live view session",
                "type": "string",
              },
              "windowId": {
                "docs": "Window ID for live view session",
                "type": "string",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "WindowEnvelopeDefaultMetaWrapper": {
            "docs": undefined,
            "inline": undefined,
            "properties": {
              "data": "Window",
              "errors": "optional<list<Issue>>",
              "meta": "DefaultMetaWrapper",
              "warnings": "optional<list<Issue>>",
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "errors:
  ExtensionsGetByIdRequestNotFoundError:
    status-code: 404
    type: ErrorEnvelope
    docs: Not Found
  ExtensionsGetByIdRequestUnprocessableEntityError:
    status-code: 422
    type: ErrorEnvelope
    docs: Unprocessable Entity
  ExtensionsGetByIdRequestInternalServerError:
    status-code: 500
    type: ErrorEnvelope
    docs: Internal Server Error
  ProfilesGetByIdRequestNotFoundError:
    status-code: 404
    type: ErrorEnvelope
    docs: Not Found
  ProfilesGetByIdRequestUnprocessableEntityError:
    status-code: 422
    type: ErrorEnvelope
    docs: Unprocessable Entity
  ProfilesGetByIdRequestInternalServerError:
    status-code: 500
    type: ErrorEnvelope
    docs: Internal Server Error
  SessionsListRequestNotFoundError:
    status-code: 404
    type: ErrorEnvelope
    docs: Not Found
  SessionsListRequestUnprocessableEntityError:
    status-code: 422
    type: ErrorEnvelope
    docs: Unprocessable Entity
  SessionsListRequestInternalServerError:
    status-code: 500
    type: ErrorEnvelope
    docs: Internal Server Error
  SessionsGetInfoRequestNotFoundError:
    status-code: 404
    type: ErrorEnvelope
    docs: Not Found
  SessionsGetInfoRequestUnprocessableEntityError:
    status-code: 422
    type: ErrorEnvelope
    docs: Unprocessable Entity
  SessionsGetInfoRequestInternalServerError:
    status-code: 500
    type: ErrorEnvelope
    docs: Internal Server Error
  SessionsEventsRequestNotFoundError:
    status-code: 404
    type: ErrorEnvelope
    docs: Not Found
  SessionsEventsRequestUnprocessableEntityError:
    status-code: 422
    type: ErrorEnvelope
    docs: Unprocessable Entity
  SessionsEventsRequestInternalServerError:
    status-code: 500
    type: ErrorEnvelope
    docs: Internal Server Error
types:
  ClientProvidedResponseMetadata:
    properties:
      clientRequestId: optional<string>
      timeThresholdMs: optional<long>
    source:
      openapi: ../openapi.yml
  DefaultMetaWrapper:
    properties:
      requestId: optional<string>
    source:
      openapi: ../openapi.yml
  ErrorEnvelope:
    properties:
      HttpStatus: long
      Message: string
      data: unknown
      errors: optional<list<Issue>>
      meta: unknown
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  ErrorMessage:
    properties:
      code:
        type: string
        docs: Error code
      event:
        type: string
        docs: Event name
      message:
        type: string
        docs: Error message
    source:
      openapi: ../openapi.yml
  ExtensionV1:
    properties:
      date_created:
        type: datetime
        docs: Date the extension was created
      id:
        type: string
        docs: Unique identifier for the extension
      name:
        type: string
        docs: Name of the extension
      upload_uri:
        type: optional<string>
        docs: URI to upload profile data to
        validation:
          format: uri
    source:
      openapi: ../openapi.yml
  ExtensionV1EnvelopeDefaultMetaWrapper:
    properties:
      data: ExtensionV1
      errors: optional<list<Issue>>
      meta: DefaultMetaWrapper
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  ExternalSessionAiResponseMetadataStatus:
    enum:
      - success
      - partial_success
      - failure
    inline: true
    source:
      openapi: ../openapi.yml
  ExternalSessionAiResponseMetadata:
    properties:
      clientProvided: optional<ClientProvidedResponseMetadata>
      requestId: optional<string>
      status: ExternalSessionAiResponseMetadataStatus
      usage: ExternalSessionAiResponseMetadataUsage
    source:
      openapi: ../openapi.yml
  ExternalSessionAiResponseMetadataUsage:
    properties:
      credits:
        type: long
        docs: The credit usage for this request
      id:
        type: string
        docs: The id of the request
    source:
      openapi: ../openapi.yml
  Issue:
    properties:
      code:
        type: optional<string>
        docs: Issue code
      details:
        type: optional<map<string, unknown>>
        docs: Any associated details
      message:
        type: string
        docs: Message describing the issue
    source:
      openapi: ../openapi.yml
  ListExtensionV1EnvelopeDefaultMetaWrapper:
    properties:
      data: optional<list<ExtensionV1>>
      errors: optional<list<Issue>>
      meta: DefaultMetaWrapper
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  ListProfileV1EnvelopeDefaultMetaWrapper:
    properties:
      data: optional<list<ProfileV1>>
      errors: optional<list<Issue>>
      meta: DefaultMetaWrapper
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  LiveViewConnectionInfo:
    properties:
      airtop_browser_url:
        type: string
        docs: Websocket url to connect to the airtop browser
      token:
        type: optional<string>
        docs: >-
          Token to connect to the airtop browser, use as a header:
          'Authorization: Bearer <token>' 
    source:
      openapi: ../openapi.yml
  ModelResponse:
    properties:
      modelResponse: string
    source:
      openapi: ../openapi.yml
  ModelResponseExternalSessionAiResponseMetadataWrapper:
    properties:
      data: ModelResponse
      errors: optional<list<Issue>>
      meta: ExternalSessionAiResponseMetadata
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  Pagination:
    properties:
      currentLimit: long
      currentPage: long
      finalCount: long
      hasMore: boolean
      initialCount: long
      nextOffset: long
      numberOfPages: long
      totalItems: long
    source:
      openapi: ../openapi.yml
  ProfileV1:
    properties:
      name:
        type: string
        docs: Name of the profile
        validation:
          minLength: 1
          maxLength: 100
      status:
        type: optional<string>
        docs: Status of the profile
      tags:
        type: optional<list<string>>
        docs: a comma separated list of tags for this profile
      upload_uri:
        type: optional<string>
        docs: URI to upload profile data to
        validation:
          format: uri
    source:
      openapi: ../openapi.yml
  ProfileV1EnvelopeDefaultMetaWrapper:
    properties:
      data: ProfileV1
      errors: optional<list<Issue>>
      meta: DefaultMetaWrapper
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  ScrapeModelResponse:
    properties:
      modelResponse: ScrapeResponseOutput
    source:
      openapi: ../openapi.yml
  ScrapeModelResponseExternalSessionAiResponseMetadataWrapper:
    properties:
      data: ScrapeModelResponse
      errors: optional<list<Issue>>
      meta: ExternalSessionAiResponseMetadata
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  ScrapeResponseContent:
    properties:
      contentType:
        type: string
        docs: The mime type of content extracted from the browser window
      text:
        type: string
        docs: The text content of the browser window
    source:
      openapi: ../openapi.yml
  ScrapeResponseOutput:
    properties:
      scrapedContent:
        type: ScrapeResponseContent
        docs: The scraped content of the browser window
      selectedText:
        type: optional<string>
        docs: Any text that was highlighted in the browser window
      title:
        type: string
        docs: The title of the browser page
    source:
      openapi: ../openapi.yml
  SessionConfig:
    properties:
      persist_profile:
        type: optional<boolean>
        docs: Persist the profile
      persist_profile_name:
        type: optional<string>
        docs: >-
          Profile name to persist resulting profile (required when
          persist_profile is true). Must contain A-Za-z0-9 only
      persist_profile_tags:
        type: optional<list<string>>
        docs: Profile tags
      profile_id:
        type: optional<string>
        docs: Id of a profile to use with this session
      timeoutMinutes:
        type: optional<integer>
        docs: >-
          Max length of session in minutes, after which it will terminate if not
          already deleted
        default: 10
        validation:
          min: 1
          max: 1440
    source:
      openapi: ../openapi.yml
  SessionConfigV1:
    properties:
      persist_profile:
        type: optional<boolean>
        docs: Persist the profile
      persist_profile_name:
        type: optional<string>
        docs: >-
          Profile name to persist resulting profile (required when
          persist_profile is true). Must contain A-Za-z0-9 only
      persist_profile_tags:
        type: optional<list<string>>
        docs: Profile tags
      profile_id:
        type: optional<string>
        docs: Id of a profile to use with this session
      timeoutMinutes:
        type: optional<integer>
        docs: >-
          Max length of session in minutes, after which it will terminate if not
          already deleted
        default: 10
        validation:
          min: 1
          max: 1440
    source:
      openapi: ../openapi.yml
  SessionWithConnectionInfo:
    properties:
      cdp_url:
        type: optional<string>
        docs: >-
          Url to connect to chrome devtools protocol port on the airtop browser.
          Include the header 'Authorization: Bearer <api-key>.'
      cdp_ws_url:
        type: optional<string>
        docs: >-
          Websocket url to connect to CDP webSocketDebuggerUrl on the airtop
          browser. Include the header 'Authorization: Bearer <api-key>.'
      chromedriver_url:
        type: optional<string>
        docs: >-
          Websocket url to connect to the chromedriver on the airtop browser.
          Include the header 'Authorization: Bearer <api-key>.'
      configuration:
        type: SessionConfig
        docs: Session configuration
      current_usage:
        type: optional<long>
        docs: Current usage in minutes
      date_created:
        type: optional<datetime>
        docs: Date the session was created
      id:
        type: string
        docs: UUID of the session
        validation:
          format: uuid
      last_activity:
        type: optional<datetime>
        docs: Date of the last activity
      live_view:
        type: optional<LiveViewConnectionInfo>
        docs: Connection info for the live view
      status:
        type: string
        docs: Session status
      url:
        type: optional<string>
        docs: URL of the session
    source:
      openapi: ../openapi.yml
  SessionWithConnectionInfoEnvelopeDefaultMetaWrapper:
    properties:
      data: SessionWithConnectionInfo
      errors: optional<list<Issue>>
      meta: DefaultMetaWrapper
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  SessionsWithPagination:
    properties:
      pagination:
        type: Pagination
        docs: Pagination info
      sessions:
        type: optional<list<SessionWithConnectionInfo>>
        docs: List of sessions
    source:
      openapi: ../openapi.yml
  SessionsWithPaginationEnvelopeDefaultMetaWrapper:
    properties:
      data: SessionsWithPagination
      errors: optional<list<Issue>>
      meta: DefaultMetaWrapper
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
  StatusMessageStatus:
    enum:
      - awaiting_capacity
      - initializing
      - running
      - ended
    docs: Status of the session
    inline: true
    source:
      openapi: ../openapi.yml
  StatusMessage:
    properties:
      event:
        type: string
        docs: Event name
      eventTimeMillis:
        type: long
        docs: Time of the event in milliseconds since epoch
      id:
        type: string
        docs: ID of the session
      status:
        type: StatusMessageStatus
        docs: Status of the session
    source:
      openapi: ../openapi.yml
  Window:
    properties:
      liveViewUrl:
        type: string
        docs: Url for live view session
      token:
        type: string
        docs: Token for authenticating to a live view session
      windowId:
        type: string
        docs: Window ID for live view session
    source:
      openapi: ../openapi.yml
  WindowEnvelopeDefaultMetaWrapper:
    properties:
      data: Window
      errors: optional<list<Issue>>
      meta: DefaultMetaWrapper
      warnings: optional<list<Issue>>
    source:
      openapi: ../openapi.yml
",
    },
    "auth.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "andRedirect": {
              "auth": false,
              "display-name": "Auth and redirect sessions",
              "docs": "Auth and redirect sessions by ID",
              "examples": [
                {},
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/auth",
              "request": {
                "headers": {
                  "x-call-type": {
                    "docs": "call type, e.g. CHROMEDRIVER_EXTERNAL",
                    "name": "callType",
                    "type": "optional<string>",
                  },
                  "x-session-id": {
                    "docs": "session id",
                    "name": "sessionId",
                    "type": "optional<string>",
                  },
                },
                "name": "AuthAndRedirectRequest",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "service:
  auth: false
  base-path: ''
  endpoints:
    andRedirect:
      path: /auth
      method: GET
      auth: false
      docs: Auth and redirect sessions by ID
      source:
        openapi: ../openapi.yml
      display-name: Auth and redirect sessions
      request:
        name: AuthAndRedirectRequest
        headers:
          x-session-id:
            type: optional<string>
            name: sessionId
            docs: session id
          x-call-type:
            type: optional<string>
            name: callType
            docs: call type, e.g. CHROMEDRIVER_EXTERNAL
      examples:
        - {}
  source:
    openapi: ../openapi.yml
",
    },
    "extensions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "audiences": [
                "beta",
              ],
              "auth": false,
              "display-name": "Delete extensions matching name query",
              "docs": "Delete an extension by ID",
              "examples": [
                {
                  "query-parameters": {
                    "name": "Widget",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/extensions",
              "request": {
                "name": "ExtensionsDeleteRequest",
                "query-parameters": {
                  "name": {
                    "docs": "Name to search for, supports regex, case insensitive",
                    "type": "optional<string>",
                  },
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "audiences": [
                "beta",
              ],
              "auth": false,
              "display-name": "Get extensions",
              "docs": "Get extensions, searching by name",
              "examples": [
                {
                  "query-parameters": {
                    "name": "Widget",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "date_created": "2024-01-15T09:30:00Z",
                          "id": "73df0106-1781-4b03-a288-e749e1a43481",
                          "name": "Special Widget",
                          "upload_uri": "upload_uri",
                        },
                      ],
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/extensions",
              "request": {
                "name": "ExtensionsGetRequest",
                "query-parameters": {
                  "name": {
                    "docs": "Name to search for, supports regex, case insensitive",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.ListExtensionV1EnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getById": {
              "audiences": [
                "beta",
              ],
              "auth": false,
              "display-name": "Get an extension",
              "docs": "Get an extension by ID",
              "errors": [
                "root.ExtensionsGetByIdRequestNotFoundError",
                "root.ExtensionsGetByIdRequestUnprocessableEntityError",
                "root.ExtensionsGetByIdRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "4a61a55c-391b-4f73-957e-ffbd29ac7cba",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "date_created": "2024-01-15T09:30:00Z",
                        "id": "73df0106-1781-4b03-a288-e749e1a43481",
                        "name": "Special Widget",
                        "upload_uri": "upload_uri",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/extensions/{id}",
              "path-parameters": {
                "id": {
                  "docs": "UUID of the profile to get",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.ExtensionV1EnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post": {
              "audiences": [
                "beta",
              ],
              "auth": false,
              "display-name": "Create an extension",
              "docs": undefined,
              "examples": [
                {
                  "request": {
                    "name": "Special Widget",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "date_created": "2024-01-15T09:30:00Z",
                        "id": "73df0106-1781-4b03-a288-e749e1a43481",
                        "name": "Special Widget",
                        "upload_uri": "upload_uri",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/extensions",
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "Name of the extension",
                      "type": "string",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ExtensionsPostRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.ExtensionV1EnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /extensions
      method: GET
      auth: false
      docs: Get extensions, searching by name
      source:
        openapi: ../openapi.yml
      display-name: Get extensions
      request:
        name: ExtensionsGetRequest
        query-parameters:
          name:
            type: optional<string>
            docs: Name to search for, supports regex, case insensitive
      response:
        docs: OK
        type: root.ListExtensionV1EnvelopeDefaultMetaWrapper
        status-code: 200
      examples:
        - query-parameters:
            name: Widget
          response:
            body:
              data:
                - date_created: '2024-01-15T09:30:00Z'
                  id: 73df0106-1781-4b03-a288-e749e1a43481
                  name: Special Widget
                  upload_uri: upload_uri
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - beta
    post:
      path: /extensions
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      display-name: Create an extension
      request:
        name: ExtensionsPostRequest
        body:
          properties:
            name:
              type: string
              docs: Name of the extension
        content-type: application/json
      response:
        docs: Created
        type: root.ExtensionV1EnvelopeDefaultMetaWrapper
        status-code: 201
      examples:
        - request:
            name: Special Widget
          response:
            body:
              data:
                date_created: '2024-01-15T09:30:00Z'
                id: 73df0106-1781-4b03-a288-e749e1a43481
                name: Special Widget
                upload_uri: upload_uri
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - beta
    delete:
      path: /extensions
      method: DELETE
      auth: false
      docs: Delete an extension by ID
      source:
        openapi: ../openapi.yml
      display-name: Delete extensions matching name query
      request:
        name: ExtensionsDeleteRequest
        query-parameters:
          name:
            type: optional<string>
            docs: Name to search for, supports regex, case insensitive
      examples:
        - query-parameters:
            name: Widget
      audiences:
        - beta
    getById:
      path: /extensions/{id}
      method: GET
      auth: false
      docs: Get an extension by ID
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: UUID of the profile to get
      display-name: Get an extension
      response:
        docs: OK
        type: root.ExtensionV1EnvelopeDefaultMetaWrapper
        status-code: 200
      errors:
        - root.ExtensionsGetByIdRequestNotFoundError
        - root.ExtensionsGetByIdRequestUnprocessableEntityError
        - root.ExtensionsGetByIdRequestInternalServerError
      examples:
        - path-parameters:
            id: 4a61a55c-391b-4f73-957e-ffbd29ac7cba
          response:
            body:
              data:
                date_created: '2024-01-15T09:30:00Z'
                id: 73df0106-1781-4b03-a288-e749e1a43481
                name: Special Widget
                upload_uri: upload_uri
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - beta
  source:
    openapi: ../openapi.yml
",
    },
    "profiles.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "delete": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Delete profiles matching query",
              "docs": "Delete profiles matching query",
              "examples": [
                {
                  "query-parameters": {
                    "name": "^Acme.*",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/profiles",
              "request": {
                "name": "ProfilesDeleteRequest",
                "query-parameters": {
                  "name": {
                    "docs": "Name to search for, supports regex, case insensitive",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "allow-multiple": true,
                    "docs": "a comma separated list of tags to filter by (joined by OR, e.g. tag is red OR blue)",
                    "type": "optional<string>",
                  },
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "get": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Get profiles",
              "docs": "Get profiles, searching by name or tags",
              "examples": [
                {
                  "query-parameters": {
                    "name": "^Acme.*",
                  },
                  "response": {
                    "body": {
                      "data": [
                        {
                          "name": "Acme corp login",
                          "status": "status",
                          "tags": [
                            "blue",
                            "red",
                          ],
                          "upload_uri": "upload_uri",
                        },
                      ],
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/profiles",
              "request": {
                "name": "ProfilesGetRequest",
                "query-parameters": {
                  "name": {
                    "docs": "Name to search for, supports regex, case insensitive",
                    "type": "optional<string>",
                  },
                  "tags": {
                    "allow-multiple": true,
                    "docs": "a comma separated list of tags to filter by (joined by OR, e.g. tag is red OR blue)",
                    "type": "optional<string>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.ListProfileV1EnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getById": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Get a profile",
              "docs": "Get a profile by ID",
              "errors": [
                "root.ProfilesGetByIdRequestNotFoundError",
                "root.ProfilesGetByIdRequestUnprocessableEntityError",
                "root.ProfilesGetByIdRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "4a61a55c-391b-4f73-957e-ffbd29ac7cba",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "name": "Acme corp login",
                        "status": "status",
                        "tags": [
                          "blue",
                          "red",
                        ],
                        "upload_uri": "upload_uri",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/profiles/{id}",
              "path-parameters": {
                "id": {
                  "docs": "name of the profile to get",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.ProfileV1EnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post": {
              "audiences": [
                "beta",
              ],
              "auth": false,
              "display-name": "Create a profile",
              "docs": undefined,
              "examples": [
                {
                  "request": {
                    "name": "Acme corp login",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "name": "Acme corp login",
                        "status": "status",
                        "tags": [
                          "blue",
                          "red",
                        ],
                        "upload_uri": "upload_uri",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/profiles",
              "request": {
                "body": {
                  "properties": {
                    "name": {
                      "docs": "Name of the Profile",
                      "type": "string",
                      "validation": {
                        "format": undefined,
                        "maxLength": 100,
                        "minLength": 1,
                        "pattern": undefined,
                      },
                    },
                    "tags": {
                      "docs": "a comma separated list of tags for this profile",
                      "type": "optional<list<string>>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "ProfileInput",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.ProfileV1EnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /profiles
      method: GET
      auth: false
      docs: Get profiles, searching by name or tags
      source:
        openapi: ../openapi.yml
      display-name: Get profiles
      request:
        name: ProfilesGetRequest
        query-parameters:
          name:
            type: optional<string>
            docs: Name to search for, supports regex, case insensitive
          tags:
            type: optional<string>
            allow-multiple: true
            docs: >-
              a comma separated list of tags to filter by (joined by OR, e.g.
              tag is red OR blue)
      response:
        docs: OK
        type: root.ListProfileV1EnvelopeDefaultMetaWrapper
        status-code: 200
      examples:
        - query-parameters:
            name: ^Acme.*
          response:
            body:
              data:
                - name: Acme corp login
                  status: status
                  tags:
                    - blue
                    - red
                  upload_uri: upload_uri
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
    post:
      path: /profiles
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      display-name: Create a profile
      request:
        name: ProfileInput
        body:
          properties:
            name:
              type: string
              docs: Name of the Profile
              validation:
                minLength: 1
                maxLength: 100
            tags:
              type: optional<list<string>>
              docs: a comma separated list of tags for this profile
        content-type: application/json
      response:
        docs: Created
        type: root.ProfileV1EnvelopeDefaultMetaWrapper
        status-code: 201
      examples:
        - request:
            name: Acme corp login
          response:
            body:
              data:
                name: Acme corp login
                status: status
                tags:
                  - blue
                  - red
                upload_uri: upload_uri
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - beta
    delete:
      path: /profiles
      method: DELETE
      auth: false
      docs: Delete profiles matching query
      source:
        openapi: ../openapi.yml
      display-name: Delete profiles matching query
      request:
        name: ProfilesDeleteRequest
        query-parameters:
          name:
            type: optional<string>
            docs: Name to search for, supports regex, case insensitive
          tags:
            type: optional<string>
            allow-multiple: true
            docs: >-
              a comma separated list of tags to filter by (joined by OR, e.g.
              tag is red OR blue)
      examples:
        - query-parameters:
            name: ^Acme.*
      audiences:
        - public
    getById:
      path: /profiles/{id}
      method: GET
      auth: false
      docs: Get a profile by ID
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: name of the profile to get
      display-name: Get a profile
      response:
        docs: OK
        type: root.ProfileV1EnvelopeDefaultMetaWrapper
        status-code: 200
      errors:
        - root.ProfilesGetByIdRequestNotFoundError
        - root.ProfilesGetByIdRequestUnprocessableEntityError
        - root.ProfilesGetByIdRequestInternalServerError
      examples:
        - path-parameters:
            id: 4a61a55c-391b-4f73-957e-ffbd29ac7cba
          response:
            body:
              data:
                name: Acme corp login
                status: status
                tags:
                  - blue
                  - red
                upload_uri: upload_uri
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
  source:
    openapi: ../openapi.yml
",
    },
    "sessions.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "events": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Get a session event stream",
              "docs": "Get a session event stream for a given session ID",
              "errors": [
                "root.SessionsEventsRequestNotFoundError",
                "root.SessionsEventsRequestUnprocessableEntityError",
                "root.SessionsEventsRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                  },
                  "response": {
                    "stream": [
                      {
                        "data": {
                          "data": {
                            "code": "code",
                            "event": "event",
                            "message": "message",
                          },
                          "event": "error",
                          "id": 1,
                          "retry": 1,
                        },
                        "event": "",
                      },
                    ],
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/sessions/{id}/events",
              "path-parameters": {
                "id": {
                  "docs": "UUID of the session to get status info for",
                  "type": "string",
                },
              },
              "response-stream": {
                "docs": "OK",
                "format": "sse",
                "type": "SessionsEventsResponse",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "getinfo": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Get info for a session",
              "docs": "Get a session by ID",
              "errors": [
                "root.SessionsGetInfoRequestNotFoundError",
                "root.SessionsGetInfoRequestUnprocessableEntityError",
                "root.SessionsGetInfoRequestInternalServerError",
              ],
              "examples": [
                {
                  "path-parameters": {
                    "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "cdp_url": "cdp_url",
                        "cdp_ws_url": "cdp_ws_url",
                        "chromedriver_url": "chromedriver_url",
                        "configuration": {
                          "persist_profile": true,
                          "persist_profile_name": "default",
                          "persist_profile_tags": [
                            "persist_profile_tags",
                          ],
                          "profile_id": "linkedin",
                          "timeoutMinutes": 10,
                        },
                        "current_usage": 1000000,
                        "date_created": "2024-01-15T09:30:00Z",
                        "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                        "last_activity": "2024-01-15T09:30:00Z",
                        "live_view": {
                          "airtop_browser_url": "airtop_browser_url",
                          "token": "token",
                        },
                        "status": "active",
                        "url": "url",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/sessions/{id}",
              "path-parameters": {
                "id": {
                  "docs": "UUID of the session to get",
                  "type": "string",
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SessionWithConnectionInfoEnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "list": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Get a list of sessions",
              "docs": "Get a list of sessions by ID",
              "errors": [
                "root.SessionsListRequestNotFoundError",
                "root.SessionsListRequestUnprocessableEntityError",
                "root.SessionsListRequestInternalServerError",
              ],
              "examples": [
                {
                  "query-parameters": {
                    "limit": 10,
                    "offset": 1,
                  },
                  "response": {
                    "body": {
                      "data": {
                        "pagination": {
                          "currentLimit": 1000000,
                          "currentPage": 1000000,
                          "finalCount": 1000000,
                          "hasMore": true,
                          "initialCount": 1000000,
                          "nextOffset": 1000000,
                          "numberOfPages": 1000000,
                          "totalItems": 1000000,
                        },
                        "sessions": [
                          {
                            "configuration": {
                              "persist_profile": true,
                              "persist_profile_name": "default",
                              "profile_id": "linkedin",
                              "timeoutMinutes": 10,
                            },
                            "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                            "status": "active",
                          },
                        ],
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/sessions",
              "request": {
                "name": "SessionsListRequest",
                "query-parameters": {
                  "limit": {
                    "default": 0,
                    "docs": "limit for pagination",
                    "type": "optional<long>",
                  },
                  "offset": {
                    "default": -1,
                    "docs": "offset for pagination",
                    "type": "optional<long>",
                  },
                  "sessionIds": {
                    "allow-multiple": true,
                    "docs": "a comma separated list of UUIDs of the session to get",
                    "type": "optional<string>",
                  },
                  "status": {
                    "docs": "status of the session to get",
                    "type": "optional<SessionsListRequestStatus>",
                  },
                },
              },
              "response": {
                "docs": "OK",
                "status-code": 200,
                "type": "root.SessionsWithPaginationEnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "post": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Create a session",
              "docs": undefined,
              "examples": [
                {
                  "request": {},
                  "response": {
                    "body": {
                      "data": {
                        "cdp_url": "cdp_url",
                        "cdp_ws_url": "cdp_ws_url",
                        "chromedriver_url": "chromedriver_url",
                        "configuration": {
                          "persist_profile": true,
                          "persist_profile_name": "default",
                          "persist_profile_tags": [
                            "persist_profile_tags",
                          ],
                          "profile_id": "linkedin",
                          "timeoutMinutes": 10,
                        },
                        "current_usage": 1000000,
                        "date_created": "2024-01-15T09:30:00Z",
                        "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                        "last_activity": "2024-01-15T09:30:00Z",
                        "live_view": {
                          "airtop_browser_url": "airtop_browser_url",
                          "token": "token",
                        },
                        "status": "active",
                        "url": "url",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/sessions",
              "request": {
                "body": {
                  "properties": {
                    "configuration": {
                      "docs": "Session configuration",
                      "type": "optional<root.SessionConfigV1>",
                    },
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SessionRestInputV1",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.SessionWithConnectionInfoEnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "terminate": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Ends a session",
              "docs": "Ends a session by ID. If a given session id does not exist within the organization, it is ignored.",
              "examples": [
                {
                  "path-parameters": {
                    "id": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                  },
                },
              ],
              "method": "DELETE",
              "pagination": undefined,
              "path": "/sessions/{id}",
              "path-parameters": {
                "id": {
                  "docs": "UUID of the session to delete",
                  "type": "string",
                },
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
        "types": {
          "SessionsEventsResponse": {
            "availability": undefined,
            "base-properties": {},
            "discriminant": "event",
            "docs": "Each oneOf object in the array represents one possible Server Sent Events (SSE) message, serialized as UTF-8 text according to the SSE specification.",
            "encoding": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
            "union": {
              "error": {
                "type": "SessionsEventsResponseError",
              },
              "status": {
                "type": "SessionsEventsResponseStatus",
              },
            },
          },
          "SessionsEventsResponseError": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "data": "root.ErrorMessage",
              "id": {
                "docs": "The event ID.",
                "type": "optional<integer>",
              },
              "retry": {
                "docs": "The retry time in milliseconds.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionsEventsResponseStatus": {
            "docs": undefined,
            "inline": true,
            "properties": {
              "data": "root.StatusMessage",
              "id": {
                "docs": "The event ID.",
                "type": "optional<integer>",
              },
              "retry": {
                "docs": "The retry time in milliseconds.",
                "type": "optional<integer>",
              },
            },
            "source": {
              "openapi": "../openapi.yml",
            },
          },
          "SessionsListRequestStatus": {
            "docs": "status of the session to get",
            "enum": [
              "awaiting_capacity",
              "initializing",
              "running",
              "ended",
            ],
            "inline": undefined,
            "source": {
              "openapi": "../openapi.yml",
            },
          },
        },
      },
      "rawContents": "types:
  SessionsListRequestStatus:
    enum:
      - awaiting_capacity
      - initializing
      - running
      - ended
    docs: status of the session to get
    source:
      openapi: ../openapi.yml
  SessionsEventsResponseStatus:
    properties:
      data: root.StatusMessage
      id:
        type: optional<integer>
        docs: The event ID.
      retry:
        type: optional<integer>
        docs: The retry time in milliseconds.
    source:
      openapi: ../openapi.yml
    inline: true
  SessionsEventsResponseError:
    properties:
      data: root.ErrorMessage
      id:
        type: optional<integer>
        docs: The event ID.
      retry:
        type: optional<integer>
        docs: The retry time in milliseconds.
    source:
      openapi: ../openapi.yml
    inline: true
  SessionsEventsResponse:
    discriminant: event
    base-properties: {}
    docs: >-
      Each oneOf object in the array represents one possible Server Sent Events
      (SSE) message, serialized as UTF-8 text according to the SSE
      specification.
    union:
      status:
        type: SessionsEventsResponseStatus
      error:
        type: SessionsEventsResponseError
    source:
      openapi: ../openapi.yml
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /sessions
      method: GET
      auth: false
      docs: Get a list of sessions by ID
      source:
        openapi: ../openapi.yml
      display-name: Get a list of sessions
      request:
        name: SessionsListRequest
        query-parameters:
          sessionIds:
            type: optional<string>
            allow-multiple: true
            docs: a comma separated list of UUIDs of the session to get
          status:
            type: optional<SessionsListRequestStatus>
            docs: status of the session to get
          offset:
            type: optional<long>
            default: -1
            docs: offset for pagination
          limit:
            type: optional<long>
            default: 0
            docs: limit for pagination
      response:
        docs: OK
        type: root.SessionsWithPaginationEnvelopeDefaultMetaWrapper
        status-code: 200
      errors:
        - root.SessionsListRequestNotFoundError
        - root.SessionsListRequestUnprocessableEntityError
        - root.SessionsListRequestInternalServerError
      examples:
        - query-parameters:
            offset: 1
            limit: 10
          response:
            body:
              data:
                pagination:
                  currentLimit: 1000000
                  currentPage: 1000000
                  finalCount: 1000000
                  hasMore: true
                  initialCount: 1000000
                  nextOffset: 1000000
                  numberOfPages: 1000000
                  totalItems: 1000000
                sessions:
                  - configuration:
                      persist_profile: true
                      persist_profile_name: default
                      profile_id: linkedin
                      timeoutMinutes: 10
                    id: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
                    status: active
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
    post:
      path: /sessions
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      display-name: Create a session
      request:
        name: SessionRestInputV1
        body:
          properties:
            configuration:
              type: optional<root.SessionConfigV1>
              docs: Session configuration
        content-type: application/json
      response:
        docs: Created
        type: root.SessionWithConnectionInfoEnvelopeDefaultMetaWrapper
        status-code: 201
      examples:
        - request: {}
          response:
            body:
              data:
                cdp_url: cdp_url
                cdp_ws_url: cdp_ws_url
                chromedriver_url: chromedriver_url
                configuration:
                  persist_profile: true
                  persist_profile_name: default
                  persist_profile_tags:
                    - persist_profile_tags
                  profile_id: linkedin
                  timeoutMinutes: 10
                current_usage: 1000000
                date_created: '2024-01-15T09:30:00Z'
                id: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
                last_activity: '2024-01-15T09:30:00Z'
                live_view:
                  airtop_browser_url: airtop_browser_url
                  token: token
                status: active
                url: url
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
    getinfo:
      path: /sessions/{id}
      method: GET
      auth: false
      docs: Get a session by ID
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: UUID of the session to get
      display-name: Get info for a session
      response:
        docs: OK
        type: root.SessionWithConnectionInfoEnvelopeDefaultMetaWrapper
        status-code: 200
      errors:
        - root.SessionsGetInfoRequestNotFoundError
        - root.SessionsGetInfoRequestUnprocessableEntityError
        - root.SessionsGetInfoRequestInternalServerError
      examples:
        - path-parameters:
            id: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
          response:
            body:
              data:
                cdp_url: cdp_url
                cdp_ws_url: cdp_ws_url
                chromedriver_url: chromedriver_url
                configuration:
                  persist_profile: true
                  persist_profile_name: default
                  persist_profile_tags:
                    - persist_profile_tags
                  profile_id: linkedin
                  timeoutMinutes: 10
                current_usage: 1000000
                date_created: '2024-01-15T09:30:00Z'
                id: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
                last_activity: '2024-01-15T09:30:00Z'
                live_view:
                  airtop_browser_url: airtop_browser_url
                  token: token
                status: active
                url: url
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
    terminate:
      path: /sessions/{id}
      method: DELETE
      auth: false
      docs: >-
        Ends a session by ID. If a given session id does not exist within the
        organization, it is ignored.
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: UUID of the session to delete
      display-name: Ends a session
      examples:
        - path-parameters:
            id: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
      audiences:
        - public
    events:
      path: /sessions/{id}/events
      method: GET
      auth: false
      docs: Get a session event stream for a given session ID
      source:
        openapi: ../openapi.yml
      path-parameters:
        id:
          type: string
          docs: UUID of the session to get status info for
      display-name: Get a session event stream
      response-stream:
        docs: OK
        type: SessionsEventsResponse
        format: sse
      errors:
        - root.SessionsEventsRequestNotFoundError
        - root.SessionsEventsRequestUnprocessableEntityError
        - root.SessionsEventsRequestInternalServerError
      examples:
        - path-parameters:
            id: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
          response:
            stream:
              - event: ''
                data:
                  event: error
                  data:
                    code: code
                    event: event
                    message: message
                  id: 1
                  retry: 1
      audiences:
        - public
  source:
    openapi: ../openapi.yml
",
    },
    "windows.yml": {
      "absoluteFilepath": "/DUMMY_PATH",
      "contents": {
        "imports": {
          "root": "__package__.yml",
        },
        "service": {
          "auth": false,
          "base-path": "",
          "endpoints": {
            "get-window-info": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Get information about a browser window in a session",
              "docs": undefined,
              "examples": [
                {
                  "path-parameters": {
                    "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                    "windowId": "7334da2a-91b0-42c5-6156-76a5eba87430",
                  },
                  "query-parameters": {
                    "Screen resolution": "1920x1080",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "liveViewUrl": "liveViewUrl",
                        "token": "token",
                        "windowId": "windowId",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "requestId": "requestId",
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/sessions/{sessionId}/windows/{windowId}/get-window-info",
              "path-parameters": {
                "sessionId": {
                  "docs": "UUID of the session that owns the window",
                  "type": "string",
                },
                "windowId": {
                  "docs": "id of the browser window, either the windowId (uuid) or targetId (simple string)",
                  "type": "string",
                },
              },
              "request": {
                "name": "GetWindowInfoRequest",
                "query-parameters": {
                  "Screen resolution": {
                    "docs": "Ex: Screen resolution of the live view in format wxh, e.g. 1920x1080. When this value is provided the live view won't adapt it's resolution to the live view window size",
                    "type": "optional<string>",
                  },
                  "disableResize": {
                    "docs": "By default browsers will adapt its resolution to the live view window size. This flag disables that behavior",
                    "type": "optional<boolean>",
                  },
                  "includeNavigationBar": {
                    "docs": "Renders a navigation bar as part of the live view session",
                    "type": "optional<boolean>",
                  },
                },
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.WindowEnvelopeDefaultMetaWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "prompt-content": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Submit a prompt about the content in a specific browser window.",
              "docs": undefined,
              "examples": [
                {
                  "path-parameters": {
                    "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                    "windowId": "0334da2a-91b0-42c5-6156-76a5eba87430",
                  },
                  "request": {
                    "prompt": "What is the main idea of this page?",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "modelResponse": "modelResponse",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "clientProvided": {
                          "clientRequestId": "clientRequestId",
                          "timeThresholdMs": 1000000,
                        },
                        "requestId": "requestId",
                        "status": "success",
                        "usage": {
                          "credits": 1000000,
                          "id": "id",
                        },
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/sessions/{sessionId}/windows/{windowId}/prompt-content",
              "path-parameters": {
                "sessionId": {
                  "docs": "The session id to submit a prompt about",
                  "type": "string",
                },
                "windowId": {
                  "docs": "The window id to submit a prompt about",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "clientRequestId": "optional<string>",
                    "costThresholdCredits": "optional<float>",
                    "followPaginationLinks": {
                      "default": false,
                      "docs": "Whether to follow pagination links in the content and load additional results",
                      "type": "optional<boolean>",
                    },
                    "prompt": {
                      "docs": "The prompt to submit about the content in the browser window",
                      "type": "string",
                    },
                    "timeThresholdSeconds": "optional<long>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "PromptContentRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.ModelResponseExternalSessionAiResponseMetadataWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "scrape-content": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Scrape a window",
              "docs": undefined,
              "examples": [
                {
                  "path-parameters": {
                    "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                    "windowId": "0334da2a-91b0-42c5-6156-76a5eba87430",
                  },
                  "response": {
                    "body": {
                      "data": {
                        "modelResponse": {
                          "scrapedContent": {
                            "contentType": "contentType",
                            "text": "text",
                          },
                          "selectedText": "selectedText",
                          "title": "title",
                        },
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "clientProvided": {
                          "clientRequestId": "clientRequestId",
                          "timeThresholdMs": 1000000,
                        },
                        "requestId": "requestId",
                        "status": "success",
                        "usage": {
                          "credits": 1000000,
                          "id": "id",
                        },
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "GET",
              "pagination": undefined,
              "path": "/sessions/{sessionId}/windows/{windowId}/scrape-content",
              "path-parameters": {
                "sessionId": {
                  "docs": "The session id to scrape",
                  "type": "string",
                },
                "windowId": {
                  "docs": "The window id to scrape",
                  "type": "string",
                },
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.ScrapeModelResponseExternalSessionAiResponseMetadataWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
            "summarize-content": {
              "audiences": [
                "public",
              ],
              "auth": false,
              "display-name": "Get a summary of content in a browser window",
              "docs": undefined,
              "examples": [
                {
                  "path-parameters": {
                    "sessionId": "6aac6f73-bd89-4a76-ab32-5a6c422e8b0b",
                    "windowId": "0334da2a-91b0-42c5-6156-76a5eba87430",
                  },
                  "request": {},
                  "response": {
                    "body": {
                      "data": {
                        "modelResponse": "modelResponse",
                      },
                      "errors": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                      "meta": {
                        "clientProvided": {
                          "clientRequestId": "clientRequestId",
                          "timeThresholdMs": 1000000,
                        },
                        "requestId": "requestId",
                        "status": "success",
                        "usage": {
                          "credits": 1000000,
                          "id": "id",
                        },
                      },
                      "warnings": [
                        {
                          "code": "code",
                          "details": {
                            "key": "value",
                          },
                          "message": "message",
                        },
                      ],
                    },
                  },
                },
              ],
              "method": "POST",
              "pagination": undefined,
              "path": "/sessions/{sessionId}/windows/{windowId}/summarize-content",
              "path-parameters": {
                "sessionId": {
                  "docs": "The session id to summarize",
                  "type": "string",
                },
                "windowId": {
                  "docs": "The window id to summarize",
                  "type": "string",
                },
              },
              "request": {
                "body": {
                  "properties": {
                    "clientRequestId": "optional<string>",
                    "costThresholdCredits": "optional<float>",
                    "prompt": {
                      "docs": "The prompt to submit about the content in the browser window",
                      "type": "optional<string>",
                    },
                    "timeThresholdSeconds": "optional<long>",
                  },
                },
                "content-type": "application/json",
                "headers": undefined,
                "name": "SummarizeContentRequest",
                "path-parameters": undefined,
                "query-parameters": undefined,
              },
              "response": {
                "docs": "Created",
                "status-code": 201,
                "type": "root.ModelResponseExternalSessionAiResponseMetadataWrapper",
              },
              "source": {
                "openapi": "../openapi.yml",
              },
            },
          },
          "source": {
            "openapi": "../openapi.yml",
          },
        },
      },
      "rawContents": "imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    get-window-info:
      path: /sessions/{sessionId}/windows/{windowId}/get-window-info
      method: GET
      auth: false
      source:
        openapi: ../openapi.yml
      path-parameters:
        sessionId:
          type: string
          docs: UUID of the session that owns the window
        windowId:
          type: string
          docs: >-
            id of the browser window, either the windowId (uuid) or targetId
            (simple string)
      display-name: Get information about a browser window in a session
      request:
        name: GetWindowInfoRequest
        query-parameters:
          includeNavigationBar:
            type: optional<boolean>
            docs: Renders a navigation bar as part of the live view session
          disableResize:
            type: optional<boolean>
            docs: >-
              By default browsers will adapt its resolution to the live view
              window size. This flag disables that behavior
          Screen resolution:
            type: optional<string>
            docs: >-
              Ex: Screen resolution of the live view in format wxh, e.g.
              1920x1080. When this value is provided the live view won't adapt
              it's resolution to the live view window size
      response:
        docs: Created
        type: root.WindowEnvelopeDefaultMetaWrapper
        status-code: 201
      examples:
        - path-parameters:
            sessionId: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
            windowId: 7334da2a-91b0-42c5-6156-76a5eba87430
          query-parameters:
            Screen resolution: 1920x1080
          response:
            body:
              data:
                liveViewUrl: liveViewUrl
                token: token
                windowId: windowId
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                requestId: requestId
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
    prompt-content:
      path: /sessions/{sessionId}/windows/{windowId}/prompt-content
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      path-parameters:
        sessionId:
          type: string
          docs: The session id to submit a prompt about
        windowId:
          type: string
          docs: The window id to submit a prompt about
      display-name: Submit a prompt about the content in a specific browser window.
      request:
        name: PromptContentRequest
        body:
          properties:
            clientRequestId: optional<string>
            costThresholdCredits: optional<float>
            followPaginationLinks:
              type: optional<boolean>
              docs: >-
                Whether to follow pagination links in the content and load
                additional results
              default: false
            prompt:
              type: string
              docs: The prompt to submit about the content in the browser window
            timeThresholdSeconds: optional<long>
        content-type: application/json
      response:
        docs: Created
        type: root.ModelResponseExternalSessionAiResponseMetadataWrapper
        status-code: 201
      examples:
        - path-parameters:
            sessionId: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
            windowId: 0334da2a-91b0-42c5-6156-76a5eba87430
          request:
            prompt: What is the main idea of this page?
          response:
            body:
              data:
                modelResponse: modelResponse
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                clientProvided:
                  clientRequestId: clientRequestId
                  timeThresholdMs: 1000000
                requestId: requestId
                status: success
                usage:
                  credits: 1000000
                  id: id
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
    scrape-content:
      path: /sessions/{sessionId}/windows/{windowId}/scrape-content
      method: GET
      auth: false
      source:
        openapi: ../openapi.yml
      path-parameters:
        sessionId:
          type: string
          docs: The session id to scrape
        windowId:
          type: string
          docs: The window id to scrape
      display-name: Scrape a window
      response:
        docs: Created
        type: root.ScrapeModelResponseExternalSessionAiResponseMetadataWrapper
        status-code: 201
      examples:
        - path-parameters:
            sessionId: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
            windowId: 0334da2a-91b0-42c5-6156-76a5eba87430
          response:
            body:
              data:
                modelResponse:
                  scrapedContent:
                    contentType: contentType
                    text: text
                  selectedText: selectedText
                  title: title
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                clientProvided:
                  clientRequestId: clientRequestId
                  timeThresholdMs: 1000000
                requestId: requestId
                status: success
                usage:
                  credits: 1000000
                  id: id
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
    summarize-content:
      path: /sessions/{sessionId}/windows/{windowId}/summarize-content
      method: POST
      auth: false
      source:
        openapi: ../openapi.yml
      path-parameters:
        sessionId:
          type: string
          docs: The session id to summarize
        windowId:
          type: string
          docs: The window id to summarize
      display-name: Get a summary of content in a browser window
      request:
        name: SummarizeContentRequest
        body:
          properties:
            clientRequestId: optional<string>
            costThresholdCredits: optional<float>
            prompt:
              type: optional<string>
              docs: The prompt to submit about the content in the browser window
            timeThresholdSeconds: optional<long>
        content-type: application/json
      response:
        docs: Created
        type: root.ModelResponseExternalSessionAiResponseMetadataWrapper
        status-code: 201
      examples:
        - path-parameters:
            sessionId: 6aac6f73-bd89-4a76-ab32-5a6c422e8b0b
            windowId: 0334da2a-91b0-42c5-6156-76a5eba87430
          request: {}
          response:
            body:
              data:
                modelResponse: modelResponse
              errors:
                - code: code
                  details:
                    key: value
                  message: message
              meta:
                clientProvided:
                  clientRequestId: clientRequestId
                  timeThresholdMs: 1000000
                requestId: requestId
                status: success
                usage:
                  credits: 1000000
                  id: id
              warnings:
                - code: code
                  details:
                    key: value
                  message: message
      audiences:
        - public
  source:
    openapi: ../openapi.yml
",
    },
  },
  "packageMarkers": {},
  "rootApiFile": {
    "contents": {
      "auth": "BearerAuthScheme",
      "auth-schemes": {
        "BearerAuthScheme": {
          "scheme": "bearer",
          "token": {
            "name": "apiKey",
          },
        },
      },
      "default-environment": "Default",
      "display-name": "Browser Control API",
      "environments": {
        "Default": "https://api.airtop.ai/v1",
      },
      "error-discrimination": {
        "strategy": "status-code",
      },
      "name": "api",
    },
    "defaultUrl": undefined,
    "rawContents": "name: api
error-discrimination:
  strategy: status-code
display-name: Browser Control API
environments:
  Default: https://api.airtop.ai/v1
default-environment: Default
auth-schemes:
  BearerAuthScheme:
    scheme: bearer
    token:
      name: apiKey
auth: BearerAuthScheme
",
  },
}